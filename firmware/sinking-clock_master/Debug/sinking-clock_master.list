
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e18  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005ed4  08005ed4  00006ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f98  08005f98  00007054  2**0
                  CONTENTS
  4 .ARM          00000000  08005f98  08005f98  00007054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f98  08005f98  00007054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f98  08005f98  00006f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f9c  08005f9c  00006f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08005fa0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000054  08005ff4  00007054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08005ff4  0000722c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b1c  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d9a  00000000  00000000  0001ab98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  0001d938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8c  00000000  00000000  0001ed38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194f1  00000000  00000000  0001fcc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183d5  00000000  00000000  000391b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a202d  00000000  00000000  0005158a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f35b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c4  00000000  00000000  000f35fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000f7ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000054 	.word	0x20000054
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005ebc 	.word	0x08005ebc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000058 	.word	0x20000058
 8000100:	08005ebc 	.word	0x08005ebc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:
 */

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, uint8_t keyEnFlags) {
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	b087      	sub	sp, #28
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	2517      	movs	r5, #23
 800022c:	197b      	adds	r3, r7, r5
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	// Verify device ID
	uint8_t deviceIDRet = 0x00;
 8000238:	2616      	movs	r6, #22
 800023a:	19bb      	adds	r3, r7, r6
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]
	halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 8000240:	197c      	adds	r4, r7, r5
 8000242:	19ba      	adds	r2, r7, r6
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	0011      	movs	r1, r2
 8000248:	0018      	movs	r0, r3
 800024a:	f000 f855 	bl	80002f8 <capTouch_ReadDeviceID>
 800024e:	0003      	movs	r3, r0
 8000250:	7023      	strb	r3, [r4, #0]

	if(deviceIDRet != DEVICE_ID || halRet != HAL_OK) {
 8000252:	19bb      	adds	r3, r7, r6
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b2e      	cmp	r3, #46	@ 0x2e
 8000258:	d103      	bne.n	8000262 <capTouch_Init+0x46>
 800025a:	197b      	adds	r3, r7, r5
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <capTouch_Init+0x4a>
		return 1;
 8000262:	2301      	movs	r3, #1
 8000264:	e043      	b.n	80002ee <capTouch_Init+0xd2>
	}

	capTouch->deviceID = deviceIDRet;
 8000266:	2316      	movs	r3, #22
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	781a      	ldrb	r2, [r3, #0]
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	711a      	strb	r2, [r3, #4]

	// Force Device Recalibration
	halRet = capTouch_Recalibrate(capTouch);
 8000270:	2517      	movs	r5, #23
 8000272:	197c      	adds	r4, r7, r5
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	0018      	movs	r0, r3
 8000278:	f000 f876 	bl	8000368 <capTouch_Recalibrate>
 800027c:	0003      	movs	r3, r0
 800027e:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000280:	197b      	adds	r3, r7, r5
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <capTouch_Init+0x70>
		return 2;
 8000288:	2302      	movs	r3, #2
 800028a:	e030      	b.n	80002ee <capTouch_Init+0xd2>
	}

	// Wait until calibration sequence completes
	while(capTouch_checkCal(capTouch)) {}
 800028c:	46c0      	nop			@ (mov r8, r8)
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	0018      	movs	r0, r3
 8000292:	f000 f88b 	bl	80003ac <capTouch_checkCal>
 8000296:	1e03      	subs	r3, r0, #0
 8000298:	d1f9      	bne.n	800028e <capTouch_Init+0x72>

	// Get initial reading of channels
	uint8_t keyStatus = 0x00;
 800029a:	2115      	movs	r1, #21
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2200      	movs	r2, #0
 80002a0:	701a      	strb	r2, [r3, #0]
	halRet = capTouch_readChannels(capTouch, &keyStatus);
 80002a2:	2517      	movs	r5, #23
 80002a4:	197c      	adds	r4, r7, r5
 80002a6:	187a      	adds	r2, r7, r1
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	0011      	movs	r1, r2
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 f8b9 	bl	8000424 <capTouch_readChannels>
 80002b2:	0003      	movs	r3, r0
 80002b4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 80002b6:	197b      	adds	r3, r7, r5
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <capTouch_Init+0xa6>
		return 3;
 80002be:	2303      	movs	r3, #3
 80002c0:	e015      	b.n	80002ee <capTouch_Init+0xd2>
	}

	halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80002c2:	2517      	movs	r5, #23
 80002c4:	197c      	adds	r4, r7, r5
 80002c6:	1dfb      	adds	r3, r7, #7
 80002c8:	781a      	ldrb	r2, [r3, #0]
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	0011      	movs	r1, r2
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 f8e0 	bl	8000494 <capTouch_enableKeys>
 80002d4:	0003      	movs	r3, r0
 80002d6:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 80002d8:	197b      	adds	r3, r7, r5
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <capTouch_Init+0xc8>
		return 4;
 80002e0:	2304      	movs	r3, #4
 80002e2:	e004      	b.n	80002ee <capTouch_Init+0xd2>
	}
	capTouch->keys = keyEnFlags;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	1dfa      	adds	r2, r7, #7
 80002e8:	7812      	ldrb	r2, [r2, #0]
 80002ea:	715a      	strb	r2, [r3, #5]

	return 0;
 80002ec:	2300      	movs	r3, #0

}
 80002ee:	0018      	movs	r0, r3
 80002f0:	46bd      	mov	sp, r7
 80002f2:	b007      	add	sp, #28
 80002f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080002f8 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	b087      	sub	sp, #28
 80002fc:	af02      	add	r7, sp, #8
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 8000302:	260e      	movs	r6, #14
 8000304:	19bb      	adds	r3, r7, r6
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800030a:	250f      	movs	r5, #15
 800030c:	197b      	adds	r3, r7, r5
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 8000312:	210c      	movs	r1, #12
 8000314:	187b      	adds	r3, r7, r1
 8000316:	4a13      	ldr	r2, [pc, #76]	@ (8000364 <capTouch_ReadDeviceID+0x6c>)
 8000318:	7812      	ldrb	r2, [r2, #0]
 800031a:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	6818      	ldr	r0, [r3, #0]
 8000320:	197c      	adds	r4, r7, r5
 8000322:	187a      	adds	r2, r7, r1
 8000324:	2301      	movs	r3, #1
 8000326:	425b      	negs	r3, r3
 8000328:	9300      	str	r3, [sp, #0]
 800032a:	2301      	movs	r3, #1
 800032c:	2136      	movs	r1, #54	@ 0x36
 800032e:	f002 fd9d 	bl	8002e6c <HAL_I2C_Master_Transmit>
 8000332:	0003      	movs	r3, r0
 8000334:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	6818      	ldr	r0, [r3, #0]
 800033a:	197c      	adds	r4, r7, r5
 800033c:	19ba      	adds	r2, r7, r6
 800033e:	2301      	movs	r3, #1
 8000340:	425b      	negs	r3, r3
 8000342:	9300      	str	r3, [sp, #0]
 8000344:	2301      	movs	r3, #1
 8000346:	2136      	movs	r1, #54	@ 0x36
 8000348:	f002 feba 	bl	80030c0 <HAL_I2C_Master_Receive>
 800034c:	0003      	movs	r3, r0
 800034e:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 8000350:	19bb      	adds	r3, r7, r6
 8000352:	781a      	ldrb	r2, [r3, #0]
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000358:	197b      	adds	r3, r7, r5
 800035a:	781b      	ldrb	r3, [r3, #0]

}
 800035c:	0018      	movs	r0, r3
 800035e:	46bd      	mov	sp, r7
 8000360:	b005      	add	sp, #20
 8000362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000364:	08005ed4 	.word	0x08005ed4

08000368 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 8000368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036a:	b087      	sub	sp, #28
 800036c:	af02      	add	r7, sp, #8
 800036e:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000370:	210f      	movs	r1, #15
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2200      	movs	r2, #0
 8000376:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 8000378:	260c      	movs	r6, #12
 800037a:	19bb      	adds	r3, r7, r6
 800037c:	22c8      	movs	r2, #200	@ 0xc8
 800037e:	4252      	negs	r2, r2
 8000380:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	6818      	ldr	r0, [r3, #0]
 8000386:	000d      	movs	r5, r1
 8000388:	187c      	adds	r4, r7, r1
 800038a:	19ba      	adds	r2, r7, r6
 800038c:	2301      	movs	r3, #1
 800038e:	425b      	negs	r3, r3
 8000390:	9300      	str	r3, [sp, #0]
 8000392:	2302      	movs	r3, #2
 8000394:	2136      	movs	r1, #54	@ 0x36
 8000396:	f002 fd69 	bl	8002e6c <HAL_I2C_Master_Transmit>
 800039a:	0003      	movs	r3, r0
 800039c:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 800039e:	197b      	adds	r3, r7, r5
 80003a0:	781b      	ldrb	r3, [r3, #0]

}
 80003a2:	0018      	movs	r0, r3
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b005      	add	sp, #20
 80003a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080003ac <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80003ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ae:	b087      	sub	sp, #28
 80003b0:	af02      	add	r7, sp, #8
 80003b2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80003b4:	210f      	movs	r1, #15
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80003bc:	260d      	movs	r6, #13
 80003be:	19bb      	adds	r3, r7, r6
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 80003c4:	230c      	movs	r3, #12
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	4a15      	ldr	r2, [pc, #84]	@ (8000420 <capTouch_checkCal+0x74>)
 80003ca:	7812      	ldrb	r2, [r2, #0]
 80003cc:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	6818      	ldr	r0, [r3, #0]
 80003d2:	000d      	movs	r5, r1
 80003d4:	187c      	adds	r4, r7, r1
 80003d6:	230c      	movs	r3, #12
 80003d8:	18fa      	adds	r2, r7, r3
 80003da:	2301      	movs	r3, #1
 80003dc:	425b      	negs	r3, r3
 80003de:	9300      	str	r3, [sp, #0]
 80003e0:	2301      	movs	r3, #1
 80003e2:	2136      	movs	r1, #54	@ 0x36
 80003e4:	f002 fd42 	bl	8002e6c <HAL_I2C_Master_Transmit>
 80003e8:	0003      	movs	r3, r0
 80003ea:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	6818      	ldr	r0, [r3, #0]
 80003f0:	197c      	adds	r4, r7, r5
 80003f2:	19ba      	adds	r2, r7, r6
 80003f4:	2301      	movs	r3, #1
 80003f6:	425b      	negs	r3, r3
 80003f8:	9300      	str	r3, [sp, #0]
 80003fa:	2301      	movs	r3, #1
 80003fc:	2136      	movs	r1, #54	@ 0x36
 80003fe:	f002 fe5f 	bl	80030c0 <HAL_I2C_Master_Receive>
 8000402:	0003      	movs	r3, r0
 8000404:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000406:	19bb      	adds	r3, r7, r6
 8000408:	781a      	ldrb	r2, [r3, #0]
 800040a:	210e      	movs	r1, #14
 800040c:	187b      	adds	r3, r7, r1
 800040e:	09d2      	lsrs	r2, r2, #7
 8000410:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000412:	187b      	adds	r3, r7, r1
 8000414:	781b      	ldrb	r3, [r3, #0]

}
 8000416:	0018      	movs	r0, r3
 8000418:	46bd      	mov	sp, r7
 800041a:	b005      	add	sp, #20
 800041c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	08005ed8 	.word	0x08005ed8

08000424 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800042e:	250f      	movs	r5, #15
 8000430:	197b      	adds	r3, r7, r5
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000436:	260e      	movs	r6, #14
 8000438:	19bb      	adds	r3, r7, r6
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a13      	ldr	r2, [pc, #76]	@ (8000490 <capTouch_readChannels+0x6c>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f002 fd07 	bl	8002e6c <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	6818      	ldr	r0, [r3, #0]
 8000466:	197c      	adds	r4, r7, r5
 8000468:	19ba      	adds	r2, r7, r6
 800046a:	2301      	movs	r3, #1
 800046c:	425b      	negs	r3, r3
 800046e:	9300      	str	r3, [sp, #0]
 8000470:	2301      	movs	r3, #1
 8000472:	2136      	movs	r1, #54	@ 0x36
 8000474:	f002 fe24 	bl	80030c0 <HAL_I2C_Master_Receive>
 8000478:	0003      	movs	r3, r0
 800047a:	7023      	strb	r3, [r4, #0]

	*dataBuff = keyStatusRet;
 800047c:	19bb      	adds	r3, r7, r6
 800047e:	781a      	ldrb	r2, [r3, #0]
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000484:	197b      	adds	r3, r7, r5
 8000486:	781b      	ldrb	r3, [r3, #0]

}
 8000488:	0018      	movs	r0, r3
 800048a:	46bd      	mov	sp, r7
 800048c:	b005      	add	sp, #20
 800048e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000490:	08005edc 	.word	0x08005edc

08000494 <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	b08b      	sub	sp, #44	@ 0x2c
 8000498:	af02      	add	r7, sp, #8
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	000a      	movs	r2, r1
 800049e:	1cfb      	adds	r3, r7, #3
 80004a0:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004a2:	241e      	movs	r4, #30
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2200      	movs	r2, #0
 80004a8:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80004aa:	2614      	movs	r6, #20
 80004ac:	19bb      	adds	r3, r7, r6
 80004ae:	4a48      	ldr	r2, [pc, #288]	@ (80005d0 <capTouch_enableKeys+0x13c>)
 80004b0:	6811      	ldr	r1, [r2, #0]
 80004b2:	6019      	str	r1, [r3, #0]
 80004b4:	8891      	ldrh	r1, [r2, #4]
 80004b6:	8099      	strh	r1, [r3, #4]
 80004b8:	7992      	ldrb	r2, [r2, #6]
 80004ba:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 80004bc:	230c      	movs	r3, #12
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	4a44      	ldr	r2, [pc, #272]	@ (80005d4 <capTouch_enableKeys+0x140>)
 80004c2:	6811      	ldr	r1, [r2, #0]
 80004c4:	6019      	str	r1, [r3, #0]
 80004c6:	8891      	ldrh	r1, [r2, #4]
 80004c8:	8099      	strh	r1, [r3, #4]
 80004ca:	7992      	ldrb	r2, [r2, #6]
 80004cc:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	6818      	ldr	r0, [r3, #0]
 80004d2:	0025      	movs	r5, r4
 80004d4:	193c      	adds	r4, r7, r4
 80004d6:	230c      	movs	r3, #12
 80004d8:	18fa      	adds	r2, r7, r3
 80004da:	2301      	movs	r3, #1
 80004dc:	425b      	negs	r3, r3
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	2301      	movs	r3, #1
 80004e2:	2136      	movs	r1, #54	@ 0x36
 80004e4:	f002 fcc2 	bl	8002e6c <HAL_I2C_Master_Transmit>
 80004e8:	0003      	movs	r3, r0
 80004ea:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	6818      	ldr	r0, [r3, #0]
 80004f0:	197c      	adds	r4, r7, r5
 80004f2:	19ba      	adds	r2, r7, r6
 80004f4:	2301      	movs	r3, #1
 80004f6:	425b      	negs	r3, r3
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2307      	movs	r3, #7
 80004fc:	2136      	movs	r1, #54	@ 0x36
 80004fe:	f002 fddf 	bl	80030c0 <HAL_I2C_Master_Receive>
 8000502:	0003      	movs	r3, r0
 8000504:	7023      	strb	r3, [r4, #0]
	 * Populate new register values
	 * Enabled channels will be set with its previous averaging value,
	 * Disabled channels will have an averaging value of 0.
	 */
	uint8_t avgNew, i;
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000506:	2308      	movs	r3, #8
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	2200      	movs	r2, #0
 800050c:	801a      	strh	r2, [r3, #0]

	for(i = 0; i <= 6; i++) {
 800050e:	231f      	movs	r3, #31
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
 8000516:	e032      	b.n	800057e <capTouch_enableKeys+0xea>

		avgNew = avgRet[i] * ((dataBuff >> i) & 0b00000001);
 8000518:	251f      	movs	r5, #31
 800051a:	197b      	adds	r3, r7, r5
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2214      	movs	r2, #20
 8000520:	18ba      	adds	r2, r7, r2
 8000522:	5cd2      	ldrb	r2, [r2, r3]
 8000524:	1cfb      	adds	r3, r7, #3
 8000526:	7819      	ldrb	r1, [r3, #0]
 8000528:	197b      	adds	r3, r7, r5
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4119      	asrs	r1, r3
 800052e:	000b      	movs	r3, r1
 8000530:	b2db      	uxtb	r3, r3
 8000532:	2101      	movs	r1, #1
 8000534:	400b      	ands	r3, r1
 8000536:	b2d9      	uxtb	r1, r3
 8000538:	201d      	movs	r0, #29
 800053a:	183b      	adds	r3, r7, r0
 800053c:	434a      	muls	r2, r1
 800053e:	701a      	strb	r2, [r3, #0]

		avgRegNew[0] = avgRegs[i];
 8000540:	197b      	adds	r3, r7, r5
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	220c      	movs	r2, #12
 8000546:	18ba      	adds	r2, r7, r2
 8000548:	5cd2      	ldrb	r2, [r2, r3]
 800054a:	2108      	movs	r1, #8
 800054c:	187b      	adds	r3, r7, r1
 800054e:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	183a      	adds	r2, r7, r0
 8000554:	7812      	ldrb	r2, [r2, #0]
 8000556:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6818      	ldr	r0, [r3, #0]
 800055c:	231e      	movs	r3, #30
 800055e:	18fc      	adds	r4, r7, r3
 8000560:	187a      	adds	r2, r7, r1
 8000562:	2301      	movs	r3, #1
 8000564:	425b      	negs	r3, r3
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2302      	movs	r3, #2
 800056a:	2136      	movs	r1, #54	@ 0x36
 800056c:	f002 fc7e 	bl	8002e6c <HAL_I2C_Master_Transmit>
 8000570:	0003      	movs	r3, r0
 8000572:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 8000574:	197b      	adds	r3, r7, r5
 8000576:	781a      	ldrb	r2, [r3, #0]
 8000578:	197b      	adds	r3, r7, r5
 800057a:	3201      	adds	r2, #1
 800057c:	701a      	strb	r2, [r3, #0]
 800057e:	231f      	movs	r3, #31
 8000580:	18fb      	adds	r3, r7, r3
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b06      	cmp	r3, #6
 8000586:	d9c7      	bls.n	8000518 <capTouch_enableKeys+0x84>
									avgRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	6818      	ldr	r0, [r3, #0]
 800058c:	251e      	movs	r5, #30
 800058e:	197c      	adds	r4, r7, r5
 8000590:	230c      	movs	r3, #12
 8000592:	18fa      	adds	r2, r7, r3
 8000594:	2301      	movs	r3, #1
 8000596:	425b      	negs	r3, r3
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2301      	movs	r3, #1
 800059c:	2136      	movs	r1, #54	@ 0x36
 800059e:	f002 fc65 	bl	8002e6c <HAL_I2C_Master_Transmit>
 80005a2:	0003      	movs	r3, r0
 80005a4:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	197c      	adds	r4, r7, r5
 80005ac:	2314      	movs	r3, #20
 80005ae:	18fa      	adds	r2, r7, r3
 80005b0:	2301      	movs	r3, #1
 80005b2:	425b      	negs	r3, r3
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2307      	movs	r3, #7
 80005b8:	2136      	movs	r1, #54	@ 0x36
 80005ba:	f002 fd81 	bl	80030c0 <HAL_I2C_Master_Receive>
 80005be:	0003      	movs	r3, r0
 80005c0:	7023      	strb	r3, [r4, #0]

	return halRet;
 80005c2:	197b      	adds	r3, r7, r5
 80005c4:	781b      	ldrb	r3, [r3, #0]

}
 80005c6:	0018      	movs	r0, r3
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b009      	add	sp, #36	@ 0x24
 80005cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	08005ee0 	.word	0x08005ee0
 80005d4:	08005ee8 	.word	0x08005ee8

080005d8 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 80005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005da:	b08b      	sub	sp, #44	@ 0x2c
 80005dc:	af02      	add	r7, sp, #8
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80005e2:	241f      	movs	r4, #31
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80005ea:	2614      	movs	r6, #20
 80005ec:	19bb      	adds	r3, r7, r6
 80005ee:	4a3f      	ldr	r2, [pc, #252]	@ (80006ec <capTouch_SetAveragingFactor+0x114>)
 80005f0:	6811      	ldr	r1, [r2, #0]
 80005f2:	6019      	str	r1, [r3, #0]
 80005f4:	8891      	ldrh	r1, [r2, #4]
 80005f6:	8099      	strh	r1, [r3, #4]
 80005f8:	7992      	ldrb	r2, [r2, #6]
 80005fa:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 80005fc:	230c      	movs	r3, #12
 80005fe:	18fb      	adds	r3, r7, r3
 8000600:	4a3b      	ldr	r2, [pc, #236]	@ (80006f0 <capTouch_SetAveragingFactor+0x118>)
 8000602:	6811      	ldr	r1, [r2, #0]
 8000604:	6019      	str	r1, [r3, #0]
 8000606:	8891      	ldrh	r1, [r2, #4]
 8000608:	8099      	strh	r1, [r3, #4]
 800060a:	7992      	ldrb	r2, [r2, #6]
 800060c:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6818      	ldr	r0, [r3, #0]
 8000612:	0025      	movs	r5, r4
 8000614:	193c      	adds	r4, r7, r4
 8000616:	230c      	movs	r3, #12
 8000618:	18fa      	adds	r2, r7, r3
 800061a:	2301      	movs	r3, #1
 800061c:	425b      	negs	r3, r3
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2301      	movs	r3, #1
 8000622:	2136      	movs	r1, #54	@ 0x36
 8000624:	f002 fc22 	bl	8002e6c <HAL_I2C_Master_Transmit>
 8000628:	0003      	movs	r3, r0
 800062a:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	197c      	adds	r4, r7, r5
 8000632:	19ba      	adds	r2, r7, r6
 8000634:	2301      	movs	r3, #1
 8000636:	425b      	negs	r3, r3
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2307      	movs	r3, #7
 800063c:	2136      	movs	r1, #54	@ 0x36
 800063e:	f002 fd3f 	bl	80030c0 <HAL_I2C_Master_Receive>
 8000642:	0003      	movs	r3, r0
 8000644:	7023      	strb	r3, [r4, #0]


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000646:	2308      	movs	r3, #8
 8000648:	18fb      	adds	r3, r7, r3
 800064a:	2200      	movs	r2, #0
 800064c:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 800064e:	231d      	movs	r3, #29
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 8000656:	231e      	movs	r3, #30
 8000658:	18fb      	adds	r3, r7, r3
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
 800065e:	e038      	b.n	80006d2 <capTouch_SetAveragingFactor+0xfa>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 8000660:	251e      	movs	r5, #30
 8000662:	197b      	adds	r3, r7, r5
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2214      	movs	r2, #20
 8000668:	18ba      	adds	r2, r7, r2
 800066a:	5cd2      	ldrb	r2, [r2, r3]
 800066c:	201d      	movs	r0, #29
 800066e:	183b      	adds	r3, r7, r0
 8000670:	2103      	movs	r1, #3
 8000672:	400a      	ands	r2, r1
 8000674:	701a      	strb	r2, [r3, #0]
		// Set bits 0-1 with new averaging factor
		avgNew = avgNew | (*(dataBuff + i) << 2);
 8000676:	197b      	adds	r3, r7, r5
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	683a      	ldr	r2, [r7, #0]
 800067c:	18d3      	adds	r3, r2, r3
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	b25a      	sxtb	r2, r3
 8000684:	0001      	movs	r1, r0
 8000686:	187b      	adds	r3, r7, r1
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b25b      	sxtb	r3, r3
 800068c:	4313      	orrs	r3, r2
 800068e:	b25a      	sxtb	r2, r3
 8000690:	187b      	adds	r3, r7, r1
 8000692:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 8000694:	197b      	adds	r3, r7, r5
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	220c      	movs	r2, #12
 800069a:	18ba      	adds	r2, r7, r2
 800069c:	5cd2      	ldrb	r2, [r2, r3]
 800069e:	2608      	movs	r6, #8
 80006a0:	19bb      	adds	r3, r7, r6
 80006a2:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80006a4:	19bb      	adds	r3, r7, r6
 80006a6:	187a      	adds	r2, r7, r1
 80006a8:	7812      	ldrb	r2, [r2, #0]
 80006aa:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6818      	ldr	r0, [r3, #0]
 80006b0:	231f      	movs	r3, #31
 80006b2:	18fc      	adds	r4, r7, r3
 80006b4:	19ba      	adds	r2, r7, r6
 80006b6:	2301      	movs	r3, #1
 80006b8:	425b      	negs	r3, r3
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2302      	movs	r3, #2
 80006be:	2136      	movs	r1, #54	@ 0x36
 80006c0:	f002 fbd4 	bl	8002e6c <HAL_I2C_Master_Transmit>
 80006c4:	0003      	movs	r3, r0
 80006c6:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 80006c8:	197b      	adds	r3, r7, r5
 80006ca:	781a      	ldrb	r2, [r3, #0]
 80006cc:	197b      	adds	r3, r7, r5
 80006ce:	3201      	adds	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
 80006d2:	231e      	movs	r3, #30
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b06      	cmp	r3, #6
 80006da:	d9c1      	bls.n	8000660 <capTouch_SetAveragingFactor+0x88>
									avgRegNew, 2, HAL_MAX_DELAY);

	}

	return halRet;
 80006dc:	231f      	movs	r3, #31
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	781b      	ldrb	r3, [r3, #0]

}
 80006e2:	0018      	movs	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b009      	add	sp, #36	@ 0x24
 80006e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	08005ee0 	.word	0x08005ee0
 80006f0:	08005ee8 	.word	0x08005ee8

080006f4 <getRTCTime>:
				internalAlarm_initTest.AlarmTime.Minutes, internalAlarm_initTest.AlarmTime.Seconds);
	}

}

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000700:	68b9      	ldr	r1, [r7, #8]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	0018      	movs	r0, r3
 8000708:	f004 f904 	bl	8004914 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2200      	movs	r2, #0
 8000712:	0018      	movs	r0, r3
 8000714:	f004 f9ec 	bl	8004af0 <HAL_RTC_GetDate>

}
 8000718:	46c0      	nop			@ (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b004      	add	sp, #16
 800071e:	bd80      	pop	{r7, pc}

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000722:	b08b      	sub	sp, #44	@ 0x2c
 8000724:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000726:	f001 fb2b 	bl	8001d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072a:	f000 f885 	bl	8000838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072e:	f000 fad5 	bl	8000cdc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000732:	f000 f8ed 	bl	8000910 <MX_ADC1_Init>
  MX_RTC_Init();
 8000736:	f000 f997 	bl	8000a68 <MX_RTC_Init>
  MX_I2C1_Init();
 800073a:	f000 f955 	bl	80009e8 <MX_I2C1_Init>
  MX_TIM14_Init();
 800073e:	f000 faa7 	bl	8000c90 <MX_TIM14_Init>
  MX_TIM2_Init();
 8000742:	f000 fa45 	bl	8000bd0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000746:	2380      	movs	r3, #128	@ 0x80
 8000748:	009c      	lsls	r4, r3, #2
 800074a:	2380      	movs	r3, #128	@ 0x80
 800074c:	00dd      	lsls	r5, r3, #3
 800074e:	2680      	movs	r6, #128	@ 0x80
 8000750:	2340      	movs	r3, #64	@ 0x40
 8000752:	469c      	mov	ip, r3
 8000754:	2380      	movs	r3, #128	@ 0x80
 8000756:	011a      	lsls	r2, r3, #4
 8000758:	4b2f      	ldr	r3, [pc, #188]	@ (8000818 <main+0xf8>)
 800075a:	6819      	ldr	r1, [r3, #0]
 800075c:	4b2f      	ldr	r3, [pc, #188]	@ (800081c <main+0xfc>)
 800075e:	6818      	ldr	r0, [r3, #0]
 8000760:	4b2f      	ldr	r3, [pc, #188]	@ (8000820 <main+0x100>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	9304      	str	r3, [sp, #16]
 8000766:	9003      	str	r0, [sp, #12]
 8000768:	9102      	str	r1, [sp, #8]
 800076a:	4b2e      	ldr	r3, [pc, #184]	@ (8000824 <main+0x104>)
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	9200      	str	r2, [sp, #0]
 8000770:	4663      	mov	r3, ip
 8000772:	0032      	movs	r2, r6
 8000774:	0029      	movs	r1, r5
 8000776:	0020      	movs	r0, r4
 8000778:	f000 fef6 	bl	8001568 <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);

	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 800077c:	250d      	movs	r5, #13
 800077e:	197c      	adds	r4, r7, r5
 8000780:	f000 fb7e 	bl	8000e80 <updateAndDisplayTime>
 8000784:	0003      	movs	r3, r0
 8000786:	7023      	strb	r3, [r4, #0]

    /*
     * Initialize capacitive touch sensor
     */
    QT1070 capTouch;
    halRet = capTouch_Init(&capTouch, &hi2c1, 0b00001111);
 8000788:	197c      	adds	r4, r7, r5
 800078a:	4927      	ldr	r1, [pc, #156]	@ (8000828 <main+0x108>)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	220f      	movs	r2, #15
 8000790:	0018      	movs	r0, r3
 8000792:	f7ff fd43 	bl	800021c <capTouch_Init>
 8000796:	0003      	movs	r3, r0
 8000798:	7023      	strb	r3, [r4, #0]
    uint8_t avgFactors_New = {32, 32, 32, 32, 0, 0, 0};
 800079a:	210c      	movs	r1, #12
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2220      	movs	r2, #32
 80007a0:	701a      	strb	r2, [r3, #0]
    halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	001a      	movs	r2, r3
 80007a8:	197c      	adds	r4, r7, r5
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	0011      	movs	r1, r2
 80007ae:	0018      	movs	r0, r3
 80007b0:	f7ff ff12 	bl	80005d8 <capTouch_SetAveragingFactor>
 80007b4:	0003      	movs	r3, r0
 80007b6:	7023      	strb	r3, [r4, #0]

	userAlarmToggle = false;			//Default to off
 80007b8:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <main+0x10c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]

    // User alarm default value
    userAlarmTime.Hours = 1;
 80007be:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <main+0x110>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	701a      	strb	r2, [r3, #0]
    userAlarmTime.Minutes = 1;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <main+0x110>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	705a      	strb	r2, [r3, #1]
    userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80007ca:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <main+0x110>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	70da      	strb	r2, [r3, #3]

    uint16_t count = 0;
 80007d0:	230e      	movs	r3, #14
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	2200      	movs	r2, #0
 80007d6:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {

	  uint8_t channelTest = 0x00;
 80007d8:	1cfb      	adds	r3, r7, #3
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
	  halRet = capTouch_readChannels(&capTouch, &channelTest);
 80007de:	230d      	movs	r3, #13
 80007e0:	18fc      	adds	r4, r7, r3
 80007e2:	1cfa      	adds	r2, r7, #3
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	0011      	movs	r1, r2
 80007e8:	0018      	movs	r0, r3
 80007ea:	f7ff fe1b 	bl	8000424 <capTouch_readChannels>
 80007ee:	0003      	movs	r3, r0
 80007f0:	7023      	strb	r3, [r4, #0]
	  if(channelTest != 0x00) {
 80007f2:	1cfb      	adds	r3, r7, #3
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0ee      	beq.n	80007d8 <main+0xb8>
		  HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <main+0x114>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2201      	movs	r2, #1
 8000800:	0011      	movs	r1, r2
 8000802:	0018      	movs	r0, r3
 8000804:	f002 fa3c 	bl	8002c80 <HAL_GPIO_TogglePin>
		  count++;
 8000808:	210e      	movs	r1, #14
 800080a:	187b      	adds	r3, r7, r1
 800080c:	881a      	ldrh	r2, [r3, #0]
 800080e:	187b      	adds	r3, r7, r1
 8000810:	3201      	adds	r2, #1
 8000812:	801a      	strh	r2, [r3, #0]
  while (1) {
 8000814:	e7e0      	b.n	80007d8 <main+0xb8>
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	20000024 	.word	0x20000024
 800081c:	20000028 	.word	0x20000028
 8000820:	2000002c 	.word	0x2000002c
 8000824:	2000000c 	.word	0x2000000c
 8000828:	200000d8 	.word	0x200000d8
 800082c:	20000071 	.word	0x20000071
 8000830:	20000208 	.word	0x20000208
 8000834:	20000020 	.word	0x20000020

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b093      	sub	sp, #76	@ 0x4c
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	2410      	movs	r4, #16
 8000840:	193b      	adds	r3, r7, r4
 8000842:	0018      	movs	r0, r3
 8000844:	2338      	movs	r3, #56	@ 0x38
 8000846:	001a      	movs	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	f005 fb0b 	bl	8005e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084e:	003b      	movs	r3, r7
 8000850:	0018      	movs	r0, r3
 8000852:	2310      	movs	r3, #16
 8000854:	001a      	movs	r2, r3
 8000856:	2100      	movs	r1, #0
 8000858:	f005 fb04 	bl	8005e64 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800085c:	2380      	movs	r3, #128	@ 0x80
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	0018      	movs	r0, r3
 8000862:	f003 f8af 	bl	80039c4 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000866:	f003 f89f 	bl	80039a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800086a:	4b28      	ldr	r3, [pc, #160]	@ (800090c <SystemClock_Config+0xd4>)
 800086c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800086e:	4b27      	ldr	r3, [pc, #156]	@ (800090c <SystemClock_Config+0xd4>)
 8000870:	2118      	movs	r1, #24
 8000872:	438a      	bics	r2, r1
 8000874:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000876:	193b      	adds	r3, r7, r4
 8000878:	2206      	movs	r2, #6
 800087a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800087c:	193b      	adds	r3, r7, r4
 800087e:	2201      	movs	r2, #1
 8000880:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000882:	193b      	adds	r3, r7, r4
 8000884:	2280      	movs	r2, #128	@ 0x80
 8000886:	0052      	lsls	r2, r2, #1
 8000888:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800088a:	0021      	movs	r1, r4
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2240      	movs	r2, #64	@ 0x40
 8000896:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2202      	movs	r2, #2
 800089c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2202      	movs	r2, #2
 80008a2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2208      	movs	r2, #8
 80008ae:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2280      	movs	r2, #128	@ 0x80
 80008b4:	0292      	lsls	r2, r2, #10
 80008b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2280      	movs	r2, #128	@ 0x80
 80008bc:	0492      	lsls	r2, r2, #18
 80008be:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2280      	movs	r2, #128	@ 0x80
 80008c4:	0592      	lsls	r2, r2, #22
 80008c6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	0018      	movs	r0, r3
 80008cc:	f003 f8ba 	bl	8003a44 <HAL_RCC_OscConfig>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80008d4:	f000 fe42 	bl	800155c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d8:	003b      	movs	r3, r7
 80008da:	2207      	movs	r2, #7
 80008dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	003b      	movs	r3, r7
 80008e0:	2202      	movs	r2, #2
 80008e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	003b      	movs	r3, r7
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ea:	003b      	movs	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f0:	003b      	movs	r3, r7
 80008f2:	2102      	movs	r1, #2
 80008f4:	0018      	movs	r0, r3
 80008f6:	f003 fbbf 	bl	8004078 <HAL_RCC_ClockConfig>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008fe:	f000 fe2d 	bl	800155c <Error_Handler>
  }
}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b013      	add	sp, #76	@ 0x4c
 8000908:	bd90      	pop	{r4, r7, pc}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	40021000 	.word	0x40021000

08000910 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	0018      	movs	r0, r3
 800091a:	230c      	movs	r3, #12
 800091c:	001a      	movs	r2, r3
 800091e:	2100      	movs	r1, #0
 8000920:	f005 faa0 	bl	8005e64 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000924:	4b2d      	ldr	r3, [pc, #180]	@ (80009dc <MX_ADC1_Init+0xcc>)
 8000926:	4a2e      	ldr	r2, [pc, #184]	@ (80009e0 <MX_ADC1_Init+0xd0>)
 8000928:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800092a:	4b2c      	ldr	r3, [pc, #176]	@ (80009dc <MX_ADC1_Init+0xcc>)
 800092c:	2280      	movs	r2, #128	@ 0x80
 800092e:	05d2      	lsls	r2, r2, #23
 8000930:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000932:	4b2a      	ldr	r3, [pc, #168]	@ (80009dc <MX_ADC1_Init+0xcc>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000938:	4b28      	ldr	r3, [pc, #160]	@ (80009dc <MX_ADC1_Init+0xcc>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800093e:	4b27      	ldr	r3, [pc, #156]	@ (80009dc <MX_ADC1_Init+0xcc>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000944:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <MX_ADC1_Init+0xcc>)
 8000946:	2204      	movs	r2, #4
 8000948:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800094a:	4b24      	ldr	r3, [pc, #144]	@ (80009dc <MX_ADC1_Init+0xcc>)
 800094c:	2200      	movs	r2, #0
 800094e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000950:	4b22      	ldr	r3, [pc, #136]	@ (80009dc <MX_ADC1_Init+0xcc>)
 8000952:	2200      	movs	r2, #0
 8000954:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000956:	4b21      	ldr	r3, [pc, #132]	@ (80009dc <MX_ADC1_Init+0xcc>)
 8000958:	2200      	movs	r2, #0
 800095a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800095c:	4b1f      	ldr	r3, [pc, #124]	@ (80009dc <MX_ADC1_Init+0xcc>)
 800095e:	2201      	movs	r2, #1
 8000960:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000962:	4b1e      	ldr	r3, [pc, #120]	@ (80009dc <MX_ADC1_Init+0xcc>)
 8000964:	2220      	movs	r2, #32
 8000966:	2100      	movs	r1, #0
 8000968:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800096a:	4b1c      	ldr	r3, [pc, #112]	@ (80009dc <MX_ADC1_Init+0xcc>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000970:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <MX_ADC1_Init+0xcc>)
 8000972:	2200      	movs	r2, #0
 8000974:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000976:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <MX_ADC1_Init+0xcc>)
 8000978:	222c      	movs	r2, #44	@ 0x2c
 800097a:	2100      	movs	r1, #0
 800097c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800097e:	4b17      	ldr	r3, [pc, #92]	@ (80009dc <MX_ADC1_Init+0xcc>)
 8000980:	2200      	movs	r2, #0
 8000982:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000984:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <MX_ADC1_Init+0xcc>)
 8000986:	2200      	movs	r2, #0
 8000988:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800098a:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <MX_ADC1_Init+0xcc>)
 800098c:	2200      	movs	r2, #0
 800098e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000990:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <MX_ADC1_Init+0xcc>)
 8000992:	223c      	movs	r2, #60	@ 0x3c
 8000994:	2100      	movs	r1, #0
 8000996:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000998:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <MX_ADC1_Init+0xcc>)
 800099a:	2200      	movs	r2, #0
 800099c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800099e:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <MX_ADC1_Init+0xcc>)
 80009a0:	0018      	movs	r0, r3
 80009a2:	f001 fb71 	bl	8002088 <HAL_ADC_Init>
 80009a6:	1e03      	subs	r3, r0, #0
 80009a8:	d001      	beq.n	80009ae <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80009aa:	f000 fdd7 	bl	800155c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4a0c      	ldr	r2, [pc, #48]	@ (80009e4 <MX_ADC1_Init+0xd4>)
 80009b2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c0:	1d3a      	adds	r2, r7, #4
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_ADC1_Init+0xcc>)
 80009c4:	0011      	movs	r1, r2
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 fd06 	bl	80023d8 <HAL_ADC_ConfigChannel>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80009d0:	f000 fdc4 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009d4:	46c0      	nop			@ (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b004      	add	sp, #16
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000074 	.word	0x20000074
 80009e0:	40012400 	.word	0x40012400
 80009e4:	08000004 	.word	0x08000004

080009e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <MX_I2C1_Init+0x74>)
 80009ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000a60 <MX_I2C1_Init+0x78>)
 80009f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a5c <MX_I2C1_Init+0x74>)
 80009f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a64 <MX_I2C1_Init+0x7c>)
 80009f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009f8:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <MX_I2C1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fe:	4b17      	ldr	r3, [pc, #92]	@ (8000a5c <MX_I2C1_Init+0x74>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a04:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <MX_I2C1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <MX_I2C1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a10:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <MX_I2C1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a16:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <MX_I2C1_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <MX_I2C1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <MX_I2C1_Init+0x74>)
 8000a24:	0018      	movs	r0, r3
 8000a26:	f002 f97b 	bl	8002d20 <HAL_I2C_Init>
 8000a2a:	1e03      	subs	r3, r0, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a2e:	f000 fd95 	bl	800155c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a32:	4b0a      	ldr	r3, [pc, #40]	@ (8000a5c <MX_I2C1_Init+0x74>)
 8000a34:	2100      	movs	r1, #0
 8000a36:	0018      	movs	r0, r3
 8000a38:	f002 ff1e 	bl	8003878 <HAL_I2CEx_ConfigAnalogFilter>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a40:	f000 fd8c 	bl	800155c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a44:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <MX_I2C1_Init+0x74>)
 8000a46:	2100      	movs	r1, #0
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f002 ff61 	bl	8003910 <HAL_I2CEx_ConfigDigitalFilter>
 8000a4e:	1e03      	subs	r3, r0, #0
 8000a50:	d001      	beq.n	8000a56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a52:	f000 fd83 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200000d8 	.word	0x200000d8
 8000a60:	40005400 	.word	0x40005400
 8000a64:	00602173 	.word	0x00602173

08000a68 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b090      	sub	sp, #64	@ 0x40
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a6e:	232c      	movs	r3, #44	@ 0x2c
 8000a70:	18fb      	adds	r3, r7, r3
 8000a72:	0018      	movs	r0, r3
 8000a74:	2314      	movs	r3, #20
 8000a76:	001a      	movs	r2, r3
 8000a78:	2100      	movs	r1, #0
 8000a7a:	f005 f9f3 	bl	8005e64 <memset>
  RTC_DateTypeDef sDate = {0};
 8000a7e:	2328      	movs	r3, #40	@ 0x28
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000a86:	003b      	movs	r3, r7
 8000a88:	0018      	movs	r0, r3
 8000a8a:	2328      	movs	r3, #40	@ 0x28
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f005 f9e8 	bl	8005e64 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a94:	4b4b      	ldr	r3, [pc, #300]	@ (8000bc4 <MX_RTC_Init+0x15c>)
 8000a96:	4a4c      	ldr	r2, [pc, #304]	@ (8000bc8 <MX_RTC_Init+0x160>)
 8000a98:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000a9a:	4b4a      	ldr	r3, [pc, #296]	@ (8000bc4 <MX_RTC_Init+0x15c>)
 8000a9c:	2240      	movs	r2, #64	@ 0x40
 8000a9e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000aa0:	4b48      	ldr	r3, [pc, #288]	@ (8000bc4 <MX_RTC_Init+0x15c>)
 8000aa2:	227f      	movs	r2, #127	@ 0x7f
 8000aa4:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000aa6:	4b47      	ldr	r3, [pc, #284]	@ (8000bc4 <MX_RTC_Init+0x15c>)
 8000aa8:	22ff      	movs	r2, #255	@ 0xff
 8000aaa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000aac:	4b45      	ldr	r3, [pc, #276]	@ (8000bc4 <MX_RTC_Init+0x15c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ab2:	4b44      	ldr	r3, [pc, #272]	@ (8000bc4 <MX_RTC_Init+0x15c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ab8:	4b42      	ldr	r3, [pc, #264]	@ (8000bc4 <MX_RTC_Init+0x15c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000abe:	4b41      	ldr	r3, [pc, #260]	@ (8000bc4 <MX_RTC_Init+0x15c>)
 8000ac0:	2280      	movs	r2, #128	@ 0x80
 8000ac2:	05d2      	lsls	r2, r2, #23
 8000ac4:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000ac6:	4b3f      	ldr	r3, [pc, #252]	@ (8000bc4 <MX_RTC_Init+0x15c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000acc:	4b3d      	ldr	r3, [pc, #244]	@ (8000bc4 <MX_RTC_Init+0x15c>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f003 fdd6 	bl	8004680 <HAL_RTC_Init>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d001      	beq.n	8000adc <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000ad8:	f000 fd40 	bl	800155c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000adc:	212c      	movs	r1, #44	@ 0x2c
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2200      	movs	r2, #0
 8000aee:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b08:	1879      	adds	r1, r7, r1
 8000b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000bc4 <MX_RTC_Init+0x15c>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f003 fe58 	bl	80047c4 <HAL_RTC_SetTime>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000b18:	f000 fd20 	bl	800155c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b1c:	2128      	movs	r1, #40	@ 0x28
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2201      	movs	r2, #1
 8000b28:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2200      	movs	r2, #0
 8000b34:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b36:	1879      	adds	r1, r7, r1
 8000b38:	4b22      	ldr	r3, [pc, #136]	@ (8000bc4 <MX_RTC_Init+0x15c>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f003 ff45 	bl	80049cc <HAL_RTC_SetDate>
 8000b42:	1e03      	subs	r3, r0, #0
 8000b44:	d001      	beq.n	8000b4a <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 8000b46:	f000 fd09 	bl	800155c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000b4a:	003b      	movs	r3, r7
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000b50:	003b      	movs	r3, r7
 8000b52:	2201      	movs	r2, #1
 8000b54:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000b56:	003b      	movs	r3, r7
 8000b58:	2200      	movs	r2, #0
 8000b5a:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000b5c:	003b      	movs	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000b62:	003b      	movs	r3, r7
 8000b64:	2200      	movs	r2, #0
 8000b66:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b68:	003b      	movs	r3, r7
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b6e:	003b      	movs	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000b74:	003b      	movs	r3, r7
 8000b76:	4a15      	ldr	r2, [pc, #84]	@ (8000bcc <MX_RTC_Init+0x164>)
 8000b78:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000b7a:	003b      	movs	r3, r7
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000b80:	003b      	movs	r3, r7
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000b86:	003b      	movs	r3, r7
 8000b88:	2220      	movs	r2, #32
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000b8e:	003b      	movs	r3, r7
 8000b90:	2280      	movs	r2, #128	@ 0x80
 8000b92:	0052      	lsls	r2, r2, #1
 8000b94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000b96:	0039      	movs	r1, r7
 8000b98:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <MX_RTC_Init+0x15c>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f003 fff5 	bl	8004b8c <HAL_RTC_SetAlarm_IT>
 8000ba2:	1e03      	subs	r3, r0, #0
 8000ba4:	d001      	beq.n	8000baa <MX_RTC_Init+0x142>
  {
    Error_Handler();
 8000ba6:	f000 fcd9 	bl	800155c <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000baa:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <MX_RTC_Init+0x15c>)
 8000bac:	2100      	movs	r1, #0
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f004 fa5c 	bl	800506c <HAL_RTCEx_SetCalibrationOutPut>
 8000bb4:	1e03      	subs	r3, r0, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_RTC_Init+0x154>
  {
    Error_Handler();
 8000bb8:	f000 fcd0 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bbc:	46c0      	nop			@ (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b010      	add	sp, #64	@ 0x40
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2000012c 	.word	0x2000012c
 8000bc8:	40002800 	.word	0x40002800
 8000bcc:	80800080 	.word	0x80800080

08000bd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd6:	231c      	movs	r3, #28
 8000bd8:	18fb      	adds	r3, r7, r3
 8000bda:	0018      	movs	r0, r3
 8000bdc:	230c      	movs	r3, #12
 8000bde:	001a      	movs	r2, r3
 8000be0:	2100      	movs	r1, #0
 8000be2:	f005 f93f 	bl	8005e64 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000be6:	003b      	movs	r3, r7
 8000be8:	0018      	movs	r0, r3
 8000bea:	231c      	movs	r3, #28
 8000bec:	001a      	movs	r2, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	f005 f938 	bl	8005e64 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bf4:	4b24      	ldr	r3, [pc, #144]	@ (8000c88 <MX_TIM2_Init+0xb8>)
 8000bf6:	2280      	movs	r2, #128	@ 0x80
 8000bf8:	05d2      	lsls	r2, r2, #23
 8000bfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8000bfc:	4b22      	ldr	r3, [pc, #136]	@ (8000c88 <MX_TIM2_Init+0xb8>)
 8000bfe:	4a23      	ldr	r2, [pc, #140]	@ (8000c8c <MX_TIM2_Init+0xbc>)
 8000c00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c02:	4b21      	ldr	r3, [pc, #132]	@ (8000c88 <MX_TIM2_Init+0xb8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000c08:	4b1f      	ldr	r3, [pc, #124]	@ (8000c88 <MX_TIM2_Init+0xb8>)
 8000c0a:	2263      	movs	r2, #99	@ 0x63
 8000c0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c88 <MX_TIM2_Init+0xb8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c14:	4b1c      	ldr	r3, [pc, #112]	@ (8000c88 <MX_TIM2_Init+0xb8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c88 <MX_TIM2_Init+0xb8>)
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f004 fb3f 	bl	80052a0 <HAL_TIM_PWM_Init>
 8000c22:	1e03      	subs	r3, r0, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000c26:	f000 fc99 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2a:	211c      	movs	r1, #28
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c38:	187a      	adds	r2, r7, r1
 8000c3a:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <MX_TIM2_Init+0xb8>)
 8000c3c:	0011      	movs	r1, r2
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f005 f8a8 	bl	8005d94 <HAL_TIMEx_MasterConfigSynchronization>
 8000c44:	1e03      	subs	r3, r0, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000c48:	f000 fc88 	bl	800155c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c4c:	003b      	movs	r3, r7
 8000c4e:	2260      	movs	r2, #96	@ 0x60
 8000c50:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c52:	003b      	movs	r3, r7
 8000c54:	2200      	movs	r2, #0
 8000c56:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c58:	003b      	movs	r3, r7
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c5e:	003b      	movs	r3, r7
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c64:	0039      	movs	r1, r7
 8000c66:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <MX_TIM2_Init+0xb8>)
 8000c68:	2208      	movs	r2, #8
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f004 fc4e 	bl	800550c <HAL_TIM_PWM_ConfigChannel>
 8000c70:	1e03      	subs	r3, r0, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000c74:	f000 fc72 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c78:	4b03      	ldr	r3, [pc, #12]	@ (8000c88 <MX_TIM2_Init+0xb8>)
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 ffce 	bl	8001c1c <HAL_TIM_MspPostInit>

}
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b00a      	add	sp, #40	@ 0x28
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000158 	.word	0x20000158
 8000c8c:	0000031f 	.word	0x0000031f

08000c90 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <MX_TIM14_Init+0x40>)
 8000c96:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd4 <MX_TIM14_Init+0x44>)
 8000c98:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <MX_TIM14_Init+0x40>)
 8000c9c:	22f4      	movs	r2, #244	@ 0xf4
 8000c9e:	0092      	lsls	r2, r2, #2
 8000ca0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <MX_TIM14_Init+0x40>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <MX_TIM14_Init+0x40>)
 8000caa:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd8 <MX_TIM14_Init+0x48>)
 8000cac:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cae:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <MX_TIM14_Init+0x40>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <MX_TIM14_Init+0x40>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000cba:	4b05      	ldr	r3, [pc, #20]	@ (8000cd0 <MX_TIM14_Init+0x40>)
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f004 fa25 	bl	800510c <HAL_TIM_Base_Init>
 8000cc2:	1e03      	subs	r3, r0, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000cc6:	f000 fc49 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200001a4 	.word	0x200001a4
 8000cd4:	40002000 	.word	0x40002000
 8000cd8:	0000ffff 	.word	0x0000ffff

08000cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b08b      	sub	sp, #44	@ 0x2c
 8000ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	2414      	movs	r4, #20
 8000ce4:	193b      	adds	r3, r7, r4
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	2314      	movs	r3, #20
 8000cea:	001a      	movs	r2, r3
 8000cec:	2100      	movs	r1, #0
 8000cee:	f005 f8b9 	bl	8005e64 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf2:	4b5e      	ldr	r3, [pc, #376]	@ (8000e6c <MX_GPIO_Init+0x190>)
 8000cf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cf6:	4b5d      	ldr	r3, [pc, #372]	@ (8000e6c <MX_GPIO_Init+0x190>)
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cfe:	4b5b      	ldr	r3, [pc, #364]	@ (8000e6c <MX_GPIO_Init+0x190>)
 8000d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d02:	2204      	movs	r2, #4
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b58      	ldr	r3, [pc, #352]	@ (8000e6c <MX_GPIO_Init+0x190>)
 8000d0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d0e:	4b57      	ldr	r3, [pc, #348]	@ (8000e6c <MX_GPIO_Init+0x190>)
 8000d10:	2101      	movs	r1, #1
 8000d12:	430a      	orrs	r2, r1
 8000d14:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d16:	4b55      	ldr	r3, [pc, #340]	@ (8000e6c <MX_GPIO_Init+0x190>)
 8000d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d22:	4b52      	ldr	r3, [pc, #328]	@ (8000e6c <MX_GPIO_Init+0x190>)
 8000d24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d26:	4b51      	ldr	r3, [pc, #324]	@ (8000e6c <MX_GPIO_Init+0x190>)
 8000d28:	2108      	movs	r1, #8
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d2e:	4b4f      	ldr	r3, [pc, #316]	@ (8000e6c <MX_GPIO_Init+0x190>)
 8000d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d32:	2208      	movs	r2, #8
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	4b4c      	ldr	r3, [pc, #304]	@ (8000e6c <MX_GPIO_Init+0x190>)
 8000d3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d3e:	4b4b      	ldr	r3, [pc, #300]	@ (8000e6c <MX_GPIO_Init+0x190>)
 8000d40:	2102      	movs	r1, #2
 8000d42:	430a      	orrs	r2, r1
 8000d44:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d46:	4b49      	ldr	r3, [pc, #292]	@ (8000e6c <MX_GPIO_Init+0x190>)
 8000d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8000d52:	4947      	ldr	r1, [pc, #284]	@ (8000e70 <MX_GPIO_Init+0x194>)
 8000d54:	23a0      	movs	r3, #160	@ 0xa0
 8000d56:	05db      	lsls	r3, r3, #23
 8000d58:	2200      	movs	r2, #0
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f001 ff73 	bl	8002c46 <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8000d60:	4b44      	ldr	r3, [pc, #272]	@ (8000e74 <MX_GPIO_Init+0x198>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	2180      	movs	r1, #128	@ 0x80
 8000d66:	0018      	movs	r0, r3
 8000d68:	f001 ff6d 	bl	8002c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_EN_GPIO_Port, CTOUCH_EN_Pin, GPIO_PIN_RESET);
 8000d6c:	2380      	movs	r3, #128	@ 0x80
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4841      	ldr	r0, [pc, #260]	@ (8000e78 <MX_GPIO_Init+0x19c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	0019      	movs	r1, r3
 8000d76:	f001 ff66 	bl	8002c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin BUZZER_OUT_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin
                           SHIFT_MCLR_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8000d7a:	193b      	adds	r3, r7, r4
 8000d7c:	4a3c      	ldr	r2, [pc, #240]	@ (8000e70 <MX_GPIO_Init+0x194>)
 8000d7e:	601a      	str	r2, [r3, #0]
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	193b      	adds	r3, r7, r4
 8000d82:	2201      	movs	r2, #1
 8000d84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	193b      	adds	r3, r7, r4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	193b      	adds	r3, r7, r4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	193a      	adds	r2, r7, r4
 8000d94:	23a0      	movs	r3, #160	@ 0xa0
 8000d96:	05db      	lsls	r3, r3, #23
 8000d98:	0011      	movs	r1, r2
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f001 fdd2 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8000da0:	193b      	adds	r3, r7, r4
 8000da2:	2280      	movs	r2, #128	@ 0x80
 8000da4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	2201      	movs	r2, #1
 8000daa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 8000db8:	193b      	adds	r3, r7, r4
 8000dba:	4a2e      	ldr	r2, [pc, #184]	@ (8000e74 <MX_GPIO_Init+0x198>)
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	0010      	movs	r0, r2
 8000dc0:	f001 fdc0 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 8000dc4:	193b      	adds	r3, r7, r4
 8000dc6:	2280      	movs	r2, #128	@ 0x80
 8000dc8:	0212      	lsls	r2, r2, #8
 8000dca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dcc:	193b      	adds	r3, r7, r4
 8000dce:	2284      	movs	r2, #132	@ 0x84
 8000dd0:	0392      	lsls	r2, r2, #14
 8000dd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd4:	193b      	adds	r3, r7, r4
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000dda:	193a      	adds	r2, r7, r4
 8000ddc:	23a0      	movs	r3, #160	@ 0xa0
 8000dde:	05db      	lsls	r3, r3, #23
 8000de0:	0011      	movs	r1, r2
 8000de2:	0018      	movs	r0, r3
 8000de4:	f001 fdae 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 8000de8:	0021      	movs	r1, r4
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	220f      	movs	r2, #15
 8000dee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2284      	movs	r2, #132	@ 0x84
 8000df4:	0392      	lsls	r2, r2, #14
 8000df6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfe:	000c      	movs	r4, r1
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	4a1e      	ldr	r2, [pc, #120]	@ (8000e7c <MX_GPIO_Init+0x1a0>)
 8000e04:	0019      	movs	r1, r3
 8000e06:	0010      	movs	r0, r2
 8000e08:	f001 fd9c 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_EN_Pin */
  GPIO_InitStruct.Pin = CTOUCH_EN_Pin;
 8000e0c:	0021      	movs	r1, r4
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2280      	movs	r2, #128	@ 0x80
 8000e12:	0092      	lsls	r2, r2, #2
 8000e14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	2201      	movs	r2, #1
 8000e1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2200      	movs	r2, #0
 8000e26:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_EN_GPIO_Port, &GPIO_InitStruct);
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	4a13      	ldr	r2, [pc, #76]	@ (8000e78 <MX_GPIO_Init+0x19c>)
 8000e2c:	0019      	movs	r1, r3
 8000e2e:	0010      	movs	r0, r2
 8000e30:	f001 fd88 	bl	8002944 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2100      	movs	r1, #0
 8000e38:	2005      	movs	r0, #5
 8000e3a:	f001 fd51 	bl	80028e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000e3e:	2005      	movs	r0, #5
 8000e40:	f001 fd63 	bl	800290a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	2006      	movs	r0, #6
 8000e4a:	f001 fd49 	bl	80028e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000e4e:	2006      	movs	r0, #6
 8000e50:	f001 fd5b 	bl	800290a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2101      	movs	r1, #1
 8000e58:	2007      	movs	r0, #7
 8000e5a:	f001 fd41 	bl	80028e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000e5e:	2007      	movs	r0, #7
 8000e60:	f001 fd53 	bl	800290a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e64:	46c0      	nop			@ (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b00b      	add	sp, #44	@ 0x2c
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	00001f01 	.word	0x00001f01
 8000e74:	50000800 	.word	0x50000800
 8000e78:	50000400 	.word	0x50000400
 8000e7c:	50000c00 	.word	0x50000c00

08000e80 <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8000e8c:	4a07      	ldr	r2, [pc, #28]	@ (8000eac <updateAndDisplayTime+0x2c>)
 8000e8e:	4908      	ldr	r1, [pc, #32]	@ (8000eb0 <updateAndDisplayTime+0x30>)
 8000e90:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <updateAndDisplayTime+0x34>)
 8000e92:	0018      	movs	r0, r3
 8000e94:	f7ff fc2e 	bl	80006f4 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 8000e98:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <updateAndDisplayTime+0x30>)
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f000 fc7c 	bl	8001798 <sevSeg_updateDigits>

	return halRet;
 8000ea0:	1dfb      	adds	r3, r7, #7
 8000ea2:	781b      	ldrb	r3, [r3, #0]

}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b002      	add	sp, #8
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000204 	.word	0x20000204
 8000eb0:	200001f0 	.word	0x200001f0
 8000eb4:	2000012c 	.word	0x2000012c

08000eb8 <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 8000ec4:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <updateAndDisplayAlarm+0x20>)
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f000 fc66 	bl	8001798 <sevSeg_updateDigits>

	return halRet;
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	781b      	ldrb	r3, [r3, #0]

}
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b002      	add	sp, #8
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000208 	.word	0x20000208

08000edc <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	@ 0x30
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

	  //printf("Enter current time minute increment interrupt\n\r");

	  RTC_AlarmTypeDef sAlarm;
	  getRTCTime(hrtc, &currTime, &currDate);
 8000ee4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f60 <HAL_RTC_AlarmAEventCallback+0x84>)
 8000ee6:	491f      	ldr	r1, [pc, #124]	@ (8000f64 <HAL_RTC_AlarmAEventCallback+0x88>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	0018      	movs	r0, r3
 8000eec:	f7ff fc02 	bl	80006f4 <getRTCTime>

	  if(sAlarm.AlarmTime.Minutes>58) {
 8000ef0:	2208      	movs	r2, #8
 8000ef2:	18bb      	adds	r3, r7, r2
 8000ef4:	785b      	ldrb	r3, [r3, #1]
 8000ef6:	2b3a      	cmp	r3, #58	@ 0x3a
 8000ef8:	d903      	bls.n	8000f02 <HAL_RTC_AlarmAEventCallback+0x26>
		sAlarm.AlarmTime.Minutes=0;
 8000efa:	18bb      	adds	r3, r7, r2
 8000efc:	2200      	movs	r2, #0
 8000efe:	705a      	strb	r2, [r3, #1]
 8000f00:	e006      	b.n	8000f10 <HAL_RTC_AlarmAEventCallback+0x34>
		//printf("Reset alarm time\n\r");
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8000f02:	2108      	movs	r1, #8
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	785b      	ldrb	r3, [r3, #1]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000f10:	46c0      	nop			@ (mov r8, r8)
 8000f12:	2308      	movs	r3, #8
 8000f14:	18f9      	adds	r1, r7, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f003 fe36 	bl	8004b8c <HAL_RTC_SetAlarm_IT>
 8000f20:	1e03      	subs	r3, r0, #0
 8000f22:	d1f6      	bne.n	8000f12 <HAL_RTC_AlarmAEventCallback+0x36>

	  updateAndDisplayTime();
 8000f24:	f7ff ffac 	bl	8000e80 <updateAndDisplayTime>

	  //printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 8000f28:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d013      	beq.n	8000f58 <HAL_RTC_AlarmAEventCallback+0x7c>
 8000f30:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <HAL_RTC_AlarmAEventCallback+0x90>)
 8000f32:	781a      	ldrb	r2, [r3, #0]
 8000f34:	4b0b      	ldr	r3, [pc, #44]	@ (8000f64 <HAL_RTC_AlarmAEventCallback+0x88>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d10d      	bne.n	8000f58 <HAL_RTC_AlarmAEventCallback+0x7c>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <HAL_RTC_AlarmAEventCallback+0x90>)
 8000f3e:	785a      	ldrb	r2, [r3, #1]
 8000f40:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <HAL_RTC_AlarmAEventCallback+0x88>)
 8000f42:	785b      	ldrb	r3, [r3, #1]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d107      	bne.n	8000f58 <HAL_RTC_AlarmAEventCallback+0x7c>
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <HAL_RTC_AlarmAEventCallback+0x90>)
 8000f4a:	78da      	ldrb	r2, [r3, #3]
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <HAL_RTC_AlarmAEventCallback+0x88>)
 8000f4e:	78db      	ldrb	r3, [r3, #3]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d101      	bne.n	8000f58 <HAL_RTC_AlarmAEventCallback+0x7c>
		  userAlarmBeep();
 8000f54:	f000 f80c 	bl	8000f70 <userAlarmBeep>
	  }

}
 8000f58:	46c0      	nop			@ (mov r8, r8)
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b00c      	add	sp, #48	@ 0x30
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000204 	.word	0x20000204
 8000f64:	200001f0 	.word	0x200001f0
 8000f68:	20000071 	.word	0x20000071
 8000f6c:	20000208 	.word	0x20000208

08000f70 <userAlarmBeep>:

void userAlarmBeep() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8000f76:	4b2c      	ldr	r3, [pc, #176]	@ (8001028 <userAlarmBeep+0xb8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f004 f96a 	bl	8005254 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8000f80:	4b29      	ldr	r3, [pc, #164]	@ (8001028 <userAlarmBeep+0xb8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	0018      	movs	r0, r3
 8000f86:	f004 f919 	bl	80051bc <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8000f8a:	4b27      	ldr	r3, [pc, #156]	@ (8001028 <userAlarmBeep+0xb8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f92:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8000f94:	1cfb      	adds	r3, r7, #3
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8000f9a:	1cbb      	adds	r3, r7, #2
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 8000fa0:	f7ff ff6e 	bl	8000e80 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 8000fa4:	4b20      	ldr	r3, [pc, #128]	@ (8001028 <userAlarmBeep+0xb8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	4a1e      	ldr	r2, [pc, #120]	@ (800102c <userAlarmBeep+0xbc>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d926      	bls.n	8001004 <userAlarmBeep+0x94>

			sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 8000fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001030 <userAlarmBeep+0xc0>)
 8000fb8:	6818      	ldr	r0, [r3, #0]
 8000fba:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <userAlarmBeep+0xc4>)
 8000fbc:	6819      	ldr	r1, [r3, #0]
 8000fbe:	1cfb      	adds	r3, r7, #3
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	4a1d      	ldr	r2, [pc, #116]	@ (8001038 <userAlarmBeep+0xc8>)
 8000fc4:	5cd3      	ldrb	r3, [r2, r3]
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	f000 fc98 	bl	80018fc <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(buzzerPort, buzzerPin);					// Toggle Buzzer
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800103c <userAlarmBeep+0xcc>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2280      	movs	r2, #128	@ 0x80
 8000fd2:	0052      	lsls	r2, r2, #1
 8000fd4:	0011      	movs	r1, r2
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f001 fe52 	bl	8002c80 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <userAlarmBeep+0xb8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe4:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8000fe6:	1cfb      	adds	r3, r7, #3
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	1e5a      	subs	r2, r3, #1
 8000fec:	4193      	sbcs	r3, r2
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4053      	eors	r3, r2
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	001a      	movs	r2, r3
 8000ff8:	1cfb      	adds	r3, r7, #3
 8000ffa:	701a      	strb	r2, [r3, #0]
 8000ffc:	781a      	ldrb	r2, [r3, #0]
 8000ffe:	2101      	movs	r1, #1
 8001000:	400a      	ands	r2, r1
 8001002:	701a      	strb	r2, [r3, #0]

			//printf("Display Blink = %u\n\r", displayBlink);

		}

		i++;		// Get rid of. This is just for testing.
 8001004:	1cbb      	adds	r3, r7, #2
 8001006:	781a      	ldrb	r2, [r3, #0]
 8001008:	1cbb      	adds	r3, r7, #2
 800100a:	3201      	adds	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]

//	} while(capTouchTrigger(snoozeButtonPin));
	} while(i < 5);
 800100e:	1cbb      	adds	r3, r7, #2
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b04      	cmp	r3, #4
 8001014:	d9c4      	bls.n	8000fa0 <userAlarmBeep+0x30>

	HAL_TIM_Base_Stop(timerDelay);
 8001016:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <userAlarmBeep+0xb8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	0018      	movs	r0, r3
 800101c:	f004 f91a 	bl	8005254 <HAL_TIM_Base_Stop>

}
 8001020:	46c0      	nop			@ (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	b002      	add	sp, #8
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000024 	.word	0x20000024
 800102c:	00007ffe 	.word	0x00007ffe
 8001030:	20000028 	.word	0x20000028
 8001034:	2000002c 	.word	0x2000002c
 8001038:	08005ef0 	.word	0x08005ef0
 800103c:	20000008 	.word	0x20000008

08001040 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	0002      	movs	r2, r0
 8001048:	1dbb      	adds	r3, r7, #6
 800104a:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 800104c:	2208      	movs	r2, #8
 800104e:	1dbb      	adds	r3, r7, #6
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	4293      	cmp	r3, r2
 8001054:	d106      	bne.n	8001064 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 8001056:	230f      	movs	r3, #15
 8001058:	18fc      	adds	r4, r7, r3
 800105a:	f000 f839 	bl	80010d0 <displayButtonISR>
 800105e:	0003      	movs	r3, r0
 8001060:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8001062:	e031      	b.n	80010c8 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8001064:	2204      	movs	r2, #4
 8001066:	1dbb      	adds	r3, r7, #6
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	4293      	cmp	r3, r2
 800106c:	d106      	bne.n	800107c <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 800106e:	230f      	movs	r3, #15
 8001070:	18fc      	adds	r4, r7, r3
 8001072:	f000 f85d 	bl	8001130 <alarmEnableISR>
 8001076:	0003      	movs	r3, r0
 8001078:	7023      	strb	r3, [r4, #0]
}
 800107a:	e025      	b.n	80010c8 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 800107c:	2380      	movs	r3, #128	@ 0x80
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	1dba      	adds	r2, r7, #6
 8001082:	8812      	ldrh	r2, [r2, #0]
 8001084:	429a      	cmp	r2, r3
 8001086:	d106      	bne.n	8001096 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 8001088:	230f      	movs	r3, #15
 800108a:	18fc      	adds	r4, r7, r3
 800108c:	f000 f884 	bl	8001198 <alarmSetISR>
 8001090:	0003      	movs	r3, r0
 8001092:	7023      	strb	r3, [r4, #0]
}
 8001094:	e018      	b.n	80010c8 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 8001096:	2201      	movs	r2, #1
 8001098:	1dbb      	adds	r3, r7, #6
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	4293      	cmp	r3, r2
 800109e:	d106      	bne.n	80010ae <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 80010a0:	230f      	movs	r3, #15
 80010a2:	18fc      	adds	r4, r7, r3
 80010a4:	f000 f954 	bl	8001350 <hourSetISR>
 80010a8:	0003      	movs	r3, r0
 80010aa:	7023      	strb	r3, [r4, #0]
}
 80010ac:	e00c      	b.n	80010c8 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 80010ae:	2202      	movs	r2, #2
 80010b0:	1dbb      	adds	r3, r7, #6
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d106      	bne.n	80010c6 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 80010b8:	230f      	movs	r3, #15
 80010ba:	18fc      	adds	r4, r7, r3
 80010bc:	f000 f974 	bl	80013a8 <minuteSetISR>
 80010c0:	0003      	movs	r3, r0
 80010c2:	7023      	strb	r3, [r4, #0]
}
 80010c4:	e000      	b.n	80010c8 <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 80010c6:	46c0      	nop			@ (mov r8, r8)
}
 80010c8:	46c0      	nop			@ (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b005      	add	sp, #20
 80010ce:	bd90      	pop	{r4, r7, pc}

080010d0 <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 80010dc:	f7ff fed0 	bl	8000e80 <updateAndDisplayTime>

	sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <displayButtonISR+0x50>)
 80010e2:	6818      	ldr	r0, [r3, #0]
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <displayButtonISR+0x54>)
 80010e6:	6819      	ldr	r1, [r3, #0]
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <displayButtonISR+0x58>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	001a      	movs	r2, r3
 80010ee:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <displayButtonISR+0x5c>)
 80010f0:	5c9b      	ldrb	r3, [r3, r2]
 80010f2:	001a      	movs	r2, r3
 80010f4:	f000 fc02 	bl	80018fc <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <displayButtonISR+0x58>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d903      	bls.n	8001108 <displayButtonISR+0x38>
		displayToggle = 0;
 8001100:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <displayButtonISR+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	e005      	b.n	8001114 <displayButtonISR+0x44>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 8001108:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <displayButtonISR+0x58>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	b2da      	uxtb	r2, r3
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <displayButtonISR+0x58>)
 8001112:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	781b      	ldrb	r3, [r3, #0]

}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000028 	.word	0x20000028
 8001124:	2000002c 	.word	0x2000002c
 8001128:	20000070 	.word	0x20000070
 800112c:	08005ef0 	.word	0x08005ef0

08001130 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 800113c:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <alarmEnableISR+0x60>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2201      	movs	r2, #1
 8001142:	4053      	eors	r3, r2
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00b      	beq.n	8001162 <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 800114a:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <alarmEnableISR+0x64>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2280      	movs	r2, #128	@ 0x80
 8001150:	0151      	lsls	r1, r2, #5
 8001152:	2201      	movs	r2, #1
 8001154:	0018      	movs	r0, r3
 8001156:	f001 fd76 	bl	8002c46 <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 800115a:	4b0d      	ldr	r3, [pc, #52]	@ (8001190 <alarmEnableISR+0x60>)
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	e010      	b.n	8001184 <alarmEnableISR+0x54>

		//printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
								//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8001162:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <alarmEnableISR+0x60>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00b      	beq.n	8001182 <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 800116a:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <alarmEnableISR+0x64>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2280      	movs	r2, #128	@ 0x80
 8001170:	0151      	lsls	r1, r2, #5
 8001172:	2200      	movs	r2, #0
 8001174:	0018      	movs	r0, r3
 8001176:	f001 fd66 	bl	8002c46 <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 800117a:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <alarmEnableISR+0x60>)
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	e000      	b.n	8001184 <alarmEnableISR+0x54>

		//printf("User alarm disabled.\n\r");
	}
	else {
		__NOP();							//Code should never reach here.
 8001182:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 8001184:	1dfb      	adds	r3, r7, #7
 8001186:	781b      	ldrb	r3, [r3, #0]

}
 8001188:	0018      	movs	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	b002      	add	sp, #8
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000071 	.word	0x20000071
 8001194:	20000004 	.word	0x20000004

08001198 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
	//printf("Enter user alarm set ISR.\n\r");

	//printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
			//userAlarmTime.Minutes, userAlarmTime.Seconds);

	HAL_StatusTypeDef halRet = HAL_OK;
 800119e:	1cbb      	adds	r3, r7, #2
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for switch debounce
	 */

	// First wait for button to deactivate again
	while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_SET);
 80011a4:	46c0      	nop			@ (mov r8, r8)
 80011a6:	4b64      	ldr	r3, [pc, #400]	@ (8001338 <alarmSetISR+0x1a0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2280      	movs	r2, #128	@ 0x80
 80011ac:	0212      	lsls	r2, r2, #8
 80011ae:	0011      	movs	r1, r2
 80011b0:	0018      	movs	r0, r3
 80011b2:	f001 fd2b 	bl	8002c0c <HAL_GPIO_ReadPin>
 80011b6:	0003      	movs	r3, r0
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d1f4      	bne.n	80011a6 <alarmSetISR+0xe>

	// Go through debounce
	HAL_TIM_Base_Stop(timerDelay);
 80011bc:	4b5f      	ldr	r3, [pc, #380]	@ (800133c <alarmSetISR+0x1a4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	0018      	movs	r0, r3
 80011c2:	f004 f847 	bl	8005254 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80011c6:	4b5d      	ldr	r3, [pc, #372]	@ (800133c <alarmSetISR+0x1a4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	0018      	movs	r0, r3
 80011cc:	f003 fff6 	bl	80051bc <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80011d0:	4b5a      	ldr	r3, [pc, #360]	@ (800133c <alarmSetISR+0x1a4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d8:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 8));
 80011da:	4b58      	ldr	r3, [pc, #352]	@ (800133c <alarmSetISR+0x1a4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	1ad2      	subs	r2, r2, r3
 80011e6:	2380      	movs	r3, #128	@ 0x80
 80011e8:	019b      	lsls	r3, r3, #6
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d9f5      	bls.n	80011da <alarmSetISR+0x42>


	/*
	 *  Poll for 1 second to see if the alarm set button is pressed again
	 */
	HAL_TIM_Base_Stop(timerDelay);
 80011ee:	4b53      	ldr	r3, [pc, #332]	@ (800133c <alarmSetISR+0x1a4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	0018      	movs	r0, r3
 80011f4:	f004 f82e 	bl	8005254 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80011f8:	4b50      	ldr	r3, [pc, #320]	@ (800133c <alarmSetISR+0x1a4>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	0018      	movs	r0, r3
 80011fe:	f003 ffdd 	bl	80051bc <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001202:	4b4e      	ldr	r3, [pc, #312]	@ (800133c <alarmSetISR+0x1a4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120a:	607b      	str	r3, [r7, #4]

	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 800120c:	e00d      	b.n	800122a <alarmSetISR+0x92>

		if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 800120e:	4b4a      	ldr	r3, [pc, #296]	@ (8001338 <alarmSetISR+0x1a0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2280      	movs	r2, #128	@ 0x80
 8001214:	0212      	lsls	r2, r2, #8
 8001216:	0011      	movs	r1, r2
 8001218:	0018      	movs	r0, r3
 800121a:	f001 fcf7 	bl	8002c0c <HAL_GPIO_ReadPin>
 800121e:	1e03      	subs	r3, r0, #0
 8001220:	d103      	bne.n	800122a <alarmSetISR+0x92>
			alarmSetMode = true;
 8001222:	4b47      	ldr	r3, [pc, #284]	@ (8001340 <alarmSetISR+0x1a8>)
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
//			HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
			break;
 8001228:	e009      	b.n	800123e <alarmSetISR+0xa6>
	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 800122a:	4b44      	ldr	r3, [pc, #272]	@ (800133c <alarmSetISR+0x1a4>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	1ad2      	subs	r2, r2, r3
 8001236:	2380      	movs	r3, #128	@ 0x80
 8001238:	025b      	lsls	r3, r3, #9
 800123a:	429a      	cmp	r2, r3
 800123c:	d9e7      	bls.n	800120e <alarmSetISR+0x76>
		}

	}

	// Go through debounce once again
	HAL_TIM_Base_Stop(timerDelay);
 800123e:	4b3f      	ldr	r3, [pc, #252]	@ (800133c <alarmSetISR+0x1a4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	0018      	movs	r0, r3
 8001244:	f004 f806 	bl	8005254 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001248:	4b3c      	ldr	r3, [pc, #240]	@ (800133c <alarmSetISR+0x1a4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	0018      	movs	r0, r3
 800124e:	f003 ffb5 	bl	80051bc <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001252:	4b3a      	ldr	r3, [pc, #232]	@ (800133c <alarmSetISR+0x1a4>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125a:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 4));
 800125c:	4b37      	ldr	r3, [pc, #220]	@ (800133c <alarmSetISR+0x1a4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	1ad2      	subs	r2, r2, r3
 8001268:	2380      	movs	r3, #128	@ 0x80
 800126a:	01db      	lsls	r3, r3, #7
 800126c:	429a      	cmp	r2, r3
 800126e:	d9f5      	bls.n	800125c <alarmSetISR+0xc4>
	/*
	 * Then, if we are in alarm set mode, go through the
	 * alarm set process until the button is pressed again
	 */

	HAL_TIM_Base_Stop(timerDelay);
 8001270:	4b32      	ldr	r3, [pc, #200]	@ (800133c <alarmSetISR+0x1a4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	0018      	movs	r0, r3
 8001276:	f003 ffed 	bl	8005254 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 800127a:	4b30      	ldr	r3, [pc, #192]	@ (800133c <alarmSetISR+0x1a4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	0018      	movs	r0, r3
 8001280:	f003 ff9c 	bl	80051bc <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001284:	4b2d      	ldr	r3, [pc, #180]	@ (800133c <alarmSetISR+0x1a4>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128c:	607b      	str	r3, [r7, #4]

	if(alarmSetMode) {
 800128e:	4b2c      	ldr	r3, [pc, #176]	@ (8001340 <alarmSetISR+0x1a8>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d046      	beq.n	8001324 <alarmSetISR+0x18c>

		bool displayBlink = false;
 8001296:	1cfb      	adds	r3, r7, #3
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			updateAndDisplayAlarm();
 800129c:	f7ff fe0c 	bl	8000eb8 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 80012a0:	4b26      	ldr	r3, [pc, #152]	@ (800133c <alarmSetISR+0x1a4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	1ad2      	subs	r2, r2, r3
 80012ac:	2380      	movs	r3, #128	@ 0x80
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d31e      	bcc.n	80012f2 <alarmSetISR+0x15a>

//				HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

				sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 80012b4:	4b23      	ldr	r3, [pc, #140]	@ (8001344 <alarmSetISR+0x1ac>)
 80012b6:	6818      	ldr	r0, [r3, #0]
 80012b8:	4b23      	ldr	r3, [pc, #140]	@ (8001348 <alarmSetISR+0x1b0>)
 80012ba:	6819      	ldr	r1, [r3, #0]
 80012bc:	1cfb      	adds	r3, r7, #3
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4a22      	ldr	r2, [pc, #136]	@ (800134c <alarmSetISR+0x1b4>)
 80012c2:	5cd3      	ldrb	r3, [r2, r3]
 80012c4:	001a      	movs	r2, r3
 80012c6:	f000 fb19 	bl	80018fc <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 80012ca:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <alarmSetISR+0x1a4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d2:	607b      	str	r3, [r7, #4]
				displayBlink = !displayBlink;
 80012d4:	1cfb      	adds	r3, r7, #3
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	1e5a      	subs	r2, r3, #1
 80012da:	4193      	sbcs	r3, r2
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2201      	movs	r2, #1
 80012e0:	4053      	eors	r3, r2
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	001a      	movs	r2, r3
 80012e6:	1cfb      	adds	r3, r7, #3
 80012e8:	701a      	strb	r2, [r3, #0]
 80012ea:	781a      	ldrb	r2, [r3, #0]
 80012ec:	2101      	movs	r1, #1
 80012ee:	400a      	ands	r2, r1
 80012f0:	701a      	strb	r2, [r3, #0]

			}

		}while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET);
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <alarmSetISR+0x1a0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2280      	movs	r2, #128	@ 0x80
 80012f8:	0212      	lsls	r2, r2, #8
 80012fa:	0011      	movs	r1, r2
 80012fc:	0018      	movs	r0, r3
 80012fe:	f001 fc85 	bl	8002c0c <HAL_GPIO_ReadPin>
 8001302:	1e03      	subs	r3, r0, #0
 8001304:	d1ca      	bne.n	800129c <alarmSetISR+0x104>

//		HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_RESET);

		sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 8001306:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <alarmSetISR+0x1ac>)
 8001308:	6818      	ldr	r0, [r3, #0]
 800130a:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <alarmSetISR+0x1b0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	225a      	movs	r2, #90	@ 0x5a
 8001310:	0019      	movs	r1, r3
 8001312:	f000 faf3 	bl	80018fc <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <alarmSetISR+0x1a4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	0018      	movs	r0, r3
 800131c:	f003 ff9a 	bl	8005254 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8001320:	f7ff fdae 	bl	8000e80 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <alarmSetISR+0x1a8>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 800132a:	1cbb      	adds	r3, r7, #2
 800132c:	781b      	ldrb	r3, [r3, #0]

}
 800132e:	0018      	movs	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	b002      	add	sp, #8
 8001334:	bd80      	pop	{r7, pc}
 8001336:	46c0      	nop			@ (mov r8, r8)
 8001338:	20000000 	.word	0x20000000
 800133c:	20000024 	.word	0x20000024
 8001340:	2000021c 	.word	0x2000021c
 8001344:	20000028 	.word	0x20000028
 8001348:	2000002c 	.word	0x2000002c
 800134c:	08005ef0 	.word	0x08005ef0

08001350 <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0

//	printf("Entered hour set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);


	HAL_StatusTypeDef halRet = HAL_OK;
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 800135c:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <hourSetISR+0x48>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <hourSetISR+0x1a>

		alarmHourInc();
 8001364:	f000 f84c 	bl	8001400 <alarmHourInc>
 8001368:	e00f      	b.n	800138a <hourSetISR+0x3a>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 800136a:	f000 f877 	bl	800145c <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 800136e:	490b      	ldr	r1, [pc, #44]	@ (800139c <hourSetISR+0x4c>)
 8001370:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <hourSetISR+0x50>)
 8001372:	2200      	movs	r2, #0
 8001374:	0018      	movs	r0, r3
 8001376:	f003 fa25 	bl	80047c4 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 800137a:	f7ff fd81 	bl	8000e80 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 800137e:	4a09      	ldr	r2, [pc, #36]	@ (80013a4 <hourSetISR+0x54>)
 8001380:	4906      	ldr	r1, [pc, #24]	@ (800139c <hourSetISR+0x4c>)
 8001382:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <hourSetISR+0x50>)
 8001384:	0018      	movs	r0, r3
 8001386:	f7ff f9b5 	bl	80006f4 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	781b      	ldrb	r3, [r3, #0]

}
 800138e:	0018      	movs	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	b002      	add	sp, #8
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			@ (mov r8, r8)
 8001398:	2000021c 	.word	0x2000021c
 800139c:	200001f0 	.word	0x200001f0
 80013a0:	2000012c 	.word	0x2000012c
 80013a4:	20000204 	.word	0x20000204

080013a8 <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0

//	printf("Entered minute set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

	HAL_StatusTypeDef halRet = HAL_OK;
 80013ae:	1dfb      	adds	r3, r7, #7
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80013b4:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <minuteSetISR+0x48>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <minuteSetISR+0x1a>

		alarmMinuteInc();
 80013bc:	f000 f888 	bl	80014d0 <alarmMinuteInc>
 80013c0:	e00f      	b.n	80013e2 <minuteSetISR+0x3a>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 80013c2:	f000 f8a3 	bl	800150c <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80013c6:	490b      	ldr	r1, [pc, #44]	@ (80013f4 <minuteSetISR+0x4c>)
 80013c8:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <minuteSetISR+0x50>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	0018      	movs	r0, r3
 80013ce:	f003 f9f9 	bl	80047c4 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80013d2:	f7ff fd55 	bl	8000e80 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80013d6:	4a09      	ldr	r2, [pc, #36]	@ (80013fc <minuteSetISR+0x54>)
 80013d8:	4906      	ldr	r1, [pc, #24]	@ (80013f4 <minuteSetISR+0x4c>)
 80013da:	4b07      	ldr	r3, [pc, #28]	@ (80013f8 <minuteSetISR+0x50>)
 80013dc:	0018      	movs	r0, r3
 80013de:	f7ff f989 	bl	80006f4 <getRTCTime>

		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 80013e2:	1dfb      	adds	r3, r7, #7
 80013e4:	781b      	ldrb	r3, [r3, #0]
}
 80013e6:	0018      	movs	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b002      	add	sp, #8
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	2000021c 	.word	0x2000021c
 80013f4:	200001f0 	.word	0x200001f0
 80013f8:	2000012c 	.word	0x2000012c
 80013fc:	20000204 	.word	0x20000204

08001400 <alarmHourInc>:

void alarmHourInc(void) {
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8001404:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <alarmHourInc+0x58>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b0b      	cmp	r3, #11
 800140a:	d903      	bls.n	8001414 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 800140c:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <alarmHourInc+0x58>)
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 8001412:	e01e      	b.n	8001452 <alarmHourInc+0x52>
	else if(userAlarmTime.Hours == 11) {
 8001414:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <alarmHourInc+0x58>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b0b      	cmp	r3, #11
 800141a:	d10e      	bne.n	800143a <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800141c:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <alarmHourInc+0x58>)
 800141e:	78db      	ldrb	r3, [r3, #3]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d103      	bne.n	800142c <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <alarmHourInc+0x58>)
 8001426:	2201      	movs	r2, #1
 8001428:	70da      	strb	r2, [r3, #3]
 800142a:	e002      	b.n	8001432 <alarmHourInc+0x32>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800142c:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <alarmHourInc+0x58>)
 800142e:	2200      	movs	r2, #0
 8001430:	70da      	strb	r2, [r3, #3]
		userAlarmTime.Hours = 12;
 8001432:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <alarmHourInc+0x58>)
 8001434:	220c      	movs	r2, #12
 8001436:	701a      	strb	r2, [r3, #0]
}
 8001438:	e00b      	b.n	8001452 <alarmHourInc+0x52>
	else if(userAlarmTime.Hours < 11) {
 800143a:	4b07      	ldr	r3, [pc, #28]	@ (8001458 <alarmHourInc+0x58>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b0a      	cmp	r3, #10
 8001440:	d806      	bhi.n	8001450 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001442:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <alarmHourInc+0x58>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b03      	ldr	r3, [pc, #12]	@ (8001458 <alarmHourInc+0x58>)
 800144c:	701a      	strb	r2, [r3, #0]
}
 800144e:	e000      	b.n	8001452 <alarmHourInc+0x52>
		__NOP();
 8001450:	46c0      	nop			@ (mov r8, r8)
}
 8001452:	46c0      	nop			@ (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000208 	.word	0x20000208

0800145c <currHourInc>:

void currHourInc(void) {
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001460:	4a17      	ldr	r2, [pc, #92]	@ (80014c0 <currHourInc+0x64>)
 8001462:	4918      	ldr	r1, [pc, #96]	@ (80014c4 <currHourInc+0x68>)
 8001464:	4b18      	ldr	r3, [pc, #96]	@ (80014c8 <currHourInc+0x6c>)
 8001466:	0018      	movs	r0, r3
 8001468:	f7ff f944 	bl	80006f4 <getRTCTime>

	if(currTime.Hours >= 12) {
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <currHourInc+0x68>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b0b      	cmp	r3, #11
 8001472:	d903      	bls.n	800147c <currHourInc+0x20>
		currTime.Hours = 1;
 8001474:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <currHourInc+0x68>)
 8001476:	2201      	movs	r2, #1
 8001478:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 800147a:	e01e      	b.n	80014ba <currHourInc+0x5e>
	else if(currTime.Hours == 11) {
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <currHourInc+0x68>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b0b      	cmp	r3, #11
 8001482:	d10e      	bne.n	80014a2 <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001484:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <currHourInc+0x68>)
 8001486:	78db      	ldrb	r3, [r3, #3]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d103      	bne.n	8001494 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800148c:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <currHourInc+0x68>)
 800148e:	2201      	movs	r2, #1
 8001490:	70da      	strb	r2, [r3, #3]
 8001492:	e002      	b.n	800149a <currHourInc+0x3e>
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001494:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <currHourInc+0x68>)
 8001496:	2200      	movs	r2, #0
 8001498:	70da      	strb	r2, [r3, #3]
		currTime.Hours = 12;
 800149a:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <currHourInc+0x68>)
 800149c:	220c      	movs	r2, #12
 800149e:	701a      	strb	r2, [r3, #0]
}
 80014a0:	e00b      	b.n	80014ba <currHourInc+0x5e>
	else if(userAlarmTime.Hours < 11) {
 80014a2:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <currHourInc+0x70>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b0a      	cmp	r3, #10
 80014a8:	d806      	bhi.n	80014b8 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <currHourInc+0x68>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <currHourInc+0x68>)
 80014b4:	701a      	strb	r2, [r3, #0]
}
 80014b6:	e000      	b.n	80014ba <currHourInc+0x5e>
		__NOP();
 80014b8:	46c0      	nop			@ (mov r8, r8)
}
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000204 	.word	0x20000204
 80014c4:	200001f0 	.word	0x200001f0
 80014c8:	2000012c 	.word	0x2000012c
 80014cc:	20000208 	.word	0x20000208

080014d0 <alarmMinuteInc>:

void alarmMinuteInc(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <alarmMinuteInc+0x38>)
 80014d6:	785b      	ldrb	r3, [r3, #1]
 80014d8:	2b3a      	cmp	r3, #58	@ 0x3a
 80014da:	d905      	bls.n	80014e8 <alarmMinuteInc+0x18>
		alarmHourInc();
 80014dc:	f7ff ff90 	bl	8001400 <alarmHourInc>
		userAlarmTime.Minutes = 0;
 80014e0:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <alarmMinuteInc+0x38>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 80014e6:	e00b      	b.n	8001500 <alarmMinuteInc+0x30>
	else if(userAlarmTime.Minutes < 59) {
 80014e8:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <alarmMinuteInc+0x38>)
 80014ea:	785b      	ldrb	r3, [r3, #1]
 80014ec:	2b3a      	cmp	r3, #58	@ 0x3a
 80014ee:	d806      	bhi.n	80014fe <alarmMinuteInc+0x2e>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 80014f0:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <alarmMinuteInc+0x38>)
 80014f2:	785b      	ldrb	r3, [r3, #1]
 80014f4:	3301      	adds	r3, #1
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <alarmMinuteInc+0x38>)
 80014fa:	705a      	strb	r2, [r3, #1]
}
 80014fc:	e000      	b.n	8001500 <alarmMinuteInc+0x30>
		__NOP();
 80014fe:	46c0      	nop			@ (mov r8, r8)
}
 8001500:	46c0      	nop			@ (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	20000208 	.word	0x20000208

0800150c <currMinuteInc>:

void currMinuteInc(void) {
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001510:	4a0f      	ldr	r2, [pc, #60]	@ (8001550 <currMinuteInc+0x44>)
 8001512:	4910      	ldr	r1, [pc, #64]	@ (8001554 <currMinuteInc+0x48>)
 8001514:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <currMinuteInc+0x4c>)
 8001516:	0018      	movs	r0, r3
 8001518:	f7ff f8ec 	bl	80006f4 <getRTCTime>

	if(currTime.Minutes >= 59) {
 800151c:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <currMinuteInc+0x48>)
 800151e:	785b      	ldrb	r3, [r3, #1]
 8001520:	2b3a      	cmp	r3, #58	@ 0x3a
 8001522:	d905      	bls.n	8001530 <currMinuteInc+0x24>
		currHourInc();
 8001524:	f7ff ff9a 	bl	800145c <currHourInc>
		currTime.Minutes = 0;
 8001528:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <currMinuteInc+0x48>)
 800152a:	2200      	movs	r2, #0
 800152c:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 800152e:	e00b      	b.n	8001548 <currMinuteInc+0x3c>
	else if(currTime.Minutes < 59) {
 8001530:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <currMinuteInc+0x48>)
 8001532:	785b      	ldrb	r3, [r3, #1]
 8001534:	2b3a      	cmp	r3, #58	@ 0x3a
 8001536:	d806      	bhi.n	8001546 <currMinuteInc+0x3a>
		currTime.Minutes = currTime.Minutes + 1;
 8001538:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <currMinuteInc+0x48>)
 800153a:	785b      	ldrb	r3, [r3, #1]
 800153c:	3301      	adds	r3, #1
 800153e:	b2da      	uxtb	r2, r3
 8001540:	4b04      	ldr	r3, [pc, #16]	@ (8001554 <currMinuteInc+0x48>)
 8001542:	705a      	strb	r2, [r3, #1]
}
 8001544:	e000      	b.n	8001548 <currMinuteInc+0x3c>
		__NOP();
 8001546:	46c0      	nop			@ (mov r8, r8)
}
 8001548:	46c0      	nop			@ (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	46c0      	nop			@ (mov r8, r8)
 8001550:	20000204 	.word	0x20000204
 8001554:	200001f0 	.word	0x200001f0
 8001558:	2000012c 	.word	0x2000012c

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001564:	46c0      	nop			@ (mov r8, r8)
 8001566:	e7fd      	b.n	8001564 <Error_Handler+0x8>

08001568 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM,
					uint32_t tim_PWM_CHANNEL) {
 8001568:	b5b0      	push	{r4, r5, r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	0005      	movs	r5, r0
 8001570:	000c      	movs	r4, r1
 8001572:	0010      	movs	r0, r2
 8001574:	0019      	movs	r1, r3
 8001576:	1dbb      	adds	r3, r7, #6
 8001578:	1c2a      	adds	r2, r5, #0
 800157a:	801a      	strh	r2, [r3, #0]
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	1c22      	adds	r2, r4, #0
 8001580:	801a      	strh	r2, [r3, #0]
 8001582:	1cbb      	adds	r3, r7, #2
 8001584:	1c02      	adds	r2, r0, #0
 8001586:	801a      	strh	r2, [r3, #0]
 8001588:	003b      	movs	r3, r7
 800158a:	1c0a      	adds	r2, r1, #0
 800158c:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 800158e:	4b7a      	ldr	r3, [pc, #488]	@ (8001778 <sevSeg_Init+0x210>)
 8001590:	1dba      	adds	r2, r7, #6
 8001592:	8812      	ldrh	r2, [r2, #0]
 8001594:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8001596:	4b79      	ldr	r3, [pc, #484]	@ (800177c <sevSeg_Init+0x214>)
 8001598:	1d3a      	adds	r2, r7, #4
 800159a:	8812      	ldrh	r2, [r2, #0]
 800159c:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 800159e:	4b78      	ldr	r3, [pc, #480]	@ (8001780 <sevSeg_Init+0x218>)
 80015a0:	1cba      	adds	r2, r7, #2
 80015a2:	8812      	ldrh	r2, [r2, #0]
 80015a4:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 80015a6:	4b77      	ldr	r3, [pc, #476]	@ (8001784 <sevSeg_Init+0x21c>)
 80015a8:	003a      	movs	r2, r7
 80015aa:	8812      	ldrh	r2, [r2, #0]
 80015ac:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 80015ae:	4a76      	ldr	r2, [pc, #472]	@ (8001788 <sevSeg_Init+0x220>)
 80015b0:	2330      	movs	r3, #48	@ 0x30
 80015b2:	18fb      	adds	r3, r7, r3
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	8013      	strh	r3, [r2, #0]

	for(int i = 0; i < 5; i++) {
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	e00b      	b.n	80015d6 <sevSeg_Init+0x6e>
		portArray[i] = GPIOPortArray[i];
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015c4:	18d3      	adds	r3, r2, r3
 80015c6:	6819      	ldr	r1, [r3, #0]
 80015c8:	4b70      	ldr	r3, [pc, #448]	@ (800178c <sevSeg_Init+0x224>)
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	0092      	lsls	r2, r2, #2
 80015ce:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	3301      	adds	r3, #1
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	2b04      	cmp	r3, #4
 80015da:	ddf0      	ble.n	80015be <sevSeg_Init+0x56>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 80015dc:	4b6b      	ldr	r3, [pc, #428]	@ (800178c <sevSeg_Init+0x224>)
 80015de:	6918      	ldr	r0, [r3, #16]
 80015e0:	4b69      	ldr	r3, [pc, #420]	@ (8001788 <sevSeg_Init+0x220>)
 80015e2:	8819      	ldrh	r1, [r3, #0]
 80015e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001790 <sevSeg_Init+0x228>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	001a      	movs	r2, r3
 80015ea:	f001 fb2c 	bl	8002c46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 80015ee:	4b67      	ldr	r3, [pc, #412]	@ (800178c <sevSeg_Init+0x224>)
 80015f0:	6918      	ldr	r0, [r3, #16]
 80015f2:	4b65      	ldr	r3, [pc, #404]	@ (8001788 <sevSeg_Init+0x220>)
 80015f4:	8819      	ldrh	r1, [r3, #0]
 80015f6:	4b66      	ldr	r3, [pc, #408]	@ (8001790 <sevSeg_Init+0x228>)
 80015f8:	785b      	ldrb	r3, [r3, #1]
 80015fa:	001a      	movs	r2, r3
 80015fc:	f001 fb23 	bl	8002c46 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001600:	4b62      	ldr	r3, [pc, #392]	@ (800178c <sevSeg_Init+0x224>)
 8001602:	6898      	ldr	r0, [r3, #8]
 8001604:	4b5e      	ldr	r3, [pc, #376]	@ (8001780 <sevSeg_Init+0x218>)
 8001606:	8819      	ldrh	r1, [r3, #0]
 8001608:	4b61      	ldr	r3, [pc, #388]	@ (8001790 <sevSeg_Init+0x228>)
 800160a:	785b      	ldrb	r3, [r3, #1]
 800160c:	001a      	movs	r2, r3
 800160e:	f001 fb1a 	bl	8002c46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001612:	4b5e      	ldr	r3, [pc, #376]	@ (800178c <sevSeg_Init+0x224>)
 8001614:	6898      	ldr	r0, [r3, #8]
 8001616:	4b5a      	ldr	r3, [pc, #360]	@ (8001780 <sevSeg_Init+0x218>)
 8001618:	8819      	ldrh	r1, [r3, #0]
 800161a:	4b5d      	ldr	r3, [pc, #372]	@ (8001790 <sevSeg_Init+0x228>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	001a      	movs	r2, r3
 8001620:	f001 fb11 	bl	8002c46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8001624:	4b59      	ldr	r3, [pc, #356]	@ (800178c <sevSeg_Init+0x224>)
 8001626:	68d8      	ldr	r0, [r3, #12]
 8001628:	4b56      	ldr	r3, [pc, #344]	@ (8001784 <sevSeg_Init+0x21c>)
 800162a:	8819      	ldrh	r1, [r3, #0]
 800162c:	4b58      	ldr	r3, [pc, #352]	@ (8001790 <sevSeg_Init+0x228>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	001a      	movs	r2, r3
 8001632:	f001 fb08 	bl	8002c46 <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(htim_PWM, tim_PWM_CHANNEL, 50);
 8001636:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800163a:	2232      	movs	r2, #50	@ 0x32
 800163c:	0018      	movs	r0, r3
 800163e:	f000 f95d 	bl	80018fc <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8001642:	2308      	movs	r3, #8
 8001644:	18fb      	adds	r3, r7, r3
 8001646:	4a53      	ldr	r2, [pc, #332]	@ (8001794 <sevSeg_Init+0x22c>)
 8001648:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e038      	b.n	80016c2 <sevSeg_Init+0x15a>

		sendByte = hofSymb[i];
 8001650:	231b      	movs	r3, #27
 8001652:	18fb      	adds	r3, r7, r3
 8001654:	2208      	movs	r2, #8
 8001656:	18b9      	adds	r1, r7, r2
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	188a      	adds	r2, r1, r2
 800165c:	7812      	ldrb	r2, [r2, #0]
 800165e:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	e027      	b.n	80016b6 <sevSeg_Init+0x14e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001666:	4b49      	ldr	r3, [pc, #292]	@ (800178c <sevSeg_Init+0x224>)
 8001668:	6818      	ldr	r0, [r3, #0]
 800166a:	4b43      	ldr	r3, [pc, #268]	@ (8001778 <sevSeg_Init+0x210>)
 800166c:	8819      	ldrh	r1, [r3, #0]
 800166e:	241b      	movs	r4, #27
 8001670:	193b      	adds	r3, r7, r4
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2201      	movs	r2, #1
 8001676:	4013      	ands	r3, r2
 8001678:	4a45      	ldr	r2, [pc, #276]	@ (8001790 <sevSeg_Init+0x228>)
 800167a:	5cd3      	ldrb	r3, [r2, r3]
 800167c:	001a      	movs	r2, r3
 800167e:	f001 fae2 	bl	8002c46 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001682:	4b42      	ldr	r3, [pc, #264]	@ (800178c <sevSeg_Init+0x224>)
 8001684:	6858      	ldr	r0, [r3, #4]
 8001686:	4b3d      	ldr	r3, [pc, #244]	@ (800177c <sevSeg_Init+0x214>)
 8001688:	8819      	ldrh	r1, [r3, #0]
 800168a:	4b41      	ldr	r3, [pc, #260]	@ (8001790 <sevSeg_Init+0x228>)
 800168c:	785b      	ldrb	r3, [r3, #1]
 800168e:	001a      	movs	r2, r3
 8001690:	f001 fad9 	bl	8002c46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001694:	4b3d      	ldr	r3, [pc, #244]	@ (800178c <sevSeg_Init+0x224>)
 8001696:	6858      	ldr	r0, [r3, #4]
 8001698:	4b38      	ldr	r3, [pc, #224]	@ (800177c <sevSeg_Init+0x214>)
 800169a:	8819      	ldrh	r1, [r3, #0]
 800169c:	4b3c      	ldr	r3, [pc, #240]	@ (8001790 <sevSeg_Init+0x228>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	001a      	movs	r2, r3
 80016a2:	f001 fad0 	bl	8002c46 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 80016a6:	193b      	adds	r3, r7, r4
 80016a8:	193a      	adds	r2, r7, r4
 80016aa:	7812      	ldrb	r2, [r2, #0]
 80016ac:	0852      	lsrs	r2, r2, #1
 80016ae:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	3301      	adds	r3, #1
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	2b07      	cmp	r3, #7
 80016ba:	ddd4      	ble.n	8001666 <sevSeg_Init+0xfe>
	for(int i = 0; i <= 3; i++) {
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	3301      	adds	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	ddc3      	ble.n	8001650 <sevSeg_Init+0xe8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80016c8:	4b30      	ldr	r3, [pc, #192]	@ (800178c <sevSeg_Init+0x224>)
 80016ca:	6898      	ldr	r0, [r3, #8]
 80016cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001780 <sevSeg_Init+0x218>)
 80016ce:	8819      	ldrh	r1, [r3, #0]
 80016d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001790 <sevSeg_Init+0x228>)
 80016d2:	785b      	ldrb	r3, [r3, #1]
 80016d4:	001a      	movs	r2, r3
 80016d6:	f001 fab6 	bl	8002c46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80016da:	4b2c      	ldr	r3, [pc, #176]	@ (800178c <sevSeg_Init+0x224>)
 80016dc:	6898      	ldr	r0, [r3, #8]
 80016de:	4b28      	ldr	r3, [pc, #160]	@ (8001780 <sevSeg_Init+0x218>)
 80016e0:	8819      	ldrh	r1, [r3, #0]
 80016e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001790 <sevSeg_Init+0x228>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	001a      	movs	r2, r3
 80016e8:	f001 faad 	bl	8002c46 <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 80016ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016ee:	0018      	movs	r0, r3
 80016f0:	f003 fdb0 	bl	8005254 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 80016f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016f6:	0018      	movs	r0, r3
 80016f8:	f003 fd60 	bl	80051bc <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 80016fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001702:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 8)){ timerVal = __HAL_TIM_GET_COUNTER(htim); }
 8001704:	e003      	b.n	800170e <sevSeg_Init+0x1a6>
 8001706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	1ad2      	subs	r2, r2, r3
 8001718:	2380      	movs	r3, #128	@ 0x80
 800171a:	019b      	lsls	r3, r3, #6
 800171c:	429a      	cmp	r2, r3
 800171e:	d3f2      	bcc.n	8001706 <sevSeg_Init+0x19e>

	HAL_TIM_Base_Stop(htim);
 8001720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001722:	0018      	movs	r0, r3
 8001724:	f003 fd96 	bl	8005254 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001728:	4b18      	ldr	r3, [pc, #96]	@ (800178c <sevSeg_Init+0x224>)
 800172a:	6918      	ldr	r0, [r3, #16]
 800172c:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <sevSeg_Init+0x220>)
 800172e:	8819      	ldrh	r1, [r3, #0]
 8001730:	4b17      	ldr	r3, [pc, #92]	@ (8001790 <sevSeg_Init+0x228>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	001a      	movs	r2, r3
 8001736:	f001 fa86 	bl	8002c46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 800173a:	4b14      	ldr	r3, [pc, #80]	@ (800178c <sevSeg_Init+0x224>)
 800173c:	6918      	ldr	r0, [r3, #16]
 800173e:	4b12      	ldr	r3, [pc, #72]	@ (8001788 <sevSeg_Init+0x220>)
 8001740:	8819      	ldrh	r1, [r3, #0]
 8001742:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <sevSeg_Init+0x228>)
 8001744:	785b      	ldrb	r3, [r3, #1]
 8001746:	001a      	movs	r2, r3
 8001748:	f001 fa7d 	bl	8002c46 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <sevSeg_Init+0x224>)
 800174e:	6898      	ldr	r0, [r3, #8]
 8001750:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <sevSeg_Init+0x218>)
 8001752:	8819      	ldrh	r1, [r3, #0]
 8001754:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <sevSeg_Init+0x228>)
 8001756:	785b      	ldrb	r3, [r3, #1]
 8001758:	001a      	movs	r2, r3
 800175a:	f001 fa74 	bl	8002c46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800175e:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <sevSeg_Init+0x224>)
 8001760:	6898      	ldr	r0, [r3, #8]
 8001762:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <sevSeg_Init+0x218>)
 8001764:	8819      	ldrh	r1, [r3, #0]
 8001766:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <sevSeg_Init+0x228>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	001a      	movs	r2, r3
 800176c:	f001 fa6b 	bl	8002c46 <HAL_GPIO_WritePin>

}
 8001770:	46c0      	nop			@ (mov r8, r8)
 8001772:	46bd      	mov	sp, r7
 8001774:	b008      	add	sp, #32
 8001776:	bdb0      	pop	{r4, r5, r7, pc}
 8001778:	2000021e 	.word	0x2000021e
 800177c:	20000220 	.word	0x20000220
 8001780:	20000222 	.word	0x20000222
 8001784:	20000224 	.word	0x20000224
 8001788:	20000226 	.word	0x20000226
 800178c:	20000030 	.word	0x20000030
 8001790:	20000044 	.word	0x20000044
 8001794:	471d3700 	.word	0x471d3700

08001798 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	210a      	movs	r1, #10
 80017a6:	0018      	movs	r0, r3
 80017a8:	f7fe fcac 	bl	8000104 <__udivsi3>
 80017ac:	0003      	movs	r3, r0
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	2408      	movs	r4, #8
 80017b2:	193b      	adds	r3, r7, r4
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	210a      	movs	r1, #10
 80017bc:	0018      	movs	r0, r3
 80017be:	f7fe fd27 	bl	8000210 <__aeabi_uidivmod>
 80017c2:	000b      	movs	r3, r1
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	193b      	adds	r3, r7, r4
 80017c8:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80017ce:	210a      	movs	r1, #10
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7fe fc97 	bl	8000104 <__udivsi3>
 80017d6:	0003      	movs	r3, r0
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	193b      	adds	r3, r7, r4
 80017dc:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80017e2:	210a      	movs	r1, #10
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7fe fd13 	bl	8000210 <__aeabi_uidivmod>
 80017ea:	000b      	movs	r3, r1
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	193b      	adds	r3, r7, r4
 80017f0:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 80017f2:	2116      	movs	r1, #22
 80017f4:	187b      	adds	r3, r7, r1
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	78db      	ldrb	r3, [r3, #3]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d102      	bne.n	8001808 <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 8001802:	187b      	adds	r3, r7, r1
 8001804:	2202      	movs	r2, #2
 8001806:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 8001808:	2300      	movs	r3, #0
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	e04f      	b.n	80018ae <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 800180e:	2308      	movs	r3, #8
 8001810:	18fa      	adds	r2, r7, r3
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	18d3      	adds	r3, r2, r3
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	0019      	movs	r1, r3
 800181a:	2417      	movs	r4, #23
 800181c:	193b      	adds	r3, r7, r4
 800181e:	4a30      	ldr	r2, [pc, #192]	@ (80018e0 <sevSeg_updateDigits+0x148>)
 8001820:	5c52      	ldrb	r2, [r2, r1]
 8001822:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d110      	bne.n	800184c <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	210a      	movs	r1, #10
 8001830:	0018      	movs	r0, r3
 8001832:	f7fe fc67 	bl	8000104 <__udivsi3>
 8001836:	0003      	movs	r3, r0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	001a      	movs	r2, r3
 800183c:	2316      	movs	r3, #22
 800183e:	18fb      	adds	r3, r7, r3
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	18d2      	adds	r2, r2, r3
 8001844:	193b      	adds	r3, r7, r4
 8001846:	4927      	ldr	r1, [pc, #156]	@ (80018e4 <sevSeg_updateDigits+0x14c>)
 8001848:	5c8a      	ldrb	r2, [r1, r2]
 800184a:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	e027      	b.n	80018a2 <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001852:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <sevSeg_updateDigits+0x150>)
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	4b25      	ldr	r3, [pc, #148]	@ (80018ec <sevSeg_updateDigits+0x154>)
 8001858:	8819      	ldrh	r1, [r3, #0]
 800185a:	2417      	movs	r4, #23
 800185c:	193b      	adds	r3, r7, r4
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2201      	movs	r2, #1
 8001862:	4013      	ands	r3, r2
 8001864:	4a22      	ldr	r2, [pc, #136]	@ (80018f0 <sevSeg_updateDigits+0x158>)
 8001866:	5cd3      	ldrb	r3, [r2, r3]
 8001868:	001a      	movs	r2, r3
 800186a:	f001 f9ec 	bl	8002c46 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 800186e:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <sevSeg_updateDigits+0x150>)
 8001870:	6858      	ldr	r0, [r3, #4]
 8001872:	4b20      	ldr	r3, [pc, #128]	@ (80018f4 <sevSeg_updateDigits+0x15c>)
 8001874:	8819      	ldrh	r1, [r3, #0]
 8001876:	4b1e      	ldr	r3, [pc, #120]	@ (80018f0 <sevSeg_updateDigits+0x158>)
 8001878:	785b      	ldrb	r3, [r3, #1]
 800187a:	001a      	movs	r2, r3
 800187c:	f001 f9e3 	bl	8002c46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001880:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <sevSeg_updateDigits+0x150>)
 8001882:	6858      	ldr	r0, [r3, #4]
 8001884:	4b1b      	ldr	r3, [pc, #108]	@ (80018f4 <sevSeg_updateDigits+0x15c>)
 8001886:	8819      	ldrh	r1, [r3, #0]
 8001888:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <sevSeg_updateDigits+0x158>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	001a      	movs	r2, r3
 800188e:	f001 f9da 	bl	8002c46 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001892:	193b      	adds	r3, r7, r4
 8001894:	193a      	adds	r2, r7, r4
 8001896:	7812      	ldrb	r2, [r2, #0]
 8001898:	0852      	lsrs	r2, r2, #1
 800189a:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3301      	adds	r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b07      	cmp	r3, #7
 80018a6:	ddd4      	ble.n	8001852 <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	3301      	adds	r3, #1
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	ddac      	ble.n	800180e <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80018b4:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <sevSeg_updateDigits+0x150>)
 80018b6:	6898      	ldr	r0, [r3, #8]
 80018b8:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <sevSeg_updateDigits+0x160>)
 80018ba:	8819      	ldrh	r1, [r3, #0]
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <sevSeg_updateDigits+0x158>)
 80018be:	785b      	ldrb	r3, [r3, #1]
 80018c0:	001a      	movs	r2, r3
 80018c2:	f001 f9c0 	bl	8002c46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80018c6:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <sevSeg_updateDigits+0x150>)
 80018c8:	6898      	ldr	r0, [r3, #8]
 80018ca:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <sevSeg_updateDigits+0x160>)
 80018cc:	8819      	ldrh	r1, [r3, #0]
 80018ce:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <sevSeg_updateDigits+0x158>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	001a      	movs	r2, r3
 80018d4:	f001 f9b7 	bl	8002c46 <HAL_GPIO_WritePin>

	return;
 80018d8:	46c0      	nop			@ (mov r8, r8)

}
 80018da:	46bd      	mov	sp, r7
 80018dc:	b007      	add	sp, #28
 80018de:	bd90      	pop	{r4, r7, pc}
 80018e0:	08005ef4 	.word	0x08005ef4
 80018e4:	08005f00 	.word	0x08005f00
 80018e8:	20000030 	.word	0x20000030
 80018ec:	2000021e 	.word	0x2000021e
 80018f0:	20000044 	.word	0x20000044
 80018f4:	20000220 	.word	0x20000220
 80018f8:	20000222 	.word	0x20000222

080018fc <sevSeg_setIntensity>:

void sevSeg_setIntensity(TIM_HandleTypeDef *htim_PWM, uint32_t tim_PWM_CHANNEL, uint16_t dutyCycle) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	1dbb      	adds	r3, r7, #6
 8001908:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(htim_PWM, tim_PWM_CHANNEL, dutyCycle);
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d105      	bne.n	800191c <sevSeg_setIntensity+0x20>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	1dba      	adds	r2, r7, #6
 8001916:	8812      	ldrh	r2, [r2, #0]
 8001918:	635a      	str	r2, [r3, #52]	@ 0x34
 800191a:	e028      	b.n	800196e <sevSeg_setIntensity+0x72>
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b04      	cmp	r3, #4
 8001920:	d105      	bne.n	800192e <sevSeg_setIntensity+0x32>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	1dbb      	adds	r3, r7, #6
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	6393      	str	r3, [r2, #56]	@ 0x38
 800192c:	e01f      	b.n	800196e <sevSeg_setIntensity+0x72>
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b08      	cmp	r3, #8
 8001932:	d105      	bne.n	8001940 <sevSeg_setIntensity+0x44>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	1dbb      	adds	r3, r7, #6
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800193e:	e016      	b.n	800196e <sevSeg_setIntensity+0x72>
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2b0c      	cmp	r3, #12
 8001944:	d105      	bne.n	8001952 <sevSeg_setIntensity+0x56>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	1dbb      	adds	r3, r7, #6
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001950:	e00d      	b.n	800196e <sevSeg_setIntensity+0x72>
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2b10      	cmp	r3, #16
 8001956:	d105      	bne.n	8001964 <sevSeg_setIntensity+0x68>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	1dbb      	adds	r3, r7, #6
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	6593      	str	r3, [r2, #88]	@ 0x58
 8001962:	e004      	b.n	800196e <sevSeg_setIntensity+0x72>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	1dbb      	adds	r3, r7, #6
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(htim_PWM, tim_PWM_CHANNEL);
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	0011      	movs	r1, r2
 8001974:	0018      	movs	r0, r3
 8001976:	f003 fceb 	bl	8005350 <HAL_TIM_PWM_Start>

}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	b004      	add	sp, #16
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	4b0f      	ldr	r3, [pc, #60]	@ (80019c8 <HAL_MspInit+0x44>)
 800198c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800198e:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <HAL_MspInit+0x44>)
 8001990:	2101      	movs	r1, #1
 8001992:	430a      	orrs	r2, r1
 8001994:	641a      	str	r2, [r3, #64]	@ 0x40
 8001996:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <HAL_MspInit+0x44>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	2201      	movs	r2, #1
 800199c:	4013      	ands	r3, r2
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <HAL_MspInit+0x44>)
 80019a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019a6:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <HAL_MspInit+0x44>)
 80019a8:	2180      	movs	r1, #128	@ 0x80
 80019aa:	0549      	lsls	r1, r1, #21
 80019ac:	430a      	orrs	r2, r1
 80019ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019b0:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <HAL_MspInit+0x44>)
 80019b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019b4:	2380      	movs	r3, #128	@ 0x80
 80019b6:	055b      	lsls	r3, r3, #21
 80019b8:	4013      	ands	r3, r2
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b002      	add	sp, #8
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	40021000 	.word	0x40021000

080019cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b08b      	sub	sp, #44	@ 0x2c
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	2414      	movs	r4, #20
 80019d6:	193b      	adds	r3, r7, r4
 80019d8:	0018      	movs	r0, r3
 80019da:	2314      	movs	r3, #20
 80019dc:	001a      	movs	r2, r3
 80019de:	2100      	movs	r1, #0
 80019e0:	f004 fa40 	bl	8005e64 <memset>
  if(hadc->Instance==ADC1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a18      	ldr	r2, [pc, #96]	@ (8001a4c <HAL_ADC_MspInit+0x80>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d129      	bne.n	8001a42 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019ee:	4b18      	ldr	r3, [pc, #96]	@ (8001a50 <HAL_ADC_MspInit+0x84>)
 80019f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019f2:	4b17      	ldr	r3, [pc, #92]	@ (8001a50 <HAL_ADC_MspInit+0x84>)
 80019f4:	2180      	movs	r1, #128	@ 0x80
 80019f6:	0349      	lsls	r1, r1, #13
 80019f8:	430a      	orrs	r2, r1
 80019fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80019fc:	4b14      	ldr	r3, [pc, #80]	@ (8001a50 <HAL_ADC_MspInit+0x84>)
 80019fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a00:	2380      	movs	r3, #128	@ 0x80
 8001a02:	035b      	lsls	r3, r3, #13
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <HAL_ADC_MspInit+0x84>)
 8001a0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <HAL_ADC_MspInit+0x84>)
 8001a10:	2101      	movs	r1, #1
 8001a12:	430a      	orrs	r2, r1
 8001a14:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a16:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <HAL_ADC_MspInit+0x84>)
 8001a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a22:	193b      	adds	r3, r7, r4
 8001a24:	2204      	movs	r2, #4
 8001a26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a28:	193b      	adds	r3, r7, r4
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	193b      	adds	r3, r7, r4
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	193a      	adds	r2, r7, r4
 8001a36:	23a0      	movs	r3, #160	@ 0xa0
 8001a38:	05db      	lsls	r3, r3, #23
 8001a3a:	0011      	movs	r1, r2
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f000 ff81 	bl	8002944 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b00b      	add	sp, #44	@ 0x2c
 8001a48:	bd90      	pop	{r4, r7, pc}
 8001a4a:	46c0      	nop			@ (mov r8, r8)
 8001a4c:	40012400 	.word	0x40012400
 8001a50:	40021000 	.word	0x40021000

08001a54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b095      	sub	sp, #84	@ 0x54
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	233c      	movs	r3, #60	@ 0x3c
 8001a5e:	18fb      	adds	r3, r7, r3
 8001a60:	0018      	movs	r0, r3
 8001a62:	2314      	movs	r3, #20
 8001a64:	001a      	movs	r2, r3
 8001a66:	2100      	movs	r1, #0
 8001a68:	f004 f9fc 	bl	8005e64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a6c:	2414      	movs	r4, #20
 8001a6e:	193b      	adds	r3, r7, r4
 8001a70:	0018      	movs	r0, r3
 8001a72:	2328      	movs	r3, #40	@ 0x28
 8001a74:	001a      	movs	r2, r3
 8001a76:	2100      	movs	r1, #0
 8001a78:	f004 f9f4 	bl	8005e64 <memset>
  if(hi2c->Instance==I2C1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a22      	ldr	r2, [pc, #136]	@ (8001b0c <HAL_I2C_MspInit+0xb8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d13d      	bne.n	8001b02 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a86:	193b      	adds	r3, r7, r4
 8001a88:	2220      	movs	r2, #32
 8001a8a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a8c:	193b      	adds	r3, r7, r4
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a92:	193b      	adds	r3, r7, r4
 8001a94:	0018      	movs	r0, r3
 8001a96:	f002 fc79 	bl	800438c <HAL_RCCEx_PeriphCLKConfig>
 8001a9a:	1e03      	subs	r3, r0, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001a9e:	f7ff fd5d 	bl	800155c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <HAL_I2C_MspInit+0xbc>)
 8001aa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b10 <HAL_I2C_MspInit+0xbc>)
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	635a      	str	r2, [r3, #52]	@ 0x34
 8001aae:	4b18      	ldr	r3, [pc, #96]	@ (8001b10 <HAL_I2C_MspInit+0xbc>)
 8001ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aba:	213c      	movs	r1, #60	@ 0x3c
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	22c0      	movs	r2, #192	@ 0xc0
 8001ac0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac2:	187b      	adds	r3, r7, r1
 8001ac4:	2212      	movs	r2, #18
 8001ac6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	187b      	adds	r3, r7, r1
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	187b      	adds	r3, r7, r1
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	2206      	movs	r2, #6
 8001ad8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ada:	187b      	adds	r3, r7, r1
 8001adc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b14 <HAL_I2C_MspInit+0xc0>)
 8001ade:	0019      	movs	r1, r3
 8001ae0:	0010      	movs	r0, r2
 8001ae2:	f000 ff2f 	bl	8002944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b10 <HAL_I2C_MspInit+0xbc>)
 8001ae8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001aea:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <HAL_I2C_MspInit+0xbc>)
 8001aec:	2180      	movs	r1, #128	@ 0x80
 8001aee:	0389      	lsls	r1, r1, #14
 8001af0:	430a      	orrs	r2, r1
 8001af2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_I2C_MspInit+0xbc>)
 8001af6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001af8:	2380      	movs	r3, #128	@ 0x80
 8001afa:	039b      	lsls	r3, r3, #14
 8001afc:	4013      	ands	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b02:	46c0      	nop			@ (mov r8, r8)
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b015      	add	sp, #84	@ 0x54
 8001b08:	bd90      	pop	{r4, r7, pc}
 8001b0a:	46c0      	nop			@ (mov r8, r8)
 8001b0c:	40005400 	.word	0x40005400
 8001b10:	40021000 	.word	0x40021000
 8001b14:	50000400 	.word	0x50000400

08001b18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b08f      	sub	sp, #60	@ 0x3c
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b20:	2410      	movs	r4, #16
 8001b22:	193b      	adds	r3, r7, r4
 8001b24:	0018      	movs	r0, r3
 8001b26:	2328      	movs	r3, #40	@ 0x28
 8001b28:	001a      	movs	r2, r3
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	f004 f99a 	bl	8005e64 <memset>
  if(hrtc->Instance==RTC)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a19      	ldr	r2, [pc, #100]	@ (8001b9c <HAL_RTC_MspInit+0x84>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d12c      	bne.n	8001b94 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b3a:	193b      	adds	r3, r7, r4
 8001b3c:	2280      	movs	r2, #128	@ 0x80
 8001b3e:	0292      	lsls	r2, r2, #10
 8001b40:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b42:	193b      	adds	r3, r7, r4
 8001b44:	2280      	movs	r2, #128	@ 0x80
 8001b46:	0052      	lsls	r2, r2, #1
 8001b48:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b4a:	193b      	adds	r3, r7, r4
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f002 fc1d 	bl	800438c <HAL_RCCEx_PeriphCLKConfig>
 8001b52:	1e03      	subs	r3, r0, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001b56:	f7ff fd01 	bl	800155c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <HAL_RTC_MspInit+0x88>)
 8001b5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ba0 <HAL_RTC_MspInit+0x88>)
 8001b60:	2180      	movs	r1, #128	@ 0x80
 8001b62:	0209      	lsls	r1, r1, #8
 8001b64:	430a      	orrs	r2, r1
 8001b66:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001b68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba0 <HAL_RTC_MspInit+0x88>)
 8001b6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <HAL_RTC_MspInit+0x88>)
 8001b6e:	2180      	movs	r1, #128	@ 0x80
 8001b70:	00c9      	lsls	r1, r1, #3
 8001b72:	430a      	orrs	r2, r1
 8001b74:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <HAL_RTC_MspInit+0x88>)
 8001b78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b7a:	2380      	movs	r3, #128	@ 0x80
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4013      	ands	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2100      	movs	r1, #0
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f000 fea9 	bl	80028e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001b8e:	2002      	movs	r0, #2
 8001b90:	f000 febb 	bl	800290a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001b94:	46c0      	nop			@ (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b00f      	add	sp, #60	@ 0x3c
 8001b9a:	bd90      	pop	{r4, r7, pc}
 8001b9c:	40002800 	.word	0x40002800
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2380      	movs	r3, #128	@ 0x80
 8001bb2:	05db      	lsls	r3, r3, #23
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d10b      	bne.n	8001bd0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bb8:	4b07      	ldr	r3, [pc, #28]	@ (8001bd8 <HAL_TIM_PWM_MspInit+0x34>)
 8001bba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bbc:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_TIM_PWM_MspInit+0x34>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001bc4:	4b04      	ldr	r3, [pc, #16]	@ (8001bd8 <HAL_TIM_PWM_MspInit+0x34>)
 8001bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc8:	2201      	movs	r2, #1
 8001bca:	4013      	ands	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bd0:	46c0      	nop			@ (mov r8, r8)
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b004      	add	sp, #16
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000

08001bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <HAL_TIM_Base_MspInit+0x38>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d10d      	bne.n	8001c0a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001bee:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <HAL_TIM_Base_MspInit+0x3c>)
 8001bf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bf2:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <HAL_TIM_Base_MspInit+0x3c>)
 8001bf4:	2180      	movs	r1, #128	@ 0x80
 8001bf6:	0209      	lsls	r1, r1, #8
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_TIM_Base_MspInit+0x3c>)
 8001bfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c00:	2380      	movs	r3, #128	@ 0x80
 8001c02:	021b      	lsls	r3, r3, #8
 8001c04:	4013      	ands	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001c0a:	46c0      	nop			@ (mov r8, r8)
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b004      	add	sp, #16
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	46c0      	nop			@ (mov r8, r8)
 8001c14:	40002000 	.word	0x40002000
 8001c18:	40021000 	.word	0x40021000

08001c1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	240c      	movs	r4, #12
 8001c26:	193b      	adds	r3, r7, r4
 8001c28:	0018      	movs	r0, r3
 8001c2a:	2314      	movs	r3, #20
 8001c2c:	001a      	movs	r2, r3
 8001c2e:	2100      	movs	r1, #0
 8001c30:	f004 f918 	bl	8005e64 <memset>
  if(htim->Instance==TIM2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	2380      	movs	r3, #128	@ 0x80
 8001c3a:	05db      	lsls	r3, r3, #23
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d121      	bne.n	8001c84 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c40:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <HAL_TIM_MspPostInit+0x70>)
 8001c42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <HAL_TIM_MspPostInit+0x70>)
 8001c46:	2104      	movs	r1, #4
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <HAL_TIM_MspPostInit+0x70>)
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c50:	2204      	movs	r2, #4
 8001c52:	4013      	ands	r3, r2
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 8001c58:	0021      	movs	r1, r4
 8001c5a:	187b      	adds	r3, r7, r1
 8001c5c:	2240      	movs	r2, #64	@ 0x40
 8001c5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	187b      	adds	r3, r7, r1
 8001c62:	2202      	movs	r2, #2
 8001c64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	187b      	adds	r3, r7, r1
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	187b      	adds	r3, r7, r1
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001c72:	187b      	adds	r3, r7, r1
 8001c74:	2202      	movs	r2, #2
 8001c76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c78:	187b      	adds	r3, r7, r1
 8001c7a:	4a05      	ldr	r2, [pc, #20]	@ (8001c90 <HAL_TIM_MspPostInit+0x74>)
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	0010      	movs	r0, r2
 8001c80:	f000 fe60 	bl	8002944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c84:	46c0      	nop			@ (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b009      	add	sp, #36	@ 0x24
 8001c8a:	bd90      	pop	{r4, r7, pc}
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	50000800 	.word	0x50000800

08001c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c98:	46c0      	nop			@ (mov r8, r8)
 8001c9a:	e7fd      	b.n	8001c98 <NMI_Handler+0x4>

08001c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca0:	46c0      	nop			@ (mov r8, r8)
 8001ca2:	e7fd      	b.n	8001ca0 <HardFault_Handler+0x4>

08001ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ca8:	46c0      	nop			@ (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb2:	46c0      	nop			@ (mov r8, r8)
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cbc:	f000 f8ca 	bl	8001e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc0:	46c0      	nop			@ (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001ccc:	4b03      	ldr	r3, [pc, #12]	@ (8001cdc <RTC_TAMP_IRQHandler+0x14>)
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f003 f89c 	bl	8004e0c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8001cd4:	46c0      	nop			@ (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	2000012c 	.word	0x2000012c

08001ce0 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f000 ffe7 	bl	8002cb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 8001cea:	2002      	movs	r0, #2
 8001cec:	f000 ffe4 	bl	8002cb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001cf0:	46c0      	nop			@ (mov r8, r8)
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 8001cfa:	2004      	movs	r0, #4
 8001cfc:	f000 ffdc 	bl	8002cb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 8001d00:	2008      	movs	r0, #8
 8001d02:	f000 ffd9 	bl	8002cb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001d06:	46c0      	nop			@ (mov r8, r8)
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 8001d10:	2380      	movs	r3, #128	@ 0x80
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	0018      	movs	r0, r3
 8001d16:	f000 ffcf 	bl	8002cb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d24:	46c0      	nop			@ (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d2c:	480d      	ldr	r0, [pc, #52]	@ (8001d64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d2e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d30:	f7ff fff6 	bl	8001d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d34:	480c      	ldr	r0, [pc, #48]	@ (8001d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d36:	490d      	ldr	r1, [pc, #52]	@ (8001d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d38:	4a0d      	ldr	r2, [pc, #52]	@ (8001d70 <LoopForever+0xe>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d3c:	e002      	b.n	8001d44 <LoopCopyDataInit>

08001d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d42:	3304      	adds	r3, #4

08001d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d48:	d3f9      	bcc.n	8001d3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d78 <LoopForever+0x16>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d50:	e001      	b.n	8001d56 <LoopFillZerobss>

08001d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d54:	3204      	adds	r2, #4

08001d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d58:	d3fb      	bcc.n	8001d52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d5a:	f004 f88b 	bl	8005e74 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d5e:	f7fe fcdf 	bl	8000720 <main>

08001d62 <LoopForever>:

LoopForever:
  b LoopForever
 8001d62:	e7fe      	b.n	8001d62 <LoopForever>
  ldr   r0, =_estack
 8001d64:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d6c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001d70:	08005fa0 	.word	0x08005fa0
  ldr r2, =_sbss
 8001d74:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001d78:	2000022c 	.word	0x2000022c

08001d7c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC1_IRQHandler>
	...

08001d80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d86:	1dfb      	adds	r3, r7, #7
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <HAL_Init+0x3c>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b0a      	ldr	r3, [pc, #40]	@ (8001dbc <HAL_Init+0x3c>)
 8001d92:	2180      	movs	r1, #128	@ 0x80
 8001d94:	0049      	lsls	r1, r1, #1
 8001d96:	430a      	orrs	r2, r1
 8001d98:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d9a:	2003      	movs	r0, #3
 8001d9c:	f000 f810 	bl	8001dc0 <HAL_InitTick>
 8001da0:	1e03      	subs	r3, r0, #0
 8001da2:	d003      	beq.n	8001dac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001da4:	1dfb      	adds	r3, r7, #7
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	e001      	b.n	8001db0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001dac:	f7ff fdea 	bl	8001984 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001db0:	1dfb      	adds	r3, r7, #7
 8001db2:	781b      	ldrb	r3, [r3, #0]
}
 8001db4:	0018      	movs	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b002      	add	sp, #8
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40022000 	.word	0x40022000

08001dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc8:	230f      	movs	r3, #15
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e48 <HAL_InitTick+0x88>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d02b      	beq.n	8001e30 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <HAL_InitTick+0x8c>)
 8001dda:	681c      	ldr	r4, [r3, #0]
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e48 <HAL_InitTick+0x88>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	0019      	movs	r1, r3
 8001de2:	23fa      	movs	r3, #250	@ 0xfa
 8001de4:	0098      	lsls	r0, r3, #2
 8001de6:	f7fe f98d 	bl	8000104 <__udivsi3>
 8001dea:	0003      	movs	r3, r0
 8001dec:	0019      	movs	r1, r3
 8001dee:	0020      	movs	r0, r4
 8001df0:	f7fe f988 	bl	8000104 <__udivsi3>
 8001df4:	0003      	movs	r3, r0
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 fd97 	bl	800292a <HAL_SYSTICK_Config>
 8001dfc:	1e03      	subs	r3, r0, #0
 8001dfe:	d112      	bne.n	8001e26 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d80a      	bhi.n	8001e1c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	2301      	movs	r3, #1
 8001e0a:	425b      	negs	r3, r3
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f000 fd66 	bl	80028e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e14:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <HAL_InitTick+0x90>)
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	e00d      	b.n	8001e38 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001e1c:	230f      	movs	r3, #15
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
 8001e24:	e008      	b.n	8001e38 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e26:	230f      	movs	r3, #15
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
 8001e2e:	e003      	b.n	8001e38 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e30:	230f      	movs	r3, #15
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001e38:	230f      	movs	r3, #15
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	781b      	ldrb	r3, [r3, #0]
}
 8001e3e:	0018      	movs	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b005      	add	sp, #20
 8001e44:	bd90      	pop	{r4, r7, pc}
 8001e46:	46c0      	nop			@ (mov r8, r8)
 8001e48:	20000050 	.word	0x20000050
 8001e4c:	20000048 	.word	0x20000048
 8001e50:	2000004c 	.word	0x2000004c

08001e54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e58:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <HAL_IncTick+0x1c>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	001a      	movs	r2, r3
 8001e5e:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <HAL_IncTick+0x20>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	18d2      	adds	r2, r2, r3
 8001e64:	4b03      	ldr	r3, [pc, #12]	@ (8001e74 <HAL_IncTick+0x20>)
 8001e66:	601a      	str	r2, [r3, #0]
}
 8001e68:	46c0      	nop			@ (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	46c0      	nop			@ (mov r8, r8)
 8001e70:	20000050 	.word	0x20000050
 8001e74:	20000228 	.word	0x20000228

08001e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e7c:	4b02      	ldr	r3, [pc, #8]	@ (8001e88 <HAL_GetTick+0x10>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
}
 8001e80:	0018      	movs	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	46c0      	nop			@ (mov r8, r8)
 8001e88:	20000228 	.word	0x20000228

08001e8c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a05      	ldr	r2, [pc, #20]	@ (8001eb0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	601a      	str	r2, [r3, #0]
}
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b002      	add	sp, #8
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	46c0      	nop			@ (mov r8, r8)
 8001eb0:	fe3fffff 	.word	0xfe3fffff

08001eb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	23e0      	movs	r3, #224	@ 0xe0
 8001ec2:	045b      	lsls	r3, r3, #17
 8001ec4:	4013      	ands	r3, r2
}
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b002      	add	sp, #8
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	2104      	movs	r1, #4
 8001ee2:	400a      	ands	r2, r1
 8001ee4:	2107      	movs	r1, #7
 8001ee6:	4091      	lsls	r1, r2
 8001ee8:	000a      	movs	r2, r1
 8001eea:	43d2      	mvns	r2, r2
 8001eec:	401a      	ands	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2104      	movs	r1, #4
 8001ef2:	400b      	ands	r3, r1
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4099      	lsls	r1, r3
 8001ef8:	000b      	movs	r3, r1
 8001efa:	431a      	orrs	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001f00:	46c0      	nop			@ (mov r8, r8)
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b004      	add	sp, #16
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	2104      	movs	r1, #4
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	2107      	movs	r1, #7
 8001f1e:	4091      	lsls	r1, r2
 8001f20:	000a      	movs	r2, r1
 8001f22:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	2104      	movs	r1, #4
 8001f28:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f2a:	40da      	lsrs	r2, r3
 8001f2c:	0013      	movs	r3, r2
}
 8001f2e:	0018      	movs	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b002      	add	sp, #8
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b084      	sub	sp, #16
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	211f      	movs	r1, #31
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	210f      	movs	r1, #15
 8001f4e:	4091      	lsls	r1, r2
 8001f50:	000a      	movs	r2, r1
 8001f52:	43d2      	mvns	r2, r2
 8001f54:	401a      	ands	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	0e9b      	lsrs	r3, r3, #26
 8001f5a:	210f      	movs	r1, #15
 8001f5c:	4019      	ands	r1, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	201f      	movs	r0, #31
 8001f62:	4003      	ands	r3, r0
 8001f64:	4099      	lsls	r1, r3
 8001f66:	000b      	movs	r3, r1
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f6e:	46c0      	nop			@ (mov r8, r8)
 8001f70:	46bd      	mov	sp, r7
 8001f72:	b004      	add	sp, #16
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	035b      	lsls	r3, r3, #13
 8001f88:	0b5b      	lsrs	r3, r3, #13
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f90:	46c0      	nop			@ (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b002      	add	sp, #8
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	0352      	lsls	r2, r2, #13
 8001faa:	0b52      	lsrs	r2, r2, #13
 8001fac:	43d2      	mvns	r2, r2
 8001fae:	401a      	ands	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fb4:	46c0      	nop			@ (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b002      	add	sp, #8
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	0212      	lsls	r2, r2, #8
 8001fd0:	43d2      	mvns	r2, r2
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	400b      	ands	r3, r1
 8001fdc:	4904      	ldr	r1, [pc, #16]	@ (8001ff0 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001fde:	400b      	ands	r3, r1
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001fe6:	46c0      	nop			@ (mov r8, r8)
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b004      	add	sp, #16
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	07ffff00 	.word	0x07ffff00

08001ff4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4a05      	ldr	r2, [pc, #20]	@ (8002018 <LL_ADC_EnableInternalRegulator+0x24>)
 8002002:	4013      	ands	r3, r2
 8002004:	2280      	movs	r2, #128	@ 0x80
 8002006:	0552      	lsls	r2, r2, #21
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800200e:	46c0      	nop			@ (mov r8, r8)
 8002010:	46bd      	mov	sp, r7
 8002012:	b002      	add	sp, #8
 8002014:	bd80      	pop	{r7, pc}
 8002016:	46c0      	nop			@ (mov r8, r8)
 8002018:	6fffffe8 	.word	0x6fffffe8

0800201c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	2380      	movs	r3, #128	@ 0x80
 800202a:	055b      	lsls	r3, r3, #21
 800202c:	401a      	ands	r2, r3
 800202e:	2380      	movs	r3, #128	@ 0x80
 8002030:	055b      	lsls	r3, r3, #21
 8002032:	429a      	cmp	r2, r3
 8002034:	d101      	bne.n	800203a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800203a:	2300      	movs	r3, #0
}
 800203c:	0018      	movs	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	b002      	add	sp, #8
 8002042:	bd80      	pop	{r7, pc}

08002044 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2201      	movs	r2, #1
 8002052:	4013      	ands	r3, r2
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <LL_ADC_IsEnabled+0x18>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <LL_ADC_IsEnabled+0x1a>
 800205c:	2300      	movs	r3, #0
}
 800205e:	0018      	movs	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	b002      	add	sp, #8
 8002064:	bd80      	pop	{r7, pc}

08002066 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2204      	movs	r2, #4
 8002074:	4013      	ands	r3, r2
 8002076:	2b04      	cmp	r3, #4
 8002078:	d101      	bne.n	800207e <LL_ADC_REG_IsConversionOngoing+0x18>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800207e:	2300      	movs	r3, #0
}
 8002080:	0018      	movs	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	b002      	add	sp, #8
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002090:	231f      	movs	r3, #31
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002098:	2300      	movs	r3, #0
 800209a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e17f      	b.n	80023ae <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10a      	bne.n	80020cc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	0018      	movs	r0, r3
 80020ba:	f7ff fc87 	bl	80019cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2254      	movs	r2, #84	@ 0x54
 80020c8:	2100      	movs	r1, #0
 80020ca:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff ffa3 	bl	800201c <LL_ADC_IsInternalRegulatorEnabled>
 80020d6:	1e03      	subs	r3, r0, #0
 80020d8:	d115      	bne.n	8002106 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	0018      	movs	r0, r3
 80020e0:	f7ff ff88 	bl	8001ff4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020e4:	4bb4      	ldr	r3, [pc, #720]	@ (80023b8 <HAL_ADC_Init+0x330>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	49b4      	ldr	r1, [pc, #720]	@ (80023bc <HAL_ADC_Init+0x334>)
 80020ea:	0018      	movs	r0, r3
 80020ec:	f7fe f80a 	bl	8000104 <__udivsi3>
 80020f0:	0003      	movs	r3, r0
 80020f2:	3301      	adds	r3, #1
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020f8:	e002      	b.n	8002100 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f9      	bne.n	80020fa <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	0018      	movs	r0, r3
 800210c:	f7ff ff86 	bl	800201c <LL_ADC_IsInternalRegulatorEnabled>
 8002110:	1e03      	subs	r3, r0, #0
 8002112:	d10f      	bne.n	8002134 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002118:	2210      	movs	r2, #16
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002124:	2201      	movs	r2, #1
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800212c:	231f      	movs	r3, #31
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0018      	movs	r0, r3
 800213a:	f7ff ff94 	bl	8002066 <LL_ADC_REG_IsConversionOngoing>
 800213e:	0003      	movs	r3, r0
 8002140:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002146:	2210      	movs	r2, #16
 8002148:	4013      	ands	r3, r2
 800214a:	d000      	beq.n	800214e <HAL_ADC_Init+0xc6>
 800214c:	e122      	b.n	8002394 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d000      	beq.n	8002156 <HAL_ADC_Init+0xce>
 8002154:	e11e      	b.n	8002394 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215a:	4a99      	ldr	r2, [pc, #612]	@ (80023c0 <HAL_ADC_Init+0x338>)
 800215c:	4013      	ands	r3, r2
 800215e:	2202      	movs	r2, #2
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	0018      	movs	r0, r3
 800216c:	f7ff ff6a 	bl	8002044 <LL_ADC_IsEnabled>
 8002170:	1e03      	subs	r3, r0, #0
 8002172:	d000      	beq.n	8002176 <HAL_ADC_Init+0xee>
 8002174:	e0ad      	b.n	80022d2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	7e1b      	ldrb	r3, [r3, #24]
 800217e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002180:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	7e5b      	ldrb	r3, [r3, #25]
 8002186:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002188:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	7e9b      	ldrb	r3, [r3, #26]
 800218e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002190:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <HAL_ADC_Init+0x118>
 800219a:	2380      	movs	r3, #128	@ 0x80
 800219c:	015b      	lsls	r3, r3, #5
 800219e:	e000      	b.n	80021a2 <HAL_ADC_Init+0x11a>
 80021a0:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80021a2:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80021a8:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	da04      	bge.n	80021bc <HAL_ADC_Init+0x134>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	085b      	lsrs	r3, r3, #1
 80021ba:	e001      	b.n	80021c0 <HAL_ADC_Init+0x138>
 80021bc:	2380      	movs	r3, #128	@ 0x80
 80021be:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80021c0:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	212c      	movs	r1, #44	@ 0x2c
 80021c6:	5c5b      	ldrb	r3, [r3, r1]
 80021c8:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80021ca:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2220      	movs	r2, #32
 80021d6:	5c9b      	ldrb	r3, [r3, r2]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d115      	bne.n	8002208 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7e9b      	ldrb	r3, [r3, #26]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2280      	movs	r2, #128	@ 0x80
 80021e8:	0252      	lsls	r2, r2, #9
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	e00b      	b.n	8002208 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f4:	2220      	movs	r2, #32
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002200:	2201      	movs	r2, #1
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002214:	23e0      	movs	r3, #224	@ 0xe0
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800221e:	4313      	orrs	r3, r2
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4a65      	ldr	r2, [pc, #404]	@ (80023c4 <HAL_ADC_Init+0x33c>)
 800222e:	4013      	ands	r3, r2
 8002230:	0019      	movs	r1, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	430a      	orrs	r2, r1
 800223a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	0f9b      	lsrs	r3, r3, #30
 8002242:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002248:	4313      	orrs	r3, r2
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	223c      	movs	r2, #60	@ 0x3c
 8002254:	5c9b      	ldrb	r3, [r3, r2]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d111      	bne.n	800227e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	0f9b      	lsrs	r3, r3, #30
 8002260:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002266:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800226c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8002272:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	4313      	orrs	r3, r2
 8002278:	2201      	movs	r2, #1
 800227a:	4313      	orrs	r3, r2
 800227c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	4a50      	ldr	r2, [pc, #320]	@ (80023c8 <HAL_ADC_Init+0x340>)
 8002286:	4013      	ands	r3, r2
 8002288:	0019      	movs	r1, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	430a      	orrs	r2, r1
 8002292:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	23c0      	movs	r3, #192	@ 0xc0
 800229a:	061b      	lsls	r3, r3, #24
 800229c:	429a      	cmp	r2, r3
 800229e:	d018      	beq.n	80022d2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80022a4:	2380      	movs	r3, #128	@ 0x80
 80022a6:	05db      	lsls	r3, r3, #23
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d012      	beq.n	80022d2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80022b0:	2380      	movs	r3, #128	@ 0x80
 80022b2:	061b      	lsls	r3, r3, #24
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d00c      	beq.n	80022d2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80022b8:	4b44      	ldr	r3, [pc, #272]	@ (80023cc <HAL_ADC_Init+0x344>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a44      	ldr	r2, [pc, #272]	@ (80023d0 <HAL_ADC_Init+0x348>)
 80022be:	4013      	ands	r3, r2
 80022c0:	0019      	movs	r1, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	23f0      	movs	r3, #240	@ 0xf0
 80022c8:	039b      	lsls	r3, r3, #14
 80022ca:	401a      	ands	r2, r3
 80022cc:	4b3f      	ldr	r3, [pc, #252]	@ (80023cc <HAL_ADC_Init+0x344>)
 80022ce:	430a      	orrs	r2, r1
 80022d0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022da:	001a      	movs	r2, r3
 80022dc:	2100      	movs	r1, #0
 80022de:	f7ff fdf6 	bl	8001ece <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ea:	493a      	ldr	r1, [pc, #232]	@ (80023d4 <HAL_ADC_Init+0x34c>)
 80022ec:	001a      	movs	r2, r3
 80022ee:	f7ff fdee 	bl	8001ece <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2110      	movs	r1, #16
 8002306:	4249      	negs	r1, r1
 8002308:	430a      	orrs	r2, r1
 800230a:	629a      	str	r2, [r3, #40]	@ 0x28
 800230c:	e018      	b.n	8002340 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	2380      	movs	r3, #128	@ 0x80
 8002314:	039b      	lsls	r3, r3, #14
 8002316:	429a      	cmp	r2, r3
 8002318:	d112      	bne.n	8002340 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	3b01      	subs	r3, #1
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	221c      	movs	r2, #28
 800232a:	4013      	ands	r3, r2
 800232c:	2210      	movs	r2, #16
 800232e:	4252      	negs	r2, r2
 8002330:	409a      	lsls	r2, r3
 8002332:	0011      	movs	r1, r2
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2100      	movs	r1, #0
 8002346:	0018      	movs	r0, r3
 8002348:	f7ff fdde 	bl	8001f08 <LL_ADC_GetSamplingTimeCommonChannels>
 800234c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002352:	429a      	cmp	r2, r3
 8002354:	d10b      	bne.n	800236e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002360:	2203      	movs	r2, #3
 8002362:	4393      	bics	r3, r2
 8002364:	2201      	movs	r2, #1
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800236c:	e01c      	b.n	80023a8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002372:	2212      	movs	r2, #18
 8002374:	4393      	bics	r3, r2
 8002376:	2210      	movs	r2, #16
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002382:	2201      	movs	r2, #1
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800238a:	231f      	movs	r3, #31
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	2201      	movs	r2, #1
 8002390:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002392:	e009      	b.n	80023a8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002398:	2210      	movs	r2, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80023a0:	231f      	movs	r3, #31
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	2201      	movs	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80023a8:	231f      	movs	r3, #31
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	781b      	ldrb	r3, [r3, #0]
}
 80023ae:	0018      	movs	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b008      	add	sp, #32
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			@ (mov r8, r8)
 80023b8:	20000048 	.word	0x20000048
 80023bc:	00030d40 	.word	0x00030d40
 80023c0:	fffffefd 	.word	0xfffffefd
 80023c4:	ffde0201 	.word	0xffde0201
 80023c8:	1ffffc02 	.word	0x1ffffc02
 80023cc:	40012708 	.word	0x40012708
 80023d0:	ffc3ffff 	.word	0xffc3ffff
 80023d4:	07ffff04 	.word	0x07ffff04

080023d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e2:	2317      	movs	r3, #23
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2254      	movs	r2, #84	@ 0x54
 80023f2:	5c9b      	ldrb	r3, [r3, r2]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x24>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e1c0      	b.n	800277e <HAL_ADC_ConfigChannel+0x3a6>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2254      	movs	r2, #84	@ 0x54
 8002400:	2101      	movs	r1, #1
 8002402:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0018      	movs	r0, r3
 800240a:	f7ff fe2c 	bl	8002066 <LL_ADC_REG_IsConversionOngoing>
 800240e:	1e03      	subs	r3, r0, #0
 8002410:	d000      	beq.n	8002414 <HAL_ADC_ConfigChannel+0x3c>
 8002412:	e1a3      	b.n	800275c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d100      	bne.n	800241e <HAL_ADC_ConfigChannel+0x46>
 800241c:	e143      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691a      	ldr	r2, [r3, #16]
 8002422:	2380      	movs	r3, #128	@ 0x80
 8002424:	061b      	lsls	r3, r3, #24
 8002426:	429a      	cmp	r2, r3
 8002428:	d004      	beq.n	8002434 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800242e:	4ac1      	ldr	r2, [pc, #772]	@ (8002734 <HAL_ADC_ConfigChannel+0x35c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d108      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	0019      	movs	r1, r3
 800243e:	0010      	movs	r0, r2
 8002440:	f7ff fd99 	bl	8001f76 <LL_ADC_REG_SetSequencerChAdd>
 8002444:	e0c9      	b.n	80025da <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	211f      	movs	r1, #31
 8002450:	400b      	ands	r3, r1
 8002452:	210f      	movs	r1, #15
 8002454:	4099      	lsls	r1, r3
 8002456:	000b      	movs	r3, r1
 8002458:	43db      	mvns	r3, r3
 800245a:	4013      	ands	r3, r2
 800245c:	0019      	movs	r1, r3
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	035b      	lsls	r3, r3, #13
 8002464:	0b5b      	lsrs	r3, r3, #13
 8002466:	d105      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x9c>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	0e9b      	lsrs	r3, r3, #26
 800246e:	221f      	movs	r2, #31
 8002470:	4013      	ands	r3, r2
 8002472:	e098      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2201      	movs	r2, #1
 800247a:	4013      	ands	r3, r2
 800247c:	d000      	beq.n	8002480 <HAL_ADC_ConfigChannel+0xa8>
 800247e:	e091      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x1cc>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2202      	movs	r2, #2
 8002486:	4013      	ands	r3, r2
 8002488:	d000      	beq.n	800248c <HAL_ADC_ConfigChannel+0xb4>
 800248a:	e089      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x1c8>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2204      	movs	r2, #4
 8002492:	4013      	ands	r3, r2
 8002494:	d000      	beq.n	8002498 <HAL_ADC_ConfigChannel+0xc0>
 8002496:	e081      	b.n	800259c <HAL_ADC_ConfigChannel+0x1c4>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2208      	movs	r2, #8
 800249e:	4013      	ands	r3, r2
 80024a0:	d000      	beq.n	80024a4 <HAL_ADC_ConfigChannel+0xcc>
 80024a2:	e079      	b.n	8002598 <HAL_ADC_ConfigChannel+0x1c0>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2210      	movs	r2, #16
 80024aa:	4013      	ands	r3, r2
 80024ac:	d000      	beq.n	80024b0 <HAL_ADC_ConfigChannel+0xd8>
 80024ae:	e071      	b.n	8002594 <HAL_ADC_ConfigChannel+0x1bc>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2220      	movs	r2, #32
 80024b6:	4013      	ands	r3, r2
 80024b8:	d000      	beq.n	80024bc <HAL_ADC_ConfigChannel+0xe4>
 80024ba:	e069      	b.n	8002590 <HAL_ADC_ConfigChannel+0x1b8>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2240      	movs	r2, #64	@ 0x40
 80024c2:	4013      	ands	r3, r2
 80024c4:	d000      	beq.n	80024c8 <HAL_ADC_ConfigChannel+0xf0>
 80024c6:	e061      	b.n	800258c <HAL_ADC_ConfigChannel+0x1b4>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2280      	movs	r2, #128	@ 0x80
 80024ce:	4013      	ands	r3, r2
 80024d0:	d000      	beq.n	80024d4 <HAL_ADC_ConfigChannel+0xfc>
 80024d2:	e059      	b.n	8002588 <HAL_ADC_ConfigChannel+0x1b0>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2380      	movs	r3, #128	@ 0x80
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4013      	ands	r3, r2
 80024de:	d151      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x1ac>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	2380      	movs	r3, #128	@ 0x80
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4013      	ands	r3, r2
 80024ea:	d149      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x1a8>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	@ 0x80
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4013      	ands	r3, r2
 80024f6:	d141      	bne.n	800257c <HAL_ADC_ConfigChannel+0x1a4>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2380      	movs	r3, #128	@ 0x80
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	4013      	ands	r3, r2
 8002502:	d139      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x1a0>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	2380      	movs	r3, #128	@ 0x80
 800250a:	015b      	lsls	r3, r3, #5
 800250c:	4013      	ands	r3, r2
 800250e:	d131      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x19c>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	2380      	movs	r3, #128	@ 0x80
 8002516:	019b      	lsls	r3, r3, #6
 8002518:	4013      	ands	r3, r2
 800251a:	d129      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x198>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	2380      	movs	r3, #128	@ 0x80
 8002522:	01db      	lsls	r3, r3, #7
 8002524:	4013      	ands	r3, r2
 8002526:	d121      	bne.n	800256c <HAL_ADC_ConfigChannel+0x194>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2380      	movs	r3, #128	@ 0x80
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	4013      	ands	r3, r2
 8002532:	d119      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x190>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2380      	movs	r3, #128	@ 0x80
 800253a:	025b      	lsls	r3, r3, #9
 800253c:	4013      	ands	r3, r2
 800253e:	d111      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x18c>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2380      	movs	r3, #128	@ 0x80
 8002546:	029b      	lsls	r3, r3, #10
 8002548:	4013      	ands	r3, r2
 800254a:	d109      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x188>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	2380      	movs	r3, #128	@ 0x80
 8002552:	02db      	lsls	r3, r3, #11
 8002554:	4013      	ands	r3, r2
 8002556:	d001      	beq.n	800255c <HAL_ADC_ConfigChannel+0x184>
 8002558:	2312      	movs	r3, #18
 800255a:	e024      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1ce>
 800255c:	2300      	movs	r3, #0
 800255e:	e022      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002560:	2311      	movs	r3, #17
 8002562:	e020      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002564:	2310      	movs	r3, #16
 8002566:	e01e      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002568:	230f      	movs	r3, #15
 800256a:	e01c      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1ce>
 800256c:	230e      	movs	r3, #14
 800256e:	e01a      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002570:	230d      	movs	r3, #13
 8002572:	e018      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002574:	230c      	movs	r3, #12
 8002576:	e016      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002578:	230b      	movs	r3, #11
 800257a:	e014      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1ce>
 800257c:	230a      	movs	r3, #10
 800257e:	e012      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002580:	2309      	movs	r3, #9
 8002582:	e010      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002584:	2308      	movs	r3, #8
 8002586:	e00e      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002588:	2307      	movs	r3, #7
 800258a:	e00c      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1ce>
 800258c:	2306      	movs	r3, #6
 800258e:	e00a      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002590:	2305      	movs	r3, #5
 8002592:	e008      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002594:	2304      	movs	r3, #4
 8002596:	e006      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002598:	2303      	movs	r3, #3
 800259a:	e004      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1ce>
 800259c:	2302      	movs	r3, #2
 800259e:	e002      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1ce>
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1ce>
 80025a4:	2300      	movs	r3, #0
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	6852      	ldr	r2, [r2, #4]
 80025aa:	201f      	movs	r0, #31
 80025ac:	4002      	ands	r2, r0
 80025ae:	4093      	lsls	r3, r2
 80025b0:	000a      	movs	r2, r1
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d808      	bhi.n	80025da <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	001a      	movs	r2, r3
 80025d6:	f7ff fcae 	bl	8001f36 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6819      	ldr	r1, [r3, #0]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	001a      	movs	r2, r3
 80025e8:	f7ff fce8 	bl	8001fbc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	db00      	blt.n	80025f6 <HAL_ADC_ConfigChannel+0x21e>
 80025f4:	e0bc      	b.n	8002770 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025f6:	4b50      	ldr	r3, [pc, #320]	@ (8002738 <HAL_ADC_ConfigChannel+0x360>)
 80025f8:	0018      	movs	r0, r3
 80025fa:	f7ff fc5b 	bl	8001eb4 <LL_ADC_GetCommonPathInternalCh>
 80025fe:	0003      	movs	r3, r0
 8002600:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a4d      	ldr	r2, [pc, #308]	@ (800273c <HAL_ADC_ConfigChannel+0x364>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d122      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	2380      	movs	r3, #128	@ 0x80
 8002610:	041b      	lsls	r3, r3, #16
 8002612:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002614:	d11d      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	2280      	movs	r2, #128	@ 0x80
 800261a:	0412      	lsls	r2, r2, #16
 800261c:	4313      	orrs	r3, r2
 800261e:	4a46      	ldr	r2, [pc, #280]	@ (8002738 <HAL_ADC_ConfigChannel+0x360>)
 8002620:	0019      	movs	r1, r3
 8002622:	0010      	movs	r0, r2
 8002624:	f7ff fc32 	bl	8001e8c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002628:	4b45      	ldr	r3, [pc, #276]	@ (8002740 <HAL_ADC_ConfigChannel+0x368>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4945      	ldr	r1, [pc, #276]	@ (8002744 <HAL_ADC_ConfigChannel+0x36c>)
 800262e:	0018      	movs	r0, r3
 8002630:	f7fd fd68 	bl	8000104 <__udivsi3>
 8002634:	0003      	movs	r3, r0
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	0013      	movs	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	189b      	adds	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002642:	e002      	b.n	800264a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	3b01      	subs	r3, #1
 8002648:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f9      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002650:	e08e      	b.n	8002770 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a3c      	ldr	r2, [pc, #240]	@ (8002748 <HAL_ADC_ConfigChannel+0x370>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d10e      	bne.n	800267a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	2380      	movs	r3, #128	@ 0x80
 8002660:	045b      	lsls	r3, r3, #17
 8002662:	4013      	ands	r3, r2
 8002664:	d109      	bne.n	800267a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2280      	movs	r2, #128	@ 0x80
 800266a:	0452      	lsls	r2, r2, #17
 800266c:	4313      	orrs	r3, r2
 800266e:	4a32      	ldr	r2, [pc, #200]	@ (8002738 <HAL_ADC_ConfigChannel+0x360>)
 8002670:	0019      	movs	r1, r3
 8002672:	0010      	movs	r0, r2
 8002674:	f7ff fc0a 	bl	8001e8c <LL_ADC_SetCommonPathInternalCh>
 8002678:	e07a      	b.n	8002770 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a33      	ldr	r2, [pc, #204]	@ (800274c <HAL_ADC_ConfigChannel+0x374>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d000      	beq.n	8002686 <HAL_ADC_ConfigChannel+0x2ae>
 8002684:	e074      	b.n	8002770 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	2380      	movs	r3, #128	@ 0x80
 800268a:	03db      	lsls	r3, r3, #15
 800268c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800268e:	d000      	beq.n	8002692 <HAL_ADC_ConfigChannel+0x2ba>
 8002690:	e06e      	b.n	8002770 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	2280      	movs	r2, #128	@ 0x80
 8002696:	03d2      	lsls	r2, r2, #15
 8002698:	4313      	orrs	r3, r2
 800269a:	4a27      	ldr	r2, [pc, #156]	@ (8002738 <HAL_ADC_ConfigChannel+0x360>)
 800269c:	0019      	movs	r1, r3
 800269e:	0010      	movs	r0, r2
 80026a0:	f7ff fbf4 	bl	8001e8c <LL_ADC_SetCommonPathInternalCh>
 80026a4:	e064      	b.n	8002770 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	2380      	movs	r3, #128	@ 0x80
 80026ac:	061b      	lsls	r3, r3, #24
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d004      	beq.n	80026bc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80026b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002734 <HAL_ADC_ConfigChannel+0x35c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d107      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	0019      	movs	r1, r3
 80026c6:	0010      	movs	r0, r2
 80026c8:	f7ff fc66 	bl	8001f98 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	da4d      	bge.n	8002770 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026d4:	4b18      	ldr	r3, [pc, #96]	@ (8002738 <HAL_ADC_ConfigChannel+0x360>)
 80026d6:	0018      	movs	r0, r3
 80026d8:	f7ff fbec 	bl	8001eb4 <LL_ADC_GetCommonPathInternalCh>
 80026dc:	0003      	movs	r3, r0
 80026de:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a15      	ldr	r2, [pc, #84]	@ (800273c <HAL_ADC_ConfigChannel+0x364>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d108      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4a18      	ldr	r2, [pc, #96]	@ (8002750 <HAL_ADC_ConfigChannel+0x378>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	4a11      	ldr	r2, [pc, #68]	@ (8002738 <HAL_ADC_ConfigChannel+0x360>)
 80026f2:	0019      	movs	r1, r3
 80026f4:	0010      	movs	r0, r2
 80026f6:	f7ff fbc9 	bl	8001e8c <LL_ADC_SetCommonPathInternalCh>
 80026fa:	e039      	b.n	8002770 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a11      	ldr	r2, [pc, #68]	@ (8002748 <HAL_ADC_ConfigChannel+0x370>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d108      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4a12      	ldr	r2, [pc, #72]	@ (8002754 <HAL_ADC_ConfigChannel+0x37c>)
 800270a:	4013      	ands	r3, r2
 800270c:	4a0a      	ldr	r2, [pc, #40]	@ (8002738 <HAL_ADC_ConfigChannel+0x360>)
 800270e:	0019      	movs	r1, r3
 8002710:	0010      	movs	r0, r2
 8002712:	f7ff fbbb 	bl	8001e8c <LL_ADC_SetCommonPathInternalCh>
 8002716:	e02b      	b.n	8002770 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0b      	ldr	r2, [pc, #44]	@ (800274c <HAL_ADC_ConfigChannel+0x374>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d126      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4a0c      	ldr	r2, [pc, #48]	@ (8002758 <HAL_ADC_ConfigChannel+0x380>)
 8002726:	4013      	ands	r3, r2
 8002728:	4a03      	ldr	r2, [pc, #12]	@ (8002738 <HAL_ADC_ConfigChannel+0x360>)
 800272a:	0019      	movs	r1, r3
 800272c:	0010      	movs	r0, r2
 800272e:	f7ff fbad 	bl	8001e8c <LL_ADC_SetCommonPathInternalCh>
 8002732:	e01d      	b.n	8002770 <HAL_ADC_ConfigChannel+0x398>
 8002734:	80000004 	.word	0x80000004
 8002738:	40012708 	.word	0x40012708
 800273c:	b0001000 	.word	0xb0001000
 8002740:	20000048 	.word	0x20000048
 8002744:	00030d40 	.word	0x00030d40
 8002748:	b8004000 	.word	0xb8004000
 800274c:	b4002000 	.word	0xb4002000
 8002750:	ff7fffff 	.word	0xff7fffff
 8002754:	feffffff 	.word	0xfeffffff
 8002758:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002760:	2220      	movs	r2, #32
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002768:	2317      	movs	r3, #23
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	2201      	movs	r2, #1
 800276e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2254      	movs	r2, #84	@ 0x54
 8002774:	2100      	movs	r1, #0
 8002776:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002778:	2317      	movs	r3, #23
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	781b      	ldrb	r3, [r3, #0]
}
 800277e:	0018      	movs	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	b006      	add	sp, #24
 8002784:	bd80      	pop	{r7, pc}
 8002786:	46c0      	nop			@ (mov r8, r8)

08002788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	0002      	movs	r2, r0
 8002790:	1dfb      	adds	r3, r7, #7
 8002792:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002794:	1dfb      	adds	r3, r7, #7
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b7f      	cmp	r3, #127	@ 0x7f
 800279a:	d809      	bhi.n	80027b0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279c:	1dfb      	adds	r3, r7, #7
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	001a      	movs	r2, r3
 80027a2:	231f      	movs	r3, #31
 80027a4:	401a      	ands	r2, r3
 80027a6:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <__NVIC_EnableIRQ+0x30>)
 80027a8:	2101      	movs	r1, #1
 80027aa:	4091      	lsls	r1, r2
 80027ac:	000a      	movs	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80027b0:	46c0      	nop			@ (mov r8, r8)
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b002      	add	sp, #8
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	e000e100 	.word	0xe000e100

080027bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027bc:	b590      	push	{r4, r7, lr}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	0002      	movs	r2, r0
 80027c4:	6039      	str	r1, [r7, #0]
 80027c6:	1dfb      	adds	r3, r7, #7
 80027c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027ca:	1dfb      	adds	r3, r7, #7
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80027d0:	d828      	bhi.n	8002824 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002890 <__NVIC_SetPriority+0xd4>)
 80027d4:	1dfb      	adds	r3, r7, #7
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	b25b      	sxtb	r3, r3
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	33c0      	adds	r3, #192	@ 0xc0
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	589b      	ldr	r3, [r3, r2]
 80027e2:	1dfa      	adds	r2, r7, #7
 80027e4:	7812      	ldrb	r2, [r2, #0]
 80027e6:	0011      	movs	r1, r2
 80027e8:	2203      	movs	r2, #3
 80027ea:	400a      	ands	r2, r1
 80027ec:	00d2      	lsls	r2, r2, #3
 80027ee:	21ff      	movs	r1, #255	@ 0xff
 80027f0:	4091      	lsls	r1, r2
 80027f2:	000a      	movs	r2, r1
 80027f4:	43d2      	mvns	r2, r2
 80027f6:	401a      	ands	r2, r3
 80027f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	019b      	lsls	r3, r3, #6
 80027fe:	22ff      	movs	r2, #255	@ 0xff
 8002800:	401a      	ands	r2, r3
 8002802:	1dfb      	adds	r3, r7, #7
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	0018      	movs	r0, r3
 8002808:	2303      	movs	r3, #3
 800280a:	4003      	ands	r3, r0
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002810:	481f      	ldr	r0, [pc, #124]	@ (8002890 <__NVIC_SetPriority+0xd4>)
 8002812:	1dfb      	adds	r3, r7, #7
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	b25b      	sxtb	r3, r3
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	430a      	orrs	r2, r1
 800281c:	33c0      	adds	r3, #192	@ 0xc0
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002822:	e031      	b.n	8002888 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002824:	4a1b      	ldr	r2, [pc, #108]	@ (8002894 <__NVIC_SetPriority+0xd8>)
 8002826:	1dfb      	adds	r3, r7, #7
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	0019      	movs	r1, r3
 800282c:	230f      	movs	r3, #15
 800282e:	400b      	ands	r3, r1
 8002830:	3b08      	subs	r3, #8
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	3306      	adds	r3, #6
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	18d3      	adds	r3, r2, r3
 800283a:	3304      	adds	r3, #4
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	1dfa      	adds	r2, r7, #7
 8002840:	7812      	ldrb	r2, [r2, #0]
 8002842:	0011      	movs	r1, r2
 8002844:	2203      	movs	r2, #3
 8002846:	400a      	ands	r2, r1
 8002848:	00d2      	lsls	r2, r2, #3
 800284a:	21ff      	movs	r1, #255	@ 0xff
 800284c:	4091      	lsls	r1, r2
 800284e:	000a      	movs	r2, r1
 8002850:	43d2      	mvns	r2, r2
 8002852:	401a      	ands	r2, r3
 8002854:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	019b      	lsls	r3, r3, #6
 800285a:	22ff      	movs	r2, #255	@ 0xff
 800285c:	401a      	ands	r2, r3
 800285e:	1dfb      	adds	r3, r7, #7
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	0018      	movs	r0, r3
 8002864:	2303      	movs	r3, #3
 8002866:	4003      	ands	r3, r0
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800286c:	4809      	ldr	r0, [pc, #36]	@ (8002894 <__NVIC_SetPriority+0xd8>)
 800286e:	1dfb      	adds	r3, r7, #7
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	001c      	movs	r4, r3
 8002874:	230f      	movs	r3, #15
 8002876:	4023      	ands	r3, r4
 8002878:	3b08      	subs	r3, #8
 800287a:	089b      	lsrs	r3, r3, #2
 800287c:	430a      	orrs	r2, r1
 800287e:	3306      	adds	r3, #6
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	18c3      	adds	r3, r0, r3
 8002884:	3304      	adds	r3, #4
 8002886:	601a      	str	r2, [r3, #0]
}
 8002888:	46c0      	nop			@ (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	b003      	add	sp, #12
 800288e:	bd90      	pop	{r4, r7, pc}
 8002890:	e000e100 	.word	0xe000e100
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	1e5a      	subs	r2, r3, #1
 80028a4:	2380      	movs	r3, #128	@ 0x80
 80028a6:	045b      	lsls	r3, r3, #17
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d301      	bcc.n	80028b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ac:	2301      	movs	r3, #1
 80028ae:	e010      	b.n	80028d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b0:	4b0a      	ldr	r3, [pc, #40]	@ (80028dc <SysTick_Config+0x44>)
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	3a01      	subs	r2, #1
 80028b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028b8:	2301      	movs	r3, #1
 80028ba:	425b      	negs	r3, r3
 80028bc:	2103      	movs	r1, #3
 80028be:	0018      	movs	r0, r3
 80028c0:	f7ff ff7c 	bl	80027bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c4:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <SysTick_Config+0x44>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ca:	4b04      	ldr	r3, [pc, #16]	@ (80028dc <SysTick_Config+0x44>)
 80028cc:	2207      	movs	r2, #7
 80028ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	0018      	movs	r0, r3
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b002      	add	sp, #8
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	46c0      	nop			@ (mov r8, r8)
 80028dc:	e000e010 	.word	0xe000e010

080028e0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	210f      	movs	r1, #15
 80028ec:	187b      	adds	r3, r7, r1
 80028ee:	1c02      	adds	r2, r0, #0
 80028f0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	187b      	adds	r3, r7, r1
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	b25b      	sxtb	r3, r3
 80028fa:	0011      	movs	r1, r2
 80028fc:	0018      	movs	r0, r3
 80028fe:	f7ff ff5d 	bl	80027bc <__NVIC_SetPriority>
}
 8002902:	46c0      	nop			@ (mov r8, r8)
 8002904:	46bd      	mov	sp, r7
 8002906:	b004      	add	sp, #16
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	0002      	movs	r2, r0
 8002912:	1dfb      	adds	r3, r7, #7
 8002914:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002916:	1dfb      	adds	r3, r7, #7
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	b25b      	sxtb	r3, r3
 800291c:	0018      	movs	r0, r3
 800291e:	f7ff ff33 	bl	8002788 <__NVIC_EnableIRQ>
}
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	46bd      	mov	sp, r7
 8002926:	b002      	add	sp, #8
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	0018      	movs	r0, r3
 8002936:	f7ff ffaf 	bl	8002898 <SysTick_Config>
 800293a:	0003      	movs	r3, r0
}
 800293c:	0018      	movs	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	b002      	add	sp, #8
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002952:	e147      	b.n	8002be4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2101      	movs	r1, #1
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4091      	lsls	r1, r2
 800295e:	000a      	movs	r2, r1
 8002960:	4013      	ands	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d100      	bne.n	800296c <HAL_GPIO_Init+0x28>
 800296a:	e138      	b.n	8002bde <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2203      	movs	r2, #3
 8002972:	4013      	ands	r3, r2
 8002974:	2b01      	cmp	r3, #1
 8002976:	d005      	beq.n	8002984 <HAL_GPIO_Init+0x40>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2203      	movs	r2, #3
 800297e:	4013      	ands	r3, r2
 8002980:	2b02      	cmp	r3, #2
 8002982:	d130      	bne.n	80029e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	2203      	movs	r2, #3
 8002990:	409a      	lsls	r2, r3
 8002992:	0013      	movs	r3, r2
 8002994:	43da      	mvns	r2, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4013      	ands	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	409a      	lsls	r2, r3
 80029a6:	0013      	movs	r3, r2
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029ba:	2201      	movs	r2, #1
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	409a      	lsls	r2, r3
 80029c0:	0013      	movs	r3, r2
 80029c2:	43da      	mvns	r2, r3
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	091b      	lsrs	r3, r3, #4
 80029d0:	2201      	movs	r2, #1
 80029d2:	401a      	ands	r2, r3
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	409a      	lsls	r2, r3
 80029d8:	0013      	movs	r3, r2
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2203      	movs	r2, #3
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d017      	beq.n	8002a22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	2203      	movs	r2, #3
 80029fe:	409a      	lsls	r2, r3
 8002a00:	0013      	movs	r3, r2
 8002a02:	43da      	mvns	r2, r3
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	409a      	lsls	r2, r3
 8002a14:	0013      	movs	r3, r2
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2203      	movs	r2, #3
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d123      	bne.n	8002a76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	08da      	lsrs	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3208      	adds	r2, #8
 8002a36:	0092      	lsls	r2, r2, #2
 8002a38:	58d3      	ldr	r3, [r2, r3]
 8002a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2207      	movs	r2, #7
 8002a40:	4013      	ands	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	220f      	movs	r2, #15
 8002a46:	409a      	lsls	r2, r3
 8002a48:	0013      	movs	r3, r2
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2107      	movs	r1, #7
 8002a5a:	400b      	ands	r3, r1
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	0013      	movs	r3, r2
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	08da      	lsrs	r2, r3, #3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3208      	adds	r2, #8
 8002a70:	0092      	lsls	r2, r2, #2
 8002a72:	6939      	ldr	r1, [r7, #16]
 8002a74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	2203      	movs	r2, #3
 8002a82:	409a      	lsls	r2, r3
 8002a84:	0013      	movs	r3, r2
 8002a86:	43da      	mvns	r2, r3
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2203      	movs	r2, #3
 8002a94:	401a      	ands	r2, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	0013      	movs	r3, r2
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	23c0      	movs	r3, #192	@ 0xc0
 8002ab0:	029b      	lsls	r3, r3, #10
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d100      	bne.n	8002ab8 <HAL_GPIO_Init+0x174>
 8002ab6:	e092      	b.n	8002bde <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002ab8:	4a50      	ldr	r2, [pc, #320]	@ (8002bfc <HAL_GPIO_Init+0x2b8>)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	089b      	lsrs	r3, r3, #2
 8002abe:	3318      	adds	r3, #24
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	589b      	ldr	r3, [r3, r2]
 8002ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2203      	movs	r2, #3
 8002aca:	4013      	ands	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	220f      	movs	r2, #15
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	0013      	movs	r3, r2
 8002ad4:	43da      	mvns	r2, r3
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	23a0      	movs	r3, #160	@ 0xa0
 8002ae0:	05db      	lsls	r3, r3, #23
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d013      	beq.n	8002b0e <HAL_GPIO_Init+0x1ca>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a45      	ldr	r2, [pc, #276]	@ (8002c00 <HAL_GPIO_Init+0x2bc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00d      	beq.n	8002b0a <HAL_GPIO_Init+0x1c6>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a44      	ldr	r2, [pc, #272]	@ (8002c04 <HAL_GPIO_Init+0x2c0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d007      	beq.n	8002b06 <HAL_GPIO_Init+0x1c2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a43      	ldr	r2, [pc, #268]	@ (8002c08 <HAL_GPIO_Init+0x2c4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d101      	bne.n	8002b02 <HAL_GPIO_Init+0x1be>
 8002afe:	2303      	movs	r3, #3
 8002b00:	e006      	b.n	8002b10 <HAL_GPIO_Init+0x1cc>
 8002b02:	2305      	movs	r3, #5
 8002b04:	e004      	b.n	8002b10 <HAL_GPIO_Init+0x1cc>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e002      	b.n	8002b10 <HAL_GPIO_Init+0x1cc>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_GPIO_Init+0x1cc>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	2103      	movs	r1, #3
 8002b14:	400a      	ands	r2, r1
 8002b16:	00d2      	lsls	r2, r2, #3
 8002b18:	4093      	lsls	r3, r2
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002b20:	4936      	ldr	r1, [pc, #216]	@ (8002bfc <HAL_GPIO_Init+0x2b8>)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	089b      	lsrs	r3, r3, #2
 8002b26:	3318      	adds	r3, #24
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b2e:	4b33      	ldr	r3, [pc, #204]	@ (8002bfc <HAL_GPIO_Init+0x2b8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	43da      	mvns	r2, r3
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	2380      	movs	r3, #128	@ 0x80
 8002b44:	035b      	lsls	r3, r3, #13
 8002b46:	4013      	ands	r3, r2
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b52:	4b2a      	ldr	r3, [pc, #168]	@ (8002bfc <HAL_GPIO_Init+0x2b8>)
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002b58:	4b28      	ldr	r3, [pc, #160]	@ (8002bfc <HAL_GPIO_Init+0x2b8>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	43da      	mvns	r2, r3
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4013      	ands	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	2380      	movs	r3, #128	@ 0x80
 8002b6e:	039b      	lsls	r3, r3, #14
 8002b70:	4013      	ands	r3, r2
 8002b72:	d003      	beq.n	8002b7c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bfc <HAL_GPIO_Init+0x2b8>)
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b82:	4a1e      	ldr	r2, [pc, #120]	@ (8002bfc <HAL_GPIO_Init+0x2b8>)
 8002b84:	2384      	movs	r3, #132	@ 0x84
 8002b86:	58d3      	ldr	r3, [r2, r3]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	43da      	mvns	r2, r3
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	2380      	movs	r3, #128	@ 0x80
 8002b9a:	029b      	lsls	r3, r3, #10
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d003      	beq.n	8002ba8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ba8:	4914      	ldr	r1, [pc, #80]	@ (8002bfc <HAL_GPIO_Init+0x2b8>)
 8002baa:	2284      	movs	r2, #132	@ 0x84
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002bb0:	4a12      	ldr	r2, [pc, #72]	@ (8002bfc <HAL_GPIO_Init+0x2b8>)
 8002bb2:	2380      	movs	r3, #128	@ 0x80
 8002bb4:	58d3      	ldr	r3, [r2, r3]
 8002bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	2380      	movs	r3, #128	@ 0x80
 8002bc8:	025b      	lsls	r3, r3, #9
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bd6:	4909      	ldr	r1, [pc, #36]	@ (8002bfc <HAL_GPIO_Init+0x2b8>)
 8002bd8:	2280      	movs	r2, #128	@ 0x80
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	3301      	adds	r3, #1
 8002be2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	40da      	lsrs	r2, r3
 8002bec:	1e13      	subs	r3, r2, #0
 8002bee:	d000      	beq.n	8002bf2 <HAL_GPIO_Init+0x2ae>
 8002bf0:	e6b0      	b.n	8002954 <HAL_GPIO_Init+0x10>
  }
}
 8002bf2:	46c0      	nop			@ (mov r8, r8)
 8002bf4:	46c0      	nop			@ (mov r8, r8)
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b006      	add	sp, #24
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021800 	.word	0x40021800
 8002c00:	50000400 	.word	0x50000400
 8002c04:	50000800 	.word	0x50000800
 8002c08:	50000c00 	.word	0x50000c00

08002c0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	000a      	movs	r2, r1
 8002c16:	1cbb      	adds	r3, r7, #2
 8002c18:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	1cba      	adds	r2, r7, #2
 8002c20:	8812      	ldrh	r2, [r2, #0]
 8002c22:	4013      	ands	r3, r2
 8002c24:	d004      	beq.n	8002c30 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002c26:	230f      	movs	r3, #15
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	e003      	b.n	8002c38 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c30:	230f      	movs	r3, #15
 8002c32:	18fb      	adds	r3, r7, r3
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002c38:	230f      	movs	r3, #15
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	781b      	ldrb	r3, [r3, #0]
}
 8002c3e:	0018      	movs	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b004      	add	sp, #16
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	0008      	movs	r0, r1
 8002c50:	0011      	movs	r1, r2
 8002c52:	1cbb      	adds	r3, r7, #2
 8002c54:	1c02      	adds	r2, r0, #0
 8002c56:	801a      	strh	r2, [r3, #0]
 8002c58:	1c7b      	adds	r3, r7, #1
 8002c5a:	1c0a      	adds	r2, r1, #0
 8002c5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c5e:	1c7b      	adds	r3, r7, #1
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d004      	beq.n	8002c70 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c66:	1cbb      	adds	r3, r7, #2
 8002c68:	881a      	ldrh	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c6e:	e003      	b.n	8002c78 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c70:	1cbb      	adds	r3, r7, #2
 8002c72:	881a      	ldrh	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c78:	46c0      	nop			@ (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b002      	add	sp, #8
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	000a      	movs	r2, r1
 8002c8a:	1cbb      	adds	r3, r7, #2
 8002c8c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c94:	1cbb      	adds	r3, r7, #2
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	041a      	lsls	r2, r3, #16
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	1cb9      	adds	r1, r7, #2
 8002ca4:	8809      	ldrh	r1, [r1, #0]
 8002ca6:	400b      	ands	r3, r1
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	619a      	str	r2, [r3, #24]
}
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b004      	add	sp, #16
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	0002      	movs	r2, r0
 8002cc0:	1dbb      	adds	r3, r7, #6
 8002cc2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002cc4:	4b10      	ldr	r3, [pc, #64]	@ (8002d08 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	1dba      	adds	r2, r7, #6
 8002cca:	8812      	ldrh	r2, [r2, #0]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d008      	beq.n	8002ce2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8002d08 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002cd2:	1dba      	adds	r2, r7, #6
 8002cd4:	8812      	ldrh	r2, [r2, #0]
 8002cd6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002cd8:	1dbb      	adds	r3, r7, #6
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f000 f815 	bl	8002d0c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002ce2:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	1dba      	adds	r2, r7, #6
 8002ce8:	8812      	ldrh	r2, [r2, #0]
 8002cea:	4013      	ands	r3, r2
 8002cec:	d008      	beq.n	8002d00 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002cee:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002cf0:	1dba      	adds	r2, r7, #6
 8002cf2:	8812      	ldrh	r2, [r2, #0]
 8002cf4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002cf6:	1dbb      	adds	r3, r7, #6
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f7fe f9a0 	bl	8001040 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002d00:	46c0      	nop			@ (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021800 	.word	0x40021800

08002d0c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	0002      	movs	r2, r0
 8002d14:	1dbb      	adds	r3, r7, #6
 8002d16:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002d18:	46c0      	nop			@ (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b002      	add	sp, #8
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e08f      	b.n	8002e52 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2241      	movs	r2, #65	@ 0x41
 8002d36:	5c9b      	ldrb	r3, [r3, r2]
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d107      	bne.n	8002d4e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2240      	movs	r2, #64	@ 0x40
 8002d42:	2100      	movs	r1, #0
 8002d44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f7fe fe83 	bl	8001a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2241      	movs	r2, #65	@ 0x41
 8002d52:	2124      	movs	r1, #36	@ 0x24
 8002d54:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2101      	movs	r1, #1
 8002d62:	438a      	bics	r2, r1
 8002d64:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	493b      	ldr	r1, [pc, #236]	@ (8002e5c <HAL_I2C_Init+0x13c>)
 8002d70:	400a      	ands	r2, r1
 8002d72:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4938      	ldr	r1, [pc, #224]	@ (8002e60 <HAL_I2C_Init+0x140>)
 8002d80:	400a      	ands	r2, r1
 8002d82:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d108      	bne.n	8002d9e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2180      	movs	r1, #128	@ 0x80
 8002d96:	0209      	lsls	r1, r1, #8
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	e007      	b.n	8002dae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2184      	movs	r1, #132	@ 0x84
 8002da8:	0209      	lsls	r1, r1, #8
 8002daa:	430a      	orrs	r2, r1
 8002dac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d109      	bne.n	8002dca <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2180      	movs	r1, #128	@ 0x80
 8002dc2:	0109      	lsls	r1, r1, #4
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	605a      	str	r2, [r3, #4]
 8002dc8:	e007      	b.n	8002dda <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4923      	ldr	r1, [pc, #140]	@ (8002e64 <HAL_I2C_Init+0x144>)
 8002dd6:	400a      	ands	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4920      	ldr	r1, [pc, #128]	@ (8002e68 <HAL_I2C_Init+0x148>)
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	491a      	ldr	r1, [pc, #104]	@ (8002e60 <HAL_I2C_Init+0x140>)
 8002df6:	400a      	ands	r2, r1
 8002df8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69d9      	ldr	r1, [r3, #28]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1a      	ldr	r2, [r3, #32]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2101      	movs	r1, #1
 8002e30:	430a      	orrs	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2241      	movs	r2, #65	@ 0x41
 8002e3e:	2120      	movs	r1, #32
 8002e40:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2242      	movs	r2, #66	@ 0x42
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	0018      	movs	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b002      	add	sp, #8
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	46c0      	nop			@ (mov r8, r8)
 8002e5c:	f0ffffff 	.word	0xf0ffffff
 8002e60:	ffff7fff 	.word	0xffff7fff
 8002e64:	fffff7ff 	.word	0xfffff7ff
 8002e68:	02008000 	.word	0x02008000

08002e6c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e6c:	b590      	push	{r4, r7, lr}
 8002e6e:	b089      	sub	sp, #36	@ 0x24
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	0008      	movs	r0, r1
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	0019      	movs	r1, r3
 8002e7a:	230a      	movs	r3, #10
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	1c02      	adds	r2, r0, #0
 8002e80:	801a      	strh	r2, [r3, #0]
 8002e82:	2308      	movs	r3, #8
 8002e84:	18fb      	adds	r3, r7, r3
 8002e86:	1c0a      	adds	r2, r1, #0
 8002e88:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2241      	movs	r2, #65	@ 0x41
 8002e8e:	5c9b      	ldrb	r3, [r3, r2]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	d000      	beq.n	8002e98 <HAL_I2C_Master_Transmit+0x2c>
 8002e96:	e10a      	b.n	80030ae <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2240      	movs	r2, #64	@ 0x40
 8002e9c:	5c9b      	ldrb	r3, [r3, r2]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_I2C_Master_Transmit+0x3a>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e104      	b.n	80030b0 <HAL_I2C_Master_Transmit+0x244>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2240      	movs	r2, #64	@ 0x40
 8002eaa:	2101      	movs	r1, #1
 8002eac:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002eae:	f7fe ffe3 	bl	8001e78 <HAL_GetTick>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002eb6:	2380      	movs	r3, #128	@ 0x80
 8002eb8:	0219      	lsls	r1, r3, #8
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	2319      	movs	r3, #25
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f000 fa26 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8002ec8:	1e03      	subs	r3, r0, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0ef      	b.n	80030b0 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2241      	movs	r2, #65	@ 0x41
 8002ed4:	2121      	movs	r1, #33	@ 0x21
 8002ed6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2242      	movs	r2, #66	@ 0x42
 8002edc:	2110      	movs	r1, #16
 8002ede:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2208      	movs	r2, #8
 8002ef0:	18ba      	adds	r2, r7, r2
 8002ef2:	8812      	ldrh	r2, [r2, #0]
 8002ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2bff      	cmp	r3, #255	@ 0xff
 8002f04:	d906      	bls.n	8002f14 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	22ff      	movs	r2, #255	@ 0xff
 8002f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002f0c:	2380      	movs	r3, #128	@ 0x80
 8002f0e:	045b      	lsls	r3, r3, #17
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	e007      	b.n	8002f24 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002f1e:	2380      	movs	r3, #128	@ 0x80
 8002f20:	049b      	lsls	r3, r3, #18
 8002f22:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d027      	beq.n	8002f7c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	781a      	ldrb	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	3301      	adds	r3, #1
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	697c      	ldr	r4, [r7, #20]
 8002f68:	230a      	movs	r3, #10
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	8819      	ldrh	r1, [r3, #0]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	4b51      	ldr	r3, [pc, #324]	@ (80030b8 <HAL_I2C_Master_Transmit+0x24c>)
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	0023      	movs	r3, r4
 8002f76:	f000 fc45 	bl	8003804 <I2C_TransferConfig>
 8002f7a:	e06f      	b.n	800305c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	697c      	ldr	r4, [r7, #20]
 8002f84:	230a      	movs	r3, #10
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	8819      	ldrh	r1, [r3, #0]
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	4b4a      	ldr	r3, [pc, #296]	@ (80030b8 <HAL_I2C_Master_Transmit+0x24c>)
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	0023      	movs	r3, r4
 8002f92:	f000 fc37 	bl	8003804 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f96:	e061      	b.n	800305c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f000 fa10 	bl	80033c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fa4:	1e03      	subs	r3, r0, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e081      	b.n	80030b0 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d03a      	beq.n	800305c <HAL_I2C_Master_Transmit+0x1f0>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d136      	bne.n	800305c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	0013      	movs	r3, r2
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2180      	movs	r1, #128	@ 0x80
 8002ffc:	f000 f98a 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8003000:	1e03      	subs	r3, r0, #0
 8003002:	d001      	beq.n	8003008 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e053      	b.n	80030b0 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	2bff      	cmp	r3, #255	@ 0xff
 8003010:	d911      	bls.n	8003036 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	22ff      	movs	r2, #255	@ 0xff
 8003016:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301c:	b2da      	uxtb	r2, r3
 800301e:	2380      	movs	r3, #128	@ 0x80
 8003020:	045c      	lsls	r4, r3, #17
 8003022:	230a      	movs	r3, #10
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	8819      	ldrh	r1, [r3, #0]
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	2300      	movs	r3, #0
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	0023      	movs	r3, r4
 8003030:	f000 fbe8 	bl	8003804 <I2C_TransferConfig>
 8003034:	e012      	b.n	800305c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003044:	b2da      	uxtb	r2, r3
 8003046:	2380      	movs	r3, #128	@ 0x80
 8003048:	049c      	lsls	r4, r3, #18
 800304a:	230a      	movs	r3, #10
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	8819      	ldrh	r1, [r3, #0]
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	2300      	movs	r3, #0
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	0023      	movs	r3, r4
 8003058:	f000 fbd4 	bl	8003804 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d198      	bne.n	8002f98 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	0018      	movs	r0, r3
 800306e:	f000 f9ef 	bl	8003450 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003072:	1e03      	subs	r3, r0, #0
 8003074:	d001      	beq.n	800307a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e01a      	b.n	80030b0 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2220      	movs	r2, #32
 8003080:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	490b      	ldr	r1, [pc, #44]	@ (80030bc <HAL_I2C_Master_Transmit+0x250>)
 800308e:	400a      	ands	r2, r1
 8003090:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2241      	movs	r2, #65	@ 0x41
 8003096:	2120      	movs	r1, #32
 8003098:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2242      	movs	r2, #66	@ 0x42
 800309e:	2100      	movs	r1, #0
 80030a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2240      	movs	r2, #64	@ 0x40
 80030a6:	2100      	movs	r1, #0
 80030a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e000      	b.n	80030b0 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
  }
}
 80030b0:	0018      	movs	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b007      	add	sp, #28
 80030b6:	bd90      	pop	{r4, r7, pc}
 80030b8:	80002000 	.word	0x80002000
 80030bc:	fe00e800 	.word	0xfe00e800

080030c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b089      	sub	sp, #36	@ 0x24
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	0008      	movs	r0, r1
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	0019      	movs	r1, r3
 80030ce:	230a      	movs	r3, #10
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	1c02      	adds	r2, r0, #0
 80030d4:	801a      	strh	r2, [r3, #0]
 80030d6:	2308      	movs	r3, #8
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	1c0a      	adds	r2, r1, #0
 80030dc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2241      	movs	r2, #65	@ 0x41
 80030e2:	5c9b      	ldrb	r3, [r3, r2]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d000      	beq.n	80030ec <HAL_I2C_Master_Receive+0x2c>
 80030ea:	e0e8      	b.n	80032be <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2240      	movs	r2, #64	@ 0x40
 80030f0:	5c9b      	ldrb	r3, [r3, r2]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_I2C_Master_Receive+0x3a>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e0e2      	b.n	80032c0 <HAL_I2C_Master_Receive+0x200>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2240      	movs	r2, #64	@ 0x40
 80030fe:	2101      	movs	r1, #1
 8003100:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003102:	f7fe feb9 	bl	8001e78 <HAL_GetTick>
 8003106:	0003      	movs	r3, r0
 8003108:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800310a:	2380      	movs	r3, #128	@ 0x80
 800310c:	0219      	lsls	r1, r3, #8
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2319      	movs	r3, #25
 8003116:	2201      	movs	r2, #1
 8003118:	f000 f8fc 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 800311c:	1e03      	subs	r3, r0, #0
 800311e:	d001      	beq.n	8003124 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0cd      	b.n	80032c0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2241      	movs	r2, #65	@ 0x41
 8003128:	2122      	movs	r1, #34	@ 0x22
 800312a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2242      	movs	r2, #66	@ 0x42
 8003130:	2110      	movs	r1, #16
 8003132:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2208      	movs	r2, #8
 8003144:	18ba      	adds	r2, r7, r2
 8003146:	8812      	ldrh	r2, [r2, #0]
 8003148:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003154:	b29b      	uxth	r3, r3
 8003156:	2bff      	cmp	r3, #255	@ 0xff
 8003158:	d911      	bls.n	800317e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	22ff      	movs	r2, #255	@ 0xff
 800315e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003164:	b2da      	uxtb	r2, r3
 8003166:	2380      	movs	r3, #128	@ 0x80
 8003168:	045c      	lsls	r4, r3, #17
 800316a:	230a      	movs	r3, #10
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	8819      	ldrh	r1, [r3, #0]
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	4b55      	ldr	r3, [pc, #340]	@ (80032c8 <HAL_I2C_Master_Receive+0x208>)
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	0023      	movs	r3, r4
 8003178:	f000 fb44 	bl	8003804 <I2C_TransferConfig>
 800317c:	e076      	b.n	800326c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318c:	b2da      	uxtb	r2, r3
 800318e:	2380      	movs	r3, #128	@ 0x80
 8003190:	049c      	lsls	r4, r3, #18
 8003192:	230a      	movs	r3, #10
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	8819      	ldrh	r1, [r3, #0]
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	4b4b      	ldr	r3, [pc, #300]	@ (80032c8 <HAL_I2C_Master_Receive+0x208>)
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	0023      	movs	r3, r4
 80031a0:	f000 fb30 	bl	8003804 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80031a4:	e062      	b.n	800326c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	0018      	movs	r0, r3
 80031ae:	f000 f993 	bl	80034d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031b2:	1e03      	subs	r3, r0, #0
 80031b4:	d001      	beq.n	80031ba <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e082      	b.n	80032c0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d03a      	beq.n	800326c <HAL_I2C_Master_Receive+0x1ac>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d136      	bne.n	800326c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	0013      	movs	r3, r2
 8003208:	2200      	movs	r2, #0
 800320a:	2180      	movs	r1, #128	@ 0x80
 800320c:	f000 f882 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8003210:	1e03      	subs	r3, r0, #0
 8003212:	d001      	beq.n	8003218 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e053      	b.n	80032c0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	2bff      	cmp	r3, #255	@ 0xff
 8003220:	d911      	bls.n	8003246 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	22ff      	movs	r2, #255	@ 0xff
 8003226:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322c:	b2da      	uxtb	r2, r3
 800322e:	2380      	movs	r3, #128	@ 0x80
 8003230:	045c      	lsls	r4, r3, #17
 8003232:	230a      	movs	r3, #10
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	8819      	ldrh	r1, [r3, #0]
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	2300      	movs	r3, #0
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	0023      	movs	r3, r4
 8003240:	f000 fae0 	bl	8003804 <I2C_TransferConfig>
 8003244:	e012      	b.n	800326c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003254:	b2da      	uxtb	r2, r3
 8003256:	2380      	movs	r3, #128	@ 0x80
 8003258:	049c      	lsls	r4, r3, #18
 800325a:	230a      	movs	r3, #10
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	8819      	ldrh	r1, [r3, #0]
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	2300      	movs	r3, #0
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	0023      	movs	r3, r4
 8003268:	f000 facc 	bl	8003804 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d197      	bne.n	80031a6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	0018      	movs	r0, r3
 800327e:	f000 f8e7 	bl	8003450 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003282:	1e03      	subs	r3, r0, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e01a      	b.n	80032c0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2220      	movs	r2, #32
 8003290:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	490b      	ldr	r1, [pc, #44]	@ (80032cc <HAL_I2C_Master_Receive+0x20c>)
 800329e:	400a      	ands	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2241      	movs	r2, #65	@ 0x41
 80032a6:	2120      	movs	r1, #32
 80032a8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2242      	movs	r2, #66	@ 0x42
 80032ae:	2100      	movs	r1, #0
 80032b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2240      	movs	r2, #64	@ 0x40
 80032b6:	2100      	movs	r1, #0
 80032b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e000      	b.n	80032c0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80032be:	2302      	movs	r3, #2
  }
}
 80032c0:	0018      	movs	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b007      	add	sp, #28
 80032c6:	bd90      	pop	{r4, r7, pc}
 80032c8:	80002400 	.word	0x80002400
 80032cc:	fe00e800 	.word	0xfe00e800

080032d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	2202      	movs	r2, #2
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d103      	bne.n	80032ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2200      	movs	r2, #0
 80032ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	2201      	movs	r2, #1
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d007      	beq.n	800330c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2101      	movs	r1, #1
 8003308:	430a      	orrs	r2, r1
 800330a:	619a      	str	r2, [r3, #24]
  }
}
 800330c:	46c0      	nop			@ (mov r8, r8)
 800330e:	46bd      	mov	sp, r7
 8003310:	b002      	add	sp, #8
 8003312:	bd80      	pop	{r7, pc}

08003314 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	1dfb      	adds	r3, r7, #7
 8003322:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003324:	e03a      	b.n	800339c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	6839      	ldr	r1, [r7, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	0018      	movs	r0, r3
 800332e:	f000 f971 	bl	8003614 <I2C_IsErrorOccurred>
 8003332:	1e03      	subs	r3, r0, #0
 8003334:	d001      	beq.n	800333a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e040      	b.n	80033bc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	3301      	adds	r3, #1
 800333e:	d02d      	beq.n	800339c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003340:	f7fe fd9a 	bl	8001e78 <HAL_GetTick>
 8003344:	0002      	movs	r2, r0
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d302      	bcc.n	8003356 <I2C_WaitOnFlagUntilTimeout+0x42>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d122      	bne.n	800339c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	425a      	negs	r2, r3
 8003366:	4153      	adcs	r3, r2
 8003368:	b2db      	uxtb	r3, r3
 800336a:	001a      	movs	r2, r3
 800336c:	1dfb      	adds	r3, r7, #7
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d113      	bne.n	800339c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003378:	2220      	movs	r2, #32
 800337a:	431a      	orrs	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2241      	movs	r2, #65	@ 0x41
 8003384:	2120      	movs	r1, #32
 8003386:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2242      	movs	r2, #66	@ 0x42
 800338c:	2100      	movs	r1, #0
 800338e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2240      	movs	r2, #64	@ 0x40
 8003394:	2100      	movs	r1, #0
 8003396:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e00f      	b.n	80033bc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	4013      	ands	r3, r2
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	425a      	negs	r2, r3
 80033ac:	4153      	adcs	r3, r2
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	001a      	movs	r2, r3
 80033b2:	1dfb      	adds	r3, r7, #7
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d0b5      	beq.n	8003326 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	0018      	movs	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	b004      	add	sp, #16
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033d0:	e032      	b.n	8003438 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	0018      	movs	r0, r3
 80033da:	f000 f91b 	bl	8003614 <I2C_IsErrorOccurred>
 80033de:	1e03      	subs	r3, r0, #0
 80033e0:	d001      	beq.n	80033e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e030      	b.n	8003448 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	3301      	adds	r3, #1
 80033ea:	d025      	beq.n	8003438 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ec:	f7fe fd44 	bl	8001e78 <HAL_GetTick>
 80033f0:	0002      	movs	r2, r0
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d302      	bcc.n	8003402 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d11a      	bne.n	8003438 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	2202      	movs	r2, #2
 800340a:	4013      	ands	r3, r2
 800340c:	2b02      	cmp	r3, #2
 800340e:	d013      	beq.n	8003438 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003414:	2220      	movs	r2, #32
 8003416:	431a      	orrs	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2241      	movs	r2, #65	@ 0x41
 8003420:	2120      	movs	r1, #32
 8003422:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2242      	movs	r2, #66	@ 0x42
 8003428:	2100      	movs	r1, #0
 800342a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2240      	movs	r2, #64	@ 0x40
 8003430:	2100      	movs	r1, #0
 8003432:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e007      	b.n	8003448 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	2202      	movs	r2, #2
 8003440:	4013      	ands	r3, r2
 8003442:	2b02      	cmp	r3, #2
 8003444:	d1c5      	bne.n	80033d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	0018      	movs	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	b004      	add	sp, #16
 800344e:	bd80      	pop	{r7, pc}

08003450 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800345c:	e02f      	b.n	80034be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	0018      	movs	r0, r3
 8003466:	f000 f8d5 	bl	8003614 <I2C_IsErrorOccurred>
 800346a:	1e03      	subs	r3, r0, #0
 800346c:	d001      	beq.n	8003472 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e02d      	b.n	80034ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003472:	f7fe fd01 	bl	8001e78 <HAL_GetTick>
 8003476:	0002      	movs	r2, r0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	429a      	cmp	r2, r3
 8003480:	d302      	bcc.n	8003488 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d11a      	bne.n	80034be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2220      	movs	r2, #32
 8003490:	4013      	ands	r3, r2
 8003492:	2b20      	cmp	r3, #32
 8003494:	d013      	beq.n	80034be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349a:	2220      	movs	r2, #32
 800349c:	431a      	orrs	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2241      	movs	r2, #65	@ 0x41
 80034a6:	2120      	movs	r1, #32
 80034a8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2242      	movs	r2, #66	@ 0x42
 80034ae:	2100      	movs	r1, #0
 80034b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2240      	movs	r2, #64	@ 0x40
 80034b6:	2100      	movs	r1, #0
 80034b8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e007      	b.n	80034ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	2220      	movs	r2, #32
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d1c8      	bne.n	800345e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	0018      	movs	r0, r3
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b004      	add	sp, #16
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034e4:	2317      	movs	r3, #23
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80034ec:	e07b      	b.n	80035e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	0018      	movs	r0, r3
 80034f6:	f000 f88d 	bl	8003614 <I2C_IsErrorOccurred>
 80034fa:	1e03      	subs	r3, r0, #0
 80034fc:	d003      	beq.n	8003506 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80034fe:	2317      	movs	r3, #23
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	2201      	movs	r2, #1
 8003504:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2220      	movs	r2, #32
 800350e:	4013      	ands	r3, r2
 8003510:	2b20      	cmp	r3, #32
 8003512:	d140      	bne.n	8003596 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003514:	2117      	movs	r1, #23
 8003516:	187b      	adds	r3, r7, r1
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d13b      	bne.n	8003596 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2204      	movs	r2, #4
 8003526:	4013      	ands	r3, r2
 8003528:	2b04      	cmp	r3, #4
 800352a:	d106      	bne.n	800353a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003534:	187b      	adds	r3, r7, r1
 8003536:	2200      	movs	r2, #0
 8003538:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	2210      	movs	r2, #16
 8003542:	4013      	ands	r3, r2
 8003544:	2b10      	cmp	r3, #16
 8003546:	d123      	bne.n	8003590 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2210      	movs	r2, #16
 800354e:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2204      	movs	r2, #4
 8003554:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2220      	movs	r2, #32
 800355c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4929      	ldr	r1, [pc, #164]	@ (8003610 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800356a:	400a      	ands	r2, r1
 800356c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2241      	movs	r2, #65	@ 0x41
 8003572:	2120      	movs	r1, #32
 8003574:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2242      	movs	r2, #66	@ 0x42
 800357a:	2100      	movs	r1, #0
 800357c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2240      	movs	r2, #64	@ 0x40
 8003582:	2100      	movs	r1, #0
 8003584:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003586:	2317      	movs	r3, #23
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	2201      	movs	r2, #1
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	e002      	b.n	8003596 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003596:	f7fe fc6f 	bl	8001e78 <HAL_GetTick>
 800359a:	0002      	movs	r2, r0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d302      	bcc.n	80035ac <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d11c      	bne.n	80035e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80035ac:	2017      	movs	r0, #23
 80035ae:	183b      	adds	r3, r7, r0
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d117      	bne.n	80035e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	2204      	movs	r2, #4
 80035be:	4013      	ands	r3, r2
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d010      	beq.n	80035e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c8:	2220      	movs	r2, #32
 80035ca:	431a      	orrs	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2241      	movs	r2, #65	@ 0x41
 80035d4:	2120      	movs	r1, #32
 80035d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2240      	movs	r2, #64	@ 0x40
 80035dc:	2100      	movs	r1, #0
 80035de:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80035e0:	183b      	adds	r3, r7, r0
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	2204      	movs	r2, #4
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d005      	beq.n	8003600 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80035f4:	2317      	movs	r3, #23
 80035f6:	18fb      	adds	r3, r7, r3
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d100      	bne.n	8003600 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80035fe:	e776      	b.n	80034ee <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8003600:	2317      	movs	r3, #23
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	781b      	ldrb	r3, [r3, #0]
}
 8003606:	0018      	movs	r0, r3
 8003608:	46bd      	mov	sp, r7
 800360a:	b006      	add	sp, #24
 800360c:	bd80      	pop	{r7, pc}
 800360e:	46c0      	nop			@ (mov r8, r8)
 8003610:	fe00e800 	.word	0xfe00e800

08003614 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	@ 0x28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003620:	2327      	movs	r3, #39	@ 0x27
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003630:	2300      	movs	r3, #0
 8003632:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2210      	movs	r2, #16
 800363c:	4013      	ands	r3, r2
 800363e:	d100      	bne.n	8003642 <I2C_IsErrorOccurred+0x2e>
 8003640:	e079      	b.n	8003736 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2210      	movs	r2, #16
 8003648:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800364a:	e057      	b.n	80036fc <I2C_IsErrorOccurred+0xe8>
 800364c:	2227      	movs	r2, #39	@ 0x27
 800364e:	18bb      	adds	r3, r7, r2
 8003650:	18ba      	adds	r2, r7, r2
 8003652:	7812      	ldrb	r2, [r2, #0]
 8003654:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	3301      	adds	r3, #1
 800365a:	d04f      	beq.n	80036fc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800365c:	f7fe fc0c 	bl	8001e78 <HAL_GetTick>
 8003660:	0002      	movs	r2, r0
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	429a      	cmp	r2, r3
 800366a:	d302      	bcc.n	8003672 <I2C_IsErrorOccurred+0x5e>
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d144      	bne.n	80036fc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	2380      	movs	r3, #128	@ 0x80
 800367a:	01db      	lsls	r3, r3, #7
 800367c:	4013      	ands	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003680:	2013      	movs	r0, #19
 8003682:	183b      	adds	r3, r7, r0
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	2142      	movs	r1, #66	@ 0x42
 8003688:	5c52      	ldrb	r2, [r2, r1]
 800368a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	2380      	movs	r3, #128	@ 0x80
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	401a      	ands	r2, r3
 8003698:	2380      	movs	r3, #128	@ 0x80
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	429a      	cmp	r2, r3
 800369e:	d126      	bne.n	80036ee <I2C_IsErrorOccurred+0xda>
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	2380      	movs	r3, #128	@ 0x80
 80036a4:	01db      	lsls	r3, r3, #7
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d021      	beq.n	80036ee <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80036aa:	183b      	adds	r3, r7, r0
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	d01d      	beq.n	80036ee <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2180      	movs	r1, #128	@ 0x80
 80036be:	01c9      	lsls	r1, r1, #7
 80036c0:	430a      	orrs	r2, r1
 80036c2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036c4:	f7fe fbd8 	bl	8001e78 <HAL_GetTick>
 80036c8:	0003      	movs	r3, r0
 80036ca:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036cc:	e00f      	b.n	80036ee <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036ce:	f7fe fbd3 	bl	8001e78 <HAL_GetTick>
 80036d2:	0002      	movs	r2, r0
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b19      	cmp	r3, #25
 80036da:	d908      	bls.n	80036ee <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	2220      	movs	r2, #32
 80036e0:	4313      	orrs	r3, r2
 80036e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036e4:	2327      	movs	r3, #39	@ 0x27
 80036e6:	18fb      	adds	r3, r7, r3
 80036e8:	2201      	movs	r2, #1
 80036ea:	701a      	strb	r2, [r3, #0]

              break;
 80036ec:	e006      	b.n	80036fc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	2220      	movs	r2, #32
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d1e8      	bne.n	80036ce <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	2220      	movs	r2, #32
 8003704:	4013      	ands	r3, r2
 8003706:	2b20      	cmp	r3, #32
 8003708:	d004      	beq.n	8003714 <I2C_IsErrorOccurred+0x100>
 800370a:	2327      	movs	r3, #39	@ 0x27
 800370c:	18fb      	adds	r3, r7, r3
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d09b      	beq.n	800364c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003714:	2327      	movs	r3, #39	@ 0x27
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d103      	bne.n	8003726 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2220      	movs	r2, #32
 8003724:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	2204      	movs	r2, #4
 800372a:	4313      	orrs	r3, r2
 800372c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800372e:	2327      	movs	r3, #39	@ 0x27
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	2201      	movs	r2, #1
 8003734:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	2380      	movs	r3, #128	@ 0x80
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4013      	ands	r3, r2
 8003746:	d00c      	beq.n	8003762 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	2201      	movs	r2, #1
 800374c:	4313      	orrs	r3, r2
 800374e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2280      	movs	r2, #128	@ 0x80
 8003756:	0052      	lsls	r2, r2, #1
 8003758:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800375a:	2327      	movs	r3, #39	@ 0x27
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	2380      	movs	r3, #128	@ 0x80
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4013      	ands	r3, r2
 800376a:	d00c      	beq.n	8003786 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	2208      	movs	r2, #8
 8003770:	4313      	orrs	r3, r2
 8003772:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2280      	movs	r2, #128	@ 0x80
 800377a:	00d2      	lsls	r2, r2, #3
 800377c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800377e:	2327      	movs	r3, #39	@ 0x27
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	2201      	movs	r2, #1
 8003784:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	2380      	movs	r3, #128	@ 0x80
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4013      	ands	r3, r2
 800378e:	d00c      	beq.n	80037aa <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	2202      	movs	r2, #2
 8003794:	4313      	orrs	r3, r2
 8003796:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2280      	movs	r2, #128	@ 0x80
 800379e:	0092      	lsls	r2, r2, #2
 80037a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037a2:	2327      	movs	r3, #39	@ 0x27
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	2201      	movs	r2, #1
 80037a8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80037aa:	2327      	movs	r3, #39	@ 0x27
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d01d      	beq.n	80037f0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	0018      	movs	r0, r3
 80037b8:	f7ff fd8a 	bl	80032d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	490e      	ldr	r1, [pc, #56]	@ (8003800 <I2C_IsErrorOccurred+0x1ec>)
 80037c8:	400a      	ands	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2241      	movs	r2, #65	@ 0x41
 80037dc:	2120      	movs	r1, #32
 80037de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2242      	movs	r2, #66	@ 0x42
 80037e4:	2100      	movs	r1, #0
 80037e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2240      	movs	r2, #64	@ 0x40
 80037ec:	2100      	movs	r1, #0
 80037ee:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80037f0:	2327      	movs	r3, #39	@ 0x27
 80037f2:	18fb      	adds	r3, r7, r3
 80037f4:	781b      	ldrb	r3, [r3, #0]
}
 80037f6:	0018      	movs	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	b00a      	add	sp, #40	@ 0x28
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	46c0      	nop			@ (mov r8, r8)
 8003800:	fe00e800 	.word	0xfe00e800

08003804 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003804:	b590      	push	{r4, r7, lr}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	0008      	movs	r0, r1
 800380e:	0011      	movs	r1, r2
 8003810:	607b      	str	r3, [r7, #4]
 8003812:	240a      	movs	r4, #10
 8003814:	193b      	adds	r3, r7, r4
 8003816:	1c02      	adds	r2, r0, #0
 8003818:	801a      	strh	r2, [r3, #0]
 800381a:	2009      	movs	r0, #9
 800381c:	183b      	adds	r3, r7, r0
 800381e:	1c0a      	adds	r2, r1, #0
 8003820:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003822:	193b      	adds	r3, r7, r4
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	059b      	lsls	r3, r3, #22
 8003828:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800382a:	183b      	adds	r3, r7, r0
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	0419      	lsls	r1, r3, #16
 8003830:	23ff      	movs	r3, #255	@ 0xff
 8003832:	041b      	lsls	r3, r3, #16
 8003834:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003836:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800383c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383e:	4313      	orrs	r3, r2
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	085b      	lsrs	r3, r3, #1
 8003844:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800384e:	0d51      	lsrs	r1, r2, #21
 8003850:	2280      	movs	r2, #128	@ 0x80
 8003852:	00d2      	lsls	r2, r2, #3
 8003854:	400a      	ands	r2, r1
 8003856:	4907      	ldr	r1, [pc, #28]	@ (8003874 <I2C_TransferConfig+0x70>)
 8003858:	430a      	orrs	r2, r1
 800385a:	43d2      	mvns	r2, r2
 800385c:	401a      	ands	r2, r3
 800385e:	0011      	movs	r1, r2
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	46bd      	mov	sp, r7
 800386e:	b007      	add	sp, #28
 8003870:	bd90      	pop	{r4, r7, pc}
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	03ff63ff 	.word	0x03ff63ff

08003878 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2241      	movs	r2, #65	@ 0x41
 8003886:	5c9b      	ldrb	r3, [r3, r2]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b20      	cmp	r3, #32
 800388c:	d138      	bne.n	8003900 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2240      	movs	r2, #64	@ 0x40
 8003892:	5c9b      	ldrb	r3, [r3, r2]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003898:	2302      	movs	r3, #2
 800389a:	e032      	b.n	8003902 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2240      	movs	r2, #64	@ 0x40
 80038a0:	2101      	movs	r1, #1
 80038a2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2241      	movs	r2, #65	@ 0x41
 80038a8:	2124      	movs	r1, #36	@ 0x24
 80038aa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2101      	movs	r1, #1
 80038b8:	438a      	bics	r2, r1
 80038ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4911      	ldr	r1, [pc, #68]	@ (800390c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80038c8:	400a      	ands	r2, r1
 80038ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6819      	ldr	r1, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2101      	movs	r1, #1
 80038e8:	430a      	orrs	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2241      	movs	r2, #65	@ 0x41
 80038f0:	2120      	movs	r1, #32
 80038f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2240      	movs	r2, #64	@ 0x40
 80038f8:	2100      	movs	r1, #0
 80038fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	e000      	b.n	8003902 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003900:	2302      	movs	r3, #2
  }
}
 8003902:	0018      	movs	r0, r3
 8003904:	46bd      	mov	sp, r7
 8003906:	b002      	add	sp, #8
 8003908:	bd80      	pop	{r7, pc}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	ffffefff 	.word	0xffffefff

08003910 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2241      	movs	r2, #65	@ 0x41
 800391e:	5c9b      	ldrb	r3, [r3, r2]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b20      	cmp	r3, #32
 8003924:	d139      	bne.n	800399a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2240      	movs	r2, #64	@ 0x40
 800392a:	5c9b      	ldrb	r3, [r3, r2]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003930:	2302      	movs	r3, #2
 8003932:	e033      	b.n	800399c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2240      	movs	r2, #64	@ 0x40
 8003938:	2101      	movs	r1, #1
 800393a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2241      	movs	r2, #65	@ 0x41
 8003940:	2124      	movs	r1, #36	@ 0x24
 8003942:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2101      	movs	r1, #1
 8003950:	438a      	bics	r2, r1
 8003952:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a11      	ldr	r2, [pc, #68]	@ (80039a4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003960:	4013      	ands	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2101      	movs	r1, #1
 8003982:	430a      	orrs	r2, r1
 8003984:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2241      	movs	r2, #65	@ 0x41
 800398a:	2120      	movs	r1, #32
 800398c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2240      	movs	r2, #64	@ 0x40
 8003992:	2100      	movs	r1, #0
 8003994:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	e000      	b.n	800399c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800399a:	2302      	movs	r3, #2
  }
}
 800399c:	0018      	movs	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	b004      	add	sp, #16
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	fffff0ff 	.word	0xfffff0ff

080039a8 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039ac:	4b04      	ldr	r3, [pc, #16]	@ (80039c0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4b03      	ldr	r3, [pc, #12]	@ (80039c0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80039b2:	2180      	movs	r1, #128	@ 0x80
 80039b4:	0049      	lsls	r1, r1, #1
 80039b6:	430a      	orrs	r2, r1
 80039b8:	601a      	str	r2, [r3, #0]
}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40007000 	.word	0x40007000

080039c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80039cc:	4b19      	ldr	r3, [pc, #100]	@ (8003a34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a19      	ldr	r2, [pc, #100]	@ (8003a38 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	0019      	movs	r1, r3
 80039d6:	4b17      	ldr	r3, [pc, #92]	@ (8003a34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	430a      	orrs	r2, r1
 80039dc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	2380      	movs	r3, #128	@ 0x80
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d11f      	bne.n	8003a28 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80039e8:	4b14      	ldr	r3, [pc, #80]	@ (8003a3c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	0013      	movs	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	189b      	adds	r3, r3, r2
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	4912      	ldr	r1, [pc, #72]	@ (8003a40 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80039f6:	0018      	movs	r0, r3
 80039f8:	f7fc fb84 	bl	8000104 <__udivsi3>
 80039fc:	0003      	movs	r3, r0
 80039fe:	3301      	adds	r3, #1
 8003a00:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a02:	e008      	b.n	8003a16 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	e001      	b.n	8003a16 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e009      	b.n	8003a2a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a16:	4b07      	ldr	r3, [pc, #28]	@ (8003a34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	2380      	movs	r3, #128	@ 0x80
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	401a      	ands	r2, r3
 8003a20:	2380      	movs	r3, #128	@ 0x80
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d0ed      	beq.n	8003a04 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b004      	add	sp, #16
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	46c0      	nop			@ (mov r8, r8)
 8003a34:	40007000 	.word	0x40007000
 8003a38:	fffff9ff 	.word	0xfffff9ff
 8003a3c:	20000048 	.word	0x20000048
 8003a40:	000f4240 	.word	0x000f4240

08003a44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e2fe      	b.n	8004054 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d100      	bne.n	8003a62 <HAL_RCC_OscConfig+0x1e>
 8003a60:	e07c      	b.n	8003b5c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a62:	4bc3      	ldr	r3, [pc, #780]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2238      	movs	r2, #56	@ 0x38
 8003a68:	4013      	ands	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a6c:	4bc0      	ldr	r3, [pc, #768]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	2203      	movs	r2, #3
 8003a72:	4013      	ands	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d102      	bne.n	8003a82 <HAL_RCC_OscConfig+0x3e>
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d002      	beq.n	8003a88 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d10b      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	4bb9      	ldr	r3, [pc, #740]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	2380      	movs	r3, #128	@ 0x80
 8003a8e:	029b      	lsls	r3, r3, #10
 8003a90:	4013      	ands	r3, r2
 8003a92:	d062      	beq.n	8003b5a <HAL_RCC_OscConfig+0x116>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d15e      	bne.n	8003b5a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e2d9      	b.n	8004054 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	2380      	movs	r3, #128	@ 0x80
 8003aa6:	025b      	lsls	r3, r3, #9
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d107      	bne.n	8003abc <HAL_RCC_OscConfig+0x78>
 8003aac:	4bb0      	ldr	r3, [pc, #704]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4baf      	ldr	r3, [pc, #700]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003ab2:	2180      	movs	r1, #128	@ 0x80
 8003ab4:	0249      	lsls	r1, r1, #9
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	e020      	b.n	8003afe <HAL_RCC_OscConfig+0xba>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	23a0      	movs	r3, #160	@ 0xa0
 8003ac2:	02db      	lsls	r3, r3, #11
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d10e      	bne.n	8003ae6 <HAL_RCC_OscConfig+0xa2>
 8003ac8:	4ba9      	ldr	r3, [pc, #676]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4ba8      	ldr	r3, [pc, #672]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003ace:	2180      	movs	r1, #128	@ 0x80
 8003ad0:	02c9      	lsls	r1, r1, #11
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	4ba6      	ldr	r3, [pc, #664]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4ba5      	ldr	r3, [pc, #660]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003adc:	2180      	movs	r1, #128	@ 0x80
 8003ade:	0249      	lsls	r1, r1, #9
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	e00b      	b.n	8003afe <HAL_RCC_OscConfig+0xba>
 8003ae6:	4ba2      	ldr	r3, [pc, #648]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	4ba1      	ldr	r3, [pc, #644]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003aec:	49a1      	ldr	r1, [pc, #644]	@ (8003d74 <HAL_RCC_OscConfig+0x330>)
 8003aee:	400a      	ands	r2, r1
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	4b9f      	ldr	r3, [pc, #636]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4b9e      	ldr	r3, [pc, #632]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003af8:	499f      	ldr	r1, [pc, #636]	@ (8003d78 <HAL_RCC_OscConfig+0x334>)
 8003afa:	400a      	ands	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d014      	beq.n	8003b30 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b06:	f7fe f9b7 	bl	8001e78 <HAL_GetTick>
 8003b0a:	0003      	movs	r3, r0
 8003b0c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b10:	f7fe f9b2 	bl	8001e78 <HAL_GetTick>
 8003b14:	0002      	movs	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b64      	cmp	r3, #100	@ 0x64
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e298      	b.n	8004054 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b22:	4b93      	ldr	r3, [pc, #588]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	2380      	movs	r3, #128	@ 0x80
 8003b28:	029b      	lsls	r3, r3, #10
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0xcc>
 8003b2e:	e015      	b.n	8003b5c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fe f9a2 	bl	8001e78 <HAL_GetTick>
 8003b34:	0003      	movs	r3, r0
 8003b36:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b3a:	f7fe f99d 	bl	8001e78 <HAL_GetTick>
 8003b3e:	0002      	movs	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b64      	cmp	r3, #100	@ 0x64
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e283      	b.n	8004054 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b4c:	4b88      	ldr	r3, [pc, #544]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	2380      	movs	r3, #128	@ 0x80
 8003b52:	029b      	lsls	r3, r3, #10
 8003b54:	4013      	ands	r3, r2
 8003b56:	d1f0      	bne.n	8003b3a <HAL_RCC_OscConfig+0xf6>
 8003b58:	e000      	b.n	8003b5c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b5a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2202      	movs	r2, #2
 8003b62:	4013      	ands	r3, r2
 8003b64:	d100      	bne.n	8003b68 <HAL_RCC_OscConfig+0x124>
 8003b66:	e099      	b.n	8003c9c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b68:	4b81      	ldr	r3, [pc, #516]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2238      	movs	r2, #56	@ 0x38
 8003b6e:	4013      	ands	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b72:	4b7f      	ldr	r3, [pc, #508]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2203      	movs	r2, #3
 8003b78:	4013      	ands	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	2b10      	cmp	r3, #16
 8003b80:	d102      	bne.n	8003b88 <HAL_RCC_OscConfig+0x144>
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d002      	beq.n	8003b8e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d135      	bne.n	8003bfa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b8e:	4b78      	ldr	r3, [pc, #480]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	2380      	movs	r3, #128	@ 0x80
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4013      	ands	r3, r2
 8003b98:	d005      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x162>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e256      	b.n	8004054 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba6:	4b72      	ldr	r3, [pc, #456]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4a74      	ldr	r2, [pc, #464]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	0019      	movs	r1, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	021a      	lsls	r2, r3, #8
 8003bb6:	4b6e      	ldr	r3, [pc, #440]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d112      	bne.n	8003be8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003bc2:	4b6b      	ldr	r3, [pc, #428]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a6e      	ldr	r2, [pc, #440]	@ (8003d80 <HAL_RCC_OscConfig+0x33c>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	0019      	movs	r1, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	4b67      	ldr	r3, [pc, #412]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003bd6:	4b66      	ldr	r3, [pc, #408]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	0adb      	lsrs	r3, r3, #11
 8003bdc:	2207      	movs	r2, #7
 8003bde:	4013      	ands	r3, r2
 8003be0:	4a68      	ldr	r2, [pc, #416]	@ (8003d84 <HAL_RCC_OscConfig+0x340>)
 8003be2:	40da      	lsrs	r2, r3
 8003be4:	4b68      	ldr	r3, [pc, #416]	@ (8003d88 <HAL_RCC_OscConfig+0x344>)
 8003be6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003be8:	4b68      	ldr	r3, [pc, #416]	@ (8003d8c <HAL_RCC_OscConfig+0x348>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	0018      	movs	r0, r3
 8003bee:	f7fe f8e7 	bl	8001dc0 <HAL_InitTick>
 8003bf2:	1e03      	subs	r3, r0, #0
 8003bf4:	d051      	beq.n	8003c9a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e22c      	b.n	8004054 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d030      	beq.n	8003c64 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003c02:	4b5b      	ldr	r3, [pc, #364]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a5e      	ldr	r2, [pc, #376]	@ (8003d80 <HAL_RCC_OscConfig+0x33c>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	4b57      	ldr	r3, [pc, #348]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003c12:	430a      	orrs	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003c16:	4b56      	ldr	r3, [pc, #344]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	4b55      	ldr	r3, [pc, #340]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003c1c:	2180      	movs	r1, #128	@ 0x80
 8003c1e:	0049      	lsls	r1, r1, #1
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c24:	f7fe f928 	bl	8001e78 <HAL_GetTick>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c2e:	f7fe f923 	bl	8001e78 <HAL_GetTick>
 8003c32:	0002      	movs	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e209      	b.n	8004054 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c40:	4b4b      	ldr	r3, [pc, #300]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	2380      	movs	r3, #128	@ 0x80
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4c:	4b48      	ldr	r3, [pc, #288]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	4a4a      	ldr	r2, [pc, #296]	@ (8003d7c <HAL_RCC_OscConfig+0x338>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	0019      	movs	r1, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	021a      	lsls	r2, r3, #8
 8003c5c:	4b44      	ldr	r3, [pc, #272]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
 8003c62:	e01b      	b.n	8003c9c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003c64:	4b42      	ldr	r3, [pc, #264]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	4b41      	ldr	r3, [pc, #260]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003c6a:	4949      	ldr	r1, [pc, #292]	@ (8003d90 <HAL_RCC_OscConfig+0x34c>)
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c70:	f7fe f902 	bl	8001e78 <HAL_GetTick>
 8003c74:	0003      	movs	r3, r0
 8003c76:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c7a:	f7fe f8fd 	bl	8001e78 <HAL_GetTick>
 8003c7e:	0002      	movs	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e1e3      	b.n	8004054 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c8c:	4b38      	ldr	r3, [pc, #224]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	2380      	movs	r3, #128	@ 0x80
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	4013      	ands	r3, r2
 8003c96:	d1f0      	bne.n	8003c7a <HAL_RCC_OscConfig+0x236>
 8003c98:	e000      	b.n	8003c9c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c9a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d047      	beq.n	8003d36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003ca6:	4b32      	ldr	r3, [pc, #200]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2238      	movs	r2, #56	@ 0x38
 8003cac:	4013      	ands	r3, r2
 8003cae:	2b18      	cmp	r3, #24
 8003cb0:	d10a      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d03c      	beq.n	8003d36 <HAL_RCC_OscConfig+0x2f2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d138      	bne.n	8003d36 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e1c5      	b.n	8004054 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d019      	beq.n	8003d04 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003cd0:	4b27      	ldr	r3, [pc, #156]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003cd2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003cd4:	4b26      	ldr	r3, [pc, #152]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7fe f8cc 	bl	8001e78 <HAL_GetTick>
 8003ce0:	0003      	movs	r3, r0
 8003ce2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce6:	f7fe f8c7 	bl	8001e78 <HAL_GetTick>
 8003cea:	0002      	movs	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e1ad      	b.n	8004054 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d0f1      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x2a2>
 8003d02:	e018      	b.n	8003d36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003d04:	4b1a      	ldr	r3, [pc, #104]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003d06:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d08:	4b19      	ldr	r3, [pc, #100]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	438a      	bics	r2, r1
 8003d0e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d10:	f7fe f8b2 	bl	8001e78 <HAL_GetTick>
 8003d14:	0003      	movs	r3, r0
 8003d16:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1a:	f7fe f8ad 	bl	8001e78 <HAL_GetTick>
 8003d1e:	0002      	movs	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e193      	b.n	8004054 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d2c:	4b10      	ldr	r3, [pc, #64]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d30:	2202      	movs	r2, #2
 8003d32:	4013      	ands	r3, r2
 8003d34:	d1f1      	bne.n	8003d1a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2204      	movs	r2, #4
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d100      	bne.n	8003d42 <HAL_RCC_OscConfig+0x2fe>
 8003d40:	e0c6      	b.n	8003ed0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d42:	231f      	movs	r3, #31
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	2200      	movs	r2, #0
 8003d48:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003d4a:	4b09      	ldr	r3, [pc, #36]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2238      	movs	r2, #56	@ 0x38
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d11e      	bne.n	8003d94 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003d56:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <HAL_RCC_OscConfig+0x32c>)
 8003d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d100      	bne.n	8003d62 <HAL_RCC_OscConfig+0x31e>
 8003d60:	e0b6      	b.n	8003ed0 <HAL_RCC_OscConfig+0x48c>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d000      	beq.n	8003d6c <HAL_RCC_OscConfig+0x328>
 8003d6a:	e0b1      	b.n	8003ed0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e171      	b.n	8004054 <HAL_RCC_OscConfig+0x610>
 8003d70:	40021000 	.word	0x40021000
 8003d74:	fffeffff 	.word	0xfffeffff
 8003d78:	fffbffff 	.word	0xfffbffff
 8003d7c:	ffff80ff 	.word	0xffff80ff
 8003d80:	ffffc7ff 	.word	0xffffc7ff
 8003d84:	00f42400 	.word	0x00f42400
 8003d88:	20000048 	.word	0x20000048
 8003d8c:	2000004c 	.word	0x2000004c
 8003d90:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d94:	4bb1      	ldr	r3, [pc, #708]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003d96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d98:	2380      	movs	r3, #128	@ 0x80
 8003d9a:	055b      	lsls	r3, r3, #21
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d101      	bne.n	8003da4 <HAL_RCC_OscConfig+0x360>
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <HAL_RCC_OscConfig+0x362>
 8003da4:	2300      	movs	r3, #0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d011      	beq.n	8003dce <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003daa:	4bac      	ldr	r3, [pc, #688]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003dac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dae:	4bab      	ldr	r3, [pc, #684]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003db0:	2180      	movs	r1, #128	@ 0x80
 8003db2:	0549      	lsls	r1, r1, #21
 8003db4:	430a      	orrs	r2, r1
 8003db6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003db8:	4ba8      	ldr	r3, [pc, #672]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003dba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dbc:	2380      	movs	r3, #128	@ 0x80
 8003dbe:	055b      	lsls	r3, r3, #21
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003dc6:	231f      	movs	r3, #31
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	2201      	movs	r2, #1
 8003dcc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dce:	4ba4      	ldr	r3, [pc, #656]	@ (8004060 <HAL_RCC_OscConfig+0x61c>)
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	2380      	movs	r3, #128	@ 0x80
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d11a      	bne.n	8003e10 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dda:	4ba1      	ldr	r3, [pc, #644]	@ (8004060 <HAL_RCC_OscConfig+0x61c>)
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	4ba0      	ldr	r3, [pc, #640]	@ (8004060 <HAL_RCC_OscConfig+0x61c>)
 8003de0:	2180      	movs	r1, #128	@ 0x80
 8003de2:	0049      	lsls	r1, r1, #1
 8003de4:	430a      	orrs	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003de8:	f7fe f846 	bl	8001e78 <HAL_GetTick>
 8003dec:	0003      	movs	r3, r0
 8003dee:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df2:	f7fe f841 	bl	8001e78 <HAL_GetTick>
 8003df6:	0002      	movs	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e127      	b.n	8004054 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e04:	4b96      	ldr	r3, [pc, #600]	@ (8004060 <HAL_RCC_OscConfig+0x61c>)
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	2380      	movs	r3, #128	@ 0x80
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d106      	bne.n	8003e26 <HAL_RCC_OscConfig+0x3e2>
 8003e18:	4b90      	ldr	r3, [pc, #576]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003e1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e1c:	4b8f      	ldr	r3, [pc, #572]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003e1e:	2101      	movs	r1, #1
 8003e20:	430a      	orrs	r2, r1
 8003e22:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e24:	e01c      	b.n	8003e60 <HAL_RCC_OscConfig+0x41c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b05      	cmp	r3, #5
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCC_OscConfig+0x404>
 8003e2e:	4b8b      	ldr	r3, [pc, #556]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003e30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e32:	4b8a      	ldr	r3, [pc, #552]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003e34:	2104      	movs	r1, #4
 8003e36:	430a      	orrs	r2, r1
 8003e38:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e3a:	4b88      	ldr	r3, [pc, #544]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003e3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e3e:	4b87      	ldr	r3, [pc, #540]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003e40:	2101      	movs	r1, #1
 8003e42:	430a      	orrs	r2, r1
 8003e44:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e46:	e00b      	b.n	8003e60 <HAL_RCC_OscConfig+0x41c>
 8003e48:	4b84      	ldr	r3, [pc, #528]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003e4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e4c:	4b83      	ldr	r3, [pc, #524]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003e4e:	2101      	movs	r1, #1
 8003e50:	438a      	bics	r2, r1
 8003e52:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e54:	4b81      	ldr	r3, [pc, #516]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003e56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e58:	4b80      	ldr	r3, [pc, #512]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003e5a:	2104      	movs	r1, #4
 8003e5c:	438a      	bics	r2, r1
 8003e5e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d014      	beq.n	8003e92 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e68:	f7fe f806 	bl	8001e78 <HAL_GetTick>
 8003e6c:	0003      	movs	r3, r0
 8003e6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e70:	e009      	b.n	8003e86 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e72:	f7fe f801 	bl	8001e78 <HAL_GetTick>
 8003e76:	0002      	movs	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	4a79      	ldr	r2, [pc, #484]	@ (8004064 <HAL_RCC_OscConfig+0x620>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e0e6      	b.n	8004054 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e86:	4b75      	ldr	r3, [pc, #468]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d0f0      	beq.n	8003e72 <HAL_RCC_OscConfig+0x42e>
 8003e90:	e013      	b.n	8003eba <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fd fff1 	bl	8001e78 <HAL_GetTick>
 8003e96:	0003      	movs	r3, r0
 8003e98:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e9a:	e009      	b.n	8003eb0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9c:	f7fd ffec 	bl	8001e78 <HAL_GetTick>
 8003ea0:	0002      	movs	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	4a6f      	ldr	r2, [pc, #444]	@ (8004064 <HAL_RCC_OscConfig+0x620>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e0d1      	b.n	8004054 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eb0:	4b6a      	ldr	r3, [pc, #424]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003eba:	231f      	movs	r3, #31
 8003ebc:	18fb      	adds	r3, r7, r3
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d105      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003ec4:	4b65      	ldr	r3, [pc, #404]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003ec6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ec8:	4b64      	ldr	r3, [pc, #400]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003eca:	4967      	ldr	r1, [pc, #412]	@ (8004068 <HAL_RCC_OscConfig+0x624>)
 8003ecc:	400a      	ands	r2, r1
 8003ece:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d100      	bne.n	8003eda <HAL_RCC_OscConfig+0x496>
 8003ed8:	e0bb      	b.n	8004052 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eda:	4b60      	ldr	r3, [pc, #384]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2238      	movs	r2, #56	@ 0x38
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b10      	cmp	r3, #16
 8003ee4:	d100      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x4a4>
 8003ee6:	e07b      	b.n	8003fe0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d156      	bne.n	8003f9e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef0:	4b5a      	ldr	r3, [pc, #360]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4b59      	ldr	r3, [pc, #356]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003ef6:	495d      	ldr	r1, [pc, #372]	@ (800406c <HAL_RCC_OscConfig+0x628>)
 8003ef8:	400a      	ands	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fd ffbc 	bl	8001e78 <HAL_GetTick>
 8003f00:	0003      	movs	r3, r0
 8003f02:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f06:	f7fd ffb7 	bl	8001e78 <HAL_GetTick>
 8003f0a:	0002      	movs	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e09d      	b.n	8004054 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f18:	4b50      	ldr	r3, [pc, #320]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	2380      	movs	r3, #128	@ 0x80
 8003f1e:	049b      	lsls	r3, r3, #18
 8003f20:	4013      	ands	r3, r2
 8003f22:	d1f0      	bne.n	8003f06 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f24:	4b4d      	ldr	r3, [pc, #308]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4a51      	ldr	r2, [pc, #324]	@ (8004070 <HAL_RCC_OscConfig+0x62c>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	0019      	movs	r1, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1a      	ldr	r2, [r3, #32]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f44:	431a      	orrs	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f50:	431a      	orrs	r2, r3
 8003f52:	4b42      	ldr	r3, [pc, #264]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003f54:	430a      	orrs	r2, r1
 8003f56:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f58:	4b40      	ldr	r3, [pc, #256]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	4b3f      	ldr	r3, [pc, #252]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003f5e:	2180      	movs	r1, #128	@ 0x80
 8003f60:	0449      	lsls	r1, r1, #17
 8003f62:	430a      	orrs	r2, r1
 8003f64:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003f66:	4b3d      	ldr	r3, [pc, #244]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	4b3c      	ldr	r3, [pc, #240]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003f6c:	2180      	movs	r1, #128	@ 0x80
 8003f6e:	0549      	lsls	r1, r1, #21
 8003f70:	430a      	orrs	r2, r1
 8003f72:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fd ff80 	bl	8001e78 <HAL_GetTick>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7e:	f7fd ff7b 	bl	8001e78 <HAL_GetTick>
 8003f82:	0002      	movs	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e061      	b.n	8004054 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f90:	4b32      	ldr	r3, [pc, #200]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	2380      	movs	r3, #128	@ 0x80
 8003f96:	049b      	lsls	r3, r3, #18
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d0f0      	beq.n	8003f7e <HAL_RCC_OscConfig+0x53a>
 8003f9c:	e059      	b.n	8004052 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	4b2e      	ldr	r3, [pc, #184]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003fa4:	4931      	ldr	r1, [pc, #196]	@ (800406c <HAL_RCC_OscConfig+0x628>)
 8003fa6:	400a      	ands	r2, r1
 8003fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003faa:	f7fd ff65 	bl	8001e78 <HAL_GetTick>
 8003fae:	0003      	movs	r3, r0
 8003fb0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb4:	f7fd ff60 	bl	8001e78 <HAL_GetTick>
 8003fb8:	0002      	movs	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e046      	b.n	8004054 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc6:	4b25      	ldr	r3, [pc, #148]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	2380      	movs	r3, #128	@ 0x80
 8003fcc:	049b      	lsls	r3, r3, #18
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003fd2:	4b22      	ldr	r3, [pc, #136]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	4b21      	ldr	r3, [pc, #132]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003fd8:	4926      	ldr	r1, [pc, #152]	@ (8004074 <HAL_RCC_OscConfig+0x630>)
 8003fda:	400a      	ands	r2, r1
 8003fdc:	60da      	str	r2, [r3, #12]
 8003fde:	e038      	b.n	8004052 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e033      	b.n	8004054 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003fec:	4b1b      	ldr	r3, [pc, #108]	@ (800405c <HAL_RCC_OscConfig+0x618>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d126      	bne.n	800404e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2270      	movs	r2, #112	@ 0x70
 8004004:	401a      	ands	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400a:	429a      	cmp	r2, r3
 800400c:	d11f      	bne.n	800404e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	23fe      	movs	r3, #254	@ 0xfe
 8004012:	01db      	lsls	r3, r3, #7
 8004014:	401a      	ands	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800401c:	429a      	cmp	r2, r3
 800401e:	d116      	bne.n	800404e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	23f8      	movs	r3, #248	@ 0xf8
 8004024:	039b      	lsls	r3, r3, #14
 8004026:	401a      	ands	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800402c:	429a      	cmp	r2, r3
 800402e:	d10e      	bne.n	800404e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	23e0      	movs	r3, #224	@ 0xe0
 8004034:	051b      	lsls	r3, r3, #20
 8004036:	401a      	ands	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800403c:	429a      	cmp	r2, r3
 800403e:	d106      	bne.n	800404e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	0f5b      	lsrs	r3, r3, #29
 8004044:	075a      	lsls	r2, r3, #29
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800404a:	429a      	cmp	r2, r3
 800404c:	d001      	beq.n	8004052 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	0018      	movs	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	b008      	add	sp, #32
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40021000 	.word	0x40021000
 8004060:	40007000 	.word	0x40007000
 8004064:	00001388 	.word	0x00001388
 8004068:	efffffff 	.word	0xefffffff
 800406c:	feffffff 	.word	0xfeffffff
 8004070:	11c1808c 	.word	0x11c1808c
 8004074:	eefefffc 	.word	0xeefefffc

08004078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0e9      	b.n	8004260 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800408c:	4b76      	ldr	r3, [pc, #472]	@ (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2207      	movs	r2, #7
 8004092:	4013      	ands	r3, r2
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d91e      	bls.n	80040d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409a:	4b73      	ldr	r3, [pc, #460]	@ (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2207      	movs	r2, #7
 80040a0:	4393      	bics	r3, r2
 80040a2:	0019      	movs	r1, r3
 80040a4:	4b70      	ldr	r3, [pc, #448]	@ (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040ac:	f7fd fee4 	bl	8001e78 <HAL_GetTick>
 80040b0:	0003      	movs	r3, r0
 80040b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040b4:	e009      	b.n	80040ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b6:	f7fd fedf 	bl	8001e78 <HAL_GetTick>
 80040ba:	0002      	movs	r2, r0
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	4a6a      	ldr	r2, [pc, #424]	@ (800426c <HAL_RCC_ClockConfig+0x1f4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e0ca      	b.n	8004260 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040ca:	4b67      	ldr	r3, [pc, #412]	@ (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2207      	movs	r2, #7
 80040d0:	4013      	ands	r3, r2
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d1ee      	bne.n	80040b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2202      	movs	r2, #2
 80040de:	4013      	ands	r3, r2
 80040e0:	d015      	beq.n	800410e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2204      	movs	r2, #4
 80040e8:	4013      	ands	r3, r2
 80040ea:	d006      	beq.n	80040fa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80040ec:	4b60      	ldr	r3, [pc, #384]	@ (8004270 <HAL_RCC_ClockConfig+0x1f8>)
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	4b5f      	ldr	r3, [pc, #380]	@ (8004270 <HAL_RCC_ClockConfig+0x1f8>)
 80040f2:	21e0      	movs	r1, #224	@ 0xe0
 80040f4:	01c9      	lsls	r1, r1, #7
 80040f6:	430a      	orrs	r2, r1
 80040f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040fa:	4b5d      	ldr	r3, [pc, #372]	@ (8004270 <HAL_RCC_ClockConfig+0x1f8>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	4a5d      	ldr	r2, [pc, #372]	@ (8004274 <HAL_RCC_ClockConfig+0x1fc>)
 8004100:	4013      	ands	r3, r2
 8004102:	0019      	movs	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	4b59      	ldr	r3, [pc, #356]	@ (8004270 <HAL_RCC_ClockConfig+0x1f8>)
 800410a:	430a      	orrs	r2, r1
 800410c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2201      	movs	r2, #1
 8004114:	4013      	ands	r3, r2
 8004116:	d057      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d107      	bne.n	8004130 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004120:	4b53      	ldr	r3, [pc, #332]	@ (8004270 <HAL_RCC_ClockConfig+0x1f8>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	2380      	movs	r3, #128	@ 0x80
 8004126:	029b      	lsls	r3, r3, #10
 8004128:	4013      	ands	r3, r2
 800412a:	d12b      	bne.n	8004184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e097      	b.n	8004260 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b02      	cmp	r3, #2
 8004136:	d107      	bne.n	8004148 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004138:	4b4d      	ldr	r3, [pc, #308]	@ (8004270 <HAL_RCC_ClockConfig+0x1f8>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	2380      	movs	r3, #128	@ 0x80
 800413e:	049b      	lsls	r3, r3, #18
 8004140:	4013      	ands	r3, r2
 8004142:	d11f      	bne.n	8004184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e08b      	b.n	8004260 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d107      	bne.n	8004160 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004150:	4b47      	ldr	r3, [pc, #284]	@ (8004270 <HAL_RCC_ClockConfig+0x1f8>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	2380      	movs	r3, #128	@ 0x80
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	4013      	ands	r3, r2
 800415a:	d113      	bne.n	8004184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e07f      	b.n	8004260 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b03      	cmp	r3, #3
 8004166:	d106      	bne.n	8004176 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004168:	4b41      	ldr	r3, [pc, #260]	@ (8004270 <HAL_RCC_ClockConfig+0x1f8>)
 800416a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800416c:	2202      	movs	r2, #2
 800416e:	4013      	ands	r3, r2
 8004170:	d108      	bne.n	8004184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e074      	b.n	8004260 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004176:	4b3e      	ldr	r3, [pc, #248]	@ (8004270 <HAL_RCC_ClockConfig+0x1f8>)
 8004178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417a:	2202      	movs	r2, #2
 800417c:	4013      	ands	r3, r2
 800417e:	d101      	bne.n	8004184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e06d      	b.n	8004260 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004184:	4b3a      	ldr	r3, [pc, #232]	@ (8004270 <HAL_RCC_ClockConfig+0x1f8>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2207      	movs	r2, #7
 800418a:	4393      	bics	r3, r2
 800418c:	0019      	movs	r1, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	4b37      	ldr	r3, [pc, #220]	@ (8004270 <HAL_RCC_ClockConfig+0x1f8>)
 8004194:	430a      	orrs	r2, r1
 8004196:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004198:	f7fd fe6e 	bl	8001e78 <HAL_GetTick>
 800419c:	0003      	movs	r3, r0
 800419e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a0:	e009      	b.n	80041b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a2:	f7fd fe69 	bl	8001e78 <HAL_GetTick>
 80041a6:	0002      	movs	r2, r0
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	4a2f      	ldr	r2, [pc, #188]	@ (800426c <HAL_RCC_ClockConfig+0x1f4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e054      	b.n	8004260 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	4b2e      	ldr	r3, [pc, #184]	@ (8004270 <HAL_RCC_ClockConfig+0x1f8>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2238      	movs	r2, #56	@ 0x38
 80041bc:	401a      	ands	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d1ec      	bne.n	80041a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041c8:	4b27      	ldr	r3, [pc, #156]	@ (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2207      	movs	r2, #7
 80041ce:	4013      	ands	r3, r2
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d21e      	bcs.n	8004214 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d6:	4b24      	ldr	r3, [pc, #144]	@ (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2207      	movs	r2, #7
 80041dc:	4393      	bics	r3, r2
 80041de:	0019      	movs	r1, r3
 80041e0:	4b21      	ldr	r3, [pc, #132]	@ (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041e8:	f7fd fe46 	bl	8001e78 <HAL_GetTick>
 80041ec:	0003      	movs	r3, r0
 80041ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041f0:	e009      	b.n	8004206 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f2:	f7fd fe41 	bl	8001e78 <HAL_GetTick>
 80041f6:	0002      	movs	r2, r0
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	4a1b      	ldr	r2, [pc, #108]	@ (800426c <HAL_RCC_ClockConfig+0x1f4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e02c      	b.n	8004260 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004206:	4b18      	ldr	r3, [pc, #96]	@ (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2207      	movs	r2, #7
 800420c:	4013      	ands	r3, r2
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d1ee      	bne.n	80041f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2204      	movs	r2, #4
 800421a:	4013      	ands	r3, r2
 800421c:	d009      	beq.n	8004232 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800421e:	4b14      	ldr	r3, [pc, #80]	@ (8004270 <HAL_RCC_ClockConfig+0x1f8>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	4a15      	ldr	r2, [pc, #84]	@ (8004278 <HAL_RCC_ClockConfig+0x200>)
 8004224:	4013      	ands	r3, r2
 8004226:	0019      	movs	r1, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	4b10      	ldr	r3, [pc, #64]	@ (8004270 <HAL_RCC_ClockConfig+0x1f8>)
 800422e:	430a      	orrs	r2, r1
 8004230:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004232:	f000 f829 	bl	8004288 <HAL_RCC_GetSysClockFreq>
 8004236:	0001      	movs	r1, r0
 8004238:	4b0d      	ldr	r3, [pc, #52]	@ (8004270 <HAL_RCC_ClockConfig+0x1f8>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	0a1b      	lsrs	r3, r3, #8
 800423e:	220f      	movs	r2, #15
 8004240:	401a      	ands	r2, r3
 8004242:	4b0e      	ldr	r3, [pc, #56]	@ (800427c <HAL_RCC_ClockConfig+0x204>)
 8004244:	0092      	lsls	r2, r2, #2
 8004246:	58d3      	ldr	r3, [r2, r3]
 8004248:	221f      	movs	r2, #31
 800424a:	4013      	ands	r3, r2
 800424c:	000a      	movs	r2, r1
 800424e:	40da      	lsrs	r2, r3
 8004250:	4b0b      	ldr	r3, [pc, #44]	@ (8004280 <HAL_RCC_ClockConfig+0x208>)
 8004252:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004254:	4b0b      	ldr	r3, [pc, #44]	@ (8004284 <HAL_RCC_ClockConfig+0x20c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	0018      	movs	r0, r3
 800425a:	f7fd fdb1 	bl	8001dc0 <HAL_InitTick>
 800425e:	0003      	movs	r3, r0
}
 8004260:	0018      	movs	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	b004      	add	sp, #16
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40022000 	.word	0x40022000
 800426c:	00001388 	.word	0x00001388
 8004270:	40021000 	.word	0x40021000
 8004274:	fffff0ff 	.word	0xfffff0ff
 8004278:	ffff8fff 	.word	0xffff8fff
 800427c:	08005f04 	.word	0x08005f04
 8004280:	20000048 	.word	0x20000048
 8004284:	2000004c 	.word	0x2000004c

08004288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800428e:	4b3c      	ldr	r3, [pc, #240]	@ (8004380 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2238      	movs	r2, #56	@ 0x38
 8004294:	4013      	ands	r3, r2
 8004296:	d10f      	bne.n	80042b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004298:	4b39      	ldr	r3, [pc, #228]	@ (8004380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	0adb      	lsrs	r3, r3, #11
 800429e:	2207      	movs	r2, #7
 80042a0:	4013      	ands	r3, r2
 80042a2:	2201      	movs	r2, #1
 80042a4:	409a      	lsls	r2, r3
 80042a6:	0013      	movs	r3, r2
 80042a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80042aa:	6839      	ldr	r1, [r7, #0]
 80042ac:	4835      	ldr	r0, [pc, #212]	@ (8004384 <HAL_RCC_GetSysClockFreq+0xfc>)
 80042ae:	f7fb ff29 	bl	8000104 <__udivsi3>
 80042b2:	0003      	movs	r3, r0
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	e05d      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042b8:	4b31      	ldr	r3, [pc, #196]	@ (8004380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	2238      	movs	r2, #56	@ 0x38
 80042be:	4013      	ands	r3, r2
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d102      	bne.n	80042ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042c4:	4b30      	ldr	r3, [pc, #192]	@ (8004388 <HAL_RCC_GetSysClockFreq+0x100>)
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	e054      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042ca:	4b2d      	ldr	r3, [pc, #180]	@ (8004380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2238      	movs	r2, #56	@ 0x38
 80042d0:	4013      	ands	r3, r2
 80042d2:	2b10      	cmp	r3, #16
 80042d4:	d138      	bne.n	8004348 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80042d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	2203      	movs	r2, #3
 80042dc:	4013      	ands	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042e0:	4b27      	ldr	r3, [pc, #156]	@ (8004380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	091b      	lsrs	r3, r3, #4
 80042e6:	2207      	movs	r2, #7
 80042e8:	4013      	ands	r3, r2
 80042ea:	3301      	adds	r3, #1
 80042ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d10d      	bne.n	8004310 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042f4:	68b9      	ldr	r1, [r7, #8]
 80042f6:	4824      	ldr	r0, [pc, #144]	@ (8004388 <HAL_RCC_GetSysClockFreq+0x100>)
 80042f8:	f7fb ff04 	bl	8000104 <__udivsi3>
 80042fc:	0003      	movs	r3, r0
 80042fe:	0019      	movs	r1, r3
 8004300:	4b1f      	ldr	r3, [pc, #124]	@ (8004380 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	0a1b      	lsrs	r3, r3, #8
 8004306:	227f      	movs	r2, #127	@ 0x7f
 8004308:	4013      	ands	r3, r2
 800430a:	434b      	muls	r3, r1
 800430c:	617b      	str	r3, [r7, #20]
        break;
 800430e:	e00d      	b.n	800432c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	481c      	ldr	r0, [pc, #112]	@ (8004384 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004314:	f7fb fef6 	bl	8000104 <__udivsi3>
 8004318:	0003      	movs	r3, r0
 800431a:	0019      	movs	r1, r3
 800431c:	4b18      	ldr	r3, [pc, #96]	@ (8004380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	0a1b      	lsrs	r3, r3, #8
 8004322:	227f      	movs	r2, #127	@ 0x7f
 8004324:	4013      	ands	r3, r2
 8004326:	434b      	muls	r3, r1
 8004328:	617b      	str	r3, [r7, #20]
        break;
 800432a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800432c:	4b14      	ldr	r3, [pc, #80]	@ (8004380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	0f5b      	lsrs	r3, r3, #29
 8004332:	2207      	movs	r2, #7
 8004334:	4013      	ands	r3, r2
 8004336:	3301      	adds	r3, #1
 8004338:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	6978      	ldr	r0, [r7, #20]
 800433e:	f7fb fee1 	bl	8000104 <__udivsi3>
 8004342:	0003      	movs	r3, r0
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	e015      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004348:	4b0d      	ldr	r3, [pc, #52]	@ (8004380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2238      	movs	r2, #56	@ 0x38
 800434e:	4013      	ands	r3, r2
 8004350:	2b20      	cmp	r3, #32
 8004352:	d103      	bne.n	800435c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004354:	2380      	movs	r3, #128	@ 0x80
 8004356:	021b      	lsls	r3, r3, #8
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	e00b      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800435c:	4b08      	ldr	r3, [pc, #32]	@ (8004380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2238      	movs	r2, #56	@ 0x38
 8004362:	4013      	ands	r3, r2
 8004364:	2b18      	cmp	r3, #24
 8004366:	d103      	bne.n	8004370 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004368:	23fa      	movs	r3, #250	@ 0xfa
 800436a:	01db      	lsls	r3, r3, #7
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	e001      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004374:	693b      	ldr	r3, [r7, #16]
}
 8004376:	0018      	movs	r0, r3
 8004378:	46bd      	mov	sp, r7
 800437a:	b006      	add	sp, #24
 800437c:	bd80      	pop	{r7, pc}
 800437e:	46c0      	nop			@ (mov r8, r8)
 8004380:	40021000 	.word	0x40021000
 8004384:	00f42400 	.word	0x00f42400
 8004388:	007a1200 	.word	0x007a1200

0800438c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004394:	2313      	movs	r3, #19
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	2200      	movs	r2, #0
 800439a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800439c:	2312      	movs	r3, #18
 800439e:	18fb      	adds	r3, r7, r3
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	2380      	movs	r3, #128	@ 0x80
 80043aa:	029b      	lsls	r3, r3, #10
 80043ac:	4013      	ands	r3, r2
 80043ae:	d100      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80043b0:	e0a3      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b2:	2011      	movs	r0, #17
 80043b4:	183b      	adds	r3, r7, r0
 80043b6:	2200      	movs	r2, #0
 80043b8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ba:	4ba5      	ldr	r3, [pc, #660]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043be:	2380      	movs	r3, #128	@ 0x80
 80043c0:	055b      	lsls	r3, r3, #21
 80043c2:	4013      	ands	r3, r2
 80043c4:	d110      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c6:	4ba2      	ldr	r3, [pc, #648]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043ca:	4ba1      	ldr	r3, [pc, #644]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043cc:	2180      	movs	r1, #128	@ 0x80
 80043ce:	0549      	lsls	r1, r1, #21
 80043d0:	430a      	orrs	r2, r1
 80043d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80043d4:	4b9e      	ldr	r3, [pc, #632]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043d8:	2380      	movs	r3, #128	@ 0x80
 80043da:	055b      	lsls	r3, r3, #21
 80043dc:	4013      	ands	r3, r2
 80043de:	60bb      	str	r3, [r7, #8]
 80043e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043e2:	183b      	adds	r3, r7, r0
 80043e4:	2201      	movs	r2, #1
 80043e6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043e8:	4b9a      	ldr	r3, [pc, #616]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	4b99      	ldr	r3, [pc, #612]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80043ee:	2180      	movs	r1, #128	@ 0x80
 80043f0:	0049      	lsls	r1, r1, #1
 80043f2:	430a      	orrs	r2, r1
 80043f4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043f6:	f7fd fd3f 	bl	8001e78 <HAL_GetTick>
 80043fa:	0003      	movs	r3, r0
 80043fc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043fe:	e00b      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004400:	f7fd fd3a 	bl	8001e78 <HAL_GetTick>
 8004404:	0002      	movs	r2, r0
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d904      	bls.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800440e:	2313      	movs	r3, #19
 8004410:	18fb      	adds	r3, r7, r3
 8004412:	2203      	movs	r2, #3
 8004414:	701a      	strb	r2, [r3, #0]
        break;
 8004416:	e005      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004418:	4b8e      	ldr	r3, [pc, #568]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	2380      	movs	r3, #128	@ 0x80
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	4013      	ands	r3, r2
 8004422:	d0ed      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004424:	2313      	movs	r3, #19
 8004426:	18fb      	adds	r3, r7, r3
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d154      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800442e:	4b88      	ldr	r3, [pc, #544]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004430:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004432:	23c0      	movs	r3, #192	@ 0xc0
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4013      	ands	r3, r2
 8004438:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d019      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	429a      	cmp	r2, r3
 8004448:	d014      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800444a:	4b81      	ldr	r3, [pc, #516]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800444c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800444e:	4a82      	ldr	r2, [pc, #520]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004450:	4013      	ands	r3, r2
 8004452:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004454:	4b7e      	ldr	r3, [pc, #504]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004456:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004458:	4b7d      	ldr	r3, [pc, #500]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800445a:	2180      	movs	r1, #128	@ 0x80
 800445c:	0249      	lsls	r1, r1, #9
 800445e:	430a      	orrs	r2, r1
 8004460:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004462:	4b7b      	ldr	r3, [pc, #492]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004464:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004466:	4b7a      	ldr	r3, [pc, #488]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004468:	497c      	ldr	r1, [pc, #496]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800446a:	400a      	ands	r2, r1
 800446c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800446e:	4b78      	ldr	r3, [pc, #480]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2201      	movs	r2, #1
 8004478:	4013      	ands	r3, r2
 800447a:	d016      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fd fcfc 	bl	8001e78 <HAL_GetTick>
 8004480:	0003      	movs	r3, r0
 8004482:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004484:	e00c      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004486:	f7fd fcf7 	bl	8001e78 <HAL_GetTick>
 800448a:	0002      	movs	r2, r0
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	4a73      	ldr	r2, [pc, #460]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d904      	bls.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004496:	2313      	movs	r3, #19
 8004498:	18fb      	adds	r3, r7, r3
 800449a:	2203      	movs	r2, #3
 800449c:	701a      	strb	r2, [r3, #0]
            break;
 800449e:	e004      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a4:	2202      	movs	r2, #2
 80044a6:	4013      	ands	r3, r2
 80044a8:	d0ed      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80044aa:	2313      	movs	r3, #19
 80044ac:	18fb      	adds	r3, r7, r3
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044b4:	4b66      	ldr	r3, [pc, #408]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b8:	4a67      	ldr	r2, [pc, #412]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	0019      	movs	r1, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044c2:	4b63      	ldr	r3, [pc, #396]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044c4:	430a      	orrs	r2, r1
 80044c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044c8:	e00c      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044ca:	2312      	movs	r3, #18
 80044cc:	18fb      	adds	r3, r7, r3
 80044ce:	2213      	movs	r2, #19
 80044d0:	18ba      	adds	r2, r7, r2
 80044d2:	7812      	ldrb	r2, [r2, #0]
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	e005      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d8:	2312      	movs	r3, #18
 80044da:	18fb      	adds	r3, r7, r3
 80044dc:	2213      	movs	r2, #19
 80044de:	18ba      	adds	r2, r7, r2
 80044e0:	7812      	ldrb	r2, [r2, #0]
 80044e2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044e4:	2311      	movs	r3, #17
 80044e6:	18fb      	adds	r3, r7, r3
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d105      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ee:	4b58      	ldr	r3, [pc, #352]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044f2:	4b57      	ldr	r3, [pc, #348]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044f4:	495b      	ldr	r1, [pc, #364]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80044f6:	400a      	ands	r2, r1
 80044f8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2201      	movs	r2, #1
 8004500:	4013      	ands	r3, r2
 8004502:	d009      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004504:	4b52      	ldr	r3, [pc, #328]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004508:	2203      	movs	r2, #3
 800450a:	4393      	bics	r3, r2
 800450c:	0019      	movs	r1, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	4b4f      	ldr	r3, [pc, #316]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004514:	430a      	orrs	r2, r1
 8004516:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2210      	movs	r2, #16
 800451e:	4013      	ands	r3, r2
 8004520:	d009      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004522:	4b4b      	ldr	r3, [pc, #300]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004526:	4a50      	ldr	r2, [pc, #320]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004528:	4013      	ands	r3, r2
 800452a:	0019      	movs	r1, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	4b47      	ldr	r3, [pc, #284]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004532:	430a      	orrs	r2, r1
 8004534:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	2380      	movs	r3, #128	@ 0x80
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4013      	ands	r3, r2
 8004540:	d009      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004542:	4b43      	ldr	r3, [pc, #268]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004546:	4a49      	ldr	r2, [pc, #292]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004548:	4013      	ands	r3, r2
 800454a:	0019      	movs	r1, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	695a      	ldr	r2, [r3, #20]
 8004550:	4b3f      	ldr	r3, [pc, #252]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004552:	430a      	orrs	r2, r1
 8004554:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	2380      	movs	r3, #128	@ 0x80
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	4013      	ands	r3, r2
 8004560:	d009      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004562:	4b3b      	ldr	r3, [pc, #236]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004566:	4a42      	ldr	r2, [pc, #264]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004568:	4013      	ands	r3, r2
 800456a:	0019      	movs	r1, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699a      	ldr	r2, [r3, #24]
 8004570:	4b37      	ldr	r3, [pc, #220]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004572:	430a      	orrs	r2, r1
 8004574:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2220      	movs	r2, #32
 800457c:	4013      	ands	r3, r2
 800457e:	d009      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004580:	4b33      	ldr	r3, [pc, #204]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004584:	4a3b      	ldr	r2, [pc, #236]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004586:	4013      	ands	r3, r2
 8004588:	0019      	movs	r1, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	4b30      	ldr	r3, [pc, #192]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004590:	430a      	orrs	r2, r1
 8004592:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	2380      	movs	r3, #128	@ 0x80
 800459a:	01db      	lsls	r3, r3, #7
 800459c:	4013      	ands	r3, r2
 800459e:	d015      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	0899      	lsrs	r1, r3, #2
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	4b28      	ldr	r3, [pc, #160]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045ae:	430a      	orrs	r2, r1
 80045b0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69da      	ldr	r2, [r3, #28]
 80045b6:	2380      	movs	r3, #128	@ 0x80
 80045b8:	05db      	lsls	r3, r3, #23
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d106      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80045be:	4b24      	ldr	r3, [pc, #144]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	4b23      	ldr	r3, [pc, #140]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045c4:	2180      	movs	r1, #128	@ 0x80
 80045c6:	0249      	lsls	r1, r1, #9
 80045c8:	430a      	orrs	r2, r1
 80045ca:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	2380      	movs	r3, #128	@ 0x80
 80045d2:	039b      	lsls	r3, r3, #14
 80045d4:	4013      	ands	r3, r2
 80045d6:	d016      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80045d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045dc:	4a26      	ldr	r2, [pc, #152]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80045de:	4013      	ands	r3, r2
 80045e0:	0019      	movs	r1, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1a      	ldr	r2, [r3, #32]
 80045e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045e8:	430a      	orrs	r2, r1
 80045ea:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1a      	ldr	r2, [r3, #32]
 80045f0:	2380      	movs	r3, #128	@ 0x80
 80045f2:	03db      	lsls	r3, r3, #15
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d106      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80045f8:	4b15      	ldr	r3, [pc, #84]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	4b14      	ldr	r3, [pc, #80]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045fe:	2180      	movs	r1, #128	@ 0x80
 8004600:	0449      	lsls	r1, r1, #17
 8004602:	430a      	orrs	r2, r1
 8004604:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	2380      	movs	r3, #128	@ 0x80
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	4013      	ands	r3, r2
 8004610:	d016      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004612:	4b0f      	ldr	r3, [pc, #60]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004616:	4a19      	ldr	r2, [pc, #100]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004618:	4013      	ands	r3, r2
 800461a:	0019      	movs	r1, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004622:	430a      	orrs	r2, r1
 8004624:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	2380      	movs	r3, #128	@ 0x80
 800462c:	01db      	lsls	r3, r3, #7
 800462e:	429a      	cmp	r2, r3
 8004630:	d106      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004632:	4b07      	ldr	r3, [pc, #28]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	4b06      	ldr	r3, [pc, #24]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004638:	2180      	movs	r1, #128	@ 0x80
 800463a:	0249      	lsls	r1, r1, #9
 800463c:	430a      	orrs	r2, r1
 800463e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004640:	2312      	movs	r3, #18
 8004642:	18fb      	adds	r3, r7, r3
 8004644:	781b      	ldrb	r3, [r3, #0]
}
 8004646:	0018      	movs	r0, r3
 8004648:	46bd      	mov	sp, r7
 800464a:	b006      	add	sp, #24
 800464c:	bd80      	pop	{r7, pc}
 800464e:	46c0      	nop			@ (mov r8, r8)
 8004650:	40021000 	.word	0x40021000
 8004654:	40007000 	.word	0x40007000
 8004658:	fffffcff 	.word	0xfffffcff
 800465c:	fffeffff 	.word	0xfffeffff
 8004660:	00001388 	.word	0x00001388
 8004664:	efffffff 	.word	0xefffffff
 8004668:	fffff3ff 	.word	0xfffff3ff
 800466c:	fff3ffff 	.word	0xfff3ffff
 8004670:	ffcfffff 	.word	0xffcfffff
 8004674:	ffffcfff 	.word	0xffffcfff
 8004678:	ffbfffff 	.word	0xffbfffff
 800467c:	ffff3fff 	.word	0xffff3fff

08004680 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004680:	b5b0      	push	{r4, r5, r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004688:	230f      	movs	r3, #15
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	2201      	movs	r2, #1
 800468e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d100      	bne.n	8004698 <HAL_RTC_Init+0x18>
 8004696:	e08c      	b.n	80047b2 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2229      	movs	r2, #41	@ 0x29
 800469c:	5c9b      	ldrb	r3, [r3, r2]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10b      	bne.n	80046bc <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2228      	movs	r2, #40	@ 0x28
 80046a8:	2100      	movs	r1, #0
 80046aa:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2288      	movs	r2, #136	@ 0x88
 80046b0:	0212      	lsls	r2, r2, #8
 80046b2:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	0018      	movs	r0, r3
 80046b8:	f7fd fa2e 	bl	8001b18 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2229      	movs	r2, #41	@ 0x29
 80046c0:	2102      	movs	r1, #2
 80046c2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	2210      	movs	r2, #16
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b10      	cmp	r3, #16
 80046d0:	d062      	beq.n	8004798 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	22ca      	movs	r2, #202	@ 0xca
 80046d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2253      	movs	r2, #83	@ 0x53
 80046e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80046e2:	250f      	movs	r5, #15
 80046e4:	197c      	adds	r4, r7, r5
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	0018      	movs	r0, r3
 80046ea:	f000 fbf3 	bl	8004ed4 <RTC_EnterInitMode>
 80046ee:	0003      	movs	r3, r0
 80046f0:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80046f2:	0028      	movs	r0, r5
 80046f4:	183b      	adds	r3, r7, r0
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d12c      	bne.n	8004756 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	492e      	ldr	r1, [pc, #184]	@ (80047c0 <HAL_RTC_Init+0x140>)
 8004708:	400a      	ands	r2, r1
 800470a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6999      	ldr	r1, [r3, #24]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6912      	ldr	r2, [r2, #16]
 8004732:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6919      	ldr	r1, [r3, #16]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	041a      	lsls	r2, r3, #16
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004748:	183c      	adds	r4, r7, r0
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	0018      	movs	r0, r3
 800474e:	f000 fc03 	bl	8004f58 <RTC_ExitInitMode>
 8004752:	0003      	movs	r3, r0
 8004754:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004756:	230f      	movs	r3, #15
 8004758:	18fb      	adds	r3, r7, r3
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d116      	bne.n	800478e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	00d2      	lsls	r2, r2, #3
 800476c:	08d2      	lsrs	r2, r2, #3
 800476e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6999      	ldr	r1, [r3, #24]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	22ff      	movs	r2, #255	@ 0xff
 8004794:	625a      	str	r2, [r3, #36]	@ 0x24
 8004796:	e003      	b.n	80047a0 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004798:	230f      	movs	r3, #15
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	2200      	movs	r2, #0
 800479e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80047a0:	230f      	movs	r3, #15
 80047a2:	18fb      	adds	r3, r7, r3
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d103      	bne.n	80047b2 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2229      	movs	r2, #41	@ 0x29
 80047ae:	2101      	movs	r1, #1
 80047b0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80047b2:	230f      	movs	r3, #15
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	781b      	ldrb	r3, [r3, #0]
}
 80047b8:	0018      	movs	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	b004      	add	sp, #16
 80047be:	bdb0      	pop	{r4, r5, r7, pc}
 80047c0:	fb8fffbf 	.word	0xfb8fffbf

080047c4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047c4:	b5b0      	push	{r4, r5, r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2228      	movs	r2, #40	@ 0x28
 80047d4:	5c9b      	ldrb	r3, [r3, r2]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_RTC_SetTime+0x1a>
 80047da:	2302      	movs	r3, #2
 80047dc:	e092      	b.n	8004904 <HAL_RTC_SetTime+0x140>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2228      	movs	r2, #40	@ 0x28
 80047e2:	2101      	movs	r1, #1
 80047e4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2229      	movs	r2, #41	@ 0x29
 80047ea:	2102      	movs	r1, #2
 80047ec:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	22ca      	movs	r2, #202	@ 0xca
 80047f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2253      	movs	r2, #83	@ 0x53
 80047fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80047fe:	2513      	movs	r5, #19
 8004800:	197c      	adds	r4, r7, r5
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	0018      	movs	r0, r3
 8004806:	f000 fb65 	bl	8004ed4 <RTC_EnterInitMode>
 800480a:	0003      	movs	r3, r0
 800480c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800480e:	197b      	adds	r3, r7, r5
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d162      	bne.n	80048dc <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d125      	bne.n	8004868 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2240      	movs	r2, #64	@ 0x40
 8004824:	4013      	ands	r3, r2
 8004826:	d102      	bne.n	800482e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2200      	movs	r2, #0
 800482c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	0018      	movs	r0, r3
 8004834:	f000 fbd4 	bl	8004fe0 <RTC_ByteToBcd2>
 8004838:	0003      	movs	r3, r0
 800483a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	785b      	ldrb	r3, [r3, #1]
 8004840:	0018      	movs	r0, r3
 8004842:	f000 fbcd 	bl	8004fe0 <RTC_ByteToBcd2>
 8004846:	0003      	movs	r3, r0
 8004848:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800484a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	789b      	ldrb	r3, [r3, #2]
 8004850:	0018      	movs	r0, r3
 8004852:	f000 fbc5 	bl	8004fe0 <RTC_ByteToBcd2>
 8004856:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004858:	0022      	movs	r2, r4
 800485a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	78db      	ldrb	r3, [r3, #3]
 8004860:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	e017      	b.n	8004898 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2240      	movs	r2, #64	@ 0x40
 8004870:	4013      	ands	r3, r2
 8004872:	d102      	bne.n	800487a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2200      	movs	r2, #0
 8004878:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	785b      	ldrb	r3, [r3, #1]
 8004884:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004886:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800488c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	78db      	ldrb	r3, [r3, #3]
 8004892:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	491b      	ldr	r1, [pc, #108]	@ (800490c <HAL_RTC_SetTime+0x148>)
 80048a0:	400a      	ands	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699a      	ldr	r2, [r3, #24]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4918      	ldr	r1, [pc, #96]	@ (8004910 <HAL_RTC_SetTime+0x14c>)
 80048b0:	400a      	ands	r2, r1
 80048b2:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6999      	ldr	r1, [r3, #24]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80048cc:	2313      	movs	r3, #19
 80048ce:	18fc      	adds	r4, r7, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	0018      	movs	r0, r3
 80048d4:	f000 fb40 	bl	8004f58 <RTC_ExitInitMode>
 80048d8:	0003      	movs	r3, r0
 80048da:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	22ff      	movs	r2, #255	@ 0xff
 80048e2:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 80048e4:	2313      	movs	r3, #19
 80048e6:	18fb      	adds	r3, r7, r3
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d103      	bne.n	80048f6 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2229      	movs	r2, #41	@ 0x29
 80048f2:	2101      	movs	r1, #1
 80048f4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2228      	movs	r2, #40	@ 0x28
 80048fa:	2100      	movs	r1, #0
 80048fc:	5499      	strb	r1, [r3, r2]

  return status;
 80048fe:	2313      	movs	r3, #19
 8004900:	18fb      	adds	r3, r7, r3
 8004902:	781b      	ldrb	r3, [r3, #0]
}
 8004904:	0018      	movs	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	b006      	add	sp, #24
 800490a:	bdb0      	pop	{r4, r5, r7, pc}
 800490c:	007f7f7f 	.word	0x007f7f7f
 8004910:	fffbffff 	.word	0xfffbffff

08004914 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	045b      	lsls	r3, r3, #17
 8004932:	0c5a      	lsrs	r2, r3, #17
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a22      	ldr	r2, [pc, #136]	@ (80049c8 <HAL_RTC_GetTime+0xb4>)
 8004940:	4013      	ands	r3, r2
 8004942:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	0c1b      	lsrs	r3, r3, #16
 8004948:	b2db      	uxtb	r3, r3
 800494a:	223f      	movs	r2, #63	@ 0x3f
 800494c:	4013      	ands	r3, r2
 800494e:	b2da      	uxtb	r2, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	0a1b      	lsrs	r3, r3, #8
 8004958:	b2db      	uxtb	r3, r3
 800495a:	227f      	movs	r2, #127	@ 0x7f
 800495c:	4013      	ands	r3, r2
 800495e:	b2da      	uxtb	r2, r3
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	227f      	movs	r2, #127	@ 0x7f
 800496a:	4013      	ands	r3, r2
 800496c:	b2da      	uxtb	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	0d9b      	lsrs	r3, r3, #22
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2201      	movs	r2, #1
 800497a:	4013      	ands	r3, r2
 800497c:	b2da      	uxtb	r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d11a      	bne.n	80049be <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	0018      	movs	r0, r3
 800498e:	f000 fb4f 	bl	8005030 <RTC_Bcd2ToByte>
 8004992:	0003      	movs	r3, r0
 8004994:	001a      	movs	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	785b      	ldrb	r3, [r3, #1]
 800499e:	0018      	movs	r0, r3
 80049a0:	f000 fb46 	bl	8005030 <RTC_Bcd2ToByte>
 80049a4:	0003      	movs	r3, r0
 80049a6:	001a      	movs	r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	789b      	ldrb	r3, [r3, #2]
 80049b0:	0018      	movs	r0, r3
 80049b2:	f000 fb3d 	bl	8005030 <RTC_Bcd2ToByte>
 80049b6:	0003      	movs	r3, r0
 80049b8:	001a      	movs	r2, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	0018      	movs	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b006      	add	sp, #24
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	007f7f7f 	.word	0x007f7f7f

080049cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80049cc:	b5b0      	push	{r4, r5, r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2228      	movs	r2, #40	@ 0x28
 80049dc:	5c9b      	ldrb	r3, [r3, r2]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_RTC_SetDate+0x1a>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e07e      	b.n	8004ae4 <HAL_RTC_SetDate+0x118>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2228      	movs	r2, #40	@ 0x28
 80049ea:	2101      	movs	r1, #1
 80049ec:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2229      	movs	r2, #41	@ 0x29
 80049f2:	2102      	movs	r1, #2
 80049f4:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10e      	bne.n	8004a1a <HAL_RTC_SetDate+0x4e>
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	785b      	ldrb	r3, [r3, #1]
 8004a00:	001a      	movs	r2, r3
 8004a02:	2310      	movs	r3, #16
 8004a04:	4013      	ands	r3, r2
 8004a06:	d008      	beq.n	8004a1a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	785b      	ldrb	r3, [r3, #1]
 8004a0c:	2210      	movs	r2, #16
 8004a0e:	4393      	bics	r3, r2
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	330a      	adds	r3, #10
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d11c      	bne.n	8004a5a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	78db      	ldrb	r3, [r3, #3]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f000 fadb 	bl	8004fe0 <RTC_ByteToBcd2>
 8004a2a:	0003      	movs	r3, r0
 8004a2c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	785b      	ldrb	r3, [r3, #1]
 8004a32:	0018      	movs	r0, r3
 8004a34:	f000 fad4 	bl	8004fe0 <RTC_ByteToBcd2>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a3c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	789b      	ldrb	r3, [r3, #2]
 8004a42:	0018      	movs	r0, r3
 8004a44:	f000 facc 	bl	8004fe0 <RTC_ByteToBcd2>
 8004a48:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004a4a:	0022      	movs	r2, r4
 8004a4c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a54:	4313      	orrs	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	e00e      	b.n	8004a78 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	78db      	ldrb	r3, [r3, #3]
 8004a5e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	785b      	ldrb	r3, [r3, #1]
 8004a64:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004a66:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004a6c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	22ca      	movs	r2, #202	@ 0xca
 8004a7e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2253      	movs	r2, #83	@ 0x53
 8004a86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a88:	2513      	movs	r5, #19
 8004a8a:	197c      	adds	r4, r7, r5
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f000 fa20 	bl	8004ed4 <RTC_EnterInitMode>
 8004a94:	0003      	movs	r3, r0
 8004a96:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004a98:	0028      	movs	r0, r5
 8004a9a:	183b      	adds	r3, r7, r0
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10c      	bne.n	8004abc <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4910      	ldr	r1, [pc, #64]	@ (8004aec <HAL_RTC_SetDate+0x120>)
 8004aaa:	400a      	ands	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004aae:	183c      	adds	r4, r7, r0
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f000 fa50 	bl	8004f58 <RTC_ExitInitMode>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	22ff      	movs	r2, #255	@ 0xff
 8004ac2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004ac4:	2313      	movs	r3, #19
 8004ac6:	18fb      	adds	r3, r7, r3
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d103      	bne.n	8004ad6 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2229      	movs	r2, #41	@ 0x29
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2228      	movs	r2, #40	@ 0x28
 8004ada:	2100      	movs	r1, #0
 8004adc:	5499      	strb	r1, [r3, r2]

  return status;
 8004ade:	2313      	movs	r3, #19
 8004ae0:	18fb      	adds	r3, r7, r3
 8004ae2:	781b      	ldrb	r3, [r3, #0]
}
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b006      	add	sp, #24
 8004aea:	bdb0      	pop	{r4, r5, r7, pc}
 8004aec:	00ffff3f 	.word	0x00ffff3f

08004af0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4a21      	ldr	r2, [pc, #132]	@ (8004b88 <HAL_RTC_GetDate+0x98>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	0c1b      	lsrs	r3, r3, #16
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	0a1b      	lsrs	r3, r3, #8
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	221f      	movs	r2, #31
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	223f      	movs	r2, #63	@ 0x3f
 8004b28:	4013      	ands	r3, r2
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	0b5b      	lsrs	r3, r3, #13
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2207      	movs	r2, #7
 8004b38:	4013      	ands	r3, r2
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d11a      	bne.n	8004b7c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	78db      	ldrb	r3, [r3, #3]
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	f000 fa70 	bl	8005030 <RTC_Bcd2ToByte>
 8004b50:	0003      	movs	r3, r0
 8004b52:	001a      	movs	r2, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	785b      	ldrb	r3, [r3, #1]
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f000 fa67 	bl	8005030 <RTC_Bcd2ToByte>
 8004b62:	0003      	movs	r3, r0
 8004b64:	001a      	movs	r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	789b      	ldrb	r3, [r3, #2]
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f000 fa5e 	bl	8005030 <RTC_Bcd2ToByte>
 8004b74:	0003      	movs	r3, r0
 8004b76:	001a      	movs	r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	0018      	movs	r0, r3
 8004b80:	46bd      	mov	sp, r7
 8004b82:	b006      	add	sp, #24
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	46c0      	nop			@ (mov r8, r8)
 8004b88:	00ffff3f 	.word	0x00ffff3f

08004b8c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004b8c:	b590      	push	{r4, r7, lr}
 8004b8e:	b089      	sub	sp, #36	@ 0x24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2228      	movs	r2, #40	@ 0x28
 8004b9c:	5c9b      	ldrb	r3, [r3, r2]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_RTC_SetAlarm_IT+0x1a>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e127      	b.n	8004df6 <HAL_RTC_SetAlarm_IT+0x26a>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2228      	movs	r2, #40	@ 0x28
 8004baa:	2101      	movs	r1, #1
 8004bac:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2229      	movs	r2, #41	@ 0x29
 8004bb2:	2102      	movs	r1, #2
 8004bb4:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d136      	bne.n	8004c2a <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	2240      	movs	r2, #64	@ 0x40
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d102      	bne.n	8004bce <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f000 fa04 	bl	8004fe0 <RTC_ByteToBcd2>
 8004bd8:	0003      	movs	r3, r0
 8004bda:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	785b      	ldrb	r3, [r3, #1]
 8004be0:	0018      	movs	r0, r3
 8004be2:	f000 f9fd 	bl	8004fe0 <RTC_ByteToBcd2>
 8004be6:	0003      	movs	r3, r0
 8004be8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004bea:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	789b      	ldrb	r3, [r3, #2]
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f000 f9f5 	bl	8004fe0 <RTC_ByteToBcd2>
 8004bf6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004bf8:	0022      	movs	r2, r4
 8004bfa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	78db      	ldrb	r3, [r3, #3]
 8004c00:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004c02:	431a      	orrs	r2, r3
 8004c04:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	5c9b      	ldrb	r3, [r3, r2]
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f000 f9e7 	bl	8004fe0 <RTC_ByteToBcd2>
 8004c12:	0003      	movs	r3, r0
 8004c14:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004c16:	0022      	movs	r2, r4
 8004c18:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004c1e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c24:	4313      	orrs	r3, r2
 8004c26:	61fb      	str	r3, [r7, #28]
 8004c28:	e022      	b.n	8004c70 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	2240      	movs	r2, #64	@ 0x40
 8004c32:	4013      	ands	r3, r2
 8004c34:	d102      	bne.n	8004c3c <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	785b      	ldrb	r3, [r3, #1]
 8004c46:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c48:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004c4e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	78db      	ldrb	r3, [r3, #3]
 8004c54:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004c56:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2120      	movs	r1, #32
 8004c5c:	5c5b      	ldrb	r3, [r3, r1]
 8004c5e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004c60:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004c66:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	22ca      	movs	r2, #202	@ 0xca
 8004c82:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2253      	movs	r2, #83	@ 0x53
 8004c8a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c90:	2380      	movs	r3, #128	@ 0x80
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d14c      	bne.n	8004d32 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699a      	ldr	r2, [r3, #24]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4957      	ldr	r1, [pc, #348]	@ (8004e00 <HAL_RTC_SetAlarm_IT+0x274>)
 8004ca4:	400a      	ands	r2, r1
 8004ca6:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004cb8:	f7fd f8de 	bl	8001e78 <HAL_GetTick>
 8004cbc:	0003      	movs	r3, r0
 8004cbe:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004cc0:	e016      	b.n	8004cf0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004cc2:	f7fd f8d9 	bl	8001e78 <HAL_GetTick>
 8004cc6:	0002      	movs	r2, r0
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	1ad2      	subs	r2, r2, r3
 8004ccc:	23fa      	movs	r3, #250	@ 0xfa
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d90d      	bls.n	8004cf0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	22ff      	movs	r2, #255	@ 0xff
 8004cda:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2229      	movs	r2, #41	@ 0x29
 8004ce0:	2103      	movs	r1, #3
 8004ce2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2228      	movs	r2, #40	@ 0x28
 8004ce8:	2100      	movs	r1, #0
 8004cea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e082      	b.n	8004df6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	d0e2      	beq.n	8004cc2 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69fa      	ldr	r2, [r7, #28]
 8004d02:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2180      	movs	r1, #128	@ 0x80
 8004d18:	0049      	lsls	r1, r1, #1
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699a      	ldr	r2, [r3, #24]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2180      	movs	r1, #128	@ 0x80
 8004d2a:	0149      	lsls	r1, r1, #5
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	619a      	str	r2, [r3, #24]
 8004d30:	e04b      	b.n	8004dca <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	699a      	ldr	r2, [r3, #24]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4931      	ldr	r1, [pc, #196]	@ (8004e04 <HAL_RTC_SetAlarm_IT+0x278>)
 8004d3e:	400a      	ands	r2, r1
 8004d40:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2102      	movs	r1, #2
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004d52:	f7fd f891 	bl	8001e78 <HAL_GetTick>
 8004d56:	0003      	movs	r3, r0
 8004d58:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004d5a:	e016      	b.n	8004d8a <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d5c:	f7fd f88c 	bl	8001e78 <HAL_GetTick>
 8004d60:	0002      	movs	r2, r0
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	1ad2      	subs	r2, r2, r3
 8004d66:	23fa      	movs	r3, #250	@ 0xfa
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d90d      	bls.n	8004d8a <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	22ff      	movs	r2, #255	@ 0xff
 8004d74:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2229      	movs	r2, #41	@ 0x29
 8004d7a:	2103      	movs	r1, #3
 8004d7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2228      	movs	r2, #40	@ 0x28
 8004d82:	2100      	movs	r1, #0
 8004d84:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e035      	b.n	8004df6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	2202      	movs	r2, #2
 8004d92:	4013      	ands	r3, r2
 8004d94:	d0e2      	beq.n	8004d5c <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	699a      	ldr	r2, [r3, #24]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2180      	movs	r1, #128	@ 0x80
 8004db2:	0089      	lsls	r1, r1, #2
 8004db4:	430a      	orrs	r2, r1
 8004db6:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2180      	movs	r1, #128	@ 0x80
 8004dc4:	0189      	lsls	r1, r1, #6
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004dca:	4a0f      	ldr	r2, [pc, #60]	@ (8004e08 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004dcc:	2380      	movs	r3, #128	@ 0x80
 8004dce:	58d3      	ldr	r3, [r2, r3]
 8004dd0:	490d      	ldr	r1, [pc, #52]	@ (8004e08 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004dd2:	2280      	movs	r2, #128	@ 0x80
 8004dd4:	0312      	lsls	r2, r2, #12
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	2280      	movs	r2, #128	@ 0x80
 8004dda:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	22ff      	movs	r2, #255	@ 0xff
 8004de2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2229      	movs	r2, #41	@ 0x29
 8004de8:	2101      	movs	r1, #1
 8004dea:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2228      	movs	r2, #40	@ 0x28
 8004df0:	2100      	movs	r1, #0
 8004df2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	0018      	movs	r0, r3
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	b009      	add	sp, #36	@ 0x24
 8004dfc:	bd90      	pop	{r4, r7, pc}
 8004dfe:	46c0      	nop			@ (mov r8, r8)
 8004e00:	fffffeff 	.word	0xfffffeff
 8004e04:	fffffdff 	.word	0xfffffdff
 8004e08:	40021800 	.word	0x40021800

08004e0c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699a      	ldr	r2, [r3, #24]
 8004e1a:	2380      	movs	r3, #128	@ 0x80
 8004e1c:	015b      	lsls	r3, r3, #5
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d011      	beq.n	8004e46 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e28:	2201      	movs	r2, #1
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	d00b      	beq.n	8004e46 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2101      	movs	r1, #1
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	0018      	movs	r0, r3
 8004e42:	f7fc f84b 	bl	8000edc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	2380      	movs	r3, #128	@ 0x80
 8004e4e:	019b      	lsls	r3, r3, #6
 8004e50:	4013      	ands	r3, r2
 8004e52:	d011      	beq.n	8004e78 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d00b      	beq.n	8004e78 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2102      	movs	r1, #2
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	0018      	movs	r0, r3
 8004e74:	f000 f942 	bl	80050fc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2229      	movs	r2, #41	@ 0x29
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	5499      	strb	r1, [r3, r2]
}
 8004e80:	46c0      	nop			@ (mov r8, r8)
 8004e82:	46bd      	mov	sp, r7
 8004e84:	b002      	add	sp, #8
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a0e      	ldr	r2, [pc, #56]	@ (8004ed0 <HAL_RTC_WaitForSynchro+0x48>)
 8004e96:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004e98:	f7fc ffee 	bl	8001e78 <HAL_GetTick>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004ea0:	e00a      	b.n	8004eb8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004ea2:	f7fc ffe9 	bl	8001e78 <HAL_GetTick>
 8004ea6:	0002      	movs	r2, r0
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	1ad2      	subs	r2, r2, r3
 8004eac:	23fa      	movs	r3, #250	@ 0xfa
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e006      	b.n	8004ec6 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	d0ee      	beq.n	8004ea2 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	b004      	add	sp, #16
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	46c0      	nop			@ (mov r8, r8)
 8004ed0:	0001005f 	.word	0x0001005f

08004ed4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004edc:	230f      	movs	r3, #15
 8004ede:	18fb      	adds	r3, r7, r3
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	2240      	movs	r2, #64	@ 0x40
 8004eec:	4013      	ands	r3, r2
 8004eee:	d12c      	bne.n	8004f4a <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2180      	movs	r1, #128	@ 0x80
 8004efc:	430a      	orrs	r2, r1
 8004efe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004f00:	f7fc ffba 	bl	8001e78 <HAL_GetTick>
 8004f04:	0003      	movs	r3, r0
 8004f06:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f08:	e014      	b.n	8004f34 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f0a:	f7fc ffb5 	bl	8001e78 <HAL_GetTick>
 8004f0e:	0002      	movs	r2, r0
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	1ad2      	subs	r2, r2, r3
 8004f14:	200f      	movs	r0, #15
 8004f16:	183b      	adds	r3, r7, r0
 8004f18:	1839      	adds	r1, r7, r0
 8004f1a:	7809      	ldrb	r1, [r1, #0]
 8004f1c:	7019      	strb	r1, [r3, #0]
 8004f1e:	23fa      	movs	r3, #250	@ 0xfa
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d906      	bls.n	8004f34 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004f26:	183b      	adds	r3, r7, r0
 8004f28:	2203      	movs	r2, #3
 8004f2a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2229      	movs	r2, #41	@ 0x29
 8004f30:	2103      	movs	r1, #3
 8004f32:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	2240      	movs	r2, #64	@ 0x40
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	d104      	bne.n	8004f4a <RTC_EnterInitMode+0x76>
 8004f40:	230f      	movs	r3, #15
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d1df      	bne.n	8004f0a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004f4a:	230f      	movs	r3, #15
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	781b      	ldrb	r3, [r3, #0]
}
 8004f50:	0018      	movs	r0, r3
 8004f52:	46bd      	mov	sp, r7
 8004f54:	b004      	add	sp, #16
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f58:	b590      	push	{r4, r7, lr}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f60:	240f      	movs	r4, #15
 8004f62:	193b      	adds	r3, r7, r4
 8004f64:	2200      	movs	r2, #0
 8004f66:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004f68:	4b1c      	ldr	r3, [pc, #112]	@ (8004fdc <RTC_ExitInitMode+0x84>)
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fdc <RTC_ExitInitMode+0x84>)
 8004f6e:	2180      	movs	r1, #128	@ 0x80
 8004f70:	438a      	bics	r2, r1
 8004f72:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004f74:	4b19      	ldr	r3, [pc, #100]	@ (8004fdc <RTC_ExitInitMode+0x84>)
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d10d      	bne.n	8004f9a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	0018      	movs	r0, r3
 8004f82:	f7ff ff81 	bl	8004e88 <HAL_RTC_WaitForSynchro>
 8004f86:	1e03      	subs	r3, r0, #0
 8004f88:	d021      	beq.n	8004fce <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2229      	movs	r2, #41	@ 0x29
 8004f8e:	2103      	movs	r1, #3
 8004f90:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004f92:	193b      	adds	r3, r7, r4
 8004f94:	2203      	movs	r2, #3
 8004f96:	701a      	strb	r2, [r3, #0]
 8004f98:	e019      	b.n	8004fce <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f9a:	4b10      	ldr	r3, [pc, #64]	@ (8004fdc <RTC_ExitInitMode+0x84>)
 8004f9c:	699a      	ldr	r2, [r3, #24]
 8004f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8004fdc <RTC_ExitInitMode+0x84>)
 8004fa0:	2120      	movs	r1, #32
 8004fa2:	438a      	bics	r2, r1
 8004fa4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	0018      	movs	r0, r3
 8004faa:	f7ff ff6d 	bl	8004e88 <HAL_RTC_WaitForSynchro>
 8004fae:	1e03      	subs	r3, r0, #0
 8004fb0:	d007      	beq.n	8004fc2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2229      	movs	r2, #41	@ 0x29
 8004fb6:	2103      	movs	r1, #3
 8004fb8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004fba:	230f      	movs	r3, #15
 8004fbc:	18fb      	adds	r3, r7, r3
 8004fbe:	2203      	movs	r2, #3
 8004fc0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004fc2:	4b06      	ldr	r3, [pc, #24]	@ (8004fdc <RTC_ExitInitMode+0x84>)
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	4b05      	ldr	r3, [pc, #20]	@ (8004fdc <RTC_ExitInitMode+0x84>)
 8004fc8:	2120      	movs	r1, #32
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004fce:	230f      	movs	r3, #15
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	781b      	ldrb	r3, [r3, #0]
}
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b005      	add	sp, #20
 8004fda:	bd90      	pop	{r4, r7, pc}
 8004fdc:	40002800 	.word	0x40002800

08004fe0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	0002      	movs	r2, r0
 8004fe8:	1dfb      	adds	r3, r7, #7
 8004fea:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004ff0:	230b      	movs	r3, #11
 8004ff2:	18fb      	adds	r3, r7, r3
 8004ff4:	1dfa      	adds	r2, r7, #7
 8004ff6:	7812      	ldrb	r2, [r2, #0]
 8004ff8:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004ffa:	e008      	b.n	800500e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	3301      	adds	r3, #1
 8005000:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005002:	220b      	movs	r2, #11
 8005004:	18bb      	adds	r3, r7, r2
 8005006:	18ba      	adds	r2, r7, r2
 8005008:	7812      	ldrb	r2, [r2, #0]
 800500a:	3a0a      	subs	r2, #10
 800500c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800500e:	210b      	movs	r1, #11
 8005010:	187b      	adds	r3, r7, r1
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b09      	cmp	r3, #9
 8005016:	d8f1      	bhi.n	8004ffc <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	b2db      	uxtb	r3, r3
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	b2da      	uxtb	r2, r3
 8005020:	187b      	adds	r3, r7, r1
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	4313      	orrs	r3, r2
 8005026:	b2db      	uxtb	r3, r3
}
 8005028:	0018      	movs	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	b004      	add	sp, #16
 800502e:	bd80      	pop	{r7, pc}

08005030 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	0002      	movs	r2, r0
 8005038:	1dfb      	adds	r3, r7, #7
 800503a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800503c:	1dfb      	adds	r3, r7, #7
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	091b      	lsrs	r3, r3, #4
 8005042:	b2db      	uxtb	r3, r3
 8005044:	001a      	movs	r2, r3
 8005046:	0013      	movs	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	189b      	adds	r3, r3, r2
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	b2da      	uxtb	r2, r3
 8005054:	1dfb      	adds	r3, r7, #7
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	210f      	movs	r1, #15
 800505a:	400b      	ands	r3, r1
 800505c:	b2db      	uxtb	r3, r3
 800505e:	18d3      	adds	r3, r2, r3
 8005060:	b2db      	uxtb	r3, r3
}
 8005062:	0018      	movs	r0, r3
 8005064:	46bd      	mov	sp, r7
 8005066:	b004      	add	sp, #16
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2228      	movs	r2, #40	@ 0x28
 800507a:	5c9b      	ldrb	r3, [r3, r2]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8005080:	2302      	movs	r3, #2
 8005082:	e035      	b.n	80050f0 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2228      	movs	r2, #40	@ 0x28
 8005088:	2101      	movs	r1, #1
 800508a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2229      	movs	r2, #41	@ 0x29
 8005090:	2102      	movs	r1, #2
 8005092:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	22ca      	movs	r2, #202	@ 0xca
 800509a:	625a      	str	r2, [r3, #36]	@ 0x24
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2253      	movs	r2, #83	@ 0x53
 80050a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699a      	ldr	r2, [r3, #24]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4912      	ldr	r1, [pc, #72]	@ (80050f8 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 80050b0:	400a      	ands	r2, r1
 80050b2:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6999      	ldr	r1, [r3, #24]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699a      	ldr	r2, [r3, #24]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2180      	movs	r1, #128	@ 0x80
 80050d0:	0409      	lsls	r1, r1, #16
 80050d2:	430a      	orrs	r2, r1
 80050d4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	22ff      	movs	r2, #255	@ 0xff
 80050dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2229      	movs	r2, #41	@ 0x29
 80050e2:	2101      	movs	r1, #1
 80050e4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2228      	movs	r2, #40	@ 0x28
 80050ea:	2100      	movs	r1, #0
 80050ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	0018      	movs	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	b002      	add	sp, #8
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	fff7ffff 	.word	0xfff7ffff

080050fc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005104:	46c0      	nop			@ (mov r8, r8)
 8005106:	46bd      	mov	sp, r7
 8005108:	b002      	add	sp, #8
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e04a      	b.n	80051b4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	223d      	movs	r2, #61	@ 0x3d
 8005122:	5c9b      	ldrb	r3, [r3, r2]
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d107      	bne.n	800513a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	223c      	movs	r2, #60	@ 0x3c
 800512e:	2100      	movs	r1, #0
 8005130:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	0018      	movs	r0, r3
 8005136:	f7fc fd51 	bl	8001bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	223d      	movs	r2, #61	@ 0x3d
 800513e:	2102      	movs	r1, #2
 8005140:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	3304      	adds	r3, #4
 800514a:	0019      	movs	r1, r3
 800514c:	0010      	movs	r0, r2
 800514e:	f000 fadd 	bl	800570c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2248      	movs	r2, #72	@ 0x48
 8005156:	2101      	movs	r1, #1
 8005158:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	223e      	movs	r2, #62	@ 0x3e
 800515e:	2101      	movs	r1, #1
 8005160:	5499      	strb	r1, [r3, r2]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	223f      	movs	r2, #63	@ 0x3f
 8005166:	2101      	movs	r1, #1
 8005168:	5499      	strb	r1, [r3, r2]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2240      	movs	r2, #64	@ 0x40
 800516e:	2101      	movs	r1, #1
 8005170:	5499      	strb	r1, [r3, r2]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2241      	movs	r2, #65	@ 0x41
 8005176:	2101      	movs	r1, #1
 8005178:	5499      	strb	r1, [r3, r2]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2242      	movs	r2, #66	@ 0x42
 800517e:	2101      	movs	r1, #1
 8005180:	5499      	strb	r1, [r3, r2]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2243      	movs	r2, #67	@ 0x43
 8005186:	2101      	movs	r1, #1
 8005188:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2244      	movs	r2, #68	@ 0x44
 800518e:	2101      	movs	r1, #1
 8005190:	5499      	strb	r1, [r3, r2]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2245      	movs	r2, #69	@ 0x45
 8005196:	2101      	movs	r1, #1
 8005198:	5499      	strb	r1, [r3, r2]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2246      	movs	r2, #70	@ 0x46
 800519e:	2101      	movs	r1, #1
 80051a0:	5499      	strb	r1, [r3, r2]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2247      	movs	r2, #71	@ 0x47
 80051a6:	2101      	movs	r1, #1
 80051a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	223d      	movs	r2, #61	@ 0x3d
 80051ae:	2101      	movs	r1, #1
 80051b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	0018      	movs	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	b002      	add	sp, #8
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	223d      	movs	r2, #61	@ 0x3d
 80051c8:	5c9b      	ldrb	r3, [r3, r2]
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d001      	beq.n	80051d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e035      	b.n	8005240 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	223d      	movs	r2, #61	@ 0x3d
 80051d8:	2102      	movs	r1, #2
 80051da:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a19      	ldr	r2, [pc, #100]	@ (8005248 <HAL_TIM_Base_Start+0x8c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00a      	beq.n	80051fc <HAL_TIM_Base_Start+0x40>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	2380      	movs	r3, #128	@ 0x80
 80051ec:	05db      	lsls	r3, r3, #23
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d004      	beq.n	80051fc <HAL_TIM_Base_Start+0x40>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a15      	ldr	r2, [pc, #84]	@ (800524c <HAL_TIM_Base_Start+0x90>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d116      	bne.n	800522a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	4a13      	ldr	r2, [pc, #76]	@ (8005250 <HAL_TIM_Base_Start+0x94>)
 8005204:	4013      	ands	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b06      	cmp	r3, #6
 800520c:	d016      	beq.n	800523c <HAL_TIM_Base_Start+0x80>
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	2380      	movs	r3, #128	@ 0x80
 8005212:	025b      	lsls	r3, r3, #9
 8005214:	429a      	cmp	r2, r3
 8005216:	d011      	beq.n	800523c <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2101      	movs	r1, #1
 8005224:	430a      	orrs	r2, r1
 8005226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005228:	e008      	b.n	800523c <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2101      	movs	r1, #1
 8005236:	430a      	orrs	r2, r1
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	e000      	b.n	800523e <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800523c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	0018      	movs	r0, r3
 8005242:	46bd      	mov	sp, r7
 8005244:	b004      	add	sp, #16
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40012c00 	.word	0x40012c00
 800524c:	40000400 	.word	0x40000400
 8005250:	00010007 	.word	0x00010007

08005254 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	4a0d      	ldr	r2, [pc, #52]	@ (8005298 <HAL_TIM_Base_Stop+0x44>)
 8005264:	4013      	ands	r3, r2
 8005266:	d10d      	bne.n	8005284 <HAL_TIM_Base_Stop+0x30>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	4a0b      	ldr	r2, [pc, #44]	@ (800529c <HAL_TIM_Base_Stop+0x48>)
 8005270:	4013      	ands	r3, r2
 8005272:	d107      	bne.n	8005284 <HAL_TIM_Base_Stop+0x30>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2101      	movs	r1, #1
 8005280:	438a      	bics	r2, r1
 8005282:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	223d      	movs	r2, #61	@ 0x3d
 8005288:	2101      	movs	r1, #1
 800528a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	0018      	movs	r0, r3
 8005290:	46bd      	mov	sp, r7
 8005292:	b002      	add	sp, #8
 8005294:	bd80      	pop	{r7, pc}
 8005296:	46c0      	nop			@ (mov r8, r8)
 8005298:	00001111 	.word	0x00001111
 800529c:	00000444 	.word	0x00000444

080052a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e04a      	b.n	8005348 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	223d      	movs	r2, #61	@ 0x3d
 80052b6:	5c9b      	ldrb	r3, [r3, r2]
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d107      	bne.n	80052ce <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	223c      	movs	r2, #60	@ 0x3c
 80052c2:	2100      	movs	r1, #0
 80052c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	0018      	movs	r0, r3
 80052ca:	f7fc fc6b 	bl	8001ba4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	223d      	movs	r2, #61	@ 0x3d
 80052d2:	2102      	movs	r1, #2
 80052d4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3304      	adds	r3, #4
 80052de:	0019      	movs	r1, r3
 80052e0:	0010      	movs	r0, r2
 80052e2:	f000 fa13 	bl	800570c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2248      	movs	r2, #72	@ 0x48
 80052ea:	2101      	movs	r1, #1
 80052ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	223e      	movs	r2, #62	@ 0x3e
 80052f2:	2101      	movs	r1, #1
 80052f4:	5499      	strb	r1, [r3, r2]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	223f      	movs	r2, #63	@ 0x3f
 80052fa:	2101      	movs	r1, #1
 80052fc:	5499      	strb	r1, [r3, r2]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2240      	movs	r2, #64	@ 0x40
 8005302:	2101      	movs	r1, #1
 8005304:	5499      	strb	r1, [r3, r2]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2241      	movs	r2, #65	@ 0x41
 800530a:	2101      	movs	r1, #1
 800530c:	5499      	strb	r1, [r3, r2]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2242      	movs	r2, #66	@ 0x42
 8005312:	2101      	movs	r1, #1
 8005314:	5499      	strb	r1, [r3, r2]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2243      	movs	r2, #67	@ 0x43
 800531a:	2101      	movs	r1, #1
 800531c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2244      	movs	r2, #68	@ 0x44
 8005322:	2101      	movs	r1, #1
 8005324:	5499      	strb	r1, [r3, r2]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2245      	movs	r2, #69	@ 0x45
 800532a:	2101      	movs	r1, #1
 800532c:	5499      	strb	r1, [r3, r2]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2246      	movs	r2, #70	@ 0x46
 8005332:	2101      	movs	r1, #1
 8005334:	5499      	strb	r1, [r3, r2]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2247      	movs	r2, #71	@ 0x47
 800533a:	2101      	movs	r1, #1
 800533c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	223d      	movs	r2, #61	@ 0x3d
 8005342:	2101      	movs	r1, #1
 8005344:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	0018      	movs	r0, r3
 800534a:	46bd      	mov	sp, r7
 800534c:	b002      	add	sp, #8
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d108      	bne.n	8005372 <HAL_TIM_PWM_Start+0x22>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	223e      	movs	r2, #62	@ 0x3e
 8005364:	5c9b      	ldrb	r3, [r3, r2]
 8005366:	b2db      	uxtb	r3, r3
 8005368:	3b01      	subs	r3, #1
 800536a:	1e5a      	subs	r2, r3, #1
 800536c:	4193      	sbcs	r3, r2
 800536e:	b2db      	uxtb	r3, r3
 8005370:	e037      	b.n	80053e2 <HAL_TIM_PWM_Start+0x92>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b04      	cmp	r3, #4
 8005376:	d108      	bne.n	800538a <HAL_TIM_PWM_Start+0x3a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	223f      	movs	r2, #63	@ 0x3f
 800537c:	5c9b      	ldrb	r3, [r3, r2]
 800537e:	b2db      	uxtb	r3, r3
 8005380:	3b01      	subs	r3, #1
 8005382:	1e5a      	subs	r2, r3, #1
 8005384:	4193      	sbcs	r3, r2
 8005386:	b2db      	uxtb	r3, r3
 8005388:	e02b      	b.n	80053e2 <HAL_TIM_PWM_Start+0x92>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d108      	bne.n	80053a2 <HAL_TIM_PWM_Start+0x52>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2240      	movs	r2, #64	@ 0x40
 8005394:	5c9b      	ldrb	r3, [r3, r2]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	1e5a      	subs	r2, r3, #1
 800539c:	4193      	sbcs	r3, r2
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	e01f      	b.n	80053e2 <HAL_TIM_PWM_Start+0x92>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b0c      	cmp	r3, #12
 80053a6:	d108      	bne.n	80053ba <HAL_TIM_PWM_Start+0x6a>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2241      	movs	r2, #65	@ 0x41
 80053ac:	5c9b      	ldrb	r3, [r3, r2]
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	1e5a      	subs	r2, r3, #1
 80053b4:	4193      	sbcs	r3, r2
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	e013      	b.n	80053e2 <HAL_TIM_PWM_Start+0x92>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b10      	cmp	r3, #16
 80053be:	d108      	bne.n	80053d2 <HAL_TIM_PWM_Start+0x82>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2242      	movs	r2, #66	@ 0x42
 80053c4:	5c9b      	ldrb	r3, [r3, r2]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	1e5a      	subs	r2, r3, #1
 80053cc:	4193      	sbcs	r3, r2
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	e007      	b.n	80053e2 <HAL_TIM_PWM_Start+0x92>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2243      	movs	r2, #67	@ 0x43
 80053d6:	5c9b      	ldrb	r3, [r3, r2]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	3b01      	subs	r3, #1
 80053dc:	1e5a      	subs	r2, r3, #1
 80053de:	4193      	sbcs	r3, r2
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e081      	b.n	80054ee <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d104      	bne.n	80053fa <HAL_TIM_PWM_Start+0xaa>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	223e      	movs	r2, #62	@ 0x3e
 80053f4:	2102      	movs	r1, #2
 80053f6:	5499      	strb	r1, [r3, r2]
 80053f8:	e023      	b.n	8005442 <HAL_TIM_PWM_Start+0xf2>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d104      	bne.n	800540a <HAL_TIM_PWM_Start+0xba>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	223f      	movs	r2, #63	@ 0x3f
 8005404:	2102      	movs	r1, #2
 8005406:	5499      	strb	r1, [r3, r2]
 8005408:	e01b      	b.n	8005442 <HAL_TIM_PWM_Start+0xf2>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b08      	cmp	r3, #8
 800540e:	d104      	bne.n	800541a <HAL_TIM_PWM_Start+0xca>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2240      	movs	r2, #64	@ 0x40
 8005414:	2102      	movs	r1, #2
 8005416:	5499      	strb	r1, [r3, r2]
 8005418:	e013      	b.n	8005442 <HAL_TIM_PWM_Start+0xf2>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b0c      	cmp	r3, #12
 800541e:	d104      	bne.n	800542a <HAL_TIM_PWM_Start+0xda>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2241      	movs	r2, #65	@ 0x41
 8005424:	2102      	movs	r1, #2
 8005426:	5499      	strb	r1, [r3, r2]
 8005428:	e00b      	b.n	8005442 <HAL_TIM_PWM_Start+0xf2>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b10      	cmp	r3, #16
 800542e:	d104      	bne.n	800543a <HAL_TIM_PWM_Start+0xea>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2242      	movs	r2, #66	@ 0x42
 8005434:	2102      	movs	r1, #2
 8005436:	5499      	strb	r1, [r3, r2]
 8005438:	e003      	b.n	8005442 <HAL_TIM_PWM_Start+0xf2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2243      	movs	r2, #67	@ 0x43
 800543e:	2102      	movs	r1, #2
 8005440:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6839      	ldr	r1, [r7, #0]
 8005448:	2201      	movs	r2, #1
 800544a:	0018      	movs	r0, r3
 800544c:	f000 fc7e 	bl	8005d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a28      	ldr	r2, [pc, #160]	@ (80054f8 <HAL_TIM_PWM_Start+0x1a8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d009      	beq.n	800546e <HAL_TIM_PWM_Start+0x11e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a27      	ldr	r2, [pc, #156]	@ (80054fc <HAL_TIM_PWM_Start+0x1ac>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d004      	beq.n	800546e <HAL_TIM_PWM_Start+0x11e>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a25      	ldr	r2, [pc, #148]	@ (8005500 <HAL_TIM_PWM_Start+0x1b0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d101      	bne.n	8005472 <HAL_TIM_PWM_Start+0x122>
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <HAL_TIM_PWM_Start+0x124>
 8005472:	2300      	movs	r3, #0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2180      	movs	r1, #128	@ 0x80
 8005484:	0209      	lsls	r1, r1, #8
 8005486:	430a      	orrs	r2, r1
 8005488:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1a      	ldr	r2, [pc, #104]	@ (80054f8 <HAL_TIM_PWM_Start+0x1a8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00a      	beq.n	80054aa <HAL_TIM_PWM_Start+0x15a>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	2380      	movs	r3, #128	@ 0x80
 800549a:	05db      	lsls	r3, r3, #23
 800549c:	429a      	cmp	r2, r3
 800549e:	d004      	beq.n	80054aa <HAL_TIM_PWM_Start+0x15a>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a17      	ldr	r2, [pc, #92]	@ (8005504 <HAL_TIM_PWM_Start+0x1b4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d116      	bne.n	80054d8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	4a15      	ldr	r2, [pc, #84]	@ (8005508 <HAL_TIM_PWM_Start+0x1b8>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b06      	cmp	r3, #6
 80054ba:	d016      	beq.n	80054ea <HAL_TIM_PWM_Start+0x19a>
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	2380      	movs	r3, #128	@ 0x80
 80054c0:	025b      	lsls	r3, r3, #9
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d011      	beq.n	80054ea <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2101      	movs	r1, #1
 80054d2:	430a      	orrs	r2, r1
 80054d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d6:	e008      	b.n	80054ea <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2101      	movs	r1, #1
 80054e4:	430a      	orrs	r2, r1
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	e000      	b.n	80054ec <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ea:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	0018      	movs	r0, r3
 80054f0:	46bd      	mov	sp, r7
 80054f2:	b004      	add	sp, #16
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	46c0      	nop			@ (mov r8, r8)
 80054f8:	40012c00 	.word	0x40012c00
 80054fc:	40014400 	.word	0x40014400
 8005500:	40014800 	.word	0x40014800
 8005504:	40000400 	.word	0x40000400
 8005508:	00010007 	.word	0x00010007

0800550c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005518:	2317      	movs	r3, #23
 800551a:	18fb      	adds	r3, r7, r3
 800551c:	2200      	movs	r2, #0
 800551e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	223c      	movs	r2, #60	@ 0x3c
 8005524:	5c9b      	ldrb	r3, [r3, r2]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d101      	bne.n	800552e <HAL_TIM_PWM_ConfigChannel+0x22>
 800552a:	2302      	movs	r3, #2
 800552c:	e0e5      	b.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	223c      	movs	r2, #60	@ 0x3c
 8005532:	2101      	movs	r1, #1
 8005534:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b14      	cmp	r3, #20
 800553a:	d900      	bls.n	800553e <HAL_TIM_PWM_ConfigChannel+0x32>
 800553c:	e0d1      	b.n	80056e2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	009a      	lsls	r2, r3, #2
 8005542:	4b70      	ldr	r3, [pc, #448]	@ (8005704 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005544:	18d3      	adds	r3, r2, r3
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	0011      	movs	r1, r2
 8005552:	0018      	movs	r0, r3
 8005554:	f000 f95e 	bl	8005814 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2108      	movs	r1, #8
 8005564:	430a      	orrs	r2, r1
 8005566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2104      	movs	r1, #4
 8005574:	438a      	bics	r2, r1
 8005576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6999      	ldr	r1, [r3, #24]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	619a      	str	r2, [r3, #24]
      break;
 800558a:	e0af      	b.n	80056ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	0011      	movs	r1, r2
 8005594:	0018      	movs	r0, r3
 8005596:	f000 f9bd 	bl	8005914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2180      	movs	r1, #128	@ 0x80
 80055a6:	0109      	lsls	r1, r1, #4
 80055a8:	430a      	orrs	r2, r1
 80055aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699a      	ldr	r2, [r3, #24]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4954      	ldr	r1, [pc, #336]	@ (8005708 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80055b8:	400a      	ands	r2, r1
 80055ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6999      	ldr	r1, [r3, #24]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	021a      	lsls	r2, r3, #8
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	619a      	str	r2, [r3, #24]
      break;
 80055d0:	e08c      	b.n	80056ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	0011      	movs	r1, r2
 80055da:	0018      	movs	r0, r3
 80055dc:	f000 fa18 	bl	8005a10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	69da      	ldr	r2, [r3, #28]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2108      	movs	r1, #8
 80055ec:	430a      	orrs	r2, r1
 80055ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	69da      	ldr	r2, [r3, #28]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2104      	movs	r1, #4
 80055fc:	438a      	bics	r2, r1
 80055fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	69d9      	ldr	r1, [r3, #28]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	691a      	ldr	r2, [r3, #16]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	61da      	str	r2, [r3, #28]
      break;
 8005612:	e06b      	b.n	80056ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	0011      	movs	r1, r2
 800561c:	0018      	movs	r0, r3
 800561e:	f000 fa79 	bl	8005b14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2180      	movs	r1, #128	@ 0x80
 800562e:	0109      	lsls	r1, r1, #4
 8005630:	430a      	orrs	r2, r1
 8005632:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	69da      	ldr	r2, [r3, #28]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4932      	ldr	r1, [pc, #200]	@ (8005708 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005640:	400a      	ands	r2, r1
 8005642:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69d9      	ldr	r1, [r3, #28]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	021a      	lsls	r2, r3, #8
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	61da      	str	r2, [r3, #28]
      break;
 8005658:	e048      	b.n	80056ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	0011      	movs	r1, r2
 8005662:	0018      	movs	r0, r3
 8005664:	f000 faba 	bl	8005bdc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2108      	movs	r1, #8
 8005674:	430a      	orrs	r2, r1
 8005676:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2104      	movs	r1, #4
 8005684:	438a      	bics	r2, r1
 8005686:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800569a:	e027      	b.n	80056ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	0011      	movs	r1, r2
 80056a4:	0018      	movs	r0, r3
 80056a6:	f000 faf3 	bl	8005c90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2180      	movs	r1, #128	@ 0x80
 80056b6:	0109      	lsls	r1, r1, #4
 80056b8:	430a      	orrs	r2, r1
 80056ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4910      	ldr	r1, [pc, #64]	@ (8005708 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80056c8:	400a      	ands	r2, r1
 80056ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	021a      	lsls	r2, r3, #8
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80056e0:	e004      	b.n	80056ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80056e2:	2317      	movs	r3, #23
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	2201      	movs	r2, #1
 80056e8:	701a      	strb	r2, [r3, #0]
      break;
 80056ea:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	223c      	movs	r2, #60	@ 0x3c
 80056f0:	2100      	movs	r1, #0
 80056f2:	5499      	strb	r1, [r3, r2]

  return status;
 80056f4:	2317      	movs	r3, #23
 80056f6:	18fb      	adds	r3, r7, r3
 80056f8:	781b      	ldrb	r3, [r3, #0]
}
 80056fa:	0018      	movs	r0, r3
 80056fc:	46bd      	mov	sp, r7
 80056fe:	b006      	add	sp, #24
 8005700:	bd80      	pop	{r7, pc}
 8005702:	46c0      	nop			@ (mov r8, r8)
 8005704:	08005f44 	.word	0x08005f44
 8005708:	fffffbff 	.word	0xfffffbff

0800570c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a37      	ldr	r2, [pc, #220]	@ (80057fc <TIM_Base_SetConfig+0xf0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d008      	beq.n	8005736 <TIM_Base_SetConfig+0x2a>
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	2380      	movs	r3, #128	@ 0x80
 8005728:	05db      	lsls	r3, r3, #23
 800572a:	429a      	cmp	r2, r3
 800572c:	d003      	beq.n	8005736 <TIM_Base_SetConfig+0x2a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a33      	ldr	r2, [pc, #204]	@ (8005800 <TIM_Base_SetConfig+0xf4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d108      	bne.n	8005748 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2270      	movs	r2, #112	@ 0x70
 800573a:	4393      	bics	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4313      	orrs	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a2c      	ldr	r2, [pc, #176]	@ (80057fc <TIM_Base_SetConfig+0xf0>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d014      	beq.n	800577a <TIM_Base_SetConfig+0x6e>
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	2380      	movs	r3, #128	@ 0x80
 8005754:	05db      	lsls	r3, r3, #23
 8005756:	429a      	cmp	r2, r3
 8005758:	d00f      	beq.n	800577a <TIM_Base_SetConfig+0x6e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a28      	ldr	r2, [pc, #160]	@ (8005800 <TIM_Base_SetConfig+0xf4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00b      	beq.n	800577a <TIM_Base_SetConfig+0x6e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a27      	ldr	r2, [pc, #156]	@ (8005804 <TIM_Base_SetConfig+0xf8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d007      	beq.n	800577a <TIM_Base_SetConfig+0x6e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a26      	ldr	r2, [pc, #152]	@ (8005808 <TIM_Base_SetConfig+0xfc>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d003      	beq.n	800577a <TIM_Base_SetConfig+0x6e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a25      	ldr	r2, [pc, #148]	@ (800580c <TIM_Base_SetConfig+0x100>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d108      	bne.n	800578c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4a24      	ldr	r2, [pc, #144]	@ (8005810 <TIM_Base_SetConfig+0x104>)
 800577e:	4013      	ands	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	4313      	orrs	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2280      	movs	r2, #128	@ 0x80
 8005790:	4393      	bics	r3, r2
 8005792:	001a      	movs	r2, r3
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a11      	ldr	r2, [pc, #68]	@ (80057fc <TIM_Base_SetConfig+0xf0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d007      	beq.n	80057ca <TIM_Base_SetConfig+0xbe>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a12      	ldr	r2, [pc, #72]	@ (8005808 <TIM_Base_SetConfig+0xfc>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d003      	beq.n	80057ca <TIM_Base_SetConfig+0xbe>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a11      	ldr	r2, [pc, #68]	@ (800580c <TIM_Base_SetConfig+0x100>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d103      	bne.n	80057d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	691a      	ldr	r2, [r3, #16]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	2201      	movs	r2, #1
 80057de:	4013      	ands	r3, r2
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d106      	bne.n	80057f2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	2201      	movs	r2, #1
 80057ea:	4393      	bics	r3, r2
 80057ec:	001a      	movs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	611a      	str	r2, [r3, #16]
  }
}
 80057f2:	46c0      	nop			@ (mov r8, r8)
 80057f4:	46bd      	mov	sp, r7
 80057f6:	b004      	add	sp, #16
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	46c0      	nop			@ (mov r8, r8)
 80057fc:	40012c00 	.word	0x40012c00
 8005800:	40000400 	.word	0x40000400
 8005804:	40002000 	.word	0x40002000
 8005808:	40014400 	.word	0x40014400
 800580c:	40014800 	.word	0x40014800
 8005810:	fffffcff 	.word	0xfffffcff

08005814 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	2201      	movs	r2, #1
 800582a:	4393      	bics	r3, r2
 800582c:	001a      	movs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4a2e      	ldr	r2, [pc, #184]	@ (80058fc <TIM_OC1_SetConfig+0xe8>)
 8005842:	4013      	ands	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2203      	movs	r2, #3
 800584a:	4393      	bics	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2202      	movs	r2, #2
 800585c:	4393      	bics	r3, r2
 800585e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a24      	ldr	r2, [pc, #144]	@ (8005900 <TIM_OC1_SetConfig+0xec>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d007      	beq.n	8005882 <TIM_OC1_SetConfig+0x6e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a23      	ldr	r2, [pc, #140]	@ (8005904 <TIM_OC1_SetConfig+0xf0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d003      	beq.n	8005882 <TIM_OC1_SetConfig+0x6e>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a22      	ldr	r2, [pc, #136]	@ (8005908 <TIM_OC1_SetConfig+0xf4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d10c      	bne.n	800589c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2208      	movs	r2, #8
 8005886:	4393      	bics	r3, r2
 8005888:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	2204      	movs	r2, #4
 8005898:	4393      	bics	r3, r2
 800589a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a18      	ldr	r2, [pc, #96]	@ (8005900 <TIM_OC1_SetConfig+0xec>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d007      	beq.n	80058b4 <TIM_OC1_SetConfig+0xa0>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a17      	ldr	r2, [pc, #92]	@ (8005904 <TIM_OC1_SetConfig+0xf0>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d003      	beq.n	80058b4 <TIM_OC1_SetConfig+0xa0>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a16      	ldr	r2, [pc, #88]	@ (8005908 <TIM_OC1_SetConfig+0xf4>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d111      	bne.n	80058d8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	4a15      	ldr	r2, [pc, #84]	@ (800590c <TIM_OC1_SetConfig+0xf8>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	4a14      	ldr	r2, [pc, #80]	@ (8005910 <TIM_OC1_SetConfig+0xfc>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	621a      	str	r2, [r3, #32]
}
 80058f2:	46c0      	nop			@ (mov r8, r8)
 80058f4:	46bd      	mov	sp, r7
 80058f6:	b006      	add	sp, #24
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	46c0      	nop			@ (mov r8, r8)
 80058fc:	fffeff8f 	.word	0xfffeff8f
 8005900:	40012c00 	.word	0x40012c00
 8005904:	40014400 	.word	0x40014400
 8005908:	40014800 	.word	0x40014800
 800590c:	fffffeff 	.word	0xfffffeff
 8005910:	fffffdff 	.word	0xfffffdff

08005914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	2210      	movs	r2, #16
 800592a:	4393      	bics	r3, r2
 800592c:	001a      	movs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4a2c      	ldr	r2, [pc, #176]	@ (80059f4 <TIM_OC2_SetConfig+0xe0>)
 8005942:	4013      	ands	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4a2b      	ldr	r2, [pc, #172]	@ (80059f8 <TIM_OC2_SetConfig+0xe4>)
 800594a:	4013      	ands	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	021b      	lsls	r3, r3, #8
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2220      	movs	r2, #32
 800595e:	4393      	bics	r3, r2
 8005960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a22      	ldr	r2, [pc, #136]	@ (80059fc <TIM_OC2_SetConfig+0xe8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d10d      	bne.n	8005992 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2280      	movs	r2, #128	@ 0x80
 800597a:	4393      	bics	r3, r2
 800597c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2240      	movs	r2, #64	@ 0x40
 800598e:	4393      	bics	r3, r2
 8005990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a19      	ldr	r2, [pc, #100]	@ (80059fc <TIM_OC2_SetConfig+0xe8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d007      	beq.n	80059aa <TIM_OC2_SetConfig+0x96>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a18      	ldr	r2, [pc, #96]	@ (8005a00 <TIM_OC2_SetConfig+0xec>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d003      	beq.n	80059aa <TIM_OC2_SetConfig+0x96>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a17      	ldr	r2, [pc, #92]	@ (8005a04 <TIM_OC2_SetConfig+0xf0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d113      	bne.n	80059d2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	4a16      	ldr	r2, [pc, #88]	@ (8005a08 <TIM_OC2_SetConfig+0xf4>)
 80059ae:	4013      	ands	r3, r2
 80059b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4a15      	ldr	r2, [pc, #84]	@ (8005a0c <TIM_OC2_SetConfig+0xf8>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	621a      	str	r2, [r3, #32]
}
 80059ec:	46c0      	nop			@ (mov r8, r8)
 80059ee:	46bd      	mov	sp, r7
 80059f0:	b006      	add	sp, #24
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	feff8fff 	.word	0xfeff8fff
 80059f8:	fffffcff 	.word	0xfffffcff
 80059fc:	40012c00 	.word	0x40012c00
 8005a00:	40014400 	.word	0x40014400
 8005a04:	40014800 	.word	0x40014800
 8005a08:	fffffbff 	.word	0xfffffbff
 8005a0c:	fffff7ff 	.word	0xfffff7ff

08005a10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	4a31      	ldr	r2, [pc, #196]	@ (8005aec <TIM_OC3_SetConfig+0xdc>)
 8005a26:	401a      	ands	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4a2d      	ldr	r2, [pc, #180]	@ (8005af0 <TIM_OC3_SetConfig+0xe0>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2203      	movs	r2, #3
 8005a44:	4393      	bics	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	4a27      	ldr	r2, [pc, #156]	@ (8005af4 <TIM_OC3_SetConfig+0xe4>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	021b      	lsls	r3, r3, #8
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a23      	ldr	r2, [pc, #140]	@ (8005af8 <TIM_OC3_SetConfig+0xe8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d10d      	bne.n	8005a8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	4a22      	ldr	r2, [pc, #136]	@ (8005afc <TIM_OC3_SetConfig+0xec>)
 8005a72:	4013      	ands	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	021b      	lsls	r3, r3, #8
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	4a1e      	ldr	r2, [pc, #120]	@ (8005b00 <TIM_OC3_SetConfig+0xf0>)
 8005a86:	4013      	ands	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a1a      	ldr	r2, [pc, #104]	@ (8005af8 <TIM_OC3_SetConfig+0xe8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d007      	beq.n	8005aa2 <TIM_OC3_SetConfig+0x92>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a1b      	ldr	r2, [pc, #108]	@ (8005b04 <TIM_OC3_SetConfig+0xf4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d003      	beq.n	8005aa2 <TIM_OC3_SetConfig+0x92>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8005b08 <TIM_OC3_SetConfig+0xf8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d113      	bne.n	8005aca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	4a19      	ldr	r2, [pc, #100]	@ (8005b0c <TIM_OC3_SetConfig+0xfc>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	4a18      	ldr	r2, [pc, #96]	@ (8005b10 <TIM_OC3_SetConfig+0x100>)
 8005aae:	4013      	ands	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	011b      	lsls	r3, r3, #4
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	621a      	str	r2, [r3, #32]
}
 8005ae4:	46c0      	nop			@ (mov r8, r8)
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	b006      	add	sp, #24
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	fffffeff 	.word	0xfffffeff
 8005af0:	fffeff8f 	.word	0xfffeff8f
 8005af4:	fffffdff 	.word	0xfffffdff
 8005af8:	40012c00 	.word	0x40012c00
 8005afc:	fffff7ff 	.word	0xfffff7ff
 8005b00:	fffffbff 	.word	0xfffffbff
 8005b04:	40014400 	.word	0x40014400
 8005b08:	40014800 	.word	0x40014800
 8005b0c:	ffffefff 	.word	0xffffefff
 8005b10:	ffffdfff 	.word	0xffffdfff

08005b14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	4a24      	ldr	r2, [pc, #144]	@ (8005bbc <TIM_OC4_SetConfig+0xa8>)
 8005b2a:	401a      	ands	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4a20      	ldr	r2, [pc, #128]	@ (8005bc0 <TIM_OC4_SetConfig+0xac>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4a1f      	ldr	r2, [pc, #124]	@ (8005bc4 <TIM_OC4_SetConfig+0xb0>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	021b      	lsls	r3, r3, #8
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc8 <TIM_OC4_SetConfig+0xb4>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	031b      	lsls	r3, r3, #12
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a17      	ldr	r2, [pc, #92]	@ (8005bcc <TIM_OC4_SetConfig+0xb8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d007      	beq.n	8005b84 <TIM_OC4_SetConfig+0x70>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a16      	ldr	r2, [pc, #88]	@ (8005bd0 <TIM_OC4_SetConfig+0xbc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d003      	beq.n	8005b84 <TIM_OC4_SetConfig+0x70>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a15      	ldr	r2, [pc, #84]	@ (8005bd4 <TIM_OC4_SetConfig+0xc0>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d109      	bne.n	8005b98 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	4a14      	ldr	r2, [pc, #80]	@ (8005bd8 <TIM_OC4_SetConfig+0xc4>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	019b      	lsls	r3, r3, #6
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	621a      	str	r2, [r3, #32]
}
 8005bb2:	46c0      	nop			@ (mov r8, r8)
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	b006      	add	sp, #24
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	46c0      	nop			@ (mov r8, r8)
 8005bbc:	ffffefff 	.word	0xffffefff
 8005bc0:	feff8fff 	.word	0xfeff8fff
 8005bc4:	fffffcff 	.word	0xfffffcff
 8005bc8:	ffffdfff 	.word	0xffffdfff
 8005bcc:	40012c00 	.word	0x40012c00
 8005bd0:	40014400 	.word	0x40014400
 8005bd4:	40014800 	.word	0x40014800
 8005bd8:	ffffbfff 	.word	0xffffbfff

08005bdc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	4a21      	ldr	r2, [pc, #132]	@ (8005c78 <TIM_OC5_SetConfig+0x9c>)
 8005bf2:	401a      	ands	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4a1d      	ldr	r2, [pc, #116]	@ (8005c7c <TIM_OC5_SetConfig+0xa0>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	4a19      	ldr	r2, [pc, #100]	@ (8005c80 <TIM_OC5_SetConfig+0xa4>)
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	041b      	lsls	r3, r3, #16
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a15      	ldr	r2, [pc, #84]	@ (8005c84 <TIM_OC5_SetConfig+0xa8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d007      	beq.n	8005c42 <TIM_OC5_SetConfig+0x66>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a14      	ldr	r2, [pc, #80]	@ (8005c88 <TIM_OC5_SetConfig+0xac>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d003      	beq.n	8005c42 <TIM_OC5_SetConfig+0x66>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a13      	ldr	r2, [pc, #76]	@ (8005c8c <TIM_OC5_SetConfig+0xb0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d109      	bne.n	8005c56 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	4a0c      	ldr	r2, [pc, #48]	@ (8005c78 <TIM_OC5_SetConfig+0x9c>)
 8005c46:	4013      	ands	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	621a      	str	r2, [r3, #32]
}
 8005c70:	46c0      	nop			@ (mov r8, r8)
 8005c72:	46bd      	mov	sp, r7
 8005c74:	b006      	add	sp, #24
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	fffeffff 	.word	0xfffeffff
 8005c7c:	fffeff8f 	.word	0xfffeff8f
 8005c80:	fffdffff 	.word	0xfffdffff
 8005c84:	40012c00 	.word	0x40012c00
 8005c88:	40014400 	.word	0x40014400
 8005c8c:	40014800 	.word	0x40014800

08005c90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	4a22      	ldr	r2, [pc, #136]	@ (8005d30 <TIM_OC6_SetConfig+0xa0>)
 8005ca6:	401a      	ands	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4a1e      	ldr	r2, [pc, #120]	@ (8005d34 <TIM_OC6_SetConfig+0xa4>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	4a1a      	ldr	r2, [pc, #104]	@ (8005d38 <TIM_OC6_SetConfig+0xa8>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	051b      	lsls	r3, r3, #20
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a16      	ldr	r2, [pc, #88]	@ (8005d3c <TIM_OC6_SetConfig+0xac>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d007      	beq.n	8005cf8 <TIM_OC6_SetConfig+0x68>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a15      	ldr	r2, [pc, #84]	@ (8005d40 <TIM_OC6_SetConfig+0xb0>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_OC6_SetConfig+0x68>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a14      	ldr	r2, [pc, #80]	@ (8005d44 <TIM_OC6_SetConfig+0xb4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d109      	bne.n	8005d0c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	4a13      	ldr	r2, [pc, #76]	@ (8005d48 <TIM_OC6_SetConfig+0xb8>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	029b      	lsls	r3, r3, #10
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	621a      	str	r2, [r3, #32]
}
 8005d26:	46c0      	nop			@ (mov r8, r8)
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	b006      	add	sp, #24
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	46c0      	nop			@ (mov r8, r8)
 8005d30:	ffefffff 	.word	0xffefffff
 8005d34:	feff8fff 	.word	0xfeff8fff
 8005d38:	ffdfffff 	.word	0xffdfffff
 8005d3c:	40012c00 	.word	0x40012c00
 8005d40:	40014400 	.word	0x40014400
 8005d44:	40014800 	.word	0x40014800
 8005d48:	fffbffff 	.word	0xfffbffff

08005d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	221f      	movs	r2, #31
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	2201      	movs	r2, #1
 8005d60:	409a      	lsls	r2, r3
 8005d62:	0013      	movs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	43d2      	mvns	r2, r2
 8005d6e:	401a      	ands	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a1a      	ldr	r2, [r3, #32]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	211f      	movs	r1, #31
 8005d7c:	400b      	ands	r3, r1
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	4099      	lsls	r1, r3
 8005d82:	000b      	movs	r3, r1
 8005d84:	431a      	orrs	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	46c0      	nop			@ (mov r8, r8)
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	b006      	add	sp, #24
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	223c      	movs	r2, #60	@ 0x3c
 8005da2:	5c9b      	ldrb	r3, [r3, r2]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d101      	bne.n	8005dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005da8:	2302      	movs	r3, #2
 8005daa:	e050      	b.n	8005e4e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	223c      	movs	r2, #60	@ 0x3c
 8005db0:	2101      	movs	r1, #1
 8005db2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	223d      	movs	r2, #61	@ 0x3d
 8005db8:	2102      	movs	r1, #2
 8005dba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a21      	ldr	r2, [pc, #132]	@ (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d108      	bne.n	8005de8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4a20      	ldr	r2, [pc, #128]	@ (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005dda:	4013      	ands	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2270      	movs	r2, #112	@ 0x70
 8005dec:	4393      	bics	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a14      	ldr	r2, [pc, #80]	@ (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00a      	beq.n	8005e22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	2380      	movs	r3, #128	@ 0x80
 8005e12:	05db      	lsls	r3, r3, #23
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d004      	beq.n	8005e22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a10      	ldr	r2, [pc, #64]	@ (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d10c      	bne.n	8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2280      	movs	r2, #128	@ 0x80
 8005e26:	4393      	bics	r3, r2
 8005e28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	223d      	movs	r2, #61	@ 0x3d
 8005e40:	2101      	movs	r1, #1
 8005e42:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	223c      	movs	r2, #60	@ 0x3c
 8005e48:	2100      	movs	r1, #0
 8005e4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	0018      	movs	r0, r3
 8005e50:	46bd      	mov	sp, r7
 8005e52:	b004      	add	sp, #16
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	46c0      	nop			@ (mov r8, r8)
 8005e58:	40012c00 	.word	0x40012c00
 8005e5c:	ff0fffff 	.word	0xff0fffff
 8005e60:	40000400 	.word	0x40000400

08005e64 <memset>:
 8005e64:	0003      	movs	r3, r0
 8005e66:	1882      	adds	r2, r0, r2
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d100      	bne.n	8005e6e <memset+0xa>
 8005e6c:	4770      	bx	lr
 8005e6e:	7019      	strb	r1, [r3, #0]
 8005e70:	3301      	adds	r3, #1
 8005e72:	e7f9      	b.n	8005e68 <memset+0x4>

08005e74 <__libc_init_array>:
 8005e74:	b570      	push	{r4, r5, r6, lr}
 8005e76:	2600      	movs	r6, #0
 8005e78:	4c0c      	ldr	r4, [pc, #48]	@ (8005eac <__libc_init_array+0x38>)
 8005e7a:	4d0d      	ldr	r5, [pc, #52]	@ (8005eb0 <__libc_init_array+0x3c>)
 8005e7c:	1b64      	subs	r4, r4, r5
 8005e7e:	10a4      	asrs	r4, r4, #2
 8005e80:	42a6      	cmp	r6, r4
 8005e82:	d109      	bne.n	8005e98 <__libc_init_array+0x24>
 8005e84:	2600      	movs	r6, #0
 8005e86:	f000 f819 	bl	8005ebc <_init>
 8005e8a:	4c0a      	ldr	r4, [pc, #40]	@ (8005eb4 <__libc_init_array+0x40>)
 8005e8c:	4d0a      	ldr	r5, [pc, #40]	@ (8005eb8 <__libc_init_array+0x44>)
 8005e8e:	1b64      	subs	r4, r4, r5
 8005e90:	10a4      	asrs	r4, r4, #2
 8005e92:	42a6      	cmp	r6, r4
 8005e94:	d105      	bne.n	8005ea2 <__libc_init_array+0x2e>
 8005e96:	bd70      	pop	{r4, r5, r6, pc}
 8005e98:	00b3      	lsls	r3, r6, #2
 8005e9a:	58eb      	ldr	r3, [r5, r3]
 8005e9c:	4798      	blx	r3
 8005e9e:	3601      	adds	r6, #1
 8005ea0:	e7ee      	b.n	8005e80 <__libc_init_array+0xc>
 8005ea2:	00b3      	lsls	r3, r6, #2
 8005ea4:	58eb      	ldr	r3, [r5, r3]
 8005ea6:	4798      	blx	r3
 8005ea8:	3601      	adds	r6, #1
 8005eaa:	e7f2      	b.n	8005e92 <__libc_init_array+0x1e>
 8005eac:	08005f98 	.word	0x08005f98
 8005eb0:	08005f98 	.word	0x08005f98
 8005eb4:	08005f9c 	.word	0x08005f9c
 8005eb8:	08005f98 	.word	0x08005f98

08005ebc <_init>:
 8005ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ebe:	46c0      	nop			@ (mov r8, r8)
 8005ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec2:	bc08      	pop	{r3}
 8005ec4:	469e      	mov	lr, r3
 8005ec6:	4770      	bx	lr

08005ec8 <_fini>:
 8005ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eca:	46c0      	nop			@ (mov r8, r8)
 8005ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ece:	bc08      	pop	{r3}
 8005ed0:	469e      	mov	lr, r3
 8005ed2:	4770      	bx	lr
