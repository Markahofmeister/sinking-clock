
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006800  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080068bc  080068bc  000078bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006988  08006988  00008074  2**0
                  CONTENTS
  4 .ARM          00000000  08006988  08006988  00008074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006988  08006988  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006988  08006988  00007988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800698c  0800698c  0000798c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006990  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000074  08006a04  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08006a04  000082f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ead  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba9  00000000  00000000  0001af49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0001daf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e3a  00000000  00000000  0001ed38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001810a  00000000  00000000  0001fb72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167bc  00000000  00000000  00037c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098476  00000000  00000000  0004e438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e68ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004210  00000000  00000000  000e68f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000eab04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080068a4 	.word	0x080068a4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	080068a4 	.word	0x080068a4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231e      	movs	r3, #30
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-high hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	899b      	ldrh	r3, [r3, #12]
 8000258:	2201      	movs	r2, #1
 800025a:	0019      	movs	r1, r3
 800025c:	f002 fd97 	bl	8002d8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	899b      	ldrh	r3, [r3, #12]
 800026a:	2200      	movs	r2, #0
 800026c:	0019      	movs	r1, r3
 800026e:	f002 fd8e 	bl	8002d8e <HAL_GPIO_WritePin>

	/*
	 *  Delay for 500 ms using hardware timer
	 */
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f005 fa78 	bl	800576c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	0018      	movs	r0, r3
 8000282:	f005 fa27 	bl	80056d4 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028e:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	2380      	movs	r3, #128	@ 0x80
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f5      	bcc.n	8000292 <capTouch_Init+0x76>

    // Determines the number of times to try each initialization step
	uint8_t numTries = 3;
 80002a6:	231f      	movs	r3, #31
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2203      	movs	r2, #3
 80002ac:	701a      	strb	r2, [r3, #0]

	// Verify device ID
		uint8_t deviceIDRet = 0x00;
 80002ae:	2317      	movs	r3, #23
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]

		while(numTries != 0) {
 80002b6:	e014      	b.n	80002e2 <capTouch_Init+0xc6>
			halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b8:	251e      	movs	r5, #30
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	2317      	movs	r3, #23
 80002be:	18fa      	adds	r2, r7, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ad 	bl	8000424 <capTouch_ReadDeviceID>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d00b      	beq.n	80002ee <capTouch_Init+0xd2>
				break;

			numTries--;
 80002d6:	211f      	movs	r1, #31
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	3a01      	subs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80002e2:	231f      	movs	r3, #31
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1e5      	bne.n	80002b8 <capTouch_Init+0x9c>
 80002ec:	e000      	b.n	80002f0 <capTouch_Init+0xd4>
				break;
 80002ee:	46c0      	nop			@ (mov r8, r8)
		}
		if(deviceIDRet != DEVICE_ID || numTries == 0) {
 80002f0:	2317      	movs	r3, #23
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80002f8:	d104      	bne.n	8000304 <capTouch_Init+0xe8>
 80002fa:	231f      	movs	r3, #31
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <capTouch_Init+0xec>
			return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e089      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->deviceID = deviceIDRet;
 8000308:	2317      	movs	r3, #23
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	739a      	strb	r2, [r3, #14]

		numTries = 3;
 8000312:	231f      	movs	r3, #31
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	2203      	movs	r2, #3
 8000318:	701a      	strb	r2, [r3, #0]

	// Force Device Recalibration
		while(numTries != 0) {
 800031a:	e019      	b.n	8000350 <capTouch_Init+0x134>
			halRet = capTouch_Recalibrate(capTouch);
 800031c:	231e      	movs	r3, #30
 800031e:	18fc      	adds	r4, r7, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	0018      	movs	r0, r3
 8000324:	f000 f8c0 	bl	80004a8 <capTouch_Recalibrate>
 8000328:	0003      	movs	r3, r0
 800032a:	7023      	strb	r3, [r4, #0]

			// Wait until calibration sequence completes
			while(capTouch_checkCal(capTouch)) {}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f8db 	bl	80004ec <capTouch_checkCal>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d1f9      	bne.n	800032e <capTouch_Init+0x112>

			if (halRet == HAL_OK)
 800033a:	231e      	movs	r3, #30
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00b      	beq.n	800035c <capTouch_Init+0x140>
				break;

			numTries--;
 8000344:	211f      	movs	r1, #31
 8000346:	187b      	adds	r3, r7, r1
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	187b      	adds	r3, r7, r1
 800034c:	3a01      	subs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 8000350:	231f      	movs	r3, #31
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1e0      	bne.n	800031c <capTouch_Init+0x100>
 800035a:	e000      	b.n	800035e <capTouch_Init+0x142>
				break;
 800035c:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 800035e:	231f      	movs	r3, #31
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d101      	bne.n	800036c <capTouch_Init+0x150>
			return 2;
 8000368:	2302      	movs	r3, #2
 800036a:	e057      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 800036c:	231f      	movs	r3, #31
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2203      	movs	r2, #3
 8000372:	701a      	strb	r2, [r3, #0]

	// Get initial reading of channels
		while(numTries != 0) {
 8000374:	e011      	b.n	800039a <capTouch_Init+0x17e>

			halRet = capTouch_readChannels(capTouch);
 8000376:	251e      	movs	r5, #30
 8000378:	197c      	adds	r4, r7, r5
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	0018      	movs	r0, r3
 800037e:	f000 f8f9 	bl	8000574 <capTouch_readChannels>
 8000382:	0003      	movs	r3, r0
 8000384:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 8000386:	197b      	adds	r3, r7, r5
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <capTouch_Init+0x18a>
				break;

			numTries--;
 800038e:	211f      	movs	r1, #31
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	3a01      	subs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 800039a:	231f      	movs	r3, #31
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e8      	bne.n	8000376 <capTouch_Init+0x15a>
 80003a4:	e000      	b.n	80003a8 <capTouch_Init+0x18c>
				break;
 80003a6:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003a8:	231f      	movs	r3, #31
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <capTouch_Init+0x19a>
			return 3;
 80003b2:	2303      	movs	r3, #3
 80003b4:	e032      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 80003b6:	231f      	movs	r3, #31
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2203      	movs	r2, #3
 80003bc:	701a      	strb	r2, [r3, #0]

	// Enable keys based on passed initialization byte
		while(numTries != 0) {
 80003be:	e015      	b.n	80003ec <capTouch_Init+0x1d0>

			halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80003c0:	251e      	movs	r5, #30
 80003c2:	197c      	adds	r4, r7, r5
 80003c4:	2334      	movs	r3, #52	@ 0x34
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f914 	bl	80005fc <capTouch_enableKeys>
 80003d4:	0003      	movs	r3, r0
 80003d6:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00b      	beq.n	80003f8 <capTouch_Init+0x1dc>
				break;

			numTries--;
 80003e0:	211f      	movs	r1, #31
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	3a01      	subs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80003ec:	231f      	movs	r3, #31
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1e4      	bne.n	80003c0 <capTouch_Init+0x1a4>
 80003f6:	e000      	b.n	80003fa <capTouch_Init+0x1de>
				break;
 80003f8:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003fa:	231f      	movs	r3, #31
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <capTouch_Init+0x1ec>
			return 4;
 8000404:	2304      	movs	r3, #4
 8000406:	e009      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->keys = keyEnFlags;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2234      	movs	r2, #52	@ 0x34
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	73da      	strb	r2, [r3, #15]

		numTries = 3;
 8000412:	231f      	movs	r3, #31
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]

	return 0;
 800041a:	2300      	movs	r3, #0

}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	b008      	add	sp, #32
 8000422:	bdb0      	pop	{r4, r5, r7, pc}

08000424 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 800042e:	230e      	movs	r3, #14
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000436:	250f      	movs	r5, #15
 8000438:	197b      	adds	r3, r7, r5
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <capTouch_ReadDeviceID+0x80>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f002 fdab 	bl	8002fb4 <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000462:	197b      	adds	r3, r7, r5
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 800046a:	197b      	adds	r3, r7, r5
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	e014      	b.n	800049a <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	250f      	movs	r5, #15
 8000476:	197c      	adds	r4, r7, r5
 8000478:	260e      	movs	r6, #14
 800047a:	19ba      	adds	r2, r7, r6
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2136      	movs	r1, #54	@ 0x36
 8000486:	f002 febf 	bl	8003208 <HAL_I2C_Master_Receive>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000496:	197b      	adds	r3, r7, r5
 8000498:	781b      	ldrb	r3, [r3, #0]

}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b005      	add	sp, #20
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	080068bc 	.word	0x080068bc

080004a8 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b0:	210f      	movs	r1, #15
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 80004b8:	260c      	movs	r6, #12
 80004ba:	19bb      	adds	r3, r7, r6
 80004bc:	22c8      	movs	r2, #200	@ 0xc8
 80004be:	4252      	negs	r2, r2
 80004c0:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	000d      	movs	r5, r1
 80004c8:	187c      	adds	r4, r7, r1
 80004ca:	19ba      	adds	r2, r7, r6
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2302      	movs	r3, #2
 80004d4:	2136      	movs	r1, #54	@ 0x36
 80004d6:	f002 fd6d 	bl	8002fb4 <HAL_I2C_Master_Transmit>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]

}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b005      	add	sp, #20
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080004ec <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004f4:	210f      	movs	r1, #15
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80004fc:	230d      	movs	r3, #13
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 8000504:	260c      	movs	r6, #12
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <capTouch_checkCal+0x84>)
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	000d      	movs	r5, r1
 8000514:	187c      	adds	r4, r7, r1
 8000516:	19ba      	adds	r2, r7, r6
 8000518:	2301      	movs	r3, #1
 800051a:	425b      	negs	r3, r3
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2136      	movs	r1, #54	@ 0x36
 8000522:	f002 fd47 	bl	8002fb4 <HAL_I2C_Master_Transmit>
 8000526:	0003      	movs	r3, r0
 8000528:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <capTouch_checkCal+0x4c>
		return halRet;
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	e016      	b.n	8000566 <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230f      	movs	r3, #15
 800053e:	18fc      	adds	r4, r7, r3
 8000540:	250d      	movs	r5, #13
 8000542:	197a      	adds	r2, r7, r5
 8000544:	2301      	movs	r3, #1
 8000546:	425b      	negs	r3, r3
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	2136      	movs	r1, #54	@ 0x36
 800054e:	f002 fe5b 	bl	8003208 <HAL_I2C_Master_Receive>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000556:	197b      	adds	r3, r7, r5
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	210e      	movs	r1, #14
 800055c:	187b      	adds	r3, r7, r1
 800055e:	09d2      	lsrs	r2, r2, #7
 8000560:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	781b      	ldrb	r3, [r3, #0]

}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b005      	add	sp, #20
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	080068c0 	.word	0x080068c0

08000574 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800057c:	210f      	movs	r1, #15
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000584:	230e      	movs	r3, #14
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800058c:	260c      	movs	r6, #12
 800058e:	19bb      	adds	r3, r7, r6
 8000590:	4a19      	ldr	r2, [pc, #100]	@ (80005f8 <capTouch_readChannels+0x84>)
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	000d      	movs	r5, r1
 800059c:	187c      	adds	r4, r7, r1
 800059e:	19ba      	adds	r2, r7, r6
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	2136      	movs	r1, #54	@ 0x36
 80005aa:	f002 fd03 	bl	8002fb4 <HAL_I2C_Master_Transmit>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80005b2:	197b      	adds	r3, r7, r5
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <capTouch_readChannels+0x4c>
		return halRet;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e017      	b.n	80005f0 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	250f      	movs	r5, #15
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	260e      	movs	r6, #14
 80005ca:	19ba      	adds	r2, r7, r6
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2136      	movs	r1, #54	@ 0x36
 80005d6:	f002 fe17 	bl	8003208 <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 80005de:	19bb      	adds	r3, r7, r6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	227f      	movs	r2, #127	@ 0x7f
 80005e4:	4013      	ands	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	741a      	strb	r2, [r3, #16]

	return halRet;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]

}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b005      	add	sp, #20
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	080068c4 	.word	0x080068c4

080005fc <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	b08b      	sub	sp, #44	@ 0x2c
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	000a      	movs	r2, r1
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800060a:	241e      	movs	r4, #30
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000612:	2314      	movs	r3, #20
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	4a39      	ldr	r2, [pc, #228]	@ (80006fc <capTouch_enableKeys+0x100>)
 8000618:	6811      	ldr	r1, [r2, #0]
 800061a:	6019      	str	r1, [r3, #0]
 800061c:	8891      	ldrh	r1, [r2, #4]
 800061e:	8099      	strh	r1, [r3, #4]
 8000620:	7992      	ldrb	r2, [r2, #6]
 8000622:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000624:	260c      	movs	r6, #12
 8000626:	19bb      	adds	r3, r7, r6
 8000628:	4a35      	ldr	r2, [pc, #212]	@ (8000700 <capTouch_enableKeys+0x104>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	6019      	str	r1, [r3, #0]
 800062e:	8891      	ldrh	r1, [r2, #4]
 8000630:	8099      	strh	r1, [r3, #4]
 8000632:	7992      	ldrb	r2, [r2, #6]
 8000634:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	0025      	movs	r5, r4
 800063c:	193c      	adds	r4, r7, r4
 800063e:	19ba      	adds	r2, r7, r6
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	2136      	movs	r1, #54	@ 0x36
 800064a:	f002 fcb3 	bl	8002fb4 <HAL_I2C_Master_Transmit>
 800064e:	0003      	movs	r3, r0
 8000650:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000652:	197b      	adds	r3, r7, r5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <capTouch_enableKeys+0x64>
		return halRet;
 800065a:	197b      	adds	r3, r7, r5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e049      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	251e      	movs	r5, #30
 8000666:	197c      	adds	r4, r7, r5
 8000668:	2314      	movs	r3, #20
 800066a:	18fa      	adds	r2, r7, r3
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2307      	movs	r3, #7
 8000674:	2136      	movs	r1, #54	@ 0x36
 8000676:	f002 fdc7 	bl	8003208 <HAL_I2C_Master_Receive>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800067e:	197b      	adds	r3, r7, r5
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <capTouch_enableKeys+0x90>
		return halRet;
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	e033      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800068c:	231f      	movs	r3, #31
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e01c      	b.n	80006d0 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 8000696:	201f      	movs	r0, #31
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2414      	movs	r4, #20
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	5cd3      	ldrb	r3, [r2, r3]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	7819      	ldrb	r1, [r3, #0]
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4119      	asrs	r1, r3
 80006b0:	000b      	movs	r3, r1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	400b      	ands	r3, r1
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	434a      	muls	r2, r1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 80006c6:	183b      	adds	r3, r7, r0
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	3201      	adds	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	231f      	movs	r3, #31
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d9dd      	bls.n	8000696 <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 80006da:	251e      	movs	r5, #30
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	2314      	movs	r3, #20
 80006e0:	18fa      	adds	r2, r7, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f80c 	bl	8000704 <capTouch_SetAveragingFactor>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]

}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	@ 0x24
 80006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fc:	080068c8 	.word	0x080068c8
 8000700:	080068d0 	.word	0x080068d0

08000704 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800070e:	241e      	movs	r4, #30
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000716:	2314      	movs	r3, #20
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	4a5d      	ldr	r2, [pc, #372]	@ (8000890 <capTouch_SetAveragingFactor+0x18c>)
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	6019      	str	r1, [r3, #0]
 8000720:	8891      	ldrh	r1, [r2, #4]
 8000722:	8099      	strh	r1, [r3, #4]
 8000724:	7992      	ldrb	r2, [r2, #6]
 8000726:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000728:	260c      	movs	r6, #12
 800072a:	19bb      	adds	r3, r7, r6
 800072c:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <capTouch_SetAveragingFactor+0x190>)
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	6019      	str	r1, [r3, #0]
 8000732:	8891      	ldrh	r1, [r2, #4]
 8000734:	8099      	strh	r1, [r3, #4]
 8000736:	7992      	ldrb	r2, [r2, #6]
 8000738:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	0025      	movs	r5, r4
 8000740:	193c      	adds	r4, r7, r4
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2136      	movs	r1, #54	@ 0x36
 800074e:	f002 fc31 	bl	8002fb4 <HAL_I2C_Master_Transmit>
 8000752:	0003      	movs	r3, r0
 8000754:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000756:	197b      	adds	r3, r7, r5
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 800075e:	197b      	adds	r3, r7, r5
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	e090      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	251e      	movs	r5, #30
 800076a:	197c      	adds	r4, r7, r5
 800076c:	2314      	movs	r3, #20
 800076e:	18fa      	adds	r2, r7, r3
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2307      	movs	r3, #7
 8000778:	2136      	movs	r1, #54	@ 0x36
 800077a:	f002 fd45 	bl	8003208 <HAL_I2C_Master_Receive>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000782:	197b      	adds	r3, r7, r5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e07a      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000790:	2308      	movs	r3, #8
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000798:	231d      	movs	r3, #29
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80007a0:	231f      	movs	r3, #31
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e041      	b.n	800082e <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80007aa:	241f      	movs	r4, #31
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2214      	movs	r2, #20
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	201d      	movs	r0, #29
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	2103      	movs	r1, #3
 80007bc:	400a      	ands	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	251c      	movs	r5, #28
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	1839      	adds	r1, r7, r0
 80007d6:	197a      	adds	r2, r7, r5
 80007d8:	7809      	ldrb	r1, [r1, #0]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	220c      	movs	r2, #12
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	5cd2      	ldrb	r2, [r2, r3]
 80007ea:	2108      	movs	r1, #8
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	251e      	movs	r5, #30
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	187a      	adds	r2, r7, r1
 8000802:	2301      	movs	r3, #1
 8000804:	425b      	negs	r3, r3
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2136      	movs	r1, #54	@ 0x36
 800080c:	f002 fbd2 	bl	8002fb4 <HAL_I2C_Master_Transmit>
 8000810:	0003      	movs	r3, r0
 8000812:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 800081c:	197b      	adds	r3, r7, r5
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e031      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 8000822:	211f      	movs	r1, #31
 8000824:	187b      	adds	r3, r7, r1
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	3201      	adds	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	231f      	movs	r3, #31
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d9b8      	bls.n	80007aa <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	251e      	movs	r5, #30
 800083e:	197c      	adds	r4, r7, r5
 8000840:	230c      	movs	r3, #12
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2136      	movs	r1, #54	@ 0x36
 800084e:	f002 fbb1 	bl	8002fb4 <HAL_I2C_Master_Transmit>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 800085e:	197b      	adds	r3, r7, r5
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e010      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	251e      	movs	r5, #30
 800086a:	197c      	adds	r4, r7, r5
 800086c:	2314      	movs	r3, #20
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2307      	movs	r3, #7
 8000878:	2136      	movs	r1, #54	@ 0x36
 800087a:	f002 fcc5 	bl	8003208 <HAL_I2C_Master_Receive>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781b      	ldrb	r3, [r3, #0]

}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	@ 0x24
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	080068c8 	.word	0x080068c8
 8000894:	080068d0 	.word	0x080068d0

08000898 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008a2:	231e      	movs	r3, #30
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80008aa:	2314      	movs	r3, #20
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <capTouch_SetDetectionIntegrator+0xdc>)
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	6019      	str	r1, [r3, #0]
 80008b4:	8891      	ldrh	r1, [r2, #4]
 80008b6:	8099      	strh	r1, [r3, #4]
 80008b8:	7992      	ldrb	r2, [r2, #6]
 80008ba:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 80008bc:	2310      	movs	r3, #16
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80008c4:	231f      	movs	r3, #31
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e022      	b.n	8000914 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 80008ce:	251f      	movs	r5, #31
 80008d0:	197b      	adds	r3, r7, r5
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2214      	movs	r2, #20
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	5cd2      	ldrb	r2, [r2, r3]
 80008da:	2110      	movs	r1, #16
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	231e      	movs	r3, #30
 80008f4:	18fc      	adds	r4, r7, r3
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2136      	movs	r1, #54	@ 0x36
 8000902:	f002 fb57 	bl	8002fb4 <HAL_I2C_Master_Transmit>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 800090a:	197b      	adds	r3, r7, r5
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	197b      	adds	r3, r7, r5
 8000910:	3201      	adds	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	231f      	movs	r3, #31
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d9d7      	bls.n	80008ce <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800091e:	2608      	movs	r6, #8
 8000920:	19bb      	adds	r3, r7, r6
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <capTouch_SetDetectionIntegrator+0xe0>)
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	6019      	str	r1, [r3, #0]
 8000928:	8891      	ldrh	r1, [r2, #4]
 800092a:	8099      	strh	r1, [r3, #4]
 800092c:	7992      	ldrb	r2, [r2, #6]
 800092e:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	251e      	movs	r5, #30
 8000936:	197c      	adds	r4, r7, r5
 8000938:	2314      	movs	r3, #20
 800093a:	18fa      	adds	r2, r7, r3
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2136      	movs	r1, #54	@ 0x36
 8000946:	f002 fb35 	bl	8002fb4 <HAL_I2C_Master_Transmit>
 800094a:	0003      	movs	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	197c      	adds	r4, r7, r5
 8000954:	19ba      	adds	r2, r7, r6
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2307      	movs	r3, #7
 800095e:	2136      	movs	r1, #54	@ 0x36
 8000960:	f002 fc52 	bl	8003208 <HAL_I2C_Master_Receive>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000968:	197b      	adds	r3, r7, r5
 800096a:	781b      	ldrb	r3, [r3, #0]

}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	@ 0x24
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	080068d8 	.word	0x080068d8
 8000978:	080068c8 	.word	0x080068c8

0800097c <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


HAL_StatusTypeDef initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b09a      	sub	sp, #104	@ 0x68
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000988:	2567      	movs	r5, #103	@ 0x67
 800098a:	197b      	adds	r3, r7, r5
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 8000990:	243c      	movs	r4, #60	@ 0x3c
 8000992:	193b      	adds	r3, r7, r4
 8000994:	0018      	movs	r0, r3
 8000996:	2328      	movs	r3, #40	@ 0x28
 8000998:	001a      	movs	r2, r3
 800099a:	2100      	movs	r1, #0
 800099c:	f005 ff4c 	bl	8006838 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	781a      	ldrb	r2, [r3, #0]
 80009a4:	0021      	movs	r1, r4
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	789a      	ldrb	r2, [r3, #2]
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	78da      	ldrb	r2, [r3, #3]
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	78da      	ldrb	r2, [r3, #3]
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009d6:	0008      	movs	r0, r1
 80009d8:	183b      	adds	r3, r7, r0
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009de:	183b      	adds	r3, r7, r0
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80009e4:	183b      	adds	r3, r7, r0
 80009e6:	4a19      	ldr	r2, [pc, #100]	@ (8000a4c <initRTCInternalAlarm+0xd0>)
 80009e8:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009ea:	183b      	adds	r3, r7, r0
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009f0:	183b      	adds	r3, r7, r0
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 80009f6:	183b      	adds	r3, r7, r0
 80009f8:	2220      	movs	r2, #32
 80009fa:	2101      	movs	r1, #1
 80009fc:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 80009fe:	0001      	movs	r1, r0
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2280      	movs	r2, #128	@ 0x80
 8000a04:	0052      	lsls	r2, r2, #1
 8000a06:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8000a08:	197c      	adds	r4, r7, r5
 8000a0a:	1879      	adds	r1, r7, r1
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f004 f9e7 	bl	8004de4 <HAL_RTC_SetAlarm_IT>
 8000a16:	0003      	movs	r3, r0
 8000a18:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000a1a:	197b      	adds	r3, r7, r5
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <initRTCInternalAlarm+0xac>
		return halRet;
 8000a22:	197b      	adds	r3, r7, r5
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	e00d      	b.n	8000a44 <initRTCInternalAlarm+0xc8>

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8000a28:	2567      	movs	r5, #103	@ 0x67
 8000a2a:	197c      	adds	r4, r7, r5
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	005a      	lsls	r2, r3, #1
 8000a30:	2314      	movs	r3, #20
 8000a32:	18f9      	adds	r1, r7, r3
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	2300      	movs	r3, #0
 8000a38:	f004 fb14 	bl	8005064 <HAL_RTC_GetAlarm>
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	7023      	strb	r3, [r4, #0]
	return halRet;
 8000a40:	197b      	adds	r3, r7, r5
 8000a42:	781b      	ldrb	r3, [r3, #0]

}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b01a      	add	sp, #104	@ 0x68
 8000a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a4c:	80800080 	.word	0x80800080

08000a50 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2200      	movs	r2, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f004 f882 	bl	8004b6c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f004 f96a 	bl	8004d48 <HAL_RTC_GetDate>

}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b004      	add	sp, #16
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	b08d      	sub	sp, #52	@ 0x34
 8000a80:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a82:	f001 fe7b 	bl	800277c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f000 f965 	bl	8000d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f000 fc17 	bl	80012bc <MX_GPIO_Init>
  MX_RTC_Init();
 8000a8e:	f000 fa15 	bl	8000ebc <MX_RTC_Init>
  MX_I2C1_Init();
 8000a92:	f000 f9d3 	bl	8000e3c <MX_I2C1_Init>
  MX_TIM14_Init();
 8000a96:	f000 fbb1 	bl	80011fc <MX_TIM14_Init>
  MX_TIM2_Init();
 8000a9a:	f000 fb4f 	bl	800113c <MX_TIM2_Init>
  MX_TIM16_Init();
 8000a9e:	f000 fbd3 	bl	8001248 <MX_TIM16_Init>
  MX_TIM1_Init();
 8000aa2:	f000 fa9f 	bl	8000fe4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // HAL Status handle for error-checking
  HAL_StatusTypeDef halRet = HAL_OK;
 8000aa6:	2517      	movs	r5, #23
 8000aa8:	197b      	adds	r3, r7, r5
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]

  // Set Smooth Calibration Value
  halRet = HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 8000aae:	4b95      	ldr	r3, [pc, #596]	@ (8000d04 <main+0x288>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	197c      	adds	r4, r7, r5
 8000ab4:	2280      	movs	r2, #128	@ 0x80
 8000ab6:	01d1      	lsls	r1, r2, #7
 8000ab8:	4893      	ldr	r0, [pc, #588]	@ (8000d08 <main+0x28c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	f004 fcc7 	bl	800544e <HAL_RTCEx_SetSmoothCalib>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	7023      	strb	r3, [r4, #0]
    							RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);
  if(halRet != HAL_OK) {
 8000ac4:	197b      	adds	r3, r7, r5
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <main+0x54>
	  // Failure to talk to RTC is a hard failure
	  dispFailure();
 8000acc:	f001 fa18 	bl	8001f00 <dispFailure>
  }

  // Init the internal RTC alarm time to track the current time
  halRet = initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 8000ad0:	2517      	movs	r5, #23
 8000ad2:	197c      	adds	r4, r7, r5
 8000ad4:	4a8d      	ldr	r2, [pc, #564]	@ (8000d0c <main+0x290>)
 8000ad6:	498e      	ldr	r1, [pc, #568]	@ (8000d10 <main+0x294>)
 8000ad8:	4b8b      	ldr	r3, [pc, #556]	@ (8000d08 <main+0x28c>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f7ff ff4e 	bl	800097c <initRTCInternalAlarm>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	7023      	strb	r3, [r4, #0]
  if(halRet != HAL_OK) {
 8000ae4:	197b      	adds	r3, r7, r5
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <main+0x74>
  	  // Failure to initialize RTC alarm is a hard failure
  	  dispFailure();
 8000aec:	f001 fa08 	bl	8001f00 <dispFailure>
    }

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000af0:	2380      	movs	r3, #128	@ 0x80
 8000af2:	009c      	lsls	r4, r3, #2
 8000af4:	2380      	movs	r3, #128	@ 0x80
 8000af6:	00dd      	lsls	r5, r3, #3
 8000af8:	2680      	movs	r6, #128	@ 0x80
 8000afa:	2340      	movs	r3, #64	@ 0x40
 8000afc:	469c      	mov	ip, r3
 8000afe:	2380      	movs	r3, #128	@ 0x80
 8000b00:	011a      	lsls	r2, r3, #4
 8000b02:	4b84      	ldr	r3, [pc, #528]	@ (8000d14 <main+0x298>)
 8000b04:	6819      	ldr	r1, [r3, #0]
 8000b06:	4b84      	ldr	r3, [pc, #528]	@ (8000d18 <main+0x29c>)
 8000b08:	6818      	ldr	r0, [r3, #0]
 8000b0a:	4b84      	ldr	r3, [pc, #528]	@ (8000d1c <main+0x2a0>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	9304      	str	r3, [sp, #16]
 8000b10:	9003      	str	r0, [sp, #12]
 8000b12:	9102      	str	r1, [sp, #8]
 8000b14:	4b82      	ldr	r3, [pc, #520]	@ (8000d20 <main+0x2a4>)
 8000b16:	9301      	str	r3, [sp, #4]
 8000b18:	9200      	str	r2, [sp, #0]
 8000b1a:	4663      	mov	r3, ip
 8000b1c:	0032      	movs	r2, r6
 8000b1e:	0029      	movs	r1, r5
 8000b20:	0020      	movs	r0, r4
 8000b22:	f001 fa5f 	bl	8001fe4 <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);

    // Set to max brightness
    sevSeg_setIntensity(sevSeg_intensityDuty[2]);
 8000b26:	234b      	movs	r3, #75	@ 0x4b
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f001 fb8f 	bl	800224c <sevSeg_setIntensity>

	halRet = updateAndDisplayTime();
 8000b2e:	2517      	movs	r5, #23
 8000b30:	197c      	adds	r4, r7, r5
 8000b32:	f000 fca5 	bl	8001480 <updateAndDisplayTime>
 8000b36:	0003      	movs	r3, r0
 8000b38:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000b3a:	197b      	adds	r3, r7, r5
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <main+0xca>
	  // Failure to display current time is a hard failure
	  dispFailure();
 8000b42:	f001 f9dd 	bl	8001f00 <dispFailure>
    /*
     * Initialize capacitive touch sensor
     */

	// Used to separate return initializations into critical and non-critical errors.
	uint8_t initRet = 0;
 8000b46:	2116      	movs	r1, #22
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]

    initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 8000b4e:	4b71      	ldr	r3, [pc, #452]	@ (8000d14 <main+0x298>)
 8000b50:	681d      	ldr	r5, [r3, #0]
 8000b52:	2380      	movs	r3, #128	@ 0x80
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4a73      	ldr	r2, [pc, #460]	@ (8000d24 <main+0x2a8>)
 8000b58:	7812      	ldrb	r2, [r2, #0]
 8000b5a:	187c      	adds	r4, r7, r1
 8000b5c:	4e72      	ldr	r6, [pc, #456]	@ (8000d28 <main+0x2ac>)
 8000b5e:	4973      	ldr	r1, [pc, #460]	@ (8000d2c <main+0x2b0>)
 8000b60:	4873      	ldr	r0, [pc, #460]	@ (8000d30 <main+0x2b4>)
 8000b62:	9201      	str	r2, [sp, #4]
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	0033      	movs	r3, r6
 8000b68:	002a      	movs	r2, r5
 8000b6a:	f7ff fb57 	bl	800021c <capTouch_Init>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	7023      	strb	r3, [r4, #0]
    						&capTouchResetPort, capTouchResetPin, capTouchChannels);
    if( (initRet == 1) || (initRet == 3) || (initRet == 4)) {
 8000b72:	2116      	movs	r1, #22
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d007      	beq.n	8000b8c <main+0x110>
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d003      	beq.n	8000b8c <main+0x110>
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d102      	bne.n	8000b92 <main+0x116>
    	/* Critical Errors:
    	 * 1 = Failure to read correct device ID
    	 * 2 = Failure to read Keys
    	 * 3 = Failure to enable keys
    	 */
    	dispFailure();
 8000b8c:	f001 f9b8 	bl	8001f00 <dispFailure>
 8000b90:	e00d      	b.n	8000bae <main+0x132>
    }
    else if (initRet == 2) {
 8000b92:	2316      	movs	r3, #22
 8000b94:	18fb      	adds	r3, r7, r3
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d102      	bne.n	8000ba2 <main+0x126>
    	/*
    	 * Non-critical Errors:
    	 * 2 = Failure to Recalibrate
    	 */
    	dispFault();
 8000b9c:	f001 f9a2 	bl	8001ee4 <dispFault>
 8000ba0:	e005      	b.n	8000bae <main+0x132>
    }
    else if(initRet == 0) {
 8000ba2:	2316      	movs	r3, #22
 8000ba4:	18fb      	adds	r3, r7, r3
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d100      	bne.n	8000bae <main+0x132>
    	// initRet = 0 = all is well
    	__NOP();
 8000bac:	46c0      	nop			@ (mov r8, r8)
    }

    // Set averaging factor
    uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 8000bae:	4b61      	ldr	r3, [pc, #388]	@ (8000d34 <main+0x2b8>)
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	210c      	movs	r1, #12
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	4b5e      	ldr	r3, [pc, #376]	@ (8000d34 <main+0x2b8>)
 8000bba:	781a      	ldrb	r2, [r3, #0]
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	705a      	strb	r2, [r3, #1]
 8000bc0:	4b5c      	ldr	r3, [pc, #368]	@ (8000d34 <main+0x2b8>)
 8000bc2:	781a      	ldrb	r2, [r3, #0]
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	709a      	strb	r2, [r3, #2]
 8000bc8:	4b5a      	ldr	r3, [pc, #360]	@ (8000d34 <main+0x2b8>)
 8000bca:	781a      	ldrb	r2, [r3, #0]
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	70da      	strb	r2, [r3, #3]
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	711a      	strb	r2, [r3, #4]
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	715a      	strb	r2, [r3, #5]
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2200      	movs	r2, #0
 8000be0:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000be2:	2517      	movs	r5, #23
 8000be4:	197c      	adds	r4, r7, r5
 8000be6:	187a      	adds	r2, r7, r1
 8000be8:	4b51      	ldr	r3, [pc, #324]	@ (8000d30 <main+0x2b4>)
 8000bea:	0011      	movs	r1, r2
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff fd89 	bl	8000704 <capTouch_SetAveragingFactor>
 8000bf2:	0003      	movs	r3, r0
 8000bf4:	7023      	strb	r3, [r4, #0]

    if(halRet != HAL_OK) {
 8000bf6:	197b      	adds	r3, r7, r5
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <main+0x186>
    	// This is sensitivity-setting and a non-critical error
    	dispFault();
 8000bfe:	f001 f971 	bl	8001ee4 <dispFault>
    }

    // Set detection integration factors
    uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 8000c02:	4b4d      	ldr	r3, [pc, #308]	@ (8000d38 <main+0x2bc>)
 8000c04:	781a      	ldrb	r2, [r3, #0]
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	4b4b      	ldr	r3, [pc, #300]	@ (8000d38 <main+0x2bc>)
 8000c0c:	781a      	ldrb	r2, [r3, #0]
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	705a      	strb	r2, [r3, #1]
 8000c12:	4b49      	ldr	r3, [pc, #292]	@ (8000d38 <main+0x2bc>)
 8000c14:	781a      	ldrb	r2, [r3, #0]
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	709a      	strb	r2, [r3, #2]
 8000c1a:	4b47      	ldr	r3, [pc, #284]	@ (8000d38 <main+0x2bc>)
 8000c1c:	781a      	ldrb	r2, [r3, #0]
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	70da      	strb	r2, [r3, #3]
 8000c22:	4b45      	ldr	r3, [pc, #276]	@ (8000d38 <main+0x2bc>)
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	711a      	strb	r2, [r3, #4]
 8000c2a:	4b43      	ldr	r3, [pc, #268]	@ (8000d38 <main+0x2bc>)
 8000c2c:	781a      	ldrb	r2, [r3, #0]
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	715a      	strb	r2, [r3, #5]
 8000c32:	4b41      	ldr	r3, [pc, #260]	@ (8000d38 <main+0x2bc>)
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 8000c3a:	2517      	movs	r5, #23
 8000c3c:	197c      	adds	r4, r7, r5
 8000c3e:	1d3a      	adds	r2, r7, #4
 8000c40:	4b3b      	ldr	r3, [pc, #236]	@ (8000d30 <main+0x2b4>)
 8000c42:	0011      	movs	r1, r2
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff fe27 	bl	8000898 <capTouch_SetDetectionIntegrator>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	7023      	strb	r3, [r4, #0]
    if(halRet != HAL_OK) {
 8000c4e:	197b      	adds	r3, r7, r5
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <main+0x1de>
    	// This is sensitivity-setting and a non-critical error
		dispFault();
 8000c56:	f001 f945 	bl	8001ee4 <dispFault>
    }

    userAlarmToggle = false;			//Default to off
 8000c5a:	4b38      	ldr	r3, [pc, #224]	@ (8000d3c <main+0x2c0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
     * initialize the alarm time to a default value.
     *
     * Else, initialize to whatever is stored in backup registers.
     */

    if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 8000c60:	4b37      	ldr	r3, [pc, #220]	@ (8000d40 <main+0x2c4>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b28      	ldr	r3, [pc, #160]	@ (8000d08 <main+0x28c>)
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f004 fcc0 	bl	80055ee <HAL_RTCEx_BKUPRead>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d11c      	bne.n	8000cb0 <main+0x234>

    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 8000c76:	4b33      	ldr	r3, [pc, #204]	@ (8000d44 <main+0x2c8>)
 8000c78:	6819      	ldr	r1, [r3, #0]
 8000c7a:	4b23      	ldr	r3, [pc, #140]	@ (8000d08 <main+0x28c>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f004 fc98 	bl	80055b4 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 8000c84:	4b30      	ldr	r3, [pc, #192]	@ (8000d48 <main+0x2cc>)
 8000c86:	6819      	ldr	r1, [r3, #0]
 8000c88:	4b1f      	ldr	r3, [pc, #124]	@ (8000d08 <main+0x28c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f004 fc91 	bl	80055b4 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 8000c92:	4b2e      	ldr	r3, [pc, #184]	@ (8000d4c <main+0x2d0>)
 8000c94:	6819      	ldr	r1, [r3, #0]
 8000c96:	4b1c      	ldr	r3, [pc, #112]	@ (8000d08 <main+0x28c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f004 fc8a 	bl	80055b4 <HAL_RTCEx_BKUPWrite>

    	// Write backup register with a non-zero value to signify that it has been initialized before
    	HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8000ca0:	4b27      	ldr	r3, [pc, #156]	@ (8000d40 <main+0x2c4>)
 8000ca2:	6819      	ldr	r1, [r3, #0]
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	425a      	negs	r2, r3
 8000ca8:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <main+0x28c>)
 8000caa:	0018      	movs	r0, r3
 8000cac:	f004 fc82 	bl	80055b4 <HAL_RTCEx_BKUPWrite>

    }

	userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8000cb0:	4b24      	ldr	r3, [pc, #144]	@ (8000d44 <main+0x2c8>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <main+0x28c>)
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f004 fc98 	bl	80055ee <HAL_RTCEx_BKUPRead>
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b23      	ldr	r3, [pc, #140]	@ (8000d50 <main+0x2d4>)
 8000cc4:	701a      	strb	r2, [r3, #0]
	userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 8000cc6:	4b20      	ldr	r3, [pc, #128]	@ (8000d48 <main+0x2cc>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <main+0x28c>)
 8000ccc:	0011      	movs	r1, r2
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f004 fc8d 	bl	80055ee <HAL_RTCEx_BKUPRead>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d50 <main+0x2d4>)
 8000cda:	705a      	strb	r2, [r3, #1]
	userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <main+0x2d0>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <main+0x28c>)
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f004 fc82 	bl	80055ee <HAL_RTCEx_BKUPRead>
 8000cea:	0003      	movs	r3, r0
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <main+0x2d4>)
 8000cf0:	70da      	strb	r2, [r3, #3]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  userAlarmBeep();
 8000cf2:	f000 fc53 	bl	800159c <userAlarmBeep>
	  HAL_Delay(1000);
 8000cf6:	23fa      	movs	r3, #250	@ 0xfa
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f001 fdc4 	bl	8002888 <HAL_Delay>
	  userAlarmBeep();
 8000d00:	46c0      	nop			@ (mov r8, r8)
 8000d02:	e7f6      	b.n	8000cf2 <main+0x276>
 8000d04:	2000002c 	.word	0x2000002c
 8000d08:	2000011c 	.word	0x2000011c
 8000d0c:	200000ac 	.word	0x200000ac
 8000d10:	20000098 	.word	0x20000098
 8000d14:	20000044 	.word	0x20000044
 8000d18:	20000040 	.word	0x20000040
 8000d1c:	20000030 	.word	0x20000030
 8000d20:	20000014 	.word	0x20000014
 8000d24:	2000000c 	.word	0x2000000c
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	200000c8 	.word	0x200000c8
 8000d30:	2000027c 	.word	0x2000027c
 8000d34:	2000000d 	.word	0x2000000d
 8000d38:	2000000e 	.word	0x2000000e
 8000d3c:	20000091 	.word	0x20000091
 8000d40:	2000003c 	.word	0x2000003c
 8000d44:	200000c4 	.word	0x200000c4
 8000d48:	20000034 	.word	0x20000034
 8000d4c:	20000038 	.word	0x20000038
 8000d50:	200000b0 	.word	0x200000b0

08000d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b093      	sub	sp, #76	@ 0x4c
 8000d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5a:	2410      	movs	r4, #16
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	0018      	movs	r0, r3
 8000d60:	2338      	movs	r3, #56	@ 0x38
 8000d62:	001a      	movs	r2, r3
 8000d64:	2100      	movs	r1, #0
 8000d66:	f005 fd67 	bl	8006838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6a:	003b      	movs	r3, r7
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	2310      	movs	r3, #16
 8000d70:	001a      	movs	r2, r3
 8000d72:	2100      	movs	r1, #0
 8000d74:	f005 fd60 	bl	8006838 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d78:	2380      	movs	r3, #128	@ 0x80
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f002 fed5 	bl	8003b2c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d82:	f002 feb5 	bl	8003af0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 8000d86:	4b2c      	ldr	r3, [pc, #176]	@ (8000e38 <SystemClock_Config+0xe4>)
 8000d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d8a:	2218      	movs	r2, #24
 8000d8c:	4393      	bics	r3, r2
 8000d8e:	001a      	movs	r2, r3
 8000d90:	4b29      	ldr	r3, [pc, #164]	@ (8000e38 <SystemClock_Config+0xe4>)
 8000d92:	2108      	movs	r1, #8
 8000d94:	430a      	orrs	r2, r1
 8000d96:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000d98:	193b      	adds	r3, r7, r4
 8000d9a:	220e      	movs	r2, #14
 8000d9c:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d9e:	193b      	adds	r3, r7, r4
 8000da0:	2201      	movs	r2, #1
 8000da2:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da4:	193b      	adds	r3, r7, r4
 8000da6:	2280      	movs	r2, #128	@ 0x80
 8000da8:	0052      	lsls	r2, r2, #1
 8000daa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000dac:	0021      	movs	r1, r4
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2240      	movs	r2, #64	@ 0x40
 8000db8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2202      	movs	r2, #2
 8000dca:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2208      	movs	r2, #8
 8000dd6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2280      	movs	r2, #128	@ 0x80
 8000ddc:	0292      	lsls	r2, r2, #10
 8000dde:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2280      	movs	r2, #128	@ 0x80
 8000de4:	0492      	lsls	r2, r2, #18
 8000de6:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2280      	movs	r2, #128	@ 0x80
 8000dec:	0592      	lsls	r2, r2, #22
 8000dee:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	0018      	movs	r0, r3
 8000df4:	f002 feda 	bl	8003bac <HAL_RCC_OscConfig>
 8000df8:	1e03      	subs	r3, r0, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000dfc:	f001 f8ec 	bl	8001fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e00:	003b      	movs	r3, r7
 8000e02:	2207      	movs	r2, #7
 8000e04:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e06:	003b      	movs	r3, r7
 8000e08:	2202      	movs	r2, #2
 8000e0a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0c:	003b      	movs	r3, r7
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e12:	003b      	movs	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e18:	003b      	movs	r3, r7
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f003 f9df 	bl	80041e0 <HAL_RCC_ClockConfig>
 8000e22:	1e03      	subs	r3, r0, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000e26:	f001 f8d7 	bl	8001fd8 <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f003 fcdc 	bl	80047e8 <HAL_RCCEx_EnableLSCO>
}
 8000e30:	46c0      	nop			@ (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b013      	add	sp, #76	@ 0x4c
 8000e36:	bd90      	pop	{r4, r7, pc}
 8000e38:	40021000 	.word	0x40021000

08000e3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e42:	4a1c      	ldr	r2, [pc, #112]	@ (8000eb4 <MX_I2C1_Init+0x78>)
 8000e44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000e46:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e48:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb8 <MX_I2C1_Init+0x7c>)
 8000e4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e4c:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e52:	4b17      	ldr	r3, [pc, #92]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e58:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e5e:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e64:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e76:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f001 fff5 	bl	8002e68 <HAL_I2C_Init>
 8000e7e:	1e03      	subs	r3, r0, #0
 8000e80:	d001      	beq.n	8000e86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e82:	f001 f8a9 	bl	8001fd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e86:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f002 fd98 	bl	80039c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000e90:	1e03      	subs	r3, r0, #0
 8000e92:	d001      	beq.n	8000e98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e94:	f001 f8a0 	bl	8001fd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e98:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f002 fddb 	bl	8003a58 <HAL_I2CEx_ConfigDigitalFilter>
 8000ea2:	1e03      	subs	r3, r0, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ea6:	f001 f897 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200000c8 	.word	0x200000c8
 8000eb4:	40005400 	.word	0x40005400
 8000eb8:	00602173 	.word	0x00602173

08000ebc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08c      	sub	sp, #48	@ 0x30
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

//  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 8000ec2:	232c      	movs	r3, #44	@ 0x2c
 8000ec4:	18fb      	adds	r3, r7, r3
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	0018      	movs	r0, r3
 8000ece:	2328      	movs	r3, #40	@ 0x28
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	f005 fcb0 	bl	8006838 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd4 <MX_RTC_Init+0x118>)
 8000eda:	4a3f      	ldr	r2, [pc, #252]	@ (8000fd8 <MX_RTC_Init+0x11c>)
 8000edc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000ede:	4b3d      	ldr	r3, [pc, #244]	@ (8000fd4 <MX_RTC_Init+0x118>)
 8000ee0:	2240      	movs	r2, #64	@ 0x40
 8000ee2:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8000fd4 <MX_RTC_Init+0x118>)
 8000ee6:	227f      	movs	r2, #127	@ 0x7f
 8000ee8:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000eea:	4b3a      	ldr	r3, [pc, #232]	@ (8000fd4 <MX_RTC_Init+0x118>)
 8000eec:	22ff      	movs	r2, #255	@ 0xff
 8000eee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ef0:	4b38      	ldr	r3, [pc, #224]	@ (8000fd4 <MX_RTC_Init+0x118>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ef6:	4b37      	ldr	r3, [pc, #220]	@ (8000fd4 <MX_RTC_Init+0x118>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000efc:	4b35      	ldr	r3, [pc, #212]	@ (8000fd4 <MX_RTC_Init+0x118>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f02:	4b34      	ldr	r3, [pc, #208]	@ (8000fd4 <MX_RTC_Init+0x118>)
 8000f04:	2280      	movs	r2, #128	@ 0x80
 8000f06:	05d2      	lsls	r2, r2, #23
 8000f08:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000f0a:	4b32      	ldr	r3, [pc, #200]	@ (8000fd4 <MX_RTC_Init+0x118>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f10:	4b30      	ldr	r3, [pc, #192]	@ (8000fd4 <MX_RTC_Init+0x118>)
 8000f12:	0018      	movs	r0, r3
 8000f14:	f003 fce0 	bl	80048d8 <HAL_RTC_Init>
 8000f18:	1e03      	subs	r3, r0, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 8000f1c:	f001 f85c 	bl	8001fd8 <Error_Handler>
//  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
//  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
//  {
//    Error_Handler();
//  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f20:	212c      	movs	r1, #44	@ 0x2c
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	2201      	movs	r2, #1
 8000f32:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2200      	movs	r2, #0
 8000f38:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f3a:	1879      	adds	r1, r7, r1
 8000f3c:	4b25      	ldr	r3, [pc, #148]	@ (8000fd4 <MX_RTC_Init+0x118>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	0018      	movs	r0, r3
 8000f42:	f003 fe6f 	bl	8004c24 <HAL_RTC_SetDate>
 8000f46:	1e03      	subs	r3, r0, #0
 8000f48:	d001      	beq.n	8000f4e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000f4a:	f001 f845 	bl	8001fd8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2201      	movs	r2, #1
 8000f58:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2200      	movs	r2, #0
 8000f64:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	4a18      	ldr	r2, [pc, #96]	@ (8000fdc <MX_RTC_Init+0x120>)
 8000f7c:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	2101      	movs	r1, #1
 8000f90:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2280      	movs	r2, #128	@ 0x80
 8000f96:	0052      	lsls	r2, r2, #1
 8000f98:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000f9a:	1d39      	adds	r1, r7, #4
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <MX_RTC_Init+0x118>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f003 ff1f 	bl	8004de4 <HAL_RTC_SetAlarm_IT>
 8000fa6:	1e03      	subs	r3, r0, #0
 8000fa8:	d001      	beq.n	8000fae <MX_RTC_Init+0xf2>
  {
    Error_Handler();
 8000faa:	f001 f815 	bl	8001fd8 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_RTC_Init+0x118>)
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f004 faae 	bl	8005514 <HAL_RTCEx_SetCalibrationOutPut>
 8000fb8:	1e03      	subs	r3, r0, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_RTC_Init+0x104>
  {
    Error_Handler();
 8000fbc:	f001 f80c 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8000fc0:	4907      	ldr	r1, [pc, #28]	@ (8000fe0 <MX_RTC_Init+0x124>)
 8000fc2:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <MX_RTC_Init+0x118>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f003 fdd0 	bl	8004b6c <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 8000fcc:	46c0      	nop			@ (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b00c      	add	sp, #48	@ 0x30
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	2000011c 	.word	0x2000011c
 8000fd8:	40002800 	.word	0x40002800
 8000fdc:	80800080 	.word	0x80800080
 8000fe0:	20000098 	.word	0x20000098

08000fe4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b098      	sub	sp, #96	@ 0x60
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fea:	2354      	movs	r3, #84	@ 0x54
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	0018      	movs	r0, r3
 8000ff0:	230c      	movs	r3, #12
 8000ff2:	001a      	movs	r2, r3
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	f005 fc1f 	bl	8006838 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffa:	2338      	movs	r3, #56	@ 0x38
 8000ffc:	18fb      	adds	r3, r7, r3
 8000ffe:	0018      	movs	r0, r3
 8001000:	231c      	movs	r3, #28
 8001002:	001a      	movs	r2, r3
 8001004:	2100      	movs	r1, #0
 8001006:	f005 fc17 	bl	8006838 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	0018      	movs	r0, r3
 800100e:	2334      	movs	r3, #52	@ 0x34
 8001010:	001a      	movs	r2, r3
 8001012:	2100      	movs	r1, #0
 8001014:	f005 fc10 	bl	8006838 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001018:	4b45      	ldr	r3, [pc, #276]	@ (8001130 <MX_TIM1_Init+0x14c>)
 800101a:	4a46      	ldr	r2, [pc, #280]	@ (8001134 <MX_TIM1_Init+0x150>)
 800101c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 40000-1;
 800101e:	4b44      	ldr	r3, [pc, #272]	@ (8001130 <MX_TIM1_Init+0x14c>)
 8001020:	4a45      	ldr	r2, [pc, #276]	@ (8001138 <MX_TIM1_Init+0x154>)
 8001022:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001024:	4b42      	ldr	r3, [pc, #264]	@ (8001130 <MX_TIM1_Init+0x14c>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800102a:	4b41      	ldr	r3, [pc, #260]	@ (8001130 <MX_TIM1_Init+0x14c>)
 800102c:	2263      	movs	r2, #99	@ 0x63
 800102e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001030:	4b3f      	ldr	r3, [pc, #252]	@ (8001130 <MX_TIM1_Init+0x14c>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001036:	4b3e      	ldr	r3, [pc, #248]	@ (8001130 <MX_TIM1_Init+0x14c>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103c:	4b3c      	ldr	r3, [pc, #240]	@ (8001130 <MX_TIM1_Init+0x14c>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001042:	4b3b      	ldr	r3, [pc, #236]	@ (8001130 <MX_TIM1_Init+0x14c>)
 8001044:	0018      	movs	r0, r3
 8001046:	f004 fc39 	bl	80058bc <HAL_TIM_PWM_Init>
 800104a:	1e03      	subs	r3, r0, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800104e:	f000 ffc3 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001052:	2154      	movs	r1, #84	@ 0x54
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800105a:	187b      	adds	r3, r7, r1
 800105c:	2200      	movs	r2, #0
 800105e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001060:	187b      	adds	r3, r7, r1
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001066:	187a      	adds	r2, r7, r1
 8001068:	4b31      	ldr	r3, [pc, #196]	@ (8001130 <MX_TIM1_Init+0x14c>)
 800106a:	0011      	movs	r1, r2
 800106c:	0018      	movs	r0, r3
 800106e:	f005 fac7 	bl	8006600 <HAL_TIMEx_MasterConfigSynchronization>
 8001072:	1e03      	subs	r3, r0, #0
 8001074:	d001      	beq.n	800107a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001076:	f000 ffaf 	bl	8001fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800107a:	2138      	movs	r1, #56	@ 0x38
 800107c:	187b      	adds	r3, r7, r1
 800107e:	2260      	movs	r2, #96	@ 0x60
 8001080:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001082:	187b      	adds	r3, r7, r1
 8001084:	2200      	movs	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001088:	187b      	adds	r3, r7, r1
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800108e:	187b      	adds	r3, r7, r1
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010a6:	1879      	adds	r1, r7, r1
 80010a8:	4b21      	ldr	r3, [pc, #132]	@ (8001130 <MX_TIM1_Init+0x14c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	0018      	movs	r0, r3
 80010ae:	f004 fe43 	bl	8005d38 <HAL_TIM_PWM_ConfigChannel>
 80010b2:	1e03      	subs	r3, r0, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80010b6:	f000 ff8f 	bl	8001fd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	2280      	movs	r2, #128	@ 0x80
 80010dc:	0192      	lsls	r2, r2, #6
 80010de:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2280      	movs	r2, #128	@ 0x80
 80010f6:	0492      	lsls	r2, r2, #18
 80010f8:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2200      	movs	r2, #0
 8001104:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2200      	movs	r2, #0
 800110a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800110c:	1d3a      	adds	r2, r7, #4
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <MX_TIM1_Init+0x14c>)
 8001110:	0011      	movs	r1, r2
 8001112:	0018      	movs	r0, r3
 8001114:	f005 fadc 	bl	80066d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001118:	1e03      	subs	r3, r0, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 800111c:	f000 ff5c 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001120:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <MX_TIM1_Init+0x14c>)
 8001122:	0018      	movs	r0, r3
 8001124:	f001 fa3a 	bl	800259c <HAL_TIM_MspPostInit>

}
 8001128:	46c0      	nop			@ (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b018      	add	sp, #96	@ 0x60
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000148 	.word	0x20000148
 8001134:	40012c00 	.word	0x40012c00
 8001138:	00009c3f 	.word	0x00009c3f

0800113c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	@ 0x28
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001142:	231c      	movs	r3, #28
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	0018      	movs	r0, r3
 8001148:	230c      	movs	r3, #12
 800114a:	001a      	movs	r2, r3
 800114c:	2100      	movs	r1, #0
 800114e:	f005 fb73 	bl	8006838 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001152:	003b      	movs	r3, r7
 8001154:	0018      	movs	r0, r3
 8001156:	231c      	movs	r3, #28
 8001158:	001a      	movs	r2, r3
 800115a:	2100      	movs	r1, #0
 800115c:	f005 fb6c 	bl	8006838 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001160:	4b24      	ldr	r3, [pc, #144]	@ (80011f4 <MX_TIM2_Init+0xb8>)
 8001162:	2280      	movs	r2, #128	@ 0x80
 8001164:	05d2      	lsls	r2, r2, #23
 8001166:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8001168:	4b22      	ldr	r3, [pc, #136]	@ (80011f4 <MX_TIM2_Init+0xb8>)
 800116a:	4a23      	ldr	r2, [pc, #140]	@ (80011f8 <MX_TIM2_Init+0xbc>)
 800116c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116e:	4b21      	ldr	r3, [pc, #132]	@ (80011f4 <MX_TIM2_Init+0xb8>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001174:	4b1f      	ldr	r3, [pc, #124]	@ (80011f4 <MX_TIM2_Init+0xb8>)
 8001176:	2263      	movs	r2, #99	@ 0x63
 8001178:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117a:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <MX_TIM2_Init+0xb8>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001180:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <MX_TIM2_Init+0xb8>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001186:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <MX_TIM2_Init+0xb8>)
 8001188:	0018      	movs	r0, r3
 800118a:	f004 fb97 	bl	80058bc <HAL_TIM_PWM_Init>
 800118e:	1e03      	subs	r3, r0, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001192:	f000 ff21 	bl	8001fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001196:	211c      	movs	r1, #28
 8001198:	187b      	adds	r3, r7, r1
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119e:	187b      	adds	r3, r7, r1
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011a4:	187a      	adds	r2, r7, r1
 80011a6:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <MX_TIM2_Init+0xb8>)
 80011a8:	0011      	movs	r1, r2
 80011aa:	0018      	movs	r0, r3
 80011ac:	f005 fa28 	bl	8006600 <HAL_TIMEx_MasterConfigSynchronization>
 80011b0:	1e03      	subs	r3, r0, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80011b4:	f000 ff10 	bl	8001fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b8:	003b      	movs	r3, r7
 80011ba:	2260      	movs	r2, #96	@ 0x60
 80011bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80011be:	003b      	movs	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c4:	003b      	movs	r3, r7
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ca:	003b      	movs	r3, r7
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011d0:	0039      	movs	r1, r7
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <MX_TIM2_Init+0xb8>)
 80011d4:	2208      	movs	r2, #8
 80011d6:	0018      	movs	r0, r3
 80011d8:	f004 fdae 	bl	8005d38 <HAL_TIM_PWM_ConfigChannel>
 80011dc:	1e03      	subs	r3, r0, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80011e0:	f000 fefa 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011e4:	4b03      	ldr	r3, [pc, #12]	@ (80011f4 <MX_TIM2_Init+0xb8>)
 80011e6:	0018      	movs	r0, r3
 80011e8:	f001 f9d8 	bl	800259c <HAL_TIM_MspPostInit>

}
 80011ec:	46c0      	nop			@ (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b00a      	add	sp, #40	@ 0x28
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000194 	.word	0x20000194
 80011f8:	0000031f 	.word	0x0000031f

080011fc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001200:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <MX_TIM14_Init+0x40>)
 8001202:	4a0f      	ldr	r2, [pc, #60]	@ (8001240 <MX_TIM14_Init+0x44>)
 8001204:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8001206:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <MX_TIM14_Init+0x40>)
 8001208:	22f4      	movs	r2, #244	@ 0xf4
 800120a:	0092      	lsls	r2, r2, #2
 800120c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <MX_TIM14_Init+0x40>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001214:	4b09      	ldr	r3, [pc, #36]	@ (800123c <MX_TIM14_Init+0x40>)
 8001216:	4a0b      	ldr	r2, [pc, #44]	@ (8001244 <MX_TIM14_Init+0x48>)
 8001218:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <MX_TIM14_Init+0x40>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <MX_TIM14_Init+0x40>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001226:	4b05      	ldr	r3, [pc, #20]	@ (800123c <MX_TIM14_Init+0x40>)
 8001228:	0018      	movs	r0, r3
 800122a:	f004 f9fb 	bl	8005624 <HAL_TIM_Base_Init>
 800122e:	1e03      	subs	r3, r0, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001232:	f000 fed1 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001236:	46c0      	nop			@ (mov r8, r8)
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200001e0 	.word	0x200001e0
 8001240:	40002000 	.word	0x40002000
 8001244:	0000ffff 	.word	0x0000ffff

08001248 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800124c:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <MX_TIM16_Init+0x60>)
 800124e:	4a17      	ldr	r2, [pc, #92]	@ (80012ac <MX_TIM16_Init+0x64>)
 8001250:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = (58595 / 10) - 1;
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <MX_TIM16_Init+0x60>)
 8001254:	4a16      	ldr	r2, [pc, #88]	@ (80012b0 <MX_TIM16_Init+0x68>)
 8001256:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001258:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <MX_TIM16_Init+0x60>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800125e:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <MX_TIM16_Init+0x60>)
 8001260:	4a14      	ldr	r2, [pc, #80]	@ (80012b4 <MX_TIM16_Init+0x6c>)
 8001262:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <MX_TIM16_Init+0x60>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 10;
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <MX_TIM16_Init+0x60>)
 800126c:	220a      	movs	r2, #10
 800126e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001270:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <MX_TIM16_Init+0x60>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <MX_TIM16_Init+0x60>)
 8001278:	0018      	movs	r0, r3
 800127a:	f004 f9d3 	bl	8005624 <HAL_TIM_Base_Init>
 800127e:	1e03      	subs	r3, r0, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001282:	f000 fea9 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  // Decrease interrupt priority
  HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2101      	movs	r1, #1
 800128a:	2015      	movs	r0, #21
 800128c:	f001 fbcc 	bl	8002a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001290:	2015      	movs	r0, #21
 8001292:	f001 fbde 	bl	8002a52 <HAL_NVIC_EnableIRQ>

  // Clear SR interrupts
  __HAL_TIM_CLEAR_IT(timerSnooze, TIM_IT_UPDATE);
 8001296:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <MX_TIM16_Init+0x70>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2202      	movs	r2, #2
 800129e:	4252      	negs	r2, r2
 80012a0:	611a      	str	r2, [r3, #16]
//	timerSnooze->Instance->RCR |= timerSnooze_RCR;


  /* USER CODE END TIM16_Init 2 */

}
 80012a2:	46c0      	nop			@ (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000022c 	.word	0x2000022c
 80012ac:	40014400 	.word	0x40014400
 80012b0:	000016e2 	.word	0x000016e2
 80012b4:	0000ffff 	.word	0x0000ffff
 80012b8:	20000048 	.word	0x20000048

080012bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b08b      	sub	sp, #44	@ 0x2c
 80012c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	2414      	movs	r4, #20
 80012c4:	193b      	adds	r3, r7, r4
 80012c6:	0018      	movs	r0, r3
 80012c8:	2314      	movs	r3, #20
 80012ca:	001a      	movs	r2, r3
 80012cc:	2100      	movs	r1, #0
 80012ce:	f005 fab3 	bl	8006838 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	4b66      	ldr	r3, [pc, #408]	@ (800146c <MX_GPIO_Init+0x1b0>)
 80012d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012d6:	4b65      	ldr	r3, [pc, #404]	@ (800146c <MX_GPIO_Init+0x1b0>)
 80012d8:	2104      	movs	r1, #4
 80012da:	430a      	orrs	r2, r1
 80012dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80012de:	4b63      	ldr	r3, [pc, #396]	@ (800146c <MX_GPIO_Init+0x1b0>)
 80012e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012e2:	2204      	movs	r2, #4
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b60      	ldr	r3, [pc, #384]	@ (800146c <MX_GPIO_Init+0x1b0>)
 80012ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012ee:	4b5f      	ldr	r3, [pc, #380]	@ (800146c <MX_GPIO_Init+0x1b0>)
 80012f0:	2101      	movs	r1, #1
 80012f2:	430a      	orrs	r2, r1
 80012f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80012f6:	4b5d      	ldr	r3, [pc, #372]	@ (800146c <MX_GPIO_Init+0x1b0>)
 80012f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012fa:	2201      	movs	r2, #1
 80012fc:	4013      	ands	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001302:	4b5a      	ldr	r3, [pc, #360]	@ (800146c <MX_GPIO_Init+0x1b0>)
 8001304:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001306:	4b59      	ldr	r3, [pc, #356]	@ (800146c <MX_GPIO_Init+0x1b0>)
 8001308:	2108      	movs	r1, #8
 800130a:	430a      	orrs	r2, r1
 800130c:	635a      	str	r2, [r3, #52]	@ 0x34
 800130e:	4b57      	ldr	r3, [pc, #348]	@ (800146c <MX_GPIO_Init+0x1b0>)
 8001310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001312:	2208      	movs	r2, #8
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b54      	ldr	r3, [pc, #336]	@ (800146c <MX_GPIO_Init+0x1b0>)
 800131c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800131e:	4b53      	ldr	r3, [pc, #332]	@ (800146c <MX_GPIO_Init+0x1b0>)
 8001320:	2102      	movs	r1, #2
 8001322:	430a      	orrs	r2, r1
 8001324:	635a      	str	r2, [r3, #52]	@ 0x34
 8001326:	4b51      	ldr	r3, [pc, #324]	@ (800146c <MX_GPIO_Init+0x1b0>)
 8001328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800132a:	2202      	movs	r2, #2
 800132c:	4013      	ands	r3, r2
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin
 8001332:	494f      	ldr	r1, [pc, #316]	@ (8001470 <MX_GPIO_Init+0x1b4>)
 8001334:	23a0      	movs	r3, #160	@ 0xa0
 8001336:	05db      	lsls	r3, r3, #23
 8001338:	2200      	movs	r2, #0
 800133a:	0018      	movs	r0, r3
 800133c:	f001 fd27 	bl	8002d8e <HAL_GPIO_WritePin>
                          |ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8001340:	4b4c      	ldr	r3, [pc, #304]	@ (8001474 <MX_GPIO_Init+0x1b8>)
 8001342:	2200      	movs	r2, #0
 8001344:	2180      	movs	r1, #128	@ 0x80
 8001346:	0018      	movs	r0, r3
 8001348:	f001 fd21 	bl	8002d8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_RST_GPIO_Port, CTOUCH_RST_Pin, GPIO_PIN_RESET);
 800134c:	2380      	movs	r3, #128	@ 0x80
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4849      	ldr	r0, [pc, #292]	@ (8001478 <MX_GPIO_Init+0x1bc>)
 8001352:	2200      	movs	r2, #0
 8001354:	0019      	movs	r1, r3
 8001356:	f001 fd1a 	bl	8002d8e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin SHIFT_MCLR_Pin
                           ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin
 800135a:	193b      	adds	r3, r7, r4
 800135c:	4a44      	ldr	r2, [pc, #272]	@ (8001470 <MX_GPIO_Init+0x1b4>)
 800135e:	601a      	str	r2, [r3, #0]
                          |ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	193b      	adds	r3, r7, r4
 8001362:	2201      	movs	r2, #1
 8001364:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	193b      	adds	r3, r7, r4
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	193b      	adds	r3, r7, r4
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	193a      	adds	r2, r7, r4
 8001374:	23a0      	movs	r3, #160	@ 0xa0
 8001376:	05db      	lsls	r3, r3, #23
 8001378:	0011      	movs	r1, r2
 800137a:	0018      	movs	r0, r3
 800137c:	f001 fb86 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001380:	193b      	adds	r3, r7, r4
 8001382:	2204      	movs	r2, #4
 8001384:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001386:	193b      	adds	r3, r7, r4
 8001388:	2203      	movs	r2, #3
 800138a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	193b      	adds	r3, r7, r4
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	193a      	adds	r2, r7, r4
 8001394:	23a0      	movs	r3, #160	@ 0xa0
 8001396:	05db      	lsls	r3, r3, #23
 8001398:	0011      	movs	r1, r2
 800139a:	0018      	movs	r0, r3
 800139c:	f001 fb76 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 80013a0:	193b      	adds	r3, r7, r4
 80013a2:	2280      	movs	r2, #128	@ 0x80
 80013a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	193b      	adds	r3, r7, r4
 80013a8:	2201      	movs	r2, #1
 80013aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	193b      	adds	r3, r7, r4
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	193b      	adds	r3, r7, r4
 80013b4:	2200      	movs	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 80013b8:	193b      	adds	r3, r7, r4
 80013ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001474 <MX_GPIO_Init+0x1b8>)
 80013bc:	0019      	movs	r1, r3
 80013be:	0010      	movs	r0, r2
 80013c0:	f001 fb64 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 80013c4:	193b      	adds	r3, r7, r4
 80013c6:	2280      	movs	r2, #128	@ 0x80
 80013c8:	0212      	lsls	r2, r2, #8
 80013ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013cc:	193b      	adds	r3, r7, r4
 80013ce:	2284      	movs	r2, #132	@ 0x84
 80013d0:	0392      	lsls	r2, r2, #14
 80013d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d4:	193b      	adds	r3, r7, r4
 80013d6:	2201      	movs	r2, #1
 80013d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80013da:	193a      	adds	r2, r7, r4
 80013dc:	23a0      	movs	r3, #160	@ 0xa0
 80013de:	05db      	lsls	r3, r3, #23
 80013e0:	0011      	movs	r1, r2
 80013e2:	0018      	movs	r0, r3
 80013e4:	f001 fb52 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 80013e8:	0021      	movs	r1, r4
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	220f      	movs	r2, #15
 80013ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	2284      	movs	r2, #132	@ 0x84
 80013f4:	0392      	lsls	r2, r2, #14
 80013f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	2201      	movs	r2, #1
 80013fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fe:	000c      	movs	r4, r1
 8001400:	187b      	adds	r3, r7, r1
 8001402:	4a1e      	ldr	r2, [pc, #120]	@ (800147c <MX_GPIO_Init+0x1c0>)
 8001404:	0019      	movs	r1, r3
 8001406:	0010      	movs	r0, r2
 8001408:	f001 fb40 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_RST_Pin */
  GPIO_InitStruct.Pin = CTOUCH_RST_Pin;
 800140c:	0021      	movs	r1, r4
 800140e:	187b      	adds	r3, r7, r1
 8001410:	2280      	movs	r2, #128	@ 0x80
 8001412:	0052      	lsls	r2, r2, #1
 8001414:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001416:	187b      	adds	r3, r7, r1
 8001418:	2201      	movs	r2, #1
 800141a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	187b      	adds	r3, r7, r1
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	187b      	adds	r3, r7, r1
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001428:	187b      	adds	r3, r7, r1
 800142a:	4a13      	ldr	r2, [pc, #76]	@ (8001478 <MX_GPIO_Init+0x1bc>)
 800142c:	0019      	movs	r1, r3
 800142e:	0010      	movs	r0, r2
 8001430:	f001 fb2c 	bl	8002a8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	2005      	movs	r0, #5
 800143a:	f001 faf5 	bl	8002a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800143e:	2005      	movs	r0, #5
 8001440:	f001 fb07 	bl	8002a52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	2006      	movs	r0, #6
 800144a:	f001 faed 	bl	8002a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800144e:	2006      	movs	r0, #6
 8001450:	f001 faff 	bl	8002a52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2101      	movs	r1, #1
 8001458:	2007      	movs	r0, #7
 800145a:	f001 fae5 	bl	8002a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800145e:	2007      	movs	r0, #7
 8001460:	f001 faf7 	bl	8002a52 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001464:	46c0      	nop			@ (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	b00b      	add	sp, #44	@ 0x2c
 800146a:	bd90      	pop	{r4, r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	00001e01 	.word	0x00001e01
 8001474:	50000800 	.word	0x50000800
 8001478:	50000400 	.word	0x50000400
 800147c:	50000c00 	.word	0x50000c00

08001480 <updateAndDisplayTime>:
/* USER CODE BEGIN 4 */

/*
 * Pulls updated time from RTC and send new time to user display
 */
HAL_StatusTypeDef updateAndDisplayTime(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001486:	1dfb      	adds	r3, r7, #7
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 800148c:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <updateAndDisplayTime+0x38>)
 800148e:	490b      	ldr	r1, [pc, #44]	@ (80014bc <updateAndDisplayTime+0x3c>)
 8001490:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <updateAndDisplayTime+0x40>)
 8001492:	0018      	movs	r0, r3
 8001494:	f7ff fadc 	bl	8000a50 <getRTCTime>
	 currTime.Hours = 18;
 8001498:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <updateAndDisplayTime+0x3c>)
 800149a:	2212      	movs	r2, #18
 800149c:	701a      	strb	r2, [r3, #0]
  currTime.Minutes = 88;
 800149e:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <updateAndDisplayTime+0x3c>)
 80014a0:	2258      	movs	r2, #88	@ 0x58
 80014a2:	705a      	strb	r2, [r3, #1]
	sevSeg_updateDigits(&currTime);
 80014a4:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <updateAndDisplayTime+0x3c>)
 80014a6:	0018      	movs	r0, r3
 80014a8:	f000 fe1e 	bl	80020e8 <sevSeg_updateDigits>

	return halRet;
 80014ac:	1dfb      	adds	r3, r7, #7
 80014ae:	781b      	ldrb	r3, [r3, #0]

}
 80014b0:	0018      	movs	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b002      	add	sp, #8
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	200000ac 	.word	0x200000ac
 80014bc:	20000098 	.word	0x20000098
 80014c0:	2000011c 	.word	0x2000011c

080014c4 <updateAndDisplayAlarm>:
/*
 * Sends current user alarm time to user display
 * This doesn't pull from the RTC because the RTC alarm is not being used for that
 */

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 80014d0:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <updateAndDisplayAlarm+0x20>)
 80014d2:	0018      	movs	r0, r3
 80014d4:	f000 fe08 	bl	80020e8 <sevSeg_updateDigits>

	return halRet;
 80014d8:	1dfb      	adds	r3, r7, #7
 80014da:	781b      	ldrb	r3, [r3, #0]

}
 80014dc:	0018      	movs	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	b002      	add	sp, #8
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200000b0 	.word	0x200000b0

080014e8 <HAL_RTC_AlarmAEventCallback>:
 * Occurs every minute increment
 *
 * Pulls alarm time from RTC, increments and sets new alarm time, and updates time.
 * Sets off user alarm if the alarm is enabled.
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b08d      	sub	sp, #52	@ 0x34
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

	  RTC_AlarmTypeDef sAlarm = {0};
 80014f0:	2408      	movs	r4, #8
 80014f2:	193b      	adds	r3, r7, r4
 80014f4:	0018      	movs	r0, r3
 80014f6:	2328      	movs	r3, #40	@ 0x28
 80014f8:	001a      	movs	r2, r3
 80014fa:	2100      	movs	r1, #0
 80014fc:	f005 f99c 	bl	8006838 <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8001500:	2380      	movs	r3, #128	@ 0x80
 8001502:	005a      	lsls	r2, r3, #1
 8001504:	1939      	adds	r1, r7, r4
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	2300      	movs	r3, #0
 800150a:	f003 fdab 	bl	8005064 <HAL_RTC_GetAlarm>

	  getRTCTime(hrtc, &currTime, &currDate);
 800150e:	4a1f      	ldr	r2, [pc, #124]	@ (800158c <HAL_RTC_AlarmAEventCallback+0xa4>)
 8001510:	491f      	ldr	r1, [pc, #124]	@ (8001590 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	0018      	movs	r0, r3
 8001516:	f7ff fa9b 	bl	8000a50 <getRTCTime>

	  if(currTime.Minutes > 58) {
 800151a:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <HAL_RTC_AlarmAEventCallback+0xa8>)
 800151c:	785b      	ldrb	r3, [r3, #1]
 800151e:	2b3a      	cmp	r3, #58	@ 0x3a
 8001520:	d903      	bls.n	800152a <HAL_RTC_AlarmAEventCallback+0x42>
		sAlarm.AlarmTime.Minutes = 0;
 8001522:	193b      	adds	r3, r7, r4
 8001524:	2200      	movs	r2, #0
 8001526:	705a      	strb	r2, [r3, #1]
 8001528:	e008      	b.n	800153c <HAL_RTC_AlarmAEventCallback+0x54>
	  } else {
		sAlarm.AlarmTime.Minutes = currTime.Minutes + 1;
 800152a:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <HAL_RTC_AlarmAEventCallback+0xa8>)
 800152c:	785b      	ldrb	r3, [r3, #1]
 800152e:	3301      	adds	r3, #1
 8001530:	b2da      	uxtb	r2, r3
 8001532:	2308      	movs	r3, #8
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001538:	e000      	b.n	800153c <HAL_RTC_AlarmAEventCallback+0x54>

			__NOP();
 800153a:	46c0      	nop			@ (mov r8, r8)
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 800153c:	2308      	movs	r3, #8
 800153e:	18f9      	adds	r1, r7, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	0018      	movs	r0, r3
 8001546:	f003 fc4d 	bl	8004de4 <HAL_RTC_SetAlarm_IT>
 800154a:	1e03      	subs	r3, r0, #0
 800154c:	d1f5      	bne.n	800153a <HAL_RTC_AlarmAEventCallback+0x52>

		}

	  updateAndDisplayTime();
 800154e:	f7ff ff97 	bl	8001480 <updateAndDisplayTime>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 8001552:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <HAL_RTC_AlarmAEventCallback+0xac>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d013      	beq.n	8001582 <HAL_RTC_AlarmAEventCallback+0x9a>
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <HAL_RTC_AlarmAEventCallback+0xb0>)
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d10d      	bne.n	8001582 <HAL_RTC_AlarmAEventCallback+0x9a>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 8001566:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8001568:	785a      	ldrb	r2, [r3, #1]
 800156a:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <HAL_RTC_AlarmAEventCallback+0xa8>)
 800156c:	785b      	ldrb	r3, [r3, #1]
 800156e:	429a      	cmp	r2, r3
 8001570:	d107      	bne.n	8001582 <HAL_RTC_AlarmAEventCallback+0x9a>
 8001572:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8001574:	78da      	ldrb	r2, [r3, #3]
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001578:	78db      	ldrb	r3, [r3, #3]
 800157a:	429a      	cmp	r2, r3
 800157c:	d101      	bne.n	8001582 <HAL_RTC_AlarmAEventCallback+0x9a>
		  userAlarmBeep();
 800157e:	f000 f80d 	bl	800159c <userAlarmBeep>
	  }


}
 8001582:	46c0      	nop			@ (mov r8, r8)
 8001584:	46bd      	mov	sp, r7
 8001586:	b00d      	add	sp, #52	@ 0x34
 8001588:	bd90      	pop	{r4, r7, pc}
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	200000ac 	.word	0x200000ac
 8001590:	20000098 	.word	0x20000098
 8001594:	20000091 	.word	0x20000091
 8001598:	200000b0 	.word	0x200000b0

0800159c <userAlarmBeep>:
 * Functionality depends on whether or not this is the first or second snooze.
 * 		First Snooze: 10-minute timer is started and alarm
 * 		              is beeped again at the end of this 10 minutes.
 * 		Second Snooze: No timer is started and silencing the alarm silences it for good.
 */
void userAlarmBeep() {
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 80015a2:	4bba      	ldr	r3, [pc, #744]	@ (800188c <userAlarmBeep+0x2f0>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d018      	beq.n	80015dc <userAlarmBeep+0x40>

			// Stop the timer and
			HAL_TIM_Base_Stop_IT(timerSnooze);
 80015aa:	4bb9      	ldr	r3, [pc, #740]	@ (8001890 <userAlarmBeep+0x2f4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	0018      	movs	r0, r3
 80015b0:	f004 f956 	bl	8005860 <HAL_TIM_Base_Stop_IT>

			// Reset count to 0
			// only bits 0 - 15 should be changed.
			timerSnooze->Instance->CNT &= 0xFFFF0000;
 80015b4:	4bb6      	ldr	r3, [pc, #728]	@ (8001890 <userAlarmBeep+0x2f4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015bc:	4bb4      	ldr	r3, [pc, #720]	@ (8001890 <userAlarmBeep+0x2f4>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	0c12      	lsrs	r2, r2, #16
 80015c4:	0412      	lsls	r2, r2, #16
 80015c6:	625a      	str	r2, [r3, #36]	@ 0x24

			// Reset interrupt status register
			timerSnooze->Instance->SR &= 0xFFFC;
 80015c8:	4bb1      	ldr	r3, [pc, #708]	@ (8001890 <userAlarmBeep+0x2f4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	4baf      	ldr	r3, [pc, #700]	@ (8001890 <userAlarmBeep+0x2f4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	49af      	ldr	r1, [pc, #700]	@ (8001894 <userAlarmBeep+0x2f8>)
 80015d8:	400a      	ands	r2, r1
 80015da:	611a      	str	r2, [r3, #16]
//			timerSnooze->Instance->RCR &= 0xFF00;
//			timerSnooze->Instance->RCR |= timerSnooze_RCR;

		}

	HAL_TIM_Base_Stop(timerDelay);
 80015dc:	4bae      	ldr	r3, [pc, #696]	@ (8001898 <userAlarmBeep+0x2fc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	0018      	movs	r0, r3
 80015e2:	f004 f8c3 	bl	800576c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 80015e6:	4bac      	ldr	r3, [pc, #688]	@ (8001898 <userAlarmBeep+0x2fc>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	0018      	movs	r0, r3
 80015ec:	f004 f872 	bl	80056d4 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80015f0:	4ba9      	ldr	r3, [pc, #676]	@ (8001898 <userAlarmBeep+0x2fc>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f8:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 80015fa:	1cfb      	adds	r3, r7, #3
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine whether to toggle high or low brightness
	 */
	uint8_t intenSet;
	if(displayToggle == 0) { 				// If the user has full brightness enabled, toggle full btightness
 8001600:	4ba6      	ldr	r3, [pc, #664]	@ (800189c <userAlarmBeep+0x300>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d103      	bne.n	8001610 <userAlarmBeep+0x74>
		intenSet = 2;
 8001608:	1cbb      	adds	r3, r7, #2
 800160a:	2202      	movs	r2, #2
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	e002      	b.n	8001616 <userAlarmBeep+0x7a>
	}
	else {									// Else, toggle low brightness
		intenSet = 1;
 8001610:	1cbb      	adds	r3, r7, #2
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
	}

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 8001616:	f7ff ff33 	bl	8001480 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 800161a:	4b9f      	ldr	r3, [pc, #636]	@ (8001898 <userAlarmBeep+0x2fc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	4a9e      	ldr	r2, [pc, #632]	@ (80018a0 <userAlarmBeep+0x304>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d800      	bhi.n	800162e <userAlarmBeep+0x92>
 800162c:	e0a3      	b.n	8001776 <userAlarmBeep+0x1da>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink * intenSet]);	// Toggle on/off
 800162e:	1cfb      	adds	r3, r7, #3
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	1cba      	adds	r2, r7, #2
 8001634:	7812      	ldrb	r2, [r2, #0]
 8001636:	4353      	muls	r3, r2
 8001638:	4a9a      	ldr	r2, [pc, #616]	@ (80018a4 <userAlarmBeep+0x308>)
 800163a:	5cd3      	ldrb	r3, [r2, r3]
 800163c:	0018      	movs	r0, r3
 800163e:	f000 fe05 	bl	800224c <sevSeg_setIntensity>

			if(!displayBlink) {
 8001642:	1cfb      	adds	r3, r7, #3
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2201      	movs	r2, #1
 8001648:	4053      	eors	r3, r2
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d03f      	beq.n	80016d0 <userAlarmBeep+0x134>
				__HAL_TIM_SET_COMPARE(timerBuzzer, tim_BUZZER_CHANNEL, 50);
 8001650:	4b95      	ldr	r3, [pc, #596]	@ (80018a8 <userAlarmBeep+0x30c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d105      	bne.n	8001664 <userAlarmBeep+0xc8>
 8001658:	4b94      	ldr	r3, [pc, #592]	@ (80018ac <userAlarmBeep+0x310>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2232      	movs	r2, #50	@ 0x32
 8001660:	635a      	str	r2, [r3, #52]	@ 0x34
 8001662:	e02c      	b.n	80016be <userAlarmBeep+0x122>
 8001664:	4b90      	ldr	r3, [pc, #576]	@ (80018a8 <userAlarmBeep+0x30c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b04      	cmp	r3, #4
 800166a:	d105      	bne.n	8001678 <userAlarmBeep+0xdc>
 800166c:	4b8f      	ldr	r3, [pc, #572]	@ (80018ac <userAlarmBeep+0x310>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	2332      	movs	r3, #50	@ 0x32
 8001674:	6393      	str	r3, [r2, #56]	@ 0x38
 8001676:	e022      	b.n	80016be <userAlarmBeep+0x122>
 8001678:	4b8b      	ldr	r3, [pc, #556]	@ (80018a8 <userAlarmBeep+0x30c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b08      	cmp	r3, #8
 800167e:	d105      	bne.n	800168c <userAlarmBeep+0xf0>
 8001680:	4b8a      	ldr	r3, [pc, #552]	@ (80018ac <userAlarmBeep+0x310>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	2332      	movs	r3, #50	@ 0x32
 8001688:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800168a:	e018      	b.n	80016be <userAlarmBeep+0x122>
 800168c:	4b86      	ldr	r3, [pc, #536]	@ (80018a8 <userAlarmBeep+0x30c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b0c      	cmp	r3, #12
 8001692:	d105      	bne.n	80016a0 <userAlarmBeep+0x104>
 8001694:	4b85      	ldr	r3, [pc, #532]	@ (80018ac <userAlarmBeep+0x310>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2332      	movs	r3, #50	@ 0x32
 800169c:	6413      	str	r3, [r2, #64]	@ 0x40
 800169e:	e00e      	b.n	80016be <userAlarmBeep+0x122>
 80016a0:	4b81      	ldr	r3, [pc, #516]	@ (80018a8 <userAlarmBeep+0x30c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b10      	cmp	r3, #16
 80016a6:	d105      	bne.n	80016b4 <userAlarmBeep+0x118>
 80016a8:	4b80      	ldr	r3, [pc, #512]	@ (80018ac <userAlarmBeep+0x310>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	2332      	movs	r3, #50	@ 0x32
 80016b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80016b2:	e004      	b.n	80016be <userAlarmBeep+0x122>
 80016b4:	4b7d      	ldr	r3, [pc, #500]	@ (80018ac <userAlarmBeep+0x310>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	2332      	movs	r3, #50	@ 0x32
 80016bc:	65d3      	str	r3, [r2, #92]	@ 0x5c
				HAL_TIM_PWM_Start(timerBuzzer, tim_BUZZER_CHANNEL);
 80016be:	4b7b      	ldr	r3, [pc, #492]	@ (80018ac <userAlarmBeep+0x310>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	4b79      	ldr	r3, [pc, #484]	@ (80018a8 <userAlarmBeep+0x30c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	0019      	movs	r1, r3
 80016c8:	0010      	movs	r0, r2
 80016ca:	f004 f94f 	bl	800596c <HAL_TIM_PWM_Start>
 80016ce:	e03e      	b.n	800174e <userAlarmBeep+0x1b2>
			}
			else {
				__HAL_TIM_SET_COMPARE(timerBuzzer, tim_BUZZER_CHANNEL, 0);
 80016d0:	4b75      	ldr	r3, [pc, #468]	@ (80018a8 <userAlarmBeep+0x30c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d105      	bne.n	80016e4 <userAlarmBeep+0x148>
 80016d8:	4b74      	ldr	r3, [pc, #464]	@ (80018ac <userAlarmBeep+0x310>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2200      	movs	r2, #0
 80016e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80016e2:	e02c      	b.n	800173e <userAlarmBeep+0x1a2>
 80016e4:	4b70      	ldr	r3, [pc, #448]	@ (80018a8 <userAlarmBeep+0x30c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d105      	bne.n	80016f8 <userAlarmBeep+0x15c>
 80016ec:	4b6f      	ldr	r3, [pc, #444]	@ (80018ac <userAlarmBeep+0x310>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	2300      	movs	r3, #0
 80016f4:	6393      	str	r3, [r2, #56]	@ 0x38
 80016f6:	e022      	b.n	800173e <userAlarmBeep+0x1a2>
 80016f8:	4b6b      	ldr	r3, [pc, #428]	@ (80018a8 <userAlarmBeep+0x30c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d105      	bne.n	800170c <userAlarmBeep+0x170>
 8001700:	4b6a      	ldr	r3, [pc, #424]	@ (80018ac <userAlarmBeep+0x310>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	2300      	movs	r3, #0
 8001708:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800170a:	e018      	b.n	800173e <userAlarmBeep+0x1a2>
 800170c:	4b66      	ldr	r3, [pc, #408]	@ (80018a8 <userAlarmBeep+0x30c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b0c      	cmp	r3, #12
 8001712:	d105      	bne.n	8001720 <userAlarmBeep+0x184>
 8001714:	4b65      	ldr	r3, [pc, #404]	@ (80018ac <userAlarmBeep+0x310>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	2300      	movs	r3, #0
 800171c:	6413      	str	r3, [r2, #64]	@ 0x40
 800171e:	e00e      	b.n	800173e <userAlarmBeep+0x1a2>
 8001720:	4b61      	ldr	r3, [pc, #388]	@ (80018a8 <userAlarmBeep+0x30c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b10      	cmp	r3, #16
 8001726:	d105      	bne.n	8001734 <userAlarmBeep+0x198>
 8001728:	4b60      	ldr	r3, [pc, #384]	@ (80018ac <userAlarmBeep+0x310>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	2300      	movs	r3, #0
 8001730:	6593      	str	r3, [r2, #88]	@ 0x58
 8001732:	e004      	b.n	800173e <userAlarmBeep+0x1a2>
 8001734:	4b5d      	ldr	r3, [pc, #372]	@ (80018ac <userAlarmBeep+0x310>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	2300      	movs	r3, #0
 800173c:	65d3      	str	r3, [r2, #92]	@ 0x5c
				HAL_TIM_PWM_Start(timerBuzzer, tim_BUZZER_CHANNEL);
 800173e:	4b5b      	ldr	r3, [pc, #364]	@ (80018ac <userAlarmBeep+0x310>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4b59      	ldr	r3, [pc, #356]	@ (80018a8 <userAlarmBeep+0x30c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	0019      	movs	r1, r3
 8001748:	0010      	movs	r0, r2
 800174a:	f004 f90f 	bl	800596c <HAL_TIM_PWM_Start>
			}



			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 800174e:	4b52      	ldr	r3, [pc, #328]	@ (8001898 <userAlarmBeep+0x2fc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001756:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001758:	1cfb      	adds	r3, r7, #3
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	1e5a      	subs	r2, r3, #1
 800175e:	4193      	sbcs	r3, r2
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2201      	movs	r2, #1
 8001764:	4053      	eors	r3, r2
 8001766:	b2db      	uxtb	r3, r3
 8001768:	001a      	movs	r2, r3
 800176a:	1cfb      	adds	r3, r7, #3
 800176c:	701a      	strb	r2, [r3, #0]
 800176e:	781a      	ldrb	r2, [r3, #0]
 8001770:	2101      	movs	r1, #1
 8001772:	400a      	ands	r2, r1
 8001774:	701a      	strb	r2, [r3, #0]

		}


		capTouch_readChannels(&capTouch);
 8001776:	4b4e      	ldr	r3, [pc, #312]	@ (80018b0 <userAlarmBeep+0x314>)
 8001778:	0018      	movs	r0, r3
 800177a:	f7fe fefb 	bl	8000574 <capTouch_readChannels>

	} while(capTouch.keyStat == 0x00 &&
 800177e:	4b4c      	ldr	r3, [pc, #304]	@ (80018b0 <userAlarmBeep+0x314>)
 8001780:	7c1b      	ldrb	r3, [r3, #16]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10f      	bne.n	80017a6 <userAlarmBeep+0x20a>
			(HAL_GPIO_ReadPin(alarmEnableButtonPort, alarmEnableButtonPin) != GPIO_PIN_RESET));
 8001786:	4b4b      	ldr	r3, [pc, #300]	@ (80018b4 <userAlarmBeep+0x318>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2204      	movs	r2, #4
 800178c:	0011      	movs	r1, r2
 800178e:	0018      	movs	r0, r3
 8001790:	f001 fae0 	bl	8002d54 <HAL_GPIO_ReadPin>
 8001794:	0003      	movs	r3, r0
 8001796:	0019      	movs	r1, r3
 8001798:	1cbb      	adds	r3, r7, #2
 800179a:	1cba      	adds	r2, r7, #2
 800179c:	7812      	ldrb	r2, [r2, #0]
 800179e:	701a      	strb	r2, [r3, #0]
	} while(capTouch.keyStat == 0x00 &&
 80017a0:	2900      	cmp	r1, #0
 80017a2:	d000      	beq.n	80017a6 <userAlarmBeep+0x20a>
 80017a4:	e737      	b.n	8001616 <userAlarmBeep+0x7a>

	/*
	 * Stop blinking, turn off buzzer, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 80017a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001898 <userAlarmBeep+0x2fc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	0018      	movs	r0, r3
 80017ac:	f003 ffde 	bl	800576c <HAL_TIM_Base_Stop>

	updateAndDisplayTime();				// Update to current time and display
 80017b0:	f7ff fe66 	bl	8001480 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[intenSet]);	// Turn display back on
 80017b4:	1cbb      	adds	r3, r7, #2
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4a3a      	ldr	r2, [pc, #232]	@ (80018a4 <userAlarmBeep+0x308>)
 80017ba:	5cd3      	ldrb	r3, [r2, r3]
 80017bc:	0018      	movs	r0, r3
 80017be:	f000 fd45 	bl	800224c <sevSeg_setIntensity>
	if(intenSet == 2) {
 80017c2:	1cbb      	adds	r3, r7, #2
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d103      	bne.n	80017d2 <userAlarmBeep+0x236>
		displayToggle = 0;
 80017ca:	4b34      	ldr	r3, [pc, #208]	@ (800189c <userAlarmBeep+0x300>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
 80017d0:	e002      	b.n	80017d8 <userAlarmBeep+0x23c>
	}
	else {
		displayToggle = 2;
 80017d2:	4b32      	ldr	r3, [pc, #200]	@ (800189c <userAlarmBeep+0x300>)
 80017d4:	2202      	movs	r2, #2
 80017d6:	701a      	strb	r2, [r3, #0]
	}

	// If this is the first snooze,
	if(!secondSnooze) {
 80017d8:	4b2c      	ldr	r3, [pc, #176]	@ (800188c <userAlarmBeep+0x2f0>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2201      	movs	r2, #1
 80017de:	4053      	eors	r3, r2
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d047      	beq.n	8001876 <userAlarmBeep+0x2da>

		__HAL_TIM_SET_COMPARE(timerBuzzer, tim_BUZZER_CHANNEL, 0);
 80017e6:	4b30      	ldr	r3, [pc, #192]	@ (80018a8 <userAlarmBeep+0x30c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d105      	bne.n	80017fa <userAlarmBeep+0x25e>
 80017ee:	4b2f      	ldr	r3, [pc, #188]	@ (80018ac <userAlarmBeep+0x310>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2200      	movs	r2, #0
 80017f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80017f8:	e02c      	b.n	8001854 <userAlarmBeep+0x2b8>
 80017fa:	4b2b      	ldr	r3, [pc, #172]	@ (80018a8 <userAlarmBeep+0x30c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d105      	bne.n	800180e <userAlarmBeep+0x272>
 8001802:	4b2a      	ldr	r3, [pc, #168]	@ (80018ac <userAlarmBeep+0x310>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	2300      	movs	r3, #0
 800180a:	6393      	str	r3, [r2, #56]	@ 0x38
 800180c:	e022      	b.n	8001854 <userAlarmBeep+0x2b8>
 800180e:	4b26      	ldr	r3, [pc, #152]	@ (80018a8 <userAlarmBeep+0x30c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b08      	cmp	r3, #8
 8001814:	d105      	bne.n	8001822 <userAlarmBeep+0x286>
 8001816:	4b25      	ldr	r3, [pc, #148]	@ (80018ac <userAlarmBeep+0x310>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2300      	movs	r3, #0
 800181e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001820:	e018      	b.n	8001854 <userAlarmBeep+0x2b8>
 8001822:	4b21      	ldr	r3, [pc, #132]	@ (80018a8 <userAlarmBeep+0x30c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b0c      	cmp	r3, #12
 8001828:	d105      	bne.n	8001836 <userAlarmBeep+0x29a>
 800182a:	4b20      	ldr	r3, [pc, #128]	@ (80018ac <userAlarmBeep+0x310>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2300      	movs	r3, #0
 8001832:	6413      	str	r3, [r2, #64]	@ 0x40
 8001834:	e00e      	b.n	8001854 <userAlarmBeep+0x2b8>
 8001836:	4b1c      	ldr	r3, [pc, #112]	@ (80018a8 <userAlarmBeep+0x30c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b10      	cmp	r3, #16
 800183c:	d105      	bne.n	800184a <userAlarmBeep+0x2ae>
 800183e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <userAlarmBeep+0x310>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2300      	movs	r3, #0
 8001846:	6593      	str	r3, [r2, #88]	@ 0x58
 8001848:	e004      	b.n	8001854 <userAlarmBeep+0x2b8>
 800184a:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <userAlarmBeep+0x310>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	2300      	movs	r3, #0
 8001852:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_TIM_PWM_Start(timerBuzzer, tim_BUZZER_CHANNEL);
 8001854:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <userAlarmBeep+0x310>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <userAlarmBeep+0x30c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	0019      	movs	r1, r3
 800185e:	0010      	movs	r0, r2
 8001860:	f004 f884 	bl	800596c <HAL_TIM_PWM_Start>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 8001864:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <userAlarmBeep+0x2f4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	0018      	movs	r0, r3
 800186a:	f003 ffa5 	bl	80057b8 <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 800186e:	4b07      	ldr	r3, [pc, #28]	@ (800188c <userAlarmBeep+0x2f0>)
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
		 */
		secondSnooze = false;

	}

}
 8001874:	e005      	b.n	8001882 <userAlarmBeep+0x2e6>
		snoozeCounter = 0;
 8001876:	4b10      	ldr	r3, [pc, #64]	@ (80018b8 <userAlarmBeep+0x31c>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
		secondSnooze = false;
 800187c:	4b03      	ldr	r3, [pc, #12]	@ (800188c <userAlarmBeep+0x2f0>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
}
 8001882:	46c0      	nop			@ (mov r8, r8)
 8001884:	46bd      	mov	sp, r7
 8001886:	b002      	add	sp, #8
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			@ (mov r8, r8)
 800188c:	2000027a 	.word	0x2000027a
 8001890:	20000048 	.word	0x20000048
 8001894:	0000fffc 	.word	0x0000fffc
 8001898:	20000044 	.word	0x20000044
 800189c:	20000090 	.word	0x20000090
 80018a0:	00007ffe 	.word	0x00007ffe
 80018a4:	080068e0 	.word	0x080068e0
 80018a8:	20000094 	.word	0x20000094
 80018ac:	2000004c 	.word	0x2000004c
 80018b0:	2000027c 	.word	0x2000027c
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000278 	.word	0x20000278

080018bc <HAL_GPIO_EXTI_Falling_Callback>:
 * General Falling-Edge EXTI Callback function
 *
 * Internal conditional determines which function to call
 * based on which button was pressed.
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	0002      	movs	r2, r0
 80018c4:	1dbb      	adds	r3, r7, #6
 80018c6:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 80018c8:	2208      	movs	r2, #8
 80018ca:	1dbb      	adds	r3, r7, #6
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d106      	bne.n	80018e0 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 80018d2:	230f      	movs	r3, #15
 80018d4:	18fc      	adds	r4, r7, r3
 80018d6:	f000 f85f 	bl	8001998 <displayButtonISR>
 80018da:	0003      	movs	r3, r0
 80018dc:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 80018de:	e031      	b.n	8001944 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 80018e0:	2204      	movs	r2, #4
 80018e2:	1dbb      	adds	r3, r7, #6
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d106      	bne.n	80018f8 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 80018ea:	230f      	movs	r3, #15
 80018ec:	18fc      	adds	r4, r7, r3
 80018ee:	f000 f87b 	bl	80019e8 <alarmEnableISR>
 80018f2:	0003      	movs	r3, r0
 80018f4:	7023      	strb	r3, [r4, #0]
}
 80018f6:	e025      	b.n	8001944 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 80018f8:	2380      	movs	r3, #128	@ 0x80
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	1dba      	adds	r2, r7, #6
 80018fe:	8812      	ldrh	r2, [r2, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d106      	bne.n	8001912 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 8001904:	230f      	movs	r3, #15
 8001906:	18fc      	adds	r4, r7, r3
 8001908:	f000 f8ca 	bl	8001aa0 <alarmSetISR>
 800190c:	0003      	movs	r3, r0
 800190e:	7023      	strb	r3, [r4, #0]
}
 8001910:	e018      	b.n	8001944 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 8001912:	2201      	movs	r2, #1
 8001914:	1dbb      	adds	r3, r7, #6
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	4293      	cmp	r3, r2
 800191a:	d106      	bne.n	800192a <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 800191c:	230f      	movs	r3, #15
 800191e:	18fc      	adds	r4, r7, r3
 8001920:	f000 f9a2 	bl	8001c68 <hourSetISR>
 8001924:	0003      	movs	r3, r0
 8001926:	7023      	strb	r3, [r4, #0]
}
 8001928:	e00c      	b.n	8001944 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 800192a:	2202      	movs	r2, #2
 800192c:	1dbb      	adds	r3, r7, #6
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	4293      	cmp	r3, r2
 8001932:	d106      	bne.n	8001942 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 8001934:	230f      	movs	r3, #15
 8001936:	18fc      	adds	r4, r7, r3
 8001938:	f000 f9c2 	bl	8001cc0 <minuteSetISR>
 800193c:	0003      	movs	r3, r0
 800193e:	7023      	strb	r3, [r4, #0]
}
 8001940:	e000      	b.n	8001944 <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 8001942:	46c0      	nop			@ (mov r8, r8)
}
 8001944:	46c0      	nop			@ (mov r8, r8)
 8001946:	46bd      	mov	sp, r7
 8001948:	b005      	add	sp, #20
 800194a:	bd90      	pop	{r4, r7, pc}

0800194c <HAL_TIM_PeriodElapsedCallback>:
 * Used for second snooze functionality
 *
 * This is entered at the end of a 10-minute snooze, at
 * which point the timer kicks back an interrupt.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

	snoozeCounter++;
 8001954:	4b0d      	ldr	r3, [pc, #52]	@ (800198c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	3301      	adds	r3, #1
 800195a:	b2da      	uxtb	r2, r3
 800195c:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800195e:	701a      	strb	r2, [r3, #0]

	if((htim == timerSnooze) && (secondSnooze == true) && (snoozeCounter == timerSnooze_RCR)) {
 8001960:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	429a      	cmp	r2, r3
 8001968:	d10b      	bne.n	8001982 <HAL_TIM_PeriodElapsedCallback+0x36>
 800196a:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d007      	beq.n	8001982 <HAL_TIM_PeriodElapsedCallback+0x36>
 8001972:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	001a      	movs	r2, r3
 8001978:	2364      	movs	r3, #100	@ 0x64
 800197a:	429a      	cmp	r2, r3
 800197c:	d101      	bne.n	8001982 <HAL_TIM_PeriodElapsedCallback+0x36>

		userAlarmBeep();
 800197e:	f7ff fe0d 	bl	800159c <userAlarmBeep>

	}

}
 8001982:	46c0      	nop			@ (mov r8, r8)
 8001984:	46bd      	mov	sp, r7
 8001986:	b002      	add	sp, #8
 8001988:	bd80      	pop	{r7, pc}
 800198a:	46c0      	nop			@ (mov r8, r8)
 800198c:	20000278 	.word	0x20000278
 8001990:	20000048 	.word	0x20000048
 8001994:	2000027a 	.word	0x2000027a

08001998 <displayButtonISR>:

/*
 * Toggles through user time display brightness settings
 */
HAL_StatusTypeDef displayButtonISR(void) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 800199e:	1dfb      	adds	r3, r7, #7
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 80019a4:	f7ff fd6c 	bl	8001480 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 80019a8:	4b0d      	ldr	r3, [pc, #52]	@ (80019e0 <displayButtonISR+0x48>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	001a      	movs	r2, r3
 80019ae:	4b0d      	ldr	r3, [pc, #52]	@ (80019e4 <displayButtonISR+0x4c>)
 80019b0:	5c9b      	ldrb	r3, [r3, r2]
 80019b2:	0018      	movs	r0, r3
 80019b4:	f000 fc4a 	bl	800224c <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 80019b8:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <displayButtonISR+0x48>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d903      	bls.n	80019c8 <displayButtonISR+0x30>
		displayToggle = 0;
 80019c0:	4b07      	ldr	r3, [pc, #28]	@ (80019e0 <displayButtonISR+0x48>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	e005      	b.n	80019d4 <displayButtonISR+0x3c>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 80019c8:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <displayButtonISR+0x48>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	3301      	adds	r3, #1
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	4b03      	ldr	r3, [pc, #12]	@ (80019e0 <displayButtonISR+0x48>)
 80019d2:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 80019d4:	1dfb      	adds	r3, r7, #7
 80019d6:	781b      	ldrb	r3, [r3, #0]

}
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	b002      	add	sp, #8
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000090 	.word	0x20000090
 80019e4:	080068e0 	.word	0x080068e0

080019e8 <alarmEnableISR>:

/*
 * Toggles user alarm enable bool and alarm enable LED.
 */
HAL_StatusTypeDef alarmEnableISR(void) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 80019ee:	1dfb      	adds	r3, r7, #7
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 80019f4:	4b24      	ldr	r3, [pc, #144]	@ (8001a88 <alarmEnableISR+0xa0>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2201      	movs	r2, #1
 80019fa:	4053      	eors	r3, r2
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00b      	beq.n	8001a1a <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 8001a02:	4b22      	ldr	r3, [pc, #136]	@ (8001a8c <alarmEnableISR+0xa4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2280      	movs	r2, #128	@ 0x80
 8001a08:	0151      	lsls	r1, r2, #5
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f001 f9be 	bl	8002d8e <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 8001a12:	4b1d      	ldr	r3, [pc, #116]	@ (8001a88 <alarmEnableISR+0xa0>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
 8001a18:	e010      	b.n	8001a3c <alarmEnableISR+0x54>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <alarmEnableISR+0xa0>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00b      	beq.n	8001a3a <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 8001a22:	4b1a      	ldr	r3, [pc, #104]	@ (8001a8c <alarmEnableISR+0xa4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2280      	movs	r2, #128	@ 0x80
 8001a28:	0151      	lsls	r1, r2, #5
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f001 f9ae 	bl	8002d8e <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <alarmEnableISR+0xa0>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	e000      	b.n	8001a3c <alarmEnableISR+0x54>

	}
	else {
		__NOP();							//Code should never reach here.
 8001a3a:	46c0      	nop			@ (mov r8, r8)
	}

	/*
	 * Reset snooze time
	 */
	secondSnooze = false;
 8001a3c:	4b14      	ldr	r3, [pc, #80]	@ (8001a90 <alarmEnableISR+0xa8>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
	snoozeCounter = 0;
 8001a42:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <alarmEnableISR+0xac>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Stop_IT(timerSnooze);					// Stop snooze timer in case it is going
 8001a48:	4b13      	ldr	r3, [pc, #76]	@ (8001a98 <alarmEnableISR+0xb0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f003 ff07 	bl	8005860 <HAL_TIM_Base_Stop_IT>
	timerSnooze->Instance->CNT &= 0xFFFF0000;
 8001a52:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <alarmEnableISR+0xb0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a98 <alarmEnableISR+0xb0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0c12      	lsrs	r2, r2, #16
 8001a62:	0412      	lsls	r2, r2, #16
 8001a64:	625a      	str	r2, [r3, #36]	@ 0x24
	timerSnooze->Instance->SR &= 0xFFFC;
 8001a66:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <alarmEnableISR+0xb0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <alarmEnableISR+0xb0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4909      	ldr	r1, [pc, #36]	@ (8001a9c <alarmEnableISR+0xb4>)
 8001a76:	400a      	ands	r2, r1
 8001a78:	611a      	str	r2, [r3, #16]

	return halRet;
 8001a7a:	1dfb      	adds	r3, r7, #7
 8001a7c:	781b      	ldrb	r3, [r3, #0]

}
 8001a7e:	0018      	movs	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b002      	add	sp, #8
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	20000091 	.word	0x20000091
 8001a8c:	20000010 	.word	0x20000010
 8001a90:	2000027a 	.word	0x2000027a
 8001a94:	20000278 	.word	0x20000278
 8001a98:	20000048 	.word	0x20000048
 8001a9c:	0000fffc 	.word	0x0000fffc

08001aa0 <alarmSetISR>:
 * Delays for 3 seconds, checks if alarm set button is still pressed.
 * If it is, allow user to set the new alarm time
 * and blink display to indicate this
 *
 */
HAL_StatusTypeDef alarmSetISR(void) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001aa6:	003b      	movs	r3, r7
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for 3 seconds to see if alarm set button is still pressed
	 */

	// Delay for 3 * 1s intervals
	for(uint8_t i = 0; i < 3; i++) {
 8001aac:	1dfb      	adds	r3, r7, #7
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	e01a      	b.n	8001aea <alarmSetISR+0x4a>

		HAL_TIM_Base_Stop(timerDelay);
 8001ab4:	4b64      	ldr	r3, [pc, #400]	@ (8001c48 <alarmSetISR+0x1a8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f003 fe57 	bl	800576c <HAL_TIM_Base_Stop>
		timerDelay->Instance->CNT = 0;						// Reset timer base
 8001abe:	4b62      	ldr	r3, [pc, #392]	@ (8001c48 <alarmSetISR+0x1a8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001ac8:	4b5f      	ldr	r3, [pc, #380]	@ (8001c48 <alarmSetISR+0x1a8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0018      	movs	r0, r3
 8001ace:	f003 fe01 	bl	80056d4 <HAL_TIM_Base_Start>
	//	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to

		do {

		} while(__HAL_TIM_GET_COUNTER(timerDelay) < (65535));
 8001ad2:	4b5d      	ldr	r3, [pc, #372]	@ (8001c48 <alarmSetISR+0x1a8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ada:	4a5c      	ldr	r2, [pc, #368]	@ (8001c4c <alarmSetISR+0x1ac>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d9f8      	bls.n	8001ad2 <alarmSetISR+0x32>
	for(uint8_t i = 0; i < 3; i++) {
 8001ae0:	1dfb      	adds	r3, r7, #7
 8001ae2:	781a      	ldrb	r2, [r3, #0]
 8001ae4:	1dfb      	adds	r3, r7, #7
 8001ae6:	3201      	adds	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	1dfb      	adds	r3, r7, #7
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d9e0      	bls.n	8001ab4 <alarmSetISR+0x14>
	}

	// If button is still pressed, we are in alarm set mode.
	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 8001af2:	4b57      	ldr	r3, [pc, #348]	@ (8001c50 <alarmSetISR+0x1b0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2280      	movs	r2, #128	@ 0x80
 8001af8:	0212      	lsls	r2, r2, #8
 8001afa:	0011      	movs	r1, r2
 8001afc:	0018      	movs	r0, r3
 8001afe:	f001 f929 	bl	8002d54 <HAL_GPIO_ReadPin>
 8001b02:	1e03      	subs	r3, r0, #0
 8001b04:	d102      	bne.n	8001b0c <alarmSetISR+0x6c>
		alarmSetMode = true;
 8001b06:	4b53      	ldr	r3, [pc, #332]	@ (8001c54 <alarmSetISR+0x1b4>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]
	 * alarm set process until the button is pressed again
	 */


	// Reset Timer
	HAL_TIM_Base_Stop(timerDelay);
 8001b0c:	4b4e      	ldr	r3, [pc, #312]	@ (8001c48 <alarmSetISR+0x1a8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	0018      	movs	r0, r3
 8001b12:	f003 fe2b 	bl	800576c <HAL_TIM_Base_Stop>
	timerDelay->Instance->CNT = 0;
 8001b16:	4b4c      	ldr	r3, [pc, #304]	@ (8001c48 <alarmSetISR+0x1a8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001b20:	4b49      	ldr	r3, [pc, #292]	@ (8001c48 <alarmSetISR+0x1a8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f003 fdd5 	bl	80056d4 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001b2a:	4b47      	ldr	r3, [pc, #284]	@ (8001c48 <alarmSetISR+0x1a8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	801a      	strh	r2, [r3, #0]

	bool alarmSetButtonReset = false;
 8001b36:	1cfb      	adds	r3, r7, #3
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {
 8001b3c:	4b45      	ldr	r3, [pc, #276]	@ (8001c54 <alarmSetISR+0x1b4>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d100      	bne.n	8001b46 <alarmSetISR+0xa6>
 8001b44:	e077      	b.n	8001c36 <alarmSetISR+0x196>

		// If we were in second snooze mode, kill it.
		secondSnooze = false;
 8001b46:	4b44      	ldr	r3, [pc, #272]	@ (8001c58 <alarmSetISR+0x1b8>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
		snoozeCounter = 0;
 8001b4c:	4b43      	ldr	r3, [pc, #268]	@ (8001c5c <alarmSetISR+0x1bc>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]

		bool displayBlink = false;
 8001b52:	1cbb      	adds	r3, r7, #2
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]

		/*
		 * Determine whether to toggle high or low brightness
		 */
		uint8_t intenSet;
		if(displayToggle == 0) { 				// If the user has full brightness enabled, toggle full btightness
 8001b58:	4b41      	ldr	r3, [pc, #260]	@ (8001c60 <alarmSetISR+0x1c0>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d103      	bne.n	8001b68 <alarmSetISR+0xc8>
			intenSet = 2;
 8001b60:	1c7b      	adds	r3, r7, #1
 8001b62:	2202      	movs	r2, #2
 8001b64:	701a      	strb	r2, [r3, #0]
 8001b66:	e002      	b.n	8001b6e <alarmSetISR+0xce>
		}
		else {									// Else, toggle low brightness
			intenSet = 1;
 8001b68:	1c7b      	adds	r3, r7, #1
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	701a      	strb	r2, [r3, #0]
		}

		do {											// while the alarm set button is not held down, blink display.

			// Check to make sure the user has released the set button from the initial hold
			if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_SET) {
 8001b6e:	4b38      	ldr	r3, [pc, #224]	@ (8001c50 <alarmSetISR+0x1b0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2280      	movs	r2, #128	@ 0x80
 8001b74:	0212      	lsls	r2, r2, #8
 8001b76:	0011      	movs	r1, r2
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f001 f8eb 	bl	8002d54 <HAL_GPIO_ReadPin>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d102      	bne.n	8001b8a <alarmSetISR+0xea>
				alarmSetButtonReset = true;
 8001b84:	1cfb      	adds	r3, r7, #3
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
			}

			updateAndDisplayAlarm();
 8001b8a:	f7ff fc9b 	bl	80014c4 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 8001b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c48 <alarmSetISR+0x1a8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	1ad2      	subs	r2, r2, r3
 8001b9c:	2380      	movs	r3, #128	@ 0x80
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d31e      	bcc.n	8001be2 <alarmSetISR+0x142>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink * intenSet]);		// Initialize to whatever duty cycle
 8001ba4:	1cbb      	adds	r3, r7, #2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	1c7a      	adds	r2, r7, #1
 8001baa:	7812      	ldrb	r2, [r2, #0]
 8001bac:	4353      	muls	r3, r2
 8001bae:	4a2d      	ldr	r2, [pc, #180]	@ (8001c64 <alarmSetISR+0x1c4>)
 8001bb0:	5cd3      	ldrb	r3, [r2, r3]
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f000 fb4a 	bl	800224c <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 8001bb8:	4b23      	ldr	r3, [pc, #140]	@ (8001c48 <alarmSetISR+0x1a8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	801a      	strh	r2, [r3, #0]
				displayBlink = !displayBlink;
 8001bc4:	1cbb      	adds	r3, r7, #2
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	1e5a      	subs	r2, r3, #1
 8001bca:	4193      	sbcs	r3, r2
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4053      	eors	r3, r2
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	001a      	movs	r2, r3
 8001bd6:	1cbb      	adds	r3, r7, #2
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	781a      	ldrb	r2, [r3, #0]
 8001bdc:	2101      	movs	r1, #1
 8001bde:	400a      	ands	r2, r1
 8001be0:	701a      	strb	r2, [r3, #0]

			}

		}while((HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET)
 8001be2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c50 <alarmSetISR+0x1b0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2280      	movs	r2, #128	@ 0x80
 8001be8:	0212      	lsls	r2, r2, #8
 8001bea:	0011      	movs	r1, r2
 8001bec:	0018      	movs	r0, r3
 8001bee:	f001 f8b1 	bl	8002d54 <HAL_GPIO_ReadPin>
 8001bf2:	1e03      	subs	r3, r0, #0
				|| !alarmSetButtonReset);
 8001bf4:	d1bb      	bne.n	8001b6e <alarmSetISR+0xce>
 8001bf6:	1cfb      	adds	r3, r7, #3
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4053      	eors	r3, r2
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1b4      	bne.n	8001b6e <alarmSetISR+0xce>

		sevSeg_setIntensity(sevSeg_intensityDuty[intenSet]);			// Turn display back on
 8001c04:	1c7b      	adds	r3, r7, #1
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4a16      	ldr	r2, [pc, #88]	@ (8001c64 <alarmSetISR+0x1c4>)
 8001c0a:	5cd3      	ldrb	r3, [r2, r3]
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f000 fb1d 	bl	800224c <sevSeg_setIntensity>
		if(intenSet == 2) {
 8001c12:	1c7b      	adds	r3, r7, #1
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d103      	bne.n	8001c22 <alarmSetISR+0x182>
			displayToggle = 0;
 8001c1a:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <alarmSetISR+0x1c0>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
 8001c20:	e002      	b.n	8001c28 <alarmSetISR+0x188>
		}
		else {
			displayToggle = 2;
 8001c22:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <alarmSetISR+0x1c0>)
 8001c24:	2202      	movs	r2, #2
 8001c26:	701a      	strb	r2, [r3, #0]
		}


		HAL_TIM_Base_Stop(timerDelay);
 8001c28:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <alarmSetISR+0x1a8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f003 fd9d 	bl	800576c <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8001c32:	f7ff fc25 	bl	8001480 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8001c36:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <alarmSetISR+0x1b4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 8001c3c:	003b      	movs	r3, r7
 8001c3e:	781b      	ldrb	r3, [r3, #0]

}
 8001c40:	0018      	movs	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b002      	add	sp, #8
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000044 	.word	0x20000044
 8001c4c:	0000fffe 	.word	0x0000fffe
 8001c50:	20000004 	.word	0x20000004
 8001c54:	20000279 	.word	0x20000279
 8001c58:	2000027a 	.word	0x2000027a
 8001c5c:	20000278 	.word	0x20000278
 8001c60:	20000090 	.word	0x20000090
 8001c64:	080068e0 	.word	0x080068e0

08001c68 <hourSetISR>:

/*
 * Increment either user alarm hour value or RTC hour value
 */
HAL_StatusTypeDef hourSetISR(void) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0


	HAL_StatusTypeDef halRet = HAL_OK;
 8001c6e:	1dfb      	adds	r3, r7, #7
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001c74:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb0 <hourSetISR+0x48>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <hourSetISR+0x1a>

		alarmHourInc();
 8001c7c:	f000 f878 	bl	8001d70 <alarmHourInc>
 8001c80:	e00f      	b.n	8001ca2 <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 8001c82:	f000 f8a5 	bl	8001dd0 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001c86:	490b      	ldr	r1, [pc, #44]	@ (8001cb4 <hourSetISR+0x4c>)
 8001c88:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <hourSetISR+0x50>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f002 fec5 	bl	8004a1c <HAL_RTC_SetTime>


		updateAndDisplayTime();
 8001c92:	f7ff fbf5 	bl	8001480 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001c96:	4a09      	ldr	r2, [pc, #36]	@ (8001cbc <hourSetISR+0x54>)
 8001c98:	4906      	ldr	r1, [pc, #24]	@ (8001cb4 <hourSetISR+0x4c>)
 8001c9a:	4b07      	ldr	r3, [pc, #28]	@ (8001cb8 <hourSetISR+0x50>)
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f7fe fed7 	bl	8000a50 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 8001ca2:	1dfb      	adds	r3, r7, #7
 8001ca4:	781b      	ldrb	r3, [r3, #0]

}
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b002      	add	sp, #8
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	20000279 	.word	0x20000279
 8001cb4:	20000098 	.word	0x20000098
 8001cb8:	2000011c 	.word	0x2000011c
 8001cbc:	200000ac 	.word	0x200000ac

08001cc0 <minuteSetISR>:

/*
 * Increment either user alarm minute value or RTC minute value
 */
HAL_StatusTypeDef minuteSetISR(void) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08c      	sub	sp, #48	@ 0x30
 8001cc4:	af00      	add	r7, sp, #0


	HAL_StatusTypeDef halRet = HAL_OK;
 8001cc6:	232f      	movs	r3, #47	@ 0x2f
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001cce:	4b24      	ldr	r3, [pc, #144]	@ (8001d60 <minuteSetISR+0xa0>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <minuteSetISR+0x1c>

		alarmMinuteInc();
 8001cd6:	f000 f8bb 	bl	8001e50 <alarmMinuteInc>
 8001cda:	e03a      	b.n	8001d52 <minuteSetISR+0x92>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 8001cdc:	f000 f8d6 	bl	8001e8c <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001ce0:	4920      	ldr	r1, [pc, #128]	@ (8001d64 <minuteSetISR+0xa4>)
 8001ce2:	4b21      	ldr	r3, [pc, #132]	@ (8001d68 <minuteSetISR+0xa8>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f002 fe98 	bl	8004a1c <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	0018      	movs	r0, r3
 8001cf0:	2328      	movs	r3, #40	@ 0x28
 8001cf2:	001a      	movs	r2, r3
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	f004 fd9f 	bl	8006838 <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8001cfa:	2380      	movs	r3, #128	@ 0x80
 8001cfc:	005a      	lsls	r2, r3, #1
 8001cfe:	1d39      	adds	r1, r7, #4
 8001d00:	4819      	ldr	r0, [pc, #100]	@ (8001d68 <minuteSetISR+0xa8>)
 8001d02:	2300      	movs	r3, #0
 8001d04:	f003 f9ae 	bl	8005064 <HAL_RTC_GetAlarm>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001d08:	4a18      	ldr	r2, [pc, #96]	@ (8001d6c <minuteSetISR+0xac>)
 8001d0a:	4916      	ldr	r1, [pc, #88]	@ (8001d64 <minuteSetISR+0xa4>)
 8001d0c:	4b16      	ldr	r3, [pc, #88]	@ (8001d68 <minuteSetISR+0xa8>)
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f7fe fe9e 	bl	8000a50 <getRTCTime>

		if(currTime.Minutes > 58) {
 8001d14:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <minuteSetISR+0xa4>)
 8001d16:	785b      	ldrb	r3, [r3, #1]
 8001d18:	2b3a      	cmp	r3, #58	@ 0x3a
 8001d1a:	d903      	bls.n	8001d24 <minuteSetISR+0x64>
			sAlarm.AlarmTime.Minutes = 0;
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	2200      	movs	r2, #0
 8001d20:	705a      	strb	r2, [r3, #1]
 8001d22:	e005      	b.n	8001d30 <minuteSetISR+0x70>
		} else {
			sAlarm.AlarmTime.Minutes = currTime.Minutes + 1;
 8001d24:	4b0f      	ldr	r3, [pc, #60]	@ (8001d64 <minuteSetISR+0xa4>)
 8001d26:	785b      	ldrb	r3, [r3, #1]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8001d30:	46c0      	nop			@ (mov r8, r8)
 8001d32:	1d39      	adds	r1, r7, #4
 8001d34:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <minuteSetISR+0xa8>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f003 f853 	bl	8004de4 <HAL_RTC_SetAlarm_IT>
 8001d3e:	1e03      	subs	r3, r0, #0
 8001d40:	d1f7      	bne.n	8001d32 <minuteSetISR+0x72>


		updateAndDisplayTime();
 8001d42:	f7ff fb9d 	bl	8001480 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001d46:	4a09      	ldr	r2, [pc, #36]	@ (8001d6c <minuteSetISR+0xac>)
 8001d48:	4906      	ldr	r1, [pc, #24]	@ (8001d64 <minuteSetISR+0xa4>)
 8001d4a:	4b07      	ldr	r3, [pc, #28]	@ (8001d68 <minuteSetISR+0xa8>)
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f7fe fe7f 	bl	8000a50 <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 8001d52:	232f      	movs	r3, #47	@ 0x2f
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	781b      	ldrb	r3, [r3, #0]
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b00c      	add	sp, #48	@ 0x30
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000279 	.word	0x20000279
 8001d64:	20000098 	.word	0x20000098
 8001d68:	2000011c 	.word	0x2000011c
 8001d6c:	200000ac 	.word	0x200000ac

08001d70 <alarmHourInc>:

/*
 * Increment user alarm time hour
 */
void alarmHourInc(void) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8001d74:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <alarmHourInc+0x5c>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b0b      	cmp	r3, #11
 8001d7a:	d903      	bls.n	8001d84 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8001d7c:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <alarmHourInc+0x5c>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	e01e      	b.n	8001dc2 <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 8001d84:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <alarmHourInc+0x5c>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b0b      	cmp	r3, #11
 8001d8a:	d10e      	bne.n	8001daa <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dcc <alarmHourInc+0x5c>)
 8001d8e:	78db      	ldrb	r3, [r3, #3]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d103      	bne.n	8001d9c <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001d94:	4b0d      	ldr	r3, [pc, #52]	@ (8001dcc <alarmHourInc+0x5c>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	70da      	strb	r2, [r3, #3]
 8001d9a:	e002      	b.n	8001da2 <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <alarmHourInc+0x5c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 8001da2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <alarmHourInc+0x5c>)
 8001da4:	220c      	movs	r2, #12
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	e00b      	b.n	8001dc2 <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 8001daa:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <alarmHourInc+0x5c>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b0a      	cmp	r3, #10
 8001db0:	d806      	bhi.n	8001dc0 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001db2:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <alarmHourInc+0x5c>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	3301      	adds	r3, #1
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4b04      	ldr	r3, [pc, #16]	@ (8001dcc <alarmHourInc+0x5c>)
 8001dbc:	701a      	strb	r2, [r3, #0]
 8001dbe:	e000      	b.n	8001dc2 <alarmHourInc+0x52>
	}
	else {
		__NOP();
 8001dc0:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001dc2:	f000 f8df 	bl	8001f84 <updateRTCBackupReg>

}
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200000b0 	.word	0x200000b0

08001dd0 <currHourInc>:

/*
 * Increment current time hour
 */
void currHourInc(void) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8001e40 <currHourInc+0x70>)
 8001dd6:	491b      	ldr	r1, [pc, #108]	@ (8001e44 <currHourInc+0x74>)
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e48 <currHourInc+0x78>)
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f7fe fe38 	bl	8000a50 <getRTCTime>

	if(currTime.Hours >= 12) {
 8001de0:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <currHourInc+0x74>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b0b      	cmp	r3, #11
 8001de6:	d903      	bls.n	8001df0 <currHourInc+0x20>
		currTime.Hours = 1;
 8001de8:	4b16      	ldr	r3, [pc, #88]	@ (8001e44 <currHourInc+0x74>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	701a      	strb	r2, [r3, #0]
 8001dee:	e01e      	b.n	8001e2e <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 8001df0:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <currHourInc+0x74>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b0b      	cmp	r3, #11
 8001df6:	d10e      	bne.n	8001e16 <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001df8:	4b12      	ldr	r3, [pc, #72]	@ (8001e44 <currHourInc+0x74>)
 8001dfa:	78db      	ldrb	r3, [r3, #3]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d103      	bne.n	8001e08 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001e00:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <currHourInc+0x74>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	70da      	strb	r2, [r3, #3]
 8001e06:	e002      	b.n	8001e0e <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001e08:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <currHourInc+0x74>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e44 <currHourInc+0x74>)
 8001e10:	220c      	movs	r2, #12
 8001e12:	701a      	strb	r2, [r3, #0]
 8001e14:	e00b      	b.n	8001e2e <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 8001e16:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <currHourInc+0x7c>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b0a      	cmp	r3, #10
 8001e1c:	d806      	bhi.n	8001e2c <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 8001e1e:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <currHourInc+0x74>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	3301      	adds	r3, #1
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4b07      	ldr	r3, [pc, #28]	@ (8001e44 <currHourInc+0x74>)
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	e000      	b.n	8001e2e <currHourInc+0x5e>
	}
	else {
		__NOP();
 8001e2c:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001e2e:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <currHourInc+0x74>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001e34:	4b03      	ldr	r3, [pc, #12]	@ (8001e44 <currHourInc+0x74>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]

}
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	200000ac 	.word	0x200000ac
 8001e44:	20000098 	.word	0x20000098
 8001e48:	2000011c 	.word	0x2000011c
 8001e4c:	200000b0 	.word	0x200000b0

08001e50 <alarmMinuteInc>:

/*
 * Increment User alarm time minute
 */
void alarmMinuteInc(void) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 8001e54:	4b0c      	ldr	r3, [pc, #48]	@ (8001e88 <alarmMinuteInc+0x38>)
 8001e56:	785b      	ldrb	r3, [r3, #1]
 8001e58:	2b3a      	cmp	r3, #58	@ 0x3a
 8001e5a:	d903      	bls.n	8001e64 <alarmMinuteInc+0x14>
		/*
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		//alarmHourInc();
		userAlarmTime.Minutes = 0;
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e88 <alarmMinuteInc+0x38>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	705a      	strb	r2, [r3, #1]
 8001e62:	e00b      	b.n	8001e7c <alarmMinuteInc+0x2c>
	}
	else if(userAlarmTime.Minutes < 59) {
 8001e64:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <alarmMinuteInc+0x38>)
 8001e66:	785b      	ldrb	r3, [r3, #1]
 8001e68:	2b3a      	cmp	r3, #58	@ 0x3a
 8001e6a:	d806      	bhi.n	8001e7a <alarmMinuteInc+0x2a>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <alarmMinuteInc+0x38>)
 8001e6e:	785b      	ldrb	r3, [r3, #1]
 8001e70:	3301      	adds	r3, #1
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <alarmMinuteInc+0x38>)
 8001e76:	705a      	strb	r2, [r3, #1]
 8001e78:	e000      	b.n	8001e7c <alarmMinuteInc+0x2c>
	}
	else {
		__NOP();
 8001e7a:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001e7c:	f000 f882 	bl	8001f84 <updateRTCBackupReg>

}
 8001e80:	46c0      	nop			@ (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	46c0      	nop			@ (mov r8, r8)
 8001e88:	200000b0 	.word	0x200000b0

08001e8c <currMinuteInc>:

/*
 * Increment current time minute
 */
void currMinuteInc(void) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001e90:	4a11      	ldr	r2, [pc, #68]	@ (8001ed8 <currMinuteInc+0x4c>)
 8001e92:	4912      	ldr	r1, [pc, #72]	@ (8001edc <currMinuteInc+0x50>)
 8001e94:	4b12      	ldr	r3, [pc, #72]	@ (8001ee0 <currMinuteInc+0x54>)
 8001e96:	0018      	movs	r0, r3
 8001e98:	f7fe fdda 	bl	8000a50 <getRTCTime>

	if(currTime.Minutes >= 59) {
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <currMinuteInc+0x50>)
 8001e9e:	785b      	ldrb	r3, [r3, #1]
 8001ea0:	2b3a      	cmp	r3, #58	@ 0x3a
 8001ea2:	d903      	bls.n	8001eac <currMinuteInc+0x20>
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		// currHourInc();

		currTime.Minutes = 0;
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8001edc <currMinuteInc+0x50>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	705a      	strb	r2, [r3, #1]
 8001eaa:	e00b      	b.n	8001ec4 <currMinuteInc+0x38>
	}
	else if(currTime.Minutes < 59) {
 8001eac:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <currMinuteInc+0x50>)
 8001eae:	785b      	ldrb	r3, [r3, #1]
 8001eb0:	2b3a      	cmp	r3, #58	@ 0x3a
 8001eb2:	d806      	bhi.n	8001ec2 <currMinuteInc+0x36>
		currTime.Minutes = currTime.Minutes + 1;
 8001eb4:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <currMinuteInc+0x50>)
 8001eb6:	785b      	ldrb	r3, [r3, #1]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <currMinuteInc+0x50>)
 8001ebe:	705a      	strb	r2, [r3, #1]
 8001ec0:	e000      	b.n	8001ec4 <currMinuteInc+0x38>
	}
	else {
		__NOP();
 8001ec2:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001ec4:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <currMinuteInc+0x50>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001eca:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <currMinuteInc+0x50>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]

}
 8001ed0:	46c0      	nop			@ (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	200000ac 	.word	0x200000ac
 8001edc:	20000098 	.word	0x20000098
 8001ee0:	2000011c 	.word	0x2000011c

08001ee4 <dispFault>:

/*
 * Displays a non-critical fault to indicate reduced functionality
 */
void dispFault(void) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
 8001ee8:	4b04      	ldr	r3, [pc, #16]	@ (8001efc <dispFault+0x18>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	2201      	movs	r2, #1
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f000 ff4c 	bl	8002d8e <HAL_GPIO_WritePin>
}
 8001ef6:	46c0      	nop			@ (mov r8, r8)
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000028 	.word	0x20000028

08001f00 <dispFailure>:

/*
 * Displays a critical failure and ceases all operations
 */
void dispFailure(void) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8001f06:	4b1c      	ldr	r3, [pc, #112]	@ (8001f78 <dispFailure+0x78>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f003 fc2e 	bl	800576c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001f10:	4b19      	ldr	r3, [pc, #100]	@ (8001f78 <dispFailure+0x78>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f003 fbdd 	bl	80056d4 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001f1a:	4b17      	ldr	r3, [pc, #92]	@ (8001f78 <dispFailure+0x78>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f22:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001f24:	1cfb      	adds	r3, r7, #3
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001f2a:	4b13      	ldr	r3, [pc, #76]	@ (8001f78 <dispFailure+0x78>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	4a11      	ldr	r2, [pc, #68]	@ (8001f7c <dispFailure+0x7c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d9f6      	bls.n	8001f2a <dispFailure+0x2a>

			HAL_GPIO_TogglePin(alarmLEDPort, alarmLEDPin);
 8001f3c:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <dispFailure+0x80>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2280      	movs	r2, #128	@ 0x80
 8001f42:	0152      	lsls	r2, r2, #5
 8001f44:	0011      	movs	r1, r2
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 ff3e 	bl	8002dc8 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <dispFailure+0x78>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f54:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001f56:	1cfb      	adds	r3, r7, #3
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	1e5a      	subs	r2, r3, #1
 8001f5c:	4193      	sbcs	r3, r2
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2201      	movs	r2, #1
 8001f62:	4053      	eors	r3, r2
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	001a      	movs	r2, r3
 8001f68:	1cfb      	adds	r3, r7, #3
 8001f6a:	701a      	strb	r2, [r3, #0]
 8001f6c:	781a      	ldrb	r2, [r3, #0]
 8001f6e:	2101      	movs	r1, #1
 8001f70:	400a      	ands	r2, r1
 8001f72:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001f74:	e7d9      	b.n	8001f2a <dispFailure+0x2a>
 8001f76:	46c0      	nop			@ (mov r8, r8)
 8001f78:	20000044 	.word	0x20000044
 8001f7c:	00003ffe 	.word	0x00003ffe
 8001f80:	20000010 	.word	0x20000010

08001f84 <updateRTCBackupReg>:
}

/*
 * Updates RTC backup register with user alarm time to be later pulled from in the case of a power outage
 */
void updateRTCBackupReg(void) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8001f88:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <updateRTCBackupReg+0x40>)
 8001f8a:	6819      	ldr	r1, [r3, #0]
 8001f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc8 <updateRTCBackupReg+0x44>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	001a      	movs	r2, r3
 8001f92:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <updateRTCBackupReg+0x48>)
 8001f94:	0018      	movs	r0, r3
 8001f96:	f003 fb0d 	bl	80055b4 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <updateRTCBackupReg+0x4c>)
 8001f9c:	6819      	ldr	r1, [r3, #0]
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc8 <updateRTCBackupReg+0x44>)
 8001fa0:	785b      	ldrb	r3, [r3, #1]
 8001fa2:	001a      	movs	r2, r3
 8001fa4:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <updateRTCBackupReg+0x48>)
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f003 fb04 	bl	80055b4 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 8001fac:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <updateRTCBackupReg+0x50>)
 8001fae:	6819      	ldr	r1, [r3, #0]
 8001fb0:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <updateRTCBackupReg+0x44>)
 8001fb2:	78db      	ldrb	r3, [r3, #3]
 8001fb4:	001a      	movs	r2, r3
 8001fb6:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <updateRTCBackupReg+0x48>)
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f003 fafb 	bl	80055b4 <HAL_RTCEx_BKUPWrite>

}
 8001fbe:	46c0      	nop			@ (mov r8, r8)
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	200000c4 	.word	0x200000c4
 8001fc8:	200000b0 	.word	0x200000b0
 8001fcc:	2000011c 	.word	0x2000011c
 8001fd0:	20000034 	.word	0x20000034
 8001fd4:	20000038 	.word	0x20000038

08001fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fdc:	b672      	cpsid	i
}
 8001fde:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe0:	46c0      	nop			@ (mov r8, r8)
 8001fe2:	e7fd      	b.n	8001fe0 <Error_Handler+0x8>

08001fe4 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8001fe4:	b5b0      	push	{r4, r5, r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	0005      	movs	r5, r0
 8001fec:	000c      	movs	r4, r1
 8001fee:	0010      	movs	r0, r2
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	1dbb      	adds	r3, r7, #6
 8001ff4:	1c2a      	adds	r2, r5, #0
 8001ff6:	801a      	strh	r2, [r3, #0]
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	1c22      	adds	r2, r4, #0
 8001ffc:	801a      	strh	r2, [r3, #0]
 8001ffe:	1cbb      	adds	r3, r7, #2
 8002000:	1c02      	adds	r2, r0, #0
 8002002:	801a      	strh	r2, [r3, #0]
 8002004:	003b      	movs	r3, r7
 8002006:	1c0a      	adds	r2, r1, #0
 8002008:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 800200a:	4b2e      	ldr	r3, [pc, #184]	@ (80020c4 <sevSeg_Init+0xe0>)
 800200c:	1dba      	adds	r2, r7, #6
 800200e:	8812      	ldrh	r2, [r2, #0]
 8002010:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8002012:	4b2d      	ldr	r3, [pc, #180]	@ (80020c8 <sevSeg_Init+0xe4>)
 8002014:	1d3a      	adds	r2, r7, #4
 8002016:	8812      	ldrh	r2, [r2, #0]
 8002018:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 800201a:	4b2c      	ldr	r3, [pc, #176]	@ (80020cc <sevSeg_Init+0xe8>)
 800201c:	1cba      	adds	r2, r7, #2
 800201e:	8812      	ldrh	r2, [r2, #0]
 8002020:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8002022:	4b2b      	ldr	r3, [pc, #172]	@ (80020d0 <sevSeg_Init+0xec>)
 8002024:	003a      	movs	r2, r7
 8002026:	8812      	ldrh	r2, [r2, #0]
 8002028:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 800202a:	4a2a      	ldr	r2, [pc, #168]	@ (80020d4 <sevSeg_Init+0xf0>)
 800202c:	2320      	movs	r3, #32
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8002034:	4a28      	ldr	r2, [pc, #160]	@ (80020d8 <sevSeg_Init+0xf4>)
 8002036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002038:	0010      	movs	r0, r2
 800203a:	0019      	movs	r1, r3
 800203c:	234c      	movs	r3, #76	@ 0x4c
 800203e:	001a      	movs	r2, r3
 8002040:	f004 fc26 	bl	8006890 <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8002044:	4b25      	ldr	r3, [pc, #148]	@ (80020dc <sevSeg_Init+0xf8>)
 8002046:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002048:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	e00b      	b.n	8002068 <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002056:	18d3      	adds	r3, r2, r3
 8002058:	6819      	ldr	r1, [r3, #0]
 800205a:	4b21      	ldr	r3, [pc, #132]	@ (80020e0 <sevSeg_Init+0xfc>)
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	0092      	lsls	r2, r2, #2
 8002060:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	3301      	adds	r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b04      	cmp	r3, #4
 800206c:	ddf0      	ble.n	8002050 <sevSeg_Init+0x6c>
	}

	sevSeg_setIntensity(50);
 800206e:	2032      	movs	r0, #50	@ 0x32
 8002070:	f000 f8ec 	bl	800224c <sevSeg_setIntensity>
//	}
//
//	HAL_TIM_Base_Stop(htim);

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8002074:	4b1a      	ldr	r3, [pc, #104]	@ (80020e0 <sevSeg_Init+0xfc>)
 8002076:	6918      	ldr	r0, [r3, #16]
 8002078:	4b16      	ldr	r3, [pc, #88]	@ (80020d4 <sevSeg_Init+0xf0>)
 800207a:	8819      	ldrh	r1, [r3, #0]
 800207c:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <sevSeg_Init+0x100>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	001a      	movs	r2, r3
 8002082:	f000 fe84 	bl	8002d8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8002086:	4b16      	ldr	r3, [pc, #88]	@ (80020e0 <sevSeg_Init+0xfc>)
 8002088:	6918      	ldr	r0, [r3, #16]
 800208a:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <sevSeg_Init+0xf0>)
 800208c:	8819      	ldrh	r1, [r3, #0]
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <sevSeg_Init+0x100>)
 8002090:	785b      	ldrb	r3, [r3, #1]
 8002092:	001a      	movs	r2, r3
 8002094:	f000 fe7b 	bl	8002d8e <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002098:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <sevSeg_Init+0xfc>)
 800209a:	6898      	ldr	r0, [r3, #8]
 800209c:	4b0b      	ldr	r3, [pc, #44]	@ (80020cc <sevSeg_Init+0xe8>)
 800209e:	8819      	ldrh	r1, [r3, #0]
 80020a0:	4b10      	ldr	r3, [pc, #64]	@ (80020e4 <sevSeg_Init+0x100>)
 80020a2:	785b      	ldrb	r3, [r3, #1]
 80020a4:	001a      	movs	r2, r3
 80020a6:	f000 fe72 	bl	8002d8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80020aa:	4b0d      	ldr	r3, [pc, #52]	@ (80020e0 <sevSeg_Init+0xfc>)
 80020ac:	6898      	ldr	r0, [r3, #8]
 80020ae:	4b07      	ldr	r3, [pc, #28]	@ (80020cc <sevSeg_Init+0xe8>)
 80020b0:	8819      	ldrh	r1, [r3, #0]
 80020b2:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <sevSeg_Init+0x100>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	001a      	movs	r2, r3
 80020b8:	f000 fe69 	bl	8002d8e <HAL_GPIO_WritePin>

}
 80020bc:	46c0      	nop			@ (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b004      	add	sp, #16
 80020c2:	bdb0      	pop	{r4, r5, r7, pc}
 80020c4:	20000290 	.word	0x20000290
 80020c8:	20000292 	.word	0x20000292
 80020cc:	20000294 	.word	0x20000294
 80020d0:	20000296 	.word	0x20000296
 80020d4:	20000298 	.word	0x20000298
 80020d8:	2000029c 	.word	0x2000029c
 80020dc:	200002e8 	.word	0x200002e8
 80020e0:	20000050 	.word	0x20000050
 80020e4:	20000064 	.word	0x20000064

080020e8 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	210a      	movs	r1, #10
 80020f6:	0018      	movs	r0, r3
 80020f8:	f7fe f804 	bl	8000104 <__udivsi3>
 80020fc:	0003      	movs	r3, r0
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	2408      	movs	r4, #8
 8002102:	193b      	adds	r3, r7, r4
 8002104:	701a      	strb	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	210a      	movs	r1, #10
 800210c:	0018      	movs	r0, r3
 800210e:	f7fe f87f 	bl	8000210 <__aeabi_uidivmod>
 8002112:	000b      	movs	r3, r1
 8002114:	b2da      	uxtb	r2, r3
 8002116:	193b      	adds	r3, r7, r4
 8002118:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 800211e:	210a      	movs	r1, #10
 8002120:	0018      	movs	r0, r3
 8002122:	f7fd ffef 	bl	8000104 <__udivsi3>
 8002126:	0003      	movs	r3, r0
 8002128:	b2da      	uxtb	r2, r3
 800212a:	193b      	adds	r3, r7, r4
 800212c:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002132:	210a      	movs	r1, #10
 8002134:	0018      	movs	r0, r3
 8002136:	f7fe f86b 	bl	8000210 <__aeabi_uidivmod>
 800213a:	000b      	movs	r3, r1
 800213c:	b2da      	uxtb	r2, r3
 800213e:	193b      	adds	r3, r7, r4
 8002140:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 8002142:	2116      	movs	r1, #22
 8002144:	187b      	adds	r3, r7, r1
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	78db      	ldrb	r3, [r3, #3]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d102      	bne.n	8002158 <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 8002152:	187b      	adds	r3, r7, r1
 8002154:	2202      	movs	r2, #2
 8002156:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 8002158:	2300      	movs	r3, #0
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	e04f      	b.n	80021fe <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 800215e:	2308      	movs	r3, #8
 8002160:	18fa      	adds	r2, r7, r3
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	18d3      	adds	r3, r2, r3
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	0019      	movs	r1, r3
 800216a:	2417      	movs	r4, #23
 800216c:	193b      	adds	r3, r7, r4
 800216e:	4a30      	ldr	r2, [pc, #192]	@ (8002230 <sevSeg_updateDigits+0x148>)
 8002170:	5c52      	ldrb	r2, [r2, r1]
 8002172:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d110      	bne.n	800219c <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	210a      	movs	r1, #10
 8002180:	0018      	movs	r0, r3
 8002182:	f7fd ffbf 	bl	8000104 <__udivsi3>
 8002186:	0003      	movs	r3, r0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	001a      	movs	r2, r3
 800218c:	2316      	movs	r3, #22
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	18d2      	adds	r2, r2, r3
 8002194:	193b      	adds	r3, r7, r4
 8002196:	4927      	ldr	r1, [pc, #156]	@ (8002234 <sevSeg_updateDigits+0x14c>)
 8002198:	5c8a      	ldrb	r2, [r1, r2]
 800219a:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	e027      	b.n	80021f2 <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 80021a2:	4b25      	ldr	r3, [pc, #148]	@ (8002238 <sevSeg_updateDigits+0x150>)
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	4b25      	ldr	r3, [pc, #148]	@ (800223c <sevSeg_updateDigits+0x154>)
 80021a8:	8819      	ldrh	r1, [r3, #0]
 80021aa:	2417      	movs	r4, #23
 80021ac:	193b      	adds	r3, r7, r4
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2201      	movs	r2, #1
 80021b2:	4013      	ands	r3, r2
 80021b4:	4a22      	ldr	r2, [pc, #136]	@ (8002240 <sevSeg_updateDigits+0x158>)
 80021b6:	5cd3      	ldrb	r3, [r2, r3]
 80021b8:	001a      	movs	r2, r3
 80021ba:	f000 fde8 	bl	8002d8e <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 80021be:	4b1e      	ldr	r3, [pc, #120]	@ (8002238 <sevSeg_updateDigits+0x150>)
 80021c0:	6858      	ldr	r0, [r3, #4]
 80021c2:	4b20      	ldr	r3, [pc, #128]	@ (8002244 <sevSeg_updateDigits+0x15c>)
 80021c4:	8819      	ldrh	r1, [r3, #0]
 80021c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002240 <sevSeg_updateDigits+0x158>)
 80021c8:	785b      	ldrb	r3, [r3, #1]
 80021ca:	001a      	movs	r2, r3
 80021cc:	f000 fddf 	bl	8002d8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 80021d0:	4b19      	ldr	r3, [pc, #100]	@ (8002238 <sevSeg_updateDigits+0x150>)
 80021d2:	6858      	ldr	r0, [r3, #4]
 80021d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002244 <sevSeg_updateDigits+0x15c>)
 80021d6:	8819      	ldrh	r1, [r3, #0]
 80021d8:	4b19      	ldr	r3, [pc, #100]	@ (8002240 <sevSeg_updateDigits+0x158>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	001a      	movs	r2, r3
 80021de:	f000 fdd6 	bl	8002d8e <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 80021e2:	193b      	adds	r3, r7, r4
 80021e4:	193a      	adds	r2, r7, r4
 80021e6:	7812      	ldrb	r2, [r2, #0]
 80021e8:	0852      	lsrs	r2, r2, #1
 80021ea:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3301      	adds	r3, #1
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b07      	cmp	r3, #7
 80021f6:	ddd4      	ble.n	80021a2 <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	3301      	adds	r3, #1
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	2b03      	cmp	r3, #3
 8002202:	ddac      	ble.n	800215e <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002204:	4b0c      	ldr	r3, [pc, #48]	@ (8002238 <sevSeg_updateDigits+0x150>)
 8002206:	6898      	ldr	r0, [r3, #8]
 8002208:	4b0f      	ldr	r3, [pc, #60]	@ (8002248 <sevSeg_updateDigits+0x160>)
 800220a:	8819      	ldrh	r1, [r3, #0]
 800220c:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <sevSeg_updateDigits+0x158>)
 800220e:	785b      	ldrb	r3, [r3, #1]
 8002210:	001a      	movs	r2, r3
 8002212:	f000 fdbc 	bl	8002d8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002216:	4b08      	ldr	r3, [pc, #32]	@ (8002238 <sevSeg_updateDigits+0x150>)
 8002218:	6898      	ldr	r0, [r3, #8]
 800221a:	4b0b      	ldr	r3, [pc, #44]	@ (8002248 <sevSeg_updateDigits+0x160>)
 800221c:	8819      	ldrh	r1, [r3, #0]
 800221e:	4b08      	ldr	r3, [pc, #32]	@ (8002240 <sevSeg_updateDigits+0x158>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	001a      	movs	r2, r3
 8002224:	f000 fdb3 	bl	8002d8e <HAL_GPIO_WritePin>

	return;
 8002228:	46c0      	nop			@ (mov r8, r8)

}
 800222a:	46bd      	mov	sp, r7
 800222c:	b007      	add	sp, #28
 800222e:	bd90      	pop	{r4, r7, pc}
 8002230:	080068e4 	.word	0x080068e4
 8002234:	080068f0 	.word	0x080068f0
 8002238:	20000050 	.word	0x20000050
 800223c:	20000290 	.word	0x20000290
 8002240:	20000064 	.word	0x20000064
 8002244:	20000292 	.word	0x20000292
 8002248:	20000294 	.word	0x20000294

0800224c <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	0002      	movs	r2, r0
 8002254:	1dbb      	adds	r3, r7, #6
 8002256:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 8002258:	4b20      	ldr	r3, [pc, #128]	@ (80022dc <sevSeg_setIntensity+0x90>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d105      	bne.n	800226c <sevSeg_setIntensity+0x20>
 8002260:	4b1f      	ldr	r3, [pc, #124]	@ (80022e0 <sevSeg_setIntensity+0x94>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	1dba      	adds	r2, r7, #6
 8002266:	8812      	ldrh	r2, [r2, #0]
 8002268:	635a      	str	r2, [r3, #52]	@ 0x34
 800226a:	e02c      	b.n	80022c6 <sevSeg_setIntensity+0x7a>
 800226c:	4b1b      	ldr	r3, [pc, #108]	@ (80022dc <sevSeg_setIntensity+0x90>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b04      	cmp	r3, #4
 8002272:	d105      	bne.n	8002280 <sevSeg_setIntensity+0x34>
 8002274:	4b1a      	ldr	r3, [pc, #104]	@ (80022e0 <sevSeg_setIntensity+0x94>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	1dbb      	adds	r3, r7, #6
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	6393      	str	r3, [r2, #56]	@ 0x38
 800227e:	e022      	b.n	80022c6 <sevSeg_setIntensity+0x7a>
 8002280:	4b16      	ldr	r3, [pc, #88]	@ (80022dc <sevSeg_setIntensity+0x90>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b08      	cmp	r3, #8
 8002286:	d105      	bne.n	8002294 <sevSeg_setIntensity+0x48>
 8002288:	4b15      	ldr	r3, [pc, #84]	@ (80022e0 <sevSeg_setIntensity+0x94>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	1dbb      	adds	r3, r7, #6
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002292:	e018      	b.n	80022c6 <sevSeg_setIntensity+0x7a>
 8002294:	4b11      	ldr	r3, [pc, #68]	@ (80022dc <sevSeg_setIntensity+0x90>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b0c      	cmp	r3, #12
 800229a:	d105      	bne.n	80022a8 <sevSeg_setIntensity+0x5c>
 800229c:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <sevSeg_setIntensity+0x94>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	1dbb      	adds	r3, r7, #6
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a6:	e00e      	b.n	80022c6 <sevSeg_setIntensity+0x7a>
 80022a8:	4b0c      	ldr	r3, [pc, #48]	@ (80022dc <sevSeg_setIntensity+0x90>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b10      	cmp	r3, #16
 80022ae:	d105      	bne.n	80022bc <sevSeg_setIntensity+0x70>
 80022b0:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <sevSeg_setIntensity+0x94>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	1dbb      	adds	r3, r7, #6
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80022ba:	e004      	b.n	80022c6 <sevSeg_setIntensity+0x7a>
 80022bc:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <sevSeg_setIntensity+0x94>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	1dbb      	adds	r3, r7, #6
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 80022c6:	4b05      	ldr	r3, [pc, #20]	@ (80022dc <sevSeg_setIntensity+0x90>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	4b05      	ldr	r3, [pc, #20]	@ (80022e0 <sevSeg_setIntensity+0x94>)
 80022cc:	0011      	movs	r1, r2
 80022ce:	0018      	movs	r0, r3
 80022d0:	f003 fb4c 	bl	800596c <HAL_TIM_PWM_Start>

}
 80022d4:	46c0      	nop			@ (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b002      	add	sp, #8
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	200002e8 	.word	0x200002e8
 80022e0:	2000029c 	.word	0x2000029c

080022e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ea:	4b13      	ldr	r3, [pc, #76]	@ (8002338 <HAL_MspInit+0x54>)
 80022ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022ee:	4b12      	ldr	r3, [pc, #72]	@ (8002338 <HAL_MspInit+0x54>)
 80022f0:	2101      	movs	r1, #1
 80022f2:	430a      	orrs	r2, r1
 80022f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80022f6:	4b10      	ldr	r3, [pc, #64]	@ (8002338 <HAL_MspInit+0x54>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	2201      	movs	r2, #1
 80022fc:	4013      	ands	r3, r2
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002302:	4b0d      	ldr	r3, [pc, #52]	@ (8002338 <HAL_MspInit+0x54>)
 8002304:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002306:	4b0c      	ldr	r3, [pc, #48]	@ (8002338 <HAL_MspInit+0x54>)
 8002308:	2180      	movs	r1, #128	@ 0x80
 800230a:	0549      	lsls	r1, r1, #21
 800230c:	430a      	orrs	r2, r1
 800230e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002310:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <HAL_MspInit+0x54>)
 8002312:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002314:	2380      	movs	r3, #128	@ 0x80
 8002316:	055b      	lsls	r3, r3, #21
 8002318:	4013      	ands	r3, r2
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2100      	movs	r1, #0
 8002322:	2004      	movs	r0, #4
 8002324:	f000 fb80 	bl	8002a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002328:	2004      	movs	r0, #4
 800232a:	f000 fb92 	bl	8002a52 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800232e:	46c0      	nop			@ (mov r8, r8)
 8002330:	46bd      	mov	sp, r7
 8002332:	b002      	add	sp, #8
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			@ (mov r8, r8)
 8002338:	40021000 	.word	0x40021000

0800233c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b095      	sub	sp, #84	@ 0x54
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	233c      	movs	r3, #60	@ 0x3c
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	0018      	movs	r0, r3
 800234a:	2314      	movs	r3, #20
 800234c:	001a      	movs	r2, r3
 800234e:	2100      	movs	r1, #0
 8002350:	f004 fa72 	bl	8006838 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002354:	2414      	movs	r4, #20
 8002356:	193b      	adds	r3, r7, r4
 8002358:	0018      	movs	r0, r3
 800235a:	2328      	movs	r3, #40	@ 0x28
 800235c:	001a      	movs	r2, r3
 800235e:	2100      	movs	r1, #0
 8002360:	f004 fa6a 	bl	8006838 <memset>
  if(hi2c->Instance==I2C1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a22      	ldr	r2, [pc, #136]	@ (80023f4 <HAL_I2C_MspInit+0xb8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d13d      	bne.n	80023ea <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800236e:	193b      	adds	r3, r7, r4
 8002370:	2220      	movs	r2, #32
 8002372:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002374:	193b      	adds	r3, r7, r4
 8002376:	2200      	movs	r2, #0
 8002378:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800237a:	193b      	adds	r3, r7, r4
 800237c:	0018      	movs	r0, r3
 800237e:	f002 f8b9 	bl	80044f4 <HAL_RCCEx_PeriphCLKConfig>
 8002382:	1e03      	subs	r3, r0, #0
 8002384:	d001      	beq.n	800238a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002386:	f7ff fe27 	bl	8001fd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238a:	4b1b      	ldr	r3, [pc, #108]	@ (80023f8 <HAL_I2C_MspInit+0xbc>)
 800238c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800238e:	4b1a      	ldr	r3, [pc, #104]	@ (80023f8 <HAL_I2C_MspInit+0xbc>)
 8002390:	2102      	movs	r1, #2
 8002392:	430a      	orrs	r2, r1
 8002394:	635a      	str	r2, [r3, #52]	@ 0x34
 8002396:	4b18      	ldr	r3, [pc, #96]	@ (80023f8 <HAL_I2C_MspInit+0xbc>)
 8002398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800239a:	2202      	movs	r2, #2
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023a2:	213c      	movs	r1, #60	@ 0x3c
 80023a4:	187b      	adds	r3, r7, r1
 80023a6:	22c0      	movs	r2, #192	@ 0xc0
 80023a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023aa:	187b      	adds	r3, r7, r1
 80023ac:	2212      	movs	r2, #18
 80023ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	187b      	adds	r3, r7, r1
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b6:	187b      	adds	r3, r7, r1
 80023b8:	2200      	movs	r2, #0
 80023ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80023bc:	187b      	adds	r3, r7, r1
 80023be:	2206      	movs	r2, #6
 80023c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c2:	187b      	adds	r3, r7, r1
 80023c4:	4a0d      	ldr	r2, [pc, #52]	@ (80023fc <HAL_I2C_MspInit+0xc0>)
 80023c6:	0019      	movs	r1, r3
 80023c8:	0010      	movs	r0, r2
 80023ca:	f000 fb5f 	bl	8002a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023ce:	4b0a      	ldr	r3, [pc, #40]	@ (80023f8 <HAL_I2C_MspInit+0xbc>)
 80023d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023d2:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <HAL_I2C_MspInit+0xbc>)
 80023d4:	2180      	movs	r1, #128	@ 0x80
 80023d6:	0389      	lsls	r1, r1, #14
 80023d8:	430a      	orrs	r2, r1
 80023da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023dc:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <HAL_I2C_MspInit+0xbc>)
 80023de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023e0:	2380      	movs	r3, #128	@ 0x80
 80023e2:	039b      	lsls	r3, r3, #14
 80023e4:	4013      	ands	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023ea:	46c0      	nop			@ (mov r8, r8)
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b015      	add	sp, #84	@ 0x54
 80023f0:	bd90      	pop	{r4, r7, pc}
 80023f2:	46c0      	nop			@ (mov r8, r8)
 80023f4:	40005400 	.word	0x40005400
 80023f8:	40021000 	.word	0x40021000
 80023fc:	50000400 	.word	0x50000400

08002400 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b08f      	sub	sp, #60	@ 0x3c
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002408:	2410      	movs	r4, #16
 800240a:	193b      	adds	r3, r7, r4
 800240c:	0018      	movs	r0, r3
 800240e:	2328      	movs	r3, #40	@ 0x28
 8002410:	001a      	movs	r2, r3
 8002412:	2100      	movs	r1, #0
 8002414:	f004 fa10 	bl	8006838 <memset>
  if(hrtc->Instance==RTC)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a19      	ldr	r2, [pc, #100]	@ (8002484 <HAL_RTC_MspInit+0x84>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d12c      	bne.n	800247c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002422:	193b      	adds	r3, r7, r4
 8002424:	2280      	movs	r2, #128	@ 0x80
 8002426:	0292      	lsls	r2, r2, #10
 8002428:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800242a:	193b      	adds	r3, r7, r4
 800242c:	2280      	movs	r2, #128	@ 0x80
 800242e:	0052      	lsls	r2, r2, #1
 8002430:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002432:	193b      	adds	r3, r7, r4
 8002434:	0018      	movs	r0, r3
 8002436:	f002 f85d 	bl	80044f4 <HAL_RCCEx_PeriphCLKConfig>
 800243a:	1e03      	subs	r3, r0, #0
 800243c:	d001      	beq.n	8002442 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800243e:	f7ff fdcb 	bl	8001fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002442:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <HAL_RTC_MspInit+0x88>)
 8002444:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002446:	4b10      	ldr	r3, [pc, #64]	@ (8002488 <HAL_RTC_MspInit+0x88>)
 8002448:	2180      	movs	r1, #128	@ 0x80
 800244a:	0209      	lsls	r1, r1, #8
 800244c:	430a      	orrs	r2, r1
 800244e:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002450:	4b0d      	ldr	r3, [pc, #52]	@ (8002488 <HAL_RTC_MspInit+0x88>)
 8002452:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002454:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <HAL_RTC_MspInit+0x88>)
 8002456:	2180      	movs	r1, #128	@ 0x80
 8002458:	00c9      	lsls	r1, r1, #3
 800245a:	430a      	orrs	r2, r1
 800245c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800245e:	4b0a      	ldr	r3, [pc, #40]	@ (8002488 <HAL_RTC_MspInit+0x88>)
 8002460:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002462:	2380      	movs	r3, #128	@ 0x80
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4013      	ands	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800246c:	2200      	movs	r2, #0
 800246e:	2100      	movs	r1, #0
 8002470:	2002      	movs	r0, #2
 8002472:	f000 fad9 	bl	8002a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8002476:	2002      	movs	r0, #2
 8002478:	f000 faeb 	bl	8002a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800247c:	46c0      	nop			@ (mov r8, r8)
 800247e:	46bd      	mov	sp, r7
 8002480:	b00f      	add	sp, #60	@ 0x3c
 8002482:	bd90      	pop	{r4, r7, pc}
 8002484:	40002800 	.word	0x40002800
 8002488:	40021000 	.word	0x40021000

0800248c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b08f      	sub	sp, #60	@ 0x3c
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002494:	2410      	movs	r4, #16
 8002496:	193b      	adds	r3, r7, r4
 8002498:	0018      	movs	r0, r3
 800249a:	2328      	movs	r3, #40	@ 0x28
 800249c:	001a      	movs	r2, r3
 800249e:	2100      	movs	r1, #0
 80024a0:	f004 f9ca 	bl	8006838 <memset>
  if(htim_pwm->Instance==TIM1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002518 <HAL_TIM_PWM_MspInit+0x8c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d11d      	bne.n	80024ea <HAL_TIM_PWM_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80024ae:	193b      	adds	r3, r7, r4
 80024b0:	2280      	movs	r2, #128	@ 0x80
 80024b2:	0392      	lsls	r2, r2, #14
 80024b4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80024b6:	193b      	adds	r3, r7, r4
 80024b8:	2200      	movs	r2, #0
 80024ba:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024bc:	193b      	adds	r3, r7, r4
 80024be:	0018      	movs	r0, r3
 80024c0:	f002 f818 	bl	80044f4 <HAL_RCCEx_PeriphCLKConfig>
 80024c4:	1e03      	subs	r3, r0, #0
 80024c6:	d001      	beq.n	80024cc <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 80024c8:	f7ff fd86 	bl	8001fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024cc:	4b13      	ldr	r3, [pc, #76]	@ (800251c <HAL_TIM_PWM_MspInit+0x90>)
 80024ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024d0:	4b12      	ldr	r3, [pc, #72]	@ (800251c <HAL_TIM_PWM_MspInit+0x90>)
 80024d2:	2180      	movs	r1, #128	@ 0x80
 80024d4:	0109      	lsls	r1, r1, #4
 80024d6:	430a      	orrs	r2, r1
 80024d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80024da:	4b10      	ldr	r3, [pc, #64]	@ (800251c <HAL_TIM_PWM_MspInit+0x90>)
 80024dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024de:	2380      	movs	r3, #128	@ 0x80
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	4013      	ands	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024e8:	e011      	b.n	800250e <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM2)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	2380      	movs	r3, #128	@ 0x80
 80024f0:	05db      	lsls	r3, r3, #23
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d10b      	bne.n	800250e <HAL_TIM_PWM_MspInit+0x82>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024f6:	4b09      	ldr	r3, [pc, #36]	@ (800251c <HAL_TIM_PWM_MspInit+0x90>)
 80024f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024fa:	4b08      	ldr	r3, [pc, #32]	@ (800251c <HAL_TIM_PWM_MspInit+0x90>)
 80024fc:	2101      	movs	r1, #1
 80024fe:	430a      	orrs	r2, r1
 8002500:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002502:	4b06      	ldr	r3, [pc, #24]	@ (800251c <HAL_TIM_PWM_MspInit+0x90>)
 8002504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002506:	2201      	movs	r2, #1
 8002508:	4013      	ands	r3, r2
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
}
 800250e:	46c0      	nop			@ (mov r8, r8)
 8002510:	46bd      	mov	sp, r7
 8002512:	b00f      	add	sp, #60	@ 0x3c
 8002514:	bd90      	pop	{r4, r7, pc}
 8002516:	46c0      	nop			@ (mov r8, r8)
 8002518:	40012c00 	.word	0x40012c00
 800251c:	40021000 	.word	0x40021000

08002520 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a18      	ldr	r2, [pc, #96]	@ (8002590 <HAL_TIM_Base_MspInit+0x70>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d10e      	bne.n	8002550 <HAL_TIM_Base_MspInit+0x30>
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002532:	4b18      	ldr	r3, [pc, #96]	@ (8002594 <HAL_TIM_Base_MspInit+0x74>)
 8002534:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002536:	4b17      	ldr	r3, [pc, #92]	@ (8002594 <HAL_TIM_Base_MspInit+0x74>)
 8002538:	2180      	movs	r1, #128	@ 0x80
 800253a:	0209      	lsls	r1, r1, #8
 800253c:	430a      	orrs	r2, r1
 800253e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002540:	4b14      	ldr	r3, [pc, #80]	@ (8002594 <HAL_TIM_Base_MspInit+0x74>)
 8002542:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002544:	2380      	movs	r3, #128	@ 0x80
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	4013      	ands	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800254e:	e01a      	b.n	8002586 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a10      	ldr	r2, [pc, #64]	@ (8002598 <HAL_TIM_Base_MspInit+0x78>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d115      	bne.n	8002586 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800255a:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <HAL_TIM_Base_MspInit+0x74>)
 800255c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800255e:	4b0d      	ldr	r3, [pc, #52]	@ (8002594 <HAL_TIM_Base_MspInit+0x74>)
 8002560:	2180      	movs	r1, #128	@ 0x80
 8002562:	0289      	lsls	r1, r1, #10
 8002564:	430a      	orrs	r2, r1
 8002566:	641a      	str	r2, [r3, #64]	@ 0x40
 8002568:	4b0a      	ldr	r3, [pc, #40]	@ (8002594 <HAL_TIM_Base_MspInit+0x74>)
 800256a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800256c:	2380      	movs	r3, #128	@ 0x80
 800256e:	029b      	lsls	r3, r3, #10
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002576:	2200      	movs	r2, #0
 8002578:	2100      	movs	r1, #0
 800257a:	2015      	movs	r0, #21
 800257c:	f000 fa54 	bl	8002a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002580:	2015      	movs	r0, #21
 8002582:	f000 fa66 	bl	8002a52 <HAL_NVIC_EnableIRQ>
}
 8002586:	46c0      	nop			@ (mov r8, r8)
 8002588:	46bd      	mov	sp, r7
 800258a:	b004      	add	sp, #16
 800258c:	bd80      	pop	{r7, pc}
 800258e:	46c0      	nop			@ (mov r8, r8)
 8002590:	40002000 	.word	0x40002000
 8002594:	40021000 	.word	0x40021000
 8002598:	40014400 	.word	0x40014400

0800259c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b08b      	sub	sp, #44	@ 0x2c
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	2414      	movs	r4, #20
 80025a6:	193b      	adds	r3, r7, r4
 80025a8:	0018      	movs	r0, r3
 80025aa:	2314      	movs	r3, #20
 80025ac:	001a      	movs	r2, r3
 80025ae:	2100      	movs	r1, #0
 80025b0:	f004 f942 	bl	8006838 <memset>
  if(htim->Instance==TIM1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a29      	ldr	r2, [pc, #164]	@ (8002660 <HAL_TIM_MspPostInit+0xc4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d124      	bne.n	8002608 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025be:	4b29      	ldr	r3, [pc, #164]	@ (8002664 <HAL_TIM_MspPostInit+0xc8>)
 80025c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025c2:	4b28      	ldr	r3, [pc, #160]	@ (8002664 <HAL_TIM_MspPostInit+0xc8>)
 80025c4:	2101      	movs	r1, #1
 80025c6:	430a      	orrs	r2, r1
 80025c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80025ca:	4b26      	ldr	r3, [pc, #152]	@ (8002664 <HAL_TIM_MspPostInit+0xc8>)
 80025cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ce:	2201      	movs	r2, #1
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025d6:	193b      	adds	r3, r7, r4
 80025d8:	2280      	movs	r2, #128	@ 0x80
 80025da:	0052      	lsls	r2, r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	0021      	movs	r1, r4
 80025e0:	187b      	adds	r3, r7, r1
 80025e2:	2202      	movs	r2, #2
 80025e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	187b      	adds	r3, r7, r1
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	187b      	adds	r3, r7, r1
 80025ee:	2200      	movs	r2, #0
 80025f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80025f2:	187b      	adds	r3, r7, r1
 80025f4:	2202      	movs	r2, #2
 80025f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f8:	187a      	adds	r2, r7, r1
 80025fa:	23a0      	movs	r3, #160	@ 0xa0
 80025fc:	05db      	lsls	r3, r3, #23
 80025fe:	0011      	movs	r1, r2
 8002600:	0018      	movs	r0, r3
 8002602:	f000 fa43 	bl	8002a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002606:	e027      	b.n	8002658 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	2380      	movs	r3, #128	@ 0x80
 800260e:	05db      	lsls	r3, r3, #23
 8002610:	429a      	cmp	r2, r3
 8002612:	d121      	bne.n	8002658 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002614:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <HAL_TIM_MspPostInit+0xc8>)
 8002616:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002618:	4b12      	ldr	r3, [pc, #72]	@ (8002664 <HAL_TIM_MspPostInit+0xc8>)
 800261a:	2104      	movs	r1, #4
 800261c:	430a      	orrs	r2, r1
 800261e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002620:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <HAL_TIM_MspPostInit+0xc8>)
 8002622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002624:	2204      	movs	r2, #4
 8002626:	4013      	ands	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 800262c:	2114      	movs	r1, #20
 800262e:	187b      	adds	r3, r7, r1
 8002630:	2240      	movs	r2, #64	@ 0x40
 8002632:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002634:	187b      	adds	r3, r7, r1
 8002636:	2202      	movs	r2, #2
 8002638:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	187b      	adds	r3, r7, r1
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002640:	187b      	adds	r3, r7, r1
 8002642:	2200      	movs	r2, #0
 8002644:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002646:	187b      	adds	r3, r7, r1
 8002648:	2202      	movs	r2, #2
 800264a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 800264c:	187b      	adds	r3, r7, r1
 800264e:	4a06      	ldr	r2, [pc, #24]	@ (8002668 <HAL_TIM_MspPostInit+0xcc>)
 8002650:	0019      	movs	r1, r3
 8002652:	0010      	movs	r0, r2
 8002654:	f000 fa1a 	bl	8002a8c <HAL_GPIO_Init>
}
 8002658:	46c0      	nop			@ (mov r8, r8)
 800265a:	46bd      	mov	sp, r7
 800265c:	b00b      	add	sp, #44	@ 0x2c
 800265e:	bd90      	pop	{r4, r7, pc}
 8002660:	40012c00 	.word	0x40012c00
 8002664:	40021000 	.word	0x40021000
 8002668:	50000800 	.word	0x50000800

0800266c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002670:	46c0      	nop			@ (mov r8, r8)
 8002672:	e7fd      	b.n	8002670 <NMI_Handler+0x4>

08002674 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002678:	46c0      	nop			@ (mov r8, r8)
 800267a:	e7fd      	b.n	8002678 <HardFault_Handler+0x4>

0800267c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002680:	46c0      	nop			@ (mov r8, r8)
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800268a:	46c0      	nop			@ (mov r8, r8)
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002694:	f000 f8dc 	bl	8002850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002698:	46c0      	nop			@ (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80026a4:	4b03      	ldr	r3, [pc, #12]	@ (80026b4 <RTC_TAMP_IRQHandler+0x14>)
 80026a6:	0018      	movs	r0, r3
 80026a8:	f002 fda2 	bl	80051f0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80026ac:	46c0      	nop			@ (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	46c0      	nop			@ (mov r8, r8)
 80026b4:	2000011c 	.word	0x2000011c

080026b8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80026bc:	46c0      	nop			@ (mov r8, r8)
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 80026c6:	2001      	movs	r0, #1
 80026c8:	f000 fb9a 	bl	8002e00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 80026cc:	2002      	movs	r0, #2
 80026ce:	f000 fb97 	bl	8002e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80026d2:	46c0      	nop			@ (mov r8, r8)
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 80026dc:	2004      	movs	r0, #4
 80026de:	f000 fb8f 	bl	8002e00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 80026e2:	2008      	movs	r0, #8
 80026e4:	f000 fb8c 	bl	8002e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80026e8:	46c0      	nop			@ (mov r8, r8)
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 80026f2:	2380      	movs	r3, #128	@ 0x80
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 fb82 	bl	8002e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80026fc:	46c0      	nop			@ (mov r8, r8)
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002708:	4b03      	ldr	r3, [pc, #12]	@ (8002718 <TIM16_IRQHandler+0x14>)
 800270a:	0018      	movs	r0, r3
 800270c:	f003 fa0c 	bl	8005b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002710:	46c0      	nop			@ (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	2000022c 	.word	0x2000022c

0800271c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002720:	46c0      	nop			@ (mov r8, r8)
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002728:	480d      	ldr	r0, [pc, #52]	@ (8002760 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800272a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800272c:	f7ff fff6 	bl	800271c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002730:	480c      	ldr	r0, [pc, #48]	@ (8002764 <LoopForever+0x6>)
  ldr r1, =_edata
 8002732:	490d      	ldr	r1, [pc, #52]	@ (8002768 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002734:	4a0d      	ldr	r2, [pc, #52]	@ (800276c <LoopForever+0xe>)
  movs r3, #0
 8002736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002738:	e002      	b.n	8002740 <LoopCopyDataInit>

0800273a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800273a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800273c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273e:	3304      	adds	r3, #4

08002740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002744:	d3f9      	bcc.n	800273a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002746:	4a0a      	ldr	r2, [pc, #40]	@ (8002770 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002748:	4c0a      	ldr	r4, [pc, #40]	@ (8002774 <LoopForever+0x16>)
  movs r3, #0
 800274a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800274c:	e001      	b.n	8002752 <LoopFillZerobss>

0800274e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002750:	3204      	adds	r2, #4

08002752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002754:	d3fb      	bcc.n	800274e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002756:	f004 f877 	bl	8006848 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800275a:	f7fe f98f 	bl	8000a7c <main>

0800275e <LoopForever>:

LoopForever:
  b LoopForever
 800275e:	e7fe      	b.n	800275e <LoopForever>
  ldr   r0, =_estack
 8002760:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002768:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800276c:	08006990 	.word	0x08006990
  ldr r2, =_sbss
 8002770:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002774:	200002f0 	.word	0x200002f0

08002778 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002778:	e7fe      	b.n	8002778 <ADC1_IRQHandler>
	...

0800277c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002782:	1dfb      	adds	r3, r7, #7
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002788:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <HAL_Init+0x3c>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <HAL_Init+0x3c>)
 800278e:	2180      	movs	r1, #128	@ 0x80
 8002790:	0049      	lsls	r1, r1, #1
 8002792:	430a      	orrs	r2, r1
 8002794:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002796:	2003      	movs	r0, #3
 8002798:	f000 f810 	bl	80027bc <HAL_InitTick>
 800279c:	1e03      	subs	r3, r0, #0
 800279e:	d003      	beq.n	80027a8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80027a0:	1dfb      	adds	r3, r7, #7
 80027a2:	2201      	movs	r2, #1
 80027a4:	701a      	strb	r2, [r3, #0]
 80027a6:	e001      	b.n	80027ac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80027a8:	f7ff fd9c 	bl	80022e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027ac:	1dfb      	adds	r3, r7, #7
 80027ae:	781b      	ldrb	r3, [r3, #0]
}
 80027b0:	0018      	movs	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b002      	add	sp, #8
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40022000 	.word	0x40022000

080027bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027bc:	b590      	push	{r4, r7, lr}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027c4:	230f      	movs	r3, #15
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80027cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002844 <HAL_InitTick+0x88>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d02b      	beq.n	800282c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80027d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002848 <HAL_InitTick+0x8c>)
 80027d6:	681c      	ldr	r4, [r3, #0]
 80027d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002844 <HAL_InitTick+0x88>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	0019      	movs	r1, r3
 80027de:	23fa      	movs	r3, #250	@ 0xfa
 80027e0:	0098      	lsls	r0, r3, #2
 80027e2:	f7fd fc8f 	bl	8000104 <__udivsi3>
 80027e6:	0003      	movs	r3, r0
 80027e8:	0019      	movs	r1, r3
 80027ea:	0020      	movs	r0, r4
 80027ec:	f7fd fc8a 	bl	8000104 <__udivsi3>
 80027f0:	0003      	movs	r3, r0
 80027f2:	0018      	movs	r0, r3
 80027f4:	f000 f93d 	bl	8002a72 <HAL_SYSTICK_Config>
 80027f8:	1e03      	subs	r3, r0, #0
 80027fa:	d112      	bne.n	8002822 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d80a      	bhi.n	8002818 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	2301      	movs	r3, #1
 8002806:	425b      	negs	r3, r3
 8002808:	2200      	movs	r2, #0
 800280a:	0018      	movs	r0, r3
 800280c:	f000 f90c 	bl	8002a28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002810:	4b0e      	ldr	r3, [pc, #56]	@ (800284c <HAL_InitTick+0x90>)
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	e00d      	b.n	8002834 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002818:	230f      	movs	r3, #15
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	e008      	b.n	8002834 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002822:	230f      	movs	r3, #15
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	e003      	b.n	8002834 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800282c:	230f      	movs	r3, #15
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002834:	230f      	movs	r3, #15
 8002836:	18fb      	adds	r3, r7, r3
 8002838:	781b      	ldrb	r3, [r3, #0]
}
 800283a:	0018      	movs	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	b005      	add	sp, #20
 8002840:	bd90      	pop	{r4, r7, pc}
 8002842:	46c0      	nop			@ (mov r8, r8)
 8002844:	20000070 	.word	0x20000070
 8002848:	20000068 	.word	0x20000068
 800284c:	2000006c 	.word	0x2000006c

08002850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002854:	4b05      	ldr	r3, [pc, #20]	@ (800286c <HAL_IncTick+0x1c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	001a      	movs	r2, r3
 800285a:	4b05      	ldr	r3, [pc, #20]	@ (8002870 <HAL_IncTick+0x20>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	18d2      	adds	r2, r2, r3
 8002860:	4b03      	ldr	r3, [pc, #12]	@ (8002870 <HAL_IncTick+0x20>)
 8002862:	601a      	str	r2, [r3, #0]
}
 8002864:	46c0      	nop			@ (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	20000070 	.word	0x20000070
 8002870:	200002ec 	.word	0x200002ec

08002874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  return uwTick;
 8002878:	4b02      	ldr	r3, [pc, #8]	@ (8002884 <HAL_GetTick+0x10>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	0018      	movs	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			@ (mov r8, r8)
 8002884:	200002ec 	.word	0x200002ec

08002888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002890:	f7ff fff0 	bl	8002874 <HAL_GetTick>
 8002894:	0003      	movs	r3, r0
 8002896:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3301      	adds	r3, #1
 80028a0:	d005      	beq.n	80028ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028a2:	4b0a      	ldr	r3, [pc, #40]	@ (80028cc <HAL_Delay+0x44>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	001a      	movs	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	189b      	adds	r3, r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	f7ff ffe0 	bl	8002874 <HAL_GetTick>
 80028b4:	0002      	movs	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d8f7      	bhi.n	80028b0 <HAL_Delay+0x28>
  {
  }
}
 80028c0:	46c0      	nop			@ (mov r8, r8)
 80028c2:	46c0      	nop			@ (mov r8, r8)
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b004      	add	sp, #16
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	46c0      	nop			@ (mov r8, r8)
 80028cc:	20000070 	.word	0x20000070

080028d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	0002      	movs	r2, r0
 80028d8:	1dfb      	adds	r3, r7, #7
 80028da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028dc:	1dfb      	adds	r3, r7, #7
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80028e2:	d809      	bhi.n	80028f8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e4:	1dfb      	adds	r3, r7, #7
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	001a      	movs	r2, r3
 80028ea:	231f      	movs	r3, #31
 80028ec:	401a      	ands	r2, r3
 80028ee:	4b04      	ldr	r3, [pc, #16]	@ (8002900 <__NVIC_EnableIRQ+0x30>)
 80028f0:	2101      	movs	r1, #1
 80028f2:	4091      	lsls	r1, r2
 80028f4:	000a      	movs	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80028f8:	46c0      	nop			@ (mov r8, r8)
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b002      	add	sp, #8
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	e000e100 	.word	0xe000e100

08002904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	0002      	movs	r2, r0
 800290c:	6039      	str	r1, [r7, #0]
 800290e:	1dfb      	adds	r3, r7, #7
 8002910:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002912:	1dfb      	adds	r3, r7, #7
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b7f      	cmp	r3, #127	@ 0x7f
 8002918:	d828      	bhi.n	800296c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800291a:	4a2f      	ldr	r2, [pc, #188]	@ (80029d8 <__NVIC_SetPriority+0xd4>)
 800291c:	1dfb      	adds	r3, r7, #7
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	b25b      	sxtb	r3, r3
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	33c0      	adds	r3, #192	@ 0xc0
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	589b      	ldr	r3, [r3, r2]
 800292a:	1dfa      	adds	r2, r7, #7
 800292c:	7812      	ldrb	r2, [r2, #0]
 800292e:	0011      	movs	r1, r2
 8002930:	2203      	movs	r2, #3
 8002932:	400a      	ands	r2, r1
 8002934:	00d2      	lsls	r2, r2, #3
 8002936:	21ff      	movs	r1, #255	@ 0xff
 8002938:	4091      	lsls	r1, r2
 800293a:	000a      	movs	r2, r1
 800293c:	43d2      	mvns	r2, r2
 800293e:	401a      	ands	r2, r3
 8002940:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	019b      	lsls	r3, r3, #6
 8002946:	22ff      	movs	r2, #255	@ 0xff
 8002948:	401a      	ands	r2, r3
 800294a:	1dfb      	adds	r3, r7, #7
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	0018      	movs	r0, r3
 8002950:	2303      	movs	r3, #3
 8002952:	4003      	ands	r3, r0
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002958:	481f      	ldr	r0, [pc, #124]	@ (80029d8 <__NVIC_SetPriority+0xd4>)
 800295a:	1dfb      	adds	r3, r7, #7
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	b25b      	sxtb	r3, r3
 8002960:	089b      	lsrs	r3, r3, #2
 8002962:	430a      	orrs	r2, r1
 8002964:	33c0      	adds	r3, #192	@ 0xc0
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800296a:	e031      	b.n	80029d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800296c:	4a1b      	ldr	r2, [pc, #108]	@ (80029dc <__NVIC_SetPriority+0xd8>)
 800296e:	1dfb      	adds	r3, r7, #7
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	0019      	movs	r1, r3
 8002974:	230f      	movs	r3, #15
 8002976:	400b      	ands	r3, r1
 8002978:	3b08      	subs	r3, #8
 800297a:	089b      	lsrs	r3, r3, #2
 800297c:	3306      	adds	r3, #6
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	18d3      	adds	r3, r2, r3
 8002982:	3304      	adds	r3, #4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	1dfa      	adds	r2, r7, #7
 8002988:	7812      	ldrb	r2, [r2, #0]
 800298a:	0011      	movs	r1, r2
 800298c:	2203      	movs	r2, #3
 800298e:	400a      	ands	r2, r1
 8002990:	00d2      	lsls	r2, r2, #3
 8002992:	21ff      	movs	r1, #255	@ 0xff
 8002994:	4091      	lsls	r1, r2
 8002996:	000a      	movs	r2, r1
 8002998:	43d2      	mvns	r2, r2
 800299a:	401a      	ands	r2, r3
 800299c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	019b      	lsls	r3, r3, #6
 80029a2:	22ff      	movs	r2, #255	@ 0xff
 80029a4:	401a      	ands	r2, r3
 80029a6:	1dfb      	adds	r3, r7, #7
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	0018      	movs	r0, r3
 80029ac:	2303      	movs	r3, #3
 80029ae:	4003      	ands	r3, r0
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029b4:	4809      	ldr	r0, [pc, #36]	@ (80029dc <__NVIC_SetPriority+0xd8>)
 80029b6:	1dfb      	adds	r3, r7, #7
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	001c      	movs	r4, r3
 80029bc:	230f      	movs	r3, #15
 80029be:	4023      	ands	r3, r4
 80029c0:	3b08      	subs	r3, #8
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	430a      	orrs	r2, r1
 80029c6:	3306      	adds	r3, #6
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	18c3      	adds	r3, r0, r3
 80029cc:	3304      	adds	r3, #4
 80029ce:	601a      	str	r2, [r3, #0]
}
 80029d0:	46c0      	nop			@ (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b003      	add	sp, #12
 80029d6:	bd90      	pop	{r4, r7, pc}
 80029d8:	e000e100 	.word	0xe000e100
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	1e5a      	subs	r2, r3, #1
 80029ec:	2380      	movs	r3, #128	@ 0x80
 80029ee:	045b      	lsls	r3, r3, #17
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d301      	bcc.n	80029f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029f4:	2301      	movs	r3, #1
 80029f6:	e010      	b.n	8002a1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002a24 <SysTick_Config+0x44>)
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	3a01      	subs	r2, #1
 80029fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a00:	2301      	movs	r3, #1
 8002a02:	425b      	negs	r3, r3
 8002a04:	2103      	movs	r1, #3
 8002a06:	0018      	movs	r0, r3
 8002a08:	f7ff ff7c 	bl	8002904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a0c:	4b05      	ldr	r3, [pc, #20]	@ (8002a24 <SysTick_Config+0x44>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a12:	4b04      	ldr	r3, [pc, #16]	@ (8002a24 <SysTick_Config+0x44>)
 8002a14:	2207      	movs	r2, #7
 8002a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b002      	add	sp, #8
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	46c0      	nop			@ (mov r8, r8)
 8002a24:	e000e010 	.word	0xe000e010

08002a28 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	210f      	movs	r1, #15
 8002a34:	187b      	adds	r3, r7, r1
 8002a36:	1c02      	adds	r2, r0, #0
 8002a38:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	187b      	adds	r3, r7, r1
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	b25b      	sxtb	r3, r3
 8002a42:	0011      	movs	r1, r2
 8002a44:	0018      	movs	r0, r3
 8002a46:	f7ff ff5d 	bl	8002904 <__NVIC_SetPriority>
}
 8002a4a:	46c0      	nop			@ (mov r8, r8)
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b004      	add	sp, #16
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	0002      	movs	r2, r0
 8002a5a:	1dfb      	adds	r3, r7, #7
 8002a5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a5e:	1dfb      	adds	r3, r7, #7
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	b25b      	sxtb	r3, r3
 8002a64:	0018      	movs	r0, r3
 8002a66:	f7ff ff33 	bl	80028d0 <__NVIC_EnableIRQ>
}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b002      	add	sp, #8
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f7ff ffaf 	bl	80029e0 <SysTick_Config>
 8002a82:	0003      	movs	r3, r0
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b002      	add	sp, #8
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a9a:	e147      	b.n	8002d2c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4091      	lsls	r1, r2
 8002aa6:	000a      	movs	r2, r1
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d100      	bne.n	8002ab4 <HAL_GPIO_Init+0x28>
 8002ab2:	e138      	b.n	8002d26 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2203      	movs	r2, #3
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d005      	beq.n	8002acc <HAL_GPIO_Init+0x40>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d130      	bne.n	8002b2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	0013      	movs	r3, r2
 8002adc:	43da      	mvns	r2, r3
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	409a      	lsls	r2, r3
 8002aee:	0013      	movs	r3, r2
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b02:	2201      	movs	r2, #1
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	409a      	lsls	r2, r3
 8002b08:	0013      	movs	r3, r2
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	2201      	movs	r2, #1
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	0013      	movs	r3, r2
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2203      	movs	r2, #3
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d017      	beq.n	8002b6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	2203      	movs	r2, #3
 8002b46:	409a      	lsls	r2, r3
 8002b48:	0013      	movs	r3, r2
 8002b4a:	43da      	mvns	r2, r3
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	0013      	movs	r3, r2
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2203      	movs	r2, #3
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d123      	bne.n	8002bbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	08da      	lsrs	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3208      	adds	r2, #8
 8002b7e:	0092      	lsls	r2, r2, #2
 8002b80:	58d3      	ldr	r3, [r2, r3]
 8002b82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2207      	movs	r2, #7
 8002b88:	4013      	ands	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	220f      	movs	r2, #15
 8002b8e:	409a      	lsls	r2, r3
 8002b90:	0013      	movs	r3, r2
 8002b92:	43da      	mvns	r2, r3
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4013      	ands	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2107      	movs	r1, #7
 8002ba2:	400b      	ands	r3, r1
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	0013      	movs	r3, r2
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	08da      	lsrs	r2, r3, #3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3208      	adds	r2, #8
 8002bb8:	0092      	lsls	r2, r2, #2
 8002bba:	6939      	ldr	r1, [r7, #16]
 8002bbc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	2203      	movs	r2, #3
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	43da      	mvns	r2, r3
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2203      	movs	r2, #3
 8002bdc:	401a      	ands	r2, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	409a      	lsls	r2, r3
 8002be4:	0013      	movs	r3, r2
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	23c0      	movs	r3, #192	@ 0xc0
 8002bf8:	029b      	lsls	r3, r3, #10
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d100      	bne.n	8002c00 <HAL_GPIO_Init+0x174>
 8002bfe:	e092      	b.n	8002d26 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002c00:	4a50      	ldr	r2, [pc, #320]	@ (8002d44 <HAL_GPIO_Init+0x2b8>)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	3318      	adds	r3, #24
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	589b      	ldr	r3, [r3, r2]
 8002c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2203      	movs	r2, #3
 8002c12:	4013      	ands	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	220f      	movs	r2, #15
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	0013      	movs	r3, r2
 8002c1c:	43da      	mvns	r2, r3
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	23a0      	movs	r3, #160	@ 0xa0
 8002c28:	05db      	lsls	r3, r3, #23
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d013      	beq.n	8002c56 <HAL_GPIO_Init+0x1ca>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a45      	ldr	r2, [pc, #276]	@ (8002d48 <HAL_GPIO_Init+0x2bc>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00d      	beq.n	8002c52 <HAL_GPIO_Init+0x1c6>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a44      	ldr	r2, [pc, #272]	@ (8002d4c <HAL_GPIO_Init+0x2c0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d007      	beq.n	8002c4e <HAL_GPIO_Init+0x1c2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a43      	ldr	r2, [pc, #268]	@ (8002d50 <HAL_GPIO_Init+0x2c4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d101      	bne.n	8002c4a <HAL_GPIO_Init+0x1be>
 8002c46:	2303      	movs	r3, #3
 8002c48:	e006      	b.n	8002c58 <HAL_GPIO_Init+0x1cc>
 8002c4a:	2305      	movs	r3, #5
 8002c4c:	e004      	b.n	8002c58 <HAL_GPIO_Init+0x1cc>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e002      	b.n	8002c58 <HAL_GPIO_Init+0x1cc>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <HAL_GPIO_Init+0x1cc>
 8002c56:	2300      	movs	r3, #0
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	2103      	movs	r1, #3
 8002c5c:	400a      	ands	r2, r1
 8002c5e:	00d2      	lsls	r2, r2, #3
 8002c60:	4093      	lsls	r3, r2
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002c68:	4936      	ldr	r1, [pc, #216]	@ (8002d44 <HAL_GPIO_Init+0x2b8>)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	3318      	adds	r3, #24
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c76:	4b33      	ldr	r3, [pc, #204]	@ (8002d44 <HAL_GPIO_Init+0x2b8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4013      	ands	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	2380      	movs	r3, #128	@ 0x80
 8002c8c:	035b      	lsls	r3, r3, #13
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8002d44 <HAL_GPIO_Init+0x2b8>)
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002ca0:	4b28      	ldr	r3, [pc, #160]	@ (8002d44 <HAL_GPIO_Init+0x2b8>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	43da      	mvns	r2, r3
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	2380      	movs	r3, #128	@ 0x80
 8002cb6:	039b      	lsls	r3, r3, #14
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d44 <HAL_GPIO_Init+0x2b8>)
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002cca:	4a1e      	ldr	r2, [pc, #120]	@ (8002d44 <HAL_GPIO_Init+0x2b8>)
 8002ccc:	2384      	movs	r3, #132	@ 0x84
 8002cce:	58d3      	ldr	r3, [r2, r3]
 8002cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	43da      	mvns	r2, r3
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	2380      	movs	r3, #128	@ 0x80
 8002ce2:	029b      	lsls	r3, r3, #10
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cf0:	4914      	ldr	r1, [pc, #80]	@ (8002d44 <HAL_GPIO_Init+0x2b8>)
 8002cf2:	2284      	movs	r2, #132	@ 0x84
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002cf8:	4a12      	ldr	r2, [pc, #72]	@ (8002d44 <HAL_GPIO_Init+0x2b8>)
 8002cfa:	2380      	movs	r3, #128	@ 0x80
 8002cfc:	58d3      	ldr	r3, [r2, r3]
 8002cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	43da      	mvns	r2, r3
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	2380      	movs	r3, #128	@ 0x80
 8002d10:	025b      	lsls	r3, r3, #9
 8002d12:	4013      	ands	r3, r2
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d1e:	4909      	ldr	r1, [pc, #36]	@ (8002d44 <HAL_GPIO_Init+0x2b8>)
 8002d20:	2280      	movs	r2, #128	@ 0x80
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	40da      	lsrs	r2, r3
 8002d34:	1e13      	subs	r3, r2, #0
 8002d36:	d000      	beq.n	8002d3a <HAL_GPIO_Init+0x2ae>
 8002d38:	e6b0      	b.n	8002a9c <HAL_GPIO_Init+0x10>
  }
}
 8002d3a:	46c0      	nop			@ (mov r8, r8)
 8002d3c:	46c0      	nop			@ (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b006      	add	sp, #24
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40021800 	.word	0x40021800
 8002d48:	50000400 	.word	0x50000400
 8002d4c:	50000800 	.word	0x50000800
 8002d50:	50000c00 	.word	0x50000c00

08002d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	000a      	movs	r2, r1
 8002d5e:	1cbb      	adds	r3, r7, #2
 8002d60:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	1cba      	adds	r2, r7, #2
 8002d68:	8812      	ldrh	r2, [r2, #0]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d004      	beq.n	8002d78 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002d6e:	230f      	movs	r3, #15
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	2201      	movs	r2, #1
 8002d74:	701a      	strb	r2, [r3, #0]
 8002d76:	e003      	b.n	8002d80 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d78:	230f      	movs	r3, #15
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002d80:	230f      	movs	r3, #15
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	781b      	ldrb	r3, [r3, #0]
}
 8002d86:	0018      	movs	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b004      	add	sp, #16
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	0008      	movs	r0, r1
 8002d98:	0011      	movs	r1, r2
 8002d9a:	1cbb      	adds	r3, r7, #2
 8002d9c:	1c02      	adds	r2, r0, #0
 8002d9e:	801a      	strh	r2, [r3, #0]
 8002da0:	1c7b      	adds	r3, r7, #1
 8002da2:	1c0a      	adds	r2, r1, #0
 8002da4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002da6:	1c7b      	adds	r3, r7, #1
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d004      	beq.n	8002db8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dae:	1cbb      	adds	r3, r7, #2
 8002db0:	881a      	ldrh	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002db6:	e003      	b.n	8002dc0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002db8:	1cbb      	adds	r3, r7, #2
 8002dba:	881a      	ldrh	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002dc0:	46c0      	nop			@ (mov r8, r8)
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b002      	add	sp, #8
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	000a      	movs	r2, r1
 8002dd2:	1cbb      	adds	r3, r7, #2
 8002dd4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ddc:	1cbb      	adds	r3, r7, #2
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4013      	ands	r3, r2
 8002de4:	041a      	lsls	r2, r3, #16
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	1cb9      	adds	r1, r7, #2
 8002dec:	8809      	ldrh	r1, [r1, #0]
 8002dee:	400b      	ands	r3, r1
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	619a      	str	r2, [r3, #24]
}
 8002df6:	46c0      	nop			@ (mov r8, r8)
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b004      	add	sp, #16
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	0002      	movs	r2, r0
 8002e08:	1dbb      	adds	r3, r7, #6
 8002e0a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002e0c:	4b10      	ldr	r3, [pc, #64]	@ (8002e50 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	1dba      	adds	r2, r7, #6
 8002e12:	8812      	ldrh	r2, [r2, #0]
 8002e14:	4013      	ands	r3, r2
 8002e16:	d008      	beq.n	8002e2a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002e18:	4b0d      	ldr	r3, [pc, #52]	@ (8002e50 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e1a:	1dba      	adds	r2, r7, #6
 8002e1c:	8812      	ldrh	r2, [r2, #0]
 8002e1e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002e20:	1dbb      	adds	r3, r7, #6
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f000 f815 	bl	8002e54 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002e2a:	4b09      	ldr	r3, [pc, #36]	@ (8002e50 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	1dba      	adds	r2, r7, #6
 8002e30:	8812      	ldrh	r2, [r2, #0]
 8002e32:	4013      	ands	r3, r2
 8002e34:	d008      	beq.n	8002e48 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002e36:	4b06      	ldr	r3, [pc, #24]	@ (8002e50 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e38:	1dba      	adds	r2, r7, #6
 8002e3a:	8812      	ldrh	r2, [r2, #0]
 8002e3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002e3e:	1dbb      	adds	r3, r7, #6
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	0018      	movs	r0, r3
 8002e44:	f7fe fd3a 	bl	80018bc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002e48:	46c0      	nop			@ (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40021800 	.word	0x40021800

08002e54 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	0002      	movs	r2, r0
 8002e5c:	1dbb      	adds	r3, r7, #6
 8002e5e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002e60:	46c0      	nop			@ (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b002      	add	sp, #8
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e08f      	b.n	8002f9a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2241      	movs	r2, #65	@ 0x41
 8002e7e:	5c9b      	ldrb	r3, [r3, r2]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d107      	bne.n	8002e96 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2240      	movs	r2, #64	@ 0x40
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	0018      	movs	r0, r3
 8002e92:	f7ff fa53 	bl	800233c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2241      	movs	r2, #65	@ 0x41
 8002e9a:	2124      	movs	r1, #36	@ 0x24
 8002e9c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	438a      	bics	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	493b      	ldr	r1, [pc, #236]	@ (8002fa4 <HAL_I2C_Init+0x13c>)
 8002eb8:	400a      	ands	r2, r1
 8002eba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4938      	ldr	r1, [pc, #224]	@ (8002fa8 <HAL_I2C_Init+0x140>)
 8002ec8:	400a      	ands	r2, r1
 8002eca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d108      	bne.n	8002ee6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2180      	movs	r1, #128	@ 0x80
 8002ede:	0209      	lsls	r1, r1, #8
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	e007      	b.n	8002ef6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2184      	movs	r1, #132	@ 0x84
 8002ef0:	0209      	lsls	r1, r1, #8
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d109      	bne.n	8002f12 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2180      	movs	r1, #128	@ 0x80
 8002f0a:	0109      	lsls	r1, r1, #4
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]
 8002f10:	e007      	b.n	8002f22 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4923      	ldr	r1, [pc, #140]	@ (8002fac <HAL_I2C_Init+0x144>)
 8002f1e:	400a      	ands	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4920      	ldr	r1, [pc, #128]	@ (8002fb0 <HAL_I2C_Init+0x148>)
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	491a      	ldr	r1, [pc, #104]	@ (8002fa8 <HAL_I2C_Init+0x140>)
 8002f3e:	400a      	ands	r2, r1
 8002f40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69d9      	ldr	r1, [r3, #28]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1a      	ldr	r2, [r3, #32]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2101      	movs	r1, #1
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2241      	movs	r2, #65	@ 0x41
 8002f86:	2120      	movs	r1, #32
 8002f88:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2242      	movs	r2, #66	@ 0x42
 8002f94:	2100      	movs	r1, #0
 8002f96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b002      	add	sp, #8
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	46c0      	nop			@ (mov r8, r8)
 8002fa4:	f0ffffff 	.word	0xf0ffffff
 8002fa8:	ffff7fff 	.word	0xffff7fff
 8002fac:	fffff7ff 	.word	0xfffff7ff
 8002fb0:	02008000 	.word	0x02008000

08002fb4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002fb4:	b590      	push	{r4, r7, lr}
 8002fb6:	b089      	sub	sp, #36	@ 0x24
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	0008      	movs	r0, r1
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	0019      	movs	r1, r3
 8002fc2:	230a      	movs	r3, #10
 8002fc4:	18fb      	adds	r3, r7, r3
 8002fc6:	1c02      	adds	r2, r0, #0
 8002fc8:	801a      	strh	r2, [r3, #0]
 8002fca:	2308      	movs	r3, #8
 8002fcc:	18fb      	adds	r3, r7, r3
 8002fce:	1c0a      	adds	r2, r1, #0
 8002fd0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2241      	movs	r2, #65	@ 0x41
 8002fd6:	5c9b      	ldrb	r3, [r3, r2]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d000      	beq.n	8002fe0 <HAL_I2C_Master_Transmit+0x2c>
 8002fde:	e10a      	b.n	80031f6 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2240      	movs	r2, #64	@ 0x40
 8002fe4:	5c9b      	ldrb	r3, [r3, r2]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_I2C_Master_Transmit+0x3a>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e104      	b.n	80031f8 <HAL_I2C_Master_Transmit+0x244>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2240      	movs	r2, #64	@ 0x40
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ff6:	f7ff fc3d 	bl	8002874 <HAL_GetTick>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ffe:	2380      	movs	r3, #128	@ 0x80
 8003000:	0219      	lsls	r1, r3, #8
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	2319      	movs	r3, #25
 800300a:	2201      	movs	r2, #1
 800300c:	f000 fa26 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8003010:	1e03      	subs	r3, r0, #0
 8003012:	d001      	beq.n	8003018 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0ef      	b.n	80031f8 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2241      	movs	r2, #65	@ 0x41
 800301c:	2121      	movs	r1, #33	@ 0x21
 800301e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2242      	movs	r2, #66	@ 0x42
 8003024:	2110      	movs	r1, #16
 8003026:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2208      	movs	r2, #8
 8003038:	18ba      	adds	r2, r7, r2
 800303a:	8812      	ldrh	r2, [r2, #0]
 800303c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	2bff      	cmp	r3, #255	@ 0xff
 800304c:	d906      	bls.n	800305c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	22ff      	movs	r2, #255	@ 0xff
 8003052:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003054:	2380      	movs	r3, #128	@ 0x80
 8003056:	045b      	lsls	r3, r3, #17
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	e007      	b.n	800306c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003066:	2380      	movs	r3, #128	@ 0x80
 8003068:	049b      	lsls	r3, r3, #18
 800306a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003070:	2b00      	cmp	r3, #0
 8003072:	d027      	beq.n	80030c4 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003078:	781a      	ldrb	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308e:	b29b      	uxth	r3, r3
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	3301      	adds	r3, #1
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	697c      	ldr	r4, [r7, #20]
 80030b0:	230a      	movs	r3, #10
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	8819      	ldrh	r1, [r3, #0]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	4b51      	ldr	r3, [pc, #324]	@ (8003200 <HAL_I2C_Master_Transmit+0x24c>)
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	0023      	movs	r3, r4
 80030be:	f000 fc45 	bl	800394c <I2C_TransferConfig>
 80030c2:	e06f      	b.n	80031a4 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	697c      	ldr	r4, [r7, #20]
 80030cc:	230a      	movs	r3, #10
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	8819      	ldrh	r1, [r3, #0]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	4b4a      	ldr	r3, [pc, #296]	@ (8003200 <HAL_I2C_Master_Transmit+0x24c>)
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	0023      	movs	r3, r4
 80030da:	f000 fc37 	bl	800394c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80030de:	e061      	b.n	80031a4 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	0018      	movs	r0, r3
 80030e8:	f000 fa10 	bl	800350c <I2C_WaitOnTXISFlagUntilTimeout>
 80030ec:	1e03      	subs	r3, r0, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e081      	b.n	80031f8 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	781a      	ldrb	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d03a      	beq.n	80031a4 <HAL_I2C_Master_Transmit+0x1f0>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003132:	2b00      	cmp	r3, #0
 8003134:	d136      	bne.n	80031a4 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003136:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	0013      	movs	r3, r2
 8003140:	2200      	movs	r2, #0
 8003142:	2180      	movs	r1, #128	@ 0x80
 8003144:	f000 f98a 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8003148:	1e03      	subs	r3, r0, #0
 800314a:	d001      	beq.n	8003150 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e053      	b.n	80031f8 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003154:	b29b      	uxth	r3, r3
 8003156:	2bff      	cmp	r3, #255	@ 0xff
 8003158:	d911      	bls.n	800317e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	22ff      	movs	r2, #255	@ 0xff
 800315e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003164:	b2da      	uxtb	r2, r3
 8003166:	2380      	movs	r3, #128	@ 0x80
 8003168:	045c      	lsls	r4, r3, #17
 800316a:	230a      	movs	r3, #10
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	8819      	ldrh	r1, [r3, #0]
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	2300      	movs	r3, #0
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	0023      	movs	r3, r4
 8003178:	f000 fbe8 	bl	800394c <I2C_TransferConfig>
 800317c:	e012      	b.n	80031a4 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318c:	b2da      	uxtb	r2, r3
 800318e:	2380      	movs	r3, #128	@ 0x80
 8003190:	049c      	lsls	r4, r3, #18
 8003192:	230a      	movs	r3, #10
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	8819      	ldrh	r1, [r3, #0]
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	2300      	movs	r3, #0
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	0023      	movs	r3, r4
 80031a0:	f000 fbd4 	bl	800394c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d198      	bne.n	80030e0 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	0018      	movs	r0, r3
 80031b6:	f000 f9ef 	bl	8003598 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031ba:	1e03      	subs	r3, r0, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e01a      	b.n	80031f8 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2220      	movs	r2, #32
 80031c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	490b      	ldr	r1, [pc, #44]	@ (8003204 <HAL_I2C_Master_Transmit+0x250>)
 80031d6:	400a      	ands	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2241      	movs	r2, #65	@ 0x41
 80031de:	2120      	movs	r1, #32
 80031e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2242      	movs	r2, #66	@ 0x42
 80031e6:	2100      	movs	r1, #0
 80031e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2240      	movs	r2, #64	@ 0x40
 80031ee:	2100      	movs	r1, #0
 80031f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e000      	b.n	80031f8 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80031f6:	2302      	movs	r3, #2
  }
}
 80031f8:	0018      	movs	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b007      	add	sp, #28
 80031fe:	bd90      	pop	{r4, r7, pc}
 8003200:	80002000 	.word	0x80002000
 8003204:	fe00e800 	.word	0xfe00e800

08003208 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003208:	b590      	push	{r4, r7, lr}
 800320a:	b089      	sub	sp, #36	@ 0x24
 800320c:	af02      	add	r7, sp, #8
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	0008      	movs	r0, r1
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	0019      	movs	r1, r3
 8003216:	230a      	movs	r3, #10
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	1c02      	adds	r2, r0, #0
 800321c:	801a      	strh	r2, [r3, #0]
 800321e:	2308      	movs	r3, #8
 8003220:	18fb      	adds	r3, r7, r3
 8003222:	1c0a      	adds	r2, r1, #0
 8003224:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2241      	movs	r2, #65	@ 0x41
 800322a:	5c9b      	ldrb	r3, [r3, r2]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b20      	cmp	r3, #32
 8003230:	d000      	beq.n	8003234 <HAL_I2C_Master_Receive+0x2c>
 8003232:	e0e8      	b.n	8003406 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2240      	movs	r2, #64	@ 0x40
 8003238:	5c9b      	ldrb	r3, [r3, r2]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_I2C_Master_Receive+0x3a>
 800323e:	2302      	movs	r3, #2
 8003240:	e0e2      	b.n	8003408 <HAL_I2C_Master_Receive+0x200>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2240      	movs	r2, #64	@ 0x40
 8003246:	2101      	movs	r1, #1
 8003248:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800324a:	f7ff fb13 	bl	8002874 <HAL_GetTick>
 800324e:	0003      	movs	r3, r0
 8003250:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003252:	2380      	movs	r3, #128	@ 0x80
 8003254:	0219      	lsls	r1, r3, #8
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	2319      	movs	r3, #25
 800325e:	2201      	movs	r2, #1
 8003260:	f000 f8fc 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8003264:	1e03      	subs	r3, r0, #0
 8003266:	d001      	beq.n	800326c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0cd      	b.n	8003408 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2241      	movs	r2, #65	@ 0x41
 8003270:	2122      	movs	r1, #34	@ 0x22
 8003272:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2242      	movs	r2, #66	@ 0x42
 8003278:	2110      	movs	r1, #16
 800327a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2208      	movs	r2, #8
 800328c:	18ba      	adds	r2, r7, r2
 800328e:	8812      	ldrh	r2, [r2, #0]
 8003290:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	2bff      	cmp	r3, #255	@ 0xff
 80032a0:	d911      	bls.n	80032c6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	22ff      	movs	r2, #255	@ 0xff
 80032a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	2380      	movs	r3, #128	@ 0x80
 80032b0:	045c      	lsls	r4, r3, #17
 80032b2:	230a      	movs	r3, #10
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	8819      	ldrh	r1, [r3, #0]
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	4b55      	ldr	r3, [pc, #340]	@ (8003410 <HAL_I2C_Master_Receive+0x208>)
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	0023      	movs	r3, r4
 80032c0:	f000 fb44 	bl	800394c <I2C_TransferConfig>
 80032c4:	e076      	b.n	80033b4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	2380      	movs	r3, #128	@ 0x80
 80032d8:	049c      	lsls	r4, r3, #18
 80032da:	230a      	movs	r3, #10
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	8819      	ldrh	r1, [r3, #0]
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003410 <HAL_I2C_Master_Receive+0x208>)
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	0023      	movs	r3, r4
 80032e8:	f000 fb30 	bl	800394c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80032ec:	e062      	b.n	80033b4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	0018      	movs	r0, r3
 80032f6:	f000 f993 	bl	8003620 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032fa:	1e03      	subs	r3, r0, #0
 80032fc:	d001      	beq.n	8003302 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e082      	b.n	8003408 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d03a      	beq.n	80033b4 <HAL_I2C_Master_Receive+0x1ac>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003342:	2b00      	cmp	r3, #0
 8003344:	d136      	bne.n	80033b4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003346:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	0013      	movs	r3, r2
 8003350:	2200      	movs	r2, #0
 8003352:	2180      	movs	r1, #128	@ 0x80
 8003354:	f000 f882 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8003358:	1e03      	subs	r3, r0, #0
 800335a:	d001      	beq.n	8003360 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e053      	b.n	8003408 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	2bff      	cmp	r3, #255	@ 0xff
 8003368:	d911      	bls.n	800338e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	22ff      	movs	r2, #255	@ 0xff
 800336e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003374:	b2da      	uxtb	r2, r3
 8003376:	2380      	movs	r3, #128	@ 0x80
 8003378:	045c      	lsls	r4, r3, #17
 800337a:	230a      	movs	r3, #10
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	8819      	ldrh	r1, [r3, #0]
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	2300      	movs	r3, #0
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	0023      	movs	r3, r4
 8003388:	f000 fae0 	bl	800394c <I2C_TransferConfig>
 800338c:	e012      	b.n	80033b4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339c:	b2da      	uxtb	r2, r3
 800339e:	2380      	movs	r3, #128	@ 0x80
 80033a0:	049c      	lsls	r4, r3, #18
 80033a2:	230a      	movs	r3, #10
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	8819      	ldrh	r1, [r3, #0]
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	2300      	movs	r3, #0
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	0023      	movs	r3, r4
 80033b0:	f000 facc 	bl	800394c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d197      	bne.n	80032ee <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	0018      	movs	r0, r3
 80033c6:	f000 f8e7 	bl	8003598 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033ca:	1e03      	subs	r3, r0, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e01a      	b.n	8003408 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2220      	movs	r2, #32
 80033d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	490b      	ldr	r1, [pc, #44]	@ (8003414 <HAL_I2C_Master_Receive+0x20c>)
 80033e6:	400a      	ands	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2241      	movs	r2, #65	@ 0x41
 80033ee:	2120      	movs	r1, #32
 80033f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2242      	movs	r2, #66	@ 0x42
 80033f6:	2100      	movs	r1, #0
 80033f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2240      	movs	r2, #64	@ 0x40
 80033fe:	2100      	movs	r1, #0
 8003400:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	e000      	b.n	8003408 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003406:	2302      	movs	r3, #2
  }
}
 8003408:	0018      	movs	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	b007      	add	sp, #28
 800340e:	bd90      	pop	{r4, r7, pc}
 8003410:	80002400 	.word	0x80002400
 8003414:	fe00e800 	.word	0xfe00e800

08003418 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	2202      	movs	r2, #2
 8003428:	4013      	ands	r3, r2
 800342a:	2b02      	cmp	r3, #2
 800342c:	d103      	bne.n	8003436 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2200      	movs	r2, #0
 8003434:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2201      	movs	r2, #1
 800343e:	4013      	ands	r3, r2
 8003440:	2b01      	cmp	r3, #1
 8003442:	d007      	beq.n	8003454 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2101      	movs	r1, #1
 8003450:	430a      	orrs	r2, r1
 8003452:	619a      	str	r2, [r3, #24]
  }
}
 8003454:	46c0      	nop			@ (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	b002      	add	sp, #8
 800345a:	bd80      	pop	{r7, pc}

0800345c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	1dfb      	adds	r3, r7, #7
 800346a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800346c:	e03a      	b.n	80034e4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	6839      	ldr	r1, [r7, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	0018      	movs	r0, r3
 8003476:	f000 f971 	bl	800375c <I2C_IsErrorOccurred>
 800347a:	1e03      	subs	r3, r0, #0
 800347c:	d001      	beq.n	8003482 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e040      	b.n	8003504 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	3301      	adds	r3, #1
 8003486:	d02d      	beq.n	80034e4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003488:	f7ff f9f4 	bl	8002874 <HAL_GetTick>
 800348c:	0002      	movs	r2, r0
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d302      	bcc.n	800349e <I2C_WaitOnFlagUntilTimeout+0x42>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d122      	bne.n	80034e4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	4013      	ands	r3, r2
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	425a      	negs	r2, r3
 80034ae:	4153      	adcs	r3, r2
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	001a      	movs	r2, r3
 80034b4:	1dfb      	adds	r3, r7, #7
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d113      	bne.n	80034e4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c0:	2220      	movs	r2, #32
 80034c2:	431a      	orrs	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2241      	movs	r2, #65	@ 0x41
 80034cc:	2120      	movs	r1, #32
 80034ce:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2242      	movs	r2, #66	@ 0x42
 80034d4:	2100      	movs	r1, #0
 80034d6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2240      	movs	r2, #64	@ 0x40
 80034dc:	2100      	movs	r1, #0
 80034de:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e00f      	b.n	8003504 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	4013      	ands	r3, r2
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	425a      	negs	r2, r3
 80034f4:	4153      	adcs	r3, r2
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	001a      	movs	r2, r3
 80034fa:	1dfb      	adds	r3, r7, #7
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d0b5      	beq.n	800346e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	0018      	movs	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	b004      	add	sp, #16
 800350a:	bd80      	pop	{r7, pc}

0800350c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003518:	e032      	b.n	8003580 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	0018      	movs	r0, r3
 8003522:	f000 f91b 	bl	800375c <I2C_IsErrorOccurred>
 8003526:	1e03      	subs	r3, r0, #0
 8003528:	d001      	beq.n	800352e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e030      	b.n	8003590 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	3301      	adds	r3, #1
 8003532:	d025      	beq.n	8003580 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003534:	f7ff f99e 	bl	8002874 <HAL_GetTick>
 8003538:	0002      	movs	r2, r0
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	429a      	cmp	r2, r3
 8003542:	d302      	bcc.n	800354a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d11a      	bne.n	8003580 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	2202      	movs	r2, #2
 8003552:	4013      	ands	r3, r2
 8003554:	2b02      	cmp	r3, #2
 8003556:	d013      	beq.n	8003580 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355c:	2220      	movs	r2, #32
 800355e:	431a      	orrs	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2241      	movs	r2, #65	@ 0x41
 8003568:	2120      	movs	r1, #32
 800356a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2242      	movs	r2, #66	@ 0x42
 8003570:	2100      	movs	r1, #0
 8003572:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2240      	movs	r2, #64	@ 0x40
 8003578:	2100      	movs	r1, #0
 800357a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e007      	b.n	8003590 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2202      	movs	r2, #2
 8003588:	4013      	ands	r3, r2
 800358a:	2b02      	cmp	r3, #2
 800358c:	d1c5      	bne.n	800351a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	0018      	movs	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	b004      	add	sp, #16
 8003596:	bd80      	pop	{r7, pc}

08003598 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a4:	e02f      	b.n	8003606 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	0018      	movs	r0, r3
 80035ae:	f000 f8d5 	bl	800375c <I2C_IsErrorOccurred>
 80035b2:	1e03      	subs	r3, r0, #0
 80035b4:	d001      	beq.n	80035ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e02d      	b.n	8003616 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ba:	f7ff f95b 	bl	8002874 <HAL_GetTick>
 80035be:	0002      	movs	r2, r0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d302      	bcc.n	80035d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d11a      	bne.n	8003606 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	2220      	movs	r2, #32
 80035d8:	4013      	ands	r3, r2
 80035da:	2b20      	cmp	r3, #32
 80035dc:	d013      	beq.n	8003606 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e2:	2220      	movs	r2, #32
 80035e4:	431a      	orrs	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2241      	movs	r2, #65	@ 0x41
 80035ee:	2120      	movs	r1, #32
 80035f0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2242      	movs	r2, #66	@ 0x42
 80035f6:	2100      	movs	r1, #0
 80035f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2240      	movs	r2, #64	@ 0x40
 80035fe:	2100      	movs	r1, #0
 8003600:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e007      	b.n	8003616 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	2220      	movs	r2, #32
 800360e:	4013      	ands	r3, r2
 8003610:	2b20      	cmp	r3, #32
 8003612:	d1c8      	bne.n	80035a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	0018      	movs	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	b004      	add	sp, #16
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800362c:	2317      	movs	r3, #23
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003634:	e07b      	b.n	800372e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	0018      	movs	r0, r3
 800363e:	f000 f88d 	bl	800375c <I2C_IsErrorOccurred>
 8003642:	1e03      	subs	r3, r0, #0
 8003644:	d003      	beq.n	800364e <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8003646:	2317      	movs	r3, #23
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	2201      	movs	r2, #1
 800364c:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	2220      	movs	r2, #32
 8003656:	4013      	ands	r3, r2
 8003658:	2b20      	cmp	r3, #32
 800365a:	d140      	bne.n	80036de <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 800365c:	2117      	movs	r1, #23
 800365e:	187b      	adds	r3, r7, r1
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d13b      	bne.n	80036de <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	2204      	movs	r2, #4
 800366e:	4013      	ands	r3, r2
 8003670:	2b04      	cmp	r3, #4
 8003672:	d106      	bne.n	8003682 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800367c:	187b      	adds	r3, r7, r1
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	2210      	movs	r2, #16
 800368a:	4013      	ands	r3, r2
 800368c:	2b10      	cmp	r3, #16
 800368e:	d123      	bne.n	80036d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2210      	movs	r2, #16
 8003696:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2204      	movs	r2, #4
 800369c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2220      	movs	r2, #32
 80036a4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4929      	ldr	r1, [pc, #164]	@ (8003758 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80036b2:	400a      	ands	r2, r1
 80036b4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2241      	movs	r2, #65	@ 0x41
 80036ba:	2120      	movs	r1, #32
 80036bc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2242      	movs	r2, #66	@ 0x42
 80036c2:	2100      	movs	r1, #0
 80036c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2240      	movs	r2, #64	@ 0x40
 80036ca:	2100      	movs	r1, #0
 80036cc:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80036ce:	2317      	movs	r3, #23
 80036d0:	18fb      	adds	r3, r7, r3
 80036d2:	2201      	movs	r2, #1
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	e002      	b.n	80036de <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80036de:	f7ff f8c9 	bl	8002874 <HAL_GetTick>
 80036e2:	0002      	movs	r2, r0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d302      	bcc.n	80036f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d11c      	bne.n	800372e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80036f4:	2017      	movs	r0, #23
 80036f6:	183b      	adds	r3, r7, r0
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d117      	bne.n	800372e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	2204      	movs	r2, #4
 8003706:	4013      	ands	r3, r2
 8003708:	2b04      	cmp	r3, #4
 800370a:	d010      	beq.n	800372e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003710:	2220      	movs	r2, #32
 8003712:	431a      	orrs	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2241      	movs	r2, #65	@ 0x41
 800371c:	2120      	movs	r1, #32
 800371e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2240      	movs	r2, #64	@ 0x40
 8003724:	2100      	movs	r1, #0
 8003726:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003728:	183b      	adds	r3, r7, r0
 800372a:	2201      	movs	r2, #1
 800372c:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	2204      	movs	r2, #4
 8003736:	4013      	ands	r3, r2
 8003738:	2b04      	cmp	r3, #4
 800373a:	d005      	beq.n	8003748 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800373c:	2317      	movs	r3, #23
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d100      	bne.n	8003748 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003746:	e776      	b.n	8003636 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8003748:	2317      	movs	r3, #23
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	781b      	ldrb	r3, [r3, #0]
}
 800374e:	0018      	movs	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	b006      	add	sp, #24
 8003754:	bd80      	pop	{r7, pc}
 8003756:	46c0      	nop			@ (mov r8, r8)
 8003758:	fe00e800 	.word	0xfe00e800

0800375c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08a      	sub	sp, #40	@ 0x28
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003768:	2327      	movs	r3, #39	@ 0x27
 800376a:	18fb      	adds	r3, r7, r3
 800376c:	2200      	movs	r2, #0
 800376e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	2210      	movs	r2, #16
 8003784:	4013      	ands	r3, r2
 8003786:	d100      	bne.n	800378a <I2C_IsErrorOccurred+0x2e>
 8003788:	e079      	b.n	800387e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2210      	movs	r2, #16
 8003790:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003792:	e057      	b.n	8003844 <I2C_IsErrorOccurred+0xe8>
 8003794:	2227      	movs	r2, #39	@ 0x27
 8003796:	18bb      	adds	r3, r7, r2
 8003798:	18ba      	adds	r2, r7, r2
 800379a:	7812      	ldrb	r2, [r2, #0]
 800379c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	3301      	adds	r3, #1
 80037a2:	d04f      	beq.n	8003844 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037a4:	f7ff f866 	bl	8002874 <HAL_GetTick>
 80037a8:	0002      	movs	r2, r0
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d302      	bcc.n	80037ba <I2C_IsErrorOccurred+0x5e>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d144      	bne.n	8003844 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	2380      	movs	r3, #128	@ 0x80
 80037c2:	01db      	lsls	r3, r3, #7
 80037c4:	4013      	ands	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80037c8:	2013      	movs	r0, #19
 80037ca:	183b      	adds	r3, r7, r0
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	2142      	movs	r1, #66	@ 0x42
 80037d0:	5c52      	ldrb	r2, [r2, r1]
 80037d2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	2380      	movs	r3, #128	@ 0x80
 80037dc:	021b      	lsls	r3, r3, #8
 80037de:	401a      	ands	r2, r3
 80037e0:	2380      	movs	r3, #128	@ 0x80
 80037e2:	021b      	lsls	r3, r3, #8
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d126      	bne.n	8003836 <I2C_IsErrorOccurred+0xda>
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	2380      	movs	r3, #128	@ 0x80
 80037ec:	01db      	lsls	r3, r3, #7
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d021      	beq.n	8003836 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80037f2:	183b      	adds	r3, r7, r0
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d01d      	beq.n	8003836 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2180      	movs	r1, #128	@ 0x80
 8003806:	01c9      	lsls	r1, r1, #7
 8003808:	430a      	orrs	r2, r1
 800380a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800380c:	f7ff f832 	bl	8002874 <HAL_GetTick>
 8003810:	0003      	movs	r3, r0
 8003812:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003814:	e00f      	b.n	8003836 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003816:	f7ff f82d 	bl	8002874 <HAL_GetTick>
 800381a:	0002      	movs	r2, r0
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b19      	cmp	r3, #25
 8003822:	d908      	bls.n	8003836 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	2220      	movs	r2, #32
 8003828:	4313      	orrs	r3, r2
 800382a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800382c:	2327      	movs	r3, #39	@ 0x27
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	2201      	movs	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]

              break;
 8003834:	e006      	b.n	8003844 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	2220      	movs	r2, #32
 800383e:	4013      	ands	r3, r2
 8003840:	2b20      	cmp	r3, #32
 8003842:	d1e8      	bne.n	8003816 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	2220      	movs	r2, #32
 800384c:	4013      	ands	r3, r2
 800384e:	2b20      	cmp	r3, #32
 8003850:	d004      	beq.n	800385c <I2C_IsErrorOccurred+0x100>
 8003852:	2327      	movs	r3, #39	@ 0x27
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d09b      	beq.n	8003794 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800385c:	2327      	movs	r3, #39	@ 0x27
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d103      	bne.n	800386e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2220      	movs	r2, #32
 800386c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	2204      	movs	r2, #4
 8003872:	4313      	orrs	r3, r2
 8003874:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003876:	2327      	movs	r3, #39	@ 0x27
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	2201      	movs	r2, #1
 800387c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	2380      	movs	r3, #128	@ 0x80
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	4013      	ands	r3, r2
 800388e:	d00c      	beq.n	80038aa <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	2201      	movs	r2, #1
 8003894:	4313      	orrs	r3, r2
 8003896:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2280      	movs	r2, #128	@ 0x80
 800389e:	0052      	lsls	r2, r2, #1
 80038a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038a2:	2327      	movs	r3, #39	@ 0x27
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	2380      	movs	r3, #128	@ 0x80
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4013      	ands	r3, r2
 80038b2:	d00c      	beq.n	80038ce <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	2208      	movs	r2, #8
 80038b8:	4313      	orrs	r3, r2
 80038ba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2280      	movs	r2, #128	@ 0x80
 80038c2:	00d2      	lsls	r2, r2, #3
 80038c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038c6:	2327      	movs	r3, #39	@ 0x27
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	2201      	movs	r2, #1
 80038cc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	2380      	movs	r3, #128	@ 0x80
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4013      	ands	r3, r2
 80038d6:	d00c      	beq.n	80038f2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	2202      	movs	r2, #2
 80038dc:	4313      	orrs	r3, r2
 80038de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2280      	movs	r2, #128	@ 0x80
 80038e6:	0092      	lsls	r2, r2, #2
 80038e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038ea:	2327      	movs	r3, #39	@ 0x27
 80038ec:	18fb      	adds	r3, r7, r3
 80038ee:	2201      	movs	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80038f2:	2327      	movs	r3, #39	@ 0x27
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01d      	beq.n	8003938 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	0018      	movs	r0, r3
 8003900:	f7ff fd8a 	bl	8003418 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	490e      	ldr	r1, [pc, #56]	@ (8003948 <I2C_IsErrorOccurred+0x1ec>)
 8003910:	400a      	ands	r2, r1
 8003912:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	431a      	orrs	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2241      	movs	r2, #65	@ 0x41
 8003924:	2120      	movs	r1, #32
 8003926:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2242      	movs	r2, #66	@ 0x42
 800392c:	2100      	movs	r1, #0
 800392e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2240      	movs	r2, #64	@ 0x40
 8003934:	2100      	movs	r1, #0
 8003936:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003938:	2327      	movs	r3, #39	@ 0x27
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	781b      	ldrb	r3, [r3, #0]
}
 800393e:	0018      	movs	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	b00a      	add	sp, #40	@ 0x28
 8003944:	bd80      	pop	{r7, pc}
 8003946:	46c0      	nop			@ (mov r8, r8)
 8003948:	fe00e800 	.word	0xfe00e800

0800394c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	0008      	movs	r0, r1
 8003956:	0011      	movs	r1, r2
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	240a      	movs	r4, #10
 800395c:	193b      	adds	r3, r7, r4
 800395e:	1c02      	adds	r2, r0, #0
 8003960:	801a      	strh	r2, [r3, #0]
 8003962:	2009      	movs	r0, #9
 8003964:	183b      	adds	r3, r7, r0
 8003966:	1c0a      	adds	r2, r1, #0
 8003968:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800396a:	193b      	adds	r3, r7, r4
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	059b      	lsls	r3, r3, #22
 8003970:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003972:	183b      	adds	r3, r7, r0
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	0419      	lsls	r1, r3, #16
 8003978:	23ff      	movs	r3, #255	@ 0xff
 800397a:	041b      	lsls	r3, r3, #16
 800397c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800397e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003986:	4313      	orrs	r3, r2
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	085b      	lsrs	r3, r3, #1
 800398c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003996:	0d51      	lsrs	r1, r2, #21
 8003998:	2280      	movs	r2, #128	@ 0x80
 800399a:	00d2      	lsls	r2, r2, #3
 800399c:	400a      	ands	r2, r1
 800399e:	4907      	ldr	r1, [pc, #28]	@ (80039bc <I2C_TransferConfig+0x70>)
 80039a0:	430a      	orrs	r2, r1
 80039a2:	43d2      	mvns	r2, r2
 80039a4:	401a      	ands	r2, r3
 80039a6:	0011      	movs	r1, r2
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	46bd      	mov	sp, r7
 80039b6:	b007      	add	sp, #28
 80039b8:	bd90      	pop	{r4, r7, pc}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	03ff63ff 	.word	0x03ff63ff

080039c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2241      	movs	r2, #65	@ 0x41
 80039ce:	5c9b      	ldrb	r3, [r3, r2]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d138      	bne.n	8003a48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2240      	movs	r2, #64	@ 0x40
 80039da:	5c9b      	ldrb	r3, [r3, r2]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e032      	b.n	8003a4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2240      	movs	r2, #64	@ 0x40
 80039e8:	2101      	movs	r1, #1
 80039ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2241      	movs	r2, #65	@ 0x41
 80039f0:	2124      	movs	r1, #36	@ 0x24
 80039f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2101      	movs	r1, #1
 8003a00:	438a      	bics	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4911      	ldr	r1, [pc, #68]	@ (8003a54 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003a10:	400a      	ands	r2, r1
 8003a12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6819      	ldr	r1, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2101      	movs	r1, #1
 8003a30:	430a      	orrs	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2241      	movs	r2, #65	@ 0x41
 8003a38:	2120      	movs	r1, #32
 8003a3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2240      	movs	r2, #64	@ 0x40
 8003a40:	2100      	movs	r1, #0
 8003a42:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	e000      	b.n	8003a4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a48:	2302      	movs	r3, #2
  }
}
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	b002      	add	sp, #8
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	ffffefff 	.word	0xffffefff

08003a58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2241      	movs	r2, #65	@ 0x41
 8003a66:	5c9b      	ldrb	r3, [r3, r2]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	d139      	bne.n	8003ae2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2240      	movs	r2, #64	@ 0x40
 8003a72:	5c9b      	ldrb	r3, [r3, r2]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e033      	b.n	8003ae4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2240      	movs	r2, #64	@ 0x40
 8003a80:	2101      	movs	r1, #1
 8003a82:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2241      	movs	r2, #65	@ 0x41
 8003a88:	2124      	movs	r1, #36	@ 0x24
 8003a8a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2101      	movs	r1, #1
 8003a98:	438a      	bics	r2, r1
 8003a9a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4a11      	ldr	r2, [pc, #68]	@ (8003aec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2101      	movs	r1, #1
 8003aca:	430a      	orrs	r2, r1
 8003acc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2241      	movs	r2, #65	@ 0x41
 8003ad2:	2120      	movs	r1, #32
 8003ad4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2240      	movs	r2, #64	@ 0x40
 8003ada:	2100      	movs	r1, #0
 8003adc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e000      	b.n	8003ae4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ae2:	2302      	movs	r3, #2
  }
}
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b004      	add	sp, #16
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	fffff0ff 	.word	0xfffff0ff

08003af0 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003af4:	4b04      	ldr	r3, [pc, #16]	@ (8003b08 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	4b03      	ldr	r3, [pc, #12]	@ (8003b08 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003afa:	2180      	movs	r1, #128	@ 0x80
 8003afc:	0049      	lsls	r1, r1, #1
 8003afe:	430a      	orrs	r2, r1
 8003b00:	601a      	str	r2, [r3, #0]
}
 8003b02:	46c0      	nop			@ (mov r8, r8)
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40007000 	.word	0x40007000

08003b0c <HAL_PWR_DisableBkUpAccess>:
/**
  * @brief  Disable access to the backup domain
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b10:	4b04      	ldr	r3, [pc, #16]	@ (8003b24 <HAL_PWR_DisableBkUpAccess+0x18>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4b03      	ldr	r3, [pc, #12]	@ (8003b24 <HAL_PWR_DisableBkUpAccess+0x18>)
 8003b16:	4904      	ldr	r1, [pc, #16]	@ (8003b28 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8003b18:	400a      	ands	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]
}
 8003b1c:	46c0      	nop			@ (mov r8, r8)
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	46c0      	nop			@ (mov r8, r8)
 8003b24:	40007000 	.word	0x40007000
 8003b28:	fffffeff 	.word	0xfffffeff

08003b2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003b34:	4b19      	ldr	r3, [pc, #100]	@ (8003b9c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a19      	ldr	r2, [pc, #100]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	4b17      	ldr	r3, [pc, #92]	@ (8003b9c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	2380      	movs	r3, #128	@ 0x80
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d11f      	bne.n	8003b90 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003b50:	4b14      	ldr	r3, [pc, #80]	@ (8003ba4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	0013      	movs	r3, r2
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	189b      	adds	r3, r3, r2
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	4912      	ldr	r1, [pc, #72]	@ (8003ba8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f7fc fad0 	bl	8000104 <__udivsi3>
 8003b64:	0003      	movs	r3, r0
 8003b66:	3301      	adds	r3, #1
 8003b68:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b6a:	e008      	b.n	8003b7e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3b01      	subs	r3, #1
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	e001      	b.n	8003b7e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e009      	b.n	8003b92 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b7e:	4b07      	ldr	r3, [pc, #28]	@ (8003b9c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	2380      	movs	r3, #128	@ 0x80
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	401a      	ands	r2, r3
 8003b88:	2380      	movs	r3, #128	@ 0x80
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d0ed      	beq.n	8003b6c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	0018      	movs	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b004      	add	sp, #16
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	46c0      	nop			@ (mov r8, r8)
 8003b9c:	40007000 	.word	0x40007000
 8003ba0:	fffff9ff 	.word	0xfffff9ff
 8003ba4:	20000068 	.word	0x20000068
 8003ba8:	000f4240 	.word	0x000f4240

08003bac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e2fe      	b.n	80041bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d100      	bne.n	8003bca <HAL_RCC_OscConfig+0x1e>
 8003bc8:	e07c      	b.n	8003cc4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bca:	4bc3      	ldr	r3, [pc, #780]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2238      	movs	r2, #56	@ 0x38
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bd4:	4bc0      	ldr	r3, [pc, #768]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2203      	movs	r2, #3
 8003bda:	4013      	ands	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	2b10      	cmp	r3, #16
 8003be2:	d102      	bne.n	8003bea <HAL_RCC_OscConfig+0x3e>
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	d002      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d10b      	bne.n	8003c08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf0:	4bb9      	ldr	r3, [pc, #740]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	2380      	movs	r3, #128	@ 0x80
 8003bf6:	029b      	lsls	r3, r3, #10
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d062      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x116>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d15e      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e2d9      	b.n	80041bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	2380      	movs	r3, #128	@ 0x80
 8003c0e:	025b      	lsls	r3, r3, #9
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d107      	bne.n	8003c24 <HAL_RCC_OscConfig+0x78>
 8003c14:	4bb0      	ldr	r3, [pc, #704]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	4baf      	ldr	r3, [pc, #700]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003c1a:	2180      	movs	r1, #128	@ 0x80
 8003c1c:	0249      	lsls	r1, r1, #9
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	e020      	b.n	8003c66 <HAL_RCC_OscConfig+0xba>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	23a0      	movs	r3, #160	@ 0xa0
 8003c2a:	02db      	lsls	r3, r3, #11
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d10e      	bne.n	8003c4e <HAL_RCC_OscConfig+0xa2>
 8003c30:	4ba9      	ldr	r3, [pc, #676]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	4ba8      	ldr	r3, [pc, #672]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003c36:	2180      	movs	r1, #128	@ 0x80
 8003c38:	02c9      	lsls	r1, r1, #11
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	4ba6      	ldr	r3, [pc, #664]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	4ba5      	ldr	r3, [pc, #660]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003c44:	2180      	movs	r1, #128	@ 0x80
 8003c46:	0249      	lsls	r1, r1, #9
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	e00b      	b.n	8003c66 <HAL_RCC_OscConfig+0xba>
 8003c4e:	4ba2      	ldr	r3, [pc, #648]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	4ba1      	ldr	r3, [pc, #644]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003c54:	49a1      	ldr	r1, [pc, #644]	@ (8003edc <HAL_RCC_OscConfig+0x330>)
 8003c56:	400a      	ands	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	4b9f      	ldr	r3, [pc, #636]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	4b9e      	ldr	r3, [pc, #632]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003c60:	499f      	ldr	r1, [pc, #636]	@ (8003ee0 <HAL_RCC_OscConfig+0x334>)
 8003c62:	400a      	ands	r2, r1
 8003c64:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d014      	beq.n	8003c98 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6e:	f7fe fe01 	bl	8002874 <HAL_GetTick>
 8003c72:	0003      	movs	r3, r0
 8003c74:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c78:	f7fe fdfc 	bl	8002874 <HAL_GetTick>
 8003c7c:	0002      	movs	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b64      	cmp	r3, #100	@ 0x64
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e298      	b.n	80041bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c8a:	4b93      	ldr	r3, [pc, #588]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	2380      	movs	r3, #128	@ 0x80
 8003c90:	029b      	lsls	r3, r3, #10
 8003c92:	4013      	ands	r3, r2
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0xcc>
 8003c96:	e015      	b.n	8003cc4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c98:	f7fe fdec 	bl	8002874 <HAL_GetTick>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca2:	f7fe fde7 	bl	8002874 <HAL_GetTick>
 8003ca6:	0002      	movs	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b64      	cmp	r3, #100	@ 0x64
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e283      	b.n	80041bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cb4:	4b88      	ldr	r3, [pc, #544]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	2380      	movs	r3, #128	@ 0x80
 8003cba:	029b      	lsls	r3, r3, #10
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d1f0      	bne.n	8003ca2 <HAL_RCC_OscConfig+0xf6>
 8003cc0:	e000      	b.n	8003cc4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	4013      	ands	r3, r2
 8003ccc:	d100      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x124>
 8003cce:	e099      	b.n	8003e04 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cd0:	4b81      	ldr	r3, [pc, #516]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2238      	movs	r2, #56	@ 0x38
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cda:	4b7f      	ldr	r3, [pc, #508]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2203      	movs	r2, #3
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2b10      	cmp	r3, #16
 8003ce8:	d102      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x144>
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d002      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d135      	bne.n	8003d62 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cf6:	4b78      	ldr	r3, [pc, #480]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	2380      	movs	r3, #128	@ 0x80
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d005      	beq.n	8003d0e <HAL_RCC_OscConfig+0x162>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e256      	b.n	80041bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0e:	4b72      	ldr	r3, [pc, #456]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	4a74      	ldr	r2, [pc, #464]	@ (8003ee4 <HAL_RCC_OscConfig+0x338>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	0019      	movs	r1, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	021a      	lsls	r2, r3, #8
 8003d1e:	4b6e      	ldr	r3, [pc, #440]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003d20:	430a      	orrs	r2, r1
 8003d22:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d112      	bne.n	8003d50 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d2a:	4b6b      	ldr	r3, [pc, #428]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a6e      	ldr	r2, [pc, #440]	@ (8003ee8 <HAL_RCC_OscConfig+0x33c>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	0019      	movs	r1, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	4b67      	ldr	r3, [pc, #412]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003d3e:	4b66      	ldr	r3, [pc, #408]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	0adb      	lsrs	r3, r3, #11
 8003d44:	2207      	movs	r2, #7
 8003d46:	4013      	ands	r3, r2
 8003d48:	4a68      	ldr	r2, [pc, #416]	@ (8003eec <HAL_RCC_OscConfig+0x340>)
 8003d4a:	40da      	lsrs	r2, r3
 8003d4c:	4b68      	ldr	r3, [pc, #416]	@ (8003ef0 <HAL_RCC_OscConfig+0x344>)
 8003d4e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d50:	4b68      	ldr	r3, [pc, #416]	@ (8003ef4 <HAL_RCC_OscConfig+0x348>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	0018      	movs	r0, r3
 8003d56:	f7fe fd31 	bl	80027bc <HAL_InitTick>
 8003d5a:	1e03      	subs	r3, r0, #0
 8003d5c:	d051      	beq.n	8003e02 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e22c      	b.n	80041bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d030      	beq.n	8003dcc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d6a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a5e      	ldr	r2, [pc, #376]	@ (8003ee8 <HAL_RCC_OscConfig+0x33c>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	0019      	movs	r1, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	4b57      	ldr	r3, [pc, #348]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003d7e:	4b56      	ldr	r3, [pc, #344]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4b55      	ldr	r3, [pc, #340]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003d84:	2180      	movs	r1, #128	@ 0x80
 8003d86:	0049      	lsls	r1, r1, #1
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fe fd72 	bl	8002874 <HAL_GetTick>
 8003d90:	0003      	movs	r3, r0
 8003d92:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d96:	f7fe fd6d 	bl	8002874 <HAL_GetTick>
 8003d9a:	0002      	movs	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e209      	b.n	80041bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003da8:	4b4b      	ldr	r3, [pc, #300]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	2380      	movs	r3, #128	@ 0x80
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4013      	ands	r3, r2
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db4:	4b48      	ldr	r3, [pc, #288]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	4a4a      	ldr	r2, [pc, #296]	@ (8003ee4 <HAL_RCC_OscConfig+0x338>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	0019      	movs	r1, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	021a      	lsls	r2, r3, #8
 8003dc4:	4b44      	ldr	r3, [pc, #272]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	e01b      	b.n	8003e04 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003dcc:	4b42      	ldr	r3, [pc, #264]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b41      	ldr	r3, [pc, #260]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003dd2:	4949      	ldr	r1, [pc, #292]	@ (8003ef8 <HAL_RCC_OscConfig+0x34c>)
 8003dd4:	400a      	ands	r2, r1
 8003dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd8:	f7fe fd4c 	bl	8002874 <HAL_GetTick>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003de2:	f7fe fd47 	bl	8002874 <HAL_GetTick>
 8003de6:	0002      	movs	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e1e3      	b.n	80041bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003df4:	4b38      	ldr	r3, [pc, #224]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	2380      	movs	r3, #128	@ 0x80
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d1f0      	bne.n	8003de2 <HAL_RCC_OscConfig+0x236>
 8003e00:	e000      	b.n	8003e04 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e02:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2208      	movs	r2, #8
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d047      	beq.n	8003e9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003e0e:	4b32      	ldr	r3, [pc, #200]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2238      	movs	r2, #56	@ 0x38
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b18      	cmp	r3, #24
 8003e18:	d10a      	bne.n	8003e30 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e1e:	2202      	movs	r2, #2
 8003e20:	4013      	ands	r3, r2
 8003e22:	d03c      	beq.n	8003e9e <HAL_RCC_OscConfig+0x2f2>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d138      	bne.n	8003e9e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e1c5      	b.n	80041bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d019      	beq.n	8003e6c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003e38:	4b27      	ldr	r3, [pc, #156]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003e3a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e3c:	4b26      	ldr	r3, [pc, #152]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003e3e:	2101      	movs	r1, #1
 8003e40:	430a      	orrs	r2, r1
 8003e42:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fe fd16 	bl	8002874 <HAL_GetTick>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e4e:	f7fe fd11 	bl	8002874 <HAL_GetTick>
 8003e52:	0002      	movs	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e1ad      	b.n	80041bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e60:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003e62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e64:	2202      	movs	r2, #2
 8003e66:	4013      	ands	r3, r2
 8003e68:	d0f1      	beq.n	8003e4e <HAL_RCC_OscConfig+0x2a2>
 8003e6a:	e018      	b.n	8003e9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003e6e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e70:	4b19      	ldr	r3, [pc, #100]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003e72:	2101      	movs	r1, #1
 8003e74:	438a      	bics	r2, r1
 8003e76:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fe fcfc 	bl	8002874 <HAL_GetTick>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e82:	f7fe fcf7 	bl	8002874 <HAL_GetTick>
 8003e86:	0002      	movs	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e193      	b.n	80041bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e94:	4b10      	ldr	r3, [pc, #64]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e98:	2202      	movs	r2, #2
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d1f1      	bne.n	8003e82 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2204      	movs	r2, #4
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d100      	bne.n	8003eaa <HAL_RCC_OscConfig+0x2fe>
 8003ea8:	e0c6      	b.n	8004038 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eaa:	231f      	movs	r3, #31
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	2200      	movs	r2, #0
 8003eb0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003eb2:	4b09      	ldr	r3, [pc, #36]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2238      	movs	r2, #56	@ 0x38
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	d11e      	bne.n	8003efc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003ebe:	4b06      	ldr	r3, [pc, #24]	@ (8003ed8 <HAL_RCC_OscConfig+0x32c>)
 8003ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d100      	bne.n	8003eca <HAL_RCC_OscConfig+0x31e>
 8003ec8:	e0b6      	b.n	8004038 <HAL_RCC_OscConfig+0x48c>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d000      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x328>
 8003ed2:	e0b1      	b.n	8004038 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e171      	b.n	80041bc <HAL_RCC_OscConfig+0x610>
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	fffeffff 	.word	0xfffeffff
 8003ee0:	fffbffff 	.word	0xfffbffff
 8003ee4:	ffff80ff 	.word	0xffff80ff
 8003ee8:	ffffc7ff 	.word	0xffffc7ff
 8003eec:	00f42400 	.word	0x00f42400
 8003ef0:	20000068 	.word	0x20000068
 8003ef4:	2000006c 	.word	0x2000006c
 8003ef8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003efc:	4bb1      	ldr	r3, [pc, #708]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8003efe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f00:	2380      	movs	r3, #128	@ 0x80
 8003f02:	055b      	lsls	r3, r3, #21
 8003f04:	4013      	ands	r3, r2
 8003f06:	d101      	bne.n	8003f0c <HAL_RCC_OscConfig+0x360>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <HAL_RCC_OscConfig+0x362>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d011      	beq.n	8003f36 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003f12:	4bac      	ldr	r3, [pc, #688]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8003f14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f16:	4bab      	ldr	r3, [pc, #684]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8003f18:	2180      	movs	r1, #128	@ 0x80
 8003f1a:	0549      	lsls	r1, r1, #21
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f20:	4ba8      	ldr	r3, [pc, #672]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8003f22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f24:	2380      	movs	r3, #128	@ 0x80
 8003f26:	055b      	lsls	r3, r3, #21
 8003f28:	4013      	ands	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003f2e:	231f      	movs	r3, #31
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f36:	4ba4      	ldr	r3, [pc, #656]	@ (80041c8 <HAL_RCC_OscConfig+0x61c>)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	2380      	movs	r3, #128	@ 0x80
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d11a      	bne.n	8003f78 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f42:	4ba1      	ldr	r3, [pc, #644]	@ (80041c8 <HAL_RCC_OscConfig+0x61c>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4ba0      	ldr	r3, [pc, #640]	@ (80041c8 <HAL_RCC_OscConfig+0x61c>)
 8003f48:	2180      	movs	r1, #128	@ 0x80
 8003f4a:	0049      	lsls	r1, r1, #1
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003f50:	f7fe fc90 	bl	8002874 <HAL_GetTick>
 8003f54:	0003      	movs	r3, r0
 8003f56:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f5a:	f7fe fc8b 	bl	8002874 <HAL_GetTick>
 8003f5e:	0002      	movs	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e127      	b.n	80041bc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f6c:	4b96      	ldr	r3, [pc, #600]	@ (80041c8 <HAL_RCC_OscConfig+0x61c>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	2380      	movs	r3, #128	@ 0x80
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	4013      	ands	r3, r2
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d106      	bne.n	8003f8e <HAL_RCC_OscConfig+0x3e2>
 8003f80:	4b90      	ldr	r3, [pc, #576]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8003f82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f84:	4b8f      	ldr	r3, [pc, #572]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8003f86:	2101      	movs	r1, #1
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f8c:	e01c      	b.n	8003fc8 <HAL_RCC_OscConfig+0x41c>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b05      	cmp	r3, #5
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x404>
 8003f96:	4b8b      	ldr	r3, [pc, #556]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8003f98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f9a:	4b8a      	ldr	r3, [pc, #552]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8003f9c:	2104      	movs	r1, #4
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003fa2:	4b88      	ldr	r3, [pc, #544]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8003fa4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003fa6:	4b87      	ldr	r3, [pc, #540]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8003fa8:	2101      	movs	r1, #1
 8003faa:	430a      	orrs	r2, r1
 8003fac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003fae:	e00b      	b.n	8003fc8 <HAL_RCC_OscConfig+0x41c>
 8003fb0:	4b84      	ldr	r3, [pc, #528]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8003fb2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003fb4:	4b83      	ldr	r3, [pc, #524]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	438a      	bics	r2, r1
 8003fba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003fbc:	4b81      	ldr	r3, [pc, #516]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8003fbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003fc0:	4b80      	ldr	r3, [pc, #512]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8003fc2:	2104      	movs	r1, #4
 8003fc4:	438a      	bics	r2, r1
 8003fc6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d014      	beq.n	8003ffa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fe fc50 	bl	8002874 <HAL_GetTick>
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fd8:	e009      	b.n	8003fee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f7fe fc4b 	bl	8002874 <HAL_GetTick>
 8003fde:	0002      	movs	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	4a79      	ldr	r2, [pc, #484]	@ (80041cc <HAL_RCC_OscConfig+0x620>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e0e6      	b.n	80041bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fee:	4b75      	ldr	r3, [pc, #468]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8003ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d0f0      	beq.n	8003fda <HAL_RCC_OscConfig+0x42e>
 8003ff8:	e013      	b.n	8004022 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffa:	f7fe fc3b 	bl	8002874 <HAL_GetTick>
 8003ffe:	0003      	movs	r3, r0
 8004000:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004002:	e009      	b.n	8004018 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004004:	f7fe fc36 	bl	8002874 <HAL_GetTick>
 8004008:	0002      	movs	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	4a6f      	ldr	r2, [pc, #444]	@ (80041cc <HAL_RCC_OscConfig+0x620>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e0d1      	b.n	80041bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004018:	4b6a      	ldr	r3, [pc, #424]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 800401a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401c:	2202      	movs	r2, #2
 800401e:	4013      	ands	r3, r2
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004022:	231f      	movs	r3, #31
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d105      	bne.n	8004038 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800402c:	4b65      	ldr	r3, [pc, #404]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 800402e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004030:	4b64      	ldr	r3, [pc, #400]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8004032:	4967      	ldr	r1, [pc, #412]	@ (80041d0 <HAL_RCC_OscConfig+0x624>)
 8004034:	400a      	ands	r2, r1
 8004036:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d100      	bne.n	8004042 <HAL_RCC_OscConfig+0x496>
 8004040:	e0bb      	b.n	80041ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004042:	4b60      	ldr	r3, [pc, #384]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2238      	movs	r2, #56	@ 0x38
 8004048:	4013      	ands	r3, r2
 800404a:	2b10      	cmp	r3, #16
 800404c:	d100      	bne.n	8004050 <HAL_RCC_OscConfig+0x4a4>
 800404e:	e07b      	b.n	8004148 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d156      	bne.n	8004106 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004058:	4b5a      	ldr	r3, [pc, #360]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4b59      	ldr	r3, [pc, #356]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 800405e:	495d      	ldr	r1, [pc, #372]	@ (80041d4 <HAL_RCC_OscConfig+0x628>)
 8004060:	400a      	ands	r2, r1
 8004062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7fe fc06 	bl	8002874 <HAL_GetTick>
 8004068:	0003      	movs	r3, r0
 800406a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406e:	f7fe fc01 	bl	8002874 <HAL_GetTick>
 8004072:	0002      	movs	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e09d      	b.n	80041bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004080:	4b50      	ldr	r3, [pc, #320]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	2380      	movs	r3, #128	@ 0x80
 8004086:	049b      	lsls	r3, r3, #18
 8004088:	4013      	ands	r3, r2
 800408a:	d1f0      	bne.n	800406e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800408c:	4b4d      	ldr	r3, [pc, #308]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4a51      	ldr	r2, [pc, #324]	@ (80041d8 <HAL_RCC_OscConfig+0x62c>)
 8004092:	4013      	ands	r3, r2
 8004094:	0019      	movs	r1, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1a      	ldr	r2, [r3, #32]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b8:	431a      	orrs	r2, r3
 80040ba:	4b42      	ldr	r3, [pc, #264]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 80040bc:	430a      	orrs	r2, r1
 80040be:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c0:	4b40      	ldr	r3, [pc, #256]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4b3f      	ldr	r3, [pc, #252]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 80040c6:	2180      	movs	r1, #128	@ 0x80
 80040c8:	0449      	lsls	r1, r1, #17
 80040ca:	430a      	orrs	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80040ce:	4b3d      	ldr	r3, [pc, #244]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	4b3c      	ldr	r3, [pc, #240]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 80040d4:	2180      	movs	r1, #128	@ 0x80
 80040d6:	0549      	lsls	r1, r1, #21
 80040d8:	430a      	orrs	r2, r1
 80040da:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fe fbca 	bl	8002874 <HAL_GetTick>
 80040e0:	0003      	movs	r3, r0
 80040e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e6:	f7fe fbc5 	bl	8002874 <HAL_GetTick>
 80040ea:	0002      	movs	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e061      	b.n	80041bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f8:	4b32      	ldr	r3, [pc, #200]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	2380      	movs	r3, #128	@ 0x80
 80040fe:	049b      	lsls	r3, r3, #18
 8004100:	4013      	ands	r3, r2
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x53a>
 8004104:	e059      	b.n	80041ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004106:	4b2f      	ldr	r3, [pc, #188]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	4b2e      	ldr	r3, [pc, #184]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 800410c:	4931      	ldr	r1, [pc, #196]	@ (80041d4 <HAL_RCC_OscConfig+0x628>)
 800410e:	400a      	ands	r2, r1
 8004110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004112:	f7fe fbaf 	bl	8002874 <HAL_GetTick>
 8004116:	0003      	movs	r3, r0
 8004118:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800411c:	f7fe fbaa 	bl	8002874 <HAL_GetTick>
 8004120:	0002      	movs	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e046      	b.n	80041bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800412e:	4b25      	ldr	r3, [pc, #148]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	2380      	movs	r3, #128	@ 0x80
 8004134:	049b      	lsls	r3, r3, #18
 8004136:	4013      	ands	r3, r2
 8004138:	d1f0      	bne.n	800411c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800413a:	4b22      	ldr	r3, [pc, #136]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	4b21      	ldr	r3, [pc, #132]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8004140:	4926      	ldr	r1, [pc, #152]	@ (80041dc <HAL_RCC_OscConfig+0x630>)
 8004142:	400a      	ands	r2, r1
 8004144:	60da      	str	r2, [r3, #12]
 8004146:	e038      	b.n	80041ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e033      	b.n	80041bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004154:	4b1b      	ldr	r3, [pc, #108]	@ (80041c4 <HAL_RCC_OscConfig+0x618>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2203      	movs	r2, #3
 800415e:	401a      	ands	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	429a      	cmp	r2, r3
 8004166:	d126      	bne.n	80041b6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2270      	movs	r2, #112	@ 0x70
 800416c:	401a      	ands	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004172:	429a      	cmp	r2, r3
 8004174:	d11f      	bne.n	80041b6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	23fe      	movs	r3, #254	@ 0xfe
 800417a:	01db      	lsls	r3, r3, #7
 800417c:	401a      	ands	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004182:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004184:	429a      	cmp	r2, r3
 8004186:	d116      	bne.n	80041b6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	23f8      	movs	r3, #248	@ 0xf8
 800418c:	039b      	lsls	r3, r3, #14
 800418e:	401a      	ands	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004194:	429a      	cmp	r2, r3
 8004196:	d10e      	bne.n	80041b6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	23e0      	movs	r3, #224	@ 0xe0
 800419c:	051b      	lsls	r3, r3, #20
 800419e:	401a      	ands	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d106      	bne.n	80041b6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	0f5b      	lsrs	r3, r3, #29
 80041ac:	075a      	lsls	r2, r3, #29
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d001      	beq.n	80041ba <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	0018      	movs	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	b008      	add	sp, #32
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40021000 	.word	0x40021000
 80041c8:	40007000 	.word	0x40007000
 80041cc:	00001388 	.word	0x00001388
 80041d0:	efffffff 	.word	0xefffffff
 80041d4:	feffffff 	.word	0xfeffffff
 80041d8:	11c1808c 	.word	0x11c1808c
 80041dc:	eefefffc 	.word	0xeefefffc

080041e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0e9      	b.n	80043c8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041f4:	4b76      	ldr	r3, [pc, #472]	@ (80043d0 <HAL_RCC_ClockConfig+0x1f0>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2207      	movs	r2, #7
 80041fa:	4013      	ands	r3, r2
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d91e      	bls.n	8004240 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004202:	4b73      	ldr	r3, [pc, #460]	@ (80043d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2207      	movs	r2, #7
 8004208:	4393      	bics	r3, r2
 800420a:	0019      	movs	r1, r3
 800420c:	4b70      	ldr	r3, [pc, #448]	@ (80043d0 <HAL_RCC_ClockConfig+0x1f0>)
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004214:	f7fe fb2e 	bl	8002874 <HAL_GetTick>
 8004218:	0003      	movs	r3, r0
 800421a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800421c:	e009      	b.n	8004232 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800421e:	f7fe fb29 	bl	8002874 <HAL_GetTick>
 8004222:	0002      	movs	r2, r0
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	4a6a      	ldr	r2, [pc, #424]	@ (80043d4 <HAL_RCC_ClockConfig+0x1f4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e0ca      	b.n	80043c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004232:	4b67      	ldr	r3, [pc, #412]	@ (80043d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2207      	movs	r2, #7
 8004238:	4013      	ands	r3, r2
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d1ee      	bne.n	800421e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2202      	movs	r2, #2
 8004246:	4013      	ands	r3, r2
 8004248:	d015      	beq.n	8004276 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2204      	movs	r2, #4
 8004250:	4013      	ands	r3, r2
 8004252:	d006      	beq.n	8004262 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004254:	4b60      	ldr	r3, [pc, #384]	@ (80043d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	4b5f      	ldr	r3, [pc, #380]	@ (80043d8 <HAL_RCC_ClockConfig+0x1f8>)
 800425a:	21e0      	movs	r1, #224	@ 0xe0
 800425c:	01c9      	lsls	r1, r1, #7
 800425e:	430a      	orrs	r2, r1
 8004260:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004262:	4b5d      	ldr	r3, [pc, #372]	@ (80043d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	4a5d      	ldr	r2, [pc, #372]	@ (80043dc <HAL_RCC_ClockConfig+0x1fc>)
 8004268:	4013      	ands	r3, r2
 800426a:	0019      	movs	r1, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	4b59      	ldr	r3, [pc, #356]	@ (80043d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004272:	430a      	orrs	r2, r1
 8004274:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2201      	movs	r2, #1
 800427c:	4013      	ands	r3, r2
 800427e:	d057      	beq.n	8004330 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d107      	bne.n	8004298 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004288:	4b53      	ldr	r3, [pc, #332]	@ (80043d8 <HAL_RCC_ClockConfig+0x1f8>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	2380      	movs	r3, #128	@ 0x80
 800428e:	029b      	lsls	r3, r3, #10
 8004290:	4013      	ands	r3, r2
 8004292:	d12b      	bne.n	80042ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e097      	b.n	80043c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b02      	cmp	r3, #2
 800429e:	d107      	bne.n	80042b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a0:	4b4d      	ldr	r3, [pc, #308]	@ (80043d8 <HAL_RCC_ClockConfig+0x1f8>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	2380      	movs	r3, #128	@ 0x80
 80042a6:	049b      	lsls	r3, r3, #18
 80042a8:	4013      	ands	r3, r2
 80042aa:	d11f      	bne.n	80042ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e08b      	b.n	80043c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d107      	bne.n	80042c8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042b8:	4b47      	ldr	r3, [pc, #284]	@ (80043d8 <HAL_RCC_ClockConfig+0x1f8>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	2380      	movs	r3, #128	@ 0x80
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	4013      	ands	r3, r2
 80042c2:	d113      	bne.n	80042ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e07f      	b.n	80043c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d106      	bne.n	80042de <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042d0:	4b41      	ldr	r3, [pc, #260]	@ (80043d8 <HAL_RCC_ClockConfig+0x1f8>)
 80042d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042d4:	2202      	movs	r2, #2
 80042d6:	4013      	ands	r3, r2
 80042d8:	d108      	bne.n	80042ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e074      	b.n	80043c8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042de:	4b3e      	ldr	r3, [pc, #248]	@ (80043d8 <HAL_RCC_ClockConfig+0x1f8>)
 80042e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e2:	2202      	movs	r2, #2
 80042e4:	4013      	ands	r3, r2
 80042e6:	d101      	bne.n	80042ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e06d      	b.n	80043c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042ec:	4b3a      	ldr	r3, [pc, #232]	@ (80043d8 <HAL_RCC_ClockConfig+0x1f8>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2207      	movs	r2, #7
 80042f2:	4393      	bics	r3, r2
 80042f4:	0019      	movs	r1, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	4b37      	ldr	r3, [pc, #220]	@ (80043d8 <HAL_RCC_ClockConfig+0x1f8>)
 80042fc:	430a      	orrs	r2, r1
 80042fe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004300:	f7fe fab8 	bl	8002874 <HAL_GetTick>
 8004304:	0003      	movs	r3, r0
 8004306:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004308:	e009      	b.n	800431e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430a:	f7fe fab3 	bl	8002874 <HAL_GetTick>
 800430e:	0002      	movs	r2, r0
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	4a2f      	ldr	r2, [pc, #188]	@ (80043d4 <HAL_RCC_ClockConfig+0x1f4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e054      	b.n	80043c8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431e:	4b2e      	ldr	r3, [pc, #184]	@ (80043d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2238      	movs	r2, #56	@ 0x38
 8004324:	401a      	ands	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	429a      	cmp	r2, r3
 800432e:	d1ec      	bne.n	800430a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004330:	4b27      	ldr	r3, [pc, #156]	@ (80043d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2207      	movs	r2, #7
 8004336:	4013      	ands	r3, r2
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	429a      	cmp	r2, r3
 800433c:	d21e      	bcs.n	800437c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433e:	4b24      	ldr	r3, [pc, #144]	@ (80043d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2207      	movs	r2, #7
 8004344:	4393      	bics	r3, r2
 8004346:	0019      	movs	r1, r3
 8004348:	4b21      	ldr	r3, [pc, #132]	@ (80043d0 <HAL_RCC_ClockConfig+0x1f0>)
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004350:	f7fe fa90 	bl	8002874 <HAL_GetTick>
 8004354:	0003      	movs	r3, r0
 8004356:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004358:	e009      	b.n	800436e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800435a:	f7fe fa8b 	bl	8002874 <HAL_GetTick>
 800435e:	0002      	movs	r2, r0
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	4a1b      	ldr	r2, [pc, #108]	@ (80043d4 <HAL_RCC_ClockConfig+0x1f4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d901      	bls.n	800436e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e02c      	b.n	80043c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800436e:	4b18      	ldr	r3, [pc, #96]	@ (80043d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2207      	movs	r2, #7
 8004374:	4013      	ands	r3, r2
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d1ee      	bne.n	800435a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2204      	movs	r2, #4
 8004382:	4013      	ands	r3, r2
 8004384:	d009      	beq.n	800439a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004386:	4b14      	ldr	r3, [pc, #80]	@ (80043d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	4a15      	ldr	r2, [pc, #84]	@ (80043e0 <HAL_RCC_ClockConfig+0x200>)
 800438c:	4013      	ands	r3, r2
 800438e:	0019      	movs	r1, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	4b10      	ldr	r3, [pc, #64]	@ (80043d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004396:	430a      	orrs	r2, r1
 8004398:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800439a:	f000 f829 	bl	80043f0 <HAL_RCC_GetSysClockFreq>
 800439e:	0001      	movs	r1, r0
 80043a0:	4b0d      	ldr	r3, [pc, #52]	@ (80043d8 <HAL_RCC_ClockConfig+0x1f8>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	0a1b      	lsrs	r3, r3, #8
 80043a6:	220f      	movs	r2, #15
 80043a8:	401a      	ands	r2, r3
 80043aa:	4b0e      	ldr	r3, [pc, #56]	@ (80043e4 <HAL_RCC_ClockConfig+0x204>)
 80043ac:	0092      	lsls	r2, r2, #2
 80043ae:	58d3      	ldr	r3, [r2, r3]
 80043b0:	221f      	movs	r2, #31
 80043b2:	4013      	ands	r3, r2
 80043b4:	000a      	movs	r2, r1
 80043b6:	40da      	lsrs	r2, r3
 80043b8:	4b0b      	ldr	r3, [pc, #44]	@ (80043e8 <HAL_RCC_ClockConfig+0x208>)
 80043ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80043bc:	4b0b      	ldr	r3, [pc, #44]	@ (80043ec <HAL_RCC_ClockConfig+0x20c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	0018      	movs	r0, r3
 80043c2:	f7fe f9fb 	bl	80027bc <HAL_InitTick>
 80043c6:	0003      	movs	r3, r0
}
 80043c8:	0018      	movs	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b004      	add	sp, #16
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40022000 	.word	0x40022000
 80043d4:	00001388 	.word	0x00001388
 80043d8:	40021000 	.word	0x40021000
 80043dc:	fffff0ff 	.word	0xfffff0ff
 80043e0:	ffff8fff 	.word	0xffff8fff
 80043e4:	080068f4 	.word	0x080068f4
 80043e8:	20000068 	.word	0x20000068
 80043ec:	2000006c 	.word	0x2000006c

080043f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043f6:	4b3c      	ldr	r3, [pc, #240]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2238      	movs	r2, #56	@ 0x38
 80043fc:	4013      	ands	r3, r2
 80043fe:	d10f      	bne.n	8004420 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004400:	4b39      	ldr	r3, [pc, #228]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	0adb      	lsrs	r3, r3, #11
 8004406:	2207      	movs	r2, #7
 8004408:	4013      	ands	r3, r2
 800440a:	2201      	movs	r2, #1
 800440c:	409a      	lsls	r2, r3
 800440e:	0013      	movs	r3, r2
 8004410:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004412:	6839      	ldr	r1, [r7, #0]
 8004414:	4835      	ldr	r0, [pc, #212]	@ (80044ec <HAL_RCC_GetSysClockFreq+0xfc>)
 8004416:	f7fb fe75 	bl	8000104 <__udivsi3>
 800441a:	0003      	movs	r3, r0
 800441c:	613b      	str	r3, [r7, #16]
 800441e:	e05d      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004420:	4b31      	ldr	r3, [pc, #196]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2238      	movs	r2, #56	@ 0x38
 8004426:	4013      	ands	r3, r2
 8004428:	2b08      	cmp	r3, #8
 800442a:	d102      	bne.n	8004432 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800442c:	4b30      	ldr	r3, [pc, #192]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x100>)
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	e054      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004432:	4b2d      	ldr	r3, [pc, #180]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2238      	movs	r2, #56	@ 0x38
 8004438:	4013      	ands	r3, r2
 800443a:	2b10      	cmp	r3, #16
 800443c:	d138      	bne.n	80044b0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800443e:	4b2a      	ldr	r3, [pc, #168]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	2203      	movs	r2, #3
 8004444:	4013      	ands	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004448:	4b27      	ldr	r3, [pc, #156]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	091b      	lsrs	r3, r3, #4
 800444e:	2207      	movs	r2, #7
 8004450:	4013      	ands	r3, r2
 8004452:	3301      	adds	r3, #1
 8004454:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b03      	cmp	r3, #3
 800445a:	d10d      	bne.n	8004478 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800445c:	68b9      	ldr	r1, [r7, #8]
 800445e:	4824      	ldr	r0, [pc, #144]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004460:	f7fb fe50 	bl	8000104 <__udivsi3>
 8004464:	0003      	movs	r3, r0
 8004466:	0019      	movs	r1, r3
 8004468:	4b1f      	ldr	r3, [pc, #124]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	0a1b      	lsrs	r3, r3, #8
 800446e:	227f      	movs	r2, #127	@ 0x7f
 8004470:	4013      	ands	r3, r2
 8004472:	434b      	muls	r3, r1
 8004474:	617b      	str	r3, [r7, #20]
        break;
 8004476:	e00d      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	481c      	ldr	r0, [pc, #112]	@ (80044ec <HAL_RCC_GetSysClockFreq+0xfc>)
 800447c:	f7fb fe42 	bl	8000104 <__udivsi3>
 8004480:	0003      	movs	r3, r0
 8004482:	0019      	movs	r1, r3
 8004484:	4b18      	ldr	r3, [pc, #96]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	0a1b      	lsrs	r3, r3, #8
 800448a:	227f      	movs	r2, #127	@ 0x7f
 800448c:	4013      	ands	r3, r2
 800448e:	434b      	muls	r3, r1
 8004490:	617b      	str	r3, [r7, #20]
        break;
 8004492:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004494:	4b14      	ldr	r3, [pc, #80]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	0f5b      	lsrs	r3, r3, #29
 800449a:	2207      	movs	r2, #7
 800449c:	4013      	ands	r3, r2
 800449e:	3301      	adds	r3, #1
 80044a0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	6978      	ldr	r0, [r7, #20]
 80044a6:	f7fb fe2d 	bl	8000104 <__udivsi3>
 80044aa:	0003      	movs	r3, r0
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	e015      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80044b0:	4b0d      	ldr	r3, [pc, #52]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	2238      	movs	r2, #56	@ 0x38
 80044b6:	4013      	ands	r3, r2
 80044b8:	2b20      	cmp	r3, #32
 80044ba:	d103      	bne.n	80044c4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80044bc:	2380      	movs	r3, #128	@ 0x80
 80044be:	021b      	lsls	r3, r3, #8
 80044c0:	613b      	str	r3, [r7, #16]
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80044c4:	4b08      	ldr	r3, [pc, #32]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2238      	movs	r2, #56	@ 0x38
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b18      	cmp	r3, #24
 80044ce:	d103      	bne.n	80044d8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80044d0:	23fa      	movs	r3, #250	@ 0xfa
 80044d2:	01db      	lsls	r3, r3, #7
 80044d4:	613b      	str	r3, [r7, #16]
 80044d6:	e001      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80044dc:	693b      	ldr	r3, [r7, #16]
}
 80044de:	0018      	movs	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b006      	add	sp, #24
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			@ (mov r8, r8)
 80044e8:	40021000 	.word	0x40021000
 80044ec:	00f42400 	.word	0x00f42400
 80044f0:	007a1200 	.word	0x007a1200

080044f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80044fc:	2313      	movs	r3, #19
 80044fe:	18fb      	adds	r3, r7, r3
 8004500:	2200      	movs	r2, #0
 8004502:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004504:	2312      	movs	r3, #18
 8004506:	18fb      	adds	r3, r7, r3
 8004508:	2200      	movs	r2, #0
 800450a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	2380      	movs	r3, #128	@ 0x80
 8004512:	029b      	lsls	r3, r3, #10
 8004514:	4013      	ands	r3, r2
 8004516:	d100      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004518:	e0a3      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800451a:	2011      	movs	r0, #17
 800451c:	183b      	adds	r3, r7, r0
 800451e:	2200      	movs	r2, #0
 8004520:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004522:	4ba5      	ldr	r3, [pc, #660]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004524:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004526:	2380      	movs	r3, #128	@ 0x80
 8004528:	055b      	lsls	r3, r3, #21
 800452a:	4013      	ands	r3, r2
 800452c:	d110      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800452e:	4ba2      	ldr	r3, [pc, #648]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004530:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004532:	4ba1      	ldr	r3, [pc, #644]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004534:	2180      	movs	r1, #128	@ 0x80
 8004536:	0549      	lsls	r1, r1, #21
 8004538:	430a      	orrs	r2, r1
 800453a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800453c:	4b9e      	ldr	r3, [pc, #632]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800453e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004540:	2380      	movs	r3, #128	@ 0x80
 8004542:	055b      	lsls	r3, r3, #21
 8004544:	4013      	ands	r3, r2
 8004546:	60bb      	str	r3, [r7, #8]
 8004548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800454a:	183b      	adds	r3, r7, r0
 800454c:	2201      	movs	r2, #1
 800454e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004550:	4b9a      	ldr	r3, [pc, #616]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	4b99      	ldr	r3, [pc, #612]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004556:	2180      	movs	r1, #128	@ 0x80
 8004558:	0049      	lsls	r1, r1, #1
 800455a:	430a      	orrs	r2, r1
 800455c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800455e:	f7fe f989 	bl	8002874 <HAL_GetTick>
 8004562:	0003      	movs	r3, r0
 8004564:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004566:	e00b      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004568:	f7fe f984 	bl	8002874 <HAL_GetTick>
 800456c:	0002      	movs	r2, r0
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d904      	bls.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004576:	2313      	movs	r3, #19
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	2203      	movs	r2, #3
 800457c:	701a      	strb	r2, [r3, #0]
        break;
 800457e:	e005      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004580:	4b8e      	ldr	r3, [pc, #568]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	2380      	movs	r3, #128	@ 0x80
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	4013      	ands	r3, r2
 800458a:	d0ed      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800458c:	2313      	movs	r3, #19
 800458e:	18fb      	adds	r3, r7, r3
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d154      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004596:	4b88      	ldr	r3, [pc, #544]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004598:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800459a:	23c0      	movs	r3, #192	@ 0xc0
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4013      	ands	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d019      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d014      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045b2:	4b81      	ldr	r3, [pc, #516]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b6:	4a82      	ldr	r2, [pc, #520]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045bc:	4b7e      	ldr	r3, [pc, #504]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045c0:	4b7d      	ldr	r3, [pc, #500]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045c2:	2180      	movs	r1, #128	@ 0x80
 80045c4:	0249      	lsls	r1, r1, #9
 80045c6:	430a      	orrs	r2, r1
 80045c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045ca:	4b7b      	ldr	r3, [pc, #492]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045ce:	4b7a      	ldr	r3, [pc, #488]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045d0:	497c      	ldr	r1, [pc, #496]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80045d2:	400a      	ands	r2, r1
 80045d4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045d6:	4b78      	ldr	r3, [pc, #480]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2201      	movs	r2, #1
 80045e0:	4013      	ands	r3, r2
 80045e2:	d016      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fe f946 	bl	8002874 <HAL_GetTick>
 80045e8:	0003      	movs	r3, r0
 80045ea:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ec:	e00c      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ee:	f7fe f941 	bl	8002874 <HAL_GetTick>
 80045f2:	0002      	movs	r2, r0
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	4a73      	ldr	r2, [pc, #460]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d904      	bls.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80045fe:	2313      	movs	r3, #19
 8004600:	18fb      	adds	r3, r7, r3
 8004602:	2203      	movs	r2, #3
 8004604:	701a      	strb	r2, [r3, #0]
            break;
 8004606:	e004      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004608:	4b6b      	ldr	r3, [pc, #428]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800460a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800460c:	2202      	movs	r2, #2
 800460e:	4013      	ands	r3, r2
 8004610:	d0ed      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004612:	2313      	movs	r3, #19
 8004614:	18fb      	adds	r3, r7, r3
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800461c:	4b66      	ldr	r3, [pc, #408]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800461e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004620:	4a67      	ldr	r2, [pc, #412]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004622:	4013      	ands	r3, r2
 8004624:	0019      	movs	r1, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800462a:	4b63      	ldr	r3, [pc, #396]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800462c:	430a      	orrs	r2, r1
 800462e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004630:	e00c      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004632:	2312      	movs	r3, #18
 8004634:	18fb      	adds	r3, r7, r3
 8004636:	2213      	movs	r2, #19
 8004638:	18ba      	adds	r2, r7, r2
 800463a:	7812      	ldrb	r2, [r2, #0]
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	e005      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004640:	2312      	movs	r3, #18
 8004642:	18fb      	adds	r3, r7, r3
 8004644:	2213      	movs	r2, #19
 8004646:	18ba      	adds	r2, r7, r2
 8004648:	7812      	ldrb	r2, [r2, #0]
 800464a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800464c:	2311      	movs	r3, #17
 800464e:	18fb      	adds	r3, r7, r3
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d105      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004656:	4b58      	ldr	r3, [pc, #352]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004658:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800465a:	4b57      	ldr	r3, [pc, #348]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800465c:	495b      	ldr	r1, [pc, #364]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800465e:	400a      	ands	r2, r1
 8004660:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2201      	movs	r2, #1
 8004668:	4013      	ands	r3, r2
 800466a:	d009      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800466c:	4b52      	ldr	r3, [pc, #328]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800466e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004670:	2203      	movs	r2, #3
 8004672:	4393      	bics	r3, r2
 8004674:	0019      	movs	r1, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	4b4f      	ldr	r3, [pc, #316]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800467c:	430a      	orrs	r2, r1
 800467e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2210      	movs	r2, #16
 8004686:	4013      	ands	r3, r2
 8004688:	d009      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800468a:	4b4b      	ldr	r3, [pc, #300]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800468c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800468e:	4a50      	ldr	r2, [pc, #320]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004690:	4013      	ands	r3, r2
 8004692:	0019      	movs	r1, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	4b47      	ldr	r3, [pc, #284]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800469a:	430a      	orrs	r2, r1
 800469c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	2380      	movs	r3, #128	@ 0x80
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4013      	ands	r3, r2
 80046a8:	d009      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046aa:	4b43      	ldr	r3, [pc, #268]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ae:	4a49      	ldr	r2, [pc, #292]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	0019      	movs	r1, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	695a      	ldr	r2, [r3, #20]
 80046b8:	4b3f      	ldr	r3, [pc, #252]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046ba:	430a      	orrs	r2, r1
 80046bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	2380      	movs	r3, #128	@ 0x80
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	4013      	ands	r3, r2
 80046c8:	d009      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046ca:	4b3b      	ldr	r3, [pc, #236]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ce:	4a42      	ldr	r2, [pc, #264]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	0019      	movs	r1, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699a      	ldr	r2, [r3, #24]
 80046d8:	4b37      	ldr	r3, [pc, #220]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046da:	430a      	orrs	r2, r1
 80046dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2220      	movs	r2, #32
 80046e4:	4013      	ands	r3, r2
 80046e6:	d009      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046e8:	4b33      	ldr	r3, [pc, #204]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ec:	4a3b      	ldr	r2, [pc, #236]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	0019      	movs	r1, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	4b30      	ldr	r3, [pc, #192]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046f8:	430a      	orrs	r2, r1
 80046fa:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	2380      	movs	r3, #128	@ 0x80
 8004702:	01db      	lsls	r3, r3, #7
 8004704:	4013      	ands	r3, r2
 8004706:	d015      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004708:	4b2b      	ldr	r3, [pc, #172]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800470a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	0899      	lsrs	r1, r3, #2
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	4b28      	ldr	r3, [pc, #160]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004716:	430a      	orrs	r2, r1
 8004718:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69da      	ldr	r2, [r3, #28]
 800471e:	2380      	movs	r3, #128	@ 0x80
 8004720:	05db      	lsls	r3, r3, #23
 8004722:	429a      	cmp	r2, r3
 8004724:	d106      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004726:	4b24      	ldr	r3, [pc, #144]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	4b23      	ldr	r3, [pc, #140]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800472c:	2180      	movs	r1, #128	@ 0x80
 800472e:	0249      	lsls	r1, r1, #9
 8004730:	430a      	orrs	r2, r1
 8004732:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	2380      	movs	r3, #128	@ 0x80
 800473a:	039b      	lsls	r3, r3, #14
 800473c:	4013      	ands	r3, r2
 800473e:	d016      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004740:	4b1d      	ldr	r3, [pc, #116]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004744:	4a26      	ldr	r2, [pc, #152]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004746:	4013      	ands	r3, r2
 8004748:	0019      	movs	r1, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1a      	ldr	r2, [r3, #32]
 800474e:	4b1a      	ldr	r3, [pc, #104]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004750:	430a      	orrs	r2, r1
 8004752:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1a      	ldr	r2, [r3, #32]
 8004758:	2380      	movs	r3, #128	@ 0x80
 800475a:	03db      	lsls	r3, r3, #15
 800475c:	429a      	cmp	r2, r3
 800475e:	d106      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004760:	4b15      	ldr	r3, [pc, #84]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	4b14      	ldr	r3, [pc, #80]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004766:	2180      	movs	r1, #128	@ 0x80
 8004768:	0449      	lsls	r1, r1, #17
 800476a:	430a      	orrs	r2, r1
 800476c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	2380      	movs	r3, #128	@ 0x80
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	4013      	ands	r3, r2
 8004778:	d016      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800477a:	4b0f      	ldr	r3, [pc, #60]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800477c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800477e:	4a19      	ldr	r2, [pc, #100]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004780:	4013      	ands	r3, r2
 8004782:	0019      	movs	r1, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	4b0b      	ldr	r3, [pc, #44]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800478a:	430a      	orrs	r2, r1
 800478c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	2380      	movs	r3, #128	@ 0x80
 8004794:	01db      	lsls	r3, r3, #7
 8004796:	429a      	cmp	r2, r3
 8004798:	d106      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800479a:	4b07      	ldr	r3, [pc, #28]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	4b06      	ldr	r3, [pc, #24]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047a0:	2180      	movs	r1, #128	@ 0x80
 80047a2:	0249      	lsls	r1, r1, #9
 80047a4:	430a      	orrs	r2, r1
 80047a6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80047a8:	2312      	movs	r3, #18
 80047aa:	18fb      	adds	r3, r7, r3
 80047ac:	781b      	ldrb	r3, [r3, #0]
}
 80047ae:	0018      	movs	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	b006      	add	sp, #24
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	40021000 	.word	0x40021000
 80047bc:	40007000 	.word	0x40007000
 80047c0:	fffffcff 	.word	0xfffffcff
 80047c4:	fffeffff 	.word	0xfffeffff
 80047c8:	00001388 	.word	0x00001388
 80047cc:	efffffff 	.word	0xefffffff
 80047d0:	fffff3ff 	.word	0xfffff3ff
 80047d4:	fff3ffff 	.word	0xfff3ffff
 80047d8:	ffcfffff 	.word	0xffcfffff
 80047dc:	ffffcfff 	.word	0xffffcfff
 80047e0:	ffbfffff 	.word	0xffbfffff
 80047e4:	ffff3fff 	.word	0xffff3fff

080047e8 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 80047e8:	b590      	push	{r4, r7, lr}
 80047ea:	b08b      	sub	sp, #44	@ 0x2c
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 80047f0:	2427      	movs	r4, #39	@ 0x27
 80047f2:	193b      	adds	r3, r7, r4
 80047f4:	2200      	movs	r2, #0
 80047f6:	701a      	strb	r2, [r3, #0]
  FlagStatus       backupchanged = RESET;
 80047f8:	2326      	movs	r3, #38	@ 0x26
 80047fa:	18fb      	adds	r3, r7, r3
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 8004800:	4b31      	ldr	r3, [pc, #196]	@ (80048c8 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004802:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004804:	4b30      	ldr	r3, [pc, #192]	@ (80048c8 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004806:	2101      	movs	r1, #1
 8004808:	430a      	orrs	r2, r1
 800480a:	635a      	str	r2, [r3, #52]	@ 0x34
 800480c:	4b2e      	ldr	r3, [pc, #184]	@ (80048c8 <HAL_RCCEx_EnableLSCO+0xe0>)
 800480e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004810:	2201      	movs	r2, #1
 8004812:	4013      	ands	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 8004818:	2110      	movs	r1, #16
 800481a:	187b      	adds	r3, r7, r1
 800481c:	2204      	movs	r2, #4
 800481e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004820:	187b      	adds	r3, r7, r1
 8004822:	2203      	movs	r2, #3
 8004824:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004826:	187b      	adds	r3, r7, r1
 8004828:	2203      	movs	r2, #3
 800482a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482c:	187b      	adds	r3, r7, r1
 800482e:	2200      	movs	r2, #0
 8004830:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 8004832:	187a      	adds	r2, r7, r1
 8004834:	23a0      	movs	r3, #160	@ 0xa0
 8004836:	05db      	lsls	r3, r3, #23
 8004838:	0011      	movs	r1, r2
 800483a:	0018      	movs	r0, r3
 800483c:	f7fe f926 	bl	8002a8c <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004840:	4b21      	ldr	r3, [pc, #132]	@ (80048c8 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004842:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004844:	2380      	movs	r3, #128	@ 0x80
 8004846:	055b      	lsls	r3, r3, #21
 8004848:	4013      	ands	r3, r2
 800484a:	d110      	bne.n	800486e <HAL_RCCEx_EnableLSCO+0x86>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800484c:	4b1e      	ldr	r3, [pc, #120]	@ (80048c8 <HAL_RCCEx_EnableLSCO+0xe0>)
 800484e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004850:	4b1d      	ldr	r3, [pc, #116]	@ (80048c8 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004852:	2180      	movs	r1, #128	@ 0x80
 8004854:	0549      	lsls	r1, r1, #21
 8004856:	430a      	orrs	r2, r1
 8004858:	63da      	str	r2, [r3, #60]	@ 0x3c
 800485a:	4b1b      	ldr	r3, [pc, #108]	@ (80048c8 <HAL_RCCEx_EnableLSCO+0xe0>)
 800485c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800485e:	2380      	movs	r3, #128	@ 0x80
 8004860:	055b      	lsls	r3, r3, #21
 8004862:	4013      	ands	r3, r2
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 8004868:	193b      	adds	r3, r7, r4
 800486a:	2201      	movs	r2, #1
 800486c:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800486e:	4b17      	ldr	r3, [pc, #92]	@ (80048cc <HAL_RCCEx_EnableLSCO+0xe4>)
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	2380      	movs	r3, #128	@ 0x80
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	4013      	ands	r3, r2
 8004878:	d105      	bne.n	8004886 <HAL_RCCEx_EnableLSCO+0x9e>
  {
    HAL_PWR_EnableBkUpAccess();
 800487a:	f7ff f939 	bl	8003af0 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 800487e:	2326      	movs	r3, #38	@ 0x26
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	2201      	movs	r2, #1
 8004884:	701a      	strb	r2, [r3, #0]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8004886:	4b10      	ldr	r3, [pc, #64]	@ (80048c8 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800488a:	4a11      	ldr	r2, [pc, #68]	@ (80048d0 <HAL_RCCEx_EnableLSCO+0xe8>)
 800488c:	401a      	ands	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	431a      	orrs	r2, r3
 8004892:	4b0d      	ldr	r3, [pc, #52]	@ (80048c8 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004894:	2180      	movs	r1, #128	@ 0x80
 8004896:	0449      	lsls	r1, r1, #17
 8004898:	430a      	orrs	r2, r1
 800489a:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (backupchanged == SET)
 800489c:	2326      	movs	r3, #38	@ 0x26
 800489e:	18fb      	adds	r3, r7, r3
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d101      	bne.n	80048aa <HAL_RCCEx_EnableLSCO+0xc2>
  {
    HAL_PWR_DisableBkUpAccess();
 80048a6:	f7ff f931 	bl	8003b0c <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 80048aa:	2327      	movs	r3, #39	@ 0x27
 80048ac:	18fb      	adds	r3, r7, r3
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d105      	bne.n	80048c0 <HAL_RCCEx_EnableLSCO+0xd8>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 80048b4:	4b04      	ldr	r3, [pc, #16]	@ (80048c8 <HAL_RCCEx_EnableLSCO+0xe0>)
 80048b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048b8:	4b03      	ldr	r3, [pc, #12]	@ (80048c8 <HAL_RCCEx_EnableLSCO+0xe0>)
 80048ba:	4906      	ldr	r1, [pc, #24]	@ (80048d4 <HAL_RCCEx_EnableLSCO+0xec>)
 80048bc:	400a      	ands	r2, r1
 80048be:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80048c0:	46c0      	nop			@ (mov r8, r8)
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b00b      	add	sp, #44	@ 0x2c
 80048c6:	bd90      	pop	{r4, r7, pc}
 80048c8:	40021000 	.word	0x40021000
 80048cc:	40007000 	.word	0x40007000
 80048d0:	fcffffff 	.word	0xfcffffff
 80048d4:	efffffff 	.word	0xefffffff

080048d8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048d8:	b5b0      	push	{r4, r5, r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80048e0:	230f      	movs	r3, #15
 80048e2:	18fb      	adds	r3, r7, r3
 80048e4:	2201      	movs	r2, #1
 80048e6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d100      	bne.n	80048f0 <HAL_RTC_Init+0x18>
 80048ee:	e08c      	b.n	8004a0a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2229      	movs	r2, #41	@ 0x29
 80048f4:	5c9b      	ldrb	r3, [r3, r2]
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10b      	bne.n	8004914 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2228      	movs	r2, #40	@ 0x28
 8004900:	2100      	movs	r1, #0
 8004902:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2288      	movs	r2, #136	@ 0x88
 8004908:	0212      	lsls	r2, r2, #8
 800490a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	0018      	movs	r0, r3
 8004910:	f7fd fd76 	bl	8002400 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2229      	movs	r2, #41	@ 0x29
 8004918:	2102      	movs	r1, #2
 800491a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	2210      	movs	r2, #16
 8004924:	4013      	ands	r3, r2
 8004926:	2b10      	cmp	r3, #16
 8004928:	d062      	beq.n	80049f0 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	22ca      	movs	r2, #202	@ 0xca
 8004930:	625a      	str	r2, [r3, #36]	@ 0x24
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2253      	movs	r2, #83	@ 0x53
 8004938:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800493a:	250f      	movs	r5, #15
 800493c:	197c      	adds	r4, r7, r5
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	0018      	movs	r0, r3
 8004942:	f000 fcb9 	bl	80052b8 <RTC_EnterInitMode>
 8004946:	0003      	movs	r3, r0
 8004948:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800494a:	0028      	movs	r0, r5
 800494c:	183b      	adds	r3, r7, r0
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d12c      	bne.n	80049ae <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699a      	ldr	r2, [r3, #24]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	492e      	ldr	r1, [pc, #184]	@ (8004a18 <HAL_RTC_Init+0x140>)
 8004960:	400a      	ands	r2, r1
 8004962:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6999      	ldr	r1, [r3, #24]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	431a      	orrs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6912      	ldr	r2, [r2, #16]
 800498a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6919      	ldr	r1, [r3, #16]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	041a      	lsls	r2, r3, #16
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80049a0:	183c      	adds	r4, r7, r0
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	0018      	movs	r0, r3
 80049a6:	f000 fcc9 	bl	800533c <RTC_ExitInitMode>
 80049aa:	0003      	movs	r3, r0
 80049ac:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80049ae:	230f      	movs	r3, #15
 80049b0:	18fb      	adds	r3, r7, r3
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d116      	bne.n	80049e6 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699a      	ldr	r2, [r3, #24]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	00d2      	lsls	r2, r2, #3
 80049c4:	08d2      	lsrs	r2, r2, #3
 80049c6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6999      	ldr	r1, [r3, #24]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	22ff      	movs	r2, #255	@ 0xff
 80049ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80049ee:	e003      	b.n	80049f8 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80049f0:	230f      	movs	r3, #15
 80049f2:	18fb      	adds	r3, r7, r3
 80049f4:	2200      	movs	r2, #0
 80049f6:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80049f8:	230f      	movs	r3, #15
 80049fa:	18fb      	adds	r3, r7, r3
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d103      	bne.n	8004a0a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2229      	movs	r2, #41	@ 0x29
 8004a06:	2101      	movs	r1, #1
 8004a08:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004a0a:	230f      	movs	r3, #15
 8004a0c:	18fb      	adds	r3, r7, r3
 8004a0e:	781b      	ldrb	r3, [r3, #0]
}
 8004a10:	0018      	movs	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b004      	add	sp, #16
 8004a16:	bdb0      	pop	{r4, r5, r7, pc}
 8004a18:	fb8fffbf 	.word	0xfb8fffbf

08004a1c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a1c:	b5b0      	push	{r4, r5, r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2228      	movs	r2, #40	@ 0x28
 8004a2c:	5c9b      	ldrb	r3, [r3, r2]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <HAL_RTC_SetTime+0x1a>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e092      	b.n	8004b5c <HAL_RTC_SetTime+0x140>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2228      	movs	r2, #40	@ 0x28
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2229      	movs	r2, #41	@ 0x29
 8004a42:	2102      	movs	r1, #2
 8004a44:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	22ca      	movs	r2, #202	@ 0xca
 8004a4c:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2253      	movs	r2, #83	@ 0x53
 8004a54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a56:	2513      	movs	r5, #19
 8004a58:	197c      	adds	r4, r7, r5
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f000 fc2b 	bl	80052b8 <RTC_EnterInitMode>
 8004a62:	0003      	movs	r3, r0
 8004a64:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004a66:	197b      	adds	r3, r7, r5
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d162      	bne.n	8004b34 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d125      	bne.n	8004ac0 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	2240      	movs	r2, #64	@ 0x40
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d102      	bne.n	8004a86 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2200      	movs	r2, #0
 8004a84:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f000 fc9a 	bl	80053c4 <RTC_ByteToBcd2>
 8004a90:	0003      	movs	r3, r0
 8004a92:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	785b      	ldrb	r3, [r3, #1]
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f000 fc93 	bl	80053c4 <RTC_ByteToBcd2>
 8004a9e:	0003      	movs	r3, r0
 8004aa0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004aa2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	789b      	ldrb	r3, [r3, #2]
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f000 fc8b 	bl	80053c4 <RTC_ByteToBcd2>
 8004aae:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ab0:	0022      	movs	r2, r4
 8004ab2:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	78db      	ldrb	r3, [r3, #3]
 8004ab8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	e017      	b.n	8004af0 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	2240      	movs	r2, #64	@ 0x40
 8004ac8:	4013      	ands	r3, r2
 8004aca:	d102      	bne.n	8004ad2 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	785b      	ldrb	r3, [r3, #1]
 8004adc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ade:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ae4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	78db      	ldrb	r3, [r3, #3]
 8004aea:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004aec:	4313      	orrs	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	491b      	ldr	r1, [pc, #108]	@ (8004b64 <HAL_RTC_SetTime+0x148>)
 8004af8:	400a      	ands	r2, r1
 8004afa:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699a      	ldr	r2, [r3, #24]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4918      	ldr	r1, [pc, #96]	@ (8004b68 <HAL_RTC_SetTime+0x14c>)
 8004b08:	400a      	ands	r2, r1
 8004b0a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6999      	ldr	r1, [r3, #24]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004b24:	2313      	movs	r3, #19
 8004b26:	18fc      	adds	r4, r7, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f000 fc06 	bl	800533c <RTC_ExitInitMode>
 8004b30:	0003      	movs	r3, r0
 8004b32:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	22ff      	movs	r2, #255	@ 0xff
 8004b3a:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8004b3c:	2313      	movs	r3, #19
 8004b3e:	18fb      	adds	r3, r7, r3
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d103      	bne.n	8004b4e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2229      	movs	r2, #41	@ 0x29
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2228      	movs	r2, #40	@ 0x28
 8004b52:	2100      	movs	r1, #0
 8004b54:	5499      	strb	r1, [r3, r2]

  return status;
 8004b56:	2313      	movs	r3, #19
 8004b58:	18fb      	adds	r3, r7, r3
 8004b5a:	781b      	ldrb	r3, [r3, #0]
}
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b006      	add	sp, #24
 8004b62:	bdb0      	pop	{r4, r5, r7, pc}
 8004b64:	007f7f7f 	.word	0x007f7f7f
 8004b68:	fffbffff 	.word	0xfffbffff

08004b6c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	045b      	lsls	r3, r3, #17
 8004b8a:	0c5a      	lsrs	r2, r3, #17
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a22      	ldr	r2, [pc, #136]	@ (8004c20 <HAL_RTC_GetTime+0xb4>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	0c1b      	lsrs	r3, r3, #16
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	223f      	movs	r2, #63	@ 0x3f
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	0a1b      	lsrs	r3, r3, #8
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	227f      	movs	r2, #127	@ 0x7f
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	227f      	movs	r2, #127	@ 0x7f
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	0d9b      	lsrs	r3, r3, #22
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d11a      	bne.n	8004c16 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	0018      	movs	r0, r3
 8004be6:	f000 fc15 	bl	8005414 <RTC_Bcd2ToByte>
 8004bea:	0003      	movs	r3, r0
 8004bec:	001a      	movs	r2, r3
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	785b      	ldrb	r3, [r3, #1]
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f000 fc0c 	bl	8005414 <RTC_Bcd2ToByte>
 8004bfc:	0003      	movs	r3, r0
 8004bfe:	001a      	movs	r2, r3
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	789b      	ldrb	r3, [r3, #2]
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f000 fc03 	bl	8005414 <RTC_Bcd2ToByte>
 8004c0e:	0003      	movs	r3, r0
 8004c10:	001a      	movs	r2, r3
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	0018      	movs	r0, r3
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	b006      	add	sp, #24
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	007f7f7f 	.word	0x007f7f7f

08004c24 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c24:	b5b0      	push	{r4, r5, r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2228      	movs	r2, #40	@ 0x28
 8004c34:	5c9b      	ldrb	r3, [r3, r2]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_RTC_SetDate+0x1a>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e07e      	b.n	8004d3c <HAL_RTC_SetDate+0x118>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2228      	movs	r2, #40	@ 0x28
 8004c42:	2101      	movs	r1, #1
 8004c44:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2229      	movs	r2, #41	@ 0x29
 8004c4a:	2102      	movs	r1, #2
 8004c4c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10e      	bne.n	8004c72 <HAL_RTC_SetDate+0x4e>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	785b      	ldrb	r3, [r3, #1]
 8004c58:	001a      	movs	r2, r3
 8004c5a:	2310      	movs	r3, #16
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	d008      	beq.n	8004c72 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	785b      	ldrb	r3, [r3, #1]
 8004c64:	2210      	movs	r2, #16
 8004c66:	4393      	bics	r3, r2
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	330a      	adds	r3, #10
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d11c      	bne.n	8004cb2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	78db      	ldrb	r3, [r3, #3]
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f000 fba1 	bl	80053c4 <RTC_ByteToBcd2>
 8004c82:	0003      	movs	r3, r0
 8004c84:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	785b      	ldrb	r3, [r3, #1]
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	f000 fb9a 	bl	80053c4 <RTC_ByteToBcd2>
 8004c90:	0003      	movs	r3, r0
 8004c92:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c94:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	789b      	ldrb	r3, [r3, #2]
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f000 fb92 	bl	80053c4 <RTC_ByteToBcd2>
 8004ca0:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004ca2:	0022      	movs	r2, r4
 8004ca4:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004cac:	4313      	orrs	r3, r2
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	e00e      	b.n	8004cd0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	78db      	ldrb	r3, [r3, #3]
 8004cb6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	785b      	ldrb	r3, [r3, #1]
 8004cbc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004cbe:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004cc4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	22ca      	movs	r2, #202	@ 0xca
 8004cd6:	625a      	str	r2, [r3, #36]	@ 0x24
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2253      	movs	r2, #83	@ 0x53
 8004cde:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ce0:	2513      	movs	r5, #19
 8004ce2:	197c      	adds	r4, r7, r5
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f000 fae6 	bl	80052b8 <RTC_EnterInitMode>
 8004cec:	0003      	movs	r3, r0
 8004cee:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004cf0:	0028      	movs	r0, r5
 8004cf2:	183b      	adds	r3, r7, r0
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10c      	bne.n	8004d14 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4910      	ldr	r1, [pc, #64]	@ (8004d44 <HAL_RTC_SetDate+0x120>)
 8004d02:	400a      	ands	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d06:	183c      	adds	r4, r7, r0
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f000 fb16 	bl	800533c <RTC_ExitInitMode>
 8004d10:	0003      	movs	r3, r0
 8004d12:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	22ff      	movs	r2, #255	@ 0xff
 8004d1a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004d1c:	2313      	movs	r3, #19
 8004d1e:	18fb      	adds	r3, r7, r3
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d103      	bne.n	8004d2e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2229      	movs	r2, #41	@ 0x29
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2228      	movs	r2, #40	@ 0x28
 8004d32:	2100      	movs	r1, #0
 8004d34:	5499      	strb	r1, [r3, r2]

  return status;
 8004d36:	2313      	movs	r3, #19
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	781b      	ldrb	r3, [r3, #0]
}
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b006      	add	sp, #24
 8004d42:	bdb0      	pop	{r4, r5, r7, pc}
 8004d44:	00ffff3f 	.word	0x00ffff3f

08004d48 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	4a21      	ldr	r2, [pc, #132]	@ (8004de0 <HAL_RTC_GetDate+0x98>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	0c1b      	lsrs	r3, r3, #16
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	0a1b      	lsrs	r3, r3, #8
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	221f      	movs	r2, #31
 8004d72:	4013      	ands	r3, r2
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	223f      	movs	r2, #63	@ 0x3f
 8004d80:	4013      	ands	r3, r2
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	0b5b      	lsrs	r3, r3, #13
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2207      	movs	r2, #7
 8004d90:	4013      	ands	r3, r2
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d11a      	bne.n	8004dd4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	78db      	ldrb	r3, [r3, #3]
 8004da2:	0018      	movs	r0, r3
 8004da4:	f000 fb36 	bl	8005414 <RTC_Bcd2ToByte>
 8004da8:	0003      	movs	r3, r0
 8004daa:	001a      	movs	r2, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	0018      	movs	r0, r3
 8004db6:	f000 fb2d 	bl	8005414 <RTC_Bcd2ToByte>
 8004dba:	0003      	movs	r3, r0
 8004dbc:	001a      	movs	r2, r3
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	789b      	ldrb	r3, [r3, #2]
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f000 fb24 	bl	8005414 <RTC_Bcd2ToByte>
 8004dcc:	0003      	movs	r3, r0
 8004dce:	001a      	movs	r2, r3
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	b006      	add	sp, #24
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	46c0      	nop			@ (mov r8, r8)
 8004de0:	00ffff3f 	.word	0x00ffff3f

08004de4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004de4:	b590      	push	{r4, r7, lr}
 8004de6:	b089      	sub	sp, #36	@ 0x24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2228      	movs	r2, #40	@ 0x28
 8004df4:	5c9b      	ldrb	r3, [r3, r2]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <HAL_RTC_SetAlarm_IT+0x1a>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e127      	b.n	800504e <HAL_RTC_SetAlarm_IT+0x26a>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2228      	movs	r2, #40	@ 0x28
 8004e02:	2101      	movs	r1, #1
 8004e04:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2229      	movs	r2, #41	@ 0x29
 8004e0a:	2102      	movs	r1, #2
 8004e0c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d136      	bne.n	8004e82 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	2240      	movs	r2, #64	@ 0x40
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d102      	bne.n	8004e26 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2200      	movs	r2, #0
 8004e24:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f000 faca 	bl	80053c4 <RTC_ByteToBcd2>
 8004e30:	0003      	movs	r3, r0
 8004e32:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	785b      	ldrb	r3, [r3, #1]
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f000 fac3 	bl	80053c4 <RTC_ByteToBcd2>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e42:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	789b      	ldrb	r3, [r3, #2]
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f000 fabb 	bl	80053c4 <RTC_ByteToBcd2>
 8004e4e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004e50:	0022      	movs	r2, r4
 8004e52:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	78db      	ldrb	r3, [r3, #3]
 8004e58:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2220      	movs	r2, #32
 8004e62:	5c9b      	ldrb	r3, [r3, r2]
 8004e64:	0018      	movs	r0, r3
 8004e66:	f000 faad 	bl	80053c4 <RTC_ByteToBcd2>
 8004e6a:	0003      	movs	r3, r0
 8004e6c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004e6e:	0022      	movs	r2, r4
 8004e70:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004e76:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	e022      	b.n	8004ec8 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	2240      	movs	r2, #64	@ 0x40
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	d102      	bne.n	8004e94 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2200      	movs	r2, #0
 8004e92:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	785b      	ldrb	r3, [r3, #1]
 8004e9e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ea0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004ea6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	78db      	ldrb	r3, [r3, #3]
 8004eac:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004eae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2120      	movs	r1, #32
 8004eb4:	5c5b      	ldrb	r3, [r3, r1]
 8004eb6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004eb8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004ebe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	22ca      	movs	r2, #202	@ 0xca
 8004eda:	625a      	str	r2, [r3, #36]	@ 0x24
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2253      	movs	r2, #83	@ 0x53
 8004ee2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ee8:	2380      	movs	r3, #128	@ 0x80
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d14c      	bne.n	8004f8a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4957      	ldr	r1, [pc, #348]	@ (8005058 <HAL_RTC_SetAlarm_IT+0x274>)
 8004efc:	400a      	ands	r2, r1
 8004efe:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004f10:	f7fd fcb0 	bl	8002874 <HAL_GetTick>
 8004f14:	0003      	movs	r3, r0
 8004f16:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004f18:	e016      	b.n	8004f48 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f1a:	f7fd fcab 	bl	8002874 <HAL_GetTick>
 8004f1e:	0002      	movs	r2, r0
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	1ad2      	subs	r2, r2, r3
 8004f24:	23fa      	movs	r3, #250	@ 0xfa
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d90d      	bls.n	8004f48 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	22ff      	movs	r2, #255	@ 0xff
 8004f32:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2229      	movs	r2, #41	@ 0x29
 8004f38:	2103      	movs	r1, #3
 8004f3a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2228      	movs	r2, #40	@ 0x28
 8004f40:	2100      	movs	r1, #0
 8004f42:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e082      	b.n	800504e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	4013      	ands	r3, r2
 8004f52:	d0e2      	beq.n	8004f1a <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2180      	movs	r1, #128	@ 0x80
 8004f70:	0049      	lsls	r1, r1, #1
 8004f72:	430a      	orrs	r2, r1
 8004f74:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	699a      	ldr	r2, [r3, #24]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2180      	movs	r1, #128	@ 0x80
 8004f82:	0149      	lsls	r1, r1, #5
 8004f84:	430a      	orrs	r2, r1
 8004f86:	619a      	str	r2, [r3, #24]
 8004f88:	e04b      	b.n	8005022 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699a      	ldr	r2, [r3, #24]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4931      	ldr	r1, [pc, #196]	@ (800505c <HAL_RTC_SetAlarm_IT+0x278>)
 8004f96:	400a      	ands	r2, r1
 8004f98:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2102      	movs	r1, #2
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004faa:	f7fd fc63 	bl	8002874 <HAL_GetTick>
 8004fae:	0003      	movs	r3, r0
 8004fb0:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004fb2:	e016      	b.n	8004fe2 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004fb4:	f7fd fc5e 	bl	8002874 <HAL_GetTick>
 8004fb8:	0002      	movs	r2, r0
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	1ad2      	subs	r2, r2, r3
 8004fbe:	23fa      	movs	r3, #250	@ 0xfa
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d90d      	bls.n	8004fe2 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	22ff      	movs	r2, #255	@ 0xff
 8004fcc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2229      	movs	r2, #41	@ 0x29
 8004fd2:	2103      	movs	r1, #3
 8004fd4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2228      	movs	r2, #40	@ 0x28
 8004fda:	2100      	movs	r1, #0
 8004fdc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e035      	b.n	800504e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	4013      	ands	r3, r2
 8004fec:	d0e2      	beq.n	8004fb4 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699a      	ldr	r2, [r3, #24]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2180      	movs	r1, #128	@ 0x80
 800500a:	0089      	lsls	r1, r1, #2
 800500c:	430a      	orrs	r2, r1
 800500e:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2180      	movs	r1, #128	@ 0x80
 800501c:	0189      	lsls	r1, r1, #6
 800501e:	430a      	orrs	r2, r1
 8005020:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005022:	4a0f      	ldr	r2, [pc, #60]	@ (8005060 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005024:	2380      	movs	r3, #128	@ 0x80
 8005026:	58d3      	ldr	r3, [r2, r3]
 8005028:	490d      	ldr	r1, [pc, #52]	@ (8005060 <HAL_RTC_SetAlarm_IT+0x27c>)
 800502a:	2280      	movs	r2, #128	@ 0x80
 800502c:	0312      	lsls	r2, r2, #12
 800502e:	4313      	orrs	r3, r2
 8005030:	2280      	movs	r2, #128	@ 0x80
 8005032:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	22ff      	movs	r2, #255	@ 0xff
 800503a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2229      	movs	r2, #41	@ 0x29
 8005040:	2101      	movs	r1, #1
 8005042:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2228      	movs	r2, #40	@ 0x28
 8005048:	2100      	movs	r1, #0
 800504a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	0018      	movs	r0, r3
 8005050:	46bd      	mov	sp, r7
 8005052:	b009      	add	sp, #36	@ 0x24
 8005054:	bd90      	pop	{r4, r7, pc}
 8005056:	46c0      	nop			@ (mov r8, r8)
 8005058:	fffffeff 	.word	0xfffffeff
 800505c:	fffffdff 	.word	0xfffffdff
 8005060:	40021800 	.word	0x40021800

08005064 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	2380      	movs	r3, #128	@ 0x80
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	429a      	cmp	r2, r3
 800507a:	d144      	bne.n	8005106 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2280      	movs	r2, #128	@ 0x80
 8005080:	0052      	lsls	r2, r2, #1
 8005082:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508a:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005092:	045b      	lsls	r3, r3, #17
 8005094:	0c5b      	lsrs	r3, r3, #17
 8005096:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	0c1b      	lsrs	r3, r3, #16
 800509c:	b2db      	uxtb	r3, r3
 800509e:	223f      	movs	r2, #63	@ 0x3f
 80050a0:	4013      	ands	r3, r2
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	0a1b      	lsrs	r3, r3, #8
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	227f      	movs	r2, #127	@ 0x7f
 80050b0:	4013      	ands	r3, r2
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	227f      	movs	r2, #127	@ 0x7f
 80050be:	4013      	ands	r3, r2
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	0d9b      	lsrs	r3, r3, #22
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2201      	movs	r2, #1
 80050ce:	4013      	ands	r3, r2
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	0e1b      	lsrs	r3, r3, #24
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	223f      	movs	r2, #63	@ 0x3f
 80050e4:	4013      	ands	r3, r2
 80050e6:	b2d9      	uxtb	r1, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2220      	movs	r2, #32
 80050ec:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	2380      	movs	r3, #128	@ 0x80
 80050f2:	05db      	lsls	r3, r3, #23
 80050f4:	401a      	ands	r2, r3
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	4a3b      	ldr	r2, [pc, #236]	@ (80051ec <HAL_RTC_GetAlarm+0x188>)
 80050fe:	401a      	ands	r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	615a      	str	r2, [r3, #20]
 8005104:	e043      	b.n	800518e <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2280      	movs	r2, #128	@ 0x80
 800510a:	0092      	lsls	r2, r2, #2
 800510c:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005114:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800511c:	045b      	lsls	r3, r3, #17
 800511e:	0c5b      	lsrs	r3, r3, #17
 8005120:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	0c1b      	lsrs	r3, r3, #16
 8005126:	b2db      	uxtb	r3, r3
 8005128:	223f      	movs	r2, #63	@ 0x3f
 800512a:	4013      	ands	r3, r2
 800512c:	b2da      	uxtb	r2, r3
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	0a1b      	lsrs	r3, r3, #8
 8005136:	b2db      	uxtb	r3, r3
 8005138:	227f      	movs	r2, #127	@ 0x7f
 800513a:	4013      	ands	r3, r2
 800513c:	b2da      	uxtb	r2, r3
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	b2db      	uxtb	r3, r3
 8005146:	227f      	movs	r2, #127	@ 0x7f
 8005148:	4013      	ands	r3, r2
 800514a:	b2da      	uxtb	r2, r3
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	0d9b      	lsrs	r3, r3, #22
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2201      	movs	r2, #1
 8005158:	4013      	ands	r3, r2
 800515a:	b2da      	uxtb	r2, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	0e1b      	lsrs	r3, r3, #24
 800516a:	b2db      	uxtb	r3, r3
 800516c:	223f      	movs	r2, #63	@ 0x3f
 800516e:	4013      	ands	r3, r2
 8005170:	b2d9      	uxtb	r1, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2220      	movs	r2, #32
 8005176:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	2380      	movs	r3, #128	@ 0x80
 800517c:	05db      	lsls	r3, r3, #23
 800517e:	401a      	ands	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	4a19      	ldr	r2, [pc, #100]	@ (80051ec <HAL_RTC_GetAlarm+0x188>)
 8005188:	401a      	ands	r2, r3
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d125      	bne.n	80051e0 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	0018      	movs	r0, r3
 800519a:	f000 f93b 	bl	8005414 <RTC_Bcd2ToByte>
 800519e:	0003      	movs	r3, r0
 80051a0:	001a      	movs	r2, r3
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	785b      	ldrb	r3, [r3, #1]
 80051aa:	0018      	movs	r0, r3
 80051ac:	f000 f932 	bl	8005414 <RTC_Bcd2ToByte>
 80051b0:	0003      	movs	r3, r0
 80051b2:	001a      	movs	r2, r3
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	789b      	ldrb	r3, [r3, #2]
 80051bc:	0018      	movs	r0, r3
 80051be:	f000 f929 	bl	8005414 <RTC_Bcd2ToByte>
 80051c2:	0003      	movs	r3, r0
 80051c4:	001a      	movs	r2, r3
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2220      	movs	r2, #32
 80051ce:	5c9b      	ldrb	r3, [r3, r2]
 80051d0:	0018      	movs	r0, r3
 80051d2:	f000 f91f 	bl	8005414 <RTC_Bcd2ToByte>
 80051d6:	0003      	movs	r3, r0
 80051d8:	0019      	movs	r1, r3
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2220      	movs	r2, #32
 80051de:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	0018      	movs	r0, r3
 80051e4:	46bd      	mov	sp, r7
 80051e6:	b006      	add	sp, #24
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	46c0      	nop			@ (mov r8, r8)
 80051ec:	80808080 	.word	0x80808080

080051f0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699a      	ldr	r2, [r3, #24]
 80051fe:	2380      	movs	r3, #128	@ 0x80
 8005200:	015b      	lsls	r3, r3, #5
 8005202:	4013      	ands	r3, r2
 8005204:	d011      	beq.n	800522a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800520c:	2201      	movs	r2, #1
 800520e:	4013      	ands	r3, r2
 8005210:	d00b      	beq.n	800522a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2101      	movs	r1, #1
 800521e:	430a      	orrs	r2, r1
 8005220:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	0018      	movs	r0, r3
 8005226:	f7fc f95f 	bl	80014e8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699a      	ldr	r2, [r3, #24]
 8005230:	2380      	movs	r3, #128	@ 0x80
 8005232:	019b      	lsls	r3, r3, #6
 8005234:	4013      	ands	r3, r2
 8005236:	d011      	beq.n	800525c <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800523e:	2202      	movs	r2, #2
 8005240:	4013      	ands	r3, r2
 8005242:	d00b      	beq.n	800525c <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2102      	movs	r1, #2
 8005250:	430a      	orrs	r2, r1
 8005252:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	0018      	movs	r0, r3
 8005258:	f000 f9a4 	bl	80055a4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2229      	movs	r2, #41	@ 0x29
 8005260:	2101      	movs	r1, #1
 8005262:	5499      	strb	r1, [r3, r2]
}
 8005264:	46c0      	nop			@ (mov r8, r8)
 8005266:	46bd      	mov	sp, r7
 8005268:	b002      	add	sp, #8
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a0e      	ldr	r2, [pc, #56]	@ (80052b4 <HAL_RTC_WaitForSynchro+0x48>)
 800527a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800527c:	f7fd fafa 	bl	8002874 <HAL_GetTick>
 8005280:	0003      	movs	r3, r0
 8005282:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005284:	e00a      	b.n	800529c <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005286:	f7fd faf5 	bl	8002874 <HAL_GetTick>
 800528a:	0002      	movs	r2, r0
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	1ad2      	subs	r2, r2, r3
 8005290:	23fa      	movs	r3, #250	@ 0xfa
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	429a      	cmp	r2, r3
 8005296:	d901      	bls.n	800529c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e006      	b.n	80052aa <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	4013      	ands	r3, r2
 80052a6:	d0ee      	beq.n	8005286 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	0018      	movs	r0, r3
 80052ac:	46bd      	mov	sp, r7
 80052ae:	b004      	add	sp, #16
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	46c0      	nop			@ (mov r8, r8)
 80052b4:	0001005f 	.word	0x0001005f

080052b8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80052c0:	230f      	movs	r3, #15
 80052c2:	18fb      	adds	r3, r7, r3
 80052c4:	2200      	movs	r2, #0
 80052c6:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	2240      	movs	r2, #64	@ 0x40
 80052d0:	4013      	ands	r3, r2
 80052d2:	d12c      	bne.n	800532e <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2180      	movs	r1, #128	@ 0x80
 80052e0:	430a      	orrs	r2, r1
 80052e2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80052e4:	f7fd fac6 	bl	8002874 <HAL_GetTick>
 80052e8:	0003      	movs	r3, r0
 80052ea:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80052ec:	e014      	b.n	8005318 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80052ee:	f7fd fac1 	bl	8002874 <HAL_GetTick>
 80052f2:	0002      	movs	r2, r0
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	1ad2      	subs	r2, r2, r3
 80052f8:	200f      	movs	r0, #15
 80052fa:	183b      	adds	r3, r7, r0
 80052fc:	1839      	adds	r1, r7, r0
 80052fe:	7809      	ldrb	r1, [r1, #0]
 8005300:	7019      	strb	r1, [r3, #0]
 8005302:	23fa      	movs	r3, #250	@ 0xfa
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	429a      	cmp	r2, r3
 8005308:	d906      	bls.n	8005318 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800530a:	183b      	adds	r3, r7, r0
 800530c:	2203      	movs	r2, #3
 800530e:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2229      	movs	r2, #41	@ 0x29
 8005314:	2103      	movs	r1, #3
 8005316:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	2240      	movs	r2, #64	@ 0x40
 8005320:	4013      	ands	r3, r2
 8005322:	d104      	bne.n	800532e <RTC_EnterInitMode+0x76>
 8005324:	230f      	movs	r3, #15
 8005326:	18fb      	adds	r3, r7, r3
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b03      	cmp	r3, #3
 800532c:	d1df      	bne.n	80052ee <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800532e:	230f      	movs	r3, #15
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	781b      	ldrb	r3, [r3, #0]
}
 8005334:	0018      	movs	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	b004      	add	sp, #16
 800533a:	bd80      	pop	{r7, pc}

0800533c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800533c:	b590      	push	{r4, r7, lr}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005344:	240f      	movs	r4, #15
 8005346:	193b      	adds	r3, r7, r4
 8005348:	2200      	movs	r2, #0
 800534a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800534c:	4b1c      	ldr	r3, [pc, #112]	@ (80053c0 <RTC_ExitInitMode+0x84>)
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	4b1b      	ldr	r3, [pc, #108]	@ (80053c0 <RTC_ExitInitMode+0x84>)
 8005352:	2180      	movs	r1, #128	@ 0x80
 8005354:	438a      	bics	r2, r1
 8005356:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005358:	4b19      	ldr	r3, [pc, #100]	@ (80053c0 <RTC_ExitInitMode+0x84>)
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	2220      	movs	r2, #32
 800535e:	4013      	ands	r3, r2
 8005360:	d10d      	bne.n	800537e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	0018      	movs	r0, r3
 8005366:	f7ff ff81 	bl	800526c <HAL_RTC_WaitForSynchro>
 800536a:	1e03      	subs	r3, r0, #0
 800536c:	d021      	beq.n	80053b2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2229      	movs	r2, #41	@ 0x29
 8005372:	2103      	movs	r1, #3
 8005374:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005376:	193b      	adds	r3, r7, r4
 8005378:	2203      	movs	r2, #3
 800537a:	701a      	strb	r2, [r3, #0]
 800537c:	e019      	b.n	80053b2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800537e:	4b10      	ldr	r3, [pc, #64]	@ (80053c0 <RTC_ExitInitMode+0x84>)
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	4b0f      	ldr	r3, [pc, #60]	@ (80053c0 <RTC_ExitInitMode+0x84>)
 8005384:	2120      	movs	r1, #32
 8005386:	438a      	bics	r2, r1
 8005388:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	0018      	movs	r0, r3
 800538e:	f7ff ff6d 	bl	800526c <HAL_RTC_WaitForSynchro>
 8005392:	1e03      	subs	r3, r0, #0
 8005394:	d007      	beq.n	80053a6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2229      	movs	r2, #41	@ 0x29
 800539a:	2103      	movs	r1, #3
 800539c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800539e:	230f      	movs	r3, #15
 80053a0:	18fb      	adds	r3, r7, r3
 80053a2:	2203      	movs	r2, #3
 80053a4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80053a6:	4b06      	ldr	r3, [pc, #24]	@ (80053c0 <RTC_ExitInitMode+0x84>)
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	4b05      	ldr	r3, [pc, #20]	@ (80053c0 <RTC_ExitInitMode+0x84>)
 80053ac:	2120      	movs	r1, #32
 80053ae:	430a      	orrs	r2, r1
 80053b0:	619a      	str	r2, [r3, #24]
  }

  return status;
 80053b2:	230f      	movs	r3, #15
 80053b4:	18fb      	adds	r3, r7, r3
 80053b6:	781b      	ldrb	r3, [r3, #0]
}
 80053b8:	0018      	movs	r0, r3
 80053ba:	46bd      	mov	sp, r7
 80053bc:	b005      	add	sp, #20
 80053be:	bd90      	pop	{r4, r7, pc}
 80053c0:	40002800 	.word	0x40002800

080053c4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	0002      	movs	r2, r0
 80053cc:	1dfb      	adds	r3, r7, #7
 80053ce:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80053d4:	230b      	movs	r3, #11
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	1dfa      	adds	r2, r7, #7
 80053da:	7812      	ldrb	r2, [r2, #0]
 80053dc:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80053de:	e008      	b.n	80053f2 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	3301      	adds	r3, #1
 80053e4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80053e6:	220b      	movs	r2, #11
 80053e8:	18bb      	adds	r3, r7, r2
 80053ea:	18ba      	adds	r2, r7, r2
 80053ec:	7812      	ldrb	r2, [r2, #0]
 80053ee:	3a0a      	subs	r2, #10
 80053f0:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80053f2:	210b      	movs	r1, #11
 80053f4:	187b      	adds	r3, r7, r1
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b09      	cmp	r3, #9
 80053fa:	d8f1      	bhi.n	80053e0 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	b2da      	uxtb	r2, r3
 8005404:	187b      	adds	r3, r7, r1
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	4313      	orrs	r3, r2
 800540a:	b2db      	uxtb	r3, r3
}
 800540c:	0018      	movs	r0, r3
 800540e:	46bd      	mov	sp, r7
 8005410:	b004      	add	sp, #16
 8005412:	bd80      	pop	{r7, pc}

08005414 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	0002      	movs	r2, r0
 800541c:	1dfb      	adds	r3, r7, #7
 800541e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005420:	1dfb      	adds	r3, r7, #7
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	091b      	lsrs	r3, r3, #4
 8005426:	b2db      	uxtb	r3, r3
 8005428:	001a      	movs	r2, r3
 800542a:	0013      	movs	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	189b      	adds	r3, r3, r2
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	b2da      	uxtb	r2, r3
 8005438:	1dfb      	adds	r3, r7, #7
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	210f      	movs	r1, #15
 800543e:	400b      	ands	r3, r1
 8005440:	b2db      	uxtb	r3, r3
 8005442:	18d3      	adds	r3, r2, r3
 8005444:	b2db      	uxtb	r3, r3
}
 8005446:	0018      	movs	r0, r3
 8005448:	46bd      	mov	sp, r7
 800544a:	b004      	add	sp, #16
 800544c:	bd80      	pop	{r7, pc}

0800544e <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b086      	sub	sp, #24
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	607a      	str	r2, [r7, #4]
 800545a:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2228      	movs	r2, #40	@ 0x28
 8005460:	5c9b      	ldrb	r3, [r3, r2]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <HAL_RTCEx_SetSmoothCalib+0x1c>
 8005466:	2302      	movs	r3, #2
 8005468:	e04f      	b.n	800550a <HAL_RTCEx_SetSmoothCalib+0xbc>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2228      	movs	r2, #40	@ 0x28
 800546e:	2101      	movs	r1, #1
 8005470:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2229      	movs	r2, #41	@ 0x29
 8005476:	2102      	movs	r1, #2
 8005478:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	22ca      	movs	r2, #202	@ 0xca
 8005480:	625a      	str	r2, [r3, #36]	@ 0x24
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2253      	movs	r2, #83	@ 0x53
 8005488:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	2380      	movs	r3, #128	@ 0x80
 8005492:	025b      	lsls	r3, r3, #9
 8005494:	4013      	ands	r3, r2
 8005496:	d022      	beq.n	80054de <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8005498:	f7fd f9ec 	bl	8002874 <HAL_GetTick>
 800549c:	0003      	movs	r3, r0
 800549e:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 80054a0:	e016      	b.n	80054d0 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80054a2:	f7fd f9e7 	bl	8002874 <HAL_GetTick>
 80054a6:	0002      	movs	r2, r0
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	1ad2      	subs	r2, r2, r3
 80054ac:	23fa      	movs	r3, #250	@ 0xfa
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d90d      	bls.n	80054d0 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	22ff      	movs	r2, #255	@ 0xff
 80054ba:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2229      	movs	r2, #41	@ 0x29
 80054c0:	2103      	movs	r1, #3
 80054c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2228      	movs	r2, #40	@ 0x28
 80054c8:	2100      	movs	r1, #0
 80054ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e01c      	b.n	800550a <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	2380      	movs	r3, #128	@ 0x80
 80054d8:	025b      	lsls	r3, r3, #9
 80054da:	4013      	ands	r3, r2
 80054dc:	d1e1      	bne.n	80054a2 <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	0011      	movs	r1, r2
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	22ff      	movs	r2, #255	@ 0xff
 80054f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2229      	movs	r2, #41	@ 0x29
 80054fc:	2101      	movs	r1, #1
 80054fe:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2228      	movs	r2, #40	@ 0x28
 8005504:	2100      	movs	r1, #0
 8005506:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	0018      	movs	r0, r3
 800550c:	46bd      	mov	sp, r7
 800550e:	b006      	add	sp, #24
 8005510:	bd80      	pop	{r7, pc}
	...

08005514 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2228      	movs	r2, #40	@ 0x28
 8005522:	5c9b      	ldrb	r3, [r3, r2]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d101      	bne.n	800552c <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8005528:	2302      	movs	r3, #2
 800552a:	e035      	b.n	8005598 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2228      	movs	r2, #40	@ 0x28
 8005530:	2101      	movs	r1, #1
 8005532:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2229      	movs	r2, #41	@ 0x29
 8005538:	2102      	movs	r1, #2
 800553a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	22ca      	movs	r2, #202	@ 0xca
 8005542:	625a      	str	r2, [r3, #36]	@ 0x24
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2253      	movs	r2, #83	@ 0x53
 800554a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4912      	ldr	r1, [pc, #72]	@ (80055a0 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8005558:	400a      	ands	r2, r1
 800555a:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6999      	ldr	r1, [r3, #24]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699a      	ldr	r2, [r3, #24]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2180      	movs	r1, #128	@ 0x80
 8005578:	0409      	lsls	r1, r1, #16
 800557a:	430a      	orrs	r2, r1
 800557c:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	22ff      	movs	r2, #255	@ 0xff
 8005584:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2229      	movs	r2, #41	@ 0x29
 800558a:	2101      	movs	r1, #1
 800558c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2228      	movs	r2, #40	@ 0x28
 8005592:	2100      	movs	r1, #0
 8005594:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	0018      	movs	r0, r3
 800559a:	46bd      	mov	sp, r7
 800559c:	b002      	add	sp, #8
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	fff7ffff 	.word	0xfff7ffff

080055a4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80055ac:	46c0      	nop			@ (mov r8, r8)
 80055ae:	46bd      	mov	sp, r7
 80055b0:	b002      	add	sp, #8
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	001a      	movs	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	18d3      	adds	r3, r2, r3
 80055cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	3301      	adds	r3, #1
 80055d2:	33ff      	adds	r3, #255	@ 0xff
 80055d4:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	18d3      	adds	r3, r2, r3
 80055de:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	601a      	str	r2, [r3, #0]
}
 80055e6:	46c0      	nop			@ (mov r8, r8)
 80055e8:	46bd      	mov	sp, r7
 80055ea:	b006      	add	sp, #24
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b084      	sub	sp, #16
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	001a      	movs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	18d3      	adds	r3, r2, r3
 8005604:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3301      	adds	r3, #1
 800560a:	33ff      	adds	r3, #255	@ 0xff
 800560c:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	18d3      	adds	r3, r2, r3
 8005616:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	681b      	ldr	r3, [r3, #0]
}
 800561c:	0018      	movs	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	b004      	add	sp, #16
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e04a      	b.n	80056cc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	223d      	movs	r2, #61	@ 0x3d
 800563a:	5c9b      	ldrb	r3, [r3, r2]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d107      	bne.n	8005652 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	223c      	movs	r2, #60	@ 0x3c
 8005646:	2100      	movs	r1, #0
 8005648:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	0018      	movs	r0, r3
 800564e:	f7fc ff67 	bl	8002520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	223d      	movs	r2, #61	@ 0x3d
 8005656:	2102      	movs	r1, #2
 8005658:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3304      	adds	r3, #4
 8005662:	0019      	movs	r1, r3
 8005664:	0010      	movs	r0, r2
 8005666:	f000 fc87 	bl	8005f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2248      	movs	r2, #72	@ 0x48
 800566e:	2101      	movs	r1, #1
 8005670:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	223e      	movs	r2, #62	@ 0x3e
 8005676:	2101      	movs	r1, #1
 8005678:	5499      	strb	r1, [r3, r2]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	223f      	movs	r2, #63	@ 0x3f
 800567e:	2101      	movs	r1, #1
 8005680:	5499      	strb	r1, [r3, r2]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2240      	movs	r2, #64	@ 0x40
 8005686:	2101      	movs	r1, #1
 8005688:	5499      	strb	r1, [r3, r2]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2241      	movs	r2, #65	@ 0x41
 800568e:	2101      	movs	r1, #1
 8005690:	5499      	strb	r1, [r3, r2]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2242      	movs	r2, #66	@ 0x42
 8005696:	2101      	movs	r1, #1
 8005698:	5499      	strb	r1, [r3, r2]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2243      	movs	r2, #67	@ 0x43
 800569e:	2101      	movs	r1, #1
 80056a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2244      	movs	r2, #68	@ 0x44
 80056a6:	2101      	movs	r1, #1
 80056a8:	5499      	strb	r1, [r3, r2]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2245      	movs	r2, #69	@ 0x45
 80056ae:	2101      	movs	r1, #1
 80056b0:	5499      	strb	r1, [r3, r2]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2246      	movs	r2, #70	@ 0x46
 80056b6:	2101      	movs	r1, #1
 80056b8:	5499      	strb	r1, [r3, r2]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2247      	movs	r2, #71	@ 0x47
 80056be:	2101      	movs	r1, #1
 80056c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	223d      	movs	r2, #61	@ 0x3d
 80056c6:	2101      	movs	r1, #1
 80056c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	0018      	movs	r0, r3
 80056ce:	46bd      	mov	sp, r7
 80056d0:	b002      	add	sp, #8
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	223d      	movs	r2, #61	@ 0x3d
 80056e0:	5c9b      	ldrb	r3, [r3, r2]
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d001      	beq.n	80056ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e035      	b.n	8005758 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	223d      	movs	r2, #61	@ 0x3d
 80056f0:	2102      	movs	r1, #2
 80056f2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a19      	ldr	r2, [pc, #100]	@ (8005760 <HAL_TIM_Base_Start+0x8c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00a      	beq.n	8005714 <HAL_TIM_Base_Start+0x40>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	2380      	movs	r3, #128	@ 0x80
 8005704:	05db      	lsls	r3, r3, #23
 8005706:	429a      	cmp	r2, r3
 8005708:	d004      	beq.n	8005714 <HAL_TIM_Base_Start+0x40>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a15      	ldr	r2, [pc, #84]	@ (8005764 <HAL_TIM_Base_Start+0x90>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d116      	bne.n	8005742 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	4a13      	ldr	r2, [pc, #76]	@ (8005768 <HAL_TIM_Base_Start+0x94>)
 800571c:	4013      	ands	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b06      	cmp	r3, #6
 8005724:	d016      	beq.n	8005754 <HAL_TIM_Base_Start+0x80>
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	2380      	movs	r3, #128	@ 0x80
 800572a:	025b      	lsls	r3, r3, #9
 800572c:	429a      	cmp	r2, r3
 800572e:	d011      	beq.n	8005754 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2101      	movs	r1, #1
 800573c:	430a      	orrs	r2, r1
 800573e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005740:	e008      	b.n	8005754 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2101      	movs	r1, #1
 800574e:	430a      	orrs	r2, r1
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	e000      	b.n	8005756 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005754:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	0018      	movs	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	b004      	add	sp, #16
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40012c00 	.word	0x40012c00
 8005764:	40000400 	.word	0x40000400
 8005768:	00010007 	.word	0x00010007

0800576c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	4a0d      	ldr	r2, [pc, #52]	@ (80057b0 <HAL_TIM_Base_Stop+0x44>)
 800577c:	4013      	ands	r3, r2
 800577e:	d10d      	bne.n	800579c <HAL_TIM_Base_Stop+0x30>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	4a0b      	ldr	r2, [pc, #44]	@ (80057b4 <HAL_TIM_Base_Stop+0x48>)
 8005788:	4013      	ands	r3, r2
 800578a:	d107      	bne.n	800579c <HAL_TIM_Base_Stop+0x30>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2101      	movs	r1, #1
 8005798:	438a      	bics	r2, r1
 800579a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	223d      	movs	r2, #61	@ 0x3d
 80057a0:	2101      	movs	r1, #1
 80057a2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	0018      	movs	r0, r3
 80057a8:	46bd      	mov	sp, r7
 80057aa:	b002      	add	sp, #8
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	46c0      	nop			@ (mov r8, r8)
 80057b0:	00001111 	.word	0x00001111
 80057b4:	00000444 	.word	0x00000444

080057b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	223d      	movs	r2, #61	@ 0x3d
 80057c4:	5c9b      	ldrb	r3, [r3, r2]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d001      	beq.n	80057d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e03d      	b.n	800584c <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	223d      	movs	r2, #61	@ 0x3d
 80057d4:	2102      	movs	r1, #2
 80057d6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2101      	movs	r1, #1
 80057e4:	430a      	orrs	r2, r1
 80057e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a19      	ldr	r2, [pc, #100]	@ (8005854 <HAL_TIM_Base_Start_IT+0x9c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00a      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x50>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	2380      	movs	r3, #128	@ 0x80
 80057f8:	05db      	lsls	r3, r3, #23
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d004      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x50>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a15      	ldr	r2, [pc, #84]	@ (8005858 <HAL_TIM_Base_Start_IT+0xa0>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d116      	bne.n	8005836 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	4a13      	ldr	r2, [pc, #76]	@ (800585c <HAL_TIM_Base_Start_IT+0xa4>)
 8005810:	4013      	ands	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b06      	cmp	r3, #6
 8005818:	d016      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x90>
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	2380      	movs	r3, #128	@ 0x80
 800581e:	025b      	lsls	r3, r3, #9
 8005820:	429a      	cmp	r2, r3
 8005822:	d011      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2101      	movs	r1, #1
 8005830:	430a      	orrs	r2, r1
 8005832:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005834:	e008      	b.n	8005848 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2101      	movs	r1, #1
 8005842:	430a      	orrs	r2, r1
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	e000      	b.n	800584a <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005848:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	0018      	movs	r0, r3
 800584e:	46bd      	mov	sp, r7
 8005850:	b004      	add	sp, #16
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40012c00 	.word	0x40012c00
 8005858:	40000400 	.word	0x40000400
 800585c:	00010007 	.word	0x00010007

08005860 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2101      	movs	r1, #1
 8005874:	438a      	bics	r2, r1
 8005876:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	4a0d      	ldr	r2, [pc, #52]	@ (80058b4 <HAL_TIM_Base_Stop_IT+0x54>)
 8005880:	4013      	ands	r3, r2
 8005882:	d10d      	bne.n	80058a0 <HAL_TIM_Base_Stop_IT+0x40>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	4a0b      	ldr	r2, [pc, #44]	@ (80058b8 <HAL_TIM_Base_Stop_IT+0x58>)
 800588c:	4013      	ands	r3, r2
 800588e:	d107      	bne.n	80058a0 <HAL_TIM_Base_Stop_IT+0x40>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2101      	movs	r1, #1
 800589c:	438a      	bics	r2, r1
 800589e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	223d      	movs	r2, #61	@ 0x3d
 80058a4:	2101      	movs	r1, #1
 80058a6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	0018      	movs	r0, r3
 80058ac:	46bd      	mov	sp, r7
 80058ae:	b002      	add	sp, #8
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	46c0      	nop			@ (mov r8, r8)
 80058b4:	00001111 	.word	0x00001111
 80058b8:	00000444 	.word	0x00000444

080058bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e04a      	b.n	8005964 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	223d      	movs	r2, #61	@ 0x3d
 80058d2:	5c9b      	ldrb	r3, [r3, r2]
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d107      	bne.n	80058ea <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	223c      	movs	r2, #60	@ 0x3c
 80058de:	2100      	movs	r1, #0
 80058e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	0018      	movs	r0, r3
 80058e6:	f7fc fdd1 	bl	800248c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	223d      	movs	r2, #61	@ 0x3d
 80058ee:	2102      	movs	r1, #2
 80058f0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3304      	adds	r3, #4
 80058fa:	0019      	movs	r1, r3
 80058fc:	0010      	movs	r0, r2
 80058fe:	f000 fb3b 	bl	8005f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2248      	movs	r2, #72	@ 0x48
 8005906:	2101      	movs	r1, #1
 8005908:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	223e      	movs	r2, #62	@ 0x3e
 800590e:	2101      	movs	r1, #1
 8005910:	5499      	strb	r1, [r3, r2]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	223f      	movs	r2, #63	@ 0x3f
 8005916:	2101      	movs	r1, #1
 8005918:	5499      	strb	r1, [r3, r2]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2240      	movs	r2, #64	@ 0x40
 800591e:	2101      	movs	r1, #1
 8005920:	5499      	strb	r1, [r3, r2]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2241      	movs	r2, #65	@ 0x41
 8005926:	2101      	movs	r1, #1
 8005928:	5499      	strb	r1, [r3, r2]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2242      	movs	r2, #66	@ 0x42
 800592e:	2101      	movs	r1, #1
 8005930:	5499      	strb	r1, [r3, r2]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2243      	movs	r2, #67	@ 0x43
 8005936:	2101      	movs	r1, #1
 8005938:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2244      	movs	r2, #68	@ 0x44
 800593e:	2101      	movs	r1, #1
 8005940:	5499      	strb	r1, [r3, r2]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2245      	movs	r2, #69	@ 0x45
 8005946:	2101      	movs	r1, #1
 8005948:	5499      	strb	r1, [r3, r2]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2246      	movs	r2, #70	@ 0x46
 800594e:	2101      	movs	r1, #1
 8005950:	5499      	strb	r1, [r3, r2]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2247      	movs	r2, #71	@ 0x47
 8005956:	2101      	movs	r1, #1
 8005958:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	223d      	movs	r2, #61	@ 0x3d
 800595e:	2101      	movs	r1, #1
 8005960:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	0018      	movs	r0, r3
 8005966:	46bd      	mov	sp, r7
 8005968:	b002      	add	sp, #8
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d108      	bne.n	800598e <HAL_TIM_PWM_Start+0x22>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	223e      	movs	r2, #62	@ 0x3e
 8005980:	5c9b      	ldrb	r3, [r3, r2]
 8005982:	b2db      	uxtb	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	1e5a      	subs	r2, r3, #1
 8005988:	4193      	sbcs	r3, r2
 800598a:	b2db      	uxtb	r3, r3
 800598c:	e037      	b.n	80059fe <HAL_TIM_PWM_Start+0x92>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b04      	cmp	r3, #4
 8005992:	d108      	bne.n	80059a6 <HAL_TIM_PWM_Start+0x3a>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	223f      	movs	r2, #63	@ 0x3f
 8005998:	5c9b      	ldrb	r3, [r3, r2]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	3b01      	subs	r3, #1
 800599e:	1e5a      	subs	r2, r3, #1
 80059a0:	4193      	sbcs	r3, r2
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	e02b      	b.n	80059fe <HAL_TIM_PWM_Start+0x92>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d108      	bne.n	80059be <HAL_TIM_PWM_Start+0x52>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2240      	movs	r2, #64	@ 0x40
 80059b0:	5c9b      	ldrb	r3, [r3, r2]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	1e5a      	subs	r2, r3, #1
 80059b8:	4193      	sbcs	r3, r2
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	e01f      	b.n	80059fe <HAL_TIM_PWM_Start+0x92>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b0c      	cmp	r3, #12
 80059c2:	d108      	bne.n	80059d6 <HAL_TIM_PWM_Start+0x6a>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2241      	movs	r2, #65	@ 0x41
 80059c8:	5c9b      	ldrb	r3, [r3, r2]
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	3b01      	subs	r3, #1
 80059ce:	1e5a      	subs	r2, r3, #1
 80059d0:	4193      	sbcs	r3, r2
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	e013      	b.n	80059fe <HAL_TIM_PWM_Start+0x92>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b10      	cmp	r3, #16
 80059da:	d108      	bne.n	80059ee <HAL_TIM_PWM_Start+0x82>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2242      	movs	r2, #66	@ 0x42
 80059e0:	5c9b      	ldrb	r3, [r3, r2]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	1e5a      	subs	r2, r3, #1
 80059e8:	4193      	sbcs	r3, r2
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	e007      	b.n	80059fe <HAL_TIM_PWM_Start+0x92>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2243      	movs	r2, #67	@ 0x43
 80059f2:	5c9b      	ldrb	r3, [r3, r2]
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	3b01      	subs	r3, #1
 80059f8:	1e5a      	subs	r2, r3, #1
 80059fa:	4193      	sbcs	r3, r2
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e081      	b.n	8005b0a <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d104      	bne.n	8005a16 <HAL_TIM_PWM_Start+0xaa>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	223e      	movs	r2, #62	@ 0x3e
 8005a10:	2102      	movs	r1, #2
 8005a12:	5499      	strb	r1, [r3, r2]
 8005a14:	e023      	b.n	8005a5e <HAL_TIM_PWM_Start+0xf2>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b04      	cmp	r3, #4
 8005a1a:	d104      	bne.n	8005a26 <HAL_TIM_PWM_Start+0xba>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	223f      	movs	r2, #63	@ 0x3f
 8005a20:	2102      	movs	r1, #2
 8005a22:	5499      	strb	r1, [r3, r2]
 8005a24:	e01b      	b.n	8005a5e <HAL_TIM_PWM_Start+0xf2>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d104      	bne.n	8005a36 <HAL_TIM_PWM_Start+0xca>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2240      	movs	r2, #64	@ 0x40
 8005a30:	2102      	movs	r1, #2
 8005a32:	5499      	strb	r1, [r3, r2]
 8005a34:	e013      	b.n	8005a5e <HAL_TIM_PWM_Start+0xf2>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b0c      	cmp	r3, #12
 8005a3a:	d104      	bne.n	8005a46 <HAL_TIM_PWM_Start+0xda>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2241      	movs	r2, #65	@ 0x41
 8005a40:	2102      	movs	r1, #2
 8005a42:	5499      	strb	r1, [r3, r2]
 8005a44:	e00b      	b.n	8005a5e <HAL_TIM_PWM_Start+0xf2>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b10      	cmp	r3, #16
 8005a4a:	d104      	bne.n	8005a56 <HAL_TIM_PWM_Start+0xea>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2242      	movs	r2, #66	@ 0x42
 8005a50:	2102      	movs	r1, #2
 8005a52:	5499      	strb	r1, [r3, r2]
 8005a54:	e003      	b.n	8005a5e <HAL_TIM_PWM_Start+0xf2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2243      	movs	r2, #67	@ 0x43
 8005a5a:	2102      	movs	r1, #2
 8005a5c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6839      	ldr	r1, [r7, #0]
 8005a64:	2201      	movs	r2, #1
 8005a66:	0018      	movs	r0, r3
 8005a68:	f000 fda6 	bl	80065b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a28      	ldr	r2, [pc, #160]	@ (8005b14 <HAL_TIM_PWM_Start+0x1a8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d009      	beq.n	8005a8a <HAL_TIM_PWM_Start+0x11e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a27      	ldr	r2, [pc, #156]	@ (8005b18 <HAL_TIM_PWM_Start+0x1ac>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d004      	beq.n	8005a8a <HAL_TIM_PWM_Start+0x11e>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a25      	ldr	r2, [pc, #148]	@ (8005b1c <HAL_TIM_PWM_Start+0x1b0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d101      	bne.n	8005a8e <HAL_TIM_PWM_Start+0x122>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <HAL_TIM_PWM_Start+0x124>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d008      	beq.n	8005aa6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2180      	movs	r1, #128	@ 0x80
 8005aa0:	0209      	lsls	r1, r1, #8
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a1a      	ldr	r2, [pc, #104]	@ (8005b14 <HAL_TIM_PWM_Start+0x1a8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00a      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0x15a>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	2380      	movs	r3, #128	@ 0x80
 8005ab6:	05db      	lsls	r3, r3, #23
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d004      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0x15a>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a17      	ldr	r2, [pc, #92]	@ (8005b20 <HAL_TIM_PWM_Start+0x1b4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d116      	bne.n	8005af4 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	4a15      	ldr	r2, [pc, #84]	@ (8005b24 <HAL_TIM_PWM_Start+0x1b8>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b06      	cmp	r3, #6
 8005ad6:	d016      	beq.n	8005b06 <HAL_TIM_PWM_Start+0x19a>
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	2380      	movs	r3, #128	@ 0x80
 8005adc:	025b      	lsls	r3, r3, #9
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d011      	beq.n	8005b06 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2101      	movs	r1, #1
 8005aee:	430a      	orrs	r2, r1
 8005af0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af2:	e008      	b.n	8005b06 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2101      	movs	r1, #1
 8005b00:	430a      	orrs	r2, r1
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	e000      	b.n	8005b08 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b06:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	b004      	add	sp, #16
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	46c0      	nop			@ (mov r8, r8)
 8005b14:	40012c00 	.word	0x40012c00
 8005b18:	40014400 	.word	0x40014400
 8005b1c:	40014800 	.word	0x40014800
 8005b20:	40000400 	.word	0x40000400
 8005b24:	00010007 	.word	0x00010007

08005b28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2202      	movs	r2, #2
 8005b44:	4013      	ands	r3, r2
 8005b46:	d021      	beq.n	8005b8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	d01d      	beq.n	8005b8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2203      	movs	r2, #3
 8005b56:	4252      	negs	r2, r2
 8005b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	2203      	movs	r2, #3
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d004      	beq.n	8005b76 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	0018      	movs	r0, r3
 8005b70:	f000 f9ea 	bl	8005f48 <HAL_TIM_IC_CaptureCallback>
 8005b74:	e007      	b.n	8005b86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f000 f9dd 	bl	8005f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	0018      	movs	r0, r3
 8005b82:	f000 f9e9 	bl	8005f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2204      	movs	r2, #4
 8005b90:	4013      	ands	r3, r2
 8005b92:	d022      	beq.n	8005bda <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2204      	movs	r2, #4
 8005b98:	4013      	ands	r3, r2
 8005b9a:	d01e      	beq.n	8005bda <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2205      	movs	r2, #5
 8005ba2:	4252      	negs	r2, r2
 8005ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2202      	movs	r2, #2
 8005baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	23c0      	movs	r3, #192	@ 0xc0
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	d004      	beq.n	8005bc4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f000 f9c3 	bl	8005f48 <HAL_TIM_IC_CaptureCallback>
 8005bc2:	e007      	b.n	8005bd4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f000 f9b6 	bl	8005f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	0018      	movs	r0, r3
 8005bd0:	f000 f9c2 	bl	8005f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2208      	movs	r2, #8
 8005bde:	4013      	ands	r3, r2
 8005be0:	d021      	beq.n	8005c26 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2208      	movs	r2, #8
 8005be6:	4013      	ands	r3, r2
 8005be8:	d01d      	beq.n	8005c26 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2209      	movs	r2, #9
 8005bf0:	4252      	negs	r2, r2
 8005bf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2204      	movs	r2, #4
 8005bf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	2203      	movs	r2, #3
 8005c02:	4013      	ands	r3, r2
 8005c04:	d004      	beq.n	8005c10 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f000 f99d 	bl	8005f48 <HAL_TIM_IC_CaptureCallback>
 8005c0e:	e007      	b.n	8005c20 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	0018      	movs	r0, r3
 8005c14:	f000 f990 	bl	8005f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	f000 f99c 	bl	8005f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2210      	movs	r2, #16
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	d022      	beq.n	8005c74 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2210      	movs	r2, #16
 8005c32:	4013      	ands	r3, r2
 8005c34:	d01e      	beq.n	8005c74 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2211      	movs	r2, #17
 8005c3c:	4252      	negs	r2, r2
 8005c3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2208      	movs	r2, #8
 8005c44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69da      	ldr	r2, [r3, #28]
 8005c4c:	23c0      	movs	r3, #192	@ 0xc0
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4013      	ands	r3, r2
 8005c52:	d004      	beq.n	8005c5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	0018      	movs	r0, r3
 8005c58:	f000 f976 	bl	8005f48 <HAL_TIM_IC_CaptureCallback>
 8005c5c:	e007      	b.n	8005c6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	0018      	movs	r0, r3
 8005c62:	f000 f969 	bl	8005f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f000 f975 	bl	8005f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2201      	movs	r2, #1
 8005c78:	4013      	ands	r3, r2
 8005c7a:	d00c      	beq.n	8005c96 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	4013      	ands	r3, r2
 8005c82:	d008      	beq.n	8005c96 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2202      	movs	r2, #2
 8005c8a:	4252      	negs	r2, r2
 8005c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	0018      	movs	r0, r3
 8005c92:	f7fb fe5b 	bl	800194c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2280      	movs	r2, #128	@ 0x80
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	d104      	bne.n	8005ca8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	2380      	movs	r3, #128	@ 0x80
 8005ca2:	019b      	lsls	r3, r3, #6
 8005ca4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ca6:	d00b      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2280      	movs	r2, #128	@ 0x80
 8005cac:	4013      	ands	r3, r2
 8005cae:	d007      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8005d30 <HAL_TIM_IRQHandler+0x208>)
 8005cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f000 fdac 	bl	8006818 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	2380      	movs	r3, #128	@ 0x80
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	d00b      	beq.n	8005ce2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2280      	movs	r2, #128	@ 0x80
 8005cce:	4013      	ands	r3, r2
 8005cd0:	d007      	beq.n	8005ce2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a17      	ldr	r2, [pc, #92]	@ (8005d34 <HAL_TIM_IRQHandler+0x20c>)
 8005cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	0018      	movs	r0, r3
 8005cde:	f000 fda3 	bl	8006828 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2240      	movs	r2, #64	@ 0x40
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d00c      	beq.n	8005d04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2240      	movs	r2, #64	@ 0x40
 8005cee:	4013      	ands	r3, r2
 8005cf0:	d008      	beq.n	8005d04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2241      	movs	r2, #65	@ 0x41
 8005cf8:	4252      	negs	r2, r2
 8005cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f000 f932 	bl	8005f68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2220      	movs	r2, #32
 8005d08:	4013      	ands	r3, r2
 8005d0a:	d00c      	beq.n	8005d26 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	4013      	ands	r3, r2
 8005d12:	d008      	beq.n	8005d26 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2221      	movs	r2, #33	@ 0x21
 8005d1a:	4252      	negs	r2, r2
 8005d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	0018      	movs	r0, r3
 8005d22:	f000 fd71 	bl	8006808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d26:	46c0      	nop			@ (mov r8, r8)
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	b004      	add	sp, #16
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	46c0      	nop			@ (mov r8, r8)
 8005d30:	ffffdf7f 	.word	0xffffdf7f
 8005d34:	fffffeff 	.word	0xfffffeff

08005d38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d44:	2317      	movs	r3, #23
 8005d46:	18fb      	adds	r3, r7, r3
 8005d48:	2200      	movs	r2, #0
 8005d4a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	223c      	movs	r2, #60	@ 0x3c
 8005d50:	5c9b      	ldrb	r3, [r3, r2]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <HAL_TIM_PWM_ConfigChannel+0x22>
 8005d56:	2302      	movs	r3, #2
 8005d58:	e0e5      	b.n	8005f26 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	223c      	movs	r2, #60	@ 0x3c
 8005d5e:	2101      	movs	r1, #1
 8005d60:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b14      	cmp	r3, #20
 8005d66:	d900      	bls.n	8005d6a <HAL_TIM_PWM_ConfigChannel+0x32>
 8005d68:	e0d1      	b.n	8005f0e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	009a      	lsls	r2, r3, #2
 8005d6e:	4b70      	ldr	r3, [pc, #448]	@ (8005f30 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005d70:	18d3      	adds	r3, r2, r3
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	0011      	movs	r1, r2
 8005d7e:	0018      	movs	r0, r3
 8005d80:	f000 f97e 	bl	8006080 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699a      	ldr	r2, [r3, #24]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2108      	movs	r1, #8
 8005d90:	430a      	orrs	r2, r1
 8005d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699a      	ldr	r2, [r3, #24]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2104      	movs	r1, #4
 8005da0:	438a      	bics	r2, r1
 8005da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6999      	ldr	r1, [r3, #24]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	691a      	ldr	r2, [r3, #16]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	619a      	str	r2, [r3, #24]
      break;
 8005db6:	e0af      	b.n	8005f18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	0011      	movs	r1, r2
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	f000 f9dd 	bl	8006180 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	699a      	ldr	r2, [r3, #24]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2180      	movs	r1, #128	@ 0x80
 8005dd2:	0109      	lsls	r1, r1, #4
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4954      	ldr	r1, [pc, #336]	@ (8005f34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005de4:	400a      	ands	r2, r1
 8005de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6999      	ldr	r1, [r3, #24]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	021a      	lsls	r2, r3, #8
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	619a      	str	r2, [r3, #24]
      break;
 8005dfc:	e08c      	b.n	8005f18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	0011      	movs	r1, r2
 8005e06:	0018      	movs	r0, r3
 8005e08:	f000 fa38 	bl	800627c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	69da      	ldr	r2, [r3, #28]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2108      	movs	r1, #8
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	69da      	ldr	r2, [r3, #28]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2104      	movs	r1, #4
 8005e28:	438a      	bics	r2, r1
 8005e2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	69d9      	ldr	r1, [r3, #28]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	691a      	ldr	r2, [r3, #16]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	61da      	str	r2, [r3, #28]
      break;
 8005e3e:	e06b      	b.n	8005f18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	0011      	movs	r1, r2
 8005e48:	0018      	movs	r0, r3
 8005e4a:	f000 fa99 	bl	8006380 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69da      	ldr	r2, [r3, #28]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2180      	movs	r1, #128	@ 0x80
 8005e5a:	0109      	lsls	r1, r1, #4
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	69da      	ldr	r2, [r3, #28]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4932      	ldr	r1, [pc, #200]	@ (8005f34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005e6c:	400a      	ands	r2, r1
 8005e6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69d9      	ldr	r1, [r3, #28]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	021a      	lsls	r2, r3, #8
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	61da      	str	r2, [r3, #28]
      break;
 8005e84:	e048      	b.n	8005f18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	0011      	movs	r1, r2
 8005e8e:	0018      	movs	r0, r3
 8005e90:	f000 fada 	bl	8006448 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2108      	movs	r1, #8
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2104      	movs	r1, #4
 8005eb0:	438a      	bics	r2, r1
 8005eb2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	691a      	ldr	r2, [r3, #16]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005ec6:	e027      	b.n	8005f18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	0011      	movs	r1, r2
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	f000 fb13 	bl	80064fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2180      	movs	r1, #128	@ 0x80
 8005ee2:	0109      	lsls	r1, r1, #4
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4910      	ldr	r1, [pc, #64]	@ (8005f34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005ef4:	400a      	ands	r2, r1
 8005ef6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	021a      	lsls	r2, r3, #8
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005f0c:	e004      	b.n	8005f18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005f0e:	2317      	movs	r3, #23
 8005f10:	18fb      	adds	r3, r7, r3
 8005f12:	2201      	movs	r2, #1
 8005f14:	701a      	strb	r2, [r3, #0]
      break;
 8005f16:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	223c      	movs	r2, #60	@ 0x3c
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	5499      	strb	r1, [r3, r2]

  return status;
 8005f20:	2317      	movs	r3, #23
 8005f22:	18fb      	adds	r3, r7, r3
 8005f24:	781b      	ldrb	r3, [r3, #0]
}
 8005f26:	0018      	movs	r0, r3
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	b006      	add	sp, #24
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	46c0      	nop			@ (mov r8, r8)
 8005f30:	08006934 	.word	0x08006934
 8005f34:	fffffbff 	.word	0xfffffbff

08005f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f40:	46c0      	nop			@ (mov r8, r8)
 8005f42:	46bd      	mov	sp, r7
 8005f44:	b002      	add	sp, #8
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f50:	46c0      	nop			@ (mov r8, r8)
 8005f52:	46bd      	mov	sp, r7
 8005f54:	b002      	add	sp, #8
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f60:	46c0      	nop			@ (mov r8, r8)
 8005f62:	46bd      	mov	sp, r7
 8005f64:	b002      	add	sp, #8
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f70:	46c0      	nop			@ (mov r8, r8)
 8005f72:	46bd      	mov	sp, r7
 8005f74:	b002      	add	sp, #8
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a37      	ldr	r2, [pc, #220]	@ (8006068 <TIM_Base_SetConfig+0xf0>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d008      	beq.n	8005fa2 <TIM_Base_SetConfig+0x2a>
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	2380      	movs	r3, #128	@ 0x80
 8005f94:	05db      	lsls	r3, r3, #23
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d003      	beq.n	8005fa2 <TIM_Base_SetConfig+0x2a>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a33      	ldr	r2, [pc, #204]	@ (800606c <TIM_Base_SetConfig+0xf4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d108      	bne.n	8005fb4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2270      	movs	r2, #112	@ 0x70
 8005fa6:	4393      	bics	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a2c      	ldr	r2, [pc, #176]	@ (8006068 <TIM_Base_SetConfig+0xf0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d014      	beq.n	8005fe6 <TIM_Base_SetConfig+0x6e>
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	2380      	movs	r3, #128	@ 0x80
 8005fc0:	05db      	lsls	r3, r3, #23
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d00f      	beq.n	8005fe6 <TIM_Base_SetConfig+0x6e>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a28      	ldr	r2, [pc, #160]	@ (800606c <TIM_Base_SetConfig+0xf4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00b      	beq.n	8005fe6 <TIM_Base_SetConfig+0x6e>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a27      	ldr	r2, [pc, #156]	@ (8006070 <TIM_Base_SetConfig+0xf8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d007      	beq.n	8005fe6 <TIM_Base_SetConfig+0x6e>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a26      	ldr	r2, [pc, #152]	@ (8006074 <TIM_Base_SetConfig+0xfc>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d003      	beq.n	8005fe6 <TIM_Base_SetConfig+0x6e>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a25      	ldr	r2, [pc, #148]	@ (8006078 <TIM_Base_SetConfig+0x100>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d108      	bne.n	8005ff8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4a24      	ldr	r2, [pc, #144]	@ (800607c <TIM_Base_SetConfig+0x104>)
 8005fea:	4013      	ands	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2280      	movs	r2, #128	@ 0x80
 8005ffc:	4393      	bics	r3, r2
 8005ffe:	001a      	movs	r2, r3
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a11      	ldr	r2, [pc, #68]	@ (8006068 <TIM_Base_SetConfig+0xf0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d007      	beq.n	8006036 <TIM_Base_SetConfig+0xbe>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a12      	ldr	r2, [pc, #72]	@ (8006074 <TIM_Base_SetConfig+0xfc>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d003      	beq.n	8006036 <TIM_Base_SetConfig+0xbe>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a11      	ldr	r2, [pc, #68]	@ (8006078 <TIM_Base_SetConfig+0x100>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d103      	bne.n	800603e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	691a      	ldr	r2, [r3, #16]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	2201      	movs	r2, #1
 800604a:	4013      	ands	r3, r2
 800604c:	2b01      	cmp	r3, #1
 800604e:	d106      	bne.n	800605e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	2201      	movs	r2, #1
 8006056:	4393      	bics	r3, r2
 8006058:	001a      	movs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	611a      	str	r2, [r3, #16]
  }
}
 800605e:	46c0      	nop			@ (mov r8, r8)
 8006060:	46bd      	mov	sp, r7
 8006062:	b004      	add	sp, #16
 8006064:	bd80      	pop	{r7, pc}
 8006066:	46c0      	nop			@ (mov r8, r8)
 8006068:	40012c00 	.word	0x40012c00
 800606c:	40000400 	.word	0x40000400
 8006070:	40002000 	.word	0x40002000
 8006074:	40014400 	.word	0x40014400
 8006078:	40014800 	.word	0x40014800
 800607c:	fffffcff 	.word	0xfffffcff

08006080 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	2201      	movs	r2, #1
 8006096:	4393      	bics	r3, r2
 8006098:	001a      	movs	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4a2e      	ldr	r2, [pc, #184]	@ (8006168 <TIM_OC1_SetConfig+0xe8>)
 80060ae:	4013      	ands	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2203      	movs	r2, #3
 80060b6:	4393      	bics	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2202      	movs	r2, #2
 80060c8:	4393      	bics	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a24      	ldr	r2, [pc, #144]	@ (800616c <TIM_OC1_SetConfig+0xec>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d007      	beq.n	80060ee <TIM_OC1_SetConfig+0x6e>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a23      	ldr	r2, [pc, #140]	@ (8006170 <TIM_OC1_SetConfig+0xf0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d003      	beq.n	80060ee <TIM_OC1_SetConfig+0x6e>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a22      	ldr	r2, [pc, #136]	@ (8006174 <TIM_OC1_SetConfig+0xf4>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d10c      	bne.n	8006108 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2208      	movs	r2, #8
 80060f2:	4393      	bics	r3, r2
 80060f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	2204      	movs	r2, #4
 8006104:	4393      	bics	r3, r2
 8006106:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a18      	ldr	r2, [pc, #96]	@ (800616c <TIM_OC1_SetConfig+0xec>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d007      	beq.n	8006120 <TIM_OC1_SetConfig+0xa0>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a17      	ldr	r2, [pc, #92]	@ (8006170 <TIM_OC1_SetConfig+0xf0>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d003      	beq.n	8006120 <TIM_OC1_SetConfig+0xa0>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a16      	ldr	r2, [pc, #88]	@ (8006174 <TIM_OC1_SetConfig+0xf4>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d111      	bne.n	8006144 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	4a15      	ldr	r2, [pc, #84]	@ (8006178 <TIM_OC1_SetConfig+0xf8>)
 8006124:	4013      	ands	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	4a14      	ldr	r2, [pc, #80]	@ (800617c <TIM_OC1_SetConfig+0xfc>)
 800612c:	4013      	ands	r3, r2
 800612e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	4313      	orrs	r3, r2
 8006138:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	621a      	str	r2, [r3, #32]
}
 800615e:	46c0      	nop			@ (mov r8, r8)
 8006160:	46bd      	mov	sp, r7
 8006162:	b006      	add	sp, #24
 8006164:	bd80      	pop	{r7, pc}
 8006166:	46c0      	nop			@ (mov r8, r8)
 8006168:	fffeff8f 	.word	0xfffeff8f
 800616c:	40012c00 	.word	0x40012c00
 8006170:	40014400 	.word	0x40014400
 8006174:	40014800 	.word	0x40014800
 8006178:	fffffeff 	.word	0xfffffeff
 800617c:	fffffdff 	.word	0xfffffdff

08006180 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	2210      	movs	r2, #16
 8006196:	4393      	bics	r3, r2
 8006198:	001a      	movs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4a2c      	ldr	r2, [pc, #176]	@ (8006260 <TIM_OC2_SetConfig+0xe0>)
 80061ae:	4013      	ands	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4a2b      	ldr	r2, [pc, #172]	@ (8006264 <TIM_OC2_SetConfig+0xe4>)
 80061b6:	4013      	ands	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	021b      	lsls	r3, r3, #8
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2220      	movs	r2, #32
 80061ca:	4393      	bics	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	011b      	lsls	r3, r3, #4
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a22      	ldr	r2, [pc, #136]	@ (8006268 <TIM_OC2_SetConfig+0xe8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d10d      	bne.n	80061fe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2280      	movs	r2, #128	@ 0x80
 80061e6:	4393      	bics	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2240      	movs	r2, #64	@ 0x40
 80061fa:	4393      	bics	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a19      	ldr	r2, [pc, #100]	@ (8006268 <TIM_OC2_SetConfig+0xe8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d007      	beq.n	8006216 <TIM_OC2_SetConfig+0x96>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a18      	ldr	r2, [pc, #96]	@ (800626c <TIM_OC2_SetConfig+0xec>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d003      	beq.n	8006216 <TIM_OC2_SetConfig+0x96>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a17      	ldr	r2, [pc, #92]	@ (8006270 <TIM_OC2_SetConfig+0xf0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d113      	bne.n	800623e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	4a16      	ldr	r2, [pc, #88]	@ (8006274 <TIM_OC2_SetConfig+0xf4>)
 800621a:	4013      	ands	r3, r2
 800621c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	4a15      	ldr	r2, [pc, #84]	@ (8006278 <TIM_OC2_SetConfig+0xf8>)
 8006222:	4013      	ands	r3, r2
 8006224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4313      	orrs	r3, r2
 8006230:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	621a      	str	r2, [r3, #32]
}
 8006258:	46c0      	nop			@ (mov r8, r8)
 800625a:	46bd      	mov	sp, r7
 800625c:	b006      	add	sp, #24
 800625e:	bd80      	pop	{r7, pc}
 8006260:	feff8fff 	.word	0xfeff8fff
 8006264:	fffffcff 	.word	0xfffffcff
 8006268:	40012c00 	.word	0x40012c00
 800626c:	40014400 	.word	0x40014400
 8006270:	40014800 	.word	0x40014800
 8006274:	fffffbff 	.word	0xfffffbff
 8006278:	fffff7ff 	.word	0xfffff7ff

0800627c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	4a31      	ldr	r2, [pc, #196]	@ (8006358 <TIM_OC3_SetConfig+0xdc>)
 8006292:	401a      	ands	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4a2d      	ldr	r2, [pc, #180]	@ (800635c <TIM_OC3_SetConfig+0xe0>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2203      	movs	r2, #3
 80062b0:	4393      	bics	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	4a27      	ldr	r2, [pc, #156]	@ (8006360 <TIM_OC3_SetConfig+0xe4>)
 80062c2:	4013      	ands	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	021b      	lsls	r3, r3, #8
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a23      	ldr	r2, [pc, #140]	@ (8006364 <TIM_OC3_SetConfig+0xe8>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d10d      	bne.n	80062f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	4a22      	ldr	r2, [pc, #136]	@ (8006368 <TIM_OC3_SetConfig+0xec>)
 80062de:	4013      	ands	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	021b      	lsls	r3, r3, #8
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	4a1e      	ldr	r2, [pc, #120]	@ (800636c <TIM_OC3_SetConfig+0xf0>)
 80062f2:	4013      	ands	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a1a      	ldr	r2, [pc, #104]	@ (8006364 <TIM_OC3_SetConfig+0xe8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d007      	beq.n	800630e <TIM_OC3_SetConfig+0x92>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a1b      	ldr	r2, [pc, #108]	@ (8006370 <TIM_OC3_SetConfig+0xf4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d003      	beq.n	800630e <TIM_OC3_SetConfig+0x92>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a1a      	ldr	r2, [pc, #104]	@ (8006374 <TIM_OC3_SetConfig+0xf8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d113      	bne.n	8006336 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	4a19      	ldr	r2, [pc, #100]	@ (8006378 <TIM_OC3_SetConfig+0xfc>)
 8006312:	4013      	ands	r3, r2
 8006314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	4a18      	ldr	r2, [pc, #96]	@ (800637c <TIM_OC3_SetConfig+0x100>)
 800631a:	4013      	ands	r3, r2
 800631c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	4313      	orrs	r3, r2
 8006328:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	4313      	orrs	r3, r2
 8006334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	621a      	str	r2, [r3, #32]
}
 8006350:	46c0      	nop			@ (mov r8, r8)
 8006352:	46bd      	mov	sp, r7
 8006354:	b006      	add	sp, #24
 8006356:	bd80      	pop	{r7, pc}
 8006358:	fffffeff 	.word	0xfffffeff
 800635c:	fffeff8f 	.word	0xfffeff8f
 8006360:	fffffdff 	.word	0xfffffdff
 8006364:	40012c00 	.word	0x40012c00
 8006368:	fffff7ff 	.word	0xfffff7ff
 800636c:	fffffbff 	.word	0xfffffbff
 8006370:	40014400 	.word	0x40014400
 8006374:	40014800 	.word	0x40014800
 8006378:	ffffefff 	.word	0xffffefff
 800637c:	ffffdfff 	.word	0xffffdfff

08006380 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	4a24      	ldr	r2, [pc, #144]	@ (8006428 <TIM_OC4_SetConfig+0xa8>)
 8006396:	401a      	ands	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4a20      	ldr	r2, [pc, #128]	@ (800642c <TIM_OC4_SetConfig+0xac>)
 80063ac:	4013      	ands	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006430 <TIM_OC4_SetConfig+0xb0>)
 80063b4:	4013      	ands	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006434 <TIM_OC4_SetConfig+0xb4>)
 80063c8:	4013      	ands	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	031b      	lsls	r3, r3, #12
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a17      	ldr	r2, [pc, #92]	@ (8006438 <TIM_OC4_SetConfig+0xb8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d007      	beq.n	80063f0 <TIM_OC4_SetConfig+0x70>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a16      	ldr	r2, [pc, #88]	@ (800643c <TIM_OC4_SetConfig+0xbc>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d003      	beq.n	80063f0 <TIM_OC4_SetConfig+0x70>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a15      	ldr	r2, [pc, #84]	@ (8006440 <TIM_OC4_SetConfig+0xc0>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d109      	bne.n	8006404 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	4a14      	ldr	r2, [pc, #80]	@ (8006444 <TIM_OC4_SetConfig+0xc4>)
 80063f4:	4013      	ands	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	019b      	lsls	r3, r3, #6
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	621a      	str	r2, [r3, #32]
}
 800641e:	46c0      	nop			@ (mov r8, r8)
 8006420:	46bd      	mov	sp, r7
 8006422:	b006      	add	sp, #24
 8006424:	bd80      	pop	{r7, pc}
 8006426:	46c0      	nop			@ (mov r8, r8)
 8006428:	ffffefff 	.word	0xffffefff
 800642c:	feff8fff 	.word	0xfeff8fff
 8006430:	fffffcff 	.word	0xfffffcff
 8006434:	ffffdfff 	.word	0xffffdfff
 8006438:	40012c00 	.word	0x40012c00
 800643c:	40014400 	.word	0x40014400
 8006440:	40014800 	.word	0x40014800
 8006444:	ffffbfff 	.word	0xffffbfff

08006448 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	4a21      	ldr	r2, [pc, #132]	@ (80064e4 <TIM_OC5_SetConfig+0x9c>)
 800645e:	401a      	ands	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800646e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4a1d      	ldr	r2, [pc, #116]	@ (80064e8 <TIM_OC5_SetConfig+0xa0>)
 8006474:	4013      	ands	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	4a19      	ldr	r2, [pc, #100]	@ (80064ec <TIM_OC5_SetConfig+0xa4>)
 8006486:	4013      	ands	r3, r2
 8006488:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	041b      	lsls	r3, r3, #16
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	4313      	orrs	r3, r2
 8006494:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a15      	ldr	r2, [pc, #84]	@ (80064f0 <TIM_OC5_SetConfig+0xa8>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d007      	beq.n	80064ae <TIM_OC5_SetConfig+0x66>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a14      	ldr	r2, [pc, #80]	@ (80064f4 <TIM_OC5_SetConfig+0xac>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d003      	beq.n	80064ae <TIM_OC5_SetConfig+0x66>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a13      	ldr	r2, [pc, #76]	@ (80064f8 <TIM_OC5_SetConfig+0xb0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d109      	bne.n	80064c2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	4a0c      	ldr	r2, [pc, #48]	@ (80064e4 <TIM_OC5_SetConfig+0x9c>)
 80064b2:	4013      	ands	r3, r2
 80064b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	621a      	str	r2, [r3, #32]
}
 80064dc:	46c0      	nop			@ (mov r8, r8)
 80064de:	46bd      	mov	sp, r7
 80064e0:	b006      	add	sp, #24
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	fffeffff 	.word	0xfffeffff
 80064e8:	fffeff8f 	.word	0xfffeff8f
 80064ec:	fffdffff 	.word	0xfffdffff
 80064f0:	40012c00 	.word	0x40012c00
 80064f4:	40014400 	.word	0x40014400
 80064f8:	40014800 	.word	0x40014800

080064fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	4a22      	ldr	r2, [pc, #136]	@ (800659c <TIM_OC6_SetConfig+0xa0>)
 8006512:	401a      	ands	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4a1e      	ldr	r2, [pc, #120]	@ (80065a0 <TIM_OC6_SetConfig+0xa4>)
 8006528:	4013      	ands	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	021b      	lsls	r3, r3, #8
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4313      	orrs	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	4a1a      	ldr	r2, [pc, #104]	@ (80065a4 <TIM_OC6_SetConfig+0xa8>)
 800653c:	4013      	ands	r3, r2
 800653e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	051b      	lsls	r3, r3, #20
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a16      	ldr	r2, [pc, #88]	@ (80065a8 <TIM_OC6_SetConfig+0xac>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d007      	beq.n	8006564 <TIM_OC6_SetConfig+0x68>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a15      	ldr	r2, [pc, #84]	@ (80065ac <TIM_OC6_SetConfig+0xb0>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d003      	beq.n	8006564 <TIM_OC6_SetConfig+0x68>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a14      	ldr	r2, [pc, #80]	@ (80065b0 <TIM_OC6_SetConfig+0xb4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d109      	bne.n	8006578 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	4a13      	ldr	r2, [pc, #76]	@ (80065b4 <TIM_OC6_SetConfig+0xb8>)
 8006568:	4013      	ands	r3, r2
 800656a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	029b      	lsls	r3, r3, #10
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	4313      	orrs	r3, r2
 8006576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	621a      	str	r2, [r3, #32]
}
 8006592:	46c0      	nop			@ (mov r8, r8)
 8006594:	46bd      	mov	sp, r7
 8006596:	b006      	add	sp, #24
 8006598:	bd80      	pop	{r7, pc}
 800659a:	46c0      	nop			@ (mov r8, r8)
 800659c:	ffefffff 	.word	0xffefffff
 80065a0:	feff8fff 	.word	0xfeff8fff
 80065a4:	ffdfffff 	.word	0xffdfffff
 80065a8:	40012c00 	.word	0x40012c00
 80065ac:	40014400 	.word	0x40014400
 80065b0:	40014800 	.word	0x40014800
 80065b4:	fffbffff 	.word	0xfffbffff

080065b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	221f      	movs	r2, #31
 80065c8:	4013      	ands	r3, r2
 80065ca:	2201      	movs	r2, #1
 80065cc:	409a      	lsls	r2, r3
 80065ce:	0013      	movs	r3, r2
 80065d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	43d2      	mvns	r2, r2
 80065da:	401a      	ands	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6a1a      	ldr	r2, [r3, #32]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	211f      	movs	r1, #31
 80065e8:	400b      	ands	r3, r1
 80065ea:	6879      	ldr	r1, [r7, #4]
 80065ec:	4099      	lsls	r1, r3
 80065ee:	000b      	movs	r3, r1
 80065f0:	431a      	orrs	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	621a      	str	r2, [r3, #32]
}
 80065f6:	46c0      	nop			@ (mov r8, r8)
 80065f8:	46bd      	mov	sp, r7
 80065fa:	b006      	add	sp, #24
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	223c      	movs	r2, #60	@ 0x3c
 800660e:	5c9b      	ldrb	r3, [r3, r2]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d101      	bne.n	8006618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006614:	2302      	movs	r3, #2
 8006616:	e050      	b.n	80066ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	223c      	movs	r2, #60	@ 0x3c
 800661c:	2101      	movs	r1, #1
 800661e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	223d      	movs	r2, #61	@ 0x3d
 8006624:	2102      	movs	r1, #2
 8006626:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a21      	ldr	r2, [pc, #132]	@ (80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d108      	bne.n	8006654 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4a20      	ldr	r2, [pc, #128]	@ (80066c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006646:	4013      	ands	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4313      	orrs	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2270      	movs	r2, #112	@ 0x70
 8006658:	4393      	bics	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a14      	ldr	r2, [pc, #80]	@ (80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00a      	beq.n	800668e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	2380      	movs	r3, #128	@ 0x80
 800667e:	05db      	lsls	r3, r3, #23
 8006680:	429a      	cmp	r2, r3
 8006682:	d004      	beq.n	800668e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a10      	ldr	r2, [pc, #64]	@ (80066cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d10c      	bne.n	80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2280      	movs	r2, #128	@ 0x80
 8006692:	4393      	bics	r3, r2
 8006694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	4313      	orrs	r3, r2
 800669e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	223d      	movs	r2, #61	@ 0x3d
 80066ac:	2101      	movs	r1, #1
 80066ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	223c      	movs	r2, #60	@ 0x3c
 80066b4:	2100      	movs	r1, #0
 80066b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	0018      	movs	r0, r3
 80066bc:	46bd      	mov	sp, r7
 80066be:	b004      	add	sp, #16
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	46c0      	nop			@ (mov r8, r8)
 80066c4:	40012c00 	.word	0x40012c00
 80066c8:	ff0fffff 	.word	0xff0fffff
 80066cc:	40000400 	.word	0x40000400

080066d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066da:	2300      	movs	r3, #0
 80066dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	223c      	movs	r2, #60	@ 0x3c
 80066e2:	5c9b      	ldrb	r3, [r3, r2]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d101      	bne.n	80066ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80066e8:	2302      	movs	r3, #2
 80066ea:	e06f      	b.n	80067cc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	223c      	movs	r2, #60	@ 0x3c
 80066f0:	2101      	movs	r1, #1
 80066f2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	22ff      	movs	r2, #255	@ 0xff
 80066f8:	4393      	bics	r3, r2
 80066fa:	001a      	movs	r2, r3
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	4313      	orrs	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4a33      	ldr	r2, [pc, #204]	@ (80067d4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8006708:	401a      	ands	r2, r3
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	4313      	orrs	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4a30      	ldr	r2, [pc, #192]	@ (80067d8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8006716:	401a      	ands	r2, r3
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	4313      	orrs	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4a2e      	ldr	r2, [pc, #184]	@ (80067dc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8006724:	401a      	ands	r2, r3
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4313      	orrs	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4a2b      	ldr	r2, [pc, #172]	@ (80067e0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006732:	401a      	ands	r2, r3
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4a29      	ldr	r2, [pc, #164]	@ (80067e4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006740:	401a      	ands	r2, r3
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4a26      	ldr	r2, [pc, #152]	@ (80067e8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800674e:	401a      	ands	r2, r3
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4a24      	ldr	r2, [pc, #144]	@ (80067ec <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800675c:	401a      	ands	r2, r3
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	041b      	lsls	r3, r3, #16
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4a21      	ldr	r2, [pc, #132]	@ (80067f0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800676c:	401a      	ands	r2, r3
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a1e      	ldr	r2, [pc, #120]	@ (80067f4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d11c      	bne.n	80067ba <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4a1d      	ldr	r2, [pc, #116]	@ (80067f8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006784:	401a      	ands	r2, r3
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678a:	051b      	lsls	r3, r3, #20
 800678c:	4313      	orrs	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4a1a      	ldr	r2, [pc, #104]	@ (80067fc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006794:	401a      	ands	r2, r3
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4a17      	ldr	r2, [pc, #92]	@ (8006800 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80067a2:	401a      	ands	r2, r3
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4a15      	ldr	r2, [pc, #84]	@ (8006804 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80067b0:	401a      	ands	r2, r3
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	223c      	movs	r2, #60	@ 0x3c
 80067c6:	2100      	movs	r1, #0
 80067c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	0018      	movs	r0, r3
 80067ce:	46bd      	mov	sp, r7
 80067d0:	b004      	add	sp, #16
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	fffffcff 	.word	0xfffffcff
 80067d8:	fffffbff 	.word	0xfffffbff
 80067dc:	fffff7ff 	.word	0xfffff7ff
 80067e0:	ffffefff 	.word	0xffffefff
 80067e4:	ffffdfff 	.word	0xffffdfff
 80067e8:	ffffbfff 	.word	0xffffbfff
 80067ec:	fff0ffff 	.word	0xfff0ffff
 80067f0:	efffffff 	.word	0xefffffff
 80067f4:	40012c00 	.word	0x40012c00
 80067f8:	ff0fffff 	.word	0xff0fffff
 80067fc:	feffffff 	.word	0xfeffffff
 8006800:	fdffffff 	.word	0xfdffffff
 8006804:	dfffffff 	.word	0xdfffffff

08006808 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006810:	46c0      	nop			@ (mov r8, r8)
 8006812:	46bd      	mov	sp, r7
 8006814:	b002      	add	sp, #8
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006820:	46c0      	nop			@ (mov r8, r8)
 8006822:	46bd      	mov	sp, r7
 8006824:	b002      	add	sp, #8
 8006826:	bd80      	pop	{r7, pc}

08006828 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006830:	46c0      	nop			@ (mov r8, r8)
 8006832:	46bd      	mov	sp, r7
 8006834:	b002      	add	sp, #8
 8006836:	bd80      	pop	{r7, pc}

08006838 <memset>:
 8006838:	0003      	movs	r3, r0
 800683a:	1882      	adds	r2, r0, r2
 800683c:	4293      	cmp	r3, r2
 800683e:	d100      	bne.n	8006842 <memset+0xa>
 8006840:	4770      	bx	lr
 8006842:	7019      	strb	r1, [r3, #0]
 8006844:	3301      	adds	r3, #1
 8006846:	e7f9      	b.n	800683c <memset+0x4>

08006848 <__libc_init_array>:
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	2600      	movs	r6, #0
 800684c:	4c0c      	ldr	r4, [pc, #48]	@ (8006880 <__libc_init_array+0x38>)
 800684e:	4d0d      	ldr	r5, [pc, #52]	@ (8006884 <__libc_init_array+0x3c>)
 8006850:	1b64      	subs	r4, r4, r5
 8006852:	10a4      	asrs	r4, r4, #2
 8006854:	42a6      	cmp	r6, r4
 8006856:	d109      	bne.n	800686c <__libc_init_array+0x24>
 8006858:	2600      	movs	r6, #0
 800685a:	f000 f823 	bl	80068a4 <_init>
 800685e:	4c0a      	ldr	r4, [pc, #40]	@ (8006888 <__libc_init_array+0x40>)
 8006860:	4d0a      	ldr	r5, [pc, #40]	@ (800688c <__libc_init_array+0x44>)
 8006862:	1b64      	subs	r4, r4, r5
 8006864:	10a4      	asrs	r4, r4, #2
 8006866:	42a6      	cmp	r6, r4
 8006868:	d105      	bne.n	8006876 <__libc_init_array+0x2e>
 800686a:	bd70      	pop	{r4, r5, r6, pc}
 800686c:	00b3      	lsls	r3, r6, #2
 800686e:	58eb      	ldr	r3, [r5, r3]
 8006870:	4798      	blx	r3
 8006872:	3601      	adds	r6, #1
 8006874:	e7ee      	b.n	8006854 <__libc_init_array+0xc>
 8006876:	00b3      	lsls	r3, r6, #2
 8006878:	58eb      	ldr	r3, [r5, r3]
 800687a:	4798      	blx	r3
 800687c:	3601      	adds	r6, #1
 800687e:	e7f2      	b.n	8006866 <__libc_init_array+0x1e>
 8006880:	08006988 	.word	0x08006988
 8006884:	08006988 	.word	0x08006988
 8006888:	0800698c 	.word	0x0800698c
 800688c:	08006988 	.word	0x08006988

08006890 <memcpy>:
 8006890:	2300      	movs	r3, #0
 8006892:	b510      	push	{r4, lr}
 8006894:	429a      	cmp	r2, r3
 8006896:	d100      	bne.n	800689a <memcpy+0xa>
 8006898:	bd10      	pop	{r4, pc}
 800689a:	5ccc      	ldrb	r4, [r1, r3]
 800689c:	54c4      	strb	r4, [r0, r3]
 800689e:	3301      	adds	r3, #1
 80068a0:	e7f8      	b.n	8006894 <memcpy+0x4>
	...

080068a4 <_init>:
 80068a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a6:	46c0      	nop			@ (mov r8, r8)
 80068a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068aa:	bc08      	pop	{r3}
 80068ac:	469e      	mov	lr, r3
 80068ae:	4770      	bx	lr

080068b0 <_fini>:
 80068b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b2:	46c0      	nop			@ (mov r8, r8)
 80068b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068b6:	bc08      	pop	{r3}
 80068b8:	469e      	mov	lr, r3
 80068ba:	4770      	bx	lr
