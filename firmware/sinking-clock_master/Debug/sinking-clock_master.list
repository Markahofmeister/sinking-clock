
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006408  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080064c4  080064c4  000074c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a0  080065a0  00008058  2**0
                  CONTENTS
  4 .ARM          00000000  080065a0  080065a0  00008058  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065a0  080065a0  00008058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065a0  080065a0  000075a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065a4  080065a4  000075a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  080065a8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000058  08006600  00008058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08006600  00008248  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014175  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ddd  00000000  00000000  0001c1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0001efd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa3  00000000  00000000  000203f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001950f  00000000  00000000  00021393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184d9  00000000  00000000  0003a8a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a20b9  00000000  00000000  00052d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4e34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004924  00000000  00000000  000f4e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000f979c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000058 	.word	0x20000058
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080064ac 	.word	0x080064ac

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000005c 	.word	0x2000005c
 8000100:	080064ac 	.word	0x080064ac

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	b089      	sub	sp, #36	@ 0x24
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231f      	movs	r3, #31
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	2108      	movs	r1, #8
 800024a:	185b      	adds	r3, r3, r1
 800024c:	19db      	adds	r3, r3, r7
 800024e:	881b      	ldrh	r3, [r3, #0]
 8000250:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-high hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	6818      	ldr	r0, [r3, #0]
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	899b      	ldrh	r3, [r3, #12]
 800025c:	2201      	movs	r2, #1
 800025e:	0019      	movs	r1, r3
 8000260:	f002 ff23 	bl	80030aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	689b      	ldr	r3, [r3, #8]
 8000268:	6818      	ldr	r0, [r3, #0]
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	899b      	ldrh	r3, [r3, #12]
 800026e:	2200      	movs	r2, #0
 8000270:	0019      	movs	r1, r3
 8000272:	f002 ff1a 	bl	80030aa <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	0018      	movs	r0, r3
 800027c:	f005 fae2 	bl	8005844 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	0018      	movs	r0, r3
 8000286:	f005 fa91 	bl	80057ac <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000292:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000294:	46c0      	nop			@ (mov r8, r8)
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029e:	69bb      	ldr	r3, [r7, #24]
 80002a0:	1ad2      	subs	r2, r2, r3
 80002a2:	2380      	movs	r3, #128	@ 0x80
 80002a4:	021b      	lsls	r3, r3, #8
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d3f5      	bcc.n	8000296 <capTouch_Init+0x7a>

	// Verify device ID
	uint8_t deviceIDRet = 0x00;
 80002aa:	2517      	movs	r5, #23
 80002ac:	197b      	adds	r3, r7, r5
 80002ae:	2200      	movs	r2, #0
 80002b0:	701a      	strb	r2, [r3, #0]
	halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b2:	261f      	movs	r6, #31
 80002b4:	19bc      	adds	r4, r7, r6
 80002b6:	197a      	adds	r2, r7, r5
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	0011      	movs	r1, r2
 80002bc:	0018      	movs	r0, r3
 80002be:	f000 f855 	bl	800036c <capTouch_ReadDeviceID>
 80002c2:	0003      	movs	r3, r0
 80002c4:	7023      	strb	r3, [r4, #0]

	if(deviceIDRet != DEVICE_ID || halRet != HAL_OK) {
 80002c6:	197b      	adds	r3, r7, r5
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80002cc:	d103      	bne.n	80002d6 <capTouch_Init+0xba>
 80002ce:	19bb      	adds	r3, r7, r6
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <capTouch_Init+0xbe>
		return 1;
 80002d6:	2301      	movs	r3, #1
 80002d8:	e043      	b.n	8000362 <capTouch_Init+0x146>
	}

	capTouch->deviceID = deviceIDRet;
 80002da:	2317      	movs	r3, #23
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	781a      	ldrb	r2, [r3, #0]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	739a      	strb	r2, [r3, #14]

	// Force Device Recalibration
	halRet = capTouch_Recalibrate(capTouch);
 80002e4:	251f      	movs	r5, #31
 80002e6:	197c      	adds	r4, r7, r5
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 f880 	bl	80003f0 <capTouch_Recalibrate>
 80002f0:	0003      	movs	r3, r0
 80002f2:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 80002f4:	197b      	adds	r3, r7, r5
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <capTouch_Init+0xe4>
		return 2;
 80002fc:	2302      	movs	r3, #2
 80002fe:	e030      	b.n	8000362 <capTouch_Init+0x146>
	}

	// Wait until calibration sequence completes
	while(capTouch_checkCal(capTouch)) {}
 8000300:	46c0      	nop			@ (mov r8, r8)
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	0018      	movs	r0, r3
 8000306:	f000 f895 	bl	8000434 <capTouch_checkCal>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d1f9      	bne.n	8000302 <capTouch_Init+0xe6>

	// Get initial reading of channels
	halRet = capTouch_readChannels(capTouch);
 800030e:	251f      	movs	r5, #31
 8000310:	197c      	adds	r4, r7, r5
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	0018      	movs	r0, r3
 8000316:	f000 f8d1 	bl	80004bc <capTouch_readChannels>
 800031a:	0003      	movs	r3, r0
 800031c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 800031e:	197b      	adds	r3, r7, r5
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <capTouch_Init+0x10e>
		return 3;
 8000326:	2303      	movs	r3, #3
 8000328:	e01b      	b.n	8000362 <capTouch_Init+0x146>
	}

	halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 800032a:	251f      	movs	r5, #31
 800032c:	197c      	adds	r4, r7, r5
 800032e:	2334      	movs	r3, #52	@ 0x34
 8000330:	2208      	movs	r2, #8
 8000332:	189b      	adds	r3, r3, r2
 8000334:	19db      	adds	r3, r3, r7
 8000336:	781a      	ldrb	r2, [r3, #0]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	0011      	movs	r1, r2
 800033c:	0018      	movs	r0, r3
 800033e:	f000 f901 	bl	8000544 <capTouch_enableKeys>
 8000342:	0003      	movs	r3, r0
 8000344:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000346:	197b      	adds	r3, r7, r5
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <capTouch_Init+0x136>
		return 4;
 800034e:	2304      	movs	r3, #4
 8000350:	e007      	b.n	8000362 <capTouch_Init+0x146>
	}
	capTouch->keys = keyEnFlags;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	2234      	movs	r2, #52	@ 0x34
 8000356:	2108      	movs	r1, #8
 8000358:	1852      	adds	r2, r2, r1
 800035a:	19d2      	adds	r2, r2, r7
 800035c:	7812      	ldrb	r2, [r2, #0]
 800035e:	73da      	strb	r2, [r3, #15]

	return 0;
 8000360:	2300      	movs	r3, #0

}
 8000362:	0018      	movs	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	b009      	add	sp, #36	@ 0x24
 8000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800036c <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 800036c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036e:	b087      	sub	sp, #28
 8000370:	af02      	add	r7, sp, #8
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 8000376:	230e      	movs	r3, #14
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800037e:	250f      	movs	r5, #15
 8000380:	197b      	adds	r3, r7, r5
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 8000386:	210c      	movs	r1, #12
 8000388:	187b      	adds	r3, r7, r1
 800038a:	4a18      	ldr	r2, [pc, #96]	@ (80003ec <capTouch_ReadDeviceID+0x80>)
 800038c:	7812      	ldrb	r2, [r2, #0]
 800038e:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	6818      	ldr	r0, [r3, #0]
 8000394:	197c      	adds	r4, r7, r5
 8000396:	187a      	adds	r2, r7, r1
 8000398:	2301      	movs	r3, #1
 800039a:	425b      	negs	r3, r3
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	2301      	movs	r3, #1
 80003a0:	2136      	movs	r1, #54	@ 0x36
 80003a2:	f002 ff95 	bl	80032d0 <HAL_I2C_Master_Transmit>
 80003a6:	0003      	movs	r3, r0
 80003a8:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80003aa:	197b      	adds	r3, r7, r5
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d002      	beq.n	80003b8 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 80003b2:	197b      	adds	r3, r7, r5
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	e014      	b.n	80003e2 <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6818      	ldr	r0, [r3, #0]
 80003bc:	250f      	movs	r5, #15
 80003be:	197c      	adds	r4, r7, r5
 80003c0:	260e      	movs	r6, #14
 80003c2:	19ba      	adds	r2, r7, r6
 80003c4:	2301      	movs	r3, #1
 80003c6:	425b      	negs	r3, r3
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	2301      	movs	r3, #1
 80003cc:	2136      	movs	r1, #54	@ 0x36
 80003ce:	f003 f8a9 	bl	8003524 <HAL_I2C_Master_Receive>
 80003d2:	0003      	movs	r3, r0
 80003d4:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 80003d6:	19bb      	adds	r3, r7, r6
 80003d8:	781a      	ldrb	r2, [r3, #0]
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	701a      	strb	r2, [r3, #0]

	return halRet;
 80003de:	197b      	adds	r3, r7, r5
 80003e0:	781b      	ldrb	r3, [r3, #0]

}
 80003e2:	0018      	movs	r0, r3
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b005      	add	sp, #20
 80003e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ea:	46c0      	nop			@ (mov r8, r8)
 80003ec:	080064c4 	.word	0x080064c4

080003f0 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80003f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f2:	b087      	sub	sp, #28
 80003f4:	af02      	add	r7, sp, #8
 80003f6:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80003f8:	210f      	movs	r1, #15
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2200      	movs	r2, #0
 80003fe:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 8000400:	260c      	movs	r6, #12
 8000402:	19bb      	adds	r3, r7, r6
 8000404:	22c8      	movs	r2, #200	@ 0xc8
 8000406:	4252      	negs	r2, r2
 8000408:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	6818      	ldr	r0, [r3, #0]
 800040e:	000d      	movs	r5, r1
 8000410:	187c      	adds	r4, r7, r1
 8000412:	19ba      	adds	r2, r7, r6
 8000414:	2301      	movs	r3, #1
 8000416:	425b      	negs	r3, r3
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2302      	movs	r3, #2
 800041c:	2136      	movs	r1, #54	@ 0x36
 800041e:	f002 ff57 	bl	80032d0 <HAL_I2C_Master_Transmit>
 8000422:	0003      	movs	r3, r0
 8000424:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 8000426:	197b      	adds	r3, r7, r5
 8000428:	781b      	ldrb	r3, [r3, #0]

}
 800042a:	0018      	movs	r0, r3
 800042c:	46bd      	mov	sp, r7
 800042e:	b005      	add	sp, #20
 8000430:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000434 <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	b087      	sub	sp, #28
 8000438:	af02      	add	r7, sp, #8
 800043a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800043c:	210f      	movs	r1, #15
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 8000444:	230d      	movs	r3, #13
 8000446:	18fb      	adds	r3, r7, r3
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 800044c:	260c      	movs	r6, #12
 800044e:	19bb      	adds	r3, r7, r6
 8000450:	4a19      	ldr	r2, [pc, #100]	@ (80004b8 <capTouch_checkCal+0x84>)
 8000452:	7812      	ldrb	r2, [r2, #0]
 8000454:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	000d      	movs	r5, r1
 800045c:	187c      	adds	r4, r7, r1
 800045e:	19ba      	adds	r2, r7, r6
 8000460:	2301      	movs	r3, #1
 8000462:	425b      	negs	r3, r3
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	2301      	movs	r3, #1
 8000468:	2136      	movs	r1, #54	@ 0x36
 800046a:	f002 ff31 	bl	80032d0 <HAL_I2C_Master_Transmit>
 800046e:	0003      	movs	r3, r0
 8000470:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000472:	197b      	adds	r3, r7, r5
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d002      	beq.n	8000480 <capTouch_checkCal+0x4c>
		return halRet;
 800047a:	197b      	adds	r3, r7, r5
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	e016      	b.n	80004ae <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6818      	ldr	r0, [r3, #0]
 8000484:	230f      	movs	r3, #15
 8000486:	18fc      	adds	r4, r7, r3
 8000488:	250d      	movs	r5, #13
 800048a:	197a      	adds	r2, r7, r5
 800048c:	2301      	movs	r3, #1
 800048e:	425b      	negs	r3, r3
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	2301      	movs	r3, #1
 8000494:	2136      	movs	r1, #54	@ 0x36
 8000496:	f003 f845 	bl	8003524 <HAL_I2C_Master_Receive>
 800049a:	0003      	movs	r3, r0
 800049c:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 800049e:	197b      	adds	r3, r7, r5
 80004a0:	781a      	ldrb	r2, [r3, #0]
 80004a2:	210e      	movs	r1, #14
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	09d2      	lsrs	r2, r2, #7
 80004a8:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	781b      	ldrb	r3, [r3, #0]

}
 80004ae:	0018      	movs	r0, r3
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b005      	add	sp, #20
 80004b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	080064c8 	.word	0x080064c8

080004bc <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	b087      	sub	sp, #28
 80004c0:	af02      	add	r7, sp, #8
 80004c2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004c4:	210f      	movs	r1, #15
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 80004cc:	230e      	movs	r3, #14
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	2200      	movs	r2, #0
 80004d2:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 80004d4:	260c      	movs	r6, #12
 80004d6:	19bb      	adds	r3, r7, r6
 80004d8:	4a19      	ldr	r2, [pc, #100]	@ (8000540 <capTouch_readChannels+0x84>)
 80004da:	7812      	ldrb	r2, [r2, #0]
 80004dc:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6818      	ldr	r0, [r3, #0]
 80004e2:	000d      	movs	r5, r1
 80004e4:	187c      	adds	r4, r7, r1
 80004e6:	19ba      	adds	r2, r7, r6
 80004e8:	2301      	movs	r3, #1
 80004ea:	425b      	negs	r3, r3
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	2136      	movs	r1, #54	@ 0x36
 80004f2:	f002 feed 	bl	80032d0 <HAL_I2C_Master_Transmit>
 80004f6:	0003      	movs	r3, r0
 80004f8:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80004fa:	197b      	adds	r3, r7, r5
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d002      	beq.n	8000508 <capTouch_readChannels+0x4c>
		return halRet;
 8000502:	197b      	adds	r3, r7, r5
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	e017      	b.n	8000538 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6818      	ldr	r0, [r3, #0]
 800050c:	250f      	movs	r5, #15
 800050e:	197c      	adds	r4, r7, r5
 8000510:	260e      	movs	r6, #14
 8000512:	19ba      	adds	r2, r7, r6
 8000514:	2301      	movs	r3, #1
 8000516:	425b      	negs	r3, r3
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	2136      	movs	r1, #54	@ 0x36
 800051e:	f003 f801 	bl	8003524 <HAL_I2C_Master_Receive>
 8000522:	0003      	movs	r3, r0
 8000524:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 8000526:	19bb      	adds	r3, r7, r6
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	227f      	movs	r2, #127	@ 0x7f
 800052c:	4013      	ands	r3, r2
 800052e:	b2da      	uxtb	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	741a      	strb	r2, [r3, #16]

	return halRet;
 8000534:	197b      	adds	r3, r7, r5
 8000536:	781b      	ldrb	r3, [r3, #0]

}
 8000538:	0018      	movs	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	b005      	add	sp, #20
 800053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000540:	080064cc 	.word	0x080064cc

08000544 <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	b08b      	sub	sp, #44	@ 0x2c
 8000548:	af02      	add	r7, sp, #8
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	000a      	movs	r2, r1
 800054e:	1cfb      	adds	r3, r7, #3
 8000550:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000552:	241e      	movs	r4, #30
 8000554:	193b      	adds	r3, r7, r4
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800055a:	2314      	movs	r3, #20
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	4a48      	ldr	r2, [pc, #288]	@ (8000680 <capTouch_enableKeys+0x13c>)
 8000560:	6811      	ldr	r1, [r2, #0]
 8000562:	6019      	str	r1, [r3, #0]
 8000564:	8891      	ldrh	r1, [r2, #4]
 8000566:	8099      	strh	r1, [r3, #4]
 8000568:	7992      	ldrb	r2, [r2, #6]
 800056a:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 800056c:	260c      	movs	r6, #12
 800056e:	19bb      	adds	r3, r7, r6
 8000570:	4a44      	ldr	r2, [pc, #272]	@ (8000684 <capTouch_enableKeys+0x140>)
 8000572:	6811      	ldr	r1, [r2, #0]
 8000574:	6019      	str	r1, [r3, #0]
 8000576:	8891      	ldrh	r1, [r2, #4]
 8000578:	8099      	strh	r1, [r3, #4]
 800057a:	7992      	ldrb	r2, [r2, #6]
 800057c:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6818      	ldr	r0, [r3, #0]
 8000582:	0025      	movs	r5, r4
 8000584:	193c      	adds	r4, r7, r4
 8000586:	19ba      	adds	r2, r7, r6
 8000588:	2301      	movs	r3, #1
 800058a:	425b      	negs	r3, r3
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	2136      	movs	r1, #54	@ 0x36
 8000592:	f002 fe9d 	bl	80032d0 <HAL_I2C_Master_Transmit>
 8000596:	0003      	movs	r3, r0
 8000598:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800059a:	197b      	adds	r3, r7, r5
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d002      	beq.n	80005a8 <capTouch_enableKeys+0x64>
		return halRet;
 80005a2:	197b      	adds	r3, r7, r5
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	e067      	b.n	8000678 <capTouch_enableKeys+0x134>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6818      	ldr	r0, [r3, #0]
 80005ac:	251e      	movs	r5, #30
 80005ae:	197c      	adds	r4, r7, r5
 80005b0:	2314      	movs	r3, #20
 80005b2:	18fa      	adds	r2, r7, r3
 80005b4:	2301      	movs	r3, #1
 80005b6:	425b      	negs	r3, r3
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2307      	movs	r3, #7
 80005bc:	2136      	movs	r1, #54	@ 0x36
 80005be:	f002 ffb1 	bl	8003524 <HAL_I2C_Master_Receive>
 80005c2:	0003      	movs	r3, r0
 80005c4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80005c6:	197b      	adds	r3, r7, r5
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <capTouch_enableKeys+0x90>
		return halRet;
 80005ce:	197b      	adds	r3, r7, r5
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	e051      	b.n	8000678 <capTouch_enableKeys+0x134>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80005d4:	231f      	movs	r3, #31
 80005d6:	18fb      	adds	r3, r7, r3
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e03a      	b.n	8000654 <capTouch_enableKeys+0x110>

		// If the averaging factor is to be enabled but was previously disabled,
		// set it back to the default value of 8.
		if ( ((avgRet[i] >> 2) == 0x00) && (((dataBuff >> i) & 0b00000001) == 1) ) {
 80005de:	211f      	movs	r1, #31
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2014      	movs	r0, #20
 80005e6:	183a      	adds	r2, r7, r0
 80005e8:	5cd3      	ldrb	r3, [r2, r3]
 80005ea:	089b      	lsrs	r3, r3, #2
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d113      	bne.n	800061a <capTouch_enableKeys+0xd6>
 80005f2:	1cfb      	adds	r3, r7, #3
 80005f4:	781a      	ldrb	r2, [r3, #0]
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	411a      	asrs	r2, r3
 80005fc:	0013      	movs	r3, r2
 80005fe:	2201      	movs	r2, #1
 8000600:	4013      	ands	r3, r2
 8000602:	d00a      	beq.n	800061a <capTouch_enableKeys+0xd6>
			avgRet[i] = avgRet[i] | 0b00100000;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	183a      	adds	r2, r7, r0
 800060a:	5cd2      	ldrb	r2, [r2, r3]
 800060c:	187b      	adds	r3, r7, r1
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2120      	movs	r1, #32
 8000612:	430a      	orrs	r2, r1
 8000614:	b2d1      	uxtb	r1, r2
 8000616:	183a      	adds	r2, r7, r0
 8000618:	54d1      	strb	r1, [r2, r3]
		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 800061a:	201f      	movs	r0, #31
 800061c:	183b      	adds	r3, r7, r0
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2414      	movs	r4, #20
 8000622:	193a      	adds	r2, r7, r4
 8000624:	5cd3      	ldrb	r3, [r2, r3]
 8000626:	089b      	lsrs	r3, r3, #2
 8000628:	b2da      	uxtb	r2, r3
 800062a:	1cfb      	adds	r3, r7, #3
 800062c:	7819      	ldrb	r1, [r3, #0]
 800062e:	183b      	adds	r3, r7, r0
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	4119      	asrs	r1, r3
 8000634:	000b      	movs	r3, r1
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2101      	movs	r1, #1
 800063a:	400b      	ands	r3, r1
 800063c:	b2d9      	uxtb	r1, r3
 800063e:	183b      	adds	r3, r7, r0
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	434a      	muls	r2, r1
 8000644:	b2d1      	uxtb	r1, r2
 8000646:	193a      	adds	r2, r7, r4
 8000648:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 800064a:	183b      	adds	r3, r7, r0
 800064c:	781a      	ldrb	r2, [r3, #0]
 800064e:	183b      	adds	r3, r7, r0
 8000650:	3201      	adds	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
 8000654:	231f      	movs	r3, #31
 8000656:	18fb      	adds	r3, r7, r3
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b06      	cmp	r3, #6
 800065c:	d9bf      	bls.n	80005de <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 800065e:	251e      	movs	r5, #30
 8000660:	197c      	adds	r4, r7, r5
 8000662:	2314      	movs	r3, #20
 8000664:	18fa      	adds	r2, r7, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	0011      	movs	r1, r2
 800066a:	0018      	movs	r0, r3
 800066c:	f000 f80c 	bl	8000688 <capTouch_SetAveragingFactor>
 8000670:	0003      	movs	r3, r0
 8000672:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000674:	197b      	adds	r3, r7, r5
 8000676:	781b      	ldrb	r3, [r3, #0]

}
 8000678:	0018      	movs	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	b009      	add	sp, #36	@ 0x24
 800067e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000680:	080064d0 	.word	0x080064d0
 8000684:	080064d8 	.word	0x080064d8

08000688 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068a:	b08b      	sub	sp, #44	@ 0x2c
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000692:	241e      	movs	r4, #30
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800069a:	2314      	movs	r3, #20
 800069c:	18fb      	adds	r3, r7, r3
 800069e:	4a5d      	ldr	r2, [pc, #372]	@ (8000814 <capTouch_SetAveragingFactor+0x18c>)
 80006a0:	6811      	ldr	r1, [r2, #0]
 80006a2:	6019      	str	r1, [r3, #0]
 80006a4:	8891      	ldrh	r1, [r2, #4]
 80006a6:	8099      	strh	r1, [r3, #4]
 80006a8:	7992      	ldrb	r2, [r2, #6]
 80006aa:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 80006ac:	260c      	movs	r6, #12
 80006ae:	19bb      	adds	r3, r7, r6
 80006b0:	4a59      	ldr	r2, [pc, #356]	@ (8000818 <capTouch_SetAveragingFactor+0x190>)
 80006b2:	6811      	ldr	r1, [r2, #0]
 80006b4:	6019      	str	r1, [r3, #0]
 80006b6:	8891      	ldrh	r1, [r2, #4]
 80006b8:	8099      	strh	r1, [r3, #4]
 80006ba:	7992      	ldrb	r2, [r2, #6]
 80006bc:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6818      	ldr	r0, [r3, #0]
 80006c2:	0025      	movs	r5, r4
 80006c4:	193c      	adds	r4, r7, r4
 80006c6:	19ba      	adds	r2, r7, r6
 80006c8:	2301      	movs	r3, #1
 80006ca:	425b      	negs	r3, r3
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2301      	movs	r3, #1
 80006d0:	2136      	movs	r1, #54	@ 0x36
 80006d2:	f002 fdfd 	bl	80032d0 <HAL_I2C_Master_Transmit>
 80006d6:	0003      	movs	r3, r0
 80006d8:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80006da:	197b      	adds	r3, r7, r5
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d002      	beq.n	80006e8 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 80006e2:	197b      	adds	r3, r7, r5
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	e090      	b.n	800080a <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6818      	ldr	r0, [r3, #0]
 80006ec:	251e      	movs	r5, #30
 80006ee:	197c      	adds	r4, r7, r5
 80006f0:	2314      	movs	r3, #20
 80006f2:	18fa      	adds	r2, r7, r3
 80006f4:	2301      	movs	r3, #1
 80006f6:	425b      	negs	r3, r3
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2307      	movs	r3, #7
 80006fc:	2136      	movs	r1, #54	@ 0x36
 80006fe:	f002 ff11 	bl	8003524 <HAL_I2C_Master_Receive>
 8000702:	0003      	movs	r3, r0
 8000704:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000706:	197b      	adds	r3, r7, r5
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d002      	beq.n	8000714 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 800070e:	197b      	adds	r3, r7, r5
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	e07a      	b.n	800080a <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000714:	2308      	movs	r3, #8
 8000716:	18fb      	adds	r3, r7, r3
 8000718:	2200      	movs	r2, #0
 800071a:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 800071c:	231d      	movs	r3, #29
 800071e:	18fb      	adds	r3, r7, r3
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 8000724:	231f      	movs	r3, #31
 8000726:	18fb      	adds	r3, r7, r3
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
 800072c:	e041      	b.n	80007b2 <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 800072e:	241f      	movs	r4, #31
 8000730:	193b      	adds	r3, r7, r4
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2214      	movs	r2, #20
 8000736:	18ba      	adds	r2, r7, r2
 8000738:	5cd2      	ldrb	r2, [r2, r3]
 800073a:	201d      	movs	r0, #29
 800073c:	183b      	adds	r3, r7, r0
 800073e:	2103      	movs	r1, #3
 8000740:	400a      	ands	r2, r1
 8000742:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 8000744:	193b      	adds	r3, r7, r4
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	683a      	ldr	r2, [r7, #0]
 800074a:	18d3      	adds	r3, r2, r3
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	251c      	movs	r5, #28
 8000750:	197b      	adds	r3, r7, r5
 8000752:	0092      	lsls	r2, r2, #2
 8000754:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 8000756:	183b      	adds	r3, r7, r0
 8000758:	1839      	adds	r1, r7, r0
 800075a:	197a      	adds	r2, r7, r5
 800075c:	7809      	ldrb	r1, [r1, #0]
 800075e:	7812      	ldrb	r2, [r2, #0]
 8000760:	430a      	orrs	r2, r1
 8000762:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 8000764:	193b      	adds	r3, r7, r4
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	220c      	movs	r2, #12
 800076a:	18ba      	adds	r2, r7, r2
 800076c:	5cd2      	ldrb	r2, [r2, r3]
 800076e:	2108      	movs	r1, #8
 8000770:	187b      	adds	r3, r7, r1
 8000772:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	183a      	adds	r2, r7, r0
 8000778:	7812      	ldrb	r2, [r2, #0]
 800077a:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6818      	ldr	r0, [r3, #0]
 8000780:	251e      	movs	r5, #30
 8000782:	197c      	adds	r4, r7, r5
 8000784:	187a      	adds	r2, r7, r1
 8000786:	2301      	movs	r3, #1
 8000788:	425b      	negs	r3, r3
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2302      	movs	r3, #2
 800078e:	2136      	movs	r1, #54	@ 0x36
 8000790:	f002 fd9e 	bl	80032d0 <HAL_I2C_Master_Transmit>
 8000794:	0003      	movs	r3, r0
 8000796:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 8000798:	197b      	adds	r3, r7, r5
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d002      	beq.n	80007a6 <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 80007a0:	197b      	adds	r3, r7, r5
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	e031      	b.n	800080a <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 80007a6:	211f      	movs	r1, #31
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	781a      	ldrb	r2, [r3, #0]
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	3201      	adds	r2, #1
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	231f      	movs	r3, #31
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b06      	cmp	r3, #6
 80007ba:	d9b8      	bls.n	800072e <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	251e      	movs	r5, #30
 80007c2:	197c      	adds	r4, r7, r5
 80007c4:	230c      	movs	r3, #12
 80007c6:	18fa      	adds	r2, r7, r3
 80007c8:	2301      	movs	r3, #1
 80007ca:	425b      	negs	r3, r3
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2301      	movs	r3, #1
 80007d0:	2136      	movs	r1, #54	@ 0x36
 80007d2:	f002 fd7d 	bl	80032d0 <HAL_I2C_Master_Transmit>
 80007d6:	0003      	movs	r3, r0
 80007d8:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80007da:	197b      	adds	r3, r7, r5
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d002      	beq.n	80007e8 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 80007e2:	197b      	adds	r3, r7, r5
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	e010      	b.n	800080a <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6818      	ldr	r0, [r3, #0]
 80007ec:	251e      	movs	r5, #30
 80007ee:	197c      	adds	r4, r7, r5
 80007f0:	2314      	movs	r3, #20
 80007f2:	18fa      	adds	r2, r7, r3
 80007f4:	2301      	movs	r3, #1
 80007f6:	425b      	negs	r3, r3
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2307      	movs	r3, #7
 80007fc:	2136      	movs	r1, #54	@ 0x36
 80007fe:	f002 fe91 	bl	8003524 <HAL_I2C_Master_Receive>
 8000802:	0003      	movs	r3, r0
 8000804:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000806:	197b      	adds	r3, r7, r5
 8000808:	781b      	ldrb	r3, [r3, #0]

}
 800080a:	0018      	movs	r0, r3
 800080c:	46bd      	mov	sp, r7
 800080e:	b009      	add	sp, #36	@ 0x24
 8000810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	080064d0 	.word	0x080064d0
 8000818:	080064d8 	.word	0x080064d8

0800081c <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 800081c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800081e:	b08b      	sub	sp, #44	@ 0x2c
 8000820:	af02      	add	r7, sp, #8
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000826:	231e      	movs	r3, #30
 8000828:	18fb      	adds	r3, r7, r3
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 800082e:	2314      	movs	r3, #20
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	4a31      	ldr	r2, [pc, #196]	@ (80008f8 <capTouch_SetDetectionIntegrator+0xdc>)
 8000834:	6811      	ldr	r1, [r2, #0]
 8000836:	6019      	str	r1, [r3, #0]
 8000838:	8891      	ldrh	r1, [r2, #4]
 800083a:	8099      	strh	r1, [r3, #4]
 800083c:	7992      	ldrb	r2, [r2, #6]
 800083e:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 8000840:	2310      	movs	r3, #16
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	2200      	movs	r2, #0
 8000846:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 8000848:	231f      	movs	r3, #31
 800084a:	18fb      	adds	r3, r7, r3
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
 8000850:	e022      	b.n	8000898 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 8000852:	251f      	movs	r5, #31
 8000854:	197b      	adds	r3, r7, r5
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2214      	movs	r2, #20
 800085a:	18ba      	adds	r2, r7, r2
 800085c:	5cd2      	ldrb	r2, [r2, r3]
 800085e:	2110      	movs	r1, #16
 8000860:	187b      	adds	r3, r7, r1
 8000862:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 8000864:	197b      	adds	r3, r7, r5
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	18d3      	adds	r3, r2, r3
 800086c:	781a      	ldrb	r2, [r3, #0]
 800086e:	187b      	adds	r3, r7, r1
 8000870:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6818      	ldr	r0, [r3, #0]
 8000876:	231e      	movs	r3, #30
 8000878:	18fc      	adds	r4, r7, r3
 800087a:	187a      	adds	r2, r7, r1
 800087c:	2301      	movs	r3, #1
 800087e:	425b      	negs	r3, r3
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	2302      	movs	r3, #2
 8000884:	2136      	movs	r1, #54	@ 0x36
 8000886:	f002 fd23 	bl	80032d0 <HAL_I2C_Master_Transmit>
 800088a:	0003      	movs	r3, r0
 800088c:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 800088e:	197b      	adds	r3, r7, r5
 8000890:	781a      	ldrb	r2, [r3, #0]
 8000892:	197b      	adds	r3, r7, r5
 8000894:	3201      	adds	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
 8000898:	231f      	movs	r3, #31
 800089a:	18fb      	adds	r3, r7, r3
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b06      	cmp	r3, #6
 80008a0:	d9d7      	bls.n	8000852 <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80008a2:	2608      	movs	r6, #8
 80008a4:	19bb      	adds	r3, r7, r6
 80008a6:	4a15      	ldr	r2, [pc, #84]	@ (80008fc <capTouch_SetDetectionIntegrator+0xe0>)
 80008a8:	6811      	ldr	r1, [r2, #0]
 80008aa:	6019      	str	r1, [r3, #0]
 80008ac:	8891      	ldrh	r1, [r2, #4]
 80008ae:	8099      	strh	r1, [r3, #4]
 80008b0:	7992      	ldrb	r2, [r2, #6]
 80008b2:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	251e      	movs	r5, #30
 80008ba:	197c      	adds	r4, r7, r5
 80008bc:	2314      	movs	r3, #20
 80008be:	18fa      	adds	r2, r7, r3
 80008c0:	2301      	movs	r3, #1
 80008c2:	425b      	negs	r3, r3
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	2301      	movs	r3, #1
 80008c8:	2136      	movs	r1, #54	@ 0x36
 80008ca:	f002 fd01 	bl	80032d0 <HAL_I2C_Master_Transmit>
 80008ce:	0003      	movs	r3, r0
 80008d0:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	197c      	adds	r4, r7, r5
 80008d8:	19ba      	adds	r2, r7, r6
 80008da:	2301      	movs	r3, #1
 80008dc:	425b      	negs	r3, r3
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2307      	movs	r3, #7
 80008e2:	2136      	movs	r1, #54	@ 0x36
 80008e4:	f002 fe1e 	bl	8003524 <HAL_I2C_Master_Receive>
 80008e8:	0003      	movs	r3, r0
 80008ea:	7023      	strb	r3, [r4, #0]

	return halRet;
 80008ec:	197b      	adds	r3, r7, r5
 80008ee:	781b      	ldrb	r3, [r3, #0]

}
 80008f0:	0018      	movs	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b009      	add	sp, #36	@ 0x24
 80008f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f8:	080064e0 	.word	0x080064e0
 80008fc:	080064d0 	.word	0x080064d0

08000900 <initRTCTime>:
 */

#include "../Inc/alarm.h"


void initRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000900:	b5b0      	push	{r4, r5, r7, lr}
 8000902:	b09a      	sub	sp, #104	@ 0x68
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]

	currTime->Hours = 1;				// Initialize current RTC time to default values
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
	currTime->Minutes = 00;
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	2200      	movs	r2, #0
 8000916:	705a      	strb	r2, [r3, #1]
	currTime->Seconds = 00;
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	2200      	movs	r2, #0
 800091c:	709a      	strb	r2, [r3, #2]
	currTime->TimeFormat = RTC_HOURFORMAT12_AM;			//This is initially in the A.M., so P.M. LED is off.
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	2200      	movs	r2, #0
 8000922:	70da      	strb	r2, [r3, #3]

	currDate->Year = 0;					// Initialize current RTC date to default values
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	70da      	strb	r2, [r3, #3]
	currDate->Month = RTC_MONTH_JANUARY;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2201      	movs	r2, #1
 800092e:	705a      	strb	r2, [r3, #1]
	currDate->Date = 0;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2200      	movs	r2, #0
 8000934:	709a      	strb	r2, [r3, #2]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000936:	2567      	movs	r5, #103	@ 0x67
 8000938:	197b      	adds	r3, r7, r5
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
	halRet = HAL_RTC_SetTime(hrtc, currTime, RTCTimeFormat);
 800093e:	197c      	adds	r4, r7, r5
 8000940:	68b9      	ldr	r1, [r7, #8]
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2200      	movs	r2, #0
 8000946:	0018      	movs	r0, r3
 8000948:	f004 f96e 	bl	8004c28 <HAL_RTC_SetTime>
 800094c:	0003      	movs	r3, r0
 800094e:	7023      	strb	r3, [r4, #0]
	halRet = HAL_RTC_SetDate(hrtc, currDate, RTCTimeFormat);
 8000950:	197c      	adds	r4, r7, r5
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	2200      	movs	r2, #0
 8000958:	0018      	movs	r0, r3
 800095a:	f004 fa69 	bl	8004e30 <HAL_RTC_SetDate>
 800095e:	0003      	movs	r3, r0
 8000960:	7023      	strb	r3, [r4, #0]
//	}
//	else {
//		printf("Error defaulting RTC time.\n\r");
//	}

	RTC_AlarmTypeDef internalAlarm_init = {0};
 8000962:	243c      	movs	r4, #60	@ 0x3c
 8000964:	193b      	adds	r3, r7, r4
 8000966:	0018      	movs	r0, r3
 8000968:	2328      	movs	r3, #40	@ 0x28
 800096a:	001a      	movs	r2, r3
 800096c:	2100      	movs	r1, #0
 800096e:	f005 fd71 	bl	8006454 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	781a      	ldrb	r2, [r3, #0]
 8000976:	0021      	movs	r1, r4
 8000978:	187b      	adds	r3, r7, r1
 800097a:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	785b      	ldrb	r3, [r3, #1]
 8000980:	3301      	adds	r3, #1
 8000982:	b2da      	uxtb	r2, r3
 8000984:	187b      	adds	r3, r7, r1
 8000986:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	789a      	ldrb	r2, [r3, #2]
 800098c:	187b      	adds	r3, r7, r1
 800098e:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	187b      	adds	r3, r7, r1
 8000996:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	78da      	ldrb	r2, [r3, #3]
 800099c:	187b      	adds	r3, r7, r1
 800099e:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	78da      	ldrb	r2, [r3, #3]
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009a8:	0008      	movs	r0, r1
 80009aa:	183b      	adds	r3, r7, r0
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009b0:	183b      	adds	r3, r7, r0
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80009b6:	183b      	adds	r3, r7, r0
 80009b8:	4a14      	ldr	r2, [pc, #80]	@ (8000a0c <initRTCTime+0x10c>)
 80009ba:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009bc:	183b      	adds	r3, r7, r0
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009c2:	183b      	adds	r3, r7, r0
 80009c4:	2200      	movs	r2, #0
 80009c6:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 80009c8:	183b      	adds	r3, r7, r0
 80009ca:	2220      	movs	r2, #32
 80009cc:	2101      	movs	r1, #1
 80009ce:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 80009d0:	0001      	movs	r1, r0
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2280      	movs	r2, #128	@ 0x80
 80009d6:	0052      	lsls	r2, r2, #1
 80009d8:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 80009da:	197c      	adds	r4, r7, r5
 80009dc:	1879      	adds	r1, r7, r1
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	2200      	movs	r2, #0
 80009e2:	0018      	movs	r0, r3
 80009e4:	f004 fb04 	bl	8004ff0 <HAL_RTC_SetAlarm_IT>
 80009e8:	0003      	movs	r3, r0
 80009ea:	7023      	strb	r3, [r4, #0]

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 80009ec:	197c      	adds	r4, r7, r5
 80009ee:	2380      	movs	r3, #128	@ 0x80
 80009f0:	005a      	lsls	r2, r3, #1
 80009f2:	2314      	movs	r3, #20
 80009f4:	18f9      	adds	r1, r7, r3
 80009f6:	68f8      	ldr	r0, [r7, #12]
 80009f8:	2300      	movs	r3, #0
 80009fa:	f004 fc39 	bl	8005270 <HAL_RTC_GetAlarm>
 80009fe:	0003      	movs	r3, r0
 8000a00:	7023      	strb	r3, [r4, #0]
//	if(halRet == HAL_OK) {
//		printf("Internal alarm A defaulted to %u:%u:%u.\n\r", internalAlarm_initTest.AlarmTime.Hours,
//				internalAlarm_initTest.AlarmTime.Minutes, internalAlarm_initTest.AlarmTime.Seconds);
//	}

}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b01a      	add	sp, #104	@ 0x68
 8000a08:	bdb0      	pop	{r4, r5, r7, pc}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	80800080 	.word	0x80800080

08000a10 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000a1c:	68b9      	ldr	r1, [r7, #8]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2200      	movs	r2, #0
 8000a22:	0018      	movs	r0, r3
 8000a24:	f004 f9a8 	bl	8004d78 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000a28:	6879      	ldr	r1, [r7, #4]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f004 fa90 	bl	8004f54 <HAL_RTC_GetDate>

}
 8000a34:	46c0      	nop			@ (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b004      	add	sp, #16
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a3e:	b08d      	sub	sp, #52	@ 0x34
 8000a40:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a42:	f001 fbcf 	bl	80021e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a46:	f000 f8ab 	bl	8000ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4a:	f000 fafb 	bl	8001044 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a4e:	f000 f913 	bl	8000c78 <MX_ADC1_Init>
  MX_RTC_Init();
 8000a52:	f000 f9bd 	bl	8000dd0 <MX_RTC_Init>
  MX_I2C1_Init();
 8000a56:	f000 f97b 	bl	8000d50 <MX_I2C1_Init>
  MX_TIM14_Init();
 8000a5a:	f000 facd 	bl	8000ff8 <MX_TIM14_Init>
  MX_TIM2_Init();
 8000a5e:	f000 fa6b 	bl	8000f38 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  uint8_t initRet = 0;
 8000a62:	2317      	movs	r3, #23
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]

  initRTCTime(&hrtc, &currTime, &currDate);
 8000a6a:	4a3f      	ldr	r2, [pc, #252]	@ (8000b68 <main+0x12c>)
 8000a6c:	493f      	ldr	r1, [pc, #252]	@ (8000b6c <main+0x130>)
 8000a6e:	4b40      	ldr	r3, [pc, #256]	@ (8000b70 <main+0x134>)
 8000a70:	0018      	movs	r0, r3
 8000a72:	f7ff ff45 	bl	8000900 <initRTCTime>

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000a76:	2380      	movs	r3, #128	@ 0x80
 8000a78:	009c      	lsls	r4, r3, #2
 8000a7a:	2380      	movs	r3, #128	@ 0x80
 8000a7c:	00dd      	lsls	r5, r3, #3
 8000a7e:	2680      	movs	r6, #128	@ 0x80
 8000a80:	2240      	movs	r2, #64	@ 0x40
 8000a82:	4694      	mov	ip, r2
 8000a84:	2380      	movs	r3, #128	@ 0x80
 8000a86:	011a      	lsls	r2, r3, #4
 8000a88:	4b3a      	ldr	r3, [pc, #232]	@ (8000b74 <main+0x138>)
 8000a8a:	6819      	ldr	r1, [r3, #0]
 8000a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8000b78 <main+0x13c>)
 8000a8e:	6818      	ldr	r0, [r3, #0]
 8000a90:	4b3a      	ldr	r3, [pc, #232]	@ (8000b7c <main+0x140>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	9304      	str	r3, [sp, #16]
 8000a96:	9003      	str	r0, [sp, #12]
 8000a98:	9102      	str	r1, [sp, #8]
 8000a9a:	4b39      	ldr	r3, [pc, #228]	@ (8000b80 <main+0x144>)
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	9200      	str	r2, [sp, #0]
 8000aa0:	4663      	mov	r3, ip
 8000aa2:	0032      	movs	r2, r6
 8000aa4:	0029      	movs	r1, r5
 8000aa6:	0020      	movs	r0, r4
 8000aa8:	f000 ff88 	bl	80019bc <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);


	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 8000aac:	2216      	movs	r2, #22
 8000aae:	18bc      	adds	r4, r7, r2
 8000ab0:	f000 fb9a 	bl	80011e8 <updateAndDisplayTime>
 8000ab4:	0003      	movs	r3, r0
 8000ab6:	7023      	strb	r3, [r4, #0]

    /*
     * Initialize capacitive touch sensor
     */

    initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 8000ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b74 <main+0x138>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	2380      	movs	r3, #128	@ 0x80
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	2117      	movs	r1, #23
 8000ac2:	187c      	adds	r4, r7, r1
 8000ac4:	4d2f      	ldr	r5, [pc, #188]	@ (8000b84 <main+0x148>)
 8000ac6:	4930      	ldr	r1, [pc, #192]	@ (8000b88 <main+0x14c>)
 8000ac8:	4830      	ldr	r0, [pc, #192]	@ (8000b8c <main+0x150>)
 8000aca:	260f      	movs	r6, #15
 8000acc:	9601      	str	r6, [sp, #4]
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	002b      	movs	r3, r5
 8000ad2:	f7ff fba3 	bl	800021c <capTouch_Init>
 8000ad6:	0003      	movs	r3, r0
 8000ad8:	7023      	strb	r3, [r4, #0]
    						&capTouchResetPort, capTouchResetPin, 0b00001111);

    if(initRet != 0) {
 8000ada:	2117      	movs	r1, #23
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <main+0xac>
    	dispError();
 8000ae4:	f000 ff22 	bl	800192c <dispError>
    }

    // Max. out averaging factor
    uint8_t avgFactors_New[7] = {32, 32, 32, 32, 0, 0, 0};
 8000ae8:	200c      	movs	r0, #12
 8000aea:	183b      	adds	r3, r7, r0
 8000aec:	4a28      	ldr	r2, [pc, #160]	@ (8000b90 <main+0x154>)
 8000aee:	6811      	ldr	r1, [r2, #0]
 8000af0:	6019      	str	r1, [r3, #0]
 8000af2:	8891      	ldrh	r1, [r2, #4]
 8000af4:	8099      	strh	r1, [r3, #4]
 8000af6:	7992      	ldrb	r2, [r2, #6]
 8000af8:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000afa:	2516      	movs	r5, #22
 8000afc:	197c      	adds	r4, r7, r5
 8000afe:	183a      	adds	r2, r7, r0
 8000b00:	4b22      	ldr	r3, [pc, #136]	@ (8000b8c <main+0x150>)
 8000b02:	0011      	movs	r1, r2
 8000b04:	0018      	movs	r0, r3
 8000b06:	f7ff fdbf 	bl	8000688 <capTouch_SetAveragingFactor>
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	7023      	strb	r3, [r4, #0]

    if(halRet != HAL_OK) {
 8000b0e:	197b      	adds	r3, r7, r5
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <main+0xde>
    	dispError();
 8000b16:	f000 ff09 	bl	800192c <dispError>
    }

    // Set detection integration factors
    uint8_t detIntFactors_New[7] = {0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04};
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b94 <main+0x158>)
 8000b1e:	6811      	ldr	r1, [r2, #0]
 8000b20:	6019      	str	r1, [r3, #0]
 8000b22:	8891      	ldrh	r1, [r2, #4]
 8000b24:	8099      	strh	r1, [r3, #4]
 8000b26:	7992      	ldrb	r2, [r2, #6]
 8000b28:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 8000b2a:	2516      	movs	r5, #22
 8000b2c:	197c      	adds	r4, r7, r5
 8000b2e:	1d3a      	adds	r2, r7, #4
 8000b30:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <main+0x150>)
 8000b32:	0011      	movs	r1, r2
 8000b34:	0018      	movs	r0, r3
 8000b36:	f7ff fe71 	bl	800081c <capTouch_SetDetectionIntegrator>
 8000b3a:	0003      	movs	r3, r0
 8000b3c:	7023      	strb	r3, [r4, #0]
    if(halRet != HAL_OK) {
 8000b3e:	197b      	adds	r3, r7, r5
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <main+0x10e>
    	dispError();
 8000b46:	f000 fef1 	bl	800192c <dispError>
    }

    userAlarmToggle = false;			//Default to off
 8000b4a:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <main+0x15c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]

    // User alarm default value
    userAlarmTime.Hours = 1;
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <main+0x160>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
    userAlarmTime.Minutes = 1;
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <main+0x160>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	705a      	strb	r2, [r3, #1]
    userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <main+0x160>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	70da      	strb	r2, [r3, #3]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	e7fd      	b.n	8000b62 <main+0x126>
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	20000208 	.word	0x20000208
 8000b6c:	200001f4 	.word	0x200001f4
 8000b70:	20000130 	.word	0x20000130
 8000b74:	20000028 	.word	0x20000028
 8000b78:	2000002c 	.word	0x2000002c
 8000b7c:	20000030 	.word	0x20000030
 8000b80:	20000010 	.word	0x20000010
 8000b84:	20000004 	.word	0x20000004
 8000b88:	200000dc 	.word	0x200000dc
 8000b8c:	20000224 	.word	0x20000224
 8000b90:	080064e8 	.word	0x080064e8
 8000b94:	080064f0 	.word	0x080064f0
 8000b98:	20000075 	.word	0x20000075
 8000b9c:	2000020c 	.word	0x2000020c

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b093      	sub	sp, #76	@ 0x4c
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	2410      	movs	r4, #16
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	0018      	movs	r0, r3
 8000bac:	2338      	movs	r3, #56	@ 0x38
 8000bae:	001a      	movs	r2, r3
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	f005 fc4f 	bl	8006454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb6:	003b      	movs	r3, r7
 8000bb8:	0018      	movs	r0, r3
 8000bba:	2310      	movs	r3, #16
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f005 fc48 	bl	8006454 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc4:	2380      	movs	r3, #128	@ 0x80
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f003 f92d 	bl	8003e28 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bce:	f003 f91d 	bl	8003e0c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000bd2:	4b28      	ldr	r3, [pc, #160]	@ (8000c74 <SystemClock_Config+0xd4>)
 8000bd4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000bd6:	4b27      	ldr	r3, [pc, #156]	@ (8000c74 <SystemClock_Config+0xd4>)
 8000bd8:	2118      	movs	r1, #24
 8000bda:	438a      	bics	r2, r1
 8000bdc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	2206      	movs	r2, #6
 8000be2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	2201      	movs	r2, #1
 8000be8:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	2280      	movs	r2, #128	@ 0x80
 8000bee:	0052      	lsls	r2, r2, #1
 8000bf0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000bf2:	0021      	movs	r1, r4
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2240      	movs	r2, #64	@ 0x40
 8000bfe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2202      	movs	r2, #2
 8000c04:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2202      	movs	r2, #2
 8000c0a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2208      	movs	r2, #8
 8000c16:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2280      	movs	r2, #128	@ 0x80
 8000c1c:	0292      	lsls	r2, r2, #10
 8000c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2280      	movs	r2, #128	@ 0x80
 8000c24:	0492      	lsls	r2, r2, #18
 8000c26:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2280      	movs	r2, #128	@ 0x80
 8000c2c:	0592      	lsls	r2, r2, #22
 8000c2e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	0018      	movs	r0, r3
 8000c34:	f003 f938 	bl	8003ea8 <HAL_RCC_OscConfig>
 8000c38:	1e03      	subs	r3, r0, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000c3c:	f000 feb8 	bl	80019b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c40:	003b      	movs	r3, r7
 8000c42:	2207      	movs	r2, #7
 8000c44:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c46:	003b      	movs	r3, r7
 8000c48:	2202      	movs	r2, #2
 8000c4a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4c:	003b      	movs	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c52:	003b      	movs	r3, r7
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c58:	003b      	movs	r3, r7
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f003 fc3d 	bl	80044dc <HAL_RCC_ClockConfig>
 8000c62:	1e03      	subs	r3, r0, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c66:	f000 fea3 	bl	80019b0 <Error_Handler>
  }
}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b013      	add	sp, #76	@ 0x4c
 8000c70:	bd90      	pop	{r4, r7, pc}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	40021000 	.word	0x40021000

08000c78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	0018      	movs	r0, r3
 8000c82:	230c      	movs	r3, #12
 8000c84:	001a      	movs	r2, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	f005 fbe4 	bl	8006454 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000c8e:	4a2e      	ldr	r2, [pc, #184]	@ (8000d48 <MX_ADC1_Init+0xd0>)
 8000c90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c92:	4b2c      	ldr	r3, [pc, #176]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000c94:	2280      	movs	r2, #128	@ 0x80
 8000c96:	05d2      	lsls	r2, r2, #23
 8000c98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ca0:	4b28      	ldr	r3, [pc, #160]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ca6:	4b27      	ldr	r3, [pc, #156]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cac:	4b25      	ldr	r3, [pc, #148]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000cae:	2204      	movs	r2, #4
 8000cb0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cb2:	4b24      	ldr	r3, [pc, #144]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000cb8:	4b22      	ldr	r3, [pc, #136]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cbe:	4b21      	ldr	r3, [pc, #132]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cca:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000ccc:	2220      	movs	r2, #32
 8000cce:	2100      	movs	r1, #0
 8000cd0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cde:	4b19      	ldr	r3, [pc, #100]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000ce0:	222c      	movs	r2, #44	@ 0x2c
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000cec:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000cf2:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000cfa:	223c      	movs	r2, #60	@ 0x3c
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000d00:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d06:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f001 fbef 	bl	80024ec <HAL_ADC_Init>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000d12:	f000 fe4d 	bl	80019b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	4a0c      	ldr	r2, [pc, #48]	@ (8000d4c <MX_ADC1_Init+0xd4>)
 8000d1a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2200      	movs	r2, #0
 8000d20:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d28:	1d3a      	adds	r2, r7, #4
 8000d2a:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <MX_ADC1_Init+0xcc>)
 8000d2c:	0011      	movs	r1, r2
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f001 fd84 	bl	800283c <HAL_ADC_ConfigChannel>
 8000d34:	1e03      	subs	r3, r0, #0
 8000d36:	d001      	beq.n	8000d3c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000d38:	f000 fe3a 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d3c:	46c0      	nop			@ (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b004      	add	sp, #16
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000078 	.word	0x20000078
 8000d48:	40012400 	.word	0x40012400
 8000d4c:	08000004 	.word	0x08000004

08000d50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d56:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc8 <MX_I2C1_Init+0x78>)
 8000d58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dcc <MX_I2C1_Init+0x7c>)
 8000d5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d60:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d66:	4b17      	ldr	r3, [pc, #92]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d72:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d78:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f002 f9f9 	bl	8003184 <HAL_I2C_Init>
 8000d92:	1e03      	subs	r3, r0, #0
 8000d94:	d001      	beq.n	8000d9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d96:	f000 fe0b 	bl	80019b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f002 ff9c 	bl	8003cdc <HAL_I2CEx_ConfigAnalogFilter>
 8000da4:	1e03      	subs	r3, r0, #0
 8000da6:	d001      	beq.n	8000dac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000da8:	f000 fe02 	bl	80019b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dac:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000dae:	2100      	movs	r1, #0
 8000db0:	0018      	movs	r0, r3
 8000db2:	f002 ffdf 	bl	8003d74 <HAL_I2CEx_ConfigDigitalFilter>
 8000db6:	1e03      	subs	r3, r0, #0
 8000db8:	d001      	beq.n	8000dbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dba:	f000 fdf9 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	200000dc 	.word	0x200000dc
 8000dc8:	40005400 	.word	0x40005400
 8000dcc:	00602173 	.word	0x00602173

08000dd0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b090      	sub	sp, #64	@ 0x40
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000dd6:	232c      	movs	r3, #44	@ 0x2c
 8000dd8:	18fb      	adds	r3, r7, r3
 8000dda:	0018      	movs	r0, r3
 8000ddc:	2314      	movs	r3, #20
 8000dde:	001a      	movs	r2, r3
 8000de0:	2100      	movs	r1, #0
 8000de2:	f005 fb37 	bl	8006454 <memset>
  RTC_DateTypeDef sDate = {0};
 8000de6:	2328      	movs	r3, #40	@ 0x28
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000dee:	003b      	movs	r3, r7
 8000df0:	0018      	movs	r0, r3
 8000df2:	2328      	movs	r3, #40	@ 0x28
 8000df4:	001a      	movs	r2, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	f005 fb2c 	bl	8006454 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000dfc:	4b4b      	ldr	r3, [pc, #300]	@ (8000f2c <MX_RTC_Init+0x15c>)
 8000dfe:	4a4c      	ldr	r2, [pc, #304]	@ (8000f30 <MX_RTC_Init+0x160>)
 8000e00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000e02:	4b4a      	ldr	r3, [pc, #296]	@ (8000f2c <MX_RTC_Init+0x15c>)
 8000e04:	2240      	movs	r2, #64	@ 0x40
 8000e06:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000e08:	4b48      	ldr	r3, [pc, #288]	@ (8000f2c <MX_RTC_Init+0x15c>)
 8000e0a:	227f      	movs	r2, #127	@ 0x7f
 8000e0c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000e0e:	4b47      	ldr	r3, [pc, #284]	@ (8000f2c <MX_RTC_Init+0x15c>)
 8000e10:	22ff      	movs	r2, #255	@ 0xff
 8000e12:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e14:	4b45      	ldr	r3, [pc, #276]	@ (8000f2c <MX_RTC_Init+0x15c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e1a:	4b44      	ldr	r3, [pc, #272]	@ (8000f2c <MX_RTC_Init+0x15c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e20:	4b42      	ldr	r3, [pc, #264]	@ (8000f2c <MX_RTC_Init+0x15c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e26:	4b41      	ldr	r3, [pc, #260]	@ (8000f2c <MX_RTC_Init+0x15c>)
 8000e28:	2280      	movs	r2, #128	@ 0x80
 8000e2a:	05d2      	lsls	r2, r2, #23
 8000e2c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000e2e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f2c <MX_RTC_Init+0x15c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e34:	4b3d      	ldr	r3, [pc, #244]	@ (8000f2c <MX_RTC_Init+0x15c>)
 8000e36:	0018      	movs	r0, r3
 8000e38:	f003 fe54 	bl	8004ae4 <HAL_RTC_Init>
 8000e3c:	1e03      	subs	r3, r0, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000e40:	f000 fdb6 	bl	80019b0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000e44:	212c      	movs	r1, #44	@ 0x2c
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	2200      	movs	r2, #0
 8000e50:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	2200      	movs	r2, #0
 8000e56:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	2200      	movs	r2, #0
 8000e62:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e70:	1879      	adds	r1, r7, r1
 8000e72:	4b2e      	ldr	r3, [pc, #184]	@ (8000f2c <MX_RTC_Init+0x15c>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	0018      	movs	r0, r3
 8000e78:	f003 fed6 	bl	8004c28 <HAL_RTC_SetTime>
 8000e7c:	1e03      	subs	r3, r0, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000e80:	f000 fd96 	bl	80019b0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e84:	2128      	movs	r1, #40	@ 0x28
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2201      	movs	r2, #1
 8000e90:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2201      	movs	r2, #1
 8000e96:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e9e:	1879      	adds	r1, r7, r1
 8000ea0:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <MX_RTC_Init+0x15c>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f003 ffc3 	bl	8004e30 <HAL_RTC_SetDate>
 8000eaa:	1e03      	subs	r3, r0, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 8000eae:	f000 fd7f 	bl	80019b0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000eb2:	003b      	movs	r3, r7
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000eb8:	003b      	movs	r3, r7
 8000eba:	2201      	movs	r2, #1
 8000ebc:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000ebe:	003b      	movs	r3, r7
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ec4:	003b      	movs	r3, r7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000eca:	003b      	movs	r3, r7
 8000ecc:	2200      	movs	r2, #0
 8000ece:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ed0:	003b      	movs	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000edc:	003b      	movs	r3, r7
 8000ede:	4a15      	ldr	r2, [pc, #84]	@ (8000f34 <MX_RTC_Init+0x164>)
 8000ee0:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000ee8:	003b      	movs	r3, r7
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000eee:	003b      	movs	r3, r7
 8000ef0:	2220      	movs	r2, #32
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000ef6:	003b      	movs	r3, r7
 8000ef8:	2280      	movs	r2, #128	@ 0x80
 8000efa:	0052      	lsls	r2, r2, #1
 8000efc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000efe:	0039      	movs	r1, r7
 8000f00:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <MX_RTC_Init+0x15c>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	0018      	movs	r0, r3
 8000f06:	f004 f873 	bl	8004ff0 <HAL_RTC_SetAlarm_IT>
 8000f0a:	1e03      	subs	r3, r0, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_RTC_Init+0x142>
  {
    Error_Handler();
 8000f0e:	f000 fd4f 	bl	80019b0 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <MX_RTC_Init+0x15c>)
 8000f14:	2100      	movs	r1, #0
 8000f16:	0018      	movs	r0, r3
 8000f18:	f004 fba0 	bl	800565c <HAL_RTCEx_SetCalibrationOutPut>
 8000f1c:	1e03      	subs	r3, r0, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_RTC_Init+0x154>
  {
    Error_Handler();
 8000f20:	f000 fd46 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f24:	46c0      	nop			@ (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b010      	add	sp, #64	@ 0x40
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000130 	.word	0x20000130
 8000f30:	40002800 	.word	0x40002800
 8000f34:	80800080 	.word	0x80800080

08000f38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3e:	231c      	movs	r3, #28
 8000f40:	18fb      	adds	r3, r7, r3
 8000f42:	0018      	movs	r0, r3
 8000f44:	230c      	movs	r3, #12
 8000f46:	001a      	movs	r2, r3
 8000f48:	2100      	movs	r1, #0
 8000f4a:	f005 fa83 	bl	8006454 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f4e:	003b      	movs	r3, r7
 8000f50:	0018      	movs	r0, r3
 8000f52:	231c      	movs	r3, #28
 8000f54:	001a      	movs	r2, r3
 8000f56:	2100      	movs	r1, #0
 8000f58:	f005 fa7c 	bl	8006454 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f5c:	4b24      	ldr	r3, [pc, #144]	@ (8000ff0 <MX_TIM2_Init+0xb8>)
 8000f5e:	2280      	movs	r2, #128	@ 0x80
 8000f60:	05d2      	lsls	r2, r2, #23
 8000f62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8000f64:	4b22      	ldr	r3, [pc, #136]	@ (8000ff0 <MX_TIM2_Init+0xb8>)
 8000f66:	4a23      	ldr	r2, [pc, #140]	@ (8000ff4 <MX_TIM2_Init+0xbc>)
 8000f68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6a:	4b21      	ldr	r3, [pc, #132]	@ (8000ff0 <MX_TIM2_Init+0xb8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000f70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff0 <MX_TIM2_Init+0xb8>)
 8000f72:	2263      	movs	r2, #99	@ 0x63
 8000f74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff0 <MX_TIM2_Init+0xb8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff0 <MX_TIM2_Init+0xb8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f82:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <MX_TIM2_Init+0xb8>)
 8000f84:	0018      	movs	r0, r3
 8000f86:	f004 fc83 	bl	8005890 <HAL_TIM_PWM_Init>
 8000f8a:	1e03      	subs	r3, r0, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000f8e:	f000 fd0f 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f92:	211c      	movs	r1, #28
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa0:	187a      	adds	r2, r7, r1
 8000fa2:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <MX_TIM2_Init+0xb8>)
 8000fa4:	0011      	movs	r1, r2
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f005 f9ec 	bl	8006384 <HAL_TIMEx_MasterConfigSynchronization>
 8000fac:	1e03      	subs	r3, r0, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000fb0:	f000 fcfe 	bl	80019b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb4:	003b      	movs	r3, r7
 8000fb6:	2260      	movs	r2, #96	@ 0x60
 8000fb8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000fba:	003b      	movs	r3, r7
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc0:	003b      	movs	r3, r7
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fcc:	0039      	movs	r1, r7
 8000fce:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <MX_TIM2_Init+0xb8>)
 8000fd0:	2208      	movs	r2, #8
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f004 fd92 	bl	8005afc <HAL_TIM_PWM_ConfigChannel>
 8000fd8:	1e03      	subs	r3, r0, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000fdc:	f000 fce8 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fe0:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <MX_TIM2_Init+0xb8>)
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f001 f848 	bl	8002078 <HAL_TIM_MspPostInit>

}
 8000fe8:	46c0      	nop			@ (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b00a      	add	sp, #40	@ 0x28
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000015c 	.word	0x2000015c
 8000ff4:	0000031f 	.word	0x0000031f

08000ff8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <MX_TIM14_Init+0x40>)
 8000ffe:	4a0f      	ldr	r2, [pc, #60]	@ (800103c <MX_TIM14_Init+0x44>)
 8001000:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8001002:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <MX_TIM14_Init+0x40>)
 8001004:	22f4      	movs	r2, #244	@ 0xf4
 8001006:	0092      	lsls	r2, r2, #2
 8001008:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <MX_TIM14_Init+0x40>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001010:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <MX_TIM14_Init+0x40>)
 8001012:	4a0b      	ldr	r2, [pc, #44]	@ (8001040 <MX_TIM14_Init+0x48>)
 8001014:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <MX_TIM14_Init+0x40>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <MX_TIM14_Init+0x40>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001022:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <MX_TIM14_Init+0x40>)
 8001024:	0018      	movs	r0, r3
 8001026:	f004 fb69 	bl	80056fc <HAL_TIM_Base_Init>
 800102a:	1e03      	subs	r3, r0, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800102e:	f000 fcbf 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001032:	46c0      	nop			@ (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200001a8 	.word	0x200001a8
 800103c:	40002000 	.word	0x40002000
 8001040:	0000ffff 	.word	0x0000ffff

08001044 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b08b      	sub	sp, #44	@ 0x2c
 8001048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	2414      	movs	r4, #20
 800104c:	193b      	adds	r3, r7, r4
 800104e:	0018      	movs	r0, r3
 8001050:	2314      	movs	r3, #20
 8001052:	001a      	movs	r2, r3
 8001054:	2100      	movs	r1, #0
 8001056:	f005 f9fd 	bl	8006454 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	4b5e      	ldr	r3, [pc, #376]	@ (80011d4 <MX_GPIO_Init+0x190>)
 800105c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800105e:	4b5d      	ldr	r3, [pc, #372]	@ (80011d4 <MX_GPIO_Init+0x190>)
 8001060:	2104      	movs	r1, #4
 8001062:	430a      	orrs	r2, r1
 8001064:	635a      	str	r2, [r3, #52]	@ 0x34
 8001066:	4b5b      	ldr	r3, [pc, #364]	@ (80011d4 <MX_GPIO_Init+0x190>)
 8001068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800106a:	2204      	movs	r2, #4
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b58      	ldr	r3, [pc, #352]	@ (80011d4 <MX_GPIO_Init+0x190>)
 8001074:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001076:	4b57      	ldr	r3, [pc, #348]	@ (80011d4 <MX_GPIO_Init+0x190>)
 8001078:	2101      	movs	r1, #1
 800107a:	430a      	orrs	r2, r1
 800107c:	635a      	str	r2, [r3, #52]	@ 0x34
 800107e:	4b55      	ldr	r3, [pc, #340]	@ (80011d4 <MX_GPIO_Init+0x190>)
 8001080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001082:	2201      	movs	r2, #1
 8001084:	4013      	ands	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108a:	4b52      	ldr	r3, [pc, #328]	@ (80011d4 <MX_GPIO_Init+0x190>)
 800108c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800108e:	4b51      	ldr	r3, [pc, #324]	@ (80011d4 <MX_GPIO_Init+0x190>)
 8001090:	2108      	movs	r1, #8
 8001092:	430a      	orrs	r2, r1
 8001094:	635a      	str	r2, [r3, #52]	@ 0x34
 8001096:	4b4f      	ldr	r3, [pc, #316]	@ (80011d4 <MX_GPIO_Init+0x190>)
 8001098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800109a:	2208      	movs	r2, #8
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	4b4c      	ldr	r3, [pc, #304]	@ (80011d4 <MX_GPIO_Init+0x190>)
 80010a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010a6:	4b4b      	ldr	r3, [pc, #300]	@ (80011d4 <MX_GPIO_Init+0x190>)
 80010a8:	2102      	movs	r1, #2
 80010aa:	430a      	orrs	r2, r1
 80010ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80010ae:	4b49      	ldr	r3, [pc, #292]	@ (80011d4 <MX_GPIO_Init+0x190>)
 80010b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010b2:	2202      	movs	r2, #2
 80010b4:	4013      	ands	r3, r2
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 80010ba:	4947      	ldr	r1, [pc, #284]	@ (80011d8 <MX_GPIO_Init+0x194>)
 80010bc:	23a0      	movs	r3, #160	@ 0xa0
 80010be:	05db      	lsls	r3, r3, #23
 80010c0:	2200      	movs	r2, #0
 80010c2:	0018      	movs	r0, r3
 80010c4:	f001 fff1 	bl	80030aa <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 80010c8:	4b44      	ldr	r3, [pc, #272]	@ (80011dc <MX_GPIO_Init+0x198>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	2180      	movs	r1, #128	@ 0x80
 80010ce:	0018      	movs	r0, r3
 80010d0:	f001 ffeb 	bl	80030aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_RST_GPIO_Port, CTOUCH_RST_Pin, GPIO_PIN_RESET);
 80010d4:	2380      	movs	r3, #128	@ 0x80
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4841      	ldr	r0, [pc, #260]	@ (80011e0 <MX_GPIO_Init+0x19c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	0019      	movs	r1, r3
 80010de:	f001 ffe4 	bl	80030aa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin BUZZER_OUT_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin
                           SHIFT_MCLR_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 80010e2:	193b      	adds	r3, r7, r4
 80010e4:	4a3c      	ldr	r2, [pc, #240]	@ (80011d8 <MX_GPIO_Init+0x194>)
 80010e6:	601a      	str	r2, [r3, #0]
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	193b      	adds	r3, r7, r4
 80010ea:	2201      	movs	r2, #1
 80010ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	193b      	adds	r3, r7, r4
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	193b      	adds	r3, r7, r4
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	193a      	adds	r2, r7, r4
 80010fc:	23a0      	movs	r3, #160	@ 0xa0
 80010fe:	05db      	lsls	r3, r3, #23
 8001100:	0011      	movs	r1, r2
 8001102:	0018      	movs	r0, r3
 8001104:	f001 fe50 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8001108:	193b      	adds	r3, r7, r4
 800110a:	2280      	movs	r2, #128	@ 0x80
 800110c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	193b      	adds	r3, r7, r4
 8001110:	2201      	movs	r2, #1
 8001112:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	193b      	adds	r3, r7, r4
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	193b      	adds	r3, r7, r4
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 8001120:	193b      	adds	r3, r7, r4
 8001122:	4a2e      	ldr	r2, [pc, #184]	@ (80011dc <MX_GPIO_Init+0x198>)
 8001124:	0019      	movs	r1, r3
 8001126:	0010      	movs	r0, r2
 8001128:	f001 fe3e 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 800112c:	193b      	adds	r3, r7, r4
 800112e:	2280      	movs	r2, #128	@ 0x80
 8001130:	0212      	lsls	r2, r2, #8
 8001132:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001134:	193b      	adds	r3, r7, r4
 8001136:	2284      	movs	r2, #132	@ 0x84
 8001138:	0392      	lsls	r2, r2, #14
 800113a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800113c:	193b      	adds	r3, r7, r4
 800113e:	2201      	movs	r2, #1
 8001140:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001142:	193a      	adds	r2, r7, r4
 8001144:	23a0      	movs	r3, #160	@ 0xa0
 8001146:	05db      	lsls	r3, r3, #23
 8001148:	0011      	movs	r1, r2
 800114a:	0018      	movs	r0, r3
 800114c:	f001 fe2c 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 8001150:	0021      	movs	r1, r4
 8001152:	187b      	adds	r3, r7, r1
 8001154:	220f      	movs	r2, #15
 8001156:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001158:	187b      	adds	r3, r7, r1
 800115a:	2284      	movs	r2, #132	@ 0x84
 800115c:	0392      	lsls	r2, r2, #14
 800115e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001160:	187b      	adds	r3, r7, r1
 8001162:	2201      	movs	r2, #1
 8001164:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001166:	000c      	movs	r4, r1
 8001168:	187b      	adds	r3, r7, r1
 800116a:	4a1e      	ldr	r2, [pc, #120]	@ (80011e4 <MX_GPIO_Init+0x1a0>)
 800116c:	0019      	movs	r1, r3
 800116e:	0010      	movs	r0, r2
 8001170:	f001 fe1a 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_RST_Pin */
  GPIO_InitStruct.Pin = CTOUCH_RST_Pin;
 8001174:	0021      	movs	r1, r4
 8001176:	187b      	adds	r3, r7, r1
 8001178:	2280      	movs	r2, #128	@ 0x80
 800117a:	0052      	lsls	r2, r2, #1
 800117c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	187b      	adds	r3, r7, r1
 8001180:	2201      	movs	r2, #1
 8001182:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	187b      	adds	r3, r7, r1
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001190:	187b      	adds	r3, r7, r1
 8001192:	4a13      	ldr	r2, [pc, #76]	@ (80011e0 <MX_GPIO_Init+0x19c>)
 8001194:	0019      	movs	r1, r3
 8001196:	0010      	movs	r0, r2
 8001198:	f001 fe06 	bl	8002da8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	2005      	movs	r0, #5
 80011a2:	f001 fdcf 	bl	8002d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80011a6:	2005      	movs	r0, #5
 80011a8:	f001 fde1 	bl	8002d6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	2006      	movs	r0, #6
 80011b2:	f001 fdc7 	bl	8002d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80011b6:	2006      	movs	r0, #6
 80011b8:	f001 fdd9 	bl	8002d6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2101      	movs	r1, #1
 80011c0:	2007      	movs	r0, #7
 80011c2:	f001 fdbf 	bl	8002d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80011c6:	2007      	movs	r0, #7
 80011c8:	f001 fdd1 	bl	8002d6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011cc:	46c0      	nop			@ (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b00b      	add	sp, #44	@ 0x2c
 80011d2:	bd90      	pop	{r4, r7, pc}
 80011d4:	40021000 	.word	0x40021000
 80011d8:	00001f01 	.word	0x00001f01
 80011dc:	50000800 	.word	0x50000800
 80011e0:	50000400 	.word	0x50000400
 80011e4:	50000c00 	.word	0x50000c00

080011e8 <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 80011f4:	4a07      	ldr	r2, [pc, #28]	@ (8001214 <updateAndDisplayTime+0x2c>)
 80011f6:	4908      	ldr	r1, [pc, #32]	@ (8001218 <updateAndDisplayTime+0x30>)
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <updateAndDisplayTime+0x34>)
 80011fa:	0018      	movs	r0, r3
 80011fc:	f7ff fc08 	bl	8000a10 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 8001200:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <updateAndDisplayTime+0x30>)
 8001202:	0018      	movs	r0, r3
 8001204:	f000 fcee 	bl	8001be4 <sevSeg_updateDigits>

	return halRet;
 8001208:	1dfb      	adds	r3, r7, #7
 800120a:	781b      	ldrb	r3, [r3, #0]

}
 800120c:	0018      	movs	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000208 	.word	0x20000208
 8001218:	200001f4 	.word	0x200001f4
 800121c:	20000130 	.word	0x20000130

08001220 <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 800122c:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <updateAndDisplayAlarm+0x20>)
 800122e:	0018      	movs	r0, r3
 8001230:	f000 fcd8 	bl	8001be4 <sevSeg_updateDigits>

	return halRet;
 8001234:	1dfb      	adds	r3, r7, #7
 8001236:	781b      	ldrb	r3, [r3, #0]

}
 8001238:	0018      	movs	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	b002      	add	sp, #8
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2000020c 	.word	0x2000020c

08001244 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b08d      	sub	sp, #52	@ 0x34
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

	  //printf("Enter current time minute increment interrupt\n\r");

	  RTC_AlarmTypeDef sAlarm;
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 800124c:	2380      	movs	r3, #128	@ 0x80
 800124e:	005a      	lsls	r2, r3, #1
 8001250:	2408      	movs	r4, #8
 8001252:	1939      	adds	r1, r7, r4
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	2300      	movs	r3, #0
 8001258:	f004 f80a 	bl	8005270 <HAL_RTC_GetAlarm>
	  getRTCTime(hrtc, &currTime, &currDate);
 800125c:	4a22      	ldr	r2, [pc, #136]	@ (80012e8 <HAL_RTC_AlarmAEventCallback+0xa4>)
 800125e:	4923      	ldr	r1, [pc, #140]	@ (80012ec <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	0018      	movs	r0, r3
 8001264:	f7ff fbd4 	bl	8000a10 <getRTCTime>

	  if(sAlarm.AlarmTime.Minutes>58) {
 8001268:	0022      	movs	r2, r4
 800126a:	18bb      	adds	r3, r7, r2
 800126c:	785b      	ldrb	r3, [r3, #1]
 800126e:	2b3a      	cmp	r3, #58	@ 0x3a
 8001270:	d903      	bls.n	800127a <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 8001272:	18bb      	adds	r3, r7, r2
 8001274:	2200      	movs	r2, #0
 8001276:	705a      	strb	r2, [r3, #1]
 8001278:	e00e      	b.n	8001298 <HAL_RTC_AlarmAEventCallback+0x54>
		//printf("Reset alarm time\n\r");
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 800127a:	2108      	movs	r1, #8
 800127c:	187b      	adds	r3, r7, r1
 800127e:	785b      	ldrb	r3, [r3, #1]
 8001280:	3301      	adds	r3, #1
 8001282:	b2da      	uxtb	r2, r3
 8001284:	187b      	adds	r3, r7, r1
 8001286:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001288:	e006      	b.n	8001298 <HAL_RTC_AlarmAEventCallback+0x54>
			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 800128a:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <HAL_RTC_AlarmAEventCallback+0xac>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2201      	movs	r2, #1
 8001290:	0011      	movs	r1, r2
 8001292:	0018      	movs	r0, r3
 8001294:	f001 ff26 	bl	80030e4 <HAL_GPIO_TogglePin>
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001298:	2308      	movs	r3, #8
 800129a:	18f9      	adds	r1, r7, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	0018      	movs	r0, r3
 80012a2:	f003 fea5 	bl	8004ff0 <HAL_RTC_SetAlarm_IT>
 80012a6:	1e03      	subs	r3, r0, #0
 80012a8:	d1ef      	bne.n	800128a <HAL_RTC_AlarmAEventCallback+0x46>
		}

	  updateAndDisplayTime();
 80012aa:	f7ff ff9d 	bl	80011e8 <updateAndDisplayTime>

	  //printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <HAL_RTC_AlarmAEventCallback+0xb0>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d013      	beq.n	80012de <HAL_RTC_AlarmAEventCallback+0x9a>
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <HAL_RTC_AlarmAEventCallback+0xb4>)
 80012b8:	781a      	ldrb	r2, [r3, #0]
 80012ba:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <HAL_RTC_AlarmAEventCallback+0xa8>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d10d      	bne.n	80012de <HAL_RTC_AlarmAEventCallback+0x9a>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 80012c2:	4b0d      	ldr	r3, [pc, #52]	@ (80012f8 <HAL_RTC_AlarmAEventCallback+0xb4>)
 80012c4:	785a      	ldrb	r2, [r3, #1]
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <HAL_RTC_AlarmAEventCallback+0xa8>)
 80012c8:	785b      	ldrb	r3, [r3, #1]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d107      	bne.n	80012de <HAL_RTC_AlarmAEventCallback+0x9a>
 80012ce:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <HAL_RTC_AlarmAEventCallback+0xb4>)
 80012d0:	78da      	ldrb	r2, [r3, #3]
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_RTC_AlarmAEventCallback+0xa8>)
 80012d4:	78db      	ldrb	r3, [r3, #3]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d101      	bne.n	80012de <HAL_RTC_AlarmAEventCallback+0x9a>
		  userAlarmBeep();
 80012da:	f000 f80f 	bl	80012fc <userAlarmBeep>
	  }

}
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b00d      	add	sp, #52	@ 0x34
 80012e4:	bd90      	pop	{r4, r7, pc}
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	20000208 	.word	0x20000208
 80012ec:	200001f4 	.word	0x200001f4
 80012f0:	20000024 	.word	0x20000024
 80012f4:	20000075 	.word	0x20000075
 80012f8:	2000020c 	.word	0x2000020c

080012fc <userAlarmBeep>:

void userAlarmBeep() {
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8001302:	4b3b      	ldr	r3, [pc, #236]	@ (80013f0 <userAlarmBeep+0xf4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	0018      	movs	r0, r3
 8001308:	f004 fa9c 	bl	8005844 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 800130c:	4b38      	ldr	r3, [pc, #224]	@ (80013f0 <userAlarmBeep+0xf4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	0018      	movs	r0, r3
 8001312:	f004 fa4b 	bl	80057ac <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001316:	4b36      	ldr	r3, [pc, #216]	@ (80013f0 <userAlarmBeep+0xf4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131e:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001320:	1cfb      	adds	r3, r7, #3
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 8001326:	f7ff ff5f 	bl	80011e8 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 800132a:	4b31      	ldr	r3, [pc, #196]	@ (80013f0 <userAlarmBeep+0xf4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	4a2f      	ldr	r2, [pc, #188]	@ (80013f4 <userAlarmBeep+0xf8>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d926      	bls.n	800138a <userAlarmBeep+0x8e>

			sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 800133c:	4b2e      	ldr	r3, [pc, #184]	@ (80013f8 <userAlarmBeep+0xfc>)
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	4b2e      	ldr	r3, [pc, #184]	@ (80013fc <userAlarmBeep+0x100>)
 8001342:	6819      	ldr	r1, [r3, #0]
 8001344:	1cfb      	adds	r3, r7, #3
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4a2d      	ldr	r2, [pc, #180]	@ (8001400 <userAlarmBeep+0x104>)
 800134a:	5cd3      	ldrb	r3, [r2, r3]
 800134c:	001a      	movs	r2, r3
 800134e:	f000 fcfb 	bl	8001d48 <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(buzzerPort, buzzerPin);					// Toggle Buzzer
 8001352:	4b2c      	ldr	r3, [pc, #176]	@ (8001404 <userAlarmBeep+0x108>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2280      	movs	r2, #128	@ 0x80
 8001358:	0052      	lsls	r2, r2, #1
 800135a:	0011      	movs	r1, r2
 800135c:	0018      	movs	r0, r3
 800135e:	f001 fec1 	bl	80030e4 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001362:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <userAlarmBeep+0xf4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136a:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 800136c:	1cfb      	adds	r3, r7, #3
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	1e5a      	subs	r2, r3, #1
 8001372:	4193      	sbcs	r3, r2
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2201      	movs	r2, #1
 8001378:	4053      	eors	r3, r2
 800137a:	b2db      	uxtb	r3, r3
 800137c:	001a      	movs	r2, r3
 800137e:	1cfb      	adds	r3, r7, #3
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	781a      	ldrb	r2, [r3, #0]
 8001384:	2101      	movs	r1, #1
 8001386:	400a      	ands	r2, r1
 8001388:	701a      	strb	r2, [r3, #0]

		}


		HAL_StatusTypeDef halRet = capTouch_readChannels(&capTouch);
 800138a:	1cbc      	adds	r4, r7, #2
 800138c:	4b1e      	ldr	r3, [pc, #120]	@ (8001408 <userAlarmBeep+0x10c>)
 800138e:	0018      	movs	r0, r3
 8001390:	f7ff f894 	bl	80004bc <capTouch_readChannels>
 8001394:	0003      	movs	r3, r0
 8001396:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK)
 8001398:	1cbb      	adds	r3, r7, #2
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <userAlarmBeep+0xa8>
			dispError();
 80013a0:	f000 fac4 	bl	800192c <dispError>

	} while(capTouch.keyStat == 0x00);
 80013a4:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <userAlarmBeep+0x10c>)
 80013a6:	7c1b      	ldrb	r3, [r3, #16]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0bc      	beq.n	8001326 <userAlarmBeep+0x2a>

	HAL_TIM_Base_Stop(timerDelay);
 80013ac:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <userAlarmBeep+0xf4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	0018      	movs	r0, r3
 80013b2:	f004 fa47 	bl	8005844 <HAL_TIM_Base_Stop>
	HAL_GPIO_WritePin(buzzerPort, buzzerPin, GPIO_PIN_RESET);
 80013b6:	4b13      	ldr	r3, [pc, #76]	@ (8001404 <userAlarmBeep+0x108>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2280      	movs	r2, #128	@ 0x80
 80013bc:	0051      	lsls	r1, r2, #1
 80013be:	2200      	movs	r2, #0
 80013c0:	0018      	movs	r0, r3
 80013c2:	f001 fe72 	bl	80030aa <HAL_GPIO_WritePin>
	updateAndDisplayTime();				// Update to current time and display
 80013c6:	f7ff ff0f 	bl	80011e8 <updateAndDisplayTime>
	sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[1]);	// Toggle 0% to 50% duty cycle
 80013ca:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <userAlarmBeep+0xfc>)
 80013cc:	6818      	ldr	r0, [r3, #0]
 80013ce:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <userAlarmBeep+0x100>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	225a      	movs	r2, #90	@ 0x5a
 80013d4:	0019      	movs	r1, r3
 80013d6:	f000 fcb7 	bl	8001d48 <sevSeg_setIntensity>


	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <userAlarmBeep+0x110>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2201      	movs	r2, #1
 80013e0:	0011      	movs	r1, r2
 80013e2:	0018      	movs	r0, r3
 80013e4:	f001 fe7e 	bl	80030e4 <HAL_GPIO_TogglePin>

}
 80013e8:	46c0      	nop			@ (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b003      	add	sp, #12
 80013ee:	bd90      	pop	{r4, r7, pc}
 80013f0:	20000028 	.word	0x20000028
 80013f4:	00007ffe 	.word	0x00007ffe
 80013f8:	2000002c 	.word	0x2000002c
 80013fc:	20000030 	.word	0x20000030
 8001400:	080064f8 	.word	0x080064f8
 8001404:	2000000c 	.word	0x2000000c
 8001408:	20000224 	.word	0x20000224
 800140c:	20000024 	.word	0x20000024

08001410 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	0002      	movs	r2, r0
 8001418:	1dbb      	adds	r3, r7, #6
 800141a:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 800141c:	2208      	movs	r2, #8
 800141e:	1dbb      	adds	r3, r7, #6
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	4293      	cmp	r3, r2
 8001424:	d106      	bne.n	8001434 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 8001426:	230f      	movs	r3, #15
 8001428:	18fc      	adds	r4, r7, r3
 800142a:	f000 f839 	bl	80014a0 <displayButtonISR>
 800142e:	0003      	movs	r3, r0
 8001430:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8001432:	e031      	b.n	8001498 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8001434:	2204      	movs	r2, #4
 8001436:	1dbb      	adds	r3, r7, #6
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	4293      	cmp	r3, r2
 800143c:	d106      	bne.n	800144c <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 800143e:	230f      	movs	r3, #15
 8001440:	18fc      	adds	r4, r7, r3
 8001442:	f000 f85d 	bl	8001500 <alarmEnableISR>
 8001446:	0003      	movs	r3, r0
 8001448:	7023      	strb	r3, [r4, #0]
}
 800144a:	e025      	b.n	8001498 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 800144c:	2380      	movs	r3, #128	@ 0x80
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	1dba      	adds	r2, r7, #6
 8001452:	8812      	ldrh	r2, [r2, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d106      	bne.n	8001466 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 8001458:	230f      	movs	r3, #15
 800145a:	18fc      	adds	r4, r7, r3
 800145c:	f000 f884 	bl	8001568 <alarmSetISR>
 8001460:	0003      	movs	r3, r0
 8001462:	7023      	strb	r3, [r4, #0]
}
 8001464:	e018      	b.n	8001498 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 8001466:	2201      	movs	r2, #1
 8001468:	1dbb      	adds	r3, r7, #6
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	4293      	cmp	r3, r2
 800146e:	d106      	bne.n	800147e <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 8001470:	230f      	movs	r3, #15
 8001472:	18fc      	adds	r4, r7, r3
 8001474:	f000 f954 	bl	8001720 <hourSetISR>
 8001478:	0003      	movs	r3, r0
 800147a:	7023      	strb	r3, [r4, #0]
}
 800147c:	e00c      	b.n	8001498 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 800147e:	2202      	movs	r2, #2
 8001480:	1dbb      	adds	r3, r7, #6
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	4293      	cmp	r3, r2
 8001486:	d106      	bne.n	8001496 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 8001488:	230f      	movs	r3, #15
 800148a:	18fc      	adds	r4, r7, r3
 800148c:	f000 f974 	bl	8001778 <minuteSetISR>
 8001490:	0003      	movs	r3, r0
 8001492:	7023      	strb	r3, [r4, #0]
}
 8001494:	e000      	b.n	8001498 <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 8001496:	46c0      	nop			@ (mov r8, r8)
}
 8001498:	46c0      	nop			@ (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	b005      	add	sp, #20
 800149e:	bd90      	pop	{r4, r7, pc}

080014a0 <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 80014a6:	1dfb      	adds	r3, r7, #7
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 80014ac:	f7ff fe9c 	bl	80011e8 <updateAndDisplayTime>

	sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <displayButtonISR+0x50>)
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <displayButtonISR+0x54>)
 80014b6:	6819      	ldr	r1, [r3, #0]
 80014b8:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <displayButtonISR+0x58>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	001a      	movs	r2, r3
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <displayButtonISR+0x5c>)
 80014c0:	5c9b      	ldrb	r3, [r3, r2]
 80014c2:	001a      	movs	r2, r3
 80014c4:	f000 fc40 	bl	8001d48 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 80014c8:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <displayButtonISR+0x58>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d903      	bls.n	80014d8 <displayButtonISR+0x38>
		displayToggle = 0;
 80014d0:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <displayButtonISR+0x58>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
 80014d6:	e005      	b.n	80014e4 <displayButtonISR+0x44>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 80014d8:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <displayButtonISR+0x58>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <displayButtonISR+0x58>)
 80014e2:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 80014e4:	1dfb      	adds	r3, r7, #7
 80014e6:	781b      	ldrb	r3, [r3, #0]

}
 80014e8:	0018      	movs	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b002      	add	sp, #8
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	2000002c 	.word	0x2000002c
 80014f4:	20000030 	.word	0x20000030
 80014f8:	20000074 	.word	0x20000074
 80014fc:	080064f8 	.word	0x080064f8

08001500 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001506:	1dfb      	adds	r3, r7, #7
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 800150c:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <alarmEnableISR+0x60>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2201      	movs	r2, #1
 8001512:	4053      	eors	r3, r2
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00b      	beq.n	8001532 <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 800151a:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <alarmEnableISR+0x64>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2280      	movs	r2, #128	@ 0x80
 8001520:	0151      	lsls	r1, r2, #5
 8001522:	2201      	movs	r2, #1
 8001524:	0018      	movs	r0, r3
 8001526:	f001 fdc0 	bl	80030aa <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 800152a:	4b0d      	ldr	r3, [pc, #52]	@ (8001560 <alarmEnableISR+0x60>)
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
 8001530:	e010      	b.n	8001554 <alarmEnableISR+0x54>

		//printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
								//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8001532:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <alarmEnableISR+0x60>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00b      	beq.n	8001552 <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 800153a:	4b0a      	ldr	r3, [pc, #40]	@ (8001564 <alarmEnableISR+0x64>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2280      	movs	r2, #128	@ 0x80
 8001540:	0151      	lsls	r1, r2, #5
 8001542:	2200      	movs	r2, #0
 8001544:	0018      	movs	r0, r3
 8001546:	f001 fdb0 	bl	80030aa <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 800154a:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <alarmEnableISR+0x60>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	e000      	b.n	8001554 <alarmEnableISR+0x54>

		//printf("User alarm disabled.\n\r");
	}
	else {
		__NOP();							//Code should never reach here.
 8001552:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 8001554:	1dfb      	adds	r3, r7, #7
 8001556:	781b      	ldrb	r3, [r3, #0]

}
 8001558:	0018      	movs	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	b002      	add	sp, #8
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000075 	.word	0x20000075
 8001564:	20000008 	.word	0x20000008

08001568 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
	//printf("Enter user alarm set ISR.\n\r");

	//printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
			//userAlarmTime.Minutes, userAlarmTime.Seconds);

	HAL_StatusTypeDef halRet = HAL_OK;
 800156e:	1cbb      	adds	r3, r7, #2
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for switch debounce
	 */

	// First wait for button to deactivate again
	while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_SET);
 8001574:	46c0      	nop			@ (mov r8, r8)
 8001576:	4b64      	ldr	r3, [pc, #400]	@ (8001708 <alarmSetISR+0x1a0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2280      	movs	r2, #128	@ 0x80
 800157c:	0212      	lsls	r2, r2, #8
 800157e:	0011      	movs	r1, r2
 8001580:	0018      	movs	r0, r3
 8001582:	f001 fd75 	bl	8003070 <HAL_GPIO_ReadPin>
 8001586:	0003      	movs	r3, r0
 8001588:	2b01      	cmp	r3, #1
 800158a:	d1f4      	bne.n	8001576 <alarmSetISR+0xe>

	// Go through debounce
	HAL_TIM_Base_Stop(timerDelay);
 800158c:	4b5f      	ldr	r3, [pc, #380]	@ (800170c <alarmSetISR+0x1a4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	0018      	movs	r0, r3
 8001592:	f004 f957 	bl	8005844 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001596:	4b5d      	ldr	r3, [pc, #372]	@ (800170c <alarmSetISR+0x1a4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	0018      	movs	r0, r3
 800159c:	f004 f906 	bl	80057ac <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80015a0:	4b5a      	ldr	r3, [pc, #360]	@ (800170c <alarmSetISR+0x1a4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a8:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 8));
 80015aa:	4b58      	ldr	r3, [pc, #352]	@ (800170c <alarmSetISR+0x1a4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	1ad2      	subs	r2, r2, r3
 80015b6:	2380      	movs	r3, #128	@ 0x80
 80015b8:	019b      	lsls	r3, r3, #6
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d9f5      	bls.n	80015aa <alarmSetISR+0x42>


	/*
	 *  Poll for 1 second to see if the alarm set button is pressed again
	 */
	HAL_TIM_Base_Stop(timerDelay);
 80015be:	4b53      	ldr	r3, [pc, #332]	@ (800170c <alarmSetISR+0x1a4>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	0018      	movs	r0, r3
 80015c4:	f004 f93e 	bl	8005844 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80015c8:	4b50      	ldr	r3, [pc, #320]	@ (800170c <alarmSetISR+0x1a4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	0018      	movs	r0, r3
 80015ce:	f004 f8ed 	bl	80057ac <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80015d2:	4b4e      	ldr	r3, [pc, #312]	@ (800170c <alarmSetISR+0x1a4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015da:	607b      	str	r3, [r7, #4]

	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 80015dc:	e00d      	b.n	80015fa <alarmSetISR+0x92>

		if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 80015de:	4b4a      	ldr	r3, [pc, #296]	@ (8001708 <alarmSetISR+0x1a0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2280      	movs	r2, #128	@ 0x80
 80015e4:	0212      	lsls	r2, r2, #8
 80015e6:	0011      	movs	r1, r2
 80015e8:	0018      	movs	r0, r3
 80015ea:	f001 fd41 	bl	8003070 <HAL_GPIO_ReadPin>
 80015ee:	1e03      	subs	r3, r0, #0
 80015f0:	d103      	bne.n	80015fa <alarmSetISR+0x92>
			alarmSetMode = true;
 80015f2:	4b47      	ldr	r3, [pc, #284]	@ (8001710 <alarmSetISR+0x1a8>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
//			HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
			break;
 80015f8:	e009      	b.n	800160e <alarmSetISR+0xa6>
	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 80015fa:	4b44      	ldr	r3, [pc, #272]	@ (800170c <alarmSetISR+0x1a4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	1ad2      	subs	r2, r2, r3
 8001606:	2380      	movs	r3, #128	@ 0x80
 8001608:	025b      	lsls	r3, r3, #9
 800160a:	429a      	cmp	r2, r3
 800160c:	d9e7      	bls.n	80015de <alarmSetISR+0x76>
		}

	}

	// Go through debounce once again
	HAL_TIM_Base_Stop(timerDelay);
 800160e:	4b3f      	ldr	r3, [pc, #252]	@ (800170c <alarmSetISR+0x1a4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	0018      	movs	r0, r3
 8001614:	f004 f916 	bl	8005844 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001618:	4b3c      	ldr	r3, [pc, #240]	@ (800170c <alarmSetISR+0x1a4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	0018      	movs	r0, r3
 800161e:	f004 f8c5 	bl	80057ac <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001622:	4b3a      	ldr	r3, [pc, #232]	@ (800170c <alarmSetISR+0x1a4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162a:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 4));
 800162c:	4b37      	ldr	r3, [pc, #220]	@ (800170c <alarmSetISR+0x1a4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	1ad2      	subs	r2, r2, r3
 8001638:	2380      	movs	r3, #128	@ 0x80
 800163a:	01db      	lsls	r3, r3, #7
 800163c:	429a      	cmp	r2, r3
 800163e:	d9f5      	bls.n	800162c <alarmSetISR+0xc4>
	/*
	 * Then, if we are in alarm set mode, go through the
	 * alarm set process until the button is pressed again
	 */

	HAL_TIM_Base_Stop(timerDelay);
 8001640:	4b32      	ldr	r3, [pc, #200]	@ (800170c <alarmSetISR+0x1a4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	0018      	movs	r0, r3
 8001646:	f004 f8fd 	bl	8005844 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 800164a:	4b30      	ldr	r3, [pc, #192]	@ (800170c <alarmSetISR+0x1a4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	0018      	movs	r0, r3
 8001650:	f004 f8ac 	bl	80057ac <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001654:	4b2d      	ldr	r3, [pc, #180]	@ (800170c <alarmSetISR+0x1a4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165c:	607b      	str	r3, [r7, #4]

	if(alarmSetMode) {
 800165e:	4b2c      	ldr	r3, [pc, #176]	@ (8001710 <alarmSetISR+0x1a8>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d046      	beq.n	80016f4 <alarmSetISR+0x18c>

		bool displayBlink = false;
 8001666:	1cfb      	adds	r3, r7, #3
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			updateAndDisplayAlarm();
 800166c:	f7ff fdd8 	bl	8001220 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 8001670:	4b26      	ldr	r3, [pc, #152]	@ (800170c <alarmSetISR+0x1a4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	1ad2      	subs	r2, r2, r3
 800167c:	2380      	movs	r3, #128	@ 0x80
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	429a      	cmp	r2, r3
 8001682:	d31e      	bcc.n	80016c2 <alarmSetISR+0x15a>

//				HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

				sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 8001684:	4b23      	ldr	r3, [pc, #140]	@ (8001714 <alarmSetISR+0x1ac>)
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	4b23      	ldr	r3, [pc, #140]	@ (8001718 <alarmSetISR+0x1b0>)
 800168a:	6819      	ldr	r1, [r3, #0]
 800168c:	1cfb      	adds	r3, r7, #3
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4a22      	ldr	r2, [pc, #136]	@ (800171c <alarmSetISR+0x1b4>)
 8001692:	5cd3      	ldrb	r3, [r2, r3]
 8001694:	001a      	movs	r2, r3
 8001696:	f000 fb57 	bl	8001d48 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 800169a:	4b1c      	ldr	r3, [pc, #112]	@ (800170c <alarmSetISR+0x1a4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a2:	607b      	str	r3, [r7, #4]
				displayBlink = !displayBlink;
 80016a4:	1cfb      	adds	r3, r7, #3
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	1e5a      	subs	r2, r3, #1
 80016aa:	4193      	sbcs	r3, r2
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2201      	movs	r2, #1
 80016b0:	4053      	eors	r3, r2
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	001a      	movs	r2, r3
 80016b6:	1cfb      	adds	r3, r7, #3
 80016b8:	701a      	strb	r2, [r3, #0]
 80016ba:	781a      	ldrb	r2, [r3, #0]
 80016bc:	2101      	movs	r1, #1
 80016be:	400a      	ands	r2, r1
 80016c0:	701a      	strb	r2, [r3, #0]

			}

		}while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET);
 80016c2:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <alarmSetISR+0x1a0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2280      	movs	r2, #128	@ 0x80
 80016c8:	0212      	lsls	r2, r2, #8
 80016ca:	0011      	movs	r1, r2
 80016cc:	0018      	movs	r0, r3
 80016ce:	f001 fccf 	bl	8003070 <HAL_GPIO_ReadPin>
 80016d2:	1e03      	subs	r3, r0, #0
 80016d4:	d1ca      	bne.n	800166c <alarmSetISR+0x104>

//		HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_RESET);

		sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 80016d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <alarmSetISR+0x1ac>)
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <alarmSetISR+0x1b0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	225a      	movs	r2, #90	@ 0x5a
 80016e0:	0019      	movs	r1, r3
 80016e2:	f000 fb31 	bl	8001d48 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 80016e6:	4b09      	ldr	r3, [pc, #36]	@ (800170c <alarmSetISR+0x1a4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	0018      	movs	r0, r3
 80016ec:	f004 f8aa 	bl	8005844 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 80016f0:	f7ff fd7a 	bl	80011e8 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 80016f4:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <alarmSetISR+0x1a8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 80016fa:	1cbb      	adds	r3, r7, #2
 80016fc:	781b      	ldrb	r3, [r3, #0]

}
 80016fe:	0018      	movs	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	b002      	add	sp, #8
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	20000000 	.word	0x20000000
 800170c:	20000028 	.word	0x20000028
 8001710:	20000220 	.word	0x20000220
 8001714:	2000002c 	.word	0x2000002c
 8001718:	20000030 	.word	0x20000030
 800171c:	080064f8 	.word	0x080064f8

08001720 <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0

//	printf("Entered hour set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);


	HAL_StatusTypeDef halRet = HAL_OK;
 8001726:	1dfb      	adds	r3, r7, #7
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 800172c:	4b0e      	ldr	r3, [pc, #56]	@ (8001768 <hourSetISR+0x48>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <hourSetISR+0x1a>

		alarmHourInc();
 8001734:	f000 f84c 	bl	80017d0 <alarmHourInc>
 8001738:	e00f      	b.n	800175a <hourSetISR+0x3a>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 800173a:	f000 f877 	bl	800182c <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 800173e:	490b      	ldr	r1, [pc, #44]	@ (800176c <hourSetISR+0x4c>)
 8001740:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <hourSetISR+0x50>)
 8001742:	2200      	movs	r2, #0
 8001744:	0018      	movs	r0, r3
 8001746:	f003 fa6f 	bl	8004c28 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 800174a:	f7ff fd4d 	bl	80011e8 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 800174e:	4a09      	ldr	r2, [pc, #36]	@ (8001774 <hourSetISR+0x54>)
 8001750:	4906      	ldr	r1, [pc, #24]	@ (800176c <hourSetISR+0x4c>)
 8001752:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <hourSetISR+0x50>)
 8001754:	0018      	movs	r0, r3
 8001756:	f7ff f95b 	bl	8000a10 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 800175a:	1dfb      	adds	r3, r7, #7
 800175c:	781b      	ldrb	r3, [r3, #0]

}
 800175e:	0018      	movs	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	b002      	add	sp, #8
 8001764:	bd80      	pop	{r7, pc}
 8001766:	46c0      	nop			@ (mov r8, r8)
 8001768:	20000220 	.word	0x20000220
 800176c:	200001f4 	.word	0x200001f4
 8001770:	20000130 	.word	0x20000130
 8001774:	20000208 	.word	0x20000208

08001778 <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0

//	printf("Entered minute set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

	HAL_StatusTypeDef halRet = HAL_OK;
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001784:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <minuteSetISR+0x48>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <minuteSetISR+0x1a>

		alarmMinuteInc();
 800178c:	f000 f888 	bl	80018a0 <alarmMinuteInc>
 8001790:	e00f      	b.n	80017b2 <minuteSetISR+0x3a>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 8001792:	f000 f8a3 	bl	80018dc <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001796:	490b      	ldr	r1, [pc, #44]	@ (80017c4 <minuteSetISR+0x4c>)
 8001798:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <minuteSetISR+0x50>)
 800179a:	2200      	movs	r2, #0
 800179c:	0018      	movs	r0, r3
 800179e:	f003 fa43 	bl	8004c28 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80017a2:	f7ff fd21 	bl	80011e8 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80017a6:	4a09      	ldr	r2, [pc, #36]	@ (80017cc <minuteSetISR+0x54>)
 80017a8:	4906      	ldr	r1, [pc, #24]	@ (80017c4 <minuteSetISR+0x4c>)
 80017aa:	4b07      	ldr	r3, [pc, #28]	@ (80017c8 <minuteSetISR+0x50>)
 80017ac:	0018      	movs	r0, r3
 80017ae:	f7ff f92f 	bl	8000a10 <getRTCTime>

		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 80017b2:	1dfb      	adds	r3, r7, #7
 80017b4:	781b      	ldrb	r3, [r3, #0]
}
 80017b6:	0018      	movs	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b002      	add	sp, #8
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			@ (mov r8, r8)
 80017c0:	20000220 	.word	0x20000220
 80017c4:	200001f4 	.word	0x200001f4
 80017c8:	20000130 	.word	0x20000130
 80017cc:	20000208 	.word	0x20000208

080017d0 <alarmHourInc>:

void alarmHourInc(void) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 80017d4:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <alarmHourInc+0x58>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b0b      	cmp	r3, #11
 80017da:	d903      	bls.n	80017e4 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <alarmHourInc+0x58>)
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 80017e2:	e01e      	b.n	8001822 <alarmHourInc+0x52>
	else if(userAlarmTime.Hours == 11) {
 80017e4:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <alarmHourInc+0x58>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b0b      	cmp	r3, #11
 80017ea:	d10e      	bne.n	800180a <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80017ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <alarmHourInc+0x58>)
 80017ee:	78db      	ldrb	r3, [r3, #3]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d103      	bne.n	80017fc <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <alarmHourInc+0x58>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	70da      	strb	r2, [r3, #3]
 80017fa:	e002      	b.n	8001802 <alarmHourInc+0x32>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80017fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <alarmHourInc+0x58>)
 80017fe:	2200      	movs	r2, #0
 8001800:	70da      	strb	r2, [r3, #3]
		userAlarmTime.Hours = 12;
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <alarmHourInc+0x58>)
 8001804:	220c      	movs	r2, #12
 8001806:	701a      	strb	r2, [r3, #0]
}
 8001808:	e00b      	b.n	8001822 <alarmHourInc+0x52>
	else if(userAlarmTime.Hours < 11) {
 800180a:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <alarmHourInc+0x58>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b0a      	cmp	r3, #10
 8001810:	d806      	bhi.n	8001820 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001812:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <alarmHourInc+0x58>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	3301      	adds	r3, #1
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4b03      	ldr	r3, [pc, #12]	@ (8001828 <alarmHourInc+0x58>)
 800181c:	701a      	strb	r2, [r3, #0]
}
 800181e:	e000      	b.n	8001822 <alarmHourInc+0x52>
		__NOP();
 8001820:	46c0      	nop			@ (mov r8, r8)
}
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	2000020c 	.word	0x2000020c

0800182c <currHourInc>:

void currHourInc(void) {
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001830:	4a17      	ldr	r2, [pc, #92]	@ (8001890 <currHourInc+0x64>)
 8001832:	4918      	ldr	r1, [pc, #96]	@ (8001894 <currHourInc+0x68>)
 8001834:	4b18      	ldr	r3, [pc, #96]	@ (8001898 <currHourInc+0x6c>)
 8001836:	0018      	movs	r0, r3
 8001838:	f7ff f8ea 	bl	8000a10 <getRTCTime>

	if(currTime.Hours >= 12) {
 800183c:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <currHourInc+0x68>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b0b      	cmp	r3, #11
 8001842:	d903      	bls.n	800184c <currHourInc+0x20>
		currTime.Hours = 1;
 8001844:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <currHourInc+0x68>)
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 800184a:	e01e      	b.n	800188a <currHourInc+0x5e>
	else if(currTime.Hours == 11) {
 800184c:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <currHourInc+0x68>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b0b      	cmp	r3, #11
 8001852:	d10e      	bne.n	8001872 <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001854:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <currHourInc+0x68>)
 8001856:	78db      	ldrb	r3, [r3, #3]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d103      	bne.n	8001864 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800185c:	4b0d      	ldr	r3, [pc, #52]	@ (8001894 <currHourInc+0x68>)
 800185e:	2201      	movs	r2, #1
 8001860:	70da      	strb	r2, [r3, #3]
 8001862:	e002      	b.n	800186a <currHourInc+0x3e>
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001864:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <currHourInc+0x68>)
 8001866:	2200      	movs	r2, #0
 8001868:	70da      	strb	r2, [r3, #3]
		currTime.Hours = 12;
 800186a:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <currHourInc+0x68>)
 800186c:	220c      	movs	r2, #12
 800186e:	701a      	strb	r2, [r3, #0]
}
 8001870:	e00b      	b.n	800188a <currHourInc+0x5e>
	else if(userAlarmTime.Hours < 11) {
 8001872:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <currHourInc+0x70>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b0a      	cmp	r3, #10
 8001878:	d806      	bhi.n	8001888 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <currHourInc+0x68>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <currHourInc+0x68>)
 8001884:	701a      	strb	r2, [r3, #0]
}
 8001886:	e000      	b.n	800188a <currHourInc+0x5e>
		__NOP();
 8001888:	46c0      	nop			@ (mov r8, r8)
}
 800188a:	46c0      	nop			@ (mov r8, r8)
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000208 	.word	0x20000208
 8001894:	200001f4 	.word	0x200001f4
 8001898:	20000130 	.word	0x20000130
 800189c:	2000020c 	.word	0x2000020c

080018a0 <alarmMinuteInc>:

void alarmMinuteInc(void) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 80018a4:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <alarmMinuteInc+0x38>)
 80018a6:	785b      	ldrb	r3, [r3, #1]
 80018a8:	2b3a      	cmp	r3, #58	@ 0x3a
 80018aa:	d905      	bls.n	80018b8 <alarmMinuteInc+0x18>
		alarmHourInc();
 80018ac:	f7ff ff90 	bl	80017d0 <alarmHourInc>
		userAlarmTime.Minutes = 0;
 80018b0:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <alarmMinuteInc+0x38>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 80018b6:	e00b      	b.n	80018d0 <alarmMinuteInc+0x30>
	else if(userAlarmTime.Minutes < 59) {
 80018b8:	4b07      	ldr	r3, [pc, #28]	@ (80018d8 <alarmMinuteInc+0x38>)
 80018ba:	785b      	ldrb	r3, [r3, #1]
 80018bc:	2b3a      	cmp	r3, #58	@ 0x3a
 80018be:	d806      	bhi.n	80018ce <alarmMinuteInc+0x2e>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 80018c0:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <alarmMinuteInc+0x38>)
 80018c2:	785b      	ldrb	r3, [r3, #1]
 80018c4:	3301      	adds	r3, #1
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <alarmMinuteInc+0x38>)
 80018ca:	705a      	strb	r2, [r3, #1]
}
 80018cc:	e000      	b.n	80018d0 <alarmMinuteInc+0x30>
		__NOP();
 80018ce:	46c0      	nop			@ (mov r8, r8)
}
 80018d0:	46c0      	nop			@ (mov r8, r8)
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			@ (mov r8, r8)
 80018d8:	2000020c 	.word	0x2000020c

080018dc <currMinuteInc>:

void currMinuteInc(void) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 80018e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001920 <currMinuteInc+0x44>)
 80018e2:	4910      	ldr	r1, [pc, #64]	@ (8001924 <currMinuteInc+0x48>)
 80018e4:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <currMinuteInc+0x4c>)
 80018e6:	0018      	movs	r0, r3
 80018e8:	f7ff f892 	bl	8000a10 <getRTCTime>

	if(currTime.Minutes >= 59) {
 80018ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001924 <currMinuteInc+0x48>)
 80018ee:	785b      	ldrb	r3, [r3, #1]
 80018f0:	2b3a      	cmp	r3, #58	@ 0x3a
 80018f2:	d905      	bls.n	8001900 <currMinuteInc+0x24>
		currHourInc();
 80018f4:	f7ff ff9a 	bl	800182c <currHourInc>
		currTime.Minutes = 0;
 80018f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001924 <currMinuteInc+0x48>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 80018fe:	e00b      	b.n	8001918 <currMinuteInc+0x3c>
	else if(currTime.Minutes < 59) {
 8001900:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <currMinuteInc+0x48>)
 8001902:	785b      	ldrb	r3, [r3, #1]
 8001904:	2b3a      	cmp	r3, #58	@ 0x3a
 8001906:	d806      	bhi.n	8001916 <currMinuteInc+0x3a>
		currTime.Minutes = currTime.Minutes + 1;
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <currMinuteInc+0x48>)
 800190a:	785b      	ldrb	r3, [r3, #1]
 800190c:	3301      	adds	r3, #1
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b04      	ldr	r3, [pc, #16]	@ (8001924 <currMinuteInc+0x48>)
 8001912:	705a      	strb	r2, [r3, #1]
}
 8001914:	e000      	b.n	8001918 <currMinuteInc+0x3c>
		__NOP();
 8001916:	46c0      	nop			@ (mov r8, r8)
}
 8001918:	46c0      	nop			@ (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			@ (mov r8, r8)
 8001920:	20000208 	.word	0x20000208
 8001924:	200001f4 	.word	0x200001f4
 8001928:	20000130 	.word	0x20000130

0800192c <dispError>:

void dispError(void) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8001932:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <dispError+0x78>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	0018      	movs	r0, r3
 8001938:	f003 ff84 	bl	8005844 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 800193c:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <dispError+0x78>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	0018      	movs	r0, r3
 8001942:	f003 ff33 	bl	80057ac <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001946:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <dispError+0x78>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194e:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001950:	1cfb      	adds	r3, r7, #3
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001956:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <dispError+0x78>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	4a11      	ldr	r2, [pc, #68]	@ (80019a8 <dispError+0x7c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d9f6      	bls.n	8001956 <dispError+0x2a>

			HAL_GPIO_TogglePin(alarmLEDPort, alarmLEDPin);
 8001968:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <dispError+0x80>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2280      	movs	r2, #128	@ 0x80
 800196e:	0152      	lsls	r2, r2, #5
 8001970:	0011      	movs	r1, r2
 8001972:	0018      	movs	r0, r3
 8001974:	f001 fbb6 	bl	80030e4 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001978:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <dispError+0x78>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001980:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001982:	1cfb      	adds	r3, r7, #3
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	1e5a      	subs	r2, r3, #1
 8001988:	4193      	sbcs	r3, r2
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2201      	movs	r2, #1
 800198e:	4053      	eors	r3, r2
 8001990:	b2db      	uxtb	r3, r3
 8001992:	001a      	movs	r2, r3
 8001994:	1cfb      	adds	r3, r7, #3
 8001996:	701a      	strb	r2, [r3, #0]
 8001998:	781a      	ldrb	r2, [r3, #0]
 800199a:	2101      	movs	r1, #1
 800199c:	400a      	ands	r2, r1
 800199e:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 80019a0:	e7d9      	b.n	8001956 <dispError+0x2a>
 80019a2:	46c0      	nop			@ (mov r8, r8)
 80019a4:	20000028 	.word	0x20000028
 80019a8:	00003ffe 	.word	0x00003ffe
 80019ac:	20000008 	.word	0x20000008

080019b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b4:	b672      	cpsid	i
}
 80019b6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b8:	46c0      	nop			@ (mov r8, r8)
 80019ba:	e7fd      	b.n	80019b8 <Error_Handler+0x8>

080019bc <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM,
					uint32_t tim_PWM_CHANNEL) {
 80019bc:	b5b0      	push	{r4, r5, r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	0005      	movs	r5, r0
 80019c4:	000c      	movs	r4, r1
 80019c6:	0010      	movs	r0, r2
 80019c8:	0019      	movs	r1, r3
 80019ca:	1dbb      	adds	r3, r7, #6
 80019cc:	1c2a      	adds	r2, r5, #0
 80019ce:	801a      	strh	r2, [r3, #0]
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	1c22      	adds	r2, r4, #0
 80019d4:	801a      	strh	r2, [r3, #0]
 80019d6:	1cbb      	adds	r3, r7, #2
 80019d8:	1c02      	adds	r2, r0, #0
 80019da:	801a      	strh	r2, [r3, #0]
 80019dc:	003b      	movs	r3, r7
 80019de:	1c0a      	adds	r2, r1, #0
 80019e0:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 80019e2:	4b78      	ldr	r3, [pc, #480]	@ (8001bc4 <sevSeg_Init+0x208>)
 80019e4:	1dba      	adds	r2, r7, #6
 80019e6:	8812      	ldrh	r2, [r2, #0]
 80019e8:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 80019ea:	4b77      	ldr	r3, [pc, #476]	@ (8001bc8 <sevSeg_Init+0x20c>)
 80019ec:	1d3a      	adds	r2, r7, #4
 80019ee:	8812      	ldrh	r2, [r2, #0]
 80019f0:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 80019f2:	4b76      	ldr	r3, [pc, #472]	@ (8001bcc <sevSeg_Init+0x210>)
 80019f4:	1cba      	adds	r2, r7, #2
 80019f6:	8812      	ldrh	r2, [r2, #0]
 80019f8:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 80019fa:	4b75      	ldr	r3, [pc, #468]	@ (8001bd0 <sevSeg_Init+0x214>)
 80019fc:	003a      	movs	r2, r7
 80019fe:	8812      	ldrh	r2, [r2, #0]
 8001a00:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001a02:	4a74      	ldr	r2, [pc, #464]	@ (8001bd4 <sevSeg_Init+0x218>)
 8001a04:	2330      	movs	r3, #48	@ 0x30
 8001a06:	18fb      	adds	r3, r7, r3
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	8013      	strh	r3, [r2, #0]

	for(int i = 0; i < 5; i++) {
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	e00b      	b.n	8001a2a <sevSeg_Init+0x6e>
		portArray[i] = GPIOPortArray[i];
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a18:	18d3      	adds	r3, r2, r3
 8001a1a:	6819      	ldr	r1, [r3, #0]
 8001a1c:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd8 <sevSeg_Init+0x21c>)
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	0092      	lsls	r2, r2, #2
 8001a22:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	3301      	adds	r3, #1
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	ddf0      	ble.n	8001a12 <sevSeg_Init+0x56>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001a30:	4b69      	ldr	r3, [pc, #420]	@ (8001bd8 <sevSeg_Init+0x21c>)
 8001a32:	6918      	ldr	r0, [r3, #16]
 8001a34:	4b67      	ldr	r3, [pc, #412]	@ (8001bd4 <sevSeg_Init+0x218>)
 8001a36:	8819      	ldrh	r1, [r3, #0]
 8001a38:	4b68      	ldr	r3, [pc, #416]	@ (8001bdc <sevSeg_Init+0x220>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	001a      	movs	r2, r3
 8001a3e:	f001 fb34 	bl	80030aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001a42:	4b65      	ldr	r3, [pc, #404]	@ (8001bd8 <sevSeg_Init+0x21c>)
 8001a44:	6918      	ldr	r0, [r3, #16]
 8001a46:	4b63      	ldr	r3, [pc, #396]	@ (8001bd4 <sevSeg_Init+0x218>)
 8001a48:	8819      	ldrh	r1, [r3, #0]
 8001a4a:	4b64      	ldr	r3, [pc, #400]	@ (8001bdc <sevSeg_Init+0x220>)
 8001a4c:	785b      	ldrb	r3, [r3, #1]
 8001a4e:	001a      	movs	r2, r3
 8001a50:	f001 fb2b 	bl	80030aa <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001a54:	4b60      	ldr	r3, [pc, #384]	@ (8001bd8 <sevSeg_Init+0x21c>)
 8001a56:	6898      	ldr	r0, [r3, #8]
 8001a58:	4b5c      	ldr	r3, [pc, #368]	@ (8001bcc <sevSeg_Init+0x210>)
 8001a5a:	8819      	ldrh	r1, [r3, #0]
 8001a5c:	4b5f      	ldr	r3, [pc, #380]	@ (8001bdc <sevSeg_Init+0x220>)
 8001a5e:	785b      	ldrb	r3, [r3, #1]
 8001a60:	001a      	movs	r2, r3
 8001a62:	f001 fb22 	bl	80030aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001a66:	4b5c      	ldr	r3, [pc, #368]	@ (8001bd8 <sevSeg_Init+0x21c>)
 8001a68:	6898      	ldr	r0, [r3, #8]
 8001a6a:	4b58      	ldr	r3, [pc, #352]	@ (8001bcc <sevSeg_Init+0x210>)
 8001a6c:	8819      	ldrh	r1, [r3, #0]
 8001a6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bdc <sevSeg_Init+0x220>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	001a      	movs	r2, r3
 8001a74:	f001 fb19 	bl	80030aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8001a78:	4b57      	ldr	r3, [pc, #348]	@ (8001bd8 <sevSeg_Init+0x21c>)
 8001a7a:	68d8      	ldr	r0, [r3, #12]
 8001a7c:	4b54      	ldr	r3, [pc, #336]	@ (8001bd0 <sevSeg_Init+0x214>)
 8001a7e:	8819      	ldrh	r1, [r3, #0]
 8001a80:	4b56      	ldr	r3, [pc, #344]	@ (8001bdc <sevSeg_Init+0x220>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	001a      	movs	r2, r3
 8001a86:	f001 fb10 	bl	80030aa <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(htim_PWM, tim_PWM_CHANNEL, 50);
 8001a8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a8e:	2232      	movs	r2, #50	@ 0x32
 8001a90:	0018      	movs	r0, r3
 8001a92:	f000 f959 	bl	8001d48 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8001a96:	2308      	movs	r3, #8
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	4a51      	ldr	r2, [pc, #324]	@ (8001be0 <sevSeg_Init+0x224>)
 8001a9c:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e038      	b.n	8001b16 <sevSeg_Init+0x15a>

		sendByte = hofSymb[i];
 8001aa4:	231b      	movs	r3, #27
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	18b9      	adds	r1, r7, r2
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	188a      	adds	r2, r1, r2
 8001ab0:	7812      	ldrb	r2, [r2, #0]
 8001ab2:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	e027      	b.n	8001b0a <sevSeg_Init+0x14e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001aba:	4b47      	ldr	r3, [pc, #284]	@ (8001bd8 <sevSeg_Init+0x21c>)
 8001abc:	6818      	ldr	r0, [r3, #0]
 8001abe:	4b41      	ldr	r3, [pc, #260]	@ (8001bc4 <sevSeg_Init+0x208>)
 8001ac0:	8819      	ldrh	r1, [r3, #0]
 8001ac2:	241b      	movs	r4, #27
 8001ac4:	193b      	adds	r3, r7, r4
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4013      	ands	r3, r2
 8001acc:	4a43      	ldr	r2, [pc, #268]	@ (8001bdc <sevSeg_Init+0x220>)
 8001ace:	5cd3      	ldrb	r3, [r2, r3]
 8001ad0:	001a      	movs	r2, r3
 8001ad2:	f001 faea 	bl	80030aa <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001ad6:	4b40      	ldr	r3, [pc, #256]	@ (8001bd8 <sevSeg_Init+0x21c>)
 8001ad8:	6858      	ldr	r0, [r3, #4]
 8001ada:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc8 <sevSeg_Init+0x20c>)
 8001adc:	8819      	ldrh	r1, [r3, #0]
 8001ade:	4b3f      	ldr	r3, [pc, #252]	@ (8001bdc <sevSeg_Init+0x220>)
 8001ae0:	785b      	ldrb	r3, [r3, #1]
 8001ae2:	001a      	movs	r2, r3
 8001ae4:	f001 fae1 	bl	80030aa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd8 <sevSeg_Init+0x21c>)
 8001aea:	6858      	ldr	r0, [r3, #4]
 8001aec:	4b36      	ldr	r3, [pc, #216]	@ (8001bc8 <sevSeg_Init+0x20c>)
 8001aee:	8819      	ldrh	r1, [r3, #0]
 8001af0:	4b3a      	ldr	r3, [pc, #232]	@ (8001bdc <sevSeg_Init+0x220>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	001a      	movs	r2, r3
 8001af6:	f001 fad8 	bl	80030aa <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001afa:	193b      	adds	r3, r7, r4
 8001afc:	193a      	adds	r2, r7, r4
 8001afe:	7812      	ldrb	r2, [r2, #0]
 8001b00:	0852      	lsrs	r2, r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	3301      	adds	r3, #1
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	2b07      	cmp	r3, #7
 8001b0e:	ddd4      	ble.n	8001aba <sevSeg_Init+0xfe>
	for(int i = 0; i <= 3; i++) {
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3301      	adds	r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	ddc3      	ble.n	8001aa4 <sevSeg_Init+0xe8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001b1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd8 <sevSeg_Init+0x21c>)
 8001b1e:	6898      	ldr	r0, [r3, #8]
 8001b20:	4b2a      	ldr	r3, [pc, #168]	@ (8001bcc <sevSeg_Init+0x210>)
 8001b22:	8819      	ldrh	r1, [r3, #0]
 8001b24:	4b2d      	ldr	r3, [pc, #180]	@ (8001bdc <sevSeg_Init+0x220>)
 8001b26:	785b      	ldrb	r3, [r3, #1]
 8001b28:	001a      	movs	r2, r3
 8001b2a:	f001 fabe 	bl	80030aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd8 <sevSeg_Init+0x21c>)
 8001b30:	6898      	ldr	r0, [r3, #8]
 8001b32:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <sevSeg_Init+0x210>)
 8001b34:	8819      	ldrh	r1, [r3, #0]
 8001b36:	4b29      	ldr	r3, [pc, #164]	@ (8001bdc <sevSeg_Init+0x220>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	001a      	movs	r2, r3
 8001b3c:	f001 fab5 	bl	80030aa <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8001b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b42:	0018      	movs	r0, r3
 8001b44:	f003 fe7e 	bl	8005844 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8001b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f003 fe2e 	bl	80057ac <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8001b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b56:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8001b58:	46c0      	nop			@ (mov r8, r8)
 8001b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1ad2      	subs	r2, r2, r3
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	01db      	lsls	r3, r3, #7
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d3f6      	bcc.n	8001b5a <sevSeg_Init+0x19e>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8001b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f003 fe68 	bl	8005844 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001b74:	4b18      	ldr	r3, [pc, #96]	@ (8001bd8 <sevSeg_Init+0x21c>)
 8001b76:	6918      	ldr	r0, [r3, #16]
 8001b78:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <sevSeg_Init+0x218>)
 8001b7a:	8819      	ldrh	r1, [r3, #0]
 8001b7c:	4b17      	ldr	r3, [pc, #92]	@ (8001bdc <sevSeg_Init+0x220>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	001a      	movs	r2, r3
 8001b82:	f001 fa92 	bl	80030aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001b86:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <sevSeg_Init+0x21c>)
 8001b88:	6918      	ldr	r0, [r3, #16]
 8001b8a:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <sevSeg_Init+0x218>)
 8001b8c:	8819      	ldrh	r1, [r3, #0]
 8001b8e:	4b13      	ldr	r3, [pc, #76]	@ (8001bdc <sevSeg_Init+0x220>)
 8001b90:	785b      	ldrb	r3, [r3, #1]
 8001b92:	001a      	movs	r2, r3
 8001b94:	f001 fa89 	bl	80030aa <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001b98:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <sevSeg_Init+0x21c>)
 8001b9a:	6898      	ldr	r0, [r3, #8]
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bcc <sevSeg_Init+0x210>)
 8001b9e:	8819      	ldrh	r1, [r3, #0]
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <sevSeg_Init+0x220>)
 8001ba2:	785b      	ldrb	r3, [r3, #1]
 8001ba4:	001a      	movs	r2, r3
 8001ba6:	f001 fa80 	bl	80030aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001baa:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <sevSeg_Init+0x21c>)
 8001bac:	6898      	ldr	r0, [r3, #8]
 8001bae:	4b07      	ldr	r3, [pc, #28]	@ (8001bcc <sevSeg_Init+0x210>)
 8001bb0:	8819      	ldrh	r1, [r3, #0]
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <sevSeg_Init+0x220>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	001a      	movs	r2, r3
 8001bb8:	f001 fa77 	bl	80030aa <HAL_GPIO_WritePin>

}
 8001bbc:	46c0      	nop			@ (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b008      	add	sp, #32
 8001bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc4:	20000238 	.word	0x20000238
 8001bc8:	2000023a 	.word	0x2000023a
 8001bcc:	2000023c 	.word	0x2000023c
 8001bd0:	2000023e 	.word	0x2000023e
 8001bd4:	20000240 	.word	0x20000240
 8001bd8:	20000034 	.word	0x20000034
 8001bdc:	20000048 	.word	0x20000048
 8001be0:	471d3700 	.word	0x471d3700

08001be4 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 8001be4:	b590      	push	{r4, r7, lr}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	210a      	movs	r1, #10
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f7fe fa86 	bl	8000104 <__udivsi3>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	2408      	movs	r4, #8
 8001bfe:	193b      	adds	r3, r7, r4
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	210a      	movs	r1, #10
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f7fe fb01 	bl	8000210 <__aeabi_uidivmod>
 8001c0e:	000b      	movs	r3, r1
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	193b      	adds	r3, r7, r4
 8001c14:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001c1a:	210a      	movs	r1, #10
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f7fe fa71 	bl	8000104 <__udivsi3>
 8001c22:	0003      	movs	r3, r0
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	193b      	adds	r3, r7, r4
 8001c28:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001c2e:	210a      	movs	r1, #10
 8001c30:	0018      	movs	r0, r3
 8001c32:	f7fe faed 	bl	8000210 <__aeabi_uidivmod>
 8001c36:	000b      	movs	r3, r1
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	193b      	adds	r3, r7, r4
 8001c3c:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 8001c3e:	2116      	movs	r1, #22
 8001c40:	187b      	adds	r3, r7, r1
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	78db      	ldrb	r3, [r3, #3]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d102      	bne.n	8001c54 <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 8001c4e:	187b      	adds	r3, r7, r1
 8001c50:	2202      	movs	r2, #2
 8001c52:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	e04f      	b.n	8001cfa <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 8001c5a:	2308      	movs	r3, #8
 8001c5c:	18fa      	adds	r2, r7, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	18d3      	adds	r3, r2, r3
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	0019      	movs	r1, r3
 8001c66:	2417      	movs	r4, #23
 8001c68:	193b      	adds	r3, r7, r4
 8001c6a:	4a30      	ldr	r2, [pc, #192]	@ (8001d2c <sevSeg_updateDigits+0x148>)
 8001c6c:	5c52      	ldrb	r2, [r2, r1]
 8001c6e:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d110      	bne.n	8001c98 <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	210a      	movs	r1, #10
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f7fe fa41 	bl	8000104 <__udivsi3>
 8001c82:	0003      	movs	r3, r0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	001a      	movs	r2, r3
 8001c88:	2316      	movs	r3, #22
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	18d2      	adds	r2, r2, r3
 8001c90:	193b      	adds	r3, r7, r4
 8001c92:	4927      	ldr	r1, [pc, #156]	@ (8001d30 <sevSeg_updateDigits+0x14c>)
 8001c94:	5c8a      	ldrb	r2, [r1, r2]
 8001c96:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	e027      	b.n	8001cee <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001c9e:	4b25      	ldr	r3, [pc, #148]	@ (8001d34 <sevSeg_updateDigits+0x150>)
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	4b25      	ldr	r3, [pc, #148]	@ (8001d38 <sevSeg_updateDigits+0x154>)
 8001ca4:	8819      	ldrh	r1, [r3, #0]
 8001ca6:	2417      	movs	r4, #23
 8001ca8:	193b      	adds	r3, r7, r4
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2201      	movs	r2, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	4a22      	ldr	r2, [pc, #136]	@ (8001d3c <sevSeg_updateDigits+0x158>)
 8001cb2:	5cd3      	ldrb	r3, [r2, r3]
 8001cb4:	001a      	movs	r2, r3
 8001cb6:	f001 f9f8 	bl	80030aa <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001cba:	4b1e      	ldr	r3, [pc, #120]	@ (8001d34 <sevSeg_updateDigits+0x150>)
 8001cbc:	6858      	ldr	r0, [r3, #4]
 8001cbe:	4b20      	ldr	r3, [pc, #128]	@ (8001d40 <sevSeg_updateDigits+0x15c>)
 8001cc0:	8819      	ldrh	r1, [r3, #0]
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d3c <sevSeg_updateDigits+0x158>)
 8001cc4:	785b      	ldrb	r3, [r3, #1]
 8001cc6:	001a      	movs	r2, r3
 8001cc8:	f001 f9ef 	bl	80030aa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001ccc:	4b19      	ldr	r3, [pc, #100]	@ (8001d34 <sevSeg_updateDigits+0x150>)
 8001cce:	6858      	ldr	r0, [r3, #4]
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d40 <sevSeg_updateDigits+0x15c>)
 8001cd2:	8819      	ldrh	r1, [r3, #0]
 8001cd4:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <sevSeg_updateDigits+0x158>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	001a      	movs	r2, r3
 8001cda:	f001 f9e6 	bl	80030aa <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001cde:	193b      	adds	r3, r7, r4
 8001ce0:	193a      	adds	r2, r7, r4
 8001ce2:	7812      	ldrb	r2, [r2, #0]
 8001ce4:	0852      	lsrs	r2, r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3301      	adds	r3, #1
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2b07      	cmp	r3, #7
 8001cf2:	ddd4      	ble.n	8001c9e <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	ddac      	ble.n	8001c5a <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001d00:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <sevSeg_updateDigits+0x150>)
 8001d02:	6898      	ldr	r0, [r3, #8]
 8001d04:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <sevSeg_updateDigits+0x160>)
 8001d06:	8819      	ldrh	r1, [r3, #0]
 8001d08:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <sevSeg_updateDigits+0x158>)
 8001d0a:	785b      	ldrb	r3, [r3, #1]
 8001d0c:	001a      	movs	r2, r3
 8001d0e:	f001 f9cc 	bl	80030aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001d12:	4b08      	ldr	r3, [pc, #32]	@ (8001d34 <sevSeg_updateDigits+0x150>)
 8001d14:	6898      	ldr	r0, [r3, #8]
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <sevSeg_updateDigits+0x160>)
 8001d18:	8819      	ldrh	r1, [r3, #0]
 8001d1a:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <sevSeg_updateDigits+0x158>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	001a      	movs	r2, r3
 8001d20:	f001 f9c3 	bl	80030aa <HAL_GPIO_WritePin>

	return;
 8001d24:	46c0      	nop			@ (mov r8, r8)

}
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b007      	add	sp, #28
 8001d2a:	bd90      	pop	{r4, r7, pc}
 8001d2c:	080064fc 	.word	0x080064fc
 8001d30:	08006508 	.word	0x08006508
 8001d34:	20000034 	.word	0x20000034
 8001d38:	20000238 	.word	0x20000238
 8001d3c:	20000048 	.word	0x20000048
 8001d40:	2000023a 	.word	0x2000023a
 8001d44:	2000023c 	.word	0x2000023c

08001d48 <sevSeg_setIntensity>:

void sevSeg_setIntensity(TIM_HandleTypeDef *htim_PWM, uint32_t tim_PWM_CHANNEL, uint16_t dutyCycle) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	1dbb      	adds	r3, r7, #6
 8001d54:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(htim_PWM, tim_PWM_CHANNEL, dutyCycle);
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d105      	bne.n	8001d68 <sevSeg_setIntensity+0x20>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	1dba      	adds	r2, r7, #6
 8001d62:	8812      	ldrh	r2, [r2, #0]
 8001d64:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d66:	e028      	b.n	8001dba <sevSeg_setIntensity+0x72>
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d105      	bne.n	8001d7a <sevSeg_setIntensity+0x32>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	1dbb      	adds	r3, r7, #6
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d78:	e01f      	b.n	8001dba <sevSeg_setIntensity+0x72>
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d105      	bne.n	8001d8c <sevSeg_setIntensity+0x44>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	1dbb      	adds	r3, r7, #6
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001d8a:	e016      	b.n	8001dba <sevSeg_setIntensity+0x72>
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	d105      	bne.n	8001d9e <sevSeg_setIntensity+0x56>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	1dbb      	adds	r3, r7, #6
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9c:	e00d      	b.n	8001dba <sevSeg_setIntensity+0x72>
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2b10      	cmp	r3, #16
 8001da2:	d105      	bne.n	8001db0 <sevSeg_setIntensity+0x68>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	1dbb      	adds	r3, r7, #6
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dae:	e004      	b.n	8001dba <sevSeg_setIntensity+0x72>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	1dbb      	adds	r3, r7, #6
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(htim_PWM, tim_PWM_CHANNEL);
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	0011      	movs	r1, r2
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f003 fdbd 	bl	8005940 <HAL_TIM_PWM_Start>

}
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b004      	add	sp, #16
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	4b13      	ldr	r3, [pc, #76]	@ (8001e24 <HAL_MspInit+0x54>)
 8001dd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dda:	4b12      	ldr	r3, [pc, #72]	@ (8001e24 <HAL_MspInit+0x54>)
 8001ddc:	2101      	movs	r1, #1
 8001dde:	430a      	orrs	r2, r1
 8001de0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001de2:	4b10      	ldr	r3, [pc, #64]	@ (8001e24 <HAL_MspInit+0x54>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	2201      	movs	r2, #1
 8001de8:	4013      	ands	r3, r2
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dee:	4b0d      	ldr	r3, [pc, #52]	@ (8001e24 <HAL_MspInit+0x54>)
 8001df0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001df2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e24 <HAL_MspInit+0x54>)
 8001df4:	2180      	movs	r1, #128	@ 0x80
 8001df6:	0549      	lsls	r1, r1, #21
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001dfc:	4b09      	ldr	r3, [pc, #36]	@ (8001e24 <HAL_MspInit+0x54>)
 8001dfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e00:	2380      	movs	r3, #128	@ 0x80
 8001e02:	055b      	lsls	r3, r3, #21
 8001e04:	4013      	ands	r3, r2
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2004      	movs	r0, #4
 8001e10:	f000 ff98 	bl	8002d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001e14:	2004      	movs	r0, #4
 8001e16:	f000 ffaa 	bl	8002d6e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e1a:	46c0      	nop			@ (mov r8, r8)
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	b002      	add	sp, #8
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	46c0      	nop			@ (mov r8, r8)
 8001e24:	40021000 	.word	0x40021000

08001e28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b08b      	sub	sp, #44	@ 0x2c
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	2414      	movs	r4, #20
 8001e32:	193b      	adds	r3, r7, r4
 8001e34:	0018      	movs	r0, r3
 8001e36:	2314      	movs	r3, #20
 8001e38:	001a      	movs	r2, r3
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	f004 fb0a 	bl	8006454 <memset>
  if(hadc->Instance==ADC1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a18      	ldr	r2, [pc, #96]	@ (8001ea8 <HAL_ADC_MspInit+0x80>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d129      	bne.n	8001e9e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001e4a:	4b18      	ldr	r3, [pc, #96]	@ (8001eac <HAL_ADC_MspInit+0x84>)
 8001e4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e4e:	4b17      	ldr	r3, [pc, #92]	@ (8001eac <HAL_ADC_MspInit+0x84>)
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	0349      	lsls	r1, r1, #13
 8001e54:	430a      	orrs	r2, r1
 8001e56:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e58:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <HAL_ADC_MspInit+0x84>)
 8001e5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e5c:	2380      	movs	r3, #128	@ 0x80
 8001e5e:	035b      	lsls	r3, r3, #13
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e66:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <HAL_ADC_MspInit+0x84>)
 8001e68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e6a:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <HAL_ADC_MspInit+0x84>)
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e72:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <HAL_ADC_MspInit+0x84>)
 8001e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e76:	2201      	movs	r2, #1
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e7e:	193b      	adds	r3, r7, r4
 8001e80:	2204      	movs	r2, #4
 8001e82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e84:	193b      	adds	r3, r7, r4
 8001e86:	2203      	movs	r2, #3
 8001e88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	193b      	adds	r3, r7, r4
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e90:	193a      	adds	r2, r7, r4
 8001e92:	23a0      	movs	r3, #160	@ 0xa0
 8001e94:	05db      	lsls	r3, r3, #23
 8001e96:	0011      	movs	r1, r2
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f000 ff85 	bl	8002da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e9e:	46c0      	nop			@ (mov r8, r8)
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b00b      	add	sp, #44	@ 0x2c
 8001ea4:	bd90      	pop	{r4, r7, pc}
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	40012400 	.word	0x40012400
 8001eac:	40021000 	.word	0x40021000

08001eb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b095      	sub	sp, #84	@ 0x54
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	233c      	movs	r3, #60	@ 0x3c
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	2314      	movs	r3, #20
 8001ec0:	001a      	movs	r2, r3
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	f004 fac6 	bl	8006454 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec8:	2414      	movs	r4, #20
 8001eca:	193b      	adds	r3, r7, r4
 8001ecc:	0018      	movs	r0, r3
 8001ece:	2328      	movs	r3, #40	@ 0x28
 8001ed0:	001a      	movs	r2, r3
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	f004 fabe 	bl	8006454 <memset>
  if(hi2c->Instance==I2C1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a22      	ldr	r2, [pc, #136]	@ (8001f68 <HAL_I2C_MspInit+0xb8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d13d      	bne.n	8001f5e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ee2:	193b      	adds	r3, r7, r4
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ee8:	193b      	adds	r3, r7, r4
 8001eea:	2200      	movs	r2, #0
 8001eec:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eee:	193b      	adds	r3, r7, r4
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f002 fc7d 	bl	80047f0 <HAL_RCCEx_PeriphCLKConfig>
 8001ef6:	1e03      	subs	r3, r0, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001efa:	f7ff fd59 	bl	80019b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efe:	4b1b      	ldr	r3, [pc, #108]	@ (8001f6c <HAL_I2C_MspInit+0xbc>)
 8001f00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f02:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <HAL_I2C_MspInit+0xbc>)
 8001f04:	2102      	movs	r1, #2
 8001f06:	430a      	orrs	r2, r1
 8001f08:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f0a:	4b18      	ldr	r3, [pc, #96]	@ (8001f6c <HAL_I2C_MspInit+0xbc>)
 8001f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f0e:	2202      	movs	r2, #2
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f16:	213c      	movs	r1, #60	@ 0x3c
 8001f18:	187b      	adds	r3, r7, r1
 8001f1a:	22c0      	movs	r2, #192	@ 0xc0
 8001f1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f1e:	187b      	adds	r3, r7, r1
 8001f20:	2212      	movs	r2, #18
 8001f22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	187b      	adds	r3, r7, r1
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	187b      	adds	r3, r7, r1
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001f30:	187b      	adds	r3, r7, r1
 8001f32:	2206      	movs	r2, #6
 8001f34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f36:	187b      	adds	r3, r7, r1
 8001f38:	4a0d      	ldr	r2, [pc, #52]	@ (8001f70 <HAL_I2C_MspInit+0xc0>)
 8001f3a:	0019      	movs	r1, r3
 8001f3c:	0010      	movs	r0, r2
 8001f3e:	f000 ff33 	bl	8002da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f42:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <HAL_I2C_MspInit+0xbc>)
 8001f44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f46:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <HAL_I2C_MspInit+0xbc>)
 8001f48:	2180      	movs	r1, #128	@ 0x80
 8001f4a:	0389      	lsls	r1, r1, #14
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <HAL_I2C_MspInit+0xbc>)
 8001f52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f54:	2380      	movs	r3, #128	@ 0x80
 8001f56:	039b      	lsls	r3, r3, #14
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f5e:	46c0      	nop			@ (mov r8, r8)
 8001f60:	46bd      	mov	sp, r7
 8001f62:	b015      	add	sp, #84	@ 0x54
 8001f64:	bd90      	pop	{r4, r7, pc}
 8001f66:	46c0      	nop			@ (mov r8, r8)
 8001f68:	40005400 	.word	0x40005400
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	50000400 	.word	0x50000400

08001f74 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f74:	b590      	push	{r4, r7, lr}
 8001f76:	b08f      	sub	sp, #60	@ 0x3c
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f7c:	2410      	movs	r4, #16
 8001f7e:	193b      	adds	r3, r7, r4
 8001f80:	0018      	movs	r0, r3
 8001f82:	2328      	movs	r3, #40	@ 0x28
 8001f84:	001a      	movs	r2, r3
 8001f86:	2100      	movs	r1, #0
 8001f88:	f004 fa64 	bl	8006454 <memset>
  if(hrtc->Instance==RTC)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a19      	ldr	r2, [pc, #100]	@ (8001ff8 <HAL_RTC_MspInit+0x84>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d12c      	bne.n	8001ff0 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f96:	193b      	adds	r3, r7, r4
 8001f98:	2280      	movs	r2, #128	@ 0x80
 8001f9a:	0292      	lsls	r2, r2, #10
 8001f9c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f9e:	193b      	adds	r3, r7, r4
 8001fa0:	2280      	movs	r2, #128	@ 0x80
 8001fa2:	0052      	lsls	r2, r2, #1
 8001fa4:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fa6:	193b      	adds	r3, r7, r4
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f002 fc21 	bl	80047f0 <HAL_RCCEx_PeriphCLKConfig>
 8001fae:	1e03      	subs	r3, r0, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001fb2:	f7ff fcfd 	bl	80019b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001fb6:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <HAL_RTC_MspInit+0x88>)
 8001fb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fba:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <HAL_RTC_MspInit+0x88>)
 8001fbc:	2180      	movs	r1, #128	@ 0x80
 8001fbe:	0209      	lsls	r1, r1, #8
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001ffc <HAL_RTC_MspInit+0x88>)
 8001fc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <HAL_RTC_MspInit+0x88>)
 8001fca:	2180      	movs	r1, #128	@ 0x80
 8001fcc:	00c9      	lsls	r1, r1, #3
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ffc <HAL_RTC_MspInit+0x88>)
 8001fd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fd6:	2380      	movs	r3, #128	@ 0x80
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4013      	ands	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2002      	movs	r0, #2
 8001fe6:	f000 fead 	bl	8002d44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001fea:	2002      	movs	r0, #2
 8001fec:	f000 febf 	bl	8002d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ff0:	46c0      	nop			@ (mov r8, r8)
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b00f      	add	sp, #60	@ 0x3c
 8001ff6:	bd90      	pop	{r4, r7, pc}
 8001ff8:	40002800 	.word	0x40002800
 8001ffc:	40021000 	.word	0x40021000

08002000 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2380      	movs	r3, #128	@ 0x80
 800200e:	05db      	lsls	r3, r3, #23
 8002010:	429a      	cmp	r2, r3
 8002012:	d10b      	bne.n	800202c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002014:	4b07      	ldr	r3, [pc, #28]	@ (8002034 <HAL_TIM_PWM_MspInit+0x34>)
 8002016:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002018:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <HAL_TIM_PWM_MspInit+0x34>)
 800201a:	2101      	movs	r1, #1
 800201c:	430a      	orrs	r2, r1
 800201e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002020:	4b04      	ldr	r3, [pc, #16]	@ (8002034 <HAL_TIM_PWM_MspInit+0x34>)
 8002022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002024:	2201      	movs	r2, #1
 8002026:	4013      	ands	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800202c:	46c0      	nop			@ (mov r8, r8)
 800202e:	46bd      	mov	sp, r7
 8002030:	b004      	add	sp, #16
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40021000 	.word	0x40021000

08002038 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <HAL_TIM_Base_MspInit+0x38>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d10d      	bne.n	8002066 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800204a:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <HAL_TIM_Base_MspInit+0x3c>)
 800204c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <HAL_TIM_Base_MspInit+0x3c>)
 8002050:	2180      	movs	r1, #128	@ 0x80
 8002052:	0209      	lsls	r1, r1, #8
 8002054:	430a      	orrs	r2, r1
 8002056:	641a      	str	r2, [r3, #64]	@ 0x40
 8002058:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <HAL_TIM_Base_MspInit+0x3c>)
 800205a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800205c:	2380      	movs	r3, #128	@ 0x80
 800205e:	021b      	lsls	r3, r3, #8
 8002060:	4013      	ands	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002066:	46c0      	nop			@ (mov r8, r8)
 8002068:	46bd      	mov	sp, r7
 800206a:	b004      	add	sp, #16
 800206c:	bd80      	pop	{r7, pc}
 800206e:	46c0      	nop			@ (mov r8, r8)
 8002070:	40002000 	.word	0x40002000
 8002074:	40021000 	.word	0x40021000

08002078 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002078:	b590      	push	{r4, r7, lr}
 800207a:	b089      	sub	sp, #36	@ 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	240c      	movs	r4, #12
 8002082:	193b      	adds	r3, r7, r4
 8002084:	0018      	movs	r0, r3
 8002086:	2314      	movs	r3, #20
 8002088:	001a      	movs	r2, r3
 800208a:	2100      	movs	r1, #0
 800208c:	f004 f9e2 	bl	8006454 <memset>
  if(htim->Instance==TIM2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	2380      	movs	r3, #128	@ 0x80
 8002096:	05db      	lsls	r3, r3, #23
 8002098:	429a      	cmp	r2, r3
 800209a:	d121      	bne.n	80020e0 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800209c:	4b12      	ldr	r3, [pc, #72]	@ (80020e8 <HAL_TIM_MspPostInit+0x70>)
 800209e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020a0:	4b11      	ldr	r3, [pc, #68]	@ (80020e8 <HAL_TIM_MspPostInit+0x70>)
 80020a2:	2104      	movs	r1, #4
 80020a4:	430a      	orrs	r2, r1
 80020a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80020a8:	4b0f      	ldr	r3, [pc, #60]	@ (80020e8 <HAL_TIM_MspPostInit+0x70>)
 80020aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ac:	2204      	movs	r2, #4
 80020ae:	4013      	ands	r3, r2
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 80020b4:	0021      	movs	r1, r4
 80020b6:	187b      	adds	r3, r7, r1
 80020b8:	2240      	movs	r2, #64	@ 0x40
 80020ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	187b      	adds	r3, r7, r1
 80020be:	2202      	movs	r2, #2
 80020c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	187b      	adds	r3, r7, r1
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	187b      	adds	r3, r7, r1
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80020ce:	187b      	adds	r3, r7, r1
 80020d0:	2202      	movs	r2, #2
 80020d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 80020d4:	187b      	adds	r3, r7, r1
 80020d6:	4a05      	ldr	r2, [pc, #20]	@ (80020ec <HAL_TIM_MspPostInit+0x74>)
 80020d8:	0019      	movs	r1, r3
 80020da:	0010      	movs	r0, r2
 80020dc:	f000 fe64 	bl	8002da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020e0:	46c0      	nop			@ (mov r8, r8)
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b009      	add	sp, #36	@ 0x24
 80020e6:	bd90      	pop	{r4, r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	50000800 	.word	0x50000800

080020f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020f4:	46c0      	nop			@ (mov r8, r8)
 80020f6:	e7fd      	b.n	80020f4 <NMI_Handler+0x4>

080020f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020fc:	46c0      	nop			@ (mov r8, r8)
 80020fe:	e7fd      	b.n	80020fc <HardFault_Handler+0x4>

08002100 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002104:	46c0      	nop			@ (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800210e:	46c0      	nop			@ (mov r8, r8)
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002118:	f000 f8ce 	bl	80022b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800211c:	46c0      	nop			@ (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002128:	4b03      	ldr	r3, [pc, #12]	@ (8002138 <RTC_TAMP_IRQHandler+0x14>)
 800212a:	0018      	movs	r0, r3
 800212c:	f003 f966 	bl	80053fc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8002130:	46c0      	nop			@ (mov r8, r8)
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	46c0      	nop			@ (mov r8, r8)
 8002138:	20000130 	.word	0x20000130

0800213c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002140:	46c0      	nop			@ (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 800214a:	2001      	movs	r0, #1
 800214c:	f000 ffe6 	bl	800311c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 8002150:	2002      	movs	r0, #2
 8002152:	f000 ffe3 	bl	800311c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002156:	46c0      	nop			@ (mov r8, r8)
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 8002160:	2004      	movs	r0, #4
 8002162:	f000 ffdb 	bl	800311c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 8002166:	2008      	movs	r0, #8
 8002168:	f000 ffd8 	bl	800311c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800216c:	46c0      	nop			@ (mov r8, r8)
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 8002176:	2380      	movs	r3, #128	@ 0x80
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	0018      	movs	r0, r3
 800217c:	f000 ffce 	bl	800311c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002180:	46c0      	nop			@ (mov r8, r8)
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800218a:	46c0      	nop			@ (mov r8, r8)
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002190:	480d      	ldr	r0, [pc, #52]	@ (80021c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002192:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002194:	f7ff fff7 	bl	8002186 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002198:	480c      	ldr	r0, [pc, #48]	@ (80021cc <LoopForever+0x6>)
  ldr r1, =_edata
 800219a:	490d      	ldr	r1, [pc, #52]	@ (80021d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800219c:	4a0d      	ldr	r2, [pc, #52]	@ (80021d4 <LoopForever+0xe>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a0:	e002      	b.n	80021a8 <LoopCopyDataInit>

080021a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a6:	3304      	adds	r3, #4

080021a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ac:	d3f9      	bcc.n	80021a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ae:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021b0:	4c0a      	ldr	r4, [pc, #40]	@ (80021dc <LoopForever+0x16>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b4:	e001      	b.n	80021ba <LoopFillZerobss>

080021b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b8:	3204      	adds	r2, #4

080021ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021bc:	d3fb      	bcc.n	80021b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021be:	f004 f951 	bl	8006464 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80021c2:	f7fe fc3b 	bl	8000a3c <main>

080021c6 <LoopForever>:

LoopForever:
  b LoopForever
 80021c6:	e7fe      	b.n	80021c6 <LoopForever>
  ldr   r0, =_estack
 80021c8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80021cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d0:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80021d4:	080065a8 	.word	0x080065a8
  ldr r2, =_sbss
 80021d8:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80021dc:	20000248 	.word	0x20000248

080021e0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021e0:	e7fe      	b.n	80021e0 <ADC1_IRQHandler>
	...

080021e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021ea:	1dfb      	adds	r3, r7, #7
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <HAL_Init+0x3c>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <HAL_Init+0x3c>)
 80021f6:	2180      	movs	r1, #128	@ 0x80
 80021f8:	0049      	lsls	r1, r1, #1
 80021fa:	430a      	orrs	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021fe:	2003      	movs	r0, #3
 8002200:	f000 f810 	bl	8002224 <HAL_InitTick>
 8002204:	1e03      	subs	r3, r0, #0
 8002206:	d003      	beq.n	8002210 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002208:	1dfb      	adds	r3, r7, #7
 800220a:	2201      	movs	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	e001      	b.n	8002214 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002210:	f7ff fdde 	bl	8001dd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002214:	1dfb      	adds	r3, r7, #7
 8002216:	781b      	ldrb	r3, [r3, #0]
}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40022000 	.word	0x40022000

08002224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800222c:	230f      	movs	r3, #15
 800222e:	18fb      	adds	r3, r7, r3
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002234:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <HAL_InitTick+0x88>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d02b      	beq.n	8002294 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800223c:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <HAL_InitTick+0x8c>)
 800223e:	681c      	ldr	r4, [r3, #0]
 8002240:	4b1a      	ldr	r3, [pc, #104]	@ (80022ac <HAL_InitTick+0x88>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	0019      	movs	r1, r3
 8002246:	23fa      	movs	r3, #250	@ 0xfa
 8002248:	0098      	lsls	r0, r3, #2
 800224a:	f7fd ff5b 	bl	8000104 <__udivsi3>
 800224e:	0003      	movs	r3, r0
 8002250:	0019      	movs	r1, r3
 8002252:	0020      	movs	r0, r4
 8002254:	f7fd ff56 	bl	8000104 <__udivsi3>
 8002258:	0003      	movs	r3, r0
 800225a:	0018      	movs	r0, r3
 800225c:	f000 fd97 	bl	8002d8e <HAL_SYSTICK_Config>
 8002260:	1e03      	subs	r3, r0, #0
 8002262:	d112      	bne.n	800228a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d80a      	bhi.n	8002280 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	2301      	movs	r3, #1
 800226e:	425b      	negs	r3, r3
 8002270:	2200      	movs	r2, #0
 8002272:	0018      	movs	r0, r3
 8002274:	f000 fd66 	bl	8002d44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002278:	4b0e      	ldr	r3, [pc, #56]	@ (80022b4 <HAL_InitTick+0x90>)
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	e00d      	b.n	800229c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002280:	230f      	movs	r3, #15
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	e008      	b.n	800229c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800228a:	230f      	movs	r3, #15
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
 8002292:	e003      	b.n	800229c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002294:	230f      	movs	r3, #15
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800229c:	230f      	movs	r3, #15
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	781b      	ldrb	r3, [r3, #0]
}
 80022a2:	0018      	movs	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b005      	add	sp, #20
 80022a8:	bd90      	pop	{r4, r7, pc}
 80022aa:	46c0      	nop			@ (mov r8, r8)
 80022ac:	20000054 	.word	0x20000054
 80022b0:	2000004c 	.word	0x2000004c
 80022b4:	20000050 	.word	0x20000050

080022b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022bc:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <HAL_IncTick+0x1c>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	001a      	movs	r2, r3
 80022c2:	4b05      	ldr	r3, [pc, #20]	@ (80022d8 <HAL_IncTick+0x20>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	18d2      	adds	r2, r2, r3
 80022c8:	4b03      	ldr	r3, [pc, #12]	@ (80022d8 <HAL_IncTick+0x20>)
 80022ca:	601a      	str	r2, [r3, #0]
}
 80022cc:	46c0      	nop			@ (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	20000054 	.word	0x20000054
 80022d8:	20000244 	.word	0x20000244

080022dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  return uwTick;
 80022e0:	4b02      	ldr	r3, [pc, #8]	@ (80022ec <HAL_GetTick+0x10>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	46c0      	nop			@ (mov r8, r8)
 80022ec:	20000244 	.word	0x20000244

080022f0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a05      	ldr	r2, [pc, #20]	@ (8002314 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002300:	401a      	ands	r2, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	601a      	str	r2, [r3, #0]
}
 800230a:	46c0      	nop			@ (mov r8, r8)
 800230c:	46bd      	mov	sp, r7
 800230e:	b002      	add	sp, #8
 8002310:	bd80      	pop	{r7, pc}
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	fe3fffff 	.word	0xfe3fffff

08002318 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	23e0      	movs	r3, #224	@ 0xe0
 8002326:	045b      	lsls	r3, r3, #17
 8002328:	4013      	ands	r3, r2
}
 800232a:	0018      	movs	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	b002      	add	sp, #8
 8002330:	bd80      	pop	{r7, pc}

08002332 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	2104      	movs	r1, #4
 8002346:	400a      	ands	r2, r1
 8002348:	2107      	movs	r1, #7
 800234a:	4091      	lsls	r1, r2
 800234c:	000a      	movs	r2, r1
 800234e:	43d2      	mvns	r2, r2
 8002350:	401a      	ands	r2, r3
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2104      	movs	r1, #4
 8002356:	400b      	ands	r3, r1
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4099      	lsls	r1, r3
 800235c:	000b      	movs	r3, r1
 800235e:	431a      	orrs	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002364:	46c0      	nop			@ (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	b004      	add	sp, #16
 800236a:	bd80      	pop	{r7, pc}

0800236c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	2104      	movs	r1, #4
 800237e:	400a      	ands	r2, r1
 8002380:	2107      	movs	r1, #7
 8002382:	4091      	lsls	r1, r2
 8002384:	000a      	movs	r2, r1
 8002386:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2104      	movs	r1, #4
 800238c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800238e:	40da      	lsrs	r2, r3
 8002390:	0013      	movs	r3, r2
}
 8002392:	0018      	movs	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	b002      	add	sp, #8
 8002398:	bd80      	pop	{r7, pc}

0800239a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	211f      	movs	r1, #31
 80023ae:	400a      	ands	r2, r1
 80023b0:	210f      	movs	r1, #15
 80023b2:	4091      	lsls	r1, r2
 80023b4:	000a      	movs	r2, r1
 80023b6:	43d2      	mvns	r2, r2
 80023b8:	401a      	ands	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	210f      	movs	r1, #15
 80023c0:	4019      	ands	r1, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	201f      	movs	r0, #31
 80023c6:	4003      	ands	r3, r0
 80023c8:	4099      	lsls	r1, r3
 80023ca:	000b      	movs	r3, r1
 80023cc:	431a      	orrs	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b004      	add	sp, #16
 80023d8:	bd80      	pop	{r7, pc}

080023da <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	035b      	lsls	r3, r3, #13
 80023ec:	0b5b      	lsrs	r3, r3, #13
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023f4:	46c0      	nop			@ (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b002      	add	sp, #8
 80023fa:	bd80      	pop	{r7, pc}

080023fc <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	0352      	lsls	r2, r2, #13
 800240e:	0b52      	lsrs	r2, r2, #13
 8002410:	43d2      	mvns	r2, r2
 8002412:	401a      	ands	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002418:	46c0      	nop			@ (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	b002      	add	sp, #8
 800241e:	bd80      	pop	{r7, pc}

08002420 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	0212      	lsls	r2, r2, #8
 8002434:	43d2      	mvns	r2, r2
 8002436:	401a      	ands	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	400b      	ands	r3, r1
 8002440:	4904      	ldr	r1, [pc, #16]	@ (8002454 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002442:	400b      	ands	r3, r1
 8002444:	431a      	orrs	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800244a:	46c0      	nop			@ (mov r8, r8)
 800244c:	46bd      	mov	sp, r7
 800244e:	b004      	add	sp, #16
 8002450:	bd80      	pop	{r7, pc}
 8002452:	46c0      	nop			@ (mov r8, r8)
 8002454:	07ffff00 	.word	0x07ffff00

08002458 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4a05      	ldr	r2, [pc, #20]	@ (800247c <LL_ADC_EnableInternalRegulator+0x24>)
 8002466:	4013      	ands	r3, r2
 8002468:	2280      	movs	r2, #128	@ 0x80
 800246a:	0552      	lsls	r2, r2, #21
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002472:	46c0      	nop			@ (mov r8, r8)
 8002474:	46bd      	mov	sp, r7
 8002476:	b002      	add	sp, #8
 8002478:	bd80      	pop	{r7, pc}
 800247a:	46c0      	nop			@ (mov r8, r8)
 800247c:	6fffffe8 	.word	0x6fffffe8

08002480 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	2380      	movs	r3, #128	@ 0x80
 800248e:	055b      	lsls	r3, r3, #21
 8002490:	401a      	ands	r2, r3
 8002492:	2380      	movs	r3, #128	@ 0x80
 8002494:	055b      	lsls	r3, r3, #21
 8002496:	429a      	cmp	r2, r3
 8002498:	d101      	bne.n	800249e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800249e:	2300      	movs	r3, #0
}
 80024a0:	0018      	movs	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b002      	add	sp, #8
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2201      	movs	r2, #1
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <LL_ADC_IsEnabled+0x18>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <LL_ADC_IsEnabled+0x1a>
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	0018      	movs	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b002      	add	sp, #8
 80024c8:	bd80      	pop	{r7, pc}

080024ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2204      	movs	r2, #4
 80024d8:	4013      	ands	r3, r2
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d101      	bne.n	80024e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	0018      	movs	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b002      	add	sp, #8
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f4:	231f      	movs	r3, #31
 80024f6:	18fb      	adds	r3, r7, r3
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e17f      	b.n	8002812 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10a      	bne.n	8002530 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	0018      	movs	r0, r3
 800251e:	f7ff fc83 	bl	8001e28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2254      	movs	r2, #84	@ 0x54
 800252c:	2100      	movs	r1, #0
 800252e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0018      	movs	r0, r3
 8002536:	f7ff ffa3 	bl	8002480 <LL_ADC_IsInternalRegulatorEnabled>
 800253a:	1e03      	subs	r3, r0, #0
 800253c:	d115      	bne.n	800256a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	0018      	movs	r0, r3
 8002544:	f7ff ff88 	bl	8002458 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002548:	4bb4      	ldr	r3, [pc, #720]	@ (800281c <HAL_ADC_Init+0x330>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	49b4      	ldr	r1, [pc, #720]	@ (8002820 <HAL_ADC_Init+0x334>)
 800254e:	0018      	movs	r0, r3
 8002550:	f7fd fdd8 	bl	8000104 <__udivsi3>
 8002554:	0003      	movs	r3, r0
 8002556:	3301      	adds	r3, #1
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800255c:	e002      	b.n	8002564 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3b01      	subs	r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f9      	bne.n	800255e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	0018      	movs	r0, r3
 8002570:	f7ff ff86 	bl	8002480 <LL_ADC_IsInternalRegulatorEnabled>
 8002574:	1e03      	subs	r3, r0, #0
 8002576:	d10f      	bne.n	8002598 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257c:	2210      	movs	r2, #16
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002588:	2201      	movs	r2, #1
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002590:	231f      	movs	r3, #31
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	2201      	movs	r2, #1
 8002596:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0018      	movs	r0, r3
 800259e:	f7ff ff94 	bl	80024ca <LL_ADC_REG_IsConversionOngoing>
 80025a2:	0003      	movs	r3, r0
 80025a4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025aa:	2210      	movs	r2, #16
 80025ac:	4013      	ands	r3, r2
 80025ae:	d000      	beq.n	80025b2 <HAL_ADC_Init+0xc6>
 80025b0:	e122      	b.n	80027f8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d000      	beq.n	80025ba <HAL_ADC_Init+0xce>
 80025b8:	e11e      	b.n	80027f8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025be:	4a99      	ldr	r2, [pc, #612]	@ (8002824 <HAL_ADC_Init+0x338>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	2202      	movs	r2, #2
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	0018      	movs	r0, r3
 80025d0:	f7ff ff6a 	bl	80024a8 <LL_ADC_IsEnabled>
 80025d4:	1e03      	subs	r3, r0, #0
 80025d6:	d000      	beq.n	80025da <HAL_ADC_Init+0xee>
 80025d8:	e0ad      	b.n	8002736 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	7e1b      	ldrb	r3, [r3, #24]
 80025e2:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80025e4:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	7e5b      	ldrb	r3, [r3, #25]
 80025ea:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80025ec:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	7e9b      	ldrb	r3, [r3, #26]
 80025f2:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80025f4:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <HAL_ADC_Init+0x118>
 80025fe:	2380      	movs	r3, #128	@ 0x80
 8002600:	015b      	lsls	r3, r3, #5
 8002602:	e000      	b.n	8002606 <HAL_ADC_Init+0x11a>
 8002604:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002606:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800260c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	2b00      	cmp	r3, #0
 8002614:	da04      	bge.n	8002620 <HAL_ADC_Init+0x134>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	085b      	lsrs	r3, r3, #1
 800261e:	e001      	b.n	8002624 <HAL_ADC_Init+0x138>
 8002620:	2380      	movs	r3, #128	@ 0x80
 8002622:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002624:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	212c      	movs	r1, #44	@ 0x2c
 800262a:	5c5b      	ldrb	r3, [r3, r1]
 800262c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800262e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2220      	movs	r2, #32
 800263a:	5c9b      	ldrb	r3, [r3, r2]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d115      	bne.n	800266c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	7e9b      	ldrb	r3, [r3, #26]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	2280      	movs	r2, #128	@ 0x80
 800264c:	0252      	lsls	r2, r2, #9
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	e00b      	b.n	800266c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002658:	2220      	movs	r2, #32
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002664:	2201      	movs	r2, #1
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002678:	23e0      	movs	r3, #224	@ 0xe0
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002682:	4313      	orrs	r3, r2
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4a65      	ldr	r2, [pc, #404]	@ (8002828 <HAL_ADC_Init+0x33c>)
 8002692:	4013      	ands	r3, r2
 8002694:	0019      	movs	r1, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	430a      	orrs	r2, r1
 800269e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	0f9b      	lsrs	r3, r3, #30
 80026a6:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80026ac:	4313      	orrs	r3, r2
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	223c      	movs	r2, #60	@ 0x3c
 80026b8:	5c9b      	ldrb	r3, [r3, r2]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d111      	bne.n	80026e2 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	0f9b      	lsrs	r3, r3, #30
 80026c4:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80026ca:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80026d0:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80026d6:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	4313      	orrs	r3, r2
 80026dc:	2201      	movs	r2, #1
 80026de:	4313      	orrs	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	4a50      	ldr	r2, [pc, #320]	@ (800282c <HAL_ADC_Init+0x340>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	0019      	movs	r1, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	23c0      	movs	r3, #192	@ 0xc0
 80026fe:	061b      	lsls	r3, r3, #24
 8002700:	429a      	cmp	r2, r3
 8002702:	d018      	beq.n	8002736 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002708:	2380      	movs	r3, #128	@ 0x80
 800270a:	05db      	lsls	r3, r3, #23
 800270c:	429a      	cmp	r2, r3
 800270e:	d012      	beq.n	8002736 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002714:	2380      	movs	r3, #128	@ 0x80
 8002716:	061b      	lsls	r3, r3, #24
 8002718:	429a      	cmp	r2, r3
 800271a:	d00c      	beq.n	8002736 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800271c:	4b44      	ldr	r3, [pc, #272]	@ (8002830 <HAL_ADC_Init+0x344>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a44      	ldr	r2, [pc, #272]	@ (8002834 <HAL_ADC_Init+0x348>)
 8002722:	4013      	ands	r3, r2
 8002724:	0019      	movs	r1, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	23f0      	movs	r3, #240	@ 0xf0
 800272c:	039b      	lsls	r3, r3, #14
 800272e:	401a      	ands	r2, r3
 8002730:	4b3f      	ldr	r3, [pc, #252]	@ (8002830 <HAL_ADC_Init+0x344>)
 8002732:	430a      	orrs	r2, r1
 8002734:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800273e:	001a      	movs	r2, r3
 8002740:	2100      	movs	r1, #0
 8002742:	f7ff fdf6 	bl	8002332 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274e:	493a      	ldr	r1, [pc, #232]	@ (8002838 <HAL_ADC_Init+0x34c>)
 8002750:	001a      	movs	r2, r3
 8002752:	f7ff fdee 	bl	8002332 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2110      	movs	r1, #16
 800276a:	4249      	negs	r1, r1
 800276c:	430a      	orrs	r2, r1
 800276e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002770:	e018      	b.n	80027a4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	2380      	movs	r3, #128	@ 0x80
 8002778:	039b      	lsls	r3, r3, #14
 800277a:	429a      	cmp	r2, r3
 800277c:	d112      	bne.n	80027a4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	3b01      	subs	r3, #1
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	221c      	movs	r2, #28
 800278e:	4013      	ands	r3, r2
 8002790:	2210      	movs	r2, #16
 8002792:	4252      	negs	r2, r2
 8002794:	409a      	lsls	r2, r3
 8002796:	0011      	movs	r1, r2
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2100      	movs	r1, #0
 80027aa:	0018      	movs	r0, r3
 80027ac:	f7ff fdde 	bl	800236c <LL_ADC_GetSamplingTimeCommonChannels>
 80027b0:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d10b      	bne.n	80027d2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c4:	2203      	movs	r2, #3
 80027c6:	4393      	bics	r3, r2
 80027c8:	2201      	movs	r2, #1
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80027d0:	e01c      	b.n	800280c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d6:	2212      	movs	r2, #18
 80027d8:	4393      	bics	r3, r2
 80027da:	2210      	movs	r2, #16
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e6:	2201      	movs	r2, #1
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80027ee:	231f      	movs	r3, #31
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80027f6:	e009      	b.n	800280c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fc:	2210      	movs	r2, #16
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002804:	231f      	movs	r3, #31
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800280c:	231f      	movs	r3, #31
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	781b      	ldrb	r3, [r3, #0]
}
 8002812:	0018      	movs	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	b008      	add	sp, #32
 8002818:	bd80      	pop	{r7, pc}
 800281a:	46c0      	nop			@ (mov r8, r8)
 800281c:	2000004c 	.word	0x2000004c
 8002820:	00030d40 	.word	0x00030d40
 8002824:	fffffefd 	.word	0xfffffefd
 8002828:	ffde0201 	.word	0xffde0201
 800282c:	1ffffc02 	.word	0x1ffffc02
 8002830:	40012708 	.word	0x40012708
 8002834:	ffc3ffff 	.word	0xffc3ffff
 8002838:	07ffff04 	.word	0x07ffff04

0800283c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002846:	2317      	movs	r3, #23
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2254      	movs	r2, #84	@ 0x54
 8002856:	5c9b      	ldrb	r3, [r3, r2]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x24>
 800285c:	2302      	movs	r3, #2
 800285e:	e1c0      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x3a6>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2254      	movs	r2, #84	@ 0x54
 8002864:	2101      	movs	r1, #1
 8002866:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	0018      	movs	r0, r3
 800286e:	f7ff fe2c 	bl	80024ca <LL_ADC_REG_IsConversionOngoing>
 8002872:	1e03      	subs	r3, r0, #0
 8002874:	d000      	beq.n	8002878 <HAL_ADC_ConfigChannel+0x3c>
 8002876:	e1a3      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d100      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x46>
 8002880:	e143      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	2380      	movs	r3, #128	@ 0x80
 8002888:	061b      	lsls	r3, r3, #24
 800288a:	429a      	cmp	r2, r3
 800288c:	d004      	beq.n	8002898 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002892:	4ac1      	ldr	r2, [pc, #772]	@ (8002b98 <HAL_ADC_ConfigChannel+0x35c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d108      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	0019      	movs	r1, r3
 80028a2:	0010      	movs	r0, r2
 80028a4:	f7ff fd99 	bl	80023da <LL_ADC_REG_SetSequencerChAdd>
 80028a8:	e0c9      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	211f      	movs	r1, #31
 80028b4:	400b      	ands	r3, r1
 80028b6:	210f      	movs	r1, #15
 80028b8:	4099      	lsls	r1, r3
 80028ba:	000b      	movs	r3, r1
 80028bc:	43db      	mvns	r3, r3
 80028be:	4013      	ands	r3, r2
 80028c0:	0019      	movs	r1, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	035b      	lsls	r3, r3, #13
 80028c8:	0b5b      	lsrs	r3, r3, #13
 80028ca:	d105      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x9c>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	0e9b      	lsrs	r3, r3, #26
 80028d2:	221f      	movs	r2, #31
 80028d4:	4013      	ands	r3, r2
 80028d6:	e098      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1ce>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2201      	movs	r2, #1
 80028de:	4013      	ands	r3, r2
 80028e0:	d000      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xa8>
 80028e2:	e091      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x1cc>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2202      	movs	r2, #2
 80028ea:	4013      	ands	r3, r2
 80028ec:	d000      	beq.n	80028f0 <HAL_ADC_ConfigChannel+0xb4>
 80028ee:	e089      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x1c8>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2204      	movs	r2, #4
 80028f6:	4013      	ands	r3, r2
 80028f8:	d000      	beq.n	80028fc <HAL_ADC_ConfigChannel+0xc0>
 80028fa:	e081      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x1c4>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2208      	movs	r2, #8
 8002902:	4013      	ands	r3, r2
 8002904:	d000      	beq.n	8002908 <HAL_ADC_ConfigChannel+0xcc>
 8002906:	e079      	b.n	80029fc <HAL_ADC_ConfigChannel+0x1c0>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2210      	movs	r2, #16
 800290e:	4013      	ands	r3, r2
 8002910:	d000      	beq.n	8002914 <HAL_ADC_ConfigChannel+0xd8>
 8002912:	e071      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x1bc>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2220      	movs	r2, #32
 800291a:	4013      	ands	r3, r2
 800291c:	d000      	beq.n	8002920 <HAL_ADC_ConfigChannel+0xe4>
 800291e:	e069      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x1b8>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2240      	movs	r2, #64	@ 0x40
 8002926:	4013      	ands	r3, r2
 8002928:	d000      	beq.n	800292c <HAL_ADC_ConfigChannel+0xf0>
 800292a:	e061      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x1b4>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2280      	movs	r2, #128	@ 0x80
 8002932:	4013      	ands	r3, r2
 8002934:	d000      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xfc>
 8002936:	e059      	b.n	80029ec <HAL_ADC_ConfigChannel+0x1b0>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	2380      	movs	r3, #128	@ 0x80
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4013      	ands	r3, r2
 8002942:	d151      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x1ac>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	2380      	movs	r3, #128	@ 0x80
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4013      	ands	r3, r2
 800294e:	d149      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x1a8>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	2380      	movs	r3, #128	@ 0x80
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4013      	ands	r3, r2
 800295a:	d141      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x1a4>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	2380      	movs	r3, #128	@ 0x80
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	4013      	ands	r3, r2
 8002966:	d139      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x1a0>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	2380      	movs	r3, #128	@ 0x80
 800296e:	015b      	lsls	r3, r3, #5
 8002970:	4013      	ands	r3, r2
 8002972:	d131      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x19c>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2380      	movs	r3, #128	@ 0x80
 800297a:	019b      	lsls	r3, r3, #6
 800297c:	4013      	ands	r3, r2
 800297e:	d129      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x198>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	2380      	movs	r3, #128	@ 0x80
 8002986:	01db      	lsls	r3, r3, #7
 8002988:	4013      	ands	r3, r2
 800298a:	d121      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x194>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	2380      	movs	r3, #128	@ 0x80
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	4013      	ands	r3, r2
 8002996:	d119      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x190>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2380      	movs	r3, #128	@ 0x80
 800299e:	025b      	lsls	r3, r3, #9
 80029a0:	4013      	ands	r3, r2
 80029a2:	d111      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x18c>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	2380      	movs	r3, #128	@ 0x80
 80029aa:	029b      	lsls	r3, r3, #10
 80029ac:	4013      	ands	r3, r2
 80029ae:	d109      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x188>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	2380      	movs	r3, #128	@ 0x80
 80029b6:	02db      	lsls	r3, r3, #11
 80029b8:	4013      	ands	r3, r2
 80029ba:	d001      	beq.n	80029c0 <HAL_ADC_ConfigChannel+0x184>
 80029bc:	2312      	movs	r3, #18
 80029be:	e024      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1ce>
 80029c0:	2300      	movs	r3, #0
 80029c2:	e022      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1ce>
 80029c4:	2311      	movs	r3, #17
 80029c6:	e020      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1ce>
 80029c8:	2310      	movs	r3, #16
 80029ca:	e01e      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1ce>
 80029cc:	230f      	movs	r3, #15
 80029ce:	e01c      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1ce>
 80029d0:	230e      	movs	r3, #14
 80029d2:	e01a      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1ce>
 80029d4:	230d      	movs	r3, #13
 80029d6:	e018      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1ce>
 80029d8:	230c      	movs	r3, #12
 80029da:	e016      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1ce>
 80029dc:	230b      	movs	r3, #11
 80029de:	e014      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1ce>
 80029e0:	230a      	movs	r3, #10
 80029e2:	e012      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1ce>
 80029e4:	2309      	movs	r3, #9
 80029e6:	e010      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1ce>
 80029e8:	2308      	movs	r3, #8
 80029ea:	e00e      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1ce>
 80029ec:	2307      	movs	r3, #7
 80029ee:	e00c      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1ce>
 80029f0:	2306      	movs	r3, #6
 80029f2:	e00a      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1ce>
 80029f4:	2305      	movs	r3, #5
 80029f6:	e008      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1ce>
 80029f8:	2304      	movs	r3, #4
 80029fa:	e006      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1ce>
 80029fc:	2303      	movs	r3, #3
 80029fe:	e004      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1ce>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e002      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1ce>
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1ce>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	6852      	ldr	r2, [r2, #4]
 8002a0e:	201f      	movs	r0, #31
 8002a10:	4002      	ands	r2, r0
 8002a12:	4093      	lsls	r3, r2
 8002a14:	000a      	movs	r2, r1
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	089b      	lsrs	r3, r3, #2
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d808      	bhi.n	8002a3e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6818      	ldr	r0, [r3, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	001a      	movs	r2, r3
 8002a3a:	f7ff fcae 	bl	800239a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6819      	ldr	r1, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	001a      	movs	r2, r3
 8002a4c:	f7ff fce8 	bl	8002420 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	db00      	blt.n	8002a5a <HAL_ADC_ConfigChannel+0x21e>
 8002a58:	e0bc      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a5a:	4b50      	ldr	r3, [pc, #320]	@ (8002b9c <HAL_ADC_ConfigChannel+0x360>)
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f7ff fc5b 	bl	8002318 <LL_ADC_GetCommonPathInternalCh>
 8002a62:	0003      	movs	r3, r0
 8002a64:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a4d      	ldr	r2, [pc, #308]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x364>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d122      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	2380      	movs	r3, #128	@ 0x80
 8002a74:	041b      	lsls	r3, r3, #16
 8002a76:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a78:	d11d      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	2280      	movs	r2, #128	@ 0x80
 8002a7e:	0412      	lsls	r2, r2, #16
 8002a80:	4313      	orrs	r3, r2
 8002a82:	4a46      	ldr	r2, [pc, #280]	@ (8002b9c <HAL_ADC_ConfigChannel+0x360>)
 8002a84:	0019      	movs	r1, r3
 8002a86:	0010      	movs	r0, r2
 8002a88:	f7ff fc32 	bl	80022f0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a8c:	4b45      	ldr	r3, [pc, #276]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x368>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4945      	ldr	r1, [pc, #276]	@ (8002ba8 <HAL_ADC_ConfigChannel+0x36c>)
 8002a92:	0018      	movs	r0, r3
 8002a94:	f7fd fb36 	bl	8000104 <__udivsi3>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	0013      	movs	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	189b      	adds	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002aa6:	e002      	b.n	8002aae <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f9      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ab4:	e08e      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a3c      	ldr	r2, [pc, #240]	@ (8002bac <HAL_ADC_ConfigChannel+0x370>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d10e      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	2380      	movs	r3, #128	@ 0x80
 8002ac4:	045b      	lsls	r3, r3, #17
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d109      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	2280      	movs	r2, #128	@ 0x80
 8002ace:	0452      	lsls	r2, r2, #17
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	4a32      	ldr	r2, [pc, #200]	@ (8002b9c <HAL_ADC_ConfigChannel+0x360>)
 8002ad4:	0019      	movs	r1, r3
 8002ad6:	0010      	movs	r0, r2
 8002ad8:	f7ff fc0a 	bl	80022f0 <LL_ADC_SetCommonPathInternalCh>
 8002adc:	e07a      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a33      	ldr	r2, [pc, #204]	@ (8002bb0 <HAL_ADC_ConfigChannel+0x374>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d000      	beq.n	8002aea <HAL_ADC_ConfigChannel+0x2ae>
 8002ae8:	e074      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	2380      	movs	r3, #128	@ 0x80
 8002aee:	03db      	lsls	r3, r3, #15
 8002af0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002af2:	d000      	beq.n	8002af6 <HAL_ADC_ConfigChannel+0x2ba>
 8002af4:	e06e      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	2280      	movs	r2, #128	@ 0x80
 8002afa:	03d2      	lsls	r2, r2, #15
 8002afc:	4313      	orrs	r3, r2
 8002afe:	4a27      	ldr	r2, [pc, #156]	@ (8002b9c <HAL_ADC_ConfigChannel+0x360>)
 8002b00:	0019      	movs	r1, r3
 8002b02:	0010      	movs	r0, r2
 8002b04:	f7ff fbf4 	bl	80022f0 <LL_ADC_SetCommonPathInternalCh>
 8002b08:	e064      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	2380      	movs	r3, #128	@ 0x80
 8002b10:	061b      	lsls	r3, r3, #24
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d004      	beq.n	8002b20 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002b98 <HAL_ADC_ConfigChannel+0x35c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d107      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0019      	movs	r1, r3
 8002b2a:	0010      	movs	r0, r2
 8002b2c:	f7ff fc66 	bl	80023fc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	da4d      	bge.n	8002bd4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b38:	4b18      	ldr	r3, [pc, #96]	@ (8002b9c <HAL_ADC_ConfigChannel+0x360>)
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f7ff fbec 	bl	8002318 <LL_ADC_GetCommonPathInternalCh>
 8002b40:	0003      	movs	r3, r0
 8002b42:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a15      	ldr	r2, [pc, #84]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x364>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d108      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4a18      	ldr	r2, [pc, #96]	@ (8002bb4 <HAL_ADC_ConfigChannel+0x378>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	4a11      	ldr	r2, [pc, #68]	@ (8002b9c <HAL_ADC_ConfigChannel+0x360>)
 8002b56:	0019      	movs	r1, r3
 8002b58:	0010      	movs	r0, r2
 8002b5a:	f7ff fbc9 	bl	80022f0 <LL_ADC_SetCommonPathInternalCh>
 8002b5e:	e039      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a11      	ldr	r2, [pc, #68]	@ (8002bac <HAL_ADC_ConfigChannel+0x370>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d108      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4a12      	ldr	r2, [pc, #72]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x37c>)
 8002b6e:	4013      	ands	r3, r2
 8002b70:	4a0a      	ldr	r2, [pc, #40]	@ (8002b9c <HAL_ADC_ConfigChannel+0x360>)
 8002b72:	0019      	movs	r1, r3
 8002b74:	0010      	movs	r0, r2
 8002b76:	f7ff fbbb 	bl	80022f0 <LL_ADC_SetCommonPathInternalCh>
 8002b7a:	e02b      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a0b      	ldr	r2, [pc, #44]	@ (8002bb0 <HAL_ADC_ConfigChannel+0x374>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d126      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4a0c      	ldr	r2, [pc, #48]	@ (8002bbc <HAL_ADC_ConfigChannel+0x380>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	4a03      	ldr	r2, [pc, #12]	@ (8002b9c <HAL_ADC_ConfigChannel+0x360>)
 8002b8e:	0019      	movs	r1, r3
 8002b90:	0010      	movs	r0, r2
 8002b92:	f7ff fbad 	bl	80022f0 <LL_ADC_SetCommonPathInternalCh>
 8002b96:	e01d      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x398>
 8002b98:	80000004 	.word	0x80000004
 8002b9c:	40012708 	.word	0x40012708
 8002ba0:	b0001000 	.word	0xb0001000
 8002ba4:	2000004c 	.word	0x2000004c
 8002ba8:	00030d40 	.word	0x00030d40
 8002bac:	b8004000 	.word	0xb8004000
 8002bb0:	b4002000 	.word	0xb4002000
 8002bb4:	ff7fffff 	.word	0xff7fffff
 8002bb8:	feffffff 	.word	0xfeffffff
 8002bbc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002bcc:	2317      	movs	r3, #23
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2254      	movs	r2, #84	@ 0x54
 8002bd8:	2100      	movs	r1, #0
 8002bda:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002bdc:	2317      	movs	r3, #23
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	781b      	ldrb	r3, [r3, #0]
}
 8002be2:	0018      	movs	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b006      	add	sp, #24
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	46c0      	nop			@ (mov r8, r8)

08002bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	0002      	movs	r2, r0
 8002bf4:	1dfb      	adds	r3, r7, #7
 8002bf6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002bf8:	1dfb      	adds	r3, r7, #7
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bfe:	d809      	bhi.n	8002c14 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c00:	1dfb      	adds	r3, r7, #7
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	001a      	movs	r2, r3
 8002c06:	231f      	movs	r3, #31
 8002c08:	401a      	ands	r2, r3
 8002c0a:	4b04      	ldr	r3, [pc, #16]	@ (8002c1c <__NVIC_EnableIRQ+0x30>)
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	4091      	lsls	r1, r2
 8002c10:	000a      	movs	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002c14:	46c0      	nop			@ (mov r8, r8)
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b002      	add	sp, #8
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	e000e100 	.word	0xe000e100

08002c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	0002      	movs	r2, r0
 8002c28:	6039      	str	r1, [r7, #0]
 8002c2a:	1dfb      	adds	r3, r7, #7
 8002c2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c2e:	1dfb      	adds	r3, r7, #7
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c34:	d828      	bhi.n	8002c88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c36:	4a2f      	ldr	r2, [pc, #188]	@ (8002cf4 <__NVIC_SetPriority+0xd4>)
 8002c38:	1dfb      	adds	r3, r7, #7
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	b25b      	sxtb	r3, r3
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	33c0      	adds	r3, #192	@ 0xc0
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	589b      	ldr	r3, [r3, r2]
 8002c46:	1dfa      	adds	r2, r7, #7
 8002c48:	7812      	ldrb	r2, [r2, #0]
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	400a      	ands	r2, r1
 8002c50:	00d2      	lsls	r2, r2, #3
 8002c52:	21ff      	movs	r1, #255	@ 0xff
 8002c54:	4091      	lsls	r1, r2
 8002c56:	000a      	movs	r2, r1
 8002c58:	43d2      	mvns	r2, r2
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	019b      	lsls	r3, r3, #6
 8002c62:	22ff      	movs	r2, #255	@ 0xff
 8002c64:	401a      	ands	r2, r3
 8002c66:	1dfb      	adds	r3, r7, #7
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	4003      	ands	r3, r0
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c74:	481f      	ldr	r0, [pc, #124]	@ (8002cf4 <__NVIC_SetPriority+0xd4>)
 8002c76:	1dfb      	adds	r3, r7, #7
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	b25b      	sxtb	r3, r3
 8002c7c:	089b      	lsrs	r3, r3, #2
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	33c0      	adds	r3, #192	@ 0xc0
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c86:	e031      	b.n	8002cec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c88:	4a1b      	ldr	r2, [pc, #108]	@ (8002cf8 <__NVIC_SetPriority+0xd8>)
 8002c8a:	1dfb      	adds	r3, r7, #7
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	0019      	movs	r1, r3
 8002c90:	230f      	movs	r3, #15
 8002c92:	400b      	ands	r3, r1
 8002c94:	3b08      	subs	r3, #8
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3306      	adds	r3, #6
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	18d3      	adds	r3, r2, r3
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	1dfa      	adds	r2, r7, #7
 8002ca4:	7812      	ldrb	r2, [r2, #0]
 8002ca6:	0011      	movs	r1, r2
 8002ca8:	2203      	movs	r2, #3
 8002caa:	400a      	ands	r2, r1
 8002cac:	00d2      	lsls	r2, r2, #3
 8002cae:	21ff      	movs	r1, #255	@ 0xff
 8002cb0:	4091      	lsls	r1, r2
 8002cb2:	000a      	movs	r2, r1
 8002cb4:	43d2      	mvns	r2, r2
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	019b      	lsls	r3, r3, #6
 8002cbe:	22ff      	movs	r2, #255	@ 0xff
 8002cc0:	401a      	ands	r2, r3
 8002cc2:	1dfb      	adds	r3, r7, #7
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	2303      	movs	r3, #3
 8002cca:	4003      	ands	r3, r0
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cd0:	4809      	ldr	r0, [pc, #36]	@ (8002cf8 <__NVIC_SetPriority+0xd8>)
 8002cd2:	1dfb      	adds	r3, r7, #7
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	001c      	movs	r4, r3
 8002cd8:	230f      	movs	r3, #15
 8002cda:	4023      	ands	r3, r4
 8002cdc:	3b08      	subs	r3, #8
 8002cde:	089b      	lsrs	r3, r3, #2
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	3306      	adds	r3, #6
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	18c3      	adds	r3, r0, r3
 8002ce8:	3304      	adds	r3, #4
 8002cea:	601a      	str	r2, [r3, #0]
}
 8002cec:	46c0      	nop			@ (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b003      	add	sp, #12
 8002cf2:	bd90      	pop	{r4, r7, pc}
 8002cf4:	e000e100 	.word	0xe000e100
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	1e5a      	subs	r2, r3, #1
 8002d08:	2380      	movs	r3, #128	@ 0x80
 8002d0a:	045b      	lsls	r3, r3, #17
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d301      	bcc.n	8002d14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d10:	2301      	movs	r3, #1
 8002d12:	e010      	b.n	8002d36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d14:	4b0a      	ldr	r3, [pc, #40]	@ (8002d40 <SysTick_Config+0x44>)
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	3a01      	subs	r2, #1
 8002d1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	425b      	negs	r3, r3
 8002d20:	2103      	movs	r1, #3
 8002d22:	0018      	movs	r0, r3
 8002d24:	f7ff ff7c 	bl	8002c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d28:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <SysTick_Config+0x44>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d2e:	4b04      	ldr	r3, [pc, #16]	@ (8002d40 <SysTick_Config+0x44>)
 8002d30:	2207      	movs	r2, #7
 8002d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	0018      	movs	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b002      	add	sp, #8
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	46c0      	nop			@ (mov r8, r8)
 8002d40:	e000e010 	.word	0xe000e010

08002d44 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	210f      	movs	r1, #15
 8002d50:	187b      	adds	r3, r7, r1
 8002d52:	1c02      	adds	r2, r0, #0
 8002d54:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	187b      	adds	r3, r7, r1
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	b25b      	sxtb	r3, r3
 8002d5e:	0011      	movs	r1, r2
 8002d60:	0018      	movs	r0, r3
 8002d62:	f7ff ff5d 	bl	8002c20 <__NVIC_SetPriority>
}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b004      	add	sp, #16
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	0002      	movs	r2, r0
 8002d76:	1dfb      	adds	r3, r7, #7
 8002d78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d7a:	1dfb      	adds	r3, r7, #7
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	b25b      	sxtb	r3, r3
 8002d80:	0018      	movs	r0, r3
 8002d82:	f7ff ff33 	bl	8002bec <__NVIC_EnableIRQ>
}
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b002      	add	sp, #8
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f7ff ffaf 	bl	8002cfc <SysTick_Config>
 8002d9e:	0003      	movs	r3, r0
}
 8002da0:	0018      	movs	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b002      	add	sp, #8
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002db6:	e147      	b.n	8003048 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4091      	lsls	r1, r2
 8002dc2:	000a      	movs	r2, r1
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d100      	bne.n	8002dd0 <HAL_GPIO_Init+0x28>
 8002dce:	e138      	b.n	8003042 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d005      	beq.n	8002de8 <HAL_GPIO_Init+0x40>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2203      	movs	r2, #3
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d130      	bne.n	8002e4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	2203      	movs	r2, #3
 8002df4:	409a      	lsls	r2, r3
 8002df6:	0013      	movs	r3, r2
 8002df8:	43da      	mvns	r2, r3
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	0013      	movs	r3, r2
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e1e:	2201      	movs	r2, #1
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	409a      	lsls	r2, r3
 8002e24:	0013      	movs	r3, r2
 8002e26:	43da      	mvns	r2, r3
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	091b      	lsrs	r3, r3, #4
 8002e34:	2201      	movs	r2, #1
 8002e36:	401a      	ands	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	0013      	movs	r3, r2
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2203      	movs	r2, #3
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d017      	beq.n	8002e86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	2203      	movs	r2, #3
 8002e62:	409a      	lsls	r2, r3
 8002e64:	0013      	movs	r3, r2
 8002e66:	43da      	mvns	r2, r3
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	409a      	lsls	r2, r3
 8002e78:	0013      	movs	r3, r2
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d123      	bne.n	8002eda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	08da      	lsrs	r2, r3, #3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3208      	adds	r2, #8
 8002e9a:	0092      	lsls	r2, r2, #2
 8002e9c:	58d3      	ldr	r3, [r2, r3]
 8002e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2207      	movs	r2, #7
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	220f      	movs	r2, #15
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	0013      	movs	r3, r2
 8002eae:	43da      	mvns	r2, r3
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2107      	movs	r1, #7
 8002ebe:	400b      	ands	r3, r1
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	0013      	movs	r3, r2
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	08da      	lsrs	r2, r3, #3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3208      	adds	r2, #8
 8002ed4:	0092      	lsls	r2, r2, #2
 8002ed6:	6939      	ldr	r1, [r7, #16]
 8002ed8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	0013      	movs	r3, r2
 8002eea:	43da      	mvns	r2, r3
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	401a      	ands	r2, r3
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	409a      	lsls	r2, r3
 8002f00:	0013      	movs	r3, r2
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	23c0      	movs	r3, #192	@ 0xc0
 8002f14:	029b      	lsls	r3, r3, #10
 8002f16:	4013      	ands	r3, r2
 8002f18:	d100      	bne.n	8002f1c <HAL_GPIO_Init+0x174>
 8002f1a:	e092      	b.n	8003042 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002f1c:	4a50      	ldr	r2, [pc, #320]	@ (8003060 <HAL_GPIO_Init+0x2b8>)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	089b      	lsrs	r3, r3, #2
 8002f22:	3318      	adds	r3, #24
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	589b      	ldr	r3, [r3, r2]
 8002f28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	4013      	ands	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	220f      	movs	r2, #15
 8002f34:	409a      	lsls	r2, r3
 8002f36:	0013      	movs	r3, r2
 8002f38:	43da      	mvns	r2, r3
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	23a0      	movs	r3, #160	@ 0xa0
 8002f44:	05db      	lsls	r3, r3, #23
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d013      	beq.n	8002f72 <HAL_GPIO_Init+0x1ca>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a45      	ldr	r2, [pc, #276]	@ (8003064 <HAL_GPIO_Init+0x2bc>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00d      	beq.n	8002f6e <HAL_GPIO_Init+0x1c6>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a44      	ldr	r2, [pc, #272]	@ (8003068 <HAL_GPIO_Init+0x2c0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d007      	beq.n	8002f6a <HAL_GPIO_Init+0x1c2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a43      	ldr	r2, [pc, #268]	@ (800306c <HAL_GPIO_Init+0x2c4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d101      	bne.n	8002f66 <HAL_GPIO_Init+0x1be>
 8002f62:	2303      	movs	r3, #3
 8002f64:	e006      	b.n	8002f74 <HAL_GPIO_Init+0x1cc>
 8002f66:	2305      	movs	r3, #5
 8002f68:	e004      	b.n	8002f74 <HAL_GPIO_Init+0x1cc>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e002      	b.n	8002f74 <HAL_GPIO_Init+0x1cc>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <HAL_GPIO_Init+0x1cc>
 8002f72:	2300      	movs	r3, #0
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	2103      	movs	r1, #3
 8002f78:	400a      	ands	r2, r1
 8002f7a:	00d2      	lsls	r2, r2, #3
 8002f7c:	4093      	lsls	r3, r2
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002f84:	4936      	ldr	r1, [pc, #216]	@ (8003060 <HAL_GPIO_Init+0x2b8>)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	089b      	lsrs	r3, r3, #2
 8002f8a:	3318      	adds	r3, #24
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f92:	4b33      	ldr	r3, [pc, #204]	@ (8003060 <HAL_GPIO_Init+0x2b8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	2380      	movs	r3, #128	@ 0x80
 8002fa8:	035b      	lsls	r3, r3, #13
 8002faa:	4013      	ands	r3, r2
 8002fac:	d003      	beq.n	8002fb6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8003060 <HAL_GPIO_Init+0x2b8>)
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002fbc:	4b28      	ldr	r3, [pc, #160]	@ (8003060 <HAL_GPIO_Init+0x2b8>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	43da      	mvns	r2, r3
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	2380      	movs	r3, #128	@ 0x80
 8002fd2:	039b      	lsls	r3, r3, #14
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d003      	beq.n	8002fe0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8003060 <HAL_GPIO_Init+0x2b8>)
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8003060 <HAL_GPIO_Init+0x2b8>)
 8002fe8:	2384      	movs	r3, #132	@ 0x84
 8002fea:	58d3      	ldr	r3, [r2, r3]
 8002fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	43da      	mvns	r2, r3
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	2380      	movs	r3, #128	@ 0x80
 8002ffe:	029b      	lsls	r3, r3, #10
 8003000:	4013      	ands	r3, r2
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800300c:	4914      	ldr	r1, [pc, #80]	@ (8003060 <HAL_GPIO_Init+0x2b8>)
 800300e:	2284      	movs	r2, #132	@ 0x84
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003014:	4a12      	ldr	r2, [pc, #72]	@ (8003060 <HAL_GPIO_Init+0x2b8>)
 8003016:	2380      	movs	r3, #128	@ 0x80
 8003018:	58d3      	ldr	r3, [r2, r3]
 800301a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	43da      	mvns	r2, r3
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4013      	ands	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	2380      	movs	r3, #128	@ 0x80
 800302c:	025b      	lsls	r3, r3, #9
 800302e:	4013      	ands	r3, r2
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800303a:	4909      	ldr	r1, [pc, #36]	@ (8003060 <HAL_GPIO_Init+0x2b8>)
 800303c:	2280      	movs	r2, #128	@ 0x80
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	3301      	adds	r3, #1
 8003046:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	40da      	lsrs	r2, r3
 8003050:	1e13      	subs	r3, r2, #0
 8003052:	d000      	beq.n	8003056 <HAL_GPIO_Init+0x2ae>
 8003054:	e6b0      	b.n	8002db8 <HAL_GPIO_Init+0x10>
  }
}
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	46c0      	nop			@ (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	b006      	add	sp, #24
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40021800 	.word	0x40021800
 8003064:	50000400 	.word	0x50000400
 8003068:	50000800 	.word	0x50000800
 800306c:	50000c00 	.word	0x50000c00

08003070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	000a      	movs	r2, r1
 800307a:	1cbb      	adds	r3, r7, #2
 800307c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	1cba      	adds	r2, r7, #2
 8003084:	8812      	ldrh	r2, [r2, #0]
 8003086:	4013      	ands	r3, r2
 8003088:	d004      	beq.n	8003094 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800308a:	230f      	movs	r3, #15
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	e003      	b.n	800309c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003094:	230f      	movs	r3, #15
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800309c:	230f      	movs	r3, #15
 800309e:	18fb      	adds	r3, r7, r3
 80030a0:	781b      	ldrb	r3, [r3, #0]
}
 80030a2:	0018      	movs	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b004      	add	sp, #16
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	0008      	movs	r0, r1
 80030b4:	0011      	movs	r1, r2
 80030b6:	1cbb      	adds	r3, r7, #2
 80030b8:	1c02      	adds	r2, r0, #0
 80030ba:	801a      	strh	r2, [r3, #0]
 80030bc:	1c7b      	adds	r3, r7, #1
 80030be:	1c0a      	adds	r2, r1, #0
 80030c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030c2:	1c7b      	adds	r3, r7, #1
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d004      	beq.n	80030d4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030ca:	1cbb      	adds	r3, r7, #2
 80030cc:	881a      	ldrh	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030d2:	e003      	b.n	80030dc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030d4:	1cbb      	adds	r3, r7, #2
 80030d6:	881a      	ldrh	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030dc:	46c0      	nop			@ (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	b002      	add	sp, #8
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	000a      	movs	r2, r1
 80030ee:	1cbb      	adds	r3, r7, #2
 80030f0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030f8:	1cbb      	adds	r3, r7, #2
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4013      	ands	r3, r2
 8003100:	041a      	lsls	r2, r3, #16
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	43db      	mvns	r3, r3
 8003106:	1cb9      	adds	r1, r7, #2
 8003108:	8809      	ldrh	r1, [r1, #0]
 800310a:	400b      	ands	r3, r1
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	619a      	str	r2, [r3, #24]
}
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	46bd      	mov	sp, r7
 8003116:	b004      	add	sp, #16
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	0002      	movs	r2, r0
 8003124:	1dbb      	adds	r3, r7, #6
 8003126:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003128:	4b10      	ldr	r3, [pc, #64]	@ (800316c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	1dba      	adds	r2, r7, #6
 800312e:	8812      	ldrh	r2, [r2, #0]
 8003130:	4013      	ands	r3, r2
 8003132:	d008      	beq.n	8003146 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003134:	4b0d      	ldr	r3, [pc, #52]	@ (800316c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003136:	1dba      	adds	r2, r7, #6
 8003138:	8812      	ldrh	r2, [r2, #0]
 800313a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800313c:	1dbb      	adds	r3, r7, #6
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	0018      	movs	r0, r3
 8003142:	f000 f815 	bl	8003170 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003146:	4b09      	ldr	r3, [pc, #36]	@ (800316c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	1dba      	adds	r2, r7, #6
 800314c:	8812      	ldrh	r2, [r2, #0]
 800314e:	4013      	ands	r3, r2
 8003150:	d008      	beq.n	8003164 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003152:	4b06      	ldr	r3, [pc, #24]	@ (800316c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003154:	1dba      	adds	r2, r7, #6
 8003156:	8812      	ldrh	r2, [r2, #0]
 8003158:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800315a:	1dbb      	adds	r3, r7, #6
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	0018      	movs	r0, r3
 8003160:	f7fe f956 	bl	8001410 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003164:	46c0      	nop			@ (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	b002      	add	sp, #8
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40021800 	.word	0x40021800

08003170 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	0002      	movs	r2, r0
 8003178:	1dbb      	adds	r3, r7, #6
 800317a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800317c:	46c0      	nop			@ (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	b002      	add	sp, #8
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e08f      	b.n	80032b6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2241      	movs	r2, #65	@ 0x41
 800319a:	5c9b      	ldrb	r3, [r3, r2]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d107      	bne.n	80031b2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2240      	movs	r2, #64	@ 0x40
 80031a6:	2100      	movs	r1, #0
 80031a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	0018      	movs	r0, r3
 80031ae:	f7fe fe7f 	bl	8001eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2241      	movs	r2, #65	@ 0x41
 80031b6:	2124      	movs	r1, #36	@ 0x24
 80031b8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2101      	movs	r1, #1
 80031c6:	438a      	bics	r2, r1
 80031c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	493b      	ldr	r1, [pc, #236]	@ (80032c0 <HAL_I2C_Init+0x13c>)
 80031d4:	400a      	ands	r2, r1
 80031d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4938      	ldr	r1, [pc, #224]	@ (80032c4 <HAL_I2C_Init+0x140>)
 80031e4:	400a      	ands	r2, r1
 80031e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d108      	bne.n	8003202 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2180      	movs	r1, #128	@ 0x80
 80031fa:	0209      	lsls	r1, r1, #8
 80031fc:	430a      	orrs	r2, r1
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	e007      	b.n	8003212 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2184      	movs	r1, #132	@ 0x84
 800320c:	0209      	lsls	r1, r1, #8
 800320e:	430a      	orrs	r2, r1
 8003210:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d109      	bne.n	800322e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2180      	movs	r1, #128	@ 0x80
 8003226:	0109      	lsls	r1, r1, #4
 8003228:	430a      	orrs	r2, r1
 800322a:	605a      	str	r2, [r3, #4]
 800322c:	e007      	b.n	800323e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4923      	ldr	r1, [pc, #140]	@ (80032c8 <HAL_I2C_Init+0x144>)
 800323a:	400a      	ands	r2, r1
 800323c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4920      	ldr	r1, [pc, #128]	@ (80032cc <HAL_I2C_Init+0x148>)
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	491a      	ldr	r1, [pc, #104]	@ (80032c4 <HAL_I2C_Init+0x140>)
 800325a:	400a      	ands	r2, r1
 800325c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	431a      	orrs	r2, r3
 8003268:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69d9      	ldr	r1, [r3, #28]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1a      	ldr	r2, [r3, #32]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2101      	movs	r1, #1
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2241      	movs	r2, #65	@ 0x41
 80032a2:	2120      	movs	r1, #32
 80032a4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2242      	movs	r2, #66	@ 0x42
 80032b0:	2100      	movs	r1, #0
 80032b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	0018      	movs	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b002      	add	sp, #8
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	46c0      	nop			@ (mov r8, r8)
 80032c0:	f0ffffff 	.word	0xf0ffffff
 80032c4:	ffff7fff 	.word	0xffff7fff
 80032c8:	fffff7ff 	.word	0xfffff7ff
 80032cc:	02008000 	.word	0x02008000

080032d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b089      	sub	sp, #36	@ 0x24
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	0008      	movs	r0, r1
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	0019      	movs	r1, r3
 80032de:	230a      	movs	r3, #10
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	1c02      	adds	r2, r0, #0
 80032e4:	801a      	strh	r2, [r3, #0]
 80032e6:	2308      	movs	r3, #8
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	1c0a      	adds	r2, r1, #0
 80032ec:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2241      	movs	r2, #65	@ 0x41
 80032f2:	5c9b      	ldrb	r3, [r3, r2]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d000      	beq.n	80032fc <HAL_I2C_Master_Transmit+0x2c>
 80032fa:	e10a      	b.n	8003512 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2240      	movs	r2, #64	@ 0x40
 8003300:	5c9b      	ldrb	r3, [r3, r2]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_I2C_Master_Transmit+0x3a>
 8003306:	2302      	movs	r3, #2
 8003308:	e104      	b.n	8003514 <HAL_I2C_Master_Transmit+0x244>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2240      	movs	r2, #64	@ 0x40
 800330e:	2101      	movs	r1, #1
 8003310:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003312:	f7fe ffe3 	bl	80022dc <HAL_GetTick>
 8003316:	0003      	movs	r3, r0
 8003318:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800331a:	2380      	movs	r3, #128	@ 0x80
 800331c:	0219      	lsls	r1, r3, #8
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2319      	movs	r3, #25
 8003326:	2201      	movs	r2, #1
 8003328:	f000 fa26 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 800332c:	1e03      	subs	r3, r0, #0
 800332e:	d001      	beq.n	8003334 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0ef      	b.n	8003514 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2241      	movs	r2, #65	@ 0x41
 8003338:	2121      	movs	r1, #33	@ 0x21
 800333a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2242      	movs	r2, #66	@ 0x42
 8003340:	2110      	movs	r1, #16
 8003342:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2208      	movs	r2, #8
 8003354:	18ba      	adds	r2, r7, r2
 8003356:	8812      	ldrh	r2, [r2, #0]
 8003358:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	2bff      	cmp	r3, #255	@ 0xff
 8003368:	d906      	bls.n	8003378 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	22ff      	movs	r2, #255	@ 0xff
 800336e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003370:	2380      	movs	r3, #128	@ 0x80
 8003372:	045b      	lsls	r3, r3, #17
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	e007      	b.n	8003388 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003382:	2380      	movs	r3, #128	@ 0x80
 8003384:	049b      	lsls	r3, r3, #18
 8003386:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338c:	2b00      	cmp	r3, #0
 800338e:	d027      	beq.n	80033e0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	781a      	ldrb	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	3301      	adds	r3, #1
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	697c      	ldr	r4, [r7, #20]
 80033cc:	230a      	movs	r3, #10
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	8819      	ldrh	r1, [r3, #0]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	4b51      	ldr	r3, [pc, #324]	@ (800351c <HAL_I2C_Master_Transmit+0x24c>)
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	0023      	movs	r3, r4
 80033da:	f000 fc45 	bl	8003c68 <I2C_TransferConfig>
 80033de:	e06f      	b.n	80034c0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	697c      	ldr	r4, [r7, #20]
 80033e8:	230a      	movs	r3, #10
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	8819      	ldrh	r1, [r3, #0]
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	4b4a      	ldr	r3, [pc, #296]	@ (800351c <HAL_I2C_Master_Transmit+0x24c>)
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	0023      	movs	r3, r4
 80033f6:	f000 fc37 	bl	8003c68 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80033fa:	e061      	b.n	80034c0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	0018      	movs	r0, r3
 8003404:	f000 fa10 	bl	8003828 <I2C_WaitOnTXISFlagUntilTimeout>
 8003408:	1e03      	subs	r3, r0, #0
 800340a:	d001      	beq.n	8003410 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e081      	b.n	8003514 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d03a      	beq.n	80034c0 <HAL_I2C_Master_Transmit+0x1f0>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800344e:	2b00      	cmp	r3, #0
 8003450:	d136      	bne.n	80034c0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003452:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	0013      	movs	r3, r2
 800345c:	2200      	movs	r2, #0
 800345e:	2180      	movs	r1, #128	@ 0x80
 8003460:	f000 f98a 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 8003464:	1e03      	subs	r3, r0, #0
 8003466:	d001      	beq.n	800346c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e053      	b.n	8003514 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	2bff      	cmp	r3, #255	@ 0xff
 8003474:	d911      	bls.n	800349a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	22ff      	movs	r2, #255	@ 0xff
 800347a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003480:	b2da      	uxtb	r2, r3
 8003482:	2380      	movs	r3, #128	@ 0x80
 8003484:	045c      	lsls	r4, r3, #17
 8003486:	230a      	movs	r3, #10
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	8819      	ldrh	r1, [r3, #0]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	2300      	movs	r3, #0
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	0023      	movs	r3, r4
 8003494:	f000 fbe8 	bl	8003c68 <I2C_TransferConfig>
 8003498:	e012      	b.n	80034c0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	2380      	movs	r3, #128	@ 0x80
 80034ac:	049c      	lsls	r4, r3, #18
 80034ae:	230a      	movs	r3, #10
 80034b0:	18fb      	adds	r3, r7, r3
 80034b2:	8819      	ldrh	r1, [r3, #0]
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	2300      	movs	r3, #0
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	0023      	movs	r3, r4
 80034bc:	f000 fbd4 	bl	8003c68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d198      	bne.n	80033fc <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	0018      	movs	r0, r3
 80034d2:	f000 f9ef 	bl	80038b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034d6:	1e03      	subs	r3, r0, #0
 80034d8:	d001      	beq.n	80034de <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e01a      	b.n	8003514 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2220      	movs	r2, #32
 80034e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	490b      	ldr	r1, [pc, #44]	@ (8003520 <HAL_I2C_Master_Transmit+0x250>)
 80034f2:	400a      	ands	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2241      	movs	r2, #65	@ 0x41
 80034fa:	2120      	movs	r1, #32
 80034fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2242      	movs	r2, #66	@ 0x42
 8003502:	2100      	movs	r1, #0
 8003504:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2240      	movs	r2, #64	@ 0x40
 800350a:	2100      	movs	r1, #0
 800350c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	e000      	b.n	8003514 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003512:	2302      	movs	r3, #2
  }
}
 8003514:	0018      	movs	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	b007      	add	sp, #28
 800351a:	bd90      	pop	{r4, r7, pc}
 800351c:	80002000 	.word	0x80002000
 8003520:	fe00e800 	.word	0xfe00e800

08003524 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003524:	b590      	push	{r4, r7, lr}
 8003526:	b089      	sub	sp, #36	@ 0x24
 8003528:	af02      	add	r7, sp, #8
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	0008      	movs	r0, r1
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	0019      	movs	r1, r3
 8003532:	230a      	movs	r3, #10
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	1c02      	adds	r2, r0, #0
 8003538:	801a      	strh	r2, [r3, #0]
 800353a:	2308      	movs	r3, #8
 800353c:	18fb      	adds	r3, r7, r3
 800353e:	1c0a      	adds	r2, r1, #0
 8003540:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2241      	movs	r2, #65	@ 0x41
 8003546:	5c9b      	ldrb	r3, [r3, r2]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b20      	cmp	r3, #32
 800354c:	d000      	beq.n	8003550 <HAL_I2C_Master_Receive+0x2c>
 800354e:	e0e8      	b.n	8003722 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2240      	movs	r2, #64	@ 0x40
 8003554:	5c9b      	ldrb	r3, [r3, r2]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_I2C_Master_Receive+0x3a>
 800355a:	2302      	movs	r3, #2
 800355c:	e0e2      	b.n	8003724 <HAL_I2C_Master_Receive+0x200>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2240      	movs	r2, #64	@ 0x40
 8003562:	2101      	movs	r1, #1
 8003564:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003566:	f7fe feb9 	bl	80022dc <HAL_GetTick>
 800356a:	0003      	movs	r3, r0
 800356c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800356e:	2380      	movs	r3, #128	@ 0x80
 8003570:	0219      	lsls	r1, r3, #8
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	2319      	movs	r3, #25
 800357a:	2201      	movs	r2, #1
 800357c:	f000 f8fc 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 8003580:	1e03      	subs	r3, r0, #0
 8003582:	d001      	beq.n	8003588 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0cd      	b.n	8003724 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2241      	movs	r2, #65	@ 0x41
 800358c:	2122      	movs	r1, #34	@ 0x22
 800358e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2242      	movs	r2, #66	@ 0x42
 8003594:	2110      	movs	r1, #16
 8003596:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2208      	movs	r2, #8
 80035a8:	18ba      	adds	r2, r7, r2
 80035aa:	8812      	ldrh	r2, [r2, #0]
 80035ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2bff      	cmp	r3, #255	@ 0xff
 80035bc:	d911      	bls.n	80035e2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	22ff      	movs	r2, #255	@ 0xff
 80035c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	2380      	movs	r3, #128	@ 0x80
 80035cc:	045c      	lsls	r4, r3, #17
 80035ce:	230a      	movs	r3, #10
 80035d0:	18fb      	adds	r3, r7, r3
 80035d2:	8819      	ldrh	r1, [r3, #0]
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	4b55      	ldr	r3, [pc, #340]	@ (800372c <HAL_I2C_Master_Receive+0x208>)
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	0023      	movs	r3, r4
 80035dc:	f000 fb44 	bl	8003c68 <I2C_TransferConfig>
 80035e0:	e076      	b.n	80036d0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	2380      	movs	r3, #128	@ 0x80
 80035f4:	049c      	lsls	r4, r3, #18
 80035f6:	230a      	movs	r3, #10
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	8819      	ldrh	r1, [r3, #0]
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	4b4b      	ldr	r3, [pc, #300]	@ (800372c <HAL_I2C_Master_Receive+0x208>)
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	0023      	movs	r3, r4
 8003604:	f000 fb30 	bl	8003c68 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003608:	e062      	b.n	80036d0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	0018      	movs	r0, r3
 8003612:	f000 f993 	bl	800393c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003616:	1e03      	subs	r3, r0, #0
 8003618:	d001      	beq.n	800361e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e082      	b.n	8003724 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d03a      	beq.n	80036d0 <HAL_I2C_Master_Receive+0x1ac>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365e:	2b00      	cmp	r3, #0
 8003660:	d136      	bne.n	80036d0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003662:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	0013      	movs	r3, r2
 800366c:	2200      	movs	r2, #0
 800366e:	2180      	movs	r1, #128	@ 0x80
 8003670:	f000 f882 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 8003674:	1e03      	subs	r3, r0, #0
 8003676:	d001      	beq.n	800367c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e053      	b.n	8003724 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	2bff      	cmp	r3, #255	@ 0xff
 8003684:	d911      	bls.n	80036aa <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	22ff      	movs	r2, #255	@ 0xff
 800368a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003690:	b2da      	uxtb	r2, r3
 8003692:	2380      	movs	r3, #128	@ 0x80
 8003694:	045c      	lsls	r4, r3, #17
 8003696:	230a      	movs	r3, #10
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	8819      	ldrh	r1, [r3, #0]
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	2300      	movs	r3, #0
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	0023      	movs	r3, r4
 80036a4:	f000 fae0 	bl	8003c68 <I2C_TransferConfig>
 80036a8:	e012      	b.n	80036d0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	2380      	movs	r3, #128	@ 0x80
 80036bc:	049c      	lsls	r4, r3, #18
 80036be:	230a      	movs	r3, #10
 80036c0:	18fb      	adds	r3, r7, r3
 80036c2:	8819      	ldrh	r1, [r3, #0]
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	2300      	movs	r3, #0
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	0023      	movs	r3, r4
 80036cc:	f000 facc 	bl	8003c68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d197      	bne.n	800360a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	0018      	movs	r0, r3
 80036e2:	f000 f8e7 	bl	80038b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036e6:	1e03      	subs	r3, r0, #0
 80036e8:	d001      	beq.n	80036ee <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e01a      	b.n	8003724 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2220      	movs	r2, #32
 80036f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	490b      	ldr	r1, [pc, #44]	@ (8003730 <HAL_I2C_Master_Receive+0x20c>)
 8003702:	400a      	ands	r2, r1
 8003704:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2241      	movs	r2, #65	@ 0x41
 800370a:	2120      	movs	r1, #32
 800370c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2242      	movs	r2, #66	@ 0x42
 8003712:	2100      	movs	r1, #0
 8003714:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2240      	movs	r2, #64	@ 0x40
 800371a:	2100      	movs	r1, #0
 800371c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	e000      	b.n	8003724 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003722:	2302      	movs	r3, #2
  }
}
 8003724:	0018      	movs	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	b007      	add	sp, #28
 800372a:	bd90      	pop	{r4, r7, pc}
 800372c:	80002400 	.word	0x80002400
 8003730:	fe00e800 	.word	0xfe00e800

08003734 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2202      	movs	r2, #2
 8003744:	4013      	ands	r3, r2
 8003746:	2b02      	cmp	r3, #2
 8003748:	d103      	bne.n	8003752 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2200      	movs	r2, #0
 8003750:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	2201      	movs	r2, #1
 800375a:	4013      	ands	r3, r2
 800375c:	2b01      	cmp	r3, #1
 800375e:	d007      	beq.n	8003770 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2101      	movs	r1, #1
 800376c:	430a      	orrs	r2, r1
 800376e:	619a      	str	r2, [r3, #24]
  }
}
 8003770:	46c0      	nop			@ (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b002      	add	sp, #8
 8003776:	bd80      	pop	{r7, pc}

08003778 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	1dfb      	adds	r3, r7, #7
 8003786:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003788:	e03a      	b.n	8003800 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	6839      	ldr	r1, [r7, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	0018      	movs	r0, r3
 8003792:	f000 f971 	bl	8003a78 <I2C_IsErrorOccurred>
 8003796:	1e03      	subs	r3, r0, #0
 8003798:	d001      	beq.n	800379e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e040      	b.n	8003820 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	3301      	adds	r3, #1
 80037a2:	d02d      	beq.n	8003800 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a4:	f7fe fd9a 	bl	80022dc <HAL_GetTick>
 80037a8:	0002      	movs	r2, r0
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d302      	bcc.n	80037ba <I2C_WaitOnFlagUntilTimeout+0x42>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d122      	bne.n	8003800 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	4013      	ands	r3, r2
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	425a      	negs	r2, r3
 80037ca:	4153      	adcs	r3, r2
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	001a      	movs	r2, r3
 80037d0:	1dfb      	adds	r3, r7, #7
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d113      	bne.n	8003800 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037dc:	2220      	movs	r2, #32
 80037de:	431a      	orrs	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2241      	movs	r2, #65	@ 0x41
 80037e8:	2120      	movs	r1, #32
 80037ea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2242      	movs	r2, #66	@ 0x42
 80037f0:	2100      	movs	r1, #0
 80037f2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2240      	movs	r2, #64	@ 0x40
 80037f8:	2100      	movs	r1, #0
 80037fa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e00f      	b.n	8003820 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	4013      	ands	r3, r2
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	425a      	negs	r2, r3
 8003810:	4153      	adcs	r3, r2
 8003812:	b2db      	uxtb	r3, r3
 8003814:	001a      	movs	r2, r3
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d0b5      	beq.n	800378a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	0018      	movs	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	b004      	add	sp, #16
 8003826:	bd80      	pop	{r7, pc}

08003828 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003834:	e032      	b.n	800389c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	0018      	movs	r0, r3
 800383e:	f000 f91b 	bl	8003a78 <I2C_IsErrorOccurred>
 8003842:	1e03      	subs	r3, r0, #0
 8003844:	d001      	beq.n	800384a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e030      	b.n	80038ac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	3301      	adds	r3, #1
 800384e:	d025      	beq.n	800389c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003850:	f7fe fd44 	bl	80022dc <HAL_GetTick>
 8003854:	0002      	movs	r2, r0
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	429a      	cmp	r2, r3
 800385e:	d302      	bcc.n	8003866 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d11a      	bne.n	800389c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2202      	movs	r2, #2
 800386e:	4013      	ands	r3, r2
 8003870:	2b02      	cmp	r3, #2
 8003872:	d013      	beq.n	800389c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003878:	2220      	movs	r2, #32
 800387a:	431a      	orrs	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2241      	movs	r2, #65	@ 0x41
 8003884:	2120      	movs	r1, #32
 8003886:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2242      	movs	r2, #66	@ 0x42
 800388c:	2100      	movs	r1, #0
 800388e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2240      	movs	r2, #64	@ 0x40
 8003894:	2100      	movs	r1, #0
 8003896:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e007      	b.n	80038ac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2202      	movs	r2, #2
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d1c5      	bne.n	8003836 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	0018      	movs	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b004      	add	sp, #16
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038c0:	e02f      	b.n	8003922 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	0018      	movs	r0, r3
 80038ca:	f000 f8d5 	bl	8003a78 <I2C_IsErrorOccurred>
 80038ce:	1e03      	subs	r3, r0, #0
 80038d0:	d001      	beq.n	80038d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e02d      	b.n	8003932 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d6:	f7fe fd01 	bl	80022dc <HAL_GetTick>
 80038da:	0002      	movs	r2, r0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d302      	bcc.n	80038ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d11a      	bne.n	8003922 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	2220      	movs	r2, #32
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b20      	cmp	r3, #32
 80038f8:	d013      	beq.n	8003922 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fe:	2220      	movs	r2, #32
 8003900:	431a      	orrs	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2241      	movs	r2, #65	@ 0x41
 800390a:	2120      	movs	r1, #32
 800390c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2242      	movs	r2, #66	@ 0x42
 8003912:	2100      	movs	r1, #0
 8003914:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2240      	movs	r2, #64	@ 0x40
 800391a:	2100      	movs	r1, #0
 800391c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e007      	b.n	8003932 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2220      	movs	r2, #32
 800392a:	4013      	ands	r3, r2
 800392c:	2b20      	cmp	r3, #32
 800392e:	d1c8      	bne.n	80038c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	0018      	movs	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	b004      	add	sp, #16
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003948:	2317      	movs	r3, #23
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003950:	e07b      	b.n	8003a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	0018      	movs	r0, r3
 800395a:	f000 f88d 	bl	8003a78 <I2C_IsErrorOccurred>
 800395e:	1e03      	subs	r3, r0, #0
 8003960:	d003      	beq.n	800396a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8003962:	2317      	movs	r3, #23
 8003964:	18fb      	adds	r3, r7, r3
 8003966:	2201      	movs	r2, #1
 8003968:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	2220      	movs	r2, #32
 8003972:	4013      	ands	r3, r2
 8003974:	2b20      	cmp	r3, #32
 8003976:	d140      	bne.n	80039fa <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003978:	2117      	movs	r1, #23
 800397a:	187b      	adds	r3, r7, r1
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d13b      	bne.n	80039fa <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2204      	movs	r2, #4
 800398a:	4013      	ands	r3, r2
 800398c:	2b04      	cmp	r3, #4
 800398e:	d106      	bne.n	800399e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003998:	187b      	adds	r3, r7, r1
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	2210      	movs	r2, #16
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b10      	cmp	r3, #16
 80039aa:	d123      	bne.n	80039f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2210      	movs	r2, #16
 80039b2:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2204      	movs	r2, #4
 80039b8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2220      	movs	r2, #32
 80039c0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4929      	ldr	r1, [pc, #164]	@ (8003a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80039ce:	400a      	ands	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2241      	movs	r2, #65	@ 0x41
 80039d6:	2120      	movs	r1, #32
 80039d8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2242      	movs	r2, #66	@ 0x42
 80039de:	2100      	movs	r1, #0
 80039e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2240      	movs	r2, #64	@ 0x40
 80039e6:	2100      	movs	r1, #0
 80039e8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80039ea:	2317      	movs	r3, #23
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	2201      	movs	r2, #1
 80039f0:	701a      	strb	r2, [r3, #0]
 80039f2:	e002      	b.n	80039fa <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80039fa:	f7fe fc6f 	bl	80022dc <HAL_GetTick>
 80039fe:	0002      	movs	r2, r0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d302      	bcc.n	8003a10 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d11c      	bne.n	8003a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003a10:	2017      	movs	r0, #23
 8003a12:	183b      	adds	r3, r7, r0
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d117      	bne.n	8003a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	2204      	movs	r2, #4
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d010      	beq.n	8003a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2241      	movs	r2, #65	@ 0x41
 8003a38:	2120      	movs	r1, #32
 8003a3a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2240      	movs	r2, #64	@ 0x40
 8003a40:	2100      	movs	r1, #0
 8003a42:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003a44:	183b      	adds	r3, r7, r0
 8003a46:	2201      	movs	r2, #1
 8003a48:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	2204      	movs	r2, #4
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d005      	beq.n	8003a64 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003a58:	2317      	movs	r3, #23
 8003a5a:	18fb      	adds	r3, r7, r3
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d100      	bne.n	8003a64 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003a62:	e776      	b.n	8003952 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8003a64:	2317      	movs	r3, #23
 8003a66:	18fb      	adds	r3, r7, r3
 8003a68:	781b      	ldrb	r3, [r3, #0]
}
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b006      	add	sp, #24
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	46c0      	nop			@ (mov r8, r8)
 8003a74:	fe00e800 	.word	0xfe00e800

08003a78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08a      	sub	sp, #40	@ 0x28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a84:	2327      	movs	r3, #39	@ 0x27
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2210      	movs	r2, #16
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d100      	bne.n	8003aa6 <I2C_IsErrorOccurred+0x2e>
 8003aa4:	e079      	b.n	8003b9a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2210      	movs	r2, #16
 8003aac:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003aae:	e057      	b.n	8003b60 <I2C_IsErrorOccurred+0xe8>
 8003ab0:	2227      	movs	r2, #39	@ 0x27
 8003ab2:	18bb      	adds	r3, r7, r2
 8003ab4:	18ba      	adds	r2, r7, r2
 8003ab6:	7812      	ldrb	r2, [r2, #0]
 8003ab8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	3301      	adds	r3, #1
 8003abe:	d04f      	beq.n	8003b60 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ac0:	f7fe fc0c 	bl	80022dc <HAL_GetTick>
 8003ac4:	0002      	movs	r2, r0
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d302      	bcc.n	8003ad6 <I2C_IsErrorOccurred+0x5e>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d144      	bne.n	8003b60 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	2380      	movs	r3, #128	@ 0x80
 8003ade:	01db      	lsls	r3, r3, #7
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ae4:	2013      	movs	r0, #19
 8003ae6:	183b      	adds	r3, r7, r0
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	2142      	movs	r1, #66	@ 0x42
 8003aec:	5c52      	ldrb	r2, [r2, r1]
 8003aee:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	2380      	movs	r3, #128	@ 0x80
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	401a      	ands	r2, r3
 8003afc:	2380      	movs	r3, #128	@ 0x80
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d126      	bne.n	8003b52 <I2C_IsErrorOccurred+0xda>
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	2380      	movs	r3, #128	@ 0x80
 8003b08:	01db      	lsls	r3, r3, #7
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d021      	beq.n	8003b52 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003b0e:	183b      	adds	r3, r7, r0
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	d01d      	beq.n	8003b52 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2180      	movs	r1, #128	@ 0x80
 8003b22:	01c9      	lsls	r1, r1, #7
 8003b24:	430a      	orrs	r2, r1
 8003b26:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003b28:	f7fe fbd8 	bl	80022dc <HAL_GetTick>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b30:	e00f      	b.n	8003b52 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003b32:	f7fe fbd3 	bl	80022dc <HAL_GetTick>
 8003b36:	0002      	movs	r2, r0
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b19      	cmp	r3, #25
 8003b3e:	d908      	bls.n	8003b52 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	2220      	movs	r2, #32
 8003b44:	4313      	orrs	r3, r2
 8003b46:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003b48:	2327      	movs	r3, #39	@ 0x27
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	701a      	strb	r2, [r3, #0]

              break;
 8003b50:	e006      	b.n	8003b60 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	d1e8      	bne.n	8003b32 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	2220      	movs	r2, #32
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b20      	cmp	r3, #32
 8003b6c:	d004      	beq.n	8003b78 <I2C_IsErrorOccurred+0x100>
 8003b6e:	2327      	movs	r3, #39	@ 0x27
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d09b      	beq.n	8003ab0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b78:	2327      	movs	r3, #39	@ 0x27
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d103      	bne.n	8003b8a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2220      	movs	r2, #32
 8003b88:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b92:	2327      	movs	r3, #39	@ 0x27
 8003b94:	18fb      	adds	r3, r7, r3
 8003b96:	2201      	movs	r2, #1
 8003b98:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	2380      	movs	r3, #128	@ 0x80
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d00c      	beq.n	8003bc6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2280      	movs	r2, #128	@ 0x80
 8003bba:	0052      	lsls	r2, r2, #1
 8003bbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bbe:	2327      	movs	r3, #39	@ 0x27
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	2380      	movs	r3, #128	@ 0x80
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d00c      	beq.n	8003bea <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	2208      	movs	r2, #8
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2280      	movs	r2, #128	@ 0x80
 8003bde:	00d2      	lsls	r2, r2, #3
 8003be0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003be2:	2327      	movs	r3, #39	@ 0x27
 8003be4:	18fb      	adds	r3, r7, r3
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	2380      	movs	r3, #128	@ 0x80
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d00c      	beq.n	8003c0e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2280      	movs	r2, #128	@ 0x80
 8003c02:	0092      	lsls	r2, r2, #2
 8003c04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c06:	2327      	movs	r3, #39	@ 0x27
 8003c08:	18fb      	adds	r3, r7, r3
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003c0e:	2327      	movs	r3, #39	@ 0x27
 8003c10:	18fb      	adds	r3, r7, r3
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01d      	beq.n	8003c54 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f7ff fd8a 	bl	8003734 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	490e      	ldr	r1, [pc, #56]	@ (8003c64 <I2C_IsErrorOccurred+0x1ec>)
 8003c2c:	400a      	ands	r2, r1
 8003c2e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2241      	movs	r2, #65	@ 0x41
 8003c40:	2120      	movs	r1, #32
 8003c42:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2242      	movs	r2, #66	@ 0x42
 8003c48:	2100      	movs	r1, #0
 8003c4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2240      	movs	r2, #64	@ 0x40
 8003c50:	2100      	movs	r1, #0
 8003c52:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003c54:	2327      	movs	r3, #39	@ 0x27
 8003c56:	18fb      	adds	r3, r7, r3
 8003c58:	781b      	ldrb	r3, [r3, #0]
}
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	b00a      	add	sp, #40	@ 0x28
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	46c0      	nop			@ (mov r8, r8)
 8003c64:	fe00e800 	.word	0xfe00e800

08003c68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c68:	b590      	push	{r4, r7, lr}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	0008      	movs	r0, r1
 8003c72:	0011      	movs	r1, r2
 8003c74:	607b      	str	r3, [r7, #4]
 8003c76:	240a      	movs	r4, #10
 8003c78:	193b      	adds	r3, r7, r4
 8003c7a:	1c02      	adds	r2, r0, #0
 8003c7c:	801a      	strh	r2, [r3, #0]
 8003c7e:	2009      	movs	r0, #9
 8003c80:	183b      	adds	r3, r7, r0
 8003c82:	1c0a      	adds	r2, r1, #0
 8003c84:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c86:	193b      	adds	r3, r7, r4
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	059b      	lsls	r3, r3, #22
 8003c8c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c8e:	183b      	adds	r3, r7, r0
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	0419      	lsls	r1, r3, #16
 8003c94:	23ff      	movs	r3, #255	@ 0xff
 8003c96:	041b      	lsls	r3, r3, #16
 8003c98:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c9a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	085b      	lsrs	r3, r3, #1
 8003ca8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cb2:	0d51      	lsrs	r1, r2, #21
 8003cb4:	2280      	movs	r2, #128	@ 0x80
 8003cb6:	00d2      	lsls	r2, r2, #3
 8003cb8:	400a      	ands	r2, r1
 8003cba:	4907      	ldr	r1, [pc, #28]	@ (8003cd8 <I2C_TransferConfig+0x70>)
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	43d2      	mvns	r2, r2
 8003cc0:	401a      	ands	r2, r3
 8003cc2:	0011      	movs	r1, r2
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003cce:	46c0      	nop			@ (mov r8, r8)
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b007      	add	sp, #28
 8003cd4:	bd90      	pop	{r4, r7, pc}
 8003cd6:	46c0      	nop			@ (mov r8, r8)
 8003cd8:	03ff63ff 	.word	0x03ff63ff

08003cdc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2241      	movs	r2, #65	@ 0x41
 8003cea:	5c9b      	ldrb	r3, [r3, r2]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b20      	cmp	r3, #32
 8003cf0:	d138      	bne.n	8003d64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2240      	movs	r2, #64	@ 0x40
 8003cf6:	5c9b      	ldrb	r3, [r3, r2]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e032      	b.n	8003d66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2240      	movs	r2, #64	@ 0x40
 8003d04:	2101      	movs	r1, #1
 8003d06:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2241      	movs	r2, #65	@ 0x41
 8003d0c:	2124      	movs	r1, #36	@ 0x24
 8003d0e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	438a      	bics	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4911      	ldr	r1, [pc, #68]	@ (8003d70 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003d2c:	400a      	ands	r2, r1
 8003d2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6819      	ldr	r1, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2241      	movs	r2, #65	@ 0x41
 8003d54:	2120      	movs	r1, #32
 8003d56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2240      	movs	r2, #64	@ 0x40
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	e000      	b.n	8003d66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d64:	2302      	movs	r3, #2
  }
}
 8003d66:	0018      	movs	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b002      	add	sp, #8
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	ffffefff 	.word	0xffffefff

08003d74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2241      	movs	r2, #65	@ 0x41
 8003d82:	5c9b      	ldrb	r3, [r3, r2]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	d139      	bne.n	8003dfe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2240      	movs	r2, #64	@ 0x40
 8003d8e:	5c9b      	ldrb	r3, [r3, r2]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e033      	b.n	8003e00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2240      	movs	r2, #64	@ 0x40
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2241      	movs	r2, #65	@ 0x41
 8003da4:	2124      	movs	r1, #36	@ 0x24
 8003da6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2101      	movs	r1, #1
 8003db4:	438a      	bics	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4a11      	ldr	r2, [pc, #68]	@ (8003e08 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2101      	movs	r1, #1
 8003de6:	430a      	orrs	r2, r1
 8003de8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2241      	movs	r2, #65	@ 0x41
 8003dee:	2120      	movs	r1, #32
 8003df0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2240      	movs	r2, #64	@ 0x40
 8003df6:	2100      	movs	r1, #0
 8003df8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e000      	b.n	8003e00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003dfe:	2302      	movs	r3, #2
  }
}
 8003e00:	0018      	movs	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b004      	add	sp, #16
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	fffff0ff 	.word	0xfffff0ff

08003e0c <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e10:	4b04      	ldr	r3, [pc, #16]	@ (8003e24 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	4b03      	ldr	r3, [pc, #12]	@ (8003e24 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003e16:	2180      	movs	r1, #128	@ 0x80
 8003e18:	0049      	lsls	r1, r1, #1
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]
}
 8003e1e:	46c0      	nop			@ (mov r8, r8)
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40007000 	.word	0x40007000

08003e28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003e30:	4b19      	ldr	r3, [pc, #100]	@ (8003e98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a19      	ldr	r2, [pc, #100]	@ (8003e9c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	0019      	movs	r1, r3
 8003e3a:	4b17      	ldr	r3, [pc, #92]	@ (8003e98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	2380      	movs	r3, #128	@ 0x80
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d11f      	bne.n	8003e8c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003e4c:	4b14      	ldr	r3, [pc, #80]	@ (8003ea0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	0013      	movs	r3, r2
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	189b      	adds	r3, r3, r2
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	4912      	ldr	r1, [pc, #72]	@ (8003ea4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f7fc f952 	bl	8000104 <__udivsi3>
 8003e60:	0003      	movs	r3, r0
 8003e62:	3301      	adds	r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e66:	e008      	b.n	8003e7a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	e001      	b.n	8003e7a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e009      	b.n	8003e8e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e7a:	4b07      	ldr	r3, [pc, #28]	@ (8003e98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e7c:	695a      	ldr	r2, [r3, #20]
 8003e7e:	2380      	movs	r3, #128	@ 0x80
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	401a      	ands	r2, r3
 8003e84:	2380      	movs	r3, #128	@ 0x80
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d0ed      	beq.n	8003e68 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	0018      	movs	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b004      	add	sp, #16
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	46c0      	nop			@ (mov r8, r8)
 8003e98:	40007000 	.word	0x40007000
 8003e9c:	fffff9ff 	.word	0xfffff9ff
 8003ea0:	2000004c 	.word	0x2000004c
 8003ea4:	000f4240 	.word	0x000f4240

08003ea8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e2fe      	b.n	80044b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	d100      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x1e>
 8003ec4:	e07c      	b.n	8003fc0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ec6:	4bc3      	ldr	r3, [pc, #780]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2238      	movs	r2, #56	@ 0x38
 8003ecc:	4013      	ands	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ed0:	4bc0      	ldr	r3, [pc, #768]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	d102      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x3e>
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	d002      	beq.n	8003eec <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d10b      	bne.n	8003f04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eec:	4bb9      	ldr	r3, [pc, #740]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	2380      	movs	r3, #128	@ 0x80
 8003ef2:	029b      	lsls	r3, r3, #10
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d062      	beq.n	8003fbe <HAL_RCC_OscConfig+0x116>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d15e      	bne.n	8003fbe <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e2d9      	b.n	80044b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	2380      	movs	r3, #128	@ 0x80
 8003f0a:	025b      	lsls	r3, r3, #9
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d107      	bne.n	8003f20 <HAL_RCC_OscConfig+0x78>
 8003f10:	4bb0      	ldr	r3, [pc, #704]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	4baf      	ldr	r3, [pc, #700]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8003f16:	2180      	movs	r1, #128	@ 0x80
 8003f18:	0249      	lsls	r1, r1, #9
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	e020      	b.n	8003f62 <HAL_RCC_OscConfig+0xba>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	23a0      	movs	r3, #160	@ 0xa0
 8003f26:	02db      	lsls	r3, r3, #11
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d10e      	bne.n	8003f4a <HAL_RCC_OscConfig+0xa2>
 8003f2c:	4ba9      	ldr	r3, [pc, #676]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	4ba8      	ldr	r3, [pc, #672]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8003f32:	2180      	movs	r1, #128	@ 0x80
 8003f34:	02c9      	lsls	r1, r1, #11
 8003f36:	430a      	orrs	r2, r1
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	4ba6      	ldr	r3, [pc, #664]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4ba5      	ldr	r3, [pc, #660]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8003f40:	2180      	movs	r1, #128	@ 0x80
 8003f42:	0249      	lsls	r1, r1, #9
 8003f44:	430a      	orrs	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	e00b      	b.n	8003f62 <HAL_RCC_OscConfig+0xba>
 8003f4a:	4ba2      	ldr	r3, [pc, #648]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4ba1      	ldr	r3, [pc, #644]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8003f50:	49a1      	ldr	r1, [pc, #644]	@ (80041d8 <HAL_RCC_OscConfig+0x330>)
 8003f52:	400a      	ands	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	4b9f      	ldr	r3, [pc, #636]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4b9e      	ldr	r3, [pc, #632]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8003f5c:	499f      	ldr	r1, [pc, #636]	@ (80041dc <HAL_RCC_OscConfig+0x334>)
 8003f5e:	400a      	ands	r2, r1
 8003f60:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d014      	beq.n	8003f94 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6a:	f7fe f9b7 	bl	80022dc <HAL_GetTick>
 8003f6e:	0003      	movs	r3, r0
 8003f70:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f74:	f7fe f9b2 	bl	80022dc <HAL_GetTick>
 8003f78:	0002      	movs	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b64      	cmp	r3, #100	@ 0x64
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e298      	b.n	80044b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f86:	4b93      	ldr	r3, [pc, #588]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	2380      	movs	r3, #128	@ 0x80
 8003f8c:	029b      	lsls	r3, r3, #10
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d0f0      	beq.n	8003f74 <HAL_RCC_OscConfig+0xcc>
 8003f92:	e015      	b.n	8003fc0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fe f9a2 	bl	80022dc <HAL_GetTick>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f9e:	f7fe f99d 	bl	80022dc <HAL_GetTick>
 8003fa2:	0002      	movs	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b64      	cmp	r3, #100	@ 0x64
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e283      	b.n	80044b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fb0:	4b88      	ldr	r3, [pc, #544]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	2380      	movs	r3, #128	@ 0x80
 8003fb6:	029b      	lsls	r3, r3, #10
 8003fb8:	4013      	ands	r3, r2
 8003fba:	d1f0      	bne.n	8003f9e <HAL_RCC_OscConfig+0xf6>
 8003fbc:	e000      	b.n	8003fc0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fbe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d100      	bne.n	8003fcc <HAL_RCC_OscConfig+0x124>
 8003fca:	e099      	b.n	8004100 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fcc:	4b81      	ldr	r3, [pc, #516]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2238      	movs	r2, #56	@ 0x38
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fd6:	4b7f      	ldr	r3, [pc, #508]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	2203      	movs	r2, #3
 8003fdc:	4013      	ands	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b10      	cmp	r3, #16
 8003fe4:	d102      	bne.n	8003fec <HAL_RCC_OscConfig+0x144>
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d002      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d135      	bne.n	800405e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ff2:	4b78      	ldr	r3, [pc, #480]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	2380      	movs	r3, #128	@ 0x80
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d005      	beq.n	800400a <HAL_RCC_OscConfig+0x162>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e256      	b.n	80044b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400a:	4b72      	ldr	r3, [pc, #456]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	4a74      	ldr	r2, [pc, #464]	@ (80041e0 <HAL_RCC_OscConfig+0x338>)
 8004010:	4013      	ands	r3, r2
 8004012:	0019      	movs	r1, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	021a      	lsls	r2, r3, #8
 800401a:	4b6e      	ldr	r3, [pc, #440]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 800401c:	430a      	orrs	r2, r1
 800401e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d112      	bne.n	800404c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004026:	4b6b      	ldr	r3, [pc, #428]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a6e      	ldr	r2, [pc, #440]	@ (80041e4 <HAL_RCC_OscConfig+0x33c>)
 800402c:	4013      	ands	r3, r2
 800402e:	0019      	movs	r1, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	4b67      	ldr	r3, [pc, #412]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8004036:	430a      	orrs	r2, r1
 8004038:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800403a:	4b66      	ldr	r3, [pc, #408]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	0adb      	lsrs	r3, r3, #11
 8004040:	2207      	movs	r2, #7
 8004042:	4013      	ands	r3, r2
 8004044:	4a68      	ldr	r2, [pc, #416]	@ (80041e8 <HAL_RCC_OscConfig+0x340>)
 8004046:	40da      	lsrs	r2, r3
 8004048:	4b68      	ldr	r3, [pc, #416]	@ (80041ec <HAL_RCC_OscConfig+0x344>)
 800404a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800404c:	4b68      	ldr	r3, [pc, #416]	@ (80041f0 <HAL_RCC_OscConfig+0x348>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	0018      	movs	r0, r3
 8004052:	f7fe f8e7 	bl	8002224 <HAL_InitTick>
 8004056:	1e03      	subs	r3, r0, #0
 8004058:	d051      	beq.n	80040fe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e22c      	b.n	80044b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d030      	beq.n	80040c8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004066:	4b5b      	ldr	r3, [pc, #364]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a5e      	ldr	r2, [pc, #376]	@ (80041e4 <HAL_RCC_OscConfig+0x33c>)
 800406c:	4013      	ands	r3, r2
 800406e:	0019      	movs	r1, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	4b57      	ldr	r3, [pc, #348]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8004076:	430a      	orrs	r2, r1
 8004078:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800407a:	4b56      	ldr	r3, [pc, #344]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b55      	ldr	r3, [pc, #340]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8004080:	2180      	movs	r1, #128	@ 0x80
 8004082:	0049      	lsls	r1, r1, #1
 8004084:	430a      	orrs	r2, r1
 8004086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004088:	f7fe f928 	bl	80022dc <HAL_GetTick>
 800408c:	0003      	movs	r3, r0
 800408e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004092:	f7fe f923 	bl	80022dc <HAL_GetTick>
 8004096:	0002      	movs	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e209      	b.n	80044b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040a4:	4b4b      	ldr	r3, [pc, #300]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	2380      	movs	r3, #128	@ 0x80
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4013      	ands	r3, r2
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b0:	4b48      	ldr	r3, [pc, #288]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	4a4a      	ldr	r2, [pc, #296]	@ (80041e0 <HAL_RCC_OscConfig+0x338>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	0019      	movs	r1, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	021a      	lsls	r2, r3, #8
 80040c0:	4b44      	ldr	r3, [pc, #272]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 80040c2:	430a      	orrs	r2, r1
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	e01b      	b.n	8004100 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80040c8:	4b42      	ldr	r3, [pc, #264]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	4b41      	ldr	r3, [pc, #260]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 80040ce:	4949      	ldr	r1, [pc, #292]	@ (80041f4 <HAL_RCC_OscConfig+0x34c>)
 80040d0:	400a      	ands	r2, r1
 80040d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fe f902 	bl	80022dc <HAL_GetTick>
 80040d8:	0003      	movs	r3, r0
 80040da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040de:	f7fe f8fd 	bl	80022dc <HAL_GetTick>
 80040e2:	0002      	movs	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e1e3      	b.n	80044b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040f0:	4b38      	ldr	r3, [pc, #224]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	2380      	movs	r3, #128	@ 0x80
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	4013      	ands	r3, r2
 80040fa:	d1f0      	bne.n	80040de <HAL_RCC_OscConfig+0x236>
 80040fc:	e000      	b.n	8004100 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040fe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2208      	movs	r2, #8
 8004106:	4013      	ands	r3, r2
 8004108:	d047      	beq.n	800419a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800410a:	4b32      	ldr	r3, [pc, #200]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2238      	movs	r2, #56	@ 0x38
 8004110:	4013      	ands	r3, r2
 8004112:	2b18      	cmp	r3, #24
 8004114:	d10a      	bne.n	800412c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004116:	4b2f      	ldr	r3, [pc, #188]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8004118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800411a:	2202      	movs	r2, #2
 800411c:	4013      	ands	r3, r2
 800411e:	d03c      	beq.n	800419a <HAL_RCC_OscConfig+0x2f2>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d138      	bne.n	800419a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e1c5      	b.n	80044b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d019      	beq.n	8004168 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004134:	4b27      	ldr	r3, [pc, #156]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8004136:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004138:	4b26      	ldr	r3, [pc, #152]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 800413a:	2101      	movs	r1, #1
 800413c:	430a      	orrs	r2, r1
 800413e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004140:	f7fe f8cc 	bl	80022dc <HAL_GetTick>
 8004144:	0003      	movs	r3, r0
 8004146:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414a:	f7fe f8c7 	bl	80022dc <HAL_GetTick>
 800414e:	0002      	movs	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e1ad      	b.n	80044b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800415c:	4b1d      	ldr	r3, [pc, #116]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 800415e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004160:	2202      	movs	r2, #2
 8004162:	4013      	ands	r3, r2
 8004164:	d0f1      	beq.n	800414a <HAL_RCC_OscConfig+0x2a2>
 8004166:	e018      	b.n	800419a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004168:	4b1a      	ldr	r3, [pc, #104]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 800416a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800416c:	4b19      	ldr	r3, [pc, #100]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 800416e:	2101      	movs	r1, #1
 8004170:	438a      	bics	r2, r1
 8004172:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fe f8b2 	bl	80022dc <HAL_GetTick>
 8004178:	0003      	movs	r3, r0
 800417a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800417e:	f7fe f8ad 	bl	80022dc <HAL_GetTick>
 8004182:	0002      	movs	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e193      	b.n	80044b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004190:	4b10      	ldr	r3, [pc, #64]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 8004192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004194:	2202      	movs	r2, #2
 8004196:	4013      	ands	r3, r2
 8004198:	d1f1      	bne.n	800417e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2204      	movs	r2, #4
 80041a0:	4013      	ands	r3, r2
 80041a2:	d100      	bne.n	80041a6 <HAL_RCC_OscConfig+0x2fe>
 80041a4:	e0c6      	b.n	8004334 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041a6:	231f      	movs	r3, #31
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	2200      	movs	r2, #0
 80041ac:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80041ae:	4b09      	ldr	r3, [pc, #36]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	2238      	movs	r2, #56	@ 0x38
 80041b4:	4013      	ands	r3, r2
 80041b6:	2b20      	cmp	r3, #32
 80041b8:	d11e      	bne.n	80041f8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80041ba:	4b06      	ldr	r3, [pc, #24]	@ (80041d4 <HAL_RCC_OscConfig+0x32c>)
 80041bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041be:	2202      	movs	r2, #2
 80041c0:	4013      	ands	r3, r2
 80041c2:	d100      	bne.n	80041c6 <HAL_RCC_OscConfig+0x31e>
 80041c4:	e0b6      	b.n	8004334 <HAL_RCC_OscConfig+0x48c>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d000      	beq.n	80041d0 <HAL_RCC_OscConfig+0x328>
 80041ce:	e0b1      	b.n	8004334 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e171      	b.n	80044b8 <HAL_RCC_OscConfig+0x610>
 80041d4:	40021000 	.word	0x40021000
 80041d8:	fffeffff 	.word	0xfffeffff
 80041dc:	fffbffff 	.word	0xfffbffff
 80041e0:	ffff80ff 	.word	0xffff80ff
 80041e4:	ffffc7ff 	.word	0xffffc7ff
 80041e8:	00f42400 	.word	0x00f42400
 80041ec:	2000004c 	.word	0x2000004c
 80041f0:	20000050 	.word	0x20000050
 80041f4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041f8:	4bb1      	ldr	r3, [pc, #708]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 80041fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041fc:	2380      	movs	r3, #128	@ 0x80
 80041fe:	055b      	lsls	r3, r3, #21
 8004200:	4013      	ands	r3, r2
 8004202:	d101      	bne.n	8004208 <HAL_RCC_OscConfig+0x360>
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <HAL_RCC_OscConfig+0x362>
 8004208:	2300      	movs	r3, #0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d011      	beq.n	8004232 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800420e:	4bac      	ldr	r3, [pc, #688]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 8004210:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004212:	4bab      	ldr	r3, [pc, #684]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 8004214:	2180      	movs	r1, #128	@ 0x80
 8004216:	0549      	lsls	r1, r1, #21
 8004218:	430a      	orrs	r2, r1
 800421a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800421c:	4ba8      	ldr	r3, [pc, #672]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 800421e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004220:	2380      	movs	r3, #128	@ 0x80
 8004222:	055b      	lsls	r3, r3, #21
 8004224:	4013      	ands	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800422a:	231f      	movs	r3, #31
 800422c:	18fb      	adds	r3, r7, r3
 800422e:	2201      	movs	r2, #1
 8004230:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004232:	4ba4      	ldr	r3, [pc, #656]	@ (80044c4 <HAL_RCC_OscConfig+0x61c>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	2380      	movs	r3, #128	@ 0x80
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	4013      	ands	r3, r2
 800423c:	d11a      	bne.n	8004274 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800423e:	4ba1      	ldr	r3, [pc, #644]	@ (80044c4 <HAL_RCC_OscConfig+0x61c>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4ba0      	ldr	r3, [pc, #640]	@ (80044c4 <HAL_RCC_OscConfig+0x61c>)
 8004244:	2180      	movs	r1, #128	@ 0x80
 8004246:	0049      	lsls	r1, r1, #1
 8004248:	430a      	orrs	r2, r1
 800424a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800424c:	f7fe f846 	bl	80022dc <HAL_GetTick>
 8004250:	0003      	movs	r3, r0
 8004252:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004256:	f7fe f841 	bl	80022dc <HAL_GetTick>
 800425a:	0002      	movs	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e127      	b.n	80044b8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004268:	4b96      	ldr	r3, [pc, #600]	@ (80044c4 <HAL_RCC_OscConfig+0x61c>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	2380      	movs	r3, #128	@ 0x80
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	4013      	ands	r3, r2
 8004272:	d0f0      	beq.n	8004256 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d106      	bne.n	800428a <HAL_RCC_OscConfig+0x3e2>
 800427c:	4b90      	ldr	r3, [pc, #576]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 800427e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004280:	4b8f      	ldr	r3, [pc, #572]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 8004282:	2101      	movs	r1, #1
 8004284:	430a      	orrs	r2, r1
 8004286:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004288:	e01c      	b.n	80042c4 <HAL_RCC_OscConfig+0x41c>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b05      	cmp	r3, #5
 8004290:	d10c      	bne.n	80042ac <HAL_RCC_OscConfig+0x404>
 8004292:	4b8b      	ldr	r3, [pc, #556]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 8004294:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004296:	4b8a      	ldr	r3, [pc, #552]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 8004298:	2104      	movs	r1, #4
 800429a:	430a      	orrs	r2, r1
 800429c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800429e:	4b88      	ldr	r3, [pc, #544]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 80042a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80042a2:	4b87      	ldr	r3, [pc, #540]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 80042a4:	2101      	movs	r1, #1
 80042a6:	430a      	orrs	r2, r1
 80042a8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042aa:	e00b      	b.n	80042c4 <HAL_RCC_OscConfig+0x41c>
 80042ac:	4b84      	ldr	r3, [pc, #528]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 80042ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80042b0:	4b83      	ldr	r3, [pc, #524]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 80042b2:	2101      	movs	r1, #1
 80042b4:	438a      	bics	r2, r1
 80042b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042b8:	4b81      	ldr	r3, [pc, #516]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 80042ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80042bc:	4b80      	ldr	r3, [pc, #512]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 80042be:	2104      	movs	r1, #4
 80042c0:	438a      	bics	r2, r1
 80042c2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d014      	beq.n	80042f6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fe f806 	bl	80022dc <HAL_GetTick>
 80042d0:	0003      	movs	r3, r0
 80042d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d4:	e009      	b.n	80042ea <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d6:	f7fe f801 	bl	80022dc <HAL_GetTick>
 80042da:	0002      	movs	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	4a79      	ldr	r2, [pc, #484]	@ (80044c8 <HAL_RCC_OscConfig+0x620>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e0e6      	b.n	80044b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ea:	4b75      	ldr	r3, [pc, #468]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 80042ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ee:	2202      	movs	r2, #2
 80042f0:	4013      	ands	r3, r2
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x42e>
 80042f4:	e013      	b.n	800431e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f6:	f7fd fff1 	bl	80022dc <HAL_GetTick>
 80042fa:	0003      	movs	r3, r0
 80042fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042fe:	e009      	b.n	8004314 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004300:	f7fd ffec 	bl	80022dc <HAL_GetTick>
 8004304:	0002      	movs	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	4a6f      	ldr	r2, [pc, #444]	@ (80044c8 <HAL_RCC_OscConfig+0x620>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e0d1      	b.n	80044b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004314:	4b6a      	ldr	r3, [pc, #424]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 8004316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004318:	2202      	movs	r2, #2
 800431a:	4013      	ands	r3, r2
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800431e:	231f      	movs	r3, #31
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d105      	bne.n	8004334 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004328:	4b65      	ldr	r3, [pc, #404]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 800432a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800432c:	4b64      	ldr	r3, [pc, #400]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 800432e:	4967      	ldr	r1, [pc, #412]	@ (80044cc <HAL_RCC_OscConfig+0x624>)
 8004330:	400a      	ands	r2, r1
 8004332:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d100      	bne.n	800433e <HAL_RCC_OscConfig+0x496>
 800433c:	e0bb      	b.n	80044b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800433e:	4b60      	ldr	r3, [pc, #384]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2238      	movs	r2, #56	@ 0x38
 8004344:	4013      	ands	r3, r2
 8004346:	2b10      	cmp	r3, #16
 8004348:	d100      	bne.n	800434c <HAL_RCC_OscConfig+0x4a4>
 800434a:	e07b      	b.n	8004444 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	2b02      	cmp	r3, #2
 8004352:	d156      	bne.n	8004402 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004354:	4b5a      	ldr	r3, [pc, #360]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4b59      	ldr	r3, [pc, #356]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 800435a:	495d      	ldr	r1, [pc, #372]	@ (80044d0 <HAL_RCC_OscConfig+0x628>)
 800435c:	400a      	ands	r2, r1
 800435e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004360:	f7fd ffbc 	bl	80022dc <HAL_GetTick>
 8004364:	0003      	movs	r3, r0
 8004366:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800436a:	f7fd ffb7 	bl	80022dc <HAL_GetTick>
 800436e:	0002      	movs	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e09d      	b.n	80044b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800437c:	4b50      	ldr	r3, [pc, #320]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	2380      	movs	r3, #128	@ 0x80
 8004382:	049b      	lsls	r3, r3, #18
 8004384:	4013      	ands	r3, r2
 8004386:	d1f0      	bne.n	800436a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004388:	4b4d      	ldr	r3, [pc, #308]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	4a51      	ldr	r2, [pc, #324]	@ (80044d4 <HAL_RCC_OscConfig+0x62c>)
 800438e:	4013      	ands	r3, r2
 8004390:	0019      	movs	r1, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1a      	ldr	r2, [r3, #32]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a0:	021b      	lsls	r3, r3, #8
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043b4:	431a      	orrs	r2, r3
 80043b6:	4b42      	ldr	r3, [pc, #264]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 80043b8:	430a      	orrs	r2, r1
 80043ba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043bc:	4b40      	ldr	r3, [pc, #256]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b3f      	ldr	r3, [pc, #252]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 80043c2:	2180      	movs	r1, #128	@ 0x80
 80043c4:	0449      	lsls	r1, r1, #17
 80043c6:	430a      	orrs	r2, r1
 80043c8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80043ca:	4b3d      	ldr	r3, [pc, #244]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	4b3c      	ldr	r3, [pc, #240]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 80043d0:	2180      	movs	r1, #128	@ 0x80
 80043d2:	0549      	lsls	r1, r1, #21
 80043d4:	430a      	orrs	r2, r1
 80043d6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d8:	f7fd ff80 	bl	80022dc <HAL_GetTick>
 80043dc:	0003      	movs	r3, r0
 80043de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e2:	f7fd ff7b 	bl	80022dc <HAL_GetTick>
 80043e6:	0002      	movs	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e061      	b.n	80044b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043f4:	4b32      	ldr	r3, [pc, #200]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	2380      	movs	r3, #128	@ 0x80
 80043fa:	049b      	lsls	r3, r3, #18
 80043fc:	4013      	ands	r3, r2
 80043fe:	d0f0      	beq.n	80043e2 <HAL_RCC_OscConfig+0x53a>
 8004400:	e059      	b.n	80044b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004402:	4b2f      	ldr	r3, [pc, #188]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4b2e      	ldr	r3, [pc, #184]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 8004408:	4931      	ldr	r1, [pc, #196]	@ (80044d0 <HAL_RCC_OscConfig+0x628>)
 800440a:	400a      	ands	r2, r1
 800440c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440e:	f7fd ff65 	bl	80022dc <HAL_GetTick>
 8004412:	0003      	movs	r3, r0
 8004414:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004418:	f7fd ff60 	bl	80022dc <HAL_GetTick>
 800441c:	0002      	movs	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e046      	b.n	80044b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800442a:	4b25      	ldr	r3, [pc, #148]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	2380      	movs	r3, #128	@ 0x80
 8004430:	049b      	lsls	r3, r3, #18
 8004432:	4013      	ands	r3, r2
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004436:	4b22      	ldr	r3, [pc, #136]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	4b21      	ldr	r3, [pc, #132]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 800443c:	4926      	ldr	r1, [pc, #152]	@ (80044d8 <HAL_RCC_OscConfig+0x630>)
 800443e:	400a      	ands	r2, r1
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	e038      	b.n	80044b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e033      	b.n	80044b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004450:	4b1b      	ldr	r3, [pc, #108]	@ (80044c0 <HAL_RCC_OscConfig+0x618>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2203      	movs	r2, #3
 800445a:	401a      	ands	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	429a      	cmp	r2, r3
 8004462:	d126      	bne.n	80044b2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	2270      	movs	r2, #112	@ 0x70
 8004468:	401a      	ands	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446e:	429a      	cmp	r2, r3
 8004470:	d11f      	bne.n	80044b2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	23fe      	movs	r3, #254	@ 0xfe
 8004476:	01db      	lsls	r3, r3, #7
 8004478:	401a      	ands	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004480:	429a      	cmp	r2, r3
 8004482:	d116      	bne.n	80044b2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	23f8      	movs	r3, #248	@ 0xf8
 8004488:	039b      	lsls	r3, r3, #14
 800448a:	401a      	ands	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004490:	429a      	cmp	r2, r3
 8004492:	d10e      	bne.n	80044b2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	23e0      	movs	r3, #224	@ 0xe0
 8004498:	051b      	lsls	r3, r3, #20
 800449a:	401a      	ands	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d106      	bne.n	80044b2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	0f5b      	lsrs	r3, r3, #29
 80044a8:	075a      	lsls	r2, r3, #29
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d001      	beq.n	80044b6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	0018      	movs	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b008      	add	sp, #32
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40021000 	.word	0x40021000
 80044c4:	40007000 	.word	0x40007000
 80044c8:	00001388 	.word	0x00001388
 80044cc:	efffffff 	.word	0xefffffff
 80044d0:	feffffff 	.word	0xfeffffff
 80044d4:	11c1808c 	.word	0x11c1808c
 80044d8:	eefefffc 	.word	0xeefefffc

080044dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0e9      	b.n	80046c4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044f0:	4b76      	ldr	r3, [pc, #472]	@ (80046cc <HAL_RCC_ClockConfig+0x1f0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2207      	movs	r2, #7
 80044f6:	4013      	ands	r3, r2
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d91e      	bls.n	800453c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4b73      	ldr	r3, [pc, #460]	@ (80046cc <HAL_RCC_ClockConfig+0x1f0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2207      	movs	r2, #7
 8004504:	4393      	bics	r3, r2
 8004506:	0019      	movs	r1, r3
 8004508:	4b70      	ldr	r3, [pc, #448]	@ (80046cc <HAL_RCC_ClockConfig+0x1f0>)
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004510:	f7fd fee4 	bl	80022dc <HAL_GetTick>
 8004514:	0003      	movs	r3, r0
 8004516:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004518:	e009      	b.n	800452e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800451a:	f7fd fedf 	bl	80022dc <HAL_GetTick>
 800451e:	0002      	movs	r2, r0
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	4a6a      	ldr	r2, [pc, #424]	@ (80046d0 <HAL_RCC_ClockConfig+0x1f4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e0ca      	b.n	80046c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800452e:	4b67      	ldr	r3, [pc, #412]	@ (80046cc <HAL_RCC_ClockConfig+0x1f0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2207      	movs	r2, #7
 8004534:	4013      	ands	r3, r2
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d1ee      	bne.n	800451a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2202      	movs	r2, #2
 8004542:	4013      	ands	r3, r2
 8004544:	d015      	beq.n	8004572 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2204      	movs	r2, #4
 800454c:	4013      	ands	r3, r2
 800454e:	d006      	beq.n	800455e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004550:	4b60      	ldr	r3, [pc, #384]	@ (80046d4 <HAL_RCC_ClockConfig+0x1f8>)
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	4b5f      	ldr	r3, [pc, #380]	@ (80046d4 <HAL_RCC_ClockConfig+0x1f8>)
 8004556:	21e0      	movs	r1, #224	@ 0xe0
 8004558:	01c9      	lsls	r1, r1, #7
 800455a:	430a      	orrs	r2, r1
 800455c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800455e:	4b5d      	ldr	r3, [pc, #372]	@ (80046d4 <HAL_RCC_ClockConfig+0x1f8>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	4a5d      	ldr	r2, [pc, #372]	@ (80046d8 <HAL_RCC_ClockConfig+0x1fc>)
 8004564:	4013      	ands	r3, r2
 8004566:	0019      	movs	r1, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	4b59      	ldr	r3, [pc, #356]	@ (80046d4 <HAL_RCC_ClockConfig+0x1f8>)
 800456e:	430a      	orrs	r2, r1
 8004570:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2201      	movs	r2, #1
 8004578:	4013      	ands	r3, r2
 800457a:	d057      	beq.n	800462c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d107      	bne.n	8004594 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004584:	4b53      	ldr	r3, [pc, #332]	@ (80046d4 <HAL_RCC_ClockConfig+0x1f8>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	2380      	movs	r3, #128	@ 0x80
 800458a:	029b      	lsls	r3, r3, #10
 800458c:	4013      	ands	r3, r2
 800458e:	d12b      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e097      	b.n	80046c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b02      	cmp	r3, #2
 800459a:	d107      	bne.n	80045ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800459c:	4b4d      	ldr	r3, [pc, #308]	@ (80046d4 <HAL_RCC_ClockConfig+0x1f8>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	2380      	movs	r3, #128	@ 0x80
 80045a2:	049b      	lsls	r3, r3, #18
 80045a4:	4013      	ands	r3, r2
 80045a6:	d11f      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e08b      	b.n	80046c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d107      	bne.n	80045c4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045b4:	4b47      	ldr	r3, [pc, #284]	@ (80046d4 <HAL_RCC_ClockConfig+0x1f8>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	2380      	movs	r3, #128	@ 0x80
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4013      	ands	r3, r2
 80045be:	d113      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e07f      	b.n	80046c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d106      	bne.n	80045da <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045cc:	4b41      	ldr	r3, [pc, #260]	@ (80046d4 <HAL_RCC_ClockConfig+0x1f8>)
 80045ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d0:	2202      	movs	r2, #2
 80045d2:	4013      	ands	r3, r2
 80045d4:	d108      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e074      	b.n	80046c4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045da:	4b3e      	ldr	r3, [pc, #248]	@ (80046d4 <HAL_RCC_ClockConfig+0x1f8>)
 80045dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045de:	2202      	movs	r2, #2
 80045e0:	4013      	ands	r3, r2
 80045e2:	d101      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e06d      	b.n	80046c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045e8:	4b3a      	ldr	r3, [pc, #232]	@ (80046d4 <HAL_RCC_ClockConfig+0x1f8>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2207      	movs	r2, #7
 80045ee:	4393      	bics	r3, r2
 80045f0:	0019      	movs	r1, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	4b37      	ldr	r3, [pc, #220]	@ (80046d4 <HAL_RCC_ClockConfig+0x1f8>)
 80045f8:	430a      	orrs	r2, r1
 80045fa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045fc:	f7fd fe6e 	bl	80022dc <HAL_GetTick>
 8004600:	0003      	movs	r3, r0
 8004602:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004604:	e009      	b.n	800461a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004606:	f7fd fe69 	bl	80022dc <HAL_GetTick>
 800460a:	0002      	movs	r2, r0
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	4a2f      	ldr	r2, [pc, #188]	@ (80046d0 <HAL_RCC_ClockConfig+0x1f4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e054      	b.n	80046c4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461a:	4b2e      	ldr	r3, [pc, #184]	@ (80046d4 <HAL_RCC_ClockConfig+0x1f8>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	2238      	movs	r2, #56	@ 0x38
 8004620:	401a      	ands	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	429a      	cmp	r2, r3
 800462a:	d1ec      	bne.n	8004606 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800462c:	4b27      	ldr	r3, [pc, #156]	@ (80046cc <HAL_RCC_ClockConfig+0x1f0>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2207      	movs	r2, #7
 8004632:	4013      	ands	r3, r2
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d21e      	bcs.n	8004678 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463a:	4b24      	ldr	r3, [pc, #144]	@ (80046cc <HAL_RCC_ClockConfig+0x1f0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2207      	movs	r2, #7
 8004640:	4393      	bics	r3, r2
 8004642:	0019      	movs	r1, r3
 8004644:	4b21      	ldr	r3, [pc, #132]	@ (80046cc <HAL_RCC_ClockConfig+0x1f0>)
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800464c:	f7fd fe46 	bl	80022dc <HAL_GetTick>
 8004650:	0003      	movs	r3, r0
 8004652:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004654:	e009      	b.n	800466a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004656:	f7fd fe41 	bl	80022dc <HAL_GetTick>
 800465a:	0002      	movs	r2, r0
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	4a1b      	ldr	r2, [pc, #108]	@ (80046d0 <HAL_RCC_ClockConfig+0x1f4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e02c      	b.n	80046c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800466a:	4b18      	ldr	r3, [pc, #96]	@ (80046cc <HAL_RCC_ClockConfig+0x1f0>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2207      	movs	r2, #7
 8004670:	4013      	ands	r3, r2
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d1ee      	bne.n	8004656 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2204      	movs	r2, #4
 800467e:	4013      	ands	r3, r2
 8004680:	d009      	beq.n	8004696 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004682:	4b14      	ldr	r3, [pc, #80]	@ (80046d4 <HAL_RCC_ClockConfig+0x1f8>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	4a15      	ldr	r2, [pc, #84]	@ (80046dc <HAL_RCC_ClockConfig+0x200>)
 8004688:	4013      	ands	r3, r2
 800468a:	0019      	movs	r1, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	4b10      	ldr	r3, [pc, #64]	@ (80046d4 <HAL_RCC_ClockConfig+0x1f8>)
 8004692:	430a      	orrs	r2, r1
 8004694:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004696:	f000 f829 	bl	80046ec <HAL_RCC_GetSysClockFreq>
 800469a:	0001      	movs	r1, r0
 800469c:	4b0d      	ldr	r3, [pc, #52]	@ (80046d4 <HAL_RCC_ClockConfig+0x1f8>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	0a1b      	lsrs	r3, r3, #8
 80046a2:	220f      	movs	r2, #15
 80046a4:	401a      	ands	r2, r3
 80046a6:	4b0e      	ldr	r3, [pc, #56]	@ (80046e0 <HAL_RCC_ClockConfig+0x204>)
 80046a8:	0092      	lsls	r2, r2, #2
 80046aa:	58d3      	ldr	r3, [r2, r3]
 80046ac:	221f      	movs	r2, #31
 80046ae:	4013      	ands	r3, r2
 80046b0:	000a      	movs	r2, r1
 80046b2:	40da      	lsrs	r2, r3
 80046b4:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <HAL_RCC_ClockConfig+0x208>)
 80046b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046b8:	4b0b      	ldr	r3, [pc, #44]	@ (80046e8 <HAL_RCC_ClockConfig+0x20c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	0018      	movs	r0, r3
 80046be:	f7fd fdb1 	bl	8002224 <HAL_InitTick>
 80046c2:	0003      	movs	r3, r0
}
 80046c4:	0018      	movs	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b004      	add	sp, #16
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40022000 	.word	0x40022000
 80046d0:	00001388 	.word	0x00001388
 80046d4:	40021000 	.word	0x40021000
 80046d8:	fffff0ff 	.word	0xfffff0ff
 80046dc:	ffff8fff 	.word	0xffff8fff
 80046e0:	0800650c 	.word	0x0800650c
 80046e4:	2000004c 	.word	0x2000004c
 80046e8:	20000050 	.word	0x20000050

080046ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046f2:	4b3c      	ldr	r3, [pc, #240]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	2238      	movs	r2, #56	@ 0x38
 80046f8:	4013      	ands	r3, r2
 80046fa:	d10f      	bne.n	800471c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80046fc:	4b39      	ldr	r3, [pc, #228]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	0adb      	lsrs	r3, r3, #11
 8004702:	2207      	movs	r2, #7
 8004704:	4013      	ands	r3, r2
 8004706:	2201      	movs	r2, #1
 8004708:	409a      	lsls	r2, r3
 800470a:	0013      	movs	r3, r2
 800470c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800470e:	6839      	ldr	r1, [r7, #0]
 8004710:	4835      	ldr	r0, [pc, #212]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004712:	f7fb fcf7 	bl	8000104 <__udivsi3>
 8004716:	0003      	movs	r3, r0
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	e05d      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800471c:	4b31      	ldr	r3, [pc, #196]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	2238      	movs	r2, #56	@ 0x38
 8004722:	4013      	ands	r3, r2
 8004724:	2b08      	cmp	r3, #8
 8004726:	d102      	bne.n	800472e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004728:	4b30      	ldr	r3, [pc, #192]	@ (80047ec <HAL_RCC_GetSysClockFreq+0x100>)
 800472a:	613b      	str	r3, [r7, #16]
 800472c:	e054      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800472e:	4b2d      	ldr	r3, [pc, #180]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2238      	movs	r2, #56	@ 0x38
 8004734:	4013      	ands	r3, r2
 8004736:	2b10      	cmp	r3, #16
 8004738:	d138      	bne.n	80047ac <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800473a:	4b2a      	ldr	r3, [pc, #168]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	2203      	movs	r2, #3
 8004740:	4013      	ands	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004744:	4b27      	ldr	r3, [pc, #156]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	2207      	movs	r2, #7
 800474c:	4013      	ands	r3, r2
 800474e:	3301      	adds	r3, #1
 8004750:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b03      	cmp	r3, #3
 8004756:	d10d      	bne.n	8004774 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	4824      	ldr	r0, [pc, #144]	@ (80047ec <HAL_RCC_GetSysClockFreq+0x100>)
 800475c:	f7fb fcd2 	bl	8000104 <__udivsi3>
 8004760:	0003      	movs	r3, r0
 8004762:	0019      	movs	r1, r3
 8004764:	4b1f      	ldr	r3, [pc, #124]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	0a1b      	lsrs	r3, r3, #8
 800476a:	227f      	movs	r2, #127	@ 0x7f
 800476c:	4013      	ands	r3, r2
 800476e:	434b      	muls	r3, r1
 8004770:	617b      	str	r3, [r7, #20]
        break;
 8004772:	e00d      	b.n	8004790 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004774:	68b9      	ldr	r1, [r7, #8]
 8004776:	481c      	ldr	r0, [pc, #112]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004778:	f7fb fcc4 	bl	8000104 <__udivsi3>
 800477c:	0003      	movs	r3, r0
 800477e:	0019      	movs	r1, r3
 8004780:	4b18      	ldr	r3, [pc, #96]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	0a1b      	lsrs	r3, r3, #8
 8004786:	227f      	movs	r2, #127	@ 0x7f
 8004788:	4013      	ands	r3, r2
 800478a:	434b      	muls	r3, r1
 800478c:	617b      	str	r3, [r7, #20]
        break;
 800478e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004790:	4b14      	ldr	r3, [pc, #80]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	0f5b      	lsrs	r3, r3, #29
 8004796:	2207      	movs	r2, #7
 8004798:	4013      	ands	r3, r2
 800479a:	3301      	adds	r3, #1
 800479c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800479e:	6879      	ldr	r1, [r7, #4]
 80047a0:	6978      	ldr	r0, [r7, #20]
 80047a2:	f7fb fcaf 	bl	8000104 <__udivsi3>
 80047a6:	0003      	movs	r3, r0
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	e015      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80047ac:	4b0d      	ldr	r3, [pc, #52]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2238      	movs	r2, #56	@ 0x38
 80047b2:	4013      	ands	r3, r2
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d103      	bne.n	80047c0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80047b8:	2380      	movs	r3, #128	@ 0x80
 80047ba:	021b      	lsls	r3, r3, #8
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	e00b      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80047c0:	4b08      	ldr	r3, [pc, #32]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2238      	movs	r2, #56	@ 0x38
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b18      	cmp	r3, #24
 80047ca:	d103      	bne.n	80047d4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80047cc:	23fa      	movs	r3, #250	@ 0xfa
 80047ce:	01db      	lsls	r3, r3, #7
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	e001      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047d8:	693b      	ldr	r3, [r7, #16]
}
 80047da:	0018      	movs	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	b006      	add	sp, #24
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	46c0      	nop			@ (mov r8, r8)
 80047e4:	40021000 	.word	0x40021000
 80047e8:	00f42400 	.word	0x00f42400
 80047ec:	007a1200 	.word	0x007a1200

080047f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80047f8:	2313      	movs	r3, #19
 80047fa:	18fb      	adds	r3, r7, r3
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004800:	2312      	movs	r3, #18
 8004802:	18fb      	adds	r3, r7, r3
 8004804:	2200      	movs	r2, #0
 8004806:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	2380      	movs	r3, #128	@ 0x80
 800480e:	029b      	lsls	r3, r3, #10
 8004810:	4013      	ands	r3, r2
 8004812:	d100      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004814:	e0a3      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004816:	2011      	movs	r0, #17
 8004818:	183b      	adds	r3, r7, r0
 800481a:	2200      	movs	r2, #0
 800481c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800481e:	4ba5      	ldr	r3, [pc, #660]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004820:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004822:	2380      	movs	r3, #128	@ 0x80
 8004824:	055b      	lsls	r3, r3, #21
 8004826:	4013      	ands	r3, r2
 8004828:	d110      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482a:	4ba2      	ldr	r3, [pc, #648]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800482c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800482e:	4ba1      	ldr	r3, [pc, #644]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004830:	2180      	movs	r1, #128	@ 0x80
 8004832:	0549      	lsls	r1, r1, #21
 8004834:	430a      	orrs	r2, r1
 8004836:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004838:	4b9e      	ldr	r3, [pc, #632]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800483a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800483c:	2380      	movs	r3, #128	@ 0x80
 800483e:	055b      	lsls	r3, r3, #21
 8004840:	4013      	ands	r3, r2
 8004842:	60bb      	str	r3, [r7, #8]
 8004844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004846:	183b      	adds	r3, r7, r0
 8004848:	2201      	movs	r2, #1
 800484a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800484c:	4b9a      	ldr	r3, [pc, #616]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4b99      	ldr	r3, [pc, #612]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004852:	2180      	movs	r1, #128	@ 0x80
 8004854:	0049      	lsls	r1, r1, #1
 8004856:	430a      	orrs	r2, r1
 8004858:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800485a:	f7fd fd3f 	bl	80022dc <HAL_GetTick>
 800485e:	0003      	movs	r3, r0
 8004860:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004862:	e00b      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004864:	f7fd fd3a 	bl	80022dc <HAL_GetTick>
 8004868:	0002      	movs	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d904      	bls.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004872:	2313      	movs	r3, #19
 8004874:	18fb      	adds	r3, r7, r3
 8004876:	2203      	movs	r2, #3
 8004878:	701a      	strb	r2, [r3, #0]
        break;
 800487a:	e005      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800487c:	4b8e      	ldr	r3, [pc, #568]	@ (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	2380      	movs	r3, #128	@ 0x80
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	4013      	ands	r3, r2
 8004886:	d0ed      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004888:	2313      	movs	r3, #19
 800488a:	18fb      	adds	r3, r7, r3
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d154      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004892:	4b88      	ldr	r3, [pc, #544]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004894:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004896:	23c0      	movs	r3, #192	@ 0xc0
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4013      	ands	r3, r2
 800489c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d019      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d014      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048ae:	4b81      	ldr	r3, [pc, #516]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b2:	4a82      	ldr	r2, [pc, #520]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048b8:	4b7e      	ldr	r3, [pc, #504]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048bc:	4b7d      	ldr	r3, [pc, #500]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048be:	2180      	movs	r1, #128	@ 0x80
 80048c0:	0249      	lsls	r1, r1, #9
 80048c2:	430a      	orrs	r2, r1
 80048c4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048c6:	4b7b      	ldr	r3, [pc, #492]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048ca:	4b7a      	ldr	r3, [pc, #488]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048cc:	497c      	ldr	r1, [pc, #496]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80048ce:	400a      	ands	r2, r1
 80048d0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048d2:	4b78      	ldr	r3, [pc, #480]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2201      	movs	r2, #1
 80048dc:	4013      	ands	r3, r2
 80048de:	d016      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e0:	f7fd fcfc 	bl	80022dc <HAL_GetTick>
 80048e4:	0003      	movs	r3, r0
 80048e6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048e8:	e00c      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ea:	f7fd fcf7 	bl	80022dc <HAL_GetTick>
 80048ee:	0002      	movs	r2, r0
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	4a73      	ldr	r2, [pc, #460]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d904      	bls.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80048fa:	2313      	movs	r3, #19
 80048fc:	18fb      	adds	r3, r7, r3
 80048fe:	2203      	movs	r2, #3
 8004900:	701a      	strb	r2, [r3, #0]
            break;
 8004902:	e004      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004904:	4b6b      	ldr	r3, [pc, #428]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004908:	2202      	movs	r2, #2
 800490a:	4013      	ands	r3, r2
 800490c:	d0ed      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800490e:	2313      	movs	r3, #19
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004918:	4b66      	ldr	r3, [pc, #408]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800491a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800491c:	4a67      	ldr	r2, [pc, #412]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800491e:	4013      	ands	r3, r2
 8004920:	0019      	movs	r1, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004926:	4b63      	ldr	r3, [pc, #396]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004928:	430a      	orrs	r2, r1
 800492a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800492c:	e00c      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800492e:	2312      	movs	r3, #18
 8004930:	18fb      	adds	r3, r7, r3
 8004932:	2213      	movs	r2, #19
 8004934:	18ba      	adds	r2, r7, r2
 8004936:	7812      	ldrb	r2, [r2, #0]
 8004938:	701a      	strb	r2, [r3, #0]
 800493a:	e005      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493c:	2312      	movs	r3, #18
 800493e:	18fb      	adds	r3, r7, r3
 8004940:	2213      	movs	r2, #19
 8004942:	18ba      	adds	r2, r7, r2
 8004944:	7812      	ldrb	r2, [r2, #0]
 8004946:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004948:	2311      	movs	r3, #17
 800494a:	18fb      	adds	r3, r7, r3
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d105      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004952:	4b58      	ldr	r3, [pc, #352]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004954:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004956:	4b57      	ldr	r3, [pc, #348]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004958:	495b      	ldr	r1, [pc, #364]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800495a:	400a      	ands	r2, r1
 800495c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2201      	movs	r2, #1
 8004964:	4013      	ands	r3, r2
 8004966:	d009      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004968:	4b52      	ldr	r3, [pc, #328]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800496a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496c:	2203      	movs	r2, #3
 800496e:	4393      	bics	r3, r2
 8004970:	0019      	movs	r1, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	4b4f      	ldr	r3, [pc, #316]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004978:	430a      	orrs	r2, r1
 800497a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2210      	movs	r2, #16
 8004982:	4013      	ands	r3, r2
 8004984:	d009      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004986:	4b4b      	ldr	r3, [pc, #300]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800498a:	4a50      	ldr	r2, [pc, #320]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800498c:	4013      	ands	r3, r2
 800498e:	0019      	movs	r1, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	4b47      	ldr	r3, [pc, #284]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004996:	430a      	orrs	r2, r1
 8004998:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	2380      	movs	r3, #128	@ 0x80
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4013      	ands	r3, r2
 80049a4:	d009      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049a6:	4b43      	ldr	r3, [pc, #268]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049aa:	4a49      	ldr	r2, [pc, #292]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	0019      	movs	r1, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	4b3f      	ldr	r3, [pc, #252]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049b6:	430a      	orrs	r2, r1
 80049b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	2380      	movs	r3, #128	@ 0x80
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	4013      	ands	r3, r2
 80049c4:	d009      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049c6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ca:	4a42      	ldr	r2, [pc, #264]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	0019      	movs	r1, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	699a      	ldr	r2, [r3, #24]
 80049d4:	4b37      	ldr	r3, [pc, #220]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049d6:	430a      	orrs	r2, r1
 80049d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2220      	movs	r2, #32
 80049e0:	4013      	ands	r3, r2
 80049e2:	d009      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049e4:	4b33      	ldr	r3, [pc, #204]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e8:	4a3b      	ldr	r2, [pc, #236]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80049ea:	4013      	ands	r3, r2
 80049ec:	0019      	movs	r1, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	4b30      	ldr	r3, [pc, #192]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049f4:	430a      	orrs	r2, r1
 80049f6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	2380      	movs	r3, #128	@ 0x80
 80049fe:	01db      	lsls	r3, r3, #7
 8004a00:	4013      	ands	r3, r2
 8004a02:	d015      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a04:	4b2b      	ldr	r3, [pc, #172]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	0899      	lsrs	r1, r3, #2
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69da      	ldr	r2, [r3, #28]
 8004a10:	4b28      	ldr	r3, [pc, #160]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a12:	430a      	orrs	r2, r1
 8004a14:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69da      	ldr	r2, [r3, #28]
 8004a1a:	2380      	movs	r3, #128	@ 0x80
 8004a1c:	05db      	lsls	r3, r3, #23
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d106      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a22:	4b24      	ldr	r3, [pc, #144]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	4b23      	ldr	r3, [pc, #140]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a28:	2180      	movs	r1, #128	@ 0x80
 8004a2a:	0249      	lsls	r1, r1, #9
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	2380      	movs	r3, #128	@ 0x80
 8004a36:	039b      	lsls	r3, r3, #14
 8004a38:	4013      	ands	r3, r2
 8004a3a:	d016      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a40:	4a26      	ldr	r2, [pc, #152]	@ (8004adc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	0019      	movs	r1, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1a      	ldr	r2, [r3, #32]
 8004a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1a      	ldr	r2, [r3, #32]
 8004a54:	2380      	movs	r3, #128	@ 0x80
 8004a56:	03db      	lsls	r3, r3, #15
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d106      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004a5c:	4b15      	ldr	r3, [pc, #84]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	4b14      	ldr	r3, [pc, #80]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a62:	2180      	movs	r1, #128	@ 0x80
 8004a64:	0449      	lsls	r1, r1, #17
 8004a66:	430a      	orrs	r2, r1
 8004a68:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	2380      	movs	r3, #128	@ 0x80
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	4013      	ands	r3, r2
 8004a74:	d016      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004a76:	4b0f      	ldr	r3, [pc, #60]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7a:	4a19      	ldr	r2, [pc, #100]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	0019      	movs	r1, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a86:	430a      	orrs	r2, r1
 8004a88:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691a      	ldr	r2, [r3, #16]
 8004a8e:	2380      	movs	r3, #128	@ 0x80
 8004a90:	01db      	lsls	r3, r3, #7
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d106      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a96:	4b07      	ldr	r3, [pc, #28]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	4b06      	ldr	r3, [pc, #24]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a9c:	2180      	movs	r1, #128	@ 0x80
 8004a9e:	0249      	lsls	r1, r1, #9
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004aa4:	2312      	movs	r3, #18
 8004aa6:	18fb      	adds	r3, r7, r3
 8004aa8:	781b      	ldrb	r3, [r3, #0]
}
 8004aaa:	0018      	movs	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b006      	add	sp, #24
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	46c0      	nop			@ (mov r8, r8)
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40007000 	.word	0x40007000
 8004abc:	fffffcff 	.word	0xfffffcff
 8004ac0:	fffeffff 	.word	0xfffeffff
 8004ac4:	00001388 	.word	0x00001388
 8004ac8:	efffffff 	.word	0xefffffff
 8004acc:	fffff3ff 	.word	0xfffff3ff
 8004ad0:	fff3ffff 	.word	0xfff3ffff
 8004ad4:	ffcfffff 	.word	0xffcfffff
 8004ad8:	ffffcfff 	.word	0xffffcfff
 8004adc:	ffbfffff 	.word	0xffbfffff
 8004ae0:	ffff3fff 	.word	0xffff3fff

08004ae4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ae4:	b5b0      	push	{r4, r5, r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004aec:	230f      	movs	r3, #15
 8004aee:	18fb      	adds	r3, r7, r3
 8004af0:	2201      	movs	r2, #1
 8004af2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d100      	bne.n	8004afc <HAL_RTC_Init+0x18>
 8004afa:	e08c      	b.n	8004c16 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2229      	movs	r2, #41	@ 0x29
 8004b00:	5c9b      	ldrb	r3, [r3, r2]
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10b      	bne.n	8004b20 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2228      	movs	r2, #40	@ 0x28
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2288      	movs	r2, #136	@ 0x88
 8004b14:	0212      	lsls	r2, r2, #8
 8004b16:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f7fd fa2a 	bl	8001f74 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2229      	movs	r2, #41	@ 0x29
 8004b24:	2102      	movs	r1, #2
 8004b26:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	2210      	movs	r2, #16
 8004b30:	4013      	ands	r3, r2
 8004b32:	2b10      	cmp	r3, #16
 8004b34:	d062      	beq.n	8004bfc <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	22ca      	movs	r2, #202	@ 0xca
 8004b3c:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2253      	movs	r2, #83	@ 0x53
 8004b44:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004b46:	250f      	movs	r5, #15
 8004b48:	197c      	adds	r4, r7, r5
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f000 fcb9 	bl	80054c4 <RTC_EnterInitMode>
 8004b52:	0003      	movs	r3, r0
 8004b54:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004b56:	0028      	movs	r0, r5
 8004b58:	183b      	adds	r3, r7, r0
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d12c      	bne.n	8004bba <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699a      	ldr	r2, [r3, #24]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	492e      	ldr	r1, [pc, #184]	@ (8004c24 <HAL_RTC_Init+0x140>)
 8004b6c:	400a      	ands	r2, r1
 8004b6e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6999      	ldr	r1, [r3, #24]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689a      	ldr	r2, [r3, #8]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6912      	ldr	r2, [r2, #16]
 8004b96:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6919      	ldr	r1, [r3, #16]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	041a      	lsls	r2, r3, #16
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004bac:	183c      	adds	r4, r7, r0
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f000 fcc9 	bl	8005548 <RTC_ExitInitMode>
 8004bb6:	0003      	movs	r3, r0
 8004bb8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004bba:	230f      	movs	r3, #15
 8004bbc:	18fb      	adds	r3, r7, r3
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d116      	bne.n	8004bf2 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699a      	ldr	r2, [r3, #24]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	00d2      	lsls	r2, r2, #3
 8004bd0:	08d2      	lsrs	r2, r2, #3
 8004bd2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6999      	ldr	r1, [r3, #24]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	22ff      	movs	r2, #255	@ 0xff
 8004bf8:	625a      	str	r2, [r3, #36]	@ 0x24
 8004bfa:	e003      	b.n	8004c04 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004bfc:	230f      	movs	r3, #15
 8004bfe:	18fb      	adds	r3, r7, r3
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004c04:	230f      	movs	r3, #15
 8004c06:	18fb      	adds	r3, r7, r3
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d103      	bne.n	8004c16 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2229      	movs	r2, #41	@ 0x29
 8004c12:	2101      	movs	r1, #1
 8004c14:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004c16:	230f      	movs	r3, #15
 8004c18:	18fb      	adds	r3, r7, r3
 8004c1a:	781b      	ldrb	r3, [r3, #0]
}
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b004      	add	sp, #16
 8004c22:	bdb0      	pop	{r4, r5, r7, pc}
 8004c24:	fb8fffbf 	.word	0xfb8fffbf

08004c28 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c28:	b5b0      	push	{r4, r5, r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2228      	movs	r2, #40	@ 0x28
 8004c38:	5c9b      	ldrb	r3, [r3, r2]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d101      	bne.n	8004c42 <HAL_RTC_SetTime+0x1a>
 8004c3e:	2302      	movs	r3, #2
 8004c40:	e092      	b.n	8004d68 <HAL_RTC_SetTime+0x140>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2228      	movs	r2, #40	@ 0x28
 8004c46:	2101      	movs	r1, #1
 8004c48:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2229      	movs	r2, #41	@ 0x29
 8004c4e:	2102      	movs	r1, #2
 8004c50:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	22ca      	movs	r2, #202	@ 0xca
 8004c58:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2253      	movs	r2, #83	@ 0x53
 8004c60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c62:	2513      	movs	r5, #19
 8004c64:	197c      	adds	r4, r7, r5
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f000 fc2b 	bl	80054c4 <RTC_EnterInitMode>
 8004c6e:	0003      	movs	r3, r0
 8004c70:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004c72:	197b      	adds	r3, r7, r5
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d162      	bne.n	8004d40 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d125      	bne.n	8004ccc <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	2240      	movs	r2, #64	@ 0x40
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d102      	bne.n	8004c92 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	0018      	movs	r0, r3
 8004c98:	f000 fc9a 	bl	80055d0 <RTC_ByteToBcd2>
 8004c9c:	0003      	movs	r3, r0
 8004c9e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	785b      	ldrb	r3, [r3, #1]
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	f000 fc93 	bl	80055d0 <RTC_ByteToBcd2>
 8004caa:	0003      	movs	r3, r0
 8004cac:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004cae:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	789b      	ldrb	r3, [r3, #2]
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f000 fc8b 	bl	80055d0 <RTC_ByteToBcd2>
 8004cba:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004cbc:	0022      	movs	r2, r4
 8004cbe:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	78db      	ldrb	r3, [r3, #3]
 8004cc4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	e017      	b.n	8004cfc <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	2240      	movs	r2, #64	@ 0x40
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d102      	bne.n	8004cde <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	785b      	ldrb	r3, [r3, #1]
 8004ce8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004cea:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004cf0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	78db      	ldrb	r3, [r3, #3]
 8004cf6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	491b      	ldr	r1, [pc, #108]	@ (8004d70 <HAL_RTC_SetTime+0x148>)
 8004d04:	400a      	ands	r2, r1
 8004d06:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4918      	ldr	r1, [pc, #96]	@ (8004d74 <HAL_RTC_SetTime+0x14c>)
 8004d14:	400a      	ands	r2, r1
 8004d16:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6999      	ldr	r1, [r3, #24]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d30:	2313      	movs	r3, #19
 8004d32:	18fc      	adds	r4, r7, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	0018      	movs	r0, r3
 8004d38:	f000 fc06 	bl	8005548 <RTC_ExitInitMode>
 8004d3c:	0003      	movs	r3, r0
 8004d3e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	22ff      	movs	r2, #255	@ 0xff
 8004d46:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8004d48:	2313      	movs	r3, #19
 8004d4a:	18fb      	adds	r3, r7, r3
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d103      	bne.n	8004d5a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2229      	movs	r2, #41	@ 0x29
 8004d56:	2101      	movs	r1, #1
 8004d58:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2228      	movs	r2, #40	@ 0x28
 8004d5e:	2100      	movs	r1, #0
 8004d60:	5499      	strb	r1, [r3, r2]

  return status;
 8004d62:	2313      	movs	r3, #19
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	781b      	ldrb	r3, [r3, #0]
}
 8004d68:	0018      	movs	r0, r3
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	b006      	add	sp, #24
 8004d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8004d70:	007f7f7f 	.word	0x007f7f7f
 8004d74:	fffbffff 	.word	0xfffbffff

08004d78 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	045b      	lsls	r3, r3, #17
 8004d96:	0c5a      	lsrs	r2, r3, #17
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a22      	ldr	r2, [pc, #136]	@ (8004e2c <HAL_RTC_GetTime+0xb4>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	0c1b      	lsrs	r3, r3, #16
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	223f      	movs	r2, #63	@ 0x3f
 8004db0:	4013      	ands	r3, r2
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	0a1b      	lsrs	r3, r3, #8
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	227f      	movs	r2, #127	@ 0x7f
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	227f      	movs	r2, #127	@ 0x7f
 8004dce:	4013      	ands	r3, r2
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	0d9b      	lsrs	r3, r3, #22
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2201      	movs	r2, #1
 8004dde:	4013      	ands	r3, r2
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d11a      	bne.n	8004e22 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	0018      	movs	r0, r3
 8004df2:	f000 fc15 	bl	8005620 <RTC_Bcd2ToByte>
 8004df6:	0003      	movs	r3, r0
 8004df8:	001a      	movs	r2, r3
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	785b      	ldrb	r3, [r3, #1]
 8004e02:	0018      	movs	r0, r3
 8004e04:	f000 fc0c 	bl	8005620 <RTC_Bcd2ToByte>
 8004e08:	0003      	movs	r3, r0
 8004e0a:	001a      	movs	r2, r3
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	789b      	ldrb	r3, [r3, #2]
 8004e14:	0018      	movs	r0, r3
 8004e16:	f000 fc03 	bl	8005620 <RTC_Bcd2ToByte>
 8004e1a:	0003      	movs	r3, r0
 8004e1c:	001a      	movs	r2, r3
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	0018      	movs	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b006      	add	sp, #24
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	007f7f7f 	.word	0x007f7f7f

08004e30 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e30:	b5b0      	push	{r4, r5, r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2228      	movs	r2, #40	@ 0x28
 8004e40:	5c9b      	ldrb	r3, [r3, r2]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_RTC_SetDate+0x1a>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e07e      	b.n	8004f48 <HAL_RTC_SetDate+0x118>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2228      	movs	r2, #40	@ 0x28
 8004e4e:	2101      	movs	r1, #1
 8004e50:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2229      	movs	r2, #41	@ 0x29
 8004e56:	2102      	movs	r1, #2
 8004e58:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10e      	bne.n	8004e7e <HAL_RTC_SetDate+0x4e>
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	785b      	ldrb	r3, [r3, #1]
 8004e64:	001a      	movs	r2, r3
 8004e66:	2310      	movs	r3, #16
 8004e68:	4013      	ands	r3, r2
 8004e6a:	d008      	beq.n	8004e7e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	785b      	ldrb	r3, [r3, #1]
 8004e70:	2210      	movs	r2, #16
 8004e72:	4393      	bics	r3, r2
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	330a      	adds	r3, #10
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d11c      	bne.n	8004ebe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	78db      	ldrb	r3, [r3, #3]
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f000 fba1 	bl	80055d0 <RTC_ByteToBcd2>
 8004e8e:	0003      	movs	r3, r0
 8004e90:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	785b      	ldrb	r3, [r3, #1]
 8004e96:	0018      	movs	r0, r3
 8004e98:	f000 fb9a 	bl	80055d0 <RTC_ByteToBcd2>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ea0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	789b      	ldrb	r3, [r3, #2]
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f000 fb92 	bl	80055d0 <RTC_ByteToBcd2>
 8004eac:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004eae:	0022      	movs	r2, r4
 8004eb0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	e00e      	b.n	8004edc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	78db      	ldrb	r3, [r3, #3]
 8004ec2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	785b      	ldrb	r3, [r3, #1]
 8004ec8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004eca:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004ed0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	22ca      	movs	r2, #202	@ 0xca
 8004ee2:	625a      	str	r2, [r3, #36]	@ 0x24
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2253      	movs	r2, #83	@ 0x53
 8004eea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004eec:	2513      	movs	r5, #19
 8004eee:	197c      	adds	r4, r7, r5
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f000 fae6 	bl	80054c4 <RTC_EnterInitMode>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004efc:	0028      	movs	r0, r5
 8004efe:	183b      	adds	r3, r7, r0
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10c      	bne.n	8004f20 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4910      	ldr	r1, [pc, #64]	@ (8004f50 <HAL_RTC_SetDate+0x120>)
 8004f0e:	400a      	ands	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004f12:	183c      	adds	r4, r7, r0
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	0018      	movs	r0, r3
 8004f18:	f000 fb16 	bl	8005548 <RTC_ExitInitMode>
 8004f1c:	0003      	movs	r3, r0
 8004f1e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	22ff      	movs	r2, #255	@ 0xff
 8004f26:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004f28:	2313      	movs	r3, #19
 8004f2a:	18fb      	adds	r3, r7, r3
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d103      	bne.n	8004f3a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2229      	movs	r2, #41	@ 0x29
 8004f36:	2101      	movs	r1, #1
 8004f38:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2228      	movs	r2, #40	@ 0x28
 8004f3e:	2100      	movs	r1, #0
 8004f40:	5499      	strb	r1, [r3, r2]

  return status;
 8004f42:	2313      	movs	r3, #19
 8004f44:	18fb      	adds	r3, r7, r3
 8004f46:	781b      	ldrb	r3, [r3, #0]
}
 8004f48:	0018      	movs	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b006      	add	sp, #24
 8004f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8004f50:	00ffff3f 	.word	0x00ffff3f

08004f54 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	4a21      	ldr	r2, [pc, #132]	@ (8004fec <HAL_RTC_GetDate+0x98>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	0c1b      	lsrs	r3, r3, #16
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	0a1b      	lsrs	r3, r3, #8
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	221f      	movs	r2, #31
 8004f7e:	4013      	ands	r3, r2
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	223f      	movs	r2, #63	@ 0x3f
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	0b5b      	lsrs	r3, r3, #13
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2207      	movs	r2, #7
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d11a      	bne.n	8004fe0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	78db      	ldrb	r3, [r3, #3]
 8004fae:	0018      	movs	r0, r3
 8004fb0:	f000 fb36 	bl	8005620 <RTC_Bcd2ToByte>
 8004fb4:	0003      	movs	r3, r0
 8004fb6:	001a      	movs	r2, r3
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	785b      	ldrb	r3, [r3, #1]
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	f000 fb2d 	bl	8005620 <RTC_Bcd2ToByte>
 8004fc6:	0003      	movs	r3, r0
 8004fc8:	001a      	movs	r2, r3
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	789b      	ldrb	r3, [r3, #2]
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f000 fb24 	bl	8005620 <RTC_Bcd2ToByte>
 8004fd8:	0003      	movs	r3, r0
 8004fda:	001a      	movs	r2, r3
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	b006      	add	sp, #24
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	46c0      	nop			@ (mov r8, r8)
 8004fec:	00ffff3f 	.word	0x00ffff3f

08004ff0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004ff0:	b590      	push	{r4, r7, lr}
 8004ff2:	b089      	sub	sp, #36	@ 0x24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2228      	movs	r2, #40	@ 0x28
 8005000:	5c9b      	ldrb	r3, [r3, r2]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <HAL_RTC_SetAlarm_IT+0x1a>
 8005006:	2302      	movs	r3, #2
 8005008:	e127      	b.n	800525a <HAL_RTC_SetAlarm_IT+0x26a>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2228      	movs	r2, #40	@ 0x28
 800500e:	2101      	movs	r1, #1
 8005010:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2229      	movs	r2, #41	@ 0x29
 8005016:	2102      	movs	r1, #2
 8005018:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d136      	bne.n	800508e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2240      	movs	r2, #64	@ 0x40
 8005028:	4013      	ands	r3, r2
 800502a:	d102      	bne.n	8005032 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2200      	movs	r2, #0
 8005030:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	0018      	movs	r0, r3
 8005038:	f000 faca 	bl	80055d0 <RTC_ByteToBcd2>
 800503c:	0003      	movs	r3, r0
 800503e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	785b      	ldrb	r3, [r3, #1]
 8005044:	0018      	movs	r0, r3
 8005046:	f000 fac3 	bl	80055d0 <RTC_ByteToBcd2>
 800504a:	0003      	movs	r3, r0
 800504c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800504e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	789b      	ldrb	r3, [r3, #2]
 8005054:	0018      	movs	r0, r3
 8005056:	f000 fabb 	bl	80055d0 <RTC_ByteToBcd2>
 800505a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800505c:	0022      	movs	r2, r4
 800505e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	78db      	ldrb	r3, [r3, #3]
 8005064:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005066:	431a      	orrs	r2, r3
 8005068:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2220      	movs	r2, #32
 800506e:	5c9b      	ldrb	r3, [r3, r2]
 8005070:	0018      	movs	r0, r3
 8005072:	f000 faad 	bl	80055d0 <RTC_ByteToBcd2>
 8005076:	0003      	movs	r3, r0
 8005078:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800507a:	0022      	movs	r2, r4
 800507c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005082:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005088:	4313      	orrs	r3, r2
 800508a:	61fb      	str	r3, [r7, #28]
 800508c:	e022      	b.n	80050d4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	2240      	movs	r2, #64	@ 0x40
 8005096:	4013      	ands	r3, r2
 8005098:	d102      	bne.n	80050a0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2200      	movs	r2, #0
 800509e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	785b      	ldrb	r3, [r3, #1]
 80050aa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80050ac:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80050b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	78db      	ldrb	r3, [r3, #3]
 80050b8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80050ba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2120      	movs	r1, #32
 80050c0:	5c5b      	ldrb	r3, [r3, r1]
 80050c2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80050c4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80050ca:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80050d0:	4313      	orrs	r3, r2
 80050d2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	4313      	orrs	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	22ca      	movs	r2, #202	@ 0xca
 80050e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2253      	movs	r2, #83	@ 0x53
 80050ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050f4:	2380      	movs	r3, #128	@ 0x80
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d14c      	bne.n	8005196 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699a      	ldr	r2, [r3, #24]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4957      	ldr	r1, [pc, #348]	@ (8005264 <HAL_RTC_SetAlarm_IT+0x274>)
 8005108:	400a      	ands	r2, r1
 800510a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2101      	movs	r1, #1
 8005118:	430a      	orrs	r2, r1
 800511a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800511c:	f7fd f8de 	bl	80022dc <HAL_GetTick>
 8005120:	0003      	movs	r3, r0
 8005122:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005124:	e016      	b.n	8005154 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005126:	f7fd f8d9 	bl	80022dc <HAL_GetTick>
 800512a:	0002      	movs	r2, r0
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	1ad2      	subs	r2, r2, r3
 8005130:	23fa      	movs	r3, #250	@ 0xfa
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	429a      	cmp	r2, r3
 8005136:	d90d      	bls.n	8005154 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	22ff      	movs	r2, #255	@ 0xff
 800513e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2229      	movs	r2, #41	@ 0x29
 8005144:	2103      	movs	r1, #3
 8005146:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2228      	movs	r2, #40	@ 0x28
 800514c:	2100      	movs	r1, #0
 800514e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e082      	b.n	800525a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	2201      	movs	r2, #1
 800515c:	4013      	ands	r3, r2
 800515e:	d0e2      	beq.n	8005126 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699a      	ldr	r2, [r3, #24]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2180      	movs	r1, #128	@ 0x80
 800517c:	0049      	lsls	r1, r1, #1
 800517e:	430a      	orrs	r2, r1
 8005180:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699a      	ldr	r2, [r3, #24]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2180      	movs	r1, #128	@ 0x80
 800518e:	0149      	lsls	r1, r1, #5
 8005190:	430a      	orrs	r2, r1
 8005192:	619a      	str	r2, [r3, #24]
 8005194:	e04b      	b.n	800522e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	699a      	ldr	r2, [r3, #24]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4931      	ldr	r1, [pc, #196]	@ (8005268 <HAL_RTC_SetAlarm_IT+0x278>)
 80051a2:	400a      	ands	r2, r1
 80051a4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2102      	movs	r1, #2
 80051b2:	430a      	orrs	r2, r1
 80051b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80051b6:	f7fd f891 	bl	80022dc <HAL_GetTick>
 80051ba:	0003      	movs	r3, r0
 80051bc:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80051be:	e016      	b.n	80051ee <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80051c0:	f7fd f88c 	bl	80022dc <HAL_GetTick>
 80051c4:	0002      	movs	r2, r0
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	1ad2      	subs	r2, r2, r3
 80051ca:	23fa      	movs	r3, #250	@ 0xfa
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d90d      	bls.n	80051ee <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	22ff      	movs	r2, #255	@ 0xff
 80051d8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2229      	movs	r2, #41	@ 0x29
 80051de:	2103      	movs	r1, #3
 80051e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2228      	movs	r2, #40	@ 0x28
 80051e6:	2100      	movs	r1, #0
 80051e8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e035      	b.n	800525a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	2202      	movs	r2, #2
 80051f6:	4013      	ands	r3, r2
 80051f8:	d0e2      	beq.n	80051c0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	699a      	ldr	r2, [r3, #24]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2180      	movs	r1, #128	@ 0x80
 8005216:	0089      	lsls	r1, r1, #2
 8005218:	430a      	orrs	r2, r1
 800521a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2180      	movs	r1, #128	@ 0x80
 8005228:	0189      	lsls	r1, r1, #6
 800522a:	430a      	orrs	r2, r1
 800522c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800522e:	4a0f      	ldr	r2, [pc, #60]	@ (800526c <HAL_RTC_SetAlarm_IT+0x27c>)
 8005230:	2380      	movs	r3, #128	@ 0x80
 8005232:	58d3      	ldr	r3, [r2, r3]
 8005234:	490d      	ldr	r1, [pc, #52]	@ (800526c <HAL_RTC_SetAlarm_IT+0x27c>)
 8005236:	2280      	movs	r2, #128	@ 0x80
 8005238:	0312      	lsls	r2, r2, #12
 800523a:	4313      	orrs	r3, r2
 800523c:	2280      	movs	r2, #128	@ 0x80
 800523e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	22ff      	movs	r2, #255	@ 0xff
 8005246:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2229      	movs	r2, #41	@ 0x29
 800524c:	2101      	movs	r1, #1
 800524e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2228      	movs	r2, #40	@ 0x28
 8005254:	2100      	movs	r1, #0
 8005256:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	0018      	movs	r0, r3
 800525c:	46bd      	mov	sp, r7
 800525e:	b009      	add	sp, #36	@ 0x24
 8005260:	bd90      	pop	{r4, r7, pc}
 8005262:	46c0      	nop			@ (mov r8, r8)
 8005264:	fffffeff 	.word	0xfffffeff
 8005268:	fffffdff 	.word	0xfffffdff
 800526c:	40021800 	.word	0x40021800

08005270 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	2380      	movs	r3, #128	@ 0x80
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	429a      	cmp	r2, r3
 8005286:	d144      	bne.n	8005312 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2280      	movs	r2, #128	@ 0x80
 800528c:	0052      	lsls	r2, r2, #1
 800528e:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005296:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529e:	045b      	lsls	r3, r3, #17
 80052a0:	0c5b      	lsrs	r3, r3, #17
 80052a2:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	0c1b      	lsrs	r3, r3, #16
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	223f      	movs	r2, #63	@ 0x3f
 80052ac:	4013      	ands	r3, r2
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	0a1b      	lsrs	r3, r3, #8
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	227f      	movs	r2, #127	@ 0x7f
 80052bc:	4013      	ands	r3, r2
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	227f      	movs	r2, #127	@ 0x7f
 80052ca:	4013      	ands	r3, r2
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	0d9b      	lsrs	r3, r3, #22
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2201      	movs	r2, #1
 80052da:	4013      	ands	r3, r2
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	0e1b      	lsrs	r3, r3, #24
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	223f      	movs	r2, #63	@ 0x3f
 80052f0:	4013      	ands	r3, r2
 80052f2:	b2d9      	uxtb	r1, r3
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2220      	movs	r2, #32
 80052f8:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	2380      	movs	r3, #128	@ 0x80
 80052fe:	05db      	lsls	r3, r3, #23
 8005300:	401a      	ands	r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	4a3b      	ldr	r2, [pc, #236]	@ (80053f8 <HAL_RTC_GetAlarm+0x188>)
 800530a:	401a      	ands	r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	615a      	str	r2, [r3, #20]
 8005310:	e043      	b.n	800539a <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2280      	movs	r2, #128	@ 0x80
 8005316:	0092      	lsls	r2, r2, #2
 8005318:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005320:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005328:	045b      	lsls	r3, r3, #17
 800532a:	0c5b      	lsrs	r3, r3, #17
 800532c:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	0c1b      	lsrs	r3, r3, #16
 8005332:	b2db      	uxtb	r3, r3
 8005334:	223f      	movs	r2, #63	@ 0x3f
 8005336:	4013      	ands	r3, r2
 8005338:	b2da      	uxtb	r2, r3
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	0a1b      	lsrs	r3, r3, #8
 8005342:	b2db      	uxtb	r3, r3
 8005344:	227f      	movs	r2, #127	@ 0x7f
 8005346:	4013      	ands	r3, r2
 8005348:	b2da      	uxtb	r2, r3
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	b2db      	uxtb	r3, r3
 8005352:	227f      	movs	r2, #127	@ 0x7f
 8005354:	4013      	ands	r3, r2
 8005356:	b2da      	uxtb	r2, r3
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	0d9b      	lsrs	r3, r3, #22
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2201      	movs	r2, #1
 8005364:	4013      	ands	r3, r2
 8005366:	b2da      	uxtb	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	0e1b      	lsrs	r3, r3, #24
 8005376:	b2db      	uxtb	r3, r3
 8005378:	223f      	movs	r2, #63	@ 0x3f
 800537a:	4013      	ands	r3, r2
 800537c:	b2d9      	uxtb	r1, r3
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2220      	movs	r2, #32
 8005382:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	2380      	movs	r3, #128	@ 0x80
 8005388:	05db      	lsls	r3, r3, #23
 800538a:	401a      	ands	r2, r3
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	4a19      	ldr	r2, [pc, #100]	@ (80053f8 <HAL_RTC_GetAlarm+0x188>)
 8005394:	401a      	ands	r2, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d125      	bne.n	80053ec <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	0018      	movs	r0, r3
 80053a6:	f000 f93b 	bl	8005620 <RTC_Bcd2ToByte>
 80053aa:	0003      	movs	r3, r0
 80053ac:	001a      	movs	r2, r3
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	785b      	ldrb	r3, [r3, #1]
 80053b6:	0018      	movs	r0, r3
 80053b8:	f000 f932 	bl	8005620 <RTC_Bcd2ToByte>
 80053bc:	0003      	movs	r3, r0
 80053be:	001a      	movs	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	789b      	ldrb	r3, [r3, #2]
 80053c8:	0018      	movs	r0, r3
 80053ca:	f000 f929 	bl	8005620 <RTC_Bcd2ToByte>
 80053ce:	0003      	movs	r3, r0
 80053d0:	001a      	movs	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2220      	movs	r2, #32
 80053da:	5c9b      	ldrb	r3, [r3, r2]
 80053dc:	0018      	movs	r0, r3
 80053de:	f000 f91f 	bl	8005620 <RTC_Bcd2ToByte>
 80053e2:	0003      	movs	r3, r0
 80053e4:	0019      	movs	r1, r3
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2220      	movs	r2, #32
 80053ea:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	0018      	movs	r0, r3
 80053f0:	46bd      	mov	sp, r7
 80053f2:	b006      	add	sp, #24
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	46c0      	nop			@ (mov r8, r8)
 80053f8:	80808080 	.word	0x80808080

080053fc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	2380      	movs	r3, #128	@ 0x80
 800540c:	015b      	lsls	r3, r3, #5
 800540e:	4013      	ands	r3, r2
 8005410:	d011      	beq.n	8005436 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005418:	2201      	movs	r2, #1
 800541a:	4013      	ands	r3, r2
 800541c:	d00b      	beq.n	8005436 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2101      	movs	r1, #1
 800542a:	430a      	orrs	r2, r1
 800542c:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	0018      	movs	r0, r3
 8005432:	f7fb ff07 	bl	8001244 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	699a      	ldr	r2, [r3, #24]
 800543c:	2380      	movs	r3, #128	@ 0x80
 800543e:	019b      	lsls	r3, r3, #6
 8005440:	4013      	ands	r3, r2
 8005442:	d011      	beq.n	8005468 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800544a:	2202      	movs	r2, #2
 800544c:	4013      	ands	r3, r2
 800544e:	d00b      	beq.n	8005468 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2102      	movs	r1, #2
 800545c:	430a      	orrs	r2, r1
 800545e:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	0018      	movs	r0, r3
 8005464:	f000 f942 	bl	80056ec <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2229      	movs	r2, #41	@ 0x29
 800546c:	2101      	movs	r1, #1
 800546e:	5499      	strb	r1, [r3, r2]
}
 8005470:	46c0      	nop			@ (mov r8, r8)
 8005472:	46bd      	mov	sp, r7
 8005474:	b002      	add	sp, #8
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a0e      	ldr	r2, [pc, #56]	@ (80054c0 <HAL_RTC_WaitForSynchro+0x48>)
 8005486:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005488:	f7fc ff28 	bl	80022dc <HAL_GetTick>
 800548c:	0003      	movs	r3, r0
 800548e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005490:	e00a      	b.n	80054a8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005492:	f7fc ff23 	bl	80022dc <HAL_GetTick>
 8005496:	0002      	movs	r2, r0
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	1ad2      	subs	r2, r2, r3
 800549c:	23fa      	movs	r3, #250	@ 0xfa
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d901      	bls.n	80054a8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e006      	b.n	80054b6 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	4013      	ands	r3, r2
 80054b2:	d0ee      	beq.n	8005492 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	0018      	movs	r0, r3
 80054b8:	46bd      	mov	sp, r7
 80054ba:	b004      	add	sp, #16
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	46c0      	nop			@ (mov r8, r8)
 80054c0:	0001005f 	.word	0x0001005f

080054c4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80054cc:	230f      	movs	r3, #15
 80054ce:	18fb      	adds	r3, r7, r3
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	2240      	movs	r2, #64	@ 0x40
 80054dc:	4013      	ands	r3, r2
 80054de:	d12c      	bne.n	800553a <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2180      	movs	r1, #128	@ 0x80
 80054ec:	430a      	orrs	r2, r1
 80054ee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80054f0:	f7fc fef4 	bl	80022dc <HAL_GetTick>
 80054f4:	0003      	movs	r3, r0
 80054f6:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80054f8:	e014      	b.n	8005524 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80054fa:	f7fc feef 	bl	80022dc <HAL_GetTick>
 80054fe:	0002      	movs	r2, r0
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	1ad2      	subs	r2, r2, r3
 8005504:	200f      	movs	r0, #15
 8005506:	183b      	adds	r3, r7, r0
 8005508:	1839      	adds	r1, r7, r0
 800550a:	7809      	ldrb	r1, [r1, #0]
 800550c:	7019      	strb	r1, [r3, #0]
 800550e:	23fa      	movs	r3, #250	@ 0xfa
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	429a      	cmp	r2, r3
 8005514:	d906      	bls.n	8005524 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005516:	183b      	adds	r3, r7, r0
 8005518:	2203      	movs	r2, #3
 800551a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2229      	movs	r2, #41	@ 0x29
 8005520:	2103      	movs	r1, #3
 8005522:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	2240      	movs	r2, #64	@ 0x40
 800552c:	4013      	ands	r3, r2
 800552e:	d104      	bne.n	800553a <RTC_EnterInitMode+0x76>
 8005530:	230f      	movs	r3, #15
 8005532:	18fb      	adds	r3, r7, r3
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b03      	cmp	r3, #3
 8005538:	d1df      	bne.n	80054fa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800553a:	230f      	movs	r3, #15
 800553c:	18fb      	adds	r3, r7, r3
 800553e:	781b      	ldrb	r3, [r3, #0]
}
 8005540:	0018      	movs	r0, r3
 8005542:	46bd      	mov	sp, r7
 8005544:	b004      	add	sp, #16
 8005546:	bd80      	pop	{r7, pc}

08005548 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005548:	b590      	push	{r4, r7, lr}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005550:	240f      	movs	r4, #15
 8005552:	193b      	adds	r3, r7, r4
 8005554:	2200      	movs	r2, #0
 8005556:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005558:	4b1c      	ldr	r3, [pc, #112]	@ (80055cc <RTC_ExitInitMode+0x84>)
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	4b1b      	ldr	r3, [pc, #108]	@ (80055cc <RTC_ExitInitMode+0x84>)
 800555e:	2180      	movs	r1, #128	@ 0x80
 8005560:	438a      	bics	r2, r1
 8005562:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005564:	4b19      	ldr	r3, [pc, #100]	@ (80055cc <RTC_ExitInitMode+0x84>)
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	2220      	movs	r2, #32
 800556a:	4013      	ands	r3, r2
 800556c:	d10d      	bne.n	800558a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	0018      	movs	r0, r3
 8005572:	f7ff ff81 	bl	8005478 <HAL_RTC_WaitForSynchro>
 8005576:	1e03      	subs	r3, r0, #0
 8005578:	d021      	beq.n	80055be <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2229      	movs	r2, #41	@ 0x29
 800557e:	2103      	movs	r1, #3
 8005580:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005582:	193b      	adds	r3, r7, r4
 8005584:	2203      	movs	r2, #3
 8005586:	701a      	strb	r2, [r3, #0]
 8005588:	e019      	b.n	80055be <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800558a:	4b10      	ldr	r3, [pc, #64]	@ (80055cc <RTC_ExitInitMode+0x84>)
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	4b0f      	ldr	r3, [pc, #60]	@ (80055cc <RTC_ExitInitMode+0x84>)
 8005590:	2120      	movs	r1, #32
 8005592:	438a      	bics	r2, r1
 8005594:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	0018      	movs	r0, r3
 800559a:	f7ff ff6d 	bl	8005478 <HAL_RTC_WaitForSynchro>
 800559e:	1e03      	subs	r3, r0, #0
 80055a0:	d007      	beq.n	80055b2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2229      	movs	r2, #41	@ 0x29
 80055a6:	2103      	movs	r1, #3
 80055a8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80055aa:	230f      	movs	r3, #15
 80055ac:	18fb      	adds	r3, r7, r3
 80055ae:	2203      	movs	r2, #3
 80055b0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80055b2:	4b06      	ldr	r3, [pc, #24]	@ (80055cc <RTC_ExitInitMode+0x84>)
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	4b05      	ldr	r3, [pc, #20]	@ (80055cc <RTC_ExitInitMode+0x84>)
 80055b8:	2120      	movs	r1, #32
 80055ba:	430a      	orrs	r2, r1
 80055bc:	619a      	str	r2, [r3, #24]
  }

  return status;
 80055be:	230f      	movs	r3, #15
 80055c0:	18fb      	adds	r3, r7, r3
 80055c2:	781b      	ldrb	r3, [r3, #0]
}
 80055c4:	0018      	movs	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	b005      	add	sp, #20
 80055ca:	bd90      	pop	{r4, r7, pc}
 80055cc:	40002800 	.word	0x40002800

080055d0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	0002      	movs	r2, r0
 80055d8:	1dfb      	adds	r3, r7, #7
 80055da:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80055e0:	230b      	movs	r3, #11
 80055e2:	18fb      	adds	r3, r7, r3
 80055e4:	1dfa      	adds	r2, r7, #7
 80055e6:	7812      	ldrb	r2, [r2, #0]
 80055e8:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80055ea:	e008      	b.n	80055fe <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3301      	adds	r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80055f2:	220b      	movs	r2, #11
 80055f4:	18bb      	adds	r3, r7, r2
 80055f6:	18ba      	adds	r2, r7, r2
 80055f8:	7812      	ldrb	r2, [r2, #0]
 80055fa:	3a0a      	subs	r2, #10
 80055fc:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80055fe:	210b      	movs	r1, #11
 8005600:	187b      	adds	r3, r7, r1
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b09      	cmp	r3, #9
 8005606:	d8f1      	bhi.n	80055ec <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	b2db      	uxtb	r3, r3
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	b2da      	uxtb	r2, r3
 8005610:	187b      	adds	r3, r7, r1
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	4313      	orrs	r3, r2
 8005616:	b2db      	uxtb	r3, r3
}
 8005618:	0018      	movs	r0, r3
 800561a:	46bd      	mov	sp, r7
 800561c:	b004      	add	sp, #16
 800561e:	bd80      	pop	{r7, pc}

08005620 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	0002      	movs	r2, r0
 8005628:	1dfb      	adds	r3, r7, #7
 800562a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800562c:	1dfb      	adds	r3, r7, #7
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	091b      	lsrs	r3, r3, #4
 8005632:	b2db      	uxtb	r3, r3
 8005634:	001a      	movs	r2, r3
 8005636:	0013      	movs	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	189b      	adds	r3, r3, r2
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	b2da      	uxtb	r2, r3
 8005644:	1dfb      	adds	r3, r7, #7
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	210f      	movs	r1, #15
 800564a:	400b      	ands	r3, r1
 800564c:	b2db      	uxtb	r3, r3
 800564e:	18d3      	adds	r3, r2, r3
 8005650:	b2db      	uxtb	r3, r3
}
 8005652:	0018      	movs	r0, r3
 8005654:	46bd      	mov	sp, r7
 8005656:	b004      	add	sp, #16
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2228      	movs	r2, #40	@ 0x28
 800566a:	5c9b      	ldrb	r3, [r3, r2]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8005670:	2302      	movs	r3, #2
 8005672:	e035      	b.n	80056e0 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2228      	movs	r2, #40	@ 0x28
 8005678:	2101      	movs	r1, #1
 800567a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2229      	movs	r2, #41	@ 0x29
 8005680:	2102      	movs	r1, #2
 8005682:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	22ca      	movs	r2, #202	@ 0xca
 800568a:	625a      	str	r2, [r3, #36]	@ 0x24
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2253      	movs	r2, #83	@ 0x53
 8005692:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4912      	ldr	r1, [pc, #72]	@ (80056e8 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 80056a0:	400a      	ands	r2, r1
 80056a2:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6999      	ldr	r1, [r3, #24]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2180      	movs	r1, #128	@ 0x80
 80056c0:	0409      	lsls	r1, r1, #16
 80056c2:	430a      	orrs	r2, r1
 80056c4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	22ff      	movs	r2, #255	@ 0xff
 80056cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2229      	movs	r2, #41	@ 0x29
 80056d2:	2101      	movs	r1, #1
 80056d4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2228      	movs	r2, #40	@ 0x28
 80056da:	2100      	movs	r1, #0
 80056dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	0018      	movs	r0, r3
 80056e2:	46bd      	mov	sp, r7
 80056e4:	b002      	add	sp, #8
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	fff7ffff 	.word	0xfff7ffff

080056ec <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80056f4:	46c0      	nop			@ (mov r8, r8)
 80056f6:	46bd      	mov	sp, r7
 80056f8:	b002      	add	sp, #8
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e04a      	b.n	80057a4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	223d      	movs	r2, #61	@ 0x3d
 8005712:	5c9b      	ldrb	r3, [r3, r2]
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d107      	bne.n	800572a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	223c      	movs	r2, #60	@ 0x3c
 800571e:	2100      	movs	r1, #0
 8005720:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	0018      	movs	r0, r3
 8005726:	f7fc fc87 	bl	8002038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	223d      	movs	r2, #61	@ 0x3d
 800572e:	2102      	movs	r1, #2
 8005730:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3304      	adds	r3, #4
 800573a:	0019      	movs	r1, r3
 800573c:	0010      	movs	r0, r2
 800573e:	f000 fadd 	bl	8005cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2248      	movs	r2, #72	@ 0x48
 8005746:	2101      	movs	r1, #1
 8005748:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	223e      	movs	r2, #62	@ 0x3e
 800574e:	2101      	movs	r1, #1
 8005750:	5499      	strb	r1, [r3, r2]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	223f      	movs	r2, #63	@ 0x3f
 8005756:	2101      	movs	r1, #1
 8005758:	5499      	strb	r1, [r3, r2]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2240      	movs	r2, #64	@ 0x40
 800575e:	2101      	movs	r1, #1
 8005760:	5499      	strb	r1, [r3, r2]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2241      	movs	r2, #65	@ 0x41
 8005766:	2101      	movs	r1, #1
 8005768:	5499      	strb	r1, [r3, r2]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2242      	movs	r2, #66	@ 0x42
 800576e:	2101      	movs	r1, #1
 8005770:	5499      	strb	r1, [r3, r2]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2243      	movs	r2, #67	@ 0x43
 8005776:	2101      	movs	r1, #1
 8005778:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2244      	movs	r2, #68	@ 0x44
 800577e:	2101      	movs	r1, #1
 8005780:	5499      	strb	r1, [r3, r2]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2245      	movs	r2, #69	@ 0x45
 8005786:	2101      	movs	r1, #1
 8005788:	5499      	strb	r1, [r3, r2]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2246      	movs	r2, #70	@ 0x46
 800578e:	2101      	movs	r1, #1
 8005790:	5499      	strb	r1, [r3, r2]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2247      	movs	r2, #71	@ 0x47
 8005796:	2101      	movs	r1, #1
 8005798:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	223d      	movs	r2, #61	@ 0x3d
 800579e:	2101      	movs	r1, #1
 80057a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	0018      	movs	r0, r3
 80057a6:	46bd      	mov	sp, r7
 80057a8:	b002      	add	sp, #8
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	223d      	movs	r2, #61	@ 0x3d
 80057b8:	5c9b      	ldrb	r3, [r3, r2]
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d001      	beq.n	80057c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e035      	b.n	8005830 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	223d      	movs	r2, #61	@ 0x3d
 80057c8:	2102      	movs	r1, #2
 80057ca:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a19      	ldr	r2, [pc, #100]	@ (8005838 <HAL_TIM_Base_Start+0x8c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00a      	beq.n	80057ec <HAL_TIM_Base_Start+0x40>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	2380      	movs	r3, #128	@ 0x80
 80057dc:	05db      	lsls	r3, r3, #23
 80057de:	429a      	cmp	r2, r3
 80057e0:	d004      	beq.n	80057ec <HAL_TIM_Base_Start+0x40>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a15      	ldr	r2, [pc, #84]	@ (800583c <HAL_TIM_Base_Start+0x90>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d116      	bne.n	800581a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	4a13      	ldr	r2, [pc, #76]	@ (8005840 <HAL_TIM_Base_Start+0x94>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b06      	cmp	r3, #6
 80057fc:	d016      	beq.n	800582c <HAL_TIM_Base_Start+0x80>
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	2380      	movs	r3, #128	@ 0x80
 8005802:	025b      	lsls	r3, r3, #9
 8005804:	429a      	cmp	r2, r3
 8005806:	d011      	beq.n	800582c <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2101      	movs	r1, #1
 8005814:	430a      	orrs	r2, r1
 8005816:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005818:	e008      	b.n	800582c <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2101      	movs	r1, #1
 8005826:	430a      	orrs	r2, r1
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	e000      	b.n	800582e <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800582c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	0018      	movs	r0, r3
 8005832:	46bd      	mov	sp, r7
 8005834:	b004      	add	sp, #16
 8005836:	bd80      	pop	{r7, pc}
 8005838:	40012c00 	.word	0x40012c00
 800583c:	40000400 	.word	0x40000400
 8005840:	00010007 	.word	0x00010007

08005844 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	4a0d      	ldr	r2, [pc, #52]	@ (8005888 <HAL_TIM_Base_Stop+0x44>)
 8005854:	4013      	ands	r3, r2
 8005856:	d10d      	bne.n	8005874 <HAL_TIM_Base_Stop+0x30>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	4a0b      	ldr	r2, [pc, #44]	@ (800588c <HAL_TIM_Base_Stop+0x48>)
 8005860:	4013      	ands	r3, r2
 8005862:	d107      	bne.n	8005874 <HAL_TIM_Base_Stop+0x30>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2101      	movs	r1, #1
 8005870:	438a      	bics	r2, r1
 8005872:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	223d      	movs	r2, #61	@ 0x3d
 8005878:	2101      	movs	r1, #1
 800587a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	0018      	movs	r0, r3
 8005880:	46bd      	mov	sp, r7
 8005882:	b002      	add	sp, #8
 8005884:	bd80      	pop	{r7, pc}
 8005886:	46c0      	nop			@ (mov r8, r8)
 8005888:	00001111 	.word	0x00001111
 800588c:	00000444 	.word	0x00000444

08005890 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e04a      	b.n	8005938 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	223d      	movs	r2, #61	@ 0x3d
 80058a6:	5c9b      	ldrb	r3, [r3, r2]
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d107      	bne.n	80058be <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	223c      	movs	r2, #60	@ 0x3c
 80058b2:	2100      	movs	r1, #0
 80058b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	0018      	movs	r0, r3
 80058ba:	f7fc fba1 	bl	8002000 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	223d      	movs	r2, #61	@ 0x3d
 80058c2:	2102      	movs	r1, #2
 80058c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3304      	adds	r3, #4
 80058ce:	0019      	movs	r1, r3
 80058d0:	0010      	movs	r0, r2
 80058d2:	f000 fa13 	bl	8005cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2248      	movs	r2, #72	@ 0x48
 80058da:	2101      	movs	r1, #1
 80058dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	223e      	movs	r2, #62	@ 0x3e
 80058e2:	2101      	movs	r1, #1
 80058e4:	5499      	strb	r1, [r3, r2]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	223f      	movs	r2, #63	@ 0x3f
 80058ea:	2101      	movs	r1, #1
 80058ec:	5499      	strb	r1, [r3, r2]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2240      	movs	r2, #64	@ 0x40
 80058f2:	2101      	movs	r1, #1
 80058f4:	5499      	strb	r1, [r3, r2]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2241      	movs	r2, #65	@ 0x41
 80058fa:	2101      	movs	r1, #1
 80058fc:	5499      	strb	r1, [r3, r2]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2242      	movs	r2, #66	@ 0x42
 8005902:	2101      	movs	r1, #1
 8005904:	5499      	strb	r1, [r3, r2]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2243      	movs	r2, #67	@ 0x43
 800590a:	2101      	movs	r1, #1
 800590c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2244      	movs	r2, #68	@ 0x44
 8005912:	2101      	movs	r1, #1
 8005914:	5499      	strb	r1, [r3, r2]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2245      	movs	r2, #69	@ 0x45
 800591a:	2101      	movs	r1, #1
 800591c:	5499      	strb	r1, [r3, r2]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2246      	movs	r2, #70	@ 0x46
 8005922:	2101      	movs	r1, #1
 8005924:	5499      	strb	r1, [r3, r2]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2247      	movs	r2, #71	@ 0x47
 800592a:	2101      	movs	r1, #1
 800592c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	223d      	movs	r2, #61	@ 0x3d
 8005932:	2101      	movs	r1, #1
 8005934:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	0018      	movs	r0, r3
 800593a:	46bd      	mov	sp, r7
 800593c:	b002      	add	sp, #8
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d108      	bne.n	8005962 <HAL_TIM_PWM_Start+0x22>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	223e      	movs	r2, #62	@ 0x3e
 8005954:	5c9b      	ldrb	r3, [r3, r2]
 8005956:	b2db      	uxtb	r3, r3
 8005958:	3b01      	subs	r3, #1
 800595a:	1e5a      	subs	r2, r3, #1
 800595c:	4193      	sbcs	r3, r2
 800595e:	b2db      	uxtb	r3, r3
 8005960:	e037      	b.n	80059d2 <HAL_TIM_PWM_Start+0x92>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b04      	cmp	r3, #4
 8005966:	d108      	bne.n	800597a <HAL_TIM_PWM_Start+0x3a>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	223f      	movs	r2, #63	@ 0x3f
 800596c:	5c9b      	ldrb	r3, [r3, r2]
 800596e:	b2db      	uxtb	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	1e5a      	subs	r2, r3, #1
 8005974:	4193      	sbcs	r3, r2
 8005976:	b2db      	uxtb	r3, r3
 8005978:	e02b      	b.n	80059d2 <HAL_TIM_PWM_Start+0x92>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b08      	cmp	r3, #8
 800597e:	d108      	bne.n	8005992 <HAL_TIM_PWM_Start+0x52>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2240      	movs	r2, #64	@ 0x40
 8005984:	5c9b      	ldrb	r3, [r3, r2]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	1e5a      	subs	r2, r3, #1
 800598c:	4193      	sbcs	r3, r2
 800598e:	b2db      	uxtb	r3, r3
 8005990:	e01f      	b.n	80059d2 <HAL_TIM_PWM_Start+0x92>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b0c      	cmp	r3, #12
 8005996:	d108      	bne.n	80059aa <HAL_TIM_PWM_Start+0x6a>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2241      	movs	r2, #65	@ 0x41
 800599c:	5c9b      	ldrb	r3, [r3, r2]
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	3b01      	subs	r3, #1
 80059a2:	1e5a      	subs	r2, r3, #1
 80059a4:	4193      	sbcs	r3, r2
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	e013      	b.n	80059d2 <HAL_TIM_PWM_Start+0x92>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b10      	cmp	r3, #16
 80059ae:	d108      	bne.n	80059c2 <HAL_TIM_PWM_Start+0x82>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2242      	movs	r2, #66	@ 0x42
 80059b4:	5c9b      	ldrb	r3, [r3, r2]
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	1e5a      	subs	r2, r3, #1
 80059bc:	4193      	sbcs	r3, r2
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	e007      	b.n	80059d2 <HAL_TIM_PWM_Start+0x92>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2243      	movs	r2, #67	@ 0x43
 80059c6:	5c9b      	ldrb	r3, [r3, r2]
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	3b01      	subs	r3, #1
 80059cc:	1e5a      	subs	r2, r3, #1
 80059ce:	4193      	sbcs	r3, r2
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e081      	b.n	8005ade <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d104      	bne.n	80059ea <HAL_TIM_PWM_Start+0xaa>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	223e      	movs	r2, #62	@ 0x3e
 80059e4:	2102      	movs	r1, #2
 80059e6:	5499      	strb	r1, [r3, r2]
 80059e8:	e023      	b.n	8005a32 <HAL_TIM_PWM_Start+0xf2>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d104      	bne.n	80059fa <HAL_TIM_PWM_Start+0xba>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	223f      	movs	r2, #63	@ 0x3f
 80059f4:	2102      	movs	r1, #2
 80059f6:	5499      	strb	r1, [r3, r2]
 80059f8:	e01b      	b.n	8005a32 <HAL_TIM_PWM_Start+0xf2>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d104      	bne.n	8005a0a <HAL_TIM_PWM_Start+0xca>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2240      	movs	r2, #64	@ 0x40
 8005a04:	2102      	movs	r1, #2
 8005a06:	5499      	strb	r1, [r3, r2]
 8005a08:	e013      	b.n	8005a32 <HAL_TIM_PWM_Start+0xf2>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b0c      	cmp	r3, #12
 8005a0e:	d104      	bne.n	8005a1a <HAL_TIM_PWM_Start+0xda>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2241      	movs	r2, #65	@ 0x41
 8005a14:	2102      	movs	r1, #2
 8005a16:	5499      	strb	r1, [r3, r2]
 8005a18:	e00b      	b.n	8005a32 <HAL_TIM_PWM_Start+0xf2>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b10      	cmp	r3, #16
 8005a1e:	d104      	bne.n	8005a2a <HAL_TIM_PWM_Start+0xea>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2242      	movs	r2, #66	@ 0x42
 8005a24:	2102      	movs	r1, #2
 8005a26:	5499      	strb	r1, [r3, r2]
 8005a28:	e003      	b.n	8005a32 <HAL_TIM_PWM_Start+0xf2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2243      	movs	r2, #67	@ 0x43
 8005a2e:	2102      	movs	r1, #2
 8005a30:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6839      	ldr	r1, [r7, #0]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	f000 fc7e 	bl	800633c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a28      	ldr	r2, [pc, #160]	@ (8005ae8 <HAL_TIM_PWM_Start+0x1a8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d009      	beq.n	8005a5e <HAL_TIM_PWM_Start+0x11e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a27      	ldr	r2, [pc, #156]	@ (8005aec <HAL_TIM_PWM_Start+0x1ac>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d004      	beq.n	8005a5e <HAL_TIM_PWM_Start+0x11e>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a25      	ldr	r2, [pc, #148]	@ (8005af0 <HAL_TIM_PWM_Start+0x1b0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d101      	bne.n	8005a62 <HAL_TIM_PWM_Start+0x122>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e000      	b.n	8005a64 <HAL_TIM_PWM_Start+0x124>
 8005a62:	2300      	movs	r3, #0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d008      	beq.n	8005a7a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2180      	movs	r1, #128	@ 0x80
 8005a74:	0209      	lsls	r1, r1, #8
 8005a76:	430a      	orrs	r2, r1
 8005a78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ae8 <HAL_TIM_PWM_Start+0x1a8>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00a      	beq.n	8005a9a <HAL_TIM_PWM_Start+0x15a>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	2380      	movs	r3, #128	@ 0x80
 8005a8a:	05db      	lsls	r3, r3, #23
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d004      	beq.n	8005a9a <HAL_TIM_PWM_Start+0x15a>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a17      	ldr	r2, [pc, #92]	@ (8005af4 <HAL_TIM_PWM_Start+0x1b4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d116      	bne.n	8005ac8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	4a15      	ldr	r2, [pc, #84]	@ (8005af8 <HAL_TIM_PWM_Start+0x1b8>)
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b06      	cmp	r3, #6
 8005aaa:	d016      	beq.n	8005ada <HAL_TIM_PWM_Start+0x19a>
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	2380      	movs	r3, #128	@ 0x80
 8005ab0:	025b      	lsls	r3, r3, #9
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d011      	beq.n	8005ada <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac6:	e008      	b.n	8005ada <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	e000      	b.n	8005adc <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ada:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	0018      	movs	r0, r3
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	b004      	add	sp, #16
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	46c0      	nop			@ (mov r8, r8)
 8005ae8:	40012c00 	.word	0x40012c00
 8005aec:	40014400 	.word	0x40014400
 8005af0:	40014800 	.word	0x40014800
 8005af4:	40000400 	.word	0x40000400
 8005af8:	00010007 	.word	0x00010007

08005afc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b08:	2317      	movs	r3, #23
 8005b0a:	18fb      	adds	r3, r7, r3
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	223c      	movs	r2, #60	@ 0x3c
 8005b14:	5c9b      	ldrb	r3, [r3, r2]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <HAL_TIM_PWM_ConfigChannel+0x22>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	e0e5      	b.n	8005cea <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	223c      	movs	r2, #60	@ 0x3c
 8005b22:	2101      	movs	r1, #1
 8005b24:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b14      	cmp	r3, #20
 8005b2a:	d900      	bls.n	8005b2e <HAL_TIM_PWM_ConfigChannel+0x32>
 8005b2c:	e0d1      	b.n	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	009a      	lsls	r2, r3, #2
 8005b32:	4b70      	ldr	r3, [pc, #448]	@ (8005cf4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005b34:	18d3      	adds	r3, r2, r3
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	0011      	movs	r1, r2
 8005b42:	0018      	movs	r0, r3
 8005b44:	f000 f95e 	bl	8005e04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2108      	movs	r1, #8
 8005b54:	430a      	orrs	r2, r1
 8005b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699a      	ldr	r2, [r3, #24]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2104      	movs	r1, #4
 8005b64:	438a      	bics	r2, r1
 8005b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6999      	ldr	r1, [r3, #24]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	691a      	ldr	r2, [r3, #16]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	619a      	str	r2, [r3, #24]
      break;
 8005b7a:	e0af      	b.n	8005cdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	0011      	movs	r1, r2
 8005b84:	0018      	movs	r0, r3
 8005b86:	f000 f9bd 	bl	8005f04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	699a      	ldr	r2, [r3, #24]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2180      	movs	r1, #128	@ 0x80
 8005b96:	0109      	lsls	r1, r1, #4
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4954      	ldr	r1, [pc, #336]	@ (8005cf8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005ba8:	400a      	ands	r2, r1
 8005baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6999      	ldr	r1, [r3, #24]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	021a      	lsls	r2, r3, #8
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	619a      	str	r2, [r3, #24]
      break;
 8005bc0:	e08c      	b.n	8005cdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	0011      	movs	r1, r2
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f000 fa18 	bl	8006000 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	69da      	ldr	r2, [r3, #28]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2108      	movs	r1, #8
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69da      	ldr	r2, [r3, #28]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2104      	movs	r1, #4
 8005bec:	438a      	bics	r2, r1
 8005bee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	69d9      	ldr	r1, [r3, #28]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	691a      	ldr	r2, [r3, #16]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	61da      	str	r2, [r3, #28]
      break;
 8005c02:	e06b      	b.n	8005cdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	0011      	movs	r1, r2
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f000 fa79 	bl	8006104 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69da      	ldr	r2, [r3, #28]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2180      	movs	r1, #128	@ 0x80
 8005c1e:	0109      	lsls	r1, r1, #4
 8005c20:	430a      	orrs	r2, r1
 8005c22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	69da      	ldr	r2, [r3, #28]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4932      	ldr	r1, [pc, #200]	@ (8005cf8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005c30:	400a      	ands	r2, r1
 8005c32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	69d9      	ldr	r1, [r3, #28]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	021a      	lsls	r2, r3, #8
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	61da      	str	r2, [r3, #28]
      break;
 8005c48:	e048      	b.n	8005cdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	0011      	movs	r1, r2
 8005c52:	0018      	movs	r0, r3
 8005c54:	f000 faba 	bl	80061cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2108      	movs	r1, #8
 8005c64:	430a      	orrs	r2, r1
 8005c66:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2104      	movs	r1, #4
 8005c74:	438a      	bics	r2, r1
 8005c76:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	691a      	ldr	r2, [r3, #16]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005c8a:	e027      	b.n	8005cdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	0011      	movs	r1, r2
 8005c94:	0018      	movs	r0, r3
 8005c96:	f000 faf3 	bl	8006280 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2180      	movs	r1, #128	@ 0x80
 8005ca6:	0109      	lsls	r1, r1, #4
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4910      	ldr	r1, [pc, #64]	@ (8005cf8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005cb8:	400a      	ands	r2, r1
 8005cba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	021a      	lsls	r2, r3, #8
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005cd0:	e004      	b.n	8005cdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005cd2:	2317      	movs	r3, #23
 8005cd4:	18fb      	adds	r3, r7, r3
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	701a      	strb	r2, [r3, #0]
      break;
 8005cda:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	223c      	movs	r2, #60	@ 0x3c
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	5499      	strb	r1, [r3, r2]

  return status;
 8005ce4:	2317      	movs	r3, #23
 8005ce6:	18fb      	adds	r3, r7, r3
 8005ce8:	781b      	ldrb	r3, [r3, #0]
}
 8005cea:	0018      	movs	r0, r3
 8005cec:	46bd      	mov	sp, r7
 8005cee:	b006      	add	sp, #24
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	46c0      	nop			@ (mov r8, r8)
 8005cf4:	0800654c 	.word	0x0800654c
 8005cf8:	fffffbff 	.word	0xfffffbff

08005cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a37      	ldr	r2, [pc, #220]	@ (8005dec <TIM_Base_SetConfig+0xf0>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d008      	beq.n	8005d26 <TIM_Base_SetConfig+0x2a>
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	2380      	movs	r3, #128	@ 0x80
 8005d18:	05db      	lsls	r3, r3, #23
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d003      	beq.n	8005d26 <TIM_Base_SetConfig+0x2a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a33      	ldr	r2, [pc, #204]	@ (8005df0 <TIM_Base_SetConfig+0xf4>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d108      	bne.n	8005d38 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2270      	movs	r2, #112	@ 0x70
 8005d2a:	4393      	bics	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8005dec <TIM_Base_SetConfig+0xf0>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d014      	beq.n	8005d6a <TIM_Base_SetConfig+0x6e>
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	2380      	movs	r3, #128	@ 0x80
 8005d44:	05db      	lsls	r3, r3, #23
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d00f      	beq.n	8005d6a <TIM_Base_SetConfig+0x6e>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a28      	ldr	r2, [pc, #160]	@ (8005df0 <TIM_Base_SetConfig+0xf4>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00b      	beq.n	8005d6a <TIM_Base_SetConfig+0x6e>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a27      	ldr	r2, [pc, #156]	@ (8005df4 <TIM_Base_SetConfig+0xf8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d007      	beq.n	8005d6a <TIM_Base_SetConfig+0x6e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a26      	ldr	r2, [pc, #152]	@ (8005df8 <TIM_Base_SetConfig+0xfc>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d003      	beq.n	8005d6a <TIM_Base_SetConfig+0x6e>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a25      	ldr	r2, [pc, #148]	@ (8005dfc <TIM_Base_SetConfig+0x100>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d108      	bne.n	8005d7c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	4a24      	ldr	r2, [pc, #144]	@ (8005e00 <TIM_Base_SetConfig+0x104>)
 8005d6e:	4013      	ands	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2280      	movs	r2, #128	@ 0x80
 8005d80:	4393      	bics	r3, r2
 8005d82:	001a      	movs	r2, r3
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a11      	ldr	r2, [pc, #68]	@ (8005dec <TIM_Base_SetConfig+0xf0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d007      	beq.n	8005dba <TIM_Base_SetConfig+0xbe>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a12      	ldr	r2, [pc, #72]	@ (8005df8 <TIM_Base_SetConfig+0xfc>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d003      	beq.n	8005dba <TIM_Base_SetConfig+0xbe>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a11      	ldr	r2, [pc, #68]	@ (8005dfc <TIM_Base_SetConfig+0x100>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d103      	bne.n	8005dc2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	691a      	ldr	r2, [r3, #16]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	4013      	ands	r3, r2
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d106      	bne.n	8005de2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	4393      	bics	r3, r2
 8005ddc:	001a      	movs	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	611a      	str	r2, [r3, #16]
  }
}
 8005de2:	46c0      	nop			@ (mov r8, r8)
 8005de4:	46bd      	mov	sp, r7
 8005de6:	b004      	add	sp, #16
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	46c0      	nop			@ (mov r8, r8)
 8005dec:	40012c00 	.word	0x40012c00
 8005df0:	40000400 	.word	0x40000400
 8005df4:	40002000 	.word	0x40002000
 8005df8:	40014400 	.word	0x40014400
 8005dfc:	40014800 	.word	0x40014800
 8005e00:	fffffcff 	.word	0xfffffcff

08005e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	4393      	bics	r3, r2
 8005e1c:	001a      	movs	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4a2e      	ldr	r2, [pc, #184]	@ (8005eec <TIM_OC1_SetConfig+0xe8>)
 8005e32:	4013      	ands	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2203      	movs	r2, #3
 8005e3a:	4393      	bics	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	4393      	bics	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a24      	ldr	r2, [pc, #144]	@ (8005ef0 <TIM_OC1_SetConfig+0xec>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d007      	beq.n	8005e72 <TIM_OC1_SetConfig+0x6e>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a23      	ldr	r2, [pc, #140]	@ (8005ef4 <TIM_OC1_SetConfig+0xf0>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d003      	beq.n	8005e72 <TIM_OC1_SetConfig+0x6e>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a22      	ldr	r2, [pc, #136]	@ (8005ef8 <TIM_OC1_SetConfig+0xf4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d10c      	bne.n	8005e8c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2208      	movs	r2, #8
 8005e76:	4393      	bics	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2204      	movs	r2, #4
 8005e88:	4393      	bics	r3, r2
 8005e8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a18      	ldr	r2, [pc, #96]	@ (8005ef0 <TIM_OC1_SetConfig+0xec>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d007      	beq.n	8005ea4 <TIM_OC1_SetConfig+0xa0>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a17      	ldr	r2, [pc, #92]	@ (8005ef4 <TIM_OC1_SetConfig+0xf0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d003      	beq.n	8005ea4 <TIM_OC1_SetConfig+0xa0>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a16      	ldr	r2, [pc, #88]	@ (8005ef8 <TIM_OC1_SetConfig+0xf4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d111      	bne.n	8005ec8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	4a15      	ldr	r2, [pc, #84]	@ (8005efc <TIM_OC1_SetConfig+0xf8>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	4a14      	ldr	r2, [pc, #80]	@ (8005f00 <TIM_OC1_SetConfig+0xfc>)
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	621a      	str	r2, [r3, #32]
}
 8005ee2:	46c0      	nop			@ (mov r8, r8)
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	b006      	add	sp, #24
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	46c0      	nop			@ (mov r8, r8)
 8005eec:	fffeff8f 	.word	0xfffeff8f
 8005ef0:	40012c00 	.word	0x40012c00
 8005ef4:	40014400 	.word	0x40014400
 8005ef8:	40014800 	.word	0x40014800
 8005efc:	fffffeff 	.word	0xfffffeff
 8005f00:	fffffdff 	.word	0xfffffdff

08005f04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	2210      	movs	r2, #16
 8005f1a:	4393      	bics	r3, r2
 8005f1c:	001a      	movs	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4a2c      	ldr	r2, [pc, #176]	@ (8005fe4 <TIM_OC2_SetConfig+0xe0>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4a2b      	ldr	r2, [pc, #172]	@ (8005fe8 <TIM_OC2_SetConfig+0xe4>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	021b      	lsls	r3, r3, #8
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	4393      	bics	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a22      	ldr	r2, [pc, #136]	@ (8005fec <TIM_OC2_SetConfig+0xe8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d10d      	bne.n	8005f82 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2280      	movs	r2, #128	@ 0x80
 8005f6a:	4393      	bics	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	011b      	lsls	r3, r3, #4
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2240      	movs	r2, #64	@ 0x40
 8005f7e:	4393      	bics	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a19      	ldr	r2, [pc, #100]	@ (8005fec <TIM_OC2_SetConfig+0xe8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d007      	beq.n	8005f9a <TIM_OC2_SetConfig+0x96>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a18      	ldr	r2, [pc, #96]	@ (8005ff0 <TIM_OC2_SetConfig+0xec>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d003      	beq.n	8005f9a <TIM_OC2_SetConfig+0x96>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a17      	ldr	r2, [pc, #92]	@ (8005ff4 <TIM_OC2_SetConfig+0xf0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d113      	bne.n	8005fc2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	4a16      	ldr	r2, [pc, #88]	@ (8005ff8 <TIM_OC2_SetConfig+0xf4>)
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	4a15      	ldr	r2, [pc, #84]	@ (8005ffc <TIM_OC2_SetConfig+0xf8>)
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	621a      	str	r2, [r3, #32]
}
 8005fdc:	46c0      	nop			@ (mov r8, r8)
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	b006      	add	sp, #24
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	feff8fff 	.word	0xfeff8fff
 8005fe8:	fffffcff 	.word	0xfffffcff
 8005fec:	40012c00 	.word	0x40012c00
 8005ff0:	40014400 	.word	0x40014400
 8005ff4:	40014800 	.word	0x40014800
 8005ff8:	fffffbff 	.word	0xfffffbff
 8005ffc:	fffff7ff 	.word	0xfffff7ff

08006000 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	4a31      	ldr	r2, [pc, #196]	@ (80060dc <TIM_OC3_SetConfig+0xdc>)
 8006016:	401a      	ands	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4a2d      	ldr	r2, [pc, #180]	@ (80060e0 <TIM_OC3_SetConfig+0xe0>)
 800602c:	4013      	ands	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2203      	movs	r2, #3
 8006034:	4393      	bics	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	4a27      	ldr	r2, [pc, #156]	@ (80060e4 <TIM_OC3_SetConfig+0xe4>)
 8006046:	4013      	ands	r3, r2
 8006048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	021b      	lsls	r3, r3, #8
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	4313      	orrs	r3, r2
 8006054:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a23      	ldr	r2, [pc, #140]	@ (80060e8 <TIM_OC3_SetConfig+0xe8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d10d      	bne.n	800607a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	4a22      	ldr	r2, [pc, #136]	@ (80060ec <TIM_OC3_SetConfig+0xec>)
 8006062:	4013      	ands	r3, r2
 8006064:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	021b      	lsls	r3, r3, #8
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	4a1e      	ldr	r2, [pc, #120]	@ (80060f0 <TIM_OC3_SetConfig+0xf0>)
 8006076:	4013      	ands	r3, r2
 8006078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a1a      	ldr	r2, [pc, #104]	@ (80060e8 <TIM_OC3_SetConfig+0xe8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d007      	beq.n	8006092 <TIM_OC3_SetConfig+0x92>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a1b      	ldr	r2, [pc, #108]	@ (80060f4 <TIM_OC3_SetConfig+0xf4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d003      	beq.n	8006092 <TIM_OC3_SetConfig+0x92>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a1a      	ldr	r2, [pc, #104]	@ (80060f8 <TIM_OC3_SetConfig+0xf8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d113      	bne.n	80060ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	4a19      	ldr	r2, [pc, #100]	@ (80060fc <TIM_OC3_SetConfig+0xfc>)
 8006096:	4013      	ands	r3, r2
 8006098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	4a18      	ldr	r2, [pc, #96]	@ (8006100 <TIM_OC3_SetConfig+0x100>)
 800609e:	4013      	ands	r3, r2
 80060a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	011b      	lsls	r3, r3, #4
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	621a      	str	r2, [r3, #32]
}
 80060d4:	46c0      	nop			@ (mov r8, r8)
 80060d6:	46bd      	mov	sp, r7
 80060d8:	b006      	add	sp, #24
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	fffffeff 	.word	0xfffffeff
 80060e0:	fffeff8f 	.word	0xfffeff8f
 80060e4:	fffffdff 	.word	0xfffffdff
 80060e8:	40012c00 	.word	0x40012c00
 80060ec:	fffff7ff 	.word	0xfffff7ff
 80060f0:	fffffbff 	.word	0xfffffbff
 80060f4:	40014400 	.word	0x40014400
 80060f8:	40014800 	.word	0x40014800
 80060fc:	ffffefff 	.word	0xffffefff
 8006100:	ffffdfff 	.word	0xffffdfff

08006104 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	4a24      	ldr	r2, [pc, #144]	@ (80061ac <TIM_OC4_SetConfig+0xa8>)
 800611a:	401a      	ands	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4a20      	ldr	r2, [pc, #128]	@ (80061b0 <TIM_OC4_SetConfig+0xac>)
 8006130:	4013      	ands	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4a1f      	ldr	r2, [pc, #124]	@ (80061b4 <TIM_OC4_SetConfig+0xb0>)
 8006138:	4013      	ands	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4313      	orrs	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	4a1b      	ldr	r2, [pc, #108]	@ (80061b8 <TIM_OC4_SetConfig+0xb4>)
 800614c:	4013      	ands	r3, r2
 800614e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	031b      	lsls	r3, r3, #12
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a17      	ldr	r2, [pc, #92]	@ (80061bc <TIM_OC4_SetConfig+0xb8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d007      	beq.n	8006174 <TIM_OC4_SetConfig+0x70>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a16      	ldr	r2, [pc, #88]	@ (80061c0 <TIM_OC4_SetConfig+0xbc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d003      	beq.n	8006174 <TIM_OC4_SetConfig+0x70>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a15      	ldr	r2, [pc, #84]	@ (80061c4 <TIM_OC4_SetConfig+0xc0>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d109      	bne.n	8006188 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	4a14      	ldr	r2, [pc, #80]	@ (80061c8 <TIM_OC4_SetConfig+0xc4>)
 8006178:	4013      	ands	r3, r2
 800617a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	019b      	lsls	r3, r3, #6
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	621a      	str	r2, [r3, #32]
}
 80061a2:	46c0      	nop			@ (mov r8, r8)
 80061a4:	46bd      	mov	sp, r7
 80061a6:	b006      	add	sp, #24
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	46c0      	nop			@ (mov r8, r8)
 80061ac:	ffffefff 	.word	0xffffefff
 80061b0:	feff8fff 	.word	0xfeff8fff
 80061b4:	fffffcff 	.word	0xfffffcff
 80061b8:	ffffdfff 	.word	0xffffdfff
 80061bc:	40012c00 	.word	0x40012c00
 80061c0:	40014400 	.word	0x40014400
 80061c4:	40014800 	.word	0x40014800
 80061c8:	ffffbfff 	.word	0xffffbfff

080061cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	4a21      	ldr	r2, [pc, #132]	@ (8006268 <TIM_OC5_SetConfig+0x9c>)
 80061e2:	401a      	ands	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4a1d      	ldr	r2, [pc, #116]	@ (800626c <TIM_OC5_SetConfig+0xa0>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	4a19      	ldr	r2, [pc, #100]	@ (8006270 <TIM_OC5_SetConfig+0xa4>)
 800620a:	4013      	ands	r3, r2
 800620c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	041b      	lsls	r3, r3, #16
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	4313      	orrs	r3, r2
 8006218:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a15      	ldr	r2, [pc, #84]	@ (8006274 <TIM_OC5_SetConfig+0xa8>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d007      	beq.n	8006232 <TIM_OC5_SetConfig+0x66>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a14      	ldr	r2, [pc, #80]	@ (8006278 <TIM_OC5_SetConfig+0xac>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d003      	beq.n	8006232 <TIM_OC5_SetConfig+0x66>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a13      	ldr	r2, [pc, #76]	@ (800627c <TIM_OC5_SetConfig+0xb0>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d109      	bne.n	8006246 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	4a0c      	ldr	r2, [pc, #48]	@ (8006268 <TIM_OC5_SetConfig+0x9c>)
 8006236:	4013      	ands	r3, r2
 8006238:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	021b      	lsls	r3, r3, #8
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	4313      	orrs	r3, r2
 8006244:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	621a      	str	r2, [r3, #32]
}
 8006260:	46c0      	nop			@ (mov r8, r8)
 8006262:	46bd      	mov	sp, r7
 8006264:	b006      	add	sp, #24
 8006266:	bd80      	pop	{r7, pc}
 8006268:	fffeffff 	.word	0xfffeffff
 800626c:	fffeff8f 	.word	0xfffeff8f
 8006270:	fffdffff 	.word	0xfffdffff
 8006274:	40012c00 	.word	0x40012c00
 8006278:	40014400 	.word	0x40014400
 800627c:	40014800 	.word	0x40014800

08006280 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	4a22      	ldr	r2, [pc, #136]	@ (8006320 <TIM_OC6_SetConfig+0xa0>)
 8006296:	401a      	ands	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006324 <TIM_OC6_SetConfig+0xa4>)
 80062ac:	4013      	ands	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	021b      	lsls	r3, r3, #8
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	4a1a      	ldr	r2, [pc, #104]	@ (8006328 <TIM_OC6_SetConfig+0xa8>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	051b      	lsls	r3, r3, #20
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a16      	ldr	r2, [pc, #88]	@ (800632c <TIM_OC6_SetConfig+0xac>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d007      	beq.n	80062e8 <TIM_OC6_SetConfig+0x68>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a15      	ldr	r2, [pc, #84]	@ (8006330 <TIM_OC6_SetConfig+0xb0>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d003      	beq.n	80062e8 <TIM_OC6_SetConfig+0x68>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a14      	ldr	r2, [pc, #80]	@ (8006334 <TIM_OC6_SetConfig+0xb4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d109      	bne.n	80062fc <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	4a13      	ldr	r2, [pc, #76]	@ (8006338 <TIM_OC6_SetConfig+0xb8>)
 80062ec:	4013      	ands	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	029b      	lsls	r3, r3, #10
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	621a      	str	r2, [r3, #32]
}
 8006316:	46c0      	nop			@ (mov r8, r8)
 8006318:	46bd      	mov	sp, r7
 800631a:	b006      	add	sp, #24
 800631c:	bd80      	pop	{r7, pc}
 800631e:	46c0      	nop			@ (mov r8, r8)
 8006320:	ffefffff 	.word	0xffefffff
 8006324:	feff8fff 	.word	0xfeff8fff
 8006328:	ffdfffff 	.word	0xffdfffff
 800632c:	40012c00 	.word	0x40012c00
 8006330:	40014400 	.word	0x40014400
 8006334:	40014800 	.word	0x40014800
 8006338:	fffbffff 	.word	0xfffbffff

0800633c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	221f      	movs	r2, #31
 800634c:	4013      	ands	r3, r2
 800634e:	2201      	movs	r2, #1
 8006350:	409a      	lsls	r2, r3
 8006352:	0013      	movs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	43d2      	mvns	r2, r2
 800635e:	401a      	ands	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a1a      	ldr	r2, [r3, #32]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	211f      	movs	r1, #31
 800636c:	400b      	ands	r3, r1
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	4099      	lsls	r1, r3
 8006372:	000b      	movs	r3, r1
 8006374:	431a      	orrs	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	621a      	str	r2, [r3, #32]
}
 800637a:	46c0      	nop			@ (mov r8, r8)
 800637c:	46bd      	mov	sp, r7
 800637e:	b006      	add	sp, #24
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	223c      	movs	r2, #60	@ 0x3c
 8006392:	5c9b      	ldrb	r3, [r3, r2]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006398:	2302      	movs	r3, #2
 800639a:	e050      	b.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	223c      	movs	r2, #60	@ 0x3c
 80063a0:	2101      	movs	r1, #1
 80063a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	223d      	movs	r2, #61	@ 0x3d
 80063a8:	2102      	movs	r1, #2
 80063aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a21      	ldr	r2, [pc, #132]	@ (8006448 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d108      	bne.n	80063d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4a20      	ldr	r2, [pc, #128]	@ (800644c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80063ca:	4013      	ands	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2270      	movs	r2, #112	@ 0x70
 80063dc:	4393      	bics	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a14      	ldr	r2, [pc, #80]	@ (8006448 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d00a      	beq.n	8006412 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	2380      	movs	r3, #128	@ 0x80
 8006402:	05db      	lsls	r3, r3, #23
 8006404:	429a      	cmp	r2, r3
 8006406:	d004      	beq.n	8006412 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a10      	ldr	r2, [pc, #64]	@ (8006450 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d10c      	bne.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2280      	movs	r2, #128	@ 0x80
 8006416:	4393      	bics	r3, r2
 8006418:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	4313      	orrs	r3, r2
 8006422:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	223d      	movs	r2, #61	@ 0x3d
 8006430:	2101      	movs	r1, #1
 8006432:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	223c      	movs	r2, #60	@ 0x3c
 8006438:	2100      	movs	r1, #0
 800643a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	0018      	movs	r0, r3
 8006440:	46bd      	mov	sp, r7
 8006442:	b004      	add	sp, #16
 8006444:	bd80      	pop	{r7, pc}
 8006446:	46c0      	nop			@ (mov r8, r8)
 8006448:	40012c00 	.word	0x40012c00
 800644c:	ff0fffff 	.word	0xff0fffff
 8006450:	40000400 	.word	0x40000400

08006454 <memset>:
 8006454:	0003      	movs	r3, r0
 8006456:	1882      	adds	r2, r0, r2
 8006458:	4293      	cmp	r3, r2
 800645a:	d100      	bne.n	800645e <memset+0xa>
 800645c:	4770      	bx	lr
 800645e:	7019      	strb	r1, [r3, #0]
 8006460:	3301      	adds	r3, #1
 8006462:	e7f9      	b.n	8006458 <memset+0x4>

08006464 <__libc_init_array>:
 8006464:	b570      	push	{r4, r5, r6, lr}
 8006466:	2600      	movs	r6, #0
 8006468:	4c0c      	ldr	r4, [pc, #48]	@ (800649c <__libc_init_array+0x38>)
 800646a:	4d0d      	ldr	r5, [pc, #52]	@ (80064a0 <__libc_init_array+0x3c>)
 800646c:	1b64      	subs	r4, r4, r5
 800646e:	10a4      	asrs	r4, r4, #2
 8006470:	42a6      	cmp	r6, r4
 8006472:	d109      	bne.n	8006488 <__libc_init_array+0x24>
 8006474:	2600      	movs	r6, #0
 8006476:	f000 f819 	bl	80064ac <_init>
 800647a:	4c0a      	ldr	r4, [pc, #40]	@ (80064a4 <__libc_init_array+0x40>)
 800647c:	4d0a      	ldr	r5, [pc, #40]	@ (80064a8 <__libc_init_array+0x44>)
 800647e:	1b64      	subs	r4, r4, r5
 8006480:	10a4      	asrs	r4, r4, #2
 8006482:	42a6      	cmp	r6, r4
 8006484:	d105      	bne.n	8006492 <__libc_init_array+0x2e>
 8006486:	bd70      	pop	{r4, r5, r6, pc}
 8006488:	00b3      	lsls	r3, r6, #2
 800648a:	58eb      	ldr	r3, [r5, r3]
 800648c:	4798      	blx	r3
 800648e:	3601      	adds	r6, #1
 8006490:	e7ee      	b.n	8006470 <__libc_init_array+0xc>
 8006492:	00b3      	lsls	r3, r6, #2
 8006494:	58eb      	ldr	r3, [r5, r3]
 8006496:	4798      	blx	r3
 8006498:	3601      	adds	r6, #1
 800649a:	e7f2      	b.n	8006482 <__libc_init_array+0x1e>
 800649c:	080065a0 	.word	0x080065a0
 80064a0:	080065a0 	.word	0x080065a0
 80064a4:	080065a4 	.word	0x080065a4
 80064a8:	080065a0 	.word	0x080065a0

080064ac <_init>:
 80064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ae:	46c0      	nop			@ (mov r8, r8)
 80064b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b2:	bc08      	pop	{r3}
 80064b4:	469e      	mov	lr, r3
 80064b6:	4770      	bx	lr

080064b8 <_fini>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	46c0      	nop			@ (mov r8, r8)
 80064bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064be:	bc08      	pop	{r3}
 80064c0:	469e      	mov	lr, r3
 80064c2:	4770      	bx	lr
