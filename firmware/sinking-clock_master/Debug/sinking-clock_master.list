
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c64  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005d20  08005d20  00006d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dec  08005dec  00007060  2**0
                  CONTENTS
  4 .ARM          00000000  08005dec  08005dec  00007060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005dec  08005dec  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dec  08005dec  00006dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005df0  08005df0  00006df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005df4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000060  08005e54  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08005e54  0000723c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012502  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b91  00000000  00000000  0001958a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0001c120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e12  00000000  00000000  0001d330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018116  00000000  00000000  0001e142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164b7  00000000  00000000  00036258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009837e  00000000  00000000  0004c70f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4a8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004160  00000000  00000000  000e4ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e8c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000060 	.word	0x20000060
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005d08 	.word	0x08005d08

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000064 	.word	0x20000064
 8000100:	08005d08 	.word	0x08005d08

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	b089      	sub	sp, #36	@ 0x24
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231f      	movs	r3, #31
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	2108      	movs	r1, #8
 800024a:	185b      	adds	r3, r3, r1
 800024c:	19db      	adds	r3, r3, r7
 800024e:	881b      	ldrh	r3, [r3, #0]
 8000250:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-high hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	6818      	ldr	r0, [r3, #0]
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	899b      	ldrh	r3, [r3, #12]
 800025c:	2201      	movs	r2, #1
 800025e:	0019      	movs	r1, r3
 8000260:	f002 fa5d 	bl	800271e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	689b      	ldr	r3, [r3, #8]
 8000268:	6818      	ldr	r0, [r3, #0]
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	899b      	ldrh	r3, [r3, #12]
 800026e:	2200      	movs	r2, #0
 8000270:	0019      	movs	r1, r3
 8000272:	f002 fa54 	bl	800271e <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	0018      	movs	r0, r3
 800027c:	f004 ff06 	bl	800508c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	0018      	movs	r0, r3
 8000286:	f004 feb5 	bl	8004ff4 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000292:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000294:	46c0      	nop			@ (mov r8, r8)
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029e:	69bb      	ldr	r3, [r7, #24]
 80002a0:	1ad2      	subs	r2, r2, r3
 80002a2:	2380      	movs	r3, #128	@ 0x80
 80002a4:	021b      	lsls	r3, r3, #8
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d3f5      	bcc.n	8000296 <capTouch_Init+0x7a>

	// Verify device ID
	uint8_t deviceIDRet = 0x00;
 80002aa:	2517      	movs	r5, #23
 80002ac:	197b      	adds	r3, r7, r5
 80002ae:	2200      	movs	r2, #0
 80002b0:	701a      	strb	r2, [r3, #0]
	halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b2:	261f      	movs	r6, #31
 80002b4:	19bc      	adds	r4, r7, r6
 80002b6:	197a      	adds	r2, r7, r5
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	0011      	movs	r1, r2
 80002bc:	0018      	movs	r0, r3
 80002be:	f000 f855 	bl	800036c <capTouch_ReadDeviceID>
 80002c2:	0003      	movs	r3, r0
 80002c4:	7023      	strb	r3, [r4, #0]

	if(deviceIDRet != DEVICE_ID || halRet != HAL_OK) {
 80002c6:	197b      	adds	r3, r7, r5
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80002cc:	d103      	bne.n	80002d6 <capTouch_Init+0xba>
 80002ce:	19bb      	adds	r3, r7, r6
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <capTouch_Init+0xbe>
		return 1;
 80002d6:	2301      	movs	r3, #1
 80002d8:	e043      	b.n	8000362 <capTouch_Init+0x146>
	}

	capTouch->deviceID = deviceIDRet;
 80002da:	2317      	movs	r3, #23
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	781a      	ldrb	r2, [r3, #0]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	739a      	strb	r2, [r3, #14]

	// Force Device Recalibration
	halRet = capTouch_Recalibrate(capTouch);
 80002e4:	251f      	movs	r5, #31
 80002e6:	197c      	adds	r4, r7, r5
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 f880 	bl	80003f0 <capTouch_Recalibrate>
 80002f0:	0003      	movs	r3, r0
 80002f2:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 80002f4:	197b      	adds	r3, r7, r5
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <capTouch_Init+0xe4>
		return 2;
 80002fc:	2302      	movs	r3, #2
 80002fe:	e030      	b.n	8000362 <capTouch_Init+0x146>
	}

	// Wait until calibration sequence completes
	while(capTouch_checkCal(capTouch)) {}
 8000300:	46c0      	nop			@ (mov r8, r8)
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	0018      	movs	r0, r3
 8000306:	f000 f895 	bl	8000434 <capTouch_checkCal>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d1f9      	bne.n	8000302 <capTouch_Init+0xe6>

	// Get initial reading of channels
	halRet = capTouch_readChannels(capTouch);
 800030e:	251f      	movs	r5, #31
 8000310:	197c      	adds	r4, r7, r5
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	0018      	movs	r0, r3
 8000316:	f000 f8d1 	bl	80004bc <capTouch_readChannels>
 800031a:	0003      	movs	r3, r0
 800031c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 800031e:	197b      	adds	r3, r7, r5
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <capTouch_Init+0x10e>
		return 3;
 8000326:	2303      	movs	r3, #3
 8000328:	e01b      	b.n	8000362 <capTouch_Init+0x146>
	}

	halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 800032a:	251f      	movs	r5, #31
 800032c:	197c      	adds	r4, r7, r5
 800032e:	2334      	movs	r3, #52	@ 0x34
 8000330:	2208      	movs	r2, #8
 8000332:	189b      	adds	r3, r3, r2
 8000334:	19db      	adds	r3, r3, r7
 8000336:	781a      	ldrb	r2, [r3, #0]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	0011      	movs	r1, r2
 800033c:	0018      	movs	r0, r3
 800033e:	f000 f901 	bl	8000544 <capTouch_enableKeys>
 8000342:	0003      	movs	r3, r0
 8000344:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000346:	197b      	adds	r3, r7, r5
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <capTouch_Init+0x136>
		return 4;
 800034e:	2304      	movs	r3, #4
 8000350:	e007      	b.n	8000362 <capTouch_Init+0x146>
	}
	capTouch->keys = keyEnFlags;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	2234      	movs	r2, #52	@ 0x34
 8000356:	2108      	movs	r1, #8
 8000358:	1852      	adds	r2, r2, r1
 800035a:	19d2      	adds	r2, r2, r7
 800035c:	7812      	ldrb	r2, [r2, #0]
 800035e:	73da      	strb	r2, [r3, #15]

	return 0;
 8000360:	2300      	movs	r3, #0

}
 8000362:	0018      	movs	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	b009      	add	sp, #36	@ 0x24
 8000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800036c <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 800036c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036e:	b087      	sub	sp, #28
 8000370:	af02      	add	r7, sp, #8
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 8000376:	230e      	movs	r3, #14
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800037e:	250f      	movs	r5, #15
 8000380:	197b      	adds	r3, r7, r5
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 8000386:	210c      	movs	r1, #12
 8000388:	187b      	adds	r3, r7, r1
 800038a:	4a18      	ldr	r2, [pc, #96]	@ (80003ec <capTouch_ReadDeviceID+0x80>)
 800038c:	7812      	ldrb	r2, [r2, #0]
 800038e:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	6818      	ldr	r0, [r3, #0]
 8000394:	197c      	adds	r4, r7, r5
 8000396:	187a      	adds	r2, r7, r1
 8000398:	2301      	movs	r3, #1
 800039a:	425b      	negs	r3, r3
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	2301      	movs	r3, #1
 80003a0:	2136      	movs	r1, #54	@ 0x36
 80003a2:	f002 facf 	bl	8002944 <HAL_I2C_Master_Transmit>
 80003a6:	0003      	movs	r3, r0
 80003a8:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80003aa:	197b      	adds	r3, r7, r5
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d002      	beq.n	80003b8 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 80003b2:	197b      	adds	r3, r7, r5
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	e014      	b.n	80003e2 <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6818      	ldr	r0, [r3, #0]
 80003bc:	250f      	movs	r5, #15
 80003be:	197c      	adds	r4, r7, r5
 80003c0:	260e      	movs	r6, #14
 80003c2:	19ba      	adds	r2, r7, r6
 80003c4:	2301      	movs	r3, #1
 80003c6:	425b      	negs	r3, r3
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	2301      	movs	r3, #1
 80003cc:	2136      	movs	r1, #54	@ 0x36
 80003ce:	f002 fbe3 	bl	8002b98 <HAL_I2C_Master_Receive>
 80003d2:	0003      	movs	r3, r0
 80003d4:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 80003d6:	19bb      	adds	r3, r7, r6
 80003d8:	781a      	ldrb	r2, [r3, #0]
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	701a      	strb	r2, [r3, #0]

	return halRet;
 80003de:	197b      	adds	r3, r7, r5
 80003e0:	781b      	ldrb	r3, [r3, #0]

}
 80003e2:	0018      	movs	r0, r3
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b005      	add	sp, #20
 80003e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ea:	46c0      	nop			@ (mov r8, r8)
 80003ec:	08005d20 	.word	0x08005d20

080003f0 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80003f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f2:	b087      	sub	sp, #28
 80003f4:	af02      	add	r7, sp, #8
 80003f6:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80003f8:	210f      	movs	r1, #15
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2200      	movs	r2, #0
 80003fe:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 8000400:	260c      	movs	r6, #12
 8000402:	19bb      	adds	r3, r7, r6
 8000404:	22c8      	movs	r2, #200	@ 0xc8
 8000406:	4252      	negs	r2, r2
 8000408:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	6818      	ldr	r0, [r3, #0]
 800040e:	000d      	movs	r5, r1
 8000410:	187c      	adds	r4, r7, r1
 8000412:	19ba      	adds	r2, r7, r6
 8000414:	2301      	movs	r3, #1
 8000416:	425b      	negs	r3, r3
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2302      	movs	r3, #2
 800041c:	2136      	movs	r1, #54	@ 0x36
 800041e:	f002 fa91 	bl	8002944 <HAL_I2C_Master_Transmit>
 8000422:	0003      	movs	r3, r0
 8000424:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 8000426:	197b      	adds	r3, r7, r5
 8000428:	781b      	ldrb	r3, [r3, #0]

}
 800042a:	0018      	movs	r0, r3
 800042c:	46bd      	mov	sp, r7
 800042e:	b005      	add	sp, #20
 8000430:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000434 <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	b087      	sub	sp, #28
 8000438:	af02      	add	r7, sp, #8
 800043a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800043c:	210f      	movs	r1, #15
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 8000444:	230d      	movs	r3, #13
 8000446:	18fb      	adds	r3, r7, r3
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 800044c:	260c      	movs	r6, #12
 800044e:	19bb      	adds	r3, r7, r6
 8000450:	4a19      	ldr	r2, [pc, #100]	@ (80004b8 <capTouch_checkCal+0x84>)
 8000452:	7812      	ldrb	r2, [r2, #0]
 8000454:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	000d      	movs	r5, r1
 800045c:	187c      	adds	r4, r7, r1
 800045e:	19ba      	adds	r2, r7, r6
 8000460:	2301      	movs	r3, #1
 8000462:	425b      	negs	r3, r3
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	2301      	movs	r3, #1
 8000468:	2136      	movs	r1, #54	@ 0x36
 800046a:	f002 fa6b 	bl	8002944 <HAL_I2C_Master_Transmit>
 800046e:	0003      	movs	r3, r0
 8000470:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000472:	197b      	adds	r3, r7, r5
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d002      	beq.n	8000480 <capTouch_checkCal+0x4c>
		return halRet;
 800047a:	197b      	adds	r3, r7, r5
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	e016      	b.n	80004ae <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6818      	ldr	r0, [r3, #0]
 8000484:	230f      	movs	r3, #15
 8000486:	18fc      	adds	r4, r7, r3
 8000488:	250d      	movs	r5, #13
 800048a:	197a      	adds	r2, r7, r5
 800048c:	2301      	movs	r3, #1
 800048e:	425b      	negs	r3, r3
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	2301      	movs	r3, #1
 8000494:	2136      	movs	r1, #54	@ 0x36
 8000496:	f002 fb7f 	bl	8002b98 <HAL_I2C_Master_Receive>
 800049a:	0003      	movs	r3, r0
 800049c:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 800049e:	197b      	adds	r3, r7, r5
 80004a0:	781a      	ldrb	r2, [r3, #0]
 80004a2:	210e      	movs	r1, #14
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	09d2      	lsrs	r2, r2, #7
 80004a8:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	781b      	ldrb	r3, [r3, #0]

}
 80004ae:	0018      	movs	r0, r3
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b005      	add	sp, #20
 80004b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	08005d24 	.word	0x08005d24

080004bc <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	b087      	sub	sp, #28
 80004c0:	af02      	add	r7, sp, #8
 80004c2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004c4:	210f      	movs	r1, #15
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 80004cc:	230e      	movs	r3, #14
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	2200      	movs	r2, #0
 80004d2:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 80004d4:	260c      	movs	r6, #12
 80004d6:	19bb      	adds	r3, r7, r6
 80004d8:	4a19      	ldr	r2, [pc, #100]	@ (8000540 <capTouch_readChannels+0x84>)
 80004da:	7812      	ldrb	r2, [r2, #0]
 80004dc:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6818      	ldr	r0, [r3, #0]
 80004e2:	000d      	movs	r5, r1
 80004e4:	187c      	adds	r4, r7, r1
 80004e6:	19ba      	adds	r2, r7, r6
 80004e8:	2301      	movs	r3, #1
 80004ea:	425b      	negs	r3, r3
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	2136      	movs	r1, #54	@ 0x36
 80004f2:	f002 fa27 	bl	8002944 <HAL_I2C_Master_Transmit>
 80004f6:	0003      	movs	r3, r0
 80004f8:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80004fa:	197b      	adds	r3, r7, r5
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d002      	beq.n	8000508 <capTouch_readChannels+0x4c>
		return halRet;
 8000502:	197b      	adds	r3, r7, r5
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	e017      	b.n	8000538 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6818      	ldr	r0, [r3, #0]
 800050c:	250f      	movs	r5, #15
 800050e:	197c      	adds	r4, r7, r5
 8000510:	260e      	movs	r6, #14
 8000512:	19ba      	adds	r2, r7, r6
 8000514:	2301      	movs	r3, #1
 8000516:	425b      	negs	r3, r3
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	2136      	movs	r1, #54	@ 0x36
 800051e:	f002 fb3b 	bl	8002b98 <HAL_I2C_Master_Receive>
 8000522:	0003      	movs	r3, r0
 8000524:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 8000526:	19bb      	adds	r3, r7, r6
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	227f      	movs	r2, #127	@ 0x7f
 800052c:	4013      	ands	r3, r2
 800052e:	b2da      	uxtb	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	741a      	strb	r2, [r3, #16]

	return halRet;
 8000534:	197b      	adds	r3, r7, r5
 8000536:	781b      	ldrb	r3, [r3, #0]

}
 8000538:	0018      	movs	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	b005      	add	sp, #20
 800053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000540:	08005d28 	.word	0x08005d28

08000544 <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	b08b      	sub	sp, #44	@ 0x2c
 8000548:	af02      	add	r7, sp, #8
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	000a      	movs	r2, r1
 800054e:	1cfb      	adds	r3, r7, #3
 8000550:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000552:	241e      	movs	r4, #30
 8000554:	193b      	adds	r3, r7, r4
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800055a:	2314      	movs	r3, #20
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	4a39      	ldr	r2, [pc, #228]	@ (8000644 <capTouch_enableKeys+0x100>)
 8000560:	6811      	ldr	r1, [r2, #0]
 8000562:	6019      	str	r1, [r3, #0]
 8000564:	8891      	ldrh	r1, [r2, #4]
 8000566:	8099      	strh	r1, [r3, #4]
 8000568:	7992      	ldrb	r2, [r2, #6]
 800056a:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 800056c:	260c      	movs	r6, #12
 800056e:	19bb      	adds	r3, r7, r6
 8000570:	4a35      	ldr	r2, [pc, #212]	@ (8000648 <capTouch_enableKeys+0x104>)
 8000572:	6811      	ldr	r1, [r2, #0]
 8000574:	6019      	str	r1, [r3, #0]
 8000576:	8891      	ldrh	r1, [r2, #4]
 8000578:	8099      	strh	r1, [r3, #4]
 800057a:	7992      	ldrb	r2, [r2, #6]
 800057c:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6818      	ldr	r0, [r3, #0]
 8000582:	0025      	movs	r5, r4
 8000584:	193c      	adds	r4, r7, r4
 8000586:	19ba      	adds	r2, r7, r6
 8000588:	2301      	movs	r3, #1
 800058a:	425b      	negs	r3, r3
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	2136      	movs	r1, #54	@ 0x36
 8000592:	f002 f9d7 	bl	8002944 <HAL_I2C_Master_Transmit>
 8000596:	0003      	movs	r3, r0
 8000598:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800059a:	197b      	adds	r3, r7, r5
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d002      	beq.n	80005a8 <capTouch_enableKeys+0x64>
		return halRet;
 80005a2:	197b      	adds	r3, r7, r5
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	e049      	b.n	800063c <capTouch_enableKeys+0xf8>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6818      	ldr	r0, [r3, #0]
 80005ac:	251e      	movs	r5, #30
 80005ae:	197c      	adds	r4, r7, r5
 80005b0:	2314      	movs	r3, #20
 80005b2:	18fa      	adds	r2, r7, r3
 80005b4:	2301      	movs	r3, #1
 80005b6:	425b      	negs	r3, r3
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2307      	movs	r3, #7
 80005bc:	2136      	movs	r1, #54	@ 0x36
 80005be:	f002 faeb 	bl	8002b98 <HAL_I2C_Master_Receive>
 80005c2:	0003      	movs	r3, r0
 80005c4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80005c6:	197b      	adds	r3, r7, r5
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <capTouch_enableKeys+0x90>
		return halRet;
 80005ce:	197b      	adds	r3, r7, r5
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	e033      	b.n	800063c <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80005d4:	231f      	movs	r3, #31
 80005d6:	18fb      	adds	r3, r7, r3
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e01c      	b.n	8000618 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 80005de:	201f      	movs	r0, #31
 80005e0:	183b      	adds	r3, r7, r0
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2414      	movs	r4, #20
 80005e6:	193a      	adds	r2, r7, r4
 80005e8:	5cd3      	ldrb	r3, [r2, r3]
 80005ea:	089b      	lsrs	r3, r3, #2
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	1cfb      	adds	r3, r7, #3
 80005f0:	7819      	ldrb	r1, [r3, #0]
 80005f2:	183b      	adds	r3, r7, r0
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	4119      	asrs	r1, r3
 80005f8:	000b      	movs	r3, r1
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2101      	movs	r1, #1
 80005fe:	400b      	ands	r3, r1
 8000600:	b2d9      	uxtb	r1, r3
 8000602:	183b      	adds	r3, r7, r0
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	434a      	muls	r2, r1
 8000608:	b2d1      	uxtb	r1, r2
 800060a:	193a      	adds	r2, r7, r4
 800060c:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 800060e:	183b      	adds	r3, r7, r0
 8000610:	781a      	ldrb	r2, [r3, #0]
 8000612:	183b      	adds	r3, r7, r0
 8000614:	3201      	adds	r2, #1
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	231f      	movs	r3, #31
 800061a:	18fb      	adds	r3, r7, r3
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b06      	cmp	r3, #6
 8000620:	d9dd      	bls.n	80005de <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 8000622:	251e      	movs	r5, #30
 8000624:	197c      	adds	r4, r7, r5
 8000626:	2314      	movs	r3, #20
 8000628:	18fa      	adds	r2, r7, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f000 f80c 	bl	800064c <capTouch_SetAveragingFactor>
 8000634:	0003      	movs	r3, r0
 8000636:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000638:	197b      	adds	r3, r7, r5
 800063a:	781b      	ldrb	r3, [r3, #0]

}
 800063c:	0018      	movs	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	b009      	add	sp, #36	@ 0x24
 8000642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000644:	08005d2c 	.word	0x08005d2c
 8000648:	08005d34 	.word	0x08005d34

0800064c <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 800064c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064e:	b08b      	sub	sp, #44	@ 0x2c
 8000650:	af02      	add	r7, sp, #8
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000656:	241e      	movs	r4, #30
 8000658:	193b      	adds	r3, r7, r4
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800065e:	2314      	movs	r3, #20
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	4a5d      	ldr	r2, [pc, #372]	@ (80007d8 <capTouch_SetAveragingFactor+0x18c>)
 8000664:	6811      	ldr	r1, [r2, #0]
 8000666:	6019      	str	r1, [r3, #0]
 8000668:	8891      	ldrh	r1, [r2, #4]
 800066a:	8099      	strh	r1, [r3, #4]
 800066c:	7992      	ldrb	r2, [r2, #6]
 800066e:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000670:	260c      	movs	r6, #12
 8000672:	19bb      	adds	r3, r7, r6
 8000674:	4a59      	ldr	r2, [pc, #356]	@ (80007dc <capTouch_SetAveragingFactor+0x190>)
 8000676:	6811      	ldr	r1, [r2, #0]
 8000678:	6019      	str	r1, [r3, #0]
 800067a:	8891      	ldrh	r1, [r2, #4]
 800067c:	8099      	strh	r1, [r3, #4]
 800067e:	7992      	ldrb	r2, [r2, #6]
 8000680:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6818      	ldr	r0, [r3, #0]
 8000686:	0025      	movs	r5, r4
 8000688:	193c      	adds	r4, r7, r4
 800068a:	19ba      	adds	r2, r7, r6
 800068c:	2301      	movs	r3, #1
 800068e:	425b      	negs	r3, r3
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	2136      	movs	r1, #54	@ 0x36
 8000696:	f002 f955 	bl	8002944 <HAL_I2C_Master_Transmit>
 800069a:	0003      	movs	r3, r0
 800069c:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800069e:	197b      	adds	r3, r7, r5
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d002      	beq.n	80006ac <capTouch_SetAveragingFactor+0x60>
		return halRet;
 80006a6:	197b      	adds	r3, r7, r5
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	e090      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6818      	ldr	r0, [r3, #0]
 80006b0:	251e      	movs	r5, #30
 80006b2:	197c      	adds	r4, r7, r5
 80006b4:	2314      	movs	r3, #20
 80006b6:	18fa      	adds	r2, r7, r3
 80006b8:	2301      	movs	r3, #1
 80006ba:	425b      	negs	r3, r3
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2307      	movs	r3, #7
 80006c0:	2136      	movs	r1, #54	@ 0x36
 80006c2:	f002 fa69 	bl	8002b98 <HAL_I2C_Master_Receive>
 80006c6:	0003      	movs	r3, r0
 80006c8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80006ca:	197b      	adds	r3, r7, r5
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d002      	beq.n	80006d8 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 80006d2:	197b      	adds	r3, r7, r5
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	e07a      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 80006d8:	2308      	movs	r3, #8
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	2200      	movs	r2, #0
 80006de:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 80006e0:	231d      	movs	r3, #29
 80006e2:	18fb      	adds	r3, r7, r3
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80006e8:	231f      	movs	r3, #31
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
 80006f0:	e041      	b.n	8000776 <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80006f2:	241f      	movs	r4, #31
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2214      	movs	r2, #20
 80006fa:	18ba      	adds	r2, r7, r2
 80006fc:	5cd2      	ldrb	r2, [r2, r3]
 80006fe:	201d      	movs	r0, #29
 8000700:	183b      	adds	r3, r7, r0
 8000702:	2103      	movs	r1, #3
 8000704:	400a      	ands	r2, r1
 8000706:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 8000708:	193b      	adds	r3, r7, r4
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	18d3      	adds	r3, r2, r3
 8000710:	781a      	ldrb	r2, [r3, #0]
 8000712:	251c      	movs	r5, #28
 8000714:	197b      	adds	r3, r7, r5
 8000716:	0092      	lsls	r2, r2, #2
 8000718:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 800071a:	183b      	adds	r3, r7, r0
 800071c:	1839      	adds	r1, r7, r0
 800071e:	197a      	adds	r2, r7, r5
 8000720:	7809      	ldrb	r1, [r1, #0]
 8000722:	7812      	ldrb	r2, [r2, #0]
 8000724:	430a      	orrs	r2, r1
 8000726:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 8000728:	193b      	adds	r3, r7, r4
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	220c      	movs	r2, #12
 800072e:	18ba      	adds	r2, r7, r2
 8000730:	5cd2      	ldrb	r2, [r2, r3]
 8000732:	2108      	movs	r1, #8
 8000734:	187b      	adds	r3, r7, r1
 8000736:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	183a      	adds	r2, r7, r0
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6818      	ldr	r0, [r3, #0]
 8000744:	251e      	movs	r5, #30
 8000746:	197c      	adds	r4, r7, r5
 8000748:	187a      	adds	r2, r7, r1
 800074a:	2301      	movs	r3, #1
 800074c:	425b      	negs	r3, r3
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2302      	movs	r3, #2
 8000752:	2136      	movs	r1, #54	@ 0x36
 8000754:	f002 f8f6 	bl	8002944 <HAL_I2C_Master_Transmit>
 8000758:	0003      	movs	r3, r0
 800075a:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 800075c:	197b      	adds	r3, r7, r5
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 8000764:	197b      	adds	r3, r7, r5
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	e031      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 800076a:	211f      	movs	r1, #31
 800076c:	187b      	adds	r3, r7, r1
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	187b      	adds	r3, r7, r1
 8000772:	3201      	adds	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	231f      	movs	r3, #31
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b06      	cmp	r3, #6
 800077e:	d9b8      	bls.n	80006f2 <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	251e      	movs	r5, #30
 8000786:	197c      	adds	r4, r7, r5
 8000788:	230c      	movs	r3, #12
 800078a:	18fa      	adds	r2, r7, r3
 800078c:	2301      	movs	r3, #1
 800078e:	425b      	negs	r3, r3
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	2136      	movs	r1, #54	@ 0x36
 8000796:	f002 f8d5 	bl	8002944 <HAL_I2C_Master_Transmit>
 800079a:	0003      	movs	r3, r0
 800079c:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800079e:	197b      	adds	r3, r7, r5
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <capTouch_SetAveragingFactor+0x160>
		return halRet;
 80007a6:	197b      	adds	r3, r7, r5
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	e010      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	251e      	movs	r5, #30
 80007b2:	197c      	adds	r4, r7, r5
 80007b4:	2314      	movs	r3, #20
 80007b6:	18fa      	adds	r2, r7, r3
 80007b8:	2301      	movs	r3, #1
 80007ba:	425b      	negs	r3, r3
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2307      	movs	r3, #7
 80007c0:	2136      	movs	r1, #54	@ 0x36
 80007c2:	f002 f9e9 	bl	8002b98 <HAL_I2C_Master_Receive>
 80007c6:	0003      	movs	r3, r0
 80007c8:	7023      	strb	r3, [r4, #0]

	return halRet;
 80007ca:	197b      	adds	r3, r7, r5
 80007cc:	781b      	ldrb	r3, [r3, #0]

}
 80007ce:	0018      	movs	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b009      	add	sp, #36	@ 0x24
 80007d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	08005d2c 	.word	0x08005d2c
 80007dc:	08005d34 	.word	0x08005d34

080007e0 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 80007e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e2:	b08b      	sub	sp, #44	@ 0x2c
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80007ea:	231e      	movs	r3, #30
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80007f2:	2314      	movs	r3, #20
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	4a31      	ldr	r2, [pc, #196]	@ (80008bc <capTouch_SetDetectionIntegrator+0xdc>)
 80007f8:	6811      	ldr	r1, [r2, #0]
 80007fa:	6019      	str	r1, [r3, #0]
 80007fc:	8891      	ldrh	r1, [r2, #4]
 80007fe:	8099      	strh	r1, [r3, #4]
 8000800:	7992      	ldrb	r2, [r2, #6]
 8000802:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 8000804:	2310      	movs	r3, #16
 8000806:	18fb      	adds	r3, r7, r3
 8000808:	2200      	movs	r2, #0
 800080a:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800080c:	231f      	movs	r3, #31
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
 8000814:	e022      	b.n	800085c <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 8000816:	251f      	movs	r5, #31
 8000818:	197b      	adds	r3, r7, r5
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2214      	movs	r2, #20
 800081e:	18ba      	adds	r2, r7, r2
 8000820:	5cd2      	ldrb	r2, [r2, r3]
 8000822:	2110      	movs	r1, #16
 8000824:	187b      	adds	r3, r7, r1
 8000826:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 8000828:	197b      	adds	r3, r7, r5
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	18d3      	adds	r3, r2, r3
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	187b      	adds	r3, r7, r1
 8000834:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6818      	ldr	r0, [r3, #0]
 800083a:	231e      	movs	r3, #30
 800083c:	18fc      	adds	r4, r7, r3
 800083e:	187a      	adds	r2, r7, r1
 8000840:	2301      	movs	r3, #1
 8000842:	425b      	negs	r3, r3
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2302      	movs	r3, #2
 8000848:	2136      	movs	r1, #54	@ 0x36
 800084a:	f002 f87b 	bl	8002944 <HAL_I2C_Master_Transmit>
 800084e:	0003      	movs	r3, r0
 8000850:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 8000852:	197b      	adds	r3, r7, r5
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	197b      	adds	r3, r7, r5
 8000858:	3201      	adds	r2, #1
 800085a:	701a      	strb	r2, [r3, #0]
 800085c:	231f      	movs	r3, #31
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b06      	cmp	r3, #6
 8000864:	d9d7      	bls.n	8000816 <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000866:	2608      	movs	r6, #8
 8000868:	19bb      	adds	r3, r7, r6
 800086a:	4a15      	ldr	r2, [pc, #84]	@ (80008c0 <capTouch_SetDetectionIntegrator+0xe0>)
 800086c:	6811      	ldr	r1, [r2, #0]
 800086e:	6019      	str	r1, [r3, #0]
 8000870:	8891      	ldrh	r1, [r2, #4]
 8000872:	8099      	strh	r1, [r3, #4]
 8000874:	7992      	ldrb	r2, [r2, #6]
 8000876:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	251e      	movs	r5, #30
 800087e:	197c      	adds	r4, r7, r5
 8000880:	2314      	movs	r3, #20
 8000882:	18fa      	adds	r2, r7, r3
 8000884:	2301      	movs	r3, #1
 8000886:	425b      	negs	r3, r3
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2301      	movs	r3, #1
 800088c:	2136      	movs	r1, #54	@ 0x36
 800088e:	f002 f859 	bl	8002944 <HAL_I2C_Master_Transmit>
 8000892:	0003      	movs	r3, r0
 8000894:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6818      	ldr	r0, [r3, #0]
 800089a:	197c      	adds	r4, r7, r5
 800089c:	19ba      	adds	r2, r7, r6
 800089e:	2301      	movs	r3, #1
 80008a0:	425b      	negs	r3, r3
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2307      	movs	r3, #7
 80008a6:	2136      	movs	r1, #54	@ 0x36
 80008a8:	f002 f976 	bl	8002b98 <HAL_I2C_Master_Receive>
 80008ac:	0003      	movs	r3, r0
 80008ae:	7023      	strb	r3, [r4, #0]

	return halRet;
 80008b0:	197b      	adds	r3, r7, r5
 80008b2:	781b      	ldrb	r3, [r3, #0]

}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b009      	add	sp, #36	@ 0x24
 80008ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008bc:	08005d3c 	.word	0x08005d3c
 80008c0:	08005d2c 	.word	0x08005d2c

080008c4 <initRTCTime>:
 */

#include "../Inc/alarm.h"


void initRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80008c4:	b5b0      	push	{r4, r5, r7, lr}
 80008c6:	b09a      	sub	sp, #104	@ 0x68
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]

	currTime->Hours = 1;				// Initialize current RTC time to default values
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
	currTime->Minutes = 00;
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	2200      	movs	r2, #0
 80008da:	705a      	strb	r2, [r3, #1]
	currTime->Seconds = 00;
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	2200      	movs	r2, #0
 80008e0:	709a      	strb	r2, [r3, #2]
	currTime->TimeFormat = RTC_HOURFORMAT12_AM;			//This is initially in the A.M., so P.M. LED is off.
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	2200      	movs	r2, #0
 80008e6:	70da      	strb	r2, [r3, #3]

	currDate->Year = 0;					// Initialize current RTC date to default values
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2200      	movs	r2, #0
 80008ec:	70da      	strb	r2, [r3, #3]
	currDate->Month = RTC_MONTH_JANUARY;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2201      	movs	r2, #1
 80008f2:	705a      	strb	r2, [r3, #1]
	currDate->Date = 0;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	709a      	strb	r2, [r3, #2]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008fa:	2567      	movs	r5, #103	@ 0x67
 80008fc:	197b      	adds	r3, r7, r5
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
	halRet = HAL_RTC_SetTime(hrtc, currTime, RTCTimeFormat);
 8000902:	197c      	adds	r4, r7, r5
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2200      	movs	r2, #0
 800090a:	0018      	movs	r0, r3
 800090c:	f003 fd4e 	bl	80043ac <HAL_RTC_SetTime>
 8000910:	0003      	movs	r3, r0
 8000912:	7023      	strb	r3, [r4, #0]
	halRet = HAL_RTC_SetDate(hrtc, currDate, RTCTimeFormat);
 8000914:	197c      	adds	r4, r7, r5
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2200      	movs	r2, #0
 800091c:	0018      	movs	r0, r3
 800091e:	f003 fe49 	bl	80045b4 <HAL_RTC_SetDate>
 8000922:	0003      	movs	r3, r0
 8000924:	7023      	strb	r3, [r4, #0]
//	}
//	else {
//		printf("Error defaulting RTC time.\n\r");
//	}

	RTC_AlarmTypeDef internalAlarm_init = {0};
 8000926:	243c      	movs	r4, #60	@ 0x3c
 8000928:	193b      	adds	r3, r7, r4
 800092a:	0018      	movs	r0, r3
 800092c:	2328      	movs	r3, #40	@ 0x28
 800092e:	001a      	movs	r2, r3
 8000930:	2100      	movs	r1, #0
 8000932:	f005 f9b3 	bl	8005c9c <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	781a      	ldrb	r2, [r3, #0]
 800093a:	0021      	movs	r1, r4
 800093c:	187b      	adds	r3, r7, r1
 800093e:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	785b      	ldrb	r3, [r3, #1]
 8000944:	3301      	adds	r3, #1
 8000946:	b2da      	uxtb	r2, r3
 8000948:	187b      	adds	r3, r7, r1
 800094a:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	789a      	ldrb	r2, [r3, #2]
 8000950:	187b      	adds	r3, r7, r1
 8000952:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	685a      	ldr	r2, [r3, #4]
 8000958:	187b      	adds	r3, r7, r1
 800095a:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	78da      	ldrb	r2, [r3, #3]
 8000960:	187b      	adds	r3, r7, r1
 8000962:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	78da      	ldrb	r2, [r3, #3]
 8000968:	187b      	adds	r3, r7, r1
 800096a:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800096c:	0008      	movs	r0, r1
 800096e:	183b      	adds	r3, r7, r0
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000974:	183b      	adds	r3, r7, r0
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 800097a:	183b      	adds	r3, r7, r0
 800097c:	4a14      	ldr	r2, [pc, #80]	@ (80009d0 <initRTCTime+0x10c>)
 800097e:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000980:	183b      	adds	r3, r7, r0
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000986:	183b      	adds	r3, r7, r0
 8000988:	2200      	movs	r2, #0
 800098a:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 800098c:	183b      	adds	r3, r7, r0
 800098e:	2220      	movs	r2, #32
 8000990:	2101      	movs	r1, #1
 8000992:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 8000994:	0001      	movs	r1, r0
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2280      	movs	r2, #128	@ 0x80
 800099a:	0052      	lsls	r2, r2, #1
 800099c:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 800099e:	197c      	adds	r4, r7, r5
 80009a0:	1879      	adds	r1, r7, r1
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2200      	movs	r2, #0
 80009a6:	0018      	movs	r0, r3
 80009a8:	f003 fee4 	bl	8004774 <HAL_RTC_SetAlarm_IT>
 80009ac:	0003      	movs	r3, r0
 80009ae:	7023      	strb	r3, [r4, #0]

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 80009b0:	197c      	adds	r4, r7, r5
 80009b2:	2380      	movs	r3, #128	@ 0x80
 80009b4:	005a      	lsls	r2, r3, #1
 80009b6:	2314      	movs	r3, #20
 80009b8:	18f9      	adds	r1, r7, r3
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	2300      	movs	r3, #0
 80009be:	f004 f819 	bl	80049f4 <HAL_RTC_GetAlarm>
 80009c2:	0003      	movs	r3, r0
 80009c4:	7023      	strb	r3, [r4, #0]
//	if(halRet == HAL_OK) {
//		printf("Internal alarm A defaulted to %u:%u:%u.\n\r", internalAlarm_initTest.AlarmTime.Hours,
//				internalAlarm_initTest.AlarmTime.Minutes, internalAlarm_initTest.AlarmTime.Seconds);
//	}

}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b01a      	add	sp, #104	@ 0x68
 80009cc:	bdb0      	pop	{r4, r5, r7, pc}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	80800080 	.word	0x80800080

080009d4 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2200      	movs	r2, #0
 80009e6:	0018      	movs	r0, r3
 80009e8:	f003 fd88 	bl	80044fc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2200      	movs	r2, #0
 80009f2:	0018      	movs	r0, r3
 80009f4:	f003 fe70 	bl	80046d8 <HAL_RTC_GetDate>

}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b004      	add	sp, #16
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a02:	b08d      	sub	sp, #52	@ 0x34
 8000a04:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f001 fba5 	bl	8002154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 f8eb 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f000 fad7 	bl	8000fc0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000a12:	f000 f99b 	bl	8000d4c <MX_RTC_Init>
  MX_I2C1_Init();
 8000a16:	f000 f959 	bl	8000ccc <MX_I2C1_Init>
  MX_TIM14_Init();
 8000a1a:	f000 faab 	bl	8000f74 <MX_TIM14_Init>
  MX_TIM2_Init();
 8000a1e:	f000 fa49 	bl	8000eb4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Set Smooth Calibration Value
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000a22:	2380      	movs	r3, #128	@ 0x80
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	485e      	ldr	r0, [pc, #376]	@ (8000ba0 <main+0x1a0>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	0019      	movs	r1, r3
 8000a2c:	f001 fe77 	bl	800271e <HAL_GPIO_WritePin>
  HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 8000a30:	4b5c      	ldr	r3, [pc, #368]	@ (8000ba4 <main+0x1a4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2280      	movs	r2, #128	@ 0x80
 8000a36:	01d1      	lsls	r1, r2, #7
 8000a38:	485b      	ldr	r0, [pc, #364]	@ (8000ba8 <main+0x1a8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f004 f9cf 	bl	8004dde <HAL_RTCEx_SetSmoothCalib>
    							RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a40:	2380      	movs	r3, #128	@ 0x80
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4856      	ldr	r0, [pc, #344]	@ (8000ba0 <main+0x1a0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	0019      	movs	r1, r3
 8000a4a:	f001 fe68 	bl	800271e <HAL_GPIO_WritePin>


  uint8_t initRet = 0;
 8000a4e:	2317      	movs	r3, #23
 8000a50:	18fb      	adds	r3, r7, r3
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]

  initRTCTime(&hrtc, &currTime, &currDate);
 8000a56:	4a55      	ldr	r2, [pc, #340]	@ (8000bac <main+0x1ac>)
 8000a58:	4955      	ldr	r1, [pc, #340]	@ (8000bb0 <main+0x1b0>)
 8000a5a:	4b53      	ldr	r3, [pc, #332]	@ (8000ba8 <main+0x1a8>)
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f7ff ff31 	bl	80008c4 <initRTCTime>

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000a62:	2380      	movs	r3, #128	@ 0x80
 8000a64:	009c      	lsls	r4, r3, #2
 8000a66:	2380      	movs	r3, #128	@ 0x80
 8000a68:	00dd      	lsls	r5, r3, #3
 8000a6a:	2680      	movs	r6, #128	@ 0x80
 8000a6c:	2240      	movs	r2, #64	@ 0x40
 8000a6e:	4694      	mov	ip, r2
 8000a70:	2380      	movs	r3, #128	@ 0x80
 8000a72:	011a      	lsls	r2, r3, #4
 8000a74:	4b4f      	ldr	r3, [pc, #316]	@ (8000bb4 <main+0x1b4>)
 8000a76:	6819      	ldr	r1, [r3, #0]
 8000a78:	4b4f      	ldr	r3, [pc, #316]	@ (8000bb8 <main+0x1b8>)
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	4b4f      	ldr	r3, [pc, #316]	@ (8000bbc <main+0x1bc>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	9304      	str	r3, [sp, #16]
 8000a82:	9003      	str	r0, [sp, #12]
 8000a84:	9102      	str	r1, [sp, #8]
 8000a86:	4b4e      	ldr	r3, [pc, #312]	@ (8000bc0 <main+0x1c0>)
 8000a88:	9301      	str	r3, [sp, #4]
 8000a8a:	9200      	str	r2, [sp, #0]
 8000a8c:	4663      	mov	r3, ip
 8000a8e:	0032      	movs	r2, r6
 8000a90:	0029      	movs	r1, r5
 8000a92:	0020      	movs	r0, r4
 8000a94:	f000 ff7a 	bl	800198c <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);


	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 8000a98:	2216      	movs	r2, #22
 8000a9a:	18bc      	adds	r4, r7, r2
 8000a9c:	f000 fb72 	bl	8001184 <updateAndDisplayTime>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	7023      	strb	r3, [r4, #0]

    /*
     * Initialize capacitive touch sensor
     */

    initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 8000aa4:	4b43      	ldr	r3, [pc, #268]	@ (8000bb4 <main+0x1b4>)
 8000aa6:	681d      	ldr	r5, [r3, #0]
 8000aa8:	2380      	movs	r3, #128	@ 0x80
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	4a45      	ldr	r2, [pc, #276]	@ (8000bc4 <main+0x1c4>)
 8000aae:	7812      	ldrb	r2, [r2, #0]
 8000ab0:	2117      	movs	r1, #23
 8000ab2:	187c      	adds	r4, r7, r1
 8000ab4:	4e44      	ldr	r6, [pc, #272]	@ (8000bc8 <main+0x1c8>)
 8000ab6:	4945      	ldr	r1, [pc, #276]	@ (8000bcc <main+0x1cc>)
 8000ab8:	4845      	ldr	r0, [pc, #276]	@ (8000bd0 <main+0x1d0>)
 8000aba:	9201      	str	r2, [sp, #4]
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	0033      	movs	r3, r6
 8000ac0:	002a      	movs	r2, r5
 8000ac2:	f7ff fbab 	bl	800021c <capTouch_Init>
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	7023      	strb	r3, [r4, #0]
    						&capTouchResetPort, capTouchResetPin, capTouchChannels);

    if(initRet != 0) {
 8000aca:	2117      	movs	r1, #23
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <main+0xd8>
    	dispError();
 8000ad4:	f000 ff12 	bl	80018fc <dispError>
    }

    // Max. out averaging factor
    uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 8000ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8000bd4 <main+0x1d4>)
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	210c      	movs	r1, #12
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	701a      	strb	r2, [r3, #0]
 8000ae2:	4b3c      	ldr	r3, [pc, #240]	@ (8000bd4 <main+0x1d4>)
 8000ae4:	781a      	ldrb	r2, [r3, #0]
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	705a      	strb	r2, [r3, #1]
 8000aea:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd4 <main+0x1d4>)
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	709a      	strb	r2, [r3, #2]
 8000af2:	4b38      	ldr	r3, [pc, #224]	@ (8000bd4 <main+0x1d4>)
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	70da      	strb	r2, [r3, #3]
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2200      	movs	r2, #0
 8000afe:	711a      	strb	r2, [r3, #4]
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2200      	movs	r2, #0
 8000b04:	715a      	strb	r2, [r3, #5]
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2200      	movs	r2, #0
 8000b0a:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000b0c:	2516      	movs	r5, #22
 8000b0e:	197c      	adds	r4, r7, r5
 8000b10:	187a      	adds	r2, r7, r1
 8000b12:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd0 <main+0x1d0>)
 8000b14:	0011      	movs	r1, r2
 8000b16:	0018      	movs	r0, r3
 8000b18:	f7ff fd98 	bl	800064c <capTouch_SetAveragingFactor>
 8000b1c:	0003      	movs	r3, r0
 8000b1e:	7023      	strb	r3, [r4, #0]

    if(halRet != HAL_OK) {
 8000b20:	197b      	adds	r3, r7, r5
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <main+0x12c>
    	dispError();
 8000b28:	f000 fee8 	bl	80018fc <dispError>
    }

    // Set detection integration factors
    uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd8 <main+0x1d8>)
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	701a      	strb	r2, [r3, #0]
 8000b34:	4b28      	ldr	r3, [pc, #160]	@ (8000bd8 <main+0x1d8>)
 8000b36:	781a      	ldrb	r2, [r3, #0]
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	705a      	strb	r2, [r3, #1]
 8000b3c:	4b26      	ldr	r3, [pc, #152]	@ (8000bd8 <main+0x1d8>)
 8000b3e:	781a      	ldrb	r2, [r3, #0]
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	709a      	strb	r2, [r3, #2]
 8000b44:	4b24      	ldr	r3, [pc, #144]	@ (8000bd8 <main+0x1d8>)
 8000b46:	781a      	ldrb	r2, [r3, #0]
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	70da      	strb	r2, [r3, #3]
 8000b4c:	4b22      	ldr	r3, [pc, #136]	@ (8000bd8 <main+0x1d8>)
 8000b4e:	781a      	ldrb	r2, [r3, #0]
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	711a      	strb	r2, [r3, #4]
 8000b54:	4b20      	ldr	r3, [pc, #128]	@ (8000bd8 <main+0x1d8>)
 8000b56:	781a      	ldrb	r2, [r3, #0]
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	715a      	strb	r2, [r3, #5]
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd8 <main+0x1d8>)
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 8000b64:	2516      	movs	r5, #22
 8000b66:	197c      	adds	r4, r7, r5
 8000b68:	1d3a      	adds	r2, r7, #4
 8000b6a:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <main+0x1d0>)
 8000b6c:	0011      	movs	r1, r2
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f7ff fe36 	bl	80007e0 <capTouch_SetDetectionIntegrator>
 8000b74:	0003      	movs	r3, r0
 8000b76:	7023      	strb	r3, [r4, #0]
    if(halRet != HAL_OK) {
 8000b78:	197b      	adds	r3, r7, r5
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <main+0x184>
    	dispError();
 8000b80:	f000 febc 	bl	80018fc <dispError>
    }

    userAlarmToggle = false;			//Default to off
 8000b84:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <main+0x1dc>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]

    // User alarm default value
    userAlarmTime.Hours = 1;
 8000b8a:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <main+0x1e0>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
    userAlarmTime.Minutes = 1;
 8000b90:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <main+0x1e0>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	705a      	strb	r2, [r3, #1]
    userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000b96:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <main+0x1e0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	70da      	strb	r2, [r3, #3]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	e7fd      	b.n	8000b9c <main+0x19c>
 8000ba0:	50000400 	.word	0x50000400
 8000ba4:	2000002c 	.word	0x2000002c
 8000ba8:	20000100 	.word	0x20000100
 8000bac:	20000094 	.word	0x20000094
 8000bb0:	20000080 	.word	0x20000080
 8000bb4:	20000034 	.word	0x20000034
 8000bb8:	20000038 	.word	0x20000038
 8000bbc:	20000030 	.word	0x20000030
 8000bc0:	20000014 	.word	0x20000014
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000004 	.word	0x20000004
 8000bcc:	200000ac 	.word	0x200000ac
 8000bd0:	200001c8 	.word	0x200001c8
 8000bd4:	20000009 	.word	0x20000009
 8000bd8:	2000000a 	.word	0x2000000a
 8000bdc:	2000007d 	.word	0x2000007d
 8000be0:	20000098 	.word	0x20000098

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b093      	sub	sp, #76	@ 0x4c
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	2410      	movs	r4, #16
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	0018      	movs	r0, r3
 8000bf0:	2338      	movs	r3, #56	@ 0x38
 8000bf2:	001a      	movs	r2, r3
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	f005 f851 	bl	8005c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfa:	003b      	movs	r3, r7
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	2310      	movs	r3, #16
 8000c00:	001a      	movs	r2, r3
 8000c02:	2100      	movs	r1, #0
 8000c04:	f005 f84a 	bl	8005c9c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c08:	2380      	movs	r3, #128	@ 0x80
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f002 fc55 	bl	80034bc <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c12:	f002 fc35 	bl	8003480 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 8000c16:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc8 <SystemClock_Config+0xe4>)
 8000c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c1a:	2218      	movs	r2, #24
 8000c1c:	4393      	bics	r3, r2
 8000c1e:	001a      	movs	r2, r3
 8000c20:	4b29      	ldr	r3, [pc, #164]	@ (8000cc8 <SystemClock_Config+0xe4>)
 8000c22:	2108      	movs	r1, #8
 8000c24:	430a      	orrs	r2, r1
 8000c26:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	220e      	movs	r2, #14
 8000c2c:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	2201      	movs	r2, #1
 8000c32:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c34:	193b      	adds	r3, r7, r4
 8000c36:	2280      	movs	r2, #128	@ 0x80
 8000c38:	0052      	lsls	r2, r2, #1
 8000c3a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000c3c:	0021      	movs	r1, r4
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2240      	movs	r2, #64	@ 0x40
 8000c48:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2202      	movs	r2, #2
 8000c54:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2202      	movs	r2, #2
 8000c5a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2208      	movs	r2, #8
 8000c66:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2280      	movs	r2, #128	@ 0x80
 8000c6c:	0292      	lsls	r2, r2, #10
 8000c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	2280      	movs	r2, #128	@ 0x80
 8000c74:	0492      	lsls	r2, r2, #18
 8000c76:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	2280      	movs	r2, #128	@ 0x80
 8000c7c:	0592      	lsls	r2, r2, #22
 8000c7e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	0018      	movs	r0, r3
 8000c84:	f002 fc5a 	bl	800353c <HAL_RCC_OscConfig>
 8000c88:	1e03      	subs	r3, r0, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c8c:	f000 fe78 	bl	8001980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c90:	003b      	movs	r3, r7
 8000c92:	2207      	movs	r2, #7
 8000c94:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c96:	003b      	movs	r3, r7
 8000c98:	2202      	movs	r2, #2
 8000c9a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9c:	003b      	movs	r3, r7
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca2:	003b      	movs	r3, r7
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca8:	003b      	movs	r3, r7
 8000caa:	2102      	movs	r1, #2
 8000cac:	0018      	movs	r0, r3
 8000cae:	f002 ff5f 	bl	8003b70 <HAL_RCC_ClockConfig>
 8000cb2:	1e03      	subs	r3, r0, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000cb6:	f000 fe63 	bl	8001980 <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f003 fa5c 	bl	8004178 <HAL_RCCEx_EnableLSCO>
}
 8000cc0:	46c0      	nop			@ (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b013      	add	sp, #76	@ 0x4c
 8000cc6:	bd90      	pop	{r4, r7, pc}
 8000cc8:	40021000 	.word	0x40021000

08000ccc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d44 <MX_I2C1_Init+0x78>)
 8000cd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d48 <MX_I2C1_Init+0x7c>)
 8000cda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ce2:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cee:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d06:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f001 fd75 	bl	80027f8 <HAL_I2C_Init>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d001      	beq.n	8000d16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d12:	f000 fe35 	bl	8001980 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d16:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000d18:	2100      	movs	r1, #0
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f002 fb18 	bl	8003350 <HAL_I2CEx_ConfigAnalogFilter>
 8000d20:	1e03      	subs	r3, r0, #0
 8000d22:	d001      	beq.n	8000d28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d24:	f000 fe2c 	bl	8001980 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <MX_I2C1_Init+0x74>)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f002 fb5b 	bl	80033e8 <HAL_I2CEx_ConfigDigitalFilter>
 8000d32:	1e03      	subs	r3, r0, #0
 8000d34:	d001      	beq.n	8000d3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d36:	f000 fe23 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d3a:	46c0      	nop			@ (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200000ac 	.word	0x200000ac
 8000d44:	40005400 	.word	0x40005400
 8000d48:	00602173 	.word	0x00602173

08000d4c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b090      	sub	sp, #64	@ 0x40
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d52:	232c      	movs	r3, #44	@ 0x2c
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	0018      	movs	r0, r3
 8000d58:	2314      	movs	r3, #20
 8000d5a:	001a      	movs	r2, r3
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	f004 ff9d 	bl	8005c9c <memset>
  RTC_DateTypeDef sDate = {0};
 8000d62:	2328      	movs	r3, #40	@ 0x28
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000d6a:	003b      	movs	r3, r7
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	2328      	movs	r3, #40	@ 0x28
 8000d70:	001a      	movs	r2, r3
 8000d72:	2100      	movs	r1, #0
 8000d74:	f004 ff92 	bl	8005c9c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d78:	4b4b      	ldr	r3, [pc, #300]	@ (8000ea8 <MX_RTC_Init+0x15c>)
 8000d7a:	4a4c      	ldr	r2, [pc, #304]	@ (8000eac <MX_RTC_Init+0x160>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8000ea8 <MX_RTC_Init+0x15c>)
 8000d80:	2240      	movs	r2, #64	@ 0x40
 8000d82:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000d84:	4b48      	ldr	r3, [pc, #288]	@ (8000ea8 <MX_RTC_Init+0x15c>)
 8000d86:	227f      	movs	r2, #127	@ 0x7f
 8000d88:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000d8a:	4b47      	ldr	r3, [pc, #284]	@ (8000ea8 <MX_RTC_Init+0x15c>)
 8000d8c:	22ff      	movs	r2, #255	@ 0xff
 8000d8e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d90:	4b45      	ldr	r3, [pc, #276]	@ (8000ea8 <MX_RTC_Init+0x15c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d96:	4b44      	ldr	r3, [pc, #272]	@ (8000ea8 <MX_RTC_Init+0x15c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d9c:	4b42      	ldr	r3, [pc, #264]	@ (8000ea8 <MX_RTC_Init+0x15c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000da2:	4b41      	ldr	r3, [pc, #260]	@ (8000ea8 <MX_RTC_Init+0x15c>)
 8000da4:	2280      	movs	r2, #128	@ 0x80
 8000da6:	05d2      	lsls	r2, r2, #23
 8000da8:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000daa:	4b3f      	ldr	r3, [pc, #252]	@ (8000ea8 <MX_RTC_Init+0x15c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000db0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ea8 <MX_RTC_Init+0x15c>)
 8000db2:	0018      	movs	r0, r3
 8000db4:	f003 fa58 	bl	8004268 <HAL_RTC_Init>
 8000db8:	1e03      	subs	r3, r0, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000dbc:	f000 fde0 	bl	8001980 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000dc0:	212c      	movs	r1, #44	@ 0x2c
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2200      	movs	r2, #0
 8000dcc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2200      	movs	r2, #0
 8000dde:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	4b2e      	ldr	r3, [pc, #184]	@ (8000ea8 <MX_RTC_Init+0x15c>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	0018      	movs	r0, r3
 8000df4:	f003 fada 	bl	80043ac <HAL_RTC_SetTime>
 8000df8:	1e03      	subs	r3, r0, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000dfc:	f000 fdc0 	bl	8001980 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e00:	2128      	movs	r1, #40	@ 0x28
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2201      	movs	r2, #1
 8000e12:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2200      	movs	r2, #0
 8000e18:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e1a:	1879      	adds	r1, r7, r1
 8000e1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ea8 <MX_RTC_Init+0x15c>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	0018      	movs	r0, r3
 8000e22:	f003 fbc7 	bl	80045b4 <HAL_RTC_SetDate>
 8000e26:	1e03      	subs	r3, r0, #0
 8000e28:	d001      	beq.n	8000e2e <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 8000e2a:	f000 fda9 	bl	8001980 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000e2e:	003b      	movs	r3, r7
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000e34:	003b      	movs	r3, r7
 8000e36:	2201      	movs	r2, #1
 8000e38:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000e3a:	003b      	movs	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000e40:	003b      	movs	r3, r7
 8000e42:	2200      	movs	r2, #0
 8000e44:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000e46:	003b      	movs	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e4c:	003b      	movs	r3, r7
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e52:	003b      	movs	r3, r7
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000e58:	003b      	movs	r3, r7
 8000e5a:	4a15      	ldr	r2, [pc, #84]	@ (8000eb0 <MX_RTC_Init+0x164>)
 8000e5c:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000e5e:	003b      	movs	r3, r7
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000e64:	003b      	movs	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000e6a:	003b      	movs	r3, r7
 8000e6c:	2220      	movs	r2, #32
 8000e6e:	2101      	movs	r1, #1
 8000e70:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000e72:	003b      	movs	r3, r7
 8000e74:	2280      	movs	r2, #128	@ 0x80
 8000e76:	0052      	lsls	r2, r2, #1
 8000e78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e7a:	0039      	movs	r1, r7
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <MX_RTC_Init+0x15c>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	0018      	movs	r0, r3
 8000e82:	f003 fc77 	bl	8004774 <HAL_RTC_SetAlarm_IT>
 8000e86:	1e03      	subs	r3, r0, #0
 8000e88:	d001      	beq.n	8000e8e <MX_RTC_Init+0x142>
  {
    Error_Handler();
 8000e8a:	f000 fd79 	bl	8001980 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000e8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <MX_RTC_Init+0x15c>)
 8000e90:	2100      	movs	r1, #0
 8000e92:	0018      	movs	r0, r3
 8000e94:	f004 f806 	bl	8004ea4 <HAL_RTCEx_SetCalibrationOutPut>
 8000e98:	1e03      	subs	r3, r0, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_RTC_Init+0x154>
  {
    Error_Handler();
 8000e9c:	f000 fd70 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ea0:	46c0      	nop			@ (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b010      	add	sp, #64	@ 0x40
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000100 	.word	0x20000100
 8000eac:	40002800 	.word	0x40002800
 8000eb0:	80800080 	.word	0x80800080

08000eb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	@ 0x28
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eba:	231c      	movs	r3, #28
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	230c      	movs	r3, #12
 8000ec2:	001a      	movs	r2, r3
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	f004 fee9 	bl	8005c9c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eca:	003b      	movs	r3, r7
 8000ecc:	0018      	movs	r0, r3
 8000ece:	231c      	movs	r3, #28
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	f004 fee2 	bl	8005c9c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ed8:	4b24      	ldr	r3, [pc, #144]	@ (8000f6c <MX_TIM2_Init+0xb8>)
 8000eda:	2280      	movs	r2, #128	@ 0x80
 8000edc:	05d2      	lsls	r2, r2, #23
 8000ede:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8000ee0:	4b22      	ldr	r3, [pc, #136]	@ (8000f6c <MX_TIM2_Init+0xb8>)
 8000ee2:	4a23      	ldr	r2, [pc, #140]	@ (8000f70 <MX_TIM2_Init+0xbc>)
 8000ee4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	@ (8000f6c <MX_TIM2_Init+0xb8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	@ (8000f6c <MX_TIM2_Init+0xb8>)
 8000eee:	2263      	movs	r2, #99	@ 0x63
 8000ef0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <MX_TIM2_Init+0xb8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <MX_TIM2_Init+0xb8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000efe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <MX_TIM2_Init+0xb8>)
 8000f00:	0018      	movs	r0, r3
 8000f02:	f004 f8e9 	bl	80050d8 <HAL_TIM_PWM_Init>
 8000f06:	1e03      	subs	r3, r0, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000f0a:	f000 fd39 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0e:	211c      	movs	r1, #28
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f1c:	187a      	adds	r2, r7, r1
 8000f1e:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <MX_TIM2_Init+0xb8>)
 8000f20:	0011      	movs	r1, r2
 8000f22:	0018      	movs	r0, r3
 8000f24:	f004 fe52 	bl	8005bcc <HAL_TIMEx_MasterConfigSynchronization>
 8000f28:	1e03      	subs	r3, r0, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000f2c:	f000 fd28 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f30:	003b      	movs	r3, r7
 8000f32:	2260      	movs	r2, #96	@ 0x60
 8000f34:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f36:	003b      	movs	r3, r7
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f3c:	003b      	movs	r3, r7
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f42:	003b      	movs	r3, r7
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f48:	0039      	movs	r1, r7
 8000f4a:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <MX_TIM2_Init+0xb8>)
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f004 f9f8 	bl	8005344 <HAL_TIM_PWM_ConfigChannel>
 8000f54:	1e03      	subs	r3, r0, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000f58:	f000 fd12 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f5c:	4b03      	ldr	r3, [pc, #12]	@ (8000f6c <MX_TIM2_Init+0xb8>)
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f001 f842 	bl	8001fe8 <HAL_TIM_MspPostInit>

}
 8000f64:	46c0      	nop			@ (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b00a      	add	sp, #40	@ 0x28
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000012c 	.word	0x2000012c
 8000f70:	0000031f 	.word	0x0000031f

08000f74 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f78:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <MX_TIM14_Init+0x40>)
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb8 <MX_TIM14_Init+0x44>)
 8000f7c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb4 <MX_TIM14_Init+0x40>)
 8000f80:	22f4      	movs	r2, #244	@ 0xf4
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb4 <MX_TIM14_Init+0x40>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <MX_TIM14_Init+0x40>)
 8000f8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000fbc <MX_TIM14_Init+0x48>)
 8000f90:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f92:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <MX_TIM14_Init+0x40>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <MX_TIM14_Init+0x40>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f9e:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <MX_TIM14_Init+0x40>)
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f003 ffcf 	bl	8004f44 <HAL_TIM_Base_Init>
 8000fa6:	1e03      	subs	r3, r0, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000faa:	f000 fce9 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000178 	.word	0x20000178
 8000fb8:	40002000 	.word	0x40002000
 8000fbc:	0000ffff 	.word	0x0000ffff

08000fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b08b      	sub	sp, #44	@ 0x2c
 8000fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	2414      	movs	r4, #20
 8000fc8:	193b      	adds	r3, r7, r4
 8000fca:	0018      	movs	r0, r3
 8000fcc:	2314      	movs	r3, #20
 8000fce:	001a      	movs	r2, r3
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	f004 fe63 	bl	8005c9c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd6:	4b66      	ldr	r3, [pc, #408]	@ (8001170 <MX_GPIO_Init+0x1b0>)
 8000fd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fda:	4b65      	ldr	r3, [pc, #404]	@ (8001170 <MX_GPIO_Init+0x1b0>)
 8000fdc:	2104      	movs	r1, #4
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fe2:	4b63      	ldr	r3, [pc, #396]	@ (8001170 <MX_GPIO_Init+0x1b0>)
 8000fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b60      	ldr	r3, [pc, #384]	@ (8001170 <MX_GPIO_Init+0x1b0>)
 8000ff0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8001170 <MX_GPIO_Init+0x1b0>)
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ffa:	4b5d      	ldr	r3, [pc, #372]	@ (8001170 <MX_GPIO_Init+0x1b0>)
 8000ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ffe:	2201      	movs	r2, #1
 8001000:	4013      	ands	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001006:	4b5a      	ldr	r3, [pc, #360]	@ (8001170 <MX_GPIO_Init+0x1b0>)
 8001008:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800100a:	4b59      	ldr	r3, [pc, #356]	@ (8001170 <MX_GPIO_Init+0x1b0>)
 800100c:	2108      	movs	r1, #8
 800100e:	430a      	orrs	r2, r1
 8001010:	635a      	str	r2, [r3, #52]	@ 0x34
 8001012:	4b57      	ldr	r3, [pc, #348]	@ (8001170 <MX_GPIO_Init+0x1b0>)
 8001014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001016:	2208      	movs	r2, #8
 8001018:	4013      	ands	r3, r2
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	4b54      	ldr	r3, [pc, #336]	@ (8001170 <MX_GPIO_Init+0x1b0>)
 8001020:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001022:	4b53      	ldr	r3, [pc, #332]	@ (8001170 <MX_GPIO_Init+0x1b0>)
 8001024:	2102      	movs	r1, #2
 8001026:	430a      	orrs	r2, r1
 8001028:	635a      	str	r2, [r3, #52]	@ 0x34
 800102a:	4b51      	ldr	r3, [pc, #324]	@ (8001170 <MX_GPIO_Init+0x1b0>)
 800102c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800102e:	2202      	movs	r2, #2
 8001030:	4013      	ands	r3, r2
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8001036:	494f      	ldr	r1, [pc, #316]	@ (8001174 <MX_GPIO_Init+0x1b4>)
 8001038:	23a0      	movs	r3, #160	@ 0xa0
 800103a:	05db      	lsls	r3, r3, #23
 800103c:	2200      	movs	r2, #0
 800103e:	0018      	movs	r0, r3
 8001040:	f001 fb6d 	bl	800271e <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8001044:	4b4c      	ldr	r3, [pc, #304]	@ (8001178 <MX_GPIO_Init+0x1b8>)
 8001046:	2200      	movs	r2, #0
 8001048:	2180      	movs	r1, #128	@ 0x80
 800104a:	0018      	movs	r0, r3
 800104c:	f001 fb67 	bl	800271e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_RST_GPIO_Port, CTOUCH_RST_Pin, GPIO_PIN_RESET);
 8001050:	2380      	movs	r3, #128	@ 0x80
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4849      	ldr	r0, [pc, #292]	@ (800117c <MX_GPIO_Init+0x1bc>)
 8001056:	2200      	movs	r2, #0
 8001058:	0019      	movs	r1, r3
 800105a:	f001 fb60 	bl	800271e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin BUZZER_OUT_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin
                           SHIFT_MCLR_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 800105e:	193b      	adds	r3, r7, r4
 8001060:	4a44      	ldr	r2, [pc, #272]	@ (8001174 <MX_GPIO_Init+0x1b4>)
 8001062:	601a      	str	r2, [r3, #0]
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	193b      	adds	r3, r7, r4
 8001066:	2201      	movs	r2, #1
 8001068:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	193b      	adds	r3, r7, r4
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	193b      	adds	r3, r7, r4
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	193a      	adds	r2, r7, r4
 8001078:	23a0      	movs	r3, #160	@ 0xa0
 800107a:	05db      	lsls	r3, r3, #23
 800107c:	0011      	movs	r1, r2
 800107e:	0018      	movs	r0, r3
 8001080:	f001 f9cc 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001084:	193b      	adds	r3, r7, r4
 8001086:	2204      	movs	r2, #4
 8001088:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108a:	193b      	adds	r3, r7, r4
 800108c:	2203      	movs	r2, #3
 800108e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	193b      	adds	r3, r7, r4
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	193a      	adds	r2, r7, r4
 8001098:	23a0      	movs	r3, #160	@ 0xa0
 800109a:	05db      	lsls	r3, r3, #23
 800109c:	0011      	movs	r1, r2
 800109e:	0018      	movs	r0, r3
 80010a0:	f001 f9bc 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 80010a4:	193b      	adds	r3, r7, r4
 80010a6:	2280      	movs	r2, #128	@ 0x80
 80010a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	193b      	adds	r3, r7, r4
 80010ac:	2201      	movs	r2, #1
 80010ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	193b      	adds	r3, r7, r4
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 80010bc:	193b      	adds	r3, r7, r4
 80010be:	4a2e      	ldr	r2, [pc, #184]	@ (8001178 <MX_GPIO_Init+0x1b8>)
 80010c0:	0019      	movs	r1, r3
 80010c2:	0010      	movs	r0, r2
 80010c4:	f001 f9aa 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	2280      	movs	r2, #128	@ 0x80
 80010cc:	0212      	lsls	r2, r2, #8
 80010ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010d0:	193b      	adds	r3, r7, r4
 80010d2:	2284      	movs	r2, #132	@ 0x84
 80010d4:	0392      	lsls	r2, r2, #14
 80010d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d8:	193b      	adds	r3, r7, r4
 80010da:	2201      	movs	r2, #1
 80010dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80010de:	193a      	adds	r2, r7, r4
 80010e0:	23a0      	movs	r3, #160	@ 0xa0
 80010e2:	05db      	lsls	r3, r3, #23
 80010e4:	0011      	movs	r1, r2
 80010e6:	0018      	movs	r0, r3
 80010e8:	f001 f998 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 80010ec:	0021      	movs	r1, r4
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	220f      	movs	r2, #15
 80010f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	2284      	movs	r2, #132	@ 0x84
 80010f8:	0392      	lsls	r2, r2, #14
 80010fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	2201      	movs	r2, #1
 8001100:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001102:	000c      	movs	r4, r1
 8001104:	187b      	adds	r3, r7, r1
 8001106:	4a1e      	ldr	r2, [pc, #120]	@ (8001180 <MX_GPIO_Init+0x1c0>)
 8001108:	0019      	movs	r1, r3
 800110a:	0010      	movs	r0, r2
 800110c:	f001 f986 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_RST_Pin */
  GPIO_InitStruct.Pin = CTOUCH_RST_Pin;
 8001110:	0021      	movs	r1, r4
 8001112:	187b      	adds	r3, r7, r1
 8001114:	2280      	movs	r2, #128	@ 0x80
 8001116:	0052      	lsls	r2, r2, #1
 8001118:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	187b      	adds	r3, r7, r1
 800111c:	2201      	movs	r2, #1
 800111e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	187b      	adds	r3, r7, r1
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	187b      	adds	r3, r7, r1
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 800112c:	187b      	adds	r3, r7, r1
 800112e:	4a13      	ldr	r2, [pc, #76]	@ (800117c <MX_GPIO_Init+0x1bc>)
 8001130:	0019      	movs	r1, r3
 8001132:	0010      	movs	r0, r2
 8001134:	f001 f972 	bl	800241c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	2005      	movs	r0, #5
 800113e:	f001 f93b 	bl	80023b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001142:	2005      	movs	r0, #5
 8001144:	f001 f94d 	bl	80023e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	2100      	movs	r1, #0
 800114c:	2006      	movs	r0, #6
 800114e:	f001 f933 	bl	80023b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001152:	2006      	movs	r0, #6
 8001154:	f001 f945 	bl	80023e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2101      	movs	r1, #1
 800115c:	2007      	movs	r0, #7
 800115e:	f001 f92b 	bl	80023b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001162:	2007      	movs	r0, #7
 8001164:	f001 f93d 	bl	80023e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001168:	46c0      	nop			@ (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	b00b      	add	sp, #44	@ 0x2c
 800116e:	bd90      	pop	{r4, r7, pc}
 8001170:	40021000 	.word	0x40021000
 8001174:	00001f01 	.word	0x00001f01
 8001178:	50000800 	.word	0x50000800
 800117c:	50000400 	.word	0x50000400
 8001180:	50000c00 	.word	0x50000c00

08001184 <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800118a:	1dfb      	adds	r3, r7, #7
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8001190:	4a07      	ldr	r2, [pc, #28]	@ (80011b0 <updateAndDisplayTime+0x2c>)
 8001192:	4908      	ldr	r1, [pc, #32]	@ (80011b4 <updateAndDisplayTime+0x30>)
 8001194:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <updateAndDisplayTime+0x34>)
 8001196:	0018      	movs	r0, r3
 8001198:	f7ff fc1c 	bl	80009d4 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <updateAndDisplayTime+0x30>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f000 fd14 	bl	8001bcc <sevSeg_updateDigits>

	return halRet;
 80011a4:	1dfb      	adds	r3, r7, #7
 80011a6:	781b      	ldrb	r3, [r3, #0]

}
 80011a8:	0018      	movs	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b002      	add	sp, #8
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000094 	.word	0x20000094
 80011b4:	20000080 	.word	0x20000080
 80011b8:	20000100 	.word	0x20000100

080011bc <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 80011c8:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <updateAndDisplayAlarm+0x20>)
 80011ca:	0018      	movs	r0, r3
 80011cc:	f000 fcfe 	bl	8001bcc <sevSeg_updateDigits>

	return halRet;
 80011d0:	1dfb      	adds	r3, r7, #7
 80011d2:	781b      	ldrb	r3, [r3, #0]

}
 80011d4:	0018      	movs	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b002      	add	sp, #8
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000098 	.word	0x20000098

080011e0 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {\
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b08d      	sub	sp, #52	@ 0x34
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

	  //printf("Enter current time minute increment interrupt\n\r");

	  RTC_AlarmTypeDef sAlarm = {0};
 80011e8:	2408      	movs	r4, #8
 80011ea:	193b      	adds	r3, r7, r4
 80011ec:	0018      	movs	r0, r3
 80011ee:	2328      	movs	r3, #40	@ 0x28
 80011f0:	001a      	movs	r2, r3
 80011f2:	2100      	movs	r1, #0
 80011f4:	f004 fd52 	bl	8005c9c <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 80011f8:	2380      	movs	r3, #128	@ 0x80
 80011fa:	005a      	lsls	r2, r3, #1
 80011fc:	1939      	adds	r1, r7, r4
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	2300      	movs	r3, #0
 8001202:	f003 fbf7 	bl	80049f4 <HAL_RTC_GetAlarm>


	  if(sAlarm.AlarmTime.Minutes>58) {
 8001206:	193b      	adds	r3, r7, r4
 8001208:	785b      	ldrb	r3, [r3, #1]
 800120a:	2b3a      	cmp	r3, #58	@ 0x3a
 800120c:	d903      	bls.n	8001216 <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 800120e:	193b      	adds	r3, r7, r4
 8001210:	2200      	movs	r2, #0
 8001212:	705a      	strb	r2, [r3, #1]
 8001214:	e00e      	b.n	8001234 <HAL_RTC_AlarmAEventCallback+0x54>
		//printf("Reset alarm time\n\r");
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8001216:	2108      	movs	r1, #8
 8001218:	187b      	adds	r3, r7, r1
 800121a:	785b      	ldrb	r3, [r3, #1]
 800121c:	3301      	adds	r3, #1
 800121e:	b2da      	uxtb	r2, r3
 8001220:	187b      	adds	r3, r7, r1
 8001222:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001224:	e006      	b.n	8001234 <HAL_RTC_AlarmAEventCallback+0x54>
			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 8001226:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <HAL_RTC_AlarmAEventCallback+0xa4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2201      	movs	r2, #1
 800122c:	0011      	movs	r1, r2
 800122e:	0018      	movs	r0, r3
 8001230:	f001 fa92 	bl	8002758 <HAL_GPIO_TogglePin>
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001234:	2308      	movs	r3, #8
 8001236:	18f9      	adds	r1, r7, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	0018      	movs	r0, r3
 800123e:	f003 fa99 	bl	8004774 <HAL_RTC_SetAlarm_IT>
 8001242:	1e03      	subs	r3, r0, #0
 8001244:	d1ef      	bne.n	8001226 <HAL_RTC_AlarmAEventCallback+0x46>
		}

	  updateAndDisplayTime();
 8001246:	f7ff ff9d 	bl	8001184 <updateAndDisplayTime>

	  //printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 800124a:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <HAL_RTC_AlarmAEventCallback+0xa8>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d013      	beq.n	800127a <HAL_RTC_AlarmAEventCallback+0x9a>
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <HAL_RTC_AlarmAEventCallback+0xac>)
 8001254:	781a      	ldrb	r2, [r3, #0]
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d10d      	bne.n	800127a <HAL_RTC_AlarmAEventCallback+0x9a>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <HAL_RTC_AlarmAEventCallback+0xac>)
 8001260:	785a      	ldrb	r2, [r3, #1]
 8001262:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8001264:	785b      	ldrb	r3, [r3, #1]
 8001266:	429a      	cmp	r2, r3
 8001268:	d107      	bne.n	800127a <HAL_RTC_AlarmAEventCallback+0x9a>
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <HAL_RTC_AlarmAEventCallback+0xac>)
 800126c:	78da      	ldrb	r2, [r3, #3]
 800126e:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8001270:	78db      	ldrb	r3, [r3, #3]
 8001272:	429a      	cmp	r2, r3
 8001274:	d101      	bne.n	800127a <HAL_RTC_AlarmAEventCallback+0x9a>
		  userAlarmBeep();
 8001276:	f000 f80d 	bl	8001294 <userAlarmBeep>
	  }


}
 800127a:	46c0      	nop			@ (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	b00d      	add	sp, #52	@ 0x34
 8001280:	bd90      	pop	{r4, r7, pc}
 8001282:	46c0      	nop			@ (mov r8, r8)
 8001284:	20000028 	.word	0x20000028
 8001288:	2000007d 	.word	0x2000007d
 800128c:	20000098 	.word	0x20000098
 8001290:	20000080 	.word	0x20000080

08001294 <userAlarmBeep>:

void userAlarmBeep() {
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 800129a:	4b37      	ldr	r3, [pc, #220]	@ (8001378 <userAlarmBeep+0xe4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	0018      	movs	r0, r3
 80012a0:	f003 fef4 	bl	800508c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 80012a4:	4b34      	ldr	r3, [pc, #208]	@ (8001378 <userAlarmBeep+0xe4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	0018      	movs	r0, r3
 80012aa:	f003 fea3 	bl	8004ff4 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80012ae:	4b32      	ldr	r3, [pc, #200]	@ (8001378 <userAlarmBeep+0xe4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b6:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 80012b8:	1cfb      	adds	r3, r7, #3
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 80012be:	f7ff ff61 	bl	8001184 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 80012c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001378 <userAlarmBeep+0xe4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	4a2b      	ldr	r2, [pc, #172]	@ (800137c <userAlarmBeep+0xe8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d922      	bls.n	800131a <userAlarmBeep+0x86>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 80012d4:	1cfb      	adds	r3, r7, #3
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4a29      	ldr	r2, [pc, #164]	@ (8001380 <userAlarmBeep+0xec>)
 80012da:	5cd3      	ldrb	r3, [r2, r3]
 80012dc:	0018      	movs	r0, r3
 80012de:	f000 fd27 	bl	8001d30 <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(buzzerPort, buzzerPin);					// Toggle Buzzer
 80012e2:	4b28      	ldr	r3, [pc, #160]	@ (8001384 <userAlarmBeep+0xf0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2280      	movs	r2, #128	@ 0x80
 80012e8:	0052      	lsls	r2, r2, #1
 80012ea:	0011      	movs	r1, r2
 80012ec:	0018      	movs	r0, r3
 80012ee:	f001 fa33 	bl	8002758 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80012f2:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <userAlarmBeep+0xe4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fa:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80012fc:	1cfb      	adds	r3, r7, #3
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	1e5a      	subs	r2, r3, #1
 8001302:	4193      	sbcs	r3, r2
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2201      	movs	r2, #1
 8001308:	4053      	eors	r3, r2
 800130a:	b2db      	uxtb	r3, r3
 800130c:	001a      	movs	r2, r3
 800130e:	1cfb      	adds	r3, r7, #3
 8001310:	701a      	strb	r2, [r3, #0]
 8001312:	781a      	ldrb	r2, [r3, #0]
 8001314:	2101      	movs	r1, #1
 8001316:	400a      	ands	r2, r1
 8001318:	701a      	strb	r2, [r3, #0]

		}


		HAL_StatusTypeDef halRet = capTouch_readChannels(&capTouch);
 800131a:	1cbc      	adds	r4, r7, #2
 800131c:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <userAlarmBeep+0xf4>)
 800131e:	0018      	movs	r0, r3
 8001320:	f7ff f8cc 	bl	80004bc <capTouch_readChannels>
 8001324:	0003      	movs	r3, r0
 8001326:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK)
 8001328:	1cbb      	adds	r3, r7, #2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <userAlarmBeep+0xa0>
			dispError();
 8001330:	f000 fae4 	bl	80018fc <dispError>

	} while(capTouch.keyStat == 0x00);
 8001334:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <userAlarmBeep+0xf4>)
 8001336:	7c1b      	ldrb	r3, [r3, #16]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0c0      	beq.n	80012be <userAlarmBeep+0x2a>

	HAL_TIM_Base_Stop(timerDelay);
 800133c:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <userAlarmBeep+0xe4>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	0018      	movs	r0, r3
 8001342:	f003 fea3 	bl	800508c <HAL_TIM_Base_Stop>
	HAL_GPIO_WritePin(buzzerPort, buzzerPin, GPIO_PIN_RESET);
 8001346:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <userAlarmBeep+0xf0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2280      	movs	r2, #128	@ 0x80
 800134c:	0051      	lsls	r1, r2, #1
 800134e:	2200      	movs	r2, #0
 8001350:	0018      	movs	r0, r3
 8001352:	f001 f9e4 	bl	800271e <HAL_GPIO_WritePin>
	updateAndDisplayTime();				// Update to current time and display
 8001356:	f7ff ff15 	bl	8001184 <updateAndDisplayTime>
	sevSeg_setIntensity(sevSeg_intensityDuty[1]);	// Toggle 0% to 50% duty cycle
 800135a:	235a      	movs	r3, #90	@ 0x5a
 800135c:	0018      	movs	r0, r3
 800135e:	f000 fce7 	bl	8001d30 <sevSeg_setIntensity>


	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 8001362:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <userAlarmBeep+0xf8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2201      	movs	r2, #1
 8001368:	0011      	movs	r1, r2
 800136a:	0018      	movs	r0, r3
 800136c:	f001 f9f4 	bl	8002758 <HAL_GPIO_TogglePin>

}
 8001370:	46c0      	nop			@ (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b003      	add	sp, #12
 8001376:	bd90      	pop	{r4, r7, pc}
 8001378:	20000034 	.word	0x20000034
 800137c:	00007ffe 	.word	0x00007ffe
 8001380:	08005d44 	.word	0x08005d44
 8001384:	20000010 	.word	0x20000010
 8001388:	200001c8 	.word	0x200001c8
 800138c:	20000028 	.word	0x20000028

08001390 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	0002      	movs	r2, r0
 8001398:	1dbb      	adds	r3, r7, #6
 800139a:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 800139c:	2208      	movs	r2, #8
 800139e:	1dbb      	adds	r3, r7, #6
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d106      	bne.n	80013b4 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 80013a6:	230f      	movs	r3, #15
 80013a8:	18fc      	adds	r4, r7, r3
 80013aa:	f000 f839 	bl	8001420 <displayButtonISR>
 80013ae:	0003      	movs	r3, r0
 80013b0:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 80013b2:	e031      	b.n	8001418 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 80013b4:	2204      	movs	r2, #4
 80013b6:	1dbb      	adds	r3, r7, #6
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d106      	bne.n	80013cc <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 80013be:	230f      	movs	r3, #15
 80013c0:	18fc      	adds	r4, r7, r3
 80013c2:	f000 f855 	bl	8001470 <alarmEnableISR>
 80013c6:	0003      	movs	r3, r0
 80013c8:	7023      	strb	r3, [r4, #0]
}
 80013ca:	e025      	b.n	8001418 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 80013cc:	2380      	movs	r3, #128	@ 0x80
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	1dba      	adds	r2, r7, #6
 80013d2:	8812      	ldrh	r2, [r2, #0]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d106      	bne.n	80013e6 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 80013d8:	230f      	movs	r3, #15
 80013da:	18fc      	adds	r4, r7, r3
 80013dc:	f000 f87c 	bl	80014d8 <alarmSetISR>
 80013e0:	0003      	movs	r3, r0
 80013e2:	7023      	strb	r3, [r4, #0]
}
 80013e4:	e018      	b.n	8001418 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 80013e6:	2201      	movs	r2, #1
 80013e8:	1dbb      	adds	r3, r7, #6
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d106      	bne.n	80013fe <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 80013f0:	230f      	movs	r3, #15
 80013f2:	18fc      	adds	r4, r7, r3
 80013f4:	f000 f940 	bl	8001678 <hourSetISR>
 80013f8:	0003      	movs	r3, r0
 80013fa:	7023      	strb	r3, [r4, #0]
}
 80013fc:	e00c      	b.n	8001418 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 80013fe:	2202      	movs	r2, #2
 8001400:	1dbb      	adds	r3, r7, #6
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	4293      	cmp	r3, r2
 8001406:	d106      	bne.n	8001416 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 8001408:	230f      	movs	r3, #15
 800140a:	18fc      	adds	r4, r7, r3
 800140c:	f000 f960 	bl	80016d0 <minuteSetISR>
 8001410:	0003      	movs	r3, r0
 8001412:	7023      	strb	r3, [r4, #0]
}
 8001414:	e000      	b.n	8001418 <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 8001416:	46c0      	nop			@ (mov r8, r8)
}
 8001418:	46c0      	nop			@ (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	b005      	add	sp, #20
 800141e:	bd90      	pop	{r4, r7, pc}

08001420 <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 800142c:	f7ff feaa 	bl	8001184 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8001430:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <displayButtonISR+0x48>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	001a      	movs	r2, r3
 8001436:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <displayButtonISR+0x4c>)
 8001438:	5c9b      	ldrb	r3, [r3, r2]
 800143a:	0018      	movs	r0, r3
 800143c:	f000 fc78 	bl	8001d30 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8001440:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <displayButtonISR+0x48>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d903      	bls.n	8001450 <displayButtonISR+0x30>
		displayToggle = 0;
 8001448:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <displayButtonISR+0x48>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	e005      	b.n	800145c <displayButtonISR+0x3c>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 8001450:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <displayButtonISR+0x48>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b03      	ldr	r3, [pc, #12]	@ (8001468 <displayButtonISR+0x48>)
 800145a:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 800145c:	1dfb      	adds	r3, r7, #7
 800145e:	781b      	ldrb	r3, [r3, #0]

}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b002      	add	sp, #8
 8001466:	bd80      	pop	{r7, pc}
 8001468:	2000007c 	.word	0x2000007c
 800146c:	08005d44 	.word	0x08005d44

08001470 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001476:	1dfb      	adds	r3, r7, #7
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 800147c:	4b14      	ldr	r3, [pc, #80]	@ (80014d0 <alarmEnableISR+0x60>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2201      	movs	r2, #1
 8001482:	4053      	eors	r3, r2
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00b      	beq.n	80014a2 <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 800148a:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <alarmEnableISR+0x64>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2280      	movs	r2, #128	@ 0x80
 8001490:	0151      	lsls	r1, r2, #5
 8001492:	2201      	movs	r2, #1
 8001494:	0018      	movs	r0, r3
 8001496:	f001 f942 	bl	800271e <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 800149a:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <alarmEnableISR+0x60>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
 80014a0:	e010      	b.n	80014c4 <alarmEnableISR+0x54>

		//printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
								//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 80014a2:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <alarmEnableISR+0x60>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00b      	beq.n	80014c2 <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 80014aa:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <alarmEnableISR+0x64>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2280      	movs	r2, #128	@ 0x80
 80014b0:	0151      	lsls	r1, r2, #5
 80014b2:	2200      	movs	r2, #0
 80014b4:	0018      	movs	r0, r3
 80014b6:	f001 f932 	bl	800271e <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 80014ba:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <alarmEnableISR+0x60>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
 80014c0:	e000      	b.n	80014c4 <alarmEnableISR+0x54>

		//printf("User alarm disabled.\n\r");
	}
	else {
		__NOP();							//Code should never reach here.
 80014c2:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 80014c4:	1dfb      	adds	r3, r7, #7
 80014c6:	781b      	ldrb	r3, [r3, #0]

}
 80014c8:	0018      	movs	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b002      	add	sp, #8
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	2000007d 	.word	0x2000007d
 80014d4:	2000000c 	.word	0x2000000c

080014d8 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
	//printf("Enter user alarm set ISR.\n\r");

	//printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
			//userAlarmTime.Minutes, userAlarmTime.Seconds);

	HAL_StatusTypeDef halRet = HAL_OK;
 80014de:	1cbb      	adds	r3, r7, #2
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for switch debounce
	 */

	// First wait for button to deactivate again
	while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_SET);
 80014e4:	46c0      	nop			@ (mov r8, r8)
 80014e6:	4b60      	ldr	r3, [pc, #384]	@ (8001668 <alarmSetISR+0x190>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2280      	movs	r2, #128	@ 0x80
 80014ec:	0212      	lsls	r2, r2, #8
 80014ee:	0011      	movs	r1, r2
 80014f0:	0018      	movs	r0, r3
 80014f2:	f001 f8f7 	bl	80026e4 <HAL_GPIO_ReadPin>
 80014f6:	0003      	movs	r3, r0
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d1f4      	bne.n	80014e6 <alarmSetISR+0xe>

	// Go through debounce
	HAL_TIM_Base_Stop(timerDelay);
 80014fc:	4b5b      	ldr	r3, [pc, #364]	@ (800166c <alarmSetISR+0x194>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	0018      	movs	r0, r3
 8001502:	f003 fdc3 	bl	800508c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001506:	4b59      	ldr	r3, [pc, #356]	@ (800166c <alarmSetISR+0x194>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	0018      	movs	r0, r3
 800150c:	f003 fd72 	bl	8004ff4 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001510:	4b56      	ldr	r3, [pc, #344]	@ (800166c <alarmSetISR+0x194>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001518:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 8));
 800151a:	4b54      	ldr	r3, [pc, #336]	@ (800166c <alarmSetISR+0x194>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	1ad2      	subs	r2, r2, r3
 8001526:	2380      	movs	r3, #128	@ 0x80
 8001528:	019b      	lsls	r3, r3, #6
 800152a:	429a      	cmp	r2, r3
 800152c:	d9f5      	bls.n	800151a <alarmSetISR+0x42>


	/*
	 *  Poll for 1 second to see if the alarm set button is pressed again
	 */
	HAL_TIM_Base_Stop(timerDelay);
 800152e:	4b4f      	ldr	r3, [pc, #316]	@ (800166c <alarmSetISR+0x194>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	0018      	movs	r0, r3
 8001534:	f003 fdaa 	bl	800508c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001538:	4b4c      	ldr	r3, [pc, #304]	@ (800166c <alarmSetISR+0x194>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	0018      	movs	r0, r3
 800153e:	f003 fd59 	bl	8004ff4 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001542:	4b4a      	ldr	r3, [pc, #296]	@ (800166c <alarmSetISR+0x194>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154a:	607b      	str	r3, [r7, #4]

	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 800154c:	e00d      	b.n	800156a <alarmSetISR+0x92>

		if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 800154e:	4b46      	ldr	r3, [pc, #280]	@ (8001668 <alarmSetISR+0x190>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	0212      	lsls	r2, r2, #8
 8001556:	0011      	movs	r1, r2
 8001558:	0018      	movs	r0, r3
 800155a:	f001 f8c3 	bl	80026e4 <HAL_GPIO_ReadPin>
 800155e:	1e03      	subs	r3, r0, #0
 8001560:	d103      	bne.n	800156a <alarmSetISR+0x92>
			alarmSetMode = true;
 8001562:	4b43      	ldr	r3, [pc, #268]	@ (8001670 <alarmSetISR+0x198>)
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
//			HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
			break;
 8001568:	e009      	b.n	800157e <alarmSetISR+0xa6>
	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 800156a:	4b40      	ldr	r3, [pc, #256]	@ (800166c <alarmSetISR+0x194>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	1ad2      	subs	r2, r2, r3
 8001576:	2380      	movs	r3, #128	@ 0x80
 8001578:	025b      	lsls	r3, r3, #9
 800157a:	429a      	cmp	r2, r3
 800157c:	d9e7      	bls.n	800154e <alarmSetISR+0x76>
		}

	}

	// Go through debounce once again
	HAL_TIM_Base_Stop(timerDelay);
 800157e:	4b3b      	ldr	r3, [pc, #236]	@ (800166c <alarmSetISR+0x194>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	0018      	movs	r0, r3
 8001584:	f003 fd82 	bl	800508c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001588:	4b38      	ldr	r3, [pc, #224]	@ (800166c <alarmSetISR+0x194>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	0018      	movs	r0, r3
 800158e:	f003 fd31 	bl	8004ff4 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001592:	4b36      	ldr	r3, [pc, #216]	@ (800166c <alarmSetISR+0x194>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159a:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 4));
 800159c:	4b33      	ldr	r3, [pc, #204]	@ (800166c <alarmSetISR+0x194>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	1ad2      	subs	r2, r2, r3
 80015a8:	2380      	movs	r3, #128	@ 0x80
 80015aa:	01db      	lsls	r3, r3, #7
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d9f5      	bls.n	800159c <alarmSetISR+0xc4>
	/*
	 * Then, if we are in alarm set mode, go through the
	 * alarm set process until the button is pressed again
	 */

	HAL_TIM_Base_Stop(timerDelay);
 80015b0:	4b2e      	ldr	r3, [pc, #184]	@ (800166c <alarmSetISR+0x194>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	0018      	movs	r0, r3
 80015b6:	f003 fd69 	bl	800508c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80015ba:	4b2c      	ldr	r3, [pc, #176]	@ (800166c <alarmSetISR+0x194>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	0018      	movs	r0, r3
 80015c0:	f003 fd18 	bl	8004ff4 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80015c4:	4b29      	ldr	r3, [pc, #164]	@ (800166c <alarmSetISR+0x194>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015cc:	607b      	str	r3, [r7, #4]

	if(alarmSetMode) {
 80015ce:	4b28      	ldr	r3, [pc, #160]	@ (8001670 <alarmSetISR+0x198>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d03e      	beq.n	8001654 <alarmSetISR+0x17c>

		bool displayBlink = false;
 80015d6:	1cfb      	adds	r3, r7, #3
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			updateAndDisplayAlarm();
 80015dc:	f7ff fdee 	bl	80011bc <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 80015e0:	4b22      	ldr	r3, [pc, #136]	@ (800166c <alarmSetISR+0x194>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	1ad2      	subs	r2, r2, r3
 80015ec:	2380      	movs	r3, #128	@ 0x80
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d31a      	bcc.n	800162a <alarmSetISR+0x152>

//				HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 80015f4:	1cfb      	adds	r3, r7, #3
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4a1e      	ldr	r2, [pc, #120]	@ (8001674 <alarmSetISR+0x19c>)
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	0018      	movs	r0, r3
 80015fe:	f000 fb97 	bl	8001d30 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 8001602:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <alarmSetISR+0x194>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160a:	607b      	str	r3, [r7, #4]
				displayBlink = !displayBlink;
 800160c:	1cfb      	adds	r3, r7, #3
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	1e5a      	subs	r2, r3, #1
 8001612:	4193      	sbcs	r3, r2
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2201      	movs	r2, #1
 8001618:	4053      	eors	r3, r2
 800161a:	b2db      	uxtb	r3, r3
 800161c:	001a      	movs	r2, r3
 800161e:	1cfb      	adds	r3, r7, #3
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	781a      	ldrb	r2, [r3, #0]
 8001624:	2101      	movs	r1, #1
 8001626:	400a      	ands	r2, r1
 8001628:	701a      	strb	r2, [r3, #0]

			}

		}while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET);
 800162a:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <alarmSetISR+0x190>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2280      	movs	r2, #128	@ 0x80
 8001630:	0212      	lsls	r2, r2, #8
 8001632:	0011      	movs	r1, r2
 8001634:	0018      	movs	r0, r3
 8001636:	f001 f855 	bl	80026e4 <HAL_GPIO_ReadPin>
 800163a:	1e03      	subs	r3, r0, #0
 800163c:	d1ce      	bne.n	80015dc <alarmSetISR+0x104>

//		HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_RESET);

		sevSeg_setIntensity(sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 800163e:	235a      	movs	r3, #90	@ 0x5a
 8001640:	0018      	movs	r0, r3
 8001642:	f000 fb75 	bl	8001d30 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <alarmSetISR+0x194>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	0018      	movs	r0, r3
 800164c:	f003 fd1e 	bl	800508c <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8001650:	f7ff fd98 	bl	8001184 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <alarmSetISR+0x198>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 800165a:	1cbb      	adds	r3, r7, #2
 800165c:	781b      	ldrb	r3, [r3, #0]

}
 800165e:	0018      	movs	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	b002      	add	sp, #8
 8001664:	bd80      	pop	{r7, pc}
 8001666:	46c0      	nop			@ (mov r8, r8)
 8001668:	20000000 	.word	0x20000000
 800166c:	20000034 	.word	0x20000034
 8001670:	200001c4 	.word	0x200001c4
 8001674:	08005d44 	.word	0x08005d44

08001678 <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

//	printf("Entered hour set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);


	HAL_StatusTypeDef halRet = HAL_OK;
 800167e:	1dfb      	adds	r3, r7, #7
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001684:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <hourSetISR+0x48>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <hourSetISR+0x1a>

		alarmHourInc();
 800168c:	f000 f87c 	bl	8001788 <alarmHourInc>
 8001690:	e00f      	b.n	80016b2 <hourSetISR+0x3a>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 8001692:	f000 f8a7 	bl	80017e4 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001696:	490b      	ldr	r1, [pc, #44]	@ (80016c4 <hourSetISR+0x4c>)
 8001698:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <hourSetISR+0x50>)
 800169a:	2200      	movs	r2, #0
 800169c:	0018      	movs	r0, r3
 800169e:	f002 fe85 	bl	80043ac <HAL_RTC_SetTime>


		updateAndDisplayTime();
 80016a2:	f7ff fd6f 	bl	8001184 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80016a6:	4a09      	ldr	r2, [pc, #36]	@ (80016cc <hourSetISR+0x54>)
 80016a8:	4906      	ldr	r1, [pc, #24]	@ (80016c4 <hourSetISR+0x4c>)
 80016aa:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <hourSetISR+0x50>)
 80016ac:	0018      	movs	r0, r3
 80016ae:	f7ff f991 	bl	80009d4 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 80016b2:	1dfb      	adds	r3, r7, #7
 80016b4:	781b      	ldrb	r3, [r3, #0]

}
 80016b6:	0018      	movs	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b002      	add	sp, #8
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	200001c4 	.word	0x200001c4
 80016c4:	20000080 	.word	0x20000080
 80016c8:	20000100 	.word	0x20000100
 80016cc:	20000094 	.word	0x20000094

080016d0 <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08c      	sub	sp, #48	@ 0x30
 80016d4:	af00      	add	r7, sp, #0


	HAL_StatusTypeDef halRet = HAL_OK;
 80016d6:	232f      	movs	r3, #47	@ 0x2f
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80016de:	4b25      	ldr	r3, [pc, #148]	@ (8001774 <minuteSetISR+0xa4>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <minuteSetISR+0x1c>

		alarmMinuteInc();
 80016e6:	f000 f8bd 	bl	8001864 <alarmMinuteInc>
 80016ea:	e03b      	b.n	8001764 <minuteSetISR+0x94>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 80016ec:	f000 f8d8 	bl	80018a0 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80016f0:	4921      	ldr	r1, [pc, #132]	@ (8001778 <minuteSetISR+0xa8>)
 80016f2:	4b22      	ldr	r3, [pc, #136]	@ (800177c <minuteSetISR+0xac>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	0018      	movs	r0, r3
 80016f8:	f002 fe58 	bl	80043ac <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	0018      	movs	r0, r3
 8001700:	2328      	movs	r3, #40	@ 0x28
 8001702:	001a      	movs	r2, r3
 8001704:	2100      	movs	r1, #0
 8001706:	f004 fac9 	bl	8005c9c <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 800170a:	2380      	movs	r3, #128	@ 0x80
 800170c:	005a      	lsls	r2, r3, #1
 800170e:	1d39      	adds	r1, r7, #4
 8001710:	481a      	ldr	r0, [pc, #104]	@ (800177c <minuteSetISR+0xac>)
 8001712:	2300      	movs	r3, #0
 8001714:	f003 f96e 	bl	80049f4 <HAL_RTC_GetAlarm>

		if(sAlarm.AlarmTime.Minutes>58) {
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	785b      	ldrb	r3, [r3, #1]
 800171c:	2b3a      	cmp	r3, #58	@ 0x3a
 800171e:	d903      	bls.n	8001728 <minuteSetISR+0x58>
			sAlarm.AlarmTime.Minutes=0;
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2200      	movs	r2, #0
 8001724:	705a      	strb	r2, [r3, #1]
 8001726:	e00d      	b.n	8001744 <minuteSetISR+0x74>
			//printf("Reset alarm time\n\r");
		} else {
			sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	785b      	ldrb	r3, [r3, #1]
 800172c:	3301      	adds	r3, #1
 800172e:	b2da      	uxtb	r2, r3
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001734:	e006      	b.n	8001744 <minuteSetISR+0x74>
			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 8001736:	4b12      	ldr	r3, [pc, #72]	@ (8001780 <minuteSetISR+0xb0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2201      	movs	r2, #1
 800173c:	0011      	movs	r1, r2
 800173e:	0018      	movs	r0, r3
 8001740:	f001 f80a 	bl	8002758 <HAL_GPIO_TogglePin>
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001744:	1d39      	adds	r1, r7, #4
 8001746:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <minuteSetISR+0xac>)
 8001748:	2200      	movs	r2, #0
 800174a:	0018      	movs	r0, r3
 800174c:	f003 f812 	bl	8004774 <HAL_RTC_SetAlarm_IT>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d1f0      	bne.n	8001736 <minuteSetISR+0x66>
		}


		updateAndDisplayTime();
 8001754:	f7ff fd16 	bl	8001184 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001758:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <minuteSetISR+0xb4>)
 800175a:	4907      	ldr	r1, [pc, #28]	@ (8001778 <minuteSetISR+0xa8>)
 800175c:	4b07      	ldr	r3, [pc, #28]	@ (800177c <minuteSetISR+0xac>)
 800175e:	0018      	movs	r0, r3
 8001760:	f7ff f938 	bl	80009d4 <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 8001764:	232f      	movs	r3, #47	@ 0x2f
 8001766:	18fb      	adds	r3, r7, r3
 8001768:	781b      	ldrb	r3, [r3, #0]
}
 800176a:	0018      	movs	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	b00c      	add	sp, #48	@ 0x30
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			@ (mov r8, r8)
 8001774:	200001c4 	.word	0x200001c4
 8001778:	20000080 	.word	0x20000080
 800177c:	20000100 	.word	0x20000100
 8001780:	20000028 	.word	0x20000028
 8001784:	20000094 	.word	0x20000094

08001788 <alarmHourInc>:

void alarmHourInc(void) {
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 800178c:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <alarmHourInc+0x58>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b0b      	cmp	r3, #11
 8001792:	d903      	bls.n	800179c <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8001794:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <alarmHourInc+0x58>)
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 800179a:	e01e      	b.n	80017da <alarmHourInc+0x52>
	else if(userAlarmTime.Hours == 11) {
 800179c:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <alarmHourInc+0x58>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b0b      	cmp	r3, #11
 80017a2:	d10e      	bne.n	80017c2 <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80017a4:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <alarmHourInc+0x58>)
 80017a6:	78db      	ldrb	r3, [r3, #3]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d103      	bne.n	80017b4 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <alarmHourInc+0x58>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	70da      	strb	r2, [r3, #3]
 80017b2:	e002      	b.n	80017ba <alarmHourInc+0x32>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80017b4:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <alarmHourInc+0x58>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	70da      	strb	r2, [r3, #3]
		userAlarmTime.Hours = 12;
 80017ba:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <alarmHourInc+0x58>)
 80017bc:	220c      	movs	r2, #12
 80017be:	701a      	strb	r2, [r3, #0]
}
 80017c0:	e00b      	b.n	80017da <alarmHourInc+0x52>
	else if(userAlarmTime.Hours < 11) {
 80017c2:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <alarmHourInc+0x58>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b0a      	cmp	r3, #10
 80017c8:	d806      	bhi.n	80017d8 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 80017ca:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <alarmHourInc+0x58>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	3301      	adds	r3, #1
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b03      	ldr	r3, [pc, #12]	@ (80017e0 <alarmHourInc+0x58>)
 80017d4:	701a      	strb	r2, [r3, #0]
}
 80017d6:	e000      	b.n	80017da <alarmHourInc+0x52>
		__NOP();
 80017d8:	46c0      	nop			@ (mov r8, r8)
}
 80017da:	46c0      	nop			@ (mov r8, r8)
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000098 	.word	0x20000098

080017e4 <currHourInc>:

void currHourInc(void) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 80017e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001854 <currHourInc+0x70>)
 80017ea:	491b      	ldr	r1, [pc, #108]	@ (8001858 <currHourInc+0x74>)
 80017ec:	4b1b      	ldr	r3, [pc, #108]	@ (800185c <currHourInc+0x78>)
 80017ee:	0018      	movs	r0, r3
 80017f0:	f7ff f8f0 	bl	80009d4 <getRTCTime>

	if(currTime.Hours >= 12) {
 80017f4:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <currHourInc+0x74>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b0b      	cmp	r3, #11
 80017fa:	d903      	bls.n	8001804 <currHourInc+0x20>
		currTime.Hours = 1;
 80017fc:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <currHourInc+0x74>)
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
 8001802:	e01e      	b.n	8001842 <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 8001804:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <currHourInc+0x74>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b0b      	cmp	r3, #11
 800180a:	d10e      	bne.n	800182a <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <currHourInc+0x74>)
 800180e:	78db      	ldrb	r3, [r3, #3]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d103      	bne.n	800181c <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001814:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <currHourInc+0x74>)
 8001816:	2201      	movs	r2, #1
 8001818:	70da      	strb	r2, [r3, #3]
 800181a:	e002      	b.n	8001822 <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800181c:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <currHourInc+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 8001822:	4b0d      	ldr	r3, [pc, #52]	@ (8001858 <currHourInc+0x74>)
 8001824:	220c      	movs	r2, #12
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	e00b      	b.n	8001842 <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 800182a:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <currHourInc+0x7c>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b0a      	cmp	r3, #10
 8001830:	d806      	bhi.n	8001840 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 8001832:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <currHourInc+0x74>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	3301      	adds	r3, #1
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4b07      	ldr	r3, [pc, #28]	@ (8001858 <currHourInc+0x74>)
 800183c:	701a      	strb	r2, [r3, #0]
 800183e:	e000      	b.n	8001842 <currHourInc+0x5e>
	}
	else {
		__NOP();
 8001840:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001842:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <currHourInc+0x74>)
 8001844:	2200      	movs	r2, #0
 8001846:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001848:	4b03      	ldr	r3, [pc, #12]	@ (8001858 <currHourInc+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]

}
 800184e:	46c0      	nop			@ (mov r8, r8)
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000094 	.word	0x20000094
 8001858:	20000080 	.word	0x20000080
 800185c:	20000100 	.word	0x20000100
 8001860:	20000098 	.word	0x20000098

08001864 <alarmMinuteInc>:

void alarmMinuteInc(void) {
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 8001868:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <alarmMinuteInc+0x38>)
 800186a:	785b      	ldrb	r3, [r3, #1]
 800186c:	2b3a      	cmp	r3, #58	@ 0x3a
 800186e:	d905      	bls.n	800187c <alarmMinuteInc+0x18>
		alarmHourInc();
 8001870:	f7ff ff8a 	bl	8001788 <alarmHourInc>
		userAlarmTime.Minutes = 0;
 8001874:	4b09      	ldr	r3, [pc, #36]	@ (800189c <alarmMinuteInc+0x38>)
 8001876:	2200      	movs	r2, #0
 8001878:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 800187a:	e00b      	b.n	8001894 <alarmMinuteInc+0x30>
	else if(userAlarmTime.Minutes < 59) {
 800187c:	4b07      	ldr	r3, [pc, #28]	@ (800189c <alarmMinuteInc+0x38>)
 800187e:	785b      	ldrb	r3, [r3, #1]
 8001880:	2b3a      	cmp	r3, #58	@ 0x3a
 8001882:	d806      	bhi.n	8001892 <alarmMinuteInc+0x2e>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8001884:	4b05      	ldr	r3, [pc, #20]	@ (800189c <alarmMinuteInc+0x38>)
 8001886:	785b      	ldrb	r3, [r3, #1]
 8001888:	3301      	adds	r3, #1
 800188a:	b2da      	uxtb	r2, r3
 800188c:	4b03      	ldr	r3, [pc, #12]	@ (800189c <alarmMinuteInc+0x38>)
 800188e:	705a      	strb	r2, [r3, #1]
}
 8001890:	e000      	b.n	8001894 <alarmMinuteInc+0x30>
		__NOP();
 8001892:	46c0      	nop			@ (mov r8, r8)
}
 8001894:	46c0      	nop			@ (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	20000098 	.word	0x20000098

080018a0 <currMinuteInc>:

void currMinuteInc(void) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 80018a4:	4a12      	ldr	r2, [pc, #72]	@ (80018f0 <currMinuteInc+0x50>)
 80018a6:	4913      	ldr	r1, [pc, #76]	@ (80018f4 <currMinuteInc+0x54>)
 80018a8:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <currMinuteInc+0x58>)
 80018aa:	0018      	movs	r0, r3
 80018ac:	f7ff f892 	bl	80009d4 <getRTCTime>

	// If current time is going to rollover,
	// increment the hour and reset the minute.
	if(currTime.Minutes >= 59) {
 80018b0:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <currMinuteInc+0x54>)
 80018b2:	785b      	ldrb	r3, [r3, #1]
 80018b4:	2b3a      	cmp	r3, #58	@ 0x3a
 80018b6:	d905      	bls.n	80018c4 <currMinuteInc+0x24>
		currHourInc();
 80018b8:	f7ff ff94 	bl	80017e4 <currHourInc>
		currTime.Minutes = 0;
 80018bc:	4b0d      	ldr	r3, [pc, #52]	@ (80018f4 <currMinuteInc+0x54>)
 80018be:	2200      	movs	r2, #0
 80018c0:	705a      	strb	r2, [r3, #1]
 80018c2:	e00b      	b.n	80018dc <currMinuteInc+0x3c>
	}
	else if(currTime.Minutes < 59) {
 80018c4:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <currMinuteInc+0x54>)
 80018c6:	785b      	ldrb	r3, [r3, #1]
 80018c8:	2b3a      	cmp	r3, #58	@ 0x3a
 80018ca:	d806      	bhi.n	80018da <currMinuteInc+0x3a>
		currTime.Minutes = currTime.Minutes + 1;
 80018cc:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <currMinuteInc+0x54>)
 80018ce:	785b      	ldrb	r3, [r3, #1]
 80018d0:	3301      	adds	r3, #1
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <currMinuteInc+0x54>)
 80018d6:	705a      	strb	r2, [r3, #1]
 80018d8:	e000      	b.n	80018dc <currMinuteInc+0x3c>
	}
	else {
		__NOP();
 80018da:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <currMinuteInc+0x54>)
 80018de:	2200      	movs	r2, #0
 80018e0:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 80018e2:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <currMinuteInc+0x54>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]

}
 80018e8:	46c0      	nop			@ (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			@ (mov r8, r8)
 80018f0:	20000094 	.word	0x20000094
 80018f4:	20000080 	.word	0x20000080
 80018f8:	20000100 	.word	0x20000100

080018fc <dispError>:

void dispError(void) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <dispError+0x78>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	0018      	movs	r0, r3
 8001908:	f003 fbc0 	bl	800508c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 800190c:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <dispError+0x78>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	0018      	movs	r0, r3
 8001912:	f003 fb6f 	bl	8004ff4 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001916:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <dispError+0x78>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191e:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001920:	1cfb      	adds	r3, r7, #3
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001926:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <dispError+0x78>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	4a11      	ldr	r2, [pc, #68]	@ (8001978 <dispError+0x7c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d9f6      	bls.n	8001926 <dispError+0x2a>

			HAL_GPIO_TogglePin(alarmLEDPort, alarmLEDPin);
 8001938:	4b10      	ldr	r3, [pc, #64]	@ (800197c <dispError+0x80>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2280      	movs	r2, #128	@ 0x80
 800193e:	0152      	lsls	r2, r2, #5
 8001940:	0011      	movs	r1, r2
 8001942:	0018      	movs	r0, r3
 8001944:	f000 ff08 	bl	8002758 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001948:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <dispError+0x78>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001950:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001952:	1cfb      	adds	r3, r7, #3
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	1e5a      	subs	r2, r3, #1
 8001958:	4193      	sbcs	r3, r2
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2201      	movs	r2, #1
 800195e:	4053      	eors	r3, r2
 8001960:	b2db      	uxtb	r3, r3
 8001962:	001a      	movs	r2, r3
 8001964:	1cfb      	adds	r3, r7, #3
 8001966:	701a      	strb	r2, [r3, #0]
 8001968:	781a      	ldrb	r2, [r3, #0]
 800196a:	2101      	movs	r1, #1
 800196c:	400a      	ands	r2, r1
 800196e:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001970:	e7d9      	b.n	8001926 <dispError+0x2a>
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	20000034 	.word	0x20000034
 8001978:	00003ffe 	.word	0x00003ffe
 800197c:	2000000c 	.word	0x2000000c

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001984:	b672      	cpsid	i
}
 8001986:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001988:	46c0      	nop			@ (mov r8, r8)
 800198a:	e7fd      	b.n	8001988 <Error_Handler+0x8>

0800198c <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 800198c:	b5b0      	push	{r4, r5, r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	0005      	movs	r5, r0
 8001994:	000c      	movs	r4, r1
 8001996:	0010      	movs	r0, r2
 8001998:	0019      	movs	r1, r3
 800199a:	1dbb      	adds	r3, r7, #6
 800199c:	1c2a      	adds	r2, r5, #0
 800199e:	801a      	strh	r2, [r3, #0]
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	1c22      	adds	r2, r4, #0
 80019a4:	801a      	strh	r2, [r3, #0]
 80019a6:	1cbb      	adds	r3, r7, #2
 80019a8:	1c02      	adds	r2, r0, #0
 80019aa:	801a      	strh	r2, [r3, #0]
 80019ac:	003b      	movs	r3, r7
 80019ae:	1c0a      	adds	r2, r1, #0
 80019b0:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 80019b2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ba4 <sevSeg_Init+0x218>)
 80019b4:	1dba      	adds	r2, r7, #6
 80019b6:	8812      	ldrh	r2, [r2, #0]
 80019b8:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 80019ba:	4b7b      	ldr	r3, [pc, #492]	@ (8001ba8 <sevSeg_Init+0x21c>)
 80019bc:	1d3a      	adds	r2, r7, #4
 80019be:	8812      	ldrh	r2, [r2, #0]
 80019c0:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 80019c2:	4b7a      	ldr	r3, [pc, #488]	@ (8001bac <sevSeg_Init+0x220>)
 80019c4:	1cba      	adds	r2, r7, #2
 80019c6:	8812      	ldrh	r2, [r2, #0]
 80019c8:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 80019ca:	4b79      	ldr	r3, [pc, #484]	@ (8001bb0 <sevSeg_Init+0x224>)
 80019cc:	003a      	movs	r2, r7
 80019ce:	8812      	ldrh	r2, [r2, #0]
 80019d0:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 80019d2:	4a78      	ldr	r2, [pc, #480]	@ (8001bb4 <sevSeg_Init+0x228>)
 80019d4:	2330      	movs	r3, #48	@ 0x30
 80019d6:	18fb      	adds	r3, r7, r3
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 80019dc:	4a76      	ldr	r2, [pc, #472]	@ (8001bb8 <sevSeg_Init+0x22c>)
 80019de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019e0:	0010      	movs	r0, r2
 80019e2:	0019      	movs	r1, r3
 80019e4:	234c      	movs	r3, #76	@ 0x4c
 80019e6:	001a      	movs	r2, r3
 80019e8:	f004 f984 	bl	8005cf4 <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 80019ec:	4b73      	ldr	r3, [pc, #460]	@ (8001bbc <sevSeg_Init+0x230>)
 80019ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80019f0:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	e00b      	b.n	8001a10 <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019fe:	18d3      	adds	r3, r2, r3
 8001a00:	6819      	ldr	r1, [r3, #0]
 8001a02:	4b6f      	ldr	r3, [pc, #444]	@ (8001bc0 <sevSeg_Init+0x234>)
 8001a04:	69fa      	ldr	r2, [r7, #28]
 8001a06:	0092      	lsls	r2, r2, #2
 8001a08:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	ddf0      	ble.n	80019f8 <sevSeg_Init+0x6c>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001a16:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc0 <sevSeg_Init+0x234>)
 8001a18:	6918      	ldr	r0, [r3, #16]
 8001a1a:	4b66      	ldr	r3, [pc, #408]	@ (8001bb4 <sevSeg_Init+0x228>)
 8001a1c:	8819      	ldrh	r1, [r3, #0]
 8001a1e:	4b69      	ldr	r3, [pc, #420]	@ (8001bc4 <sevSeg_Init+0x238>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	001a      	movs	r2, r3
 8001a24:	f000 fe7b 	bl	800271e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001a28:	4b65      	ldr	r3, [pc, #404]	@ (8001bc0 <sevSeg_Init+0x234>)
 8001a2a:	6918      	ldr	r0, [r3, #16]
 8001a2c:	4b61      	ldr	r3, [pc, #388]	@ (8001bb4 <sevSeg_Init+0x228>)
 8001a2e:	8819      	ldrh	r1, [r3, #0]
 8001a30:	4b64      	ldr	r3, [pc, #400]	@ (8001bc4 <sevSeg_Init+0x238>)
 8001a32:	785b      	ldrb	r3, [r3, #1]
 8001a34:	001a      	movs	r2, r3
 8001a36:	f000 fe72 	bl	800271e <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001a3a:	4b61      	ldr	r3, [pc, #388]	@ (8001bc0 <sevSeg_Init+0x234>)
 8001a3c:	6898      	ldr	r0, [r3, #8]
 8001a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bac <sevSeg_Init+0x220>)
 8001a40:	8819      	ldrh	r1, [r3, #0]
 8001a42:	4b60      	ldr	r3, [pc, #384]	@ (8001bc4 <sevSeg_Init+0x238>)
 8001a44:	785b      	ldrb	r3, [r3, #1]
 8001a46:	001a      	movs	r2, r3
 8001a48:	f000 fe69 	bl	800271e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001a4c:	4b5c      	ldr	r3, [pc, #368]	@ (8001bc0 <sevSeg_Init+0x234>)
 8001a4e:	6898      	ldr	r0, [r3, #8]
 8001a50:	4b56      	ldr	r3, [pc, #344]	@ (8001bac <sevSeg_Init+0x220>)
 8001a52:	8819      	ldrh	r1, [r3, #0]
 8001a54:	4b5b      	ldr	r3, [pc, #364]	@ (8001bc4 <sevSeg_Init+0x238>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	001a      	movs	r2, r3
 8001a5a:	f000 fe60 	bl	800271e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8001a5e:	4b58      	ldr	r3, [pc, #352]	@ (8001bc0 <sevSeg_Init+0x234>)
 8001a60:	68d8      	ldr	r0, [r3, #12]
 8001a62:	4b53      	ldr	r3, [pc, #332]	@ (8001bb0 <sevSeg_Init+0x224>)
 8001a64:	8819      	ldrh	r1, [r3, #0]
 8001a66:	4b57      	ldr	r3, [pc, #348]	@ (8001bc4 <sevSeg_Init+0x238>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	001a      	movs	r2, r3
 8001a6c:	f000 fe57 	bl	800271e <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(50);
 8001a70:	2032      	movs	r0, #50	@ 0x32
 8001a72:	f000 f95d 	bl	8001d30 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8001a76:	2308      	movs	r3, #8
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	4a53      	ldr	r2, [pc, #332]	@ (8001bc8 <sevSeg_Init+0x23c>)
 8001a7c:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	e038      	b.n	8001af6 <sevSeg_Init+0x16a>

		sendByte = hofSymb[i];
 8001a84:	231b      	movs	r3, #27
 8001a86:	18fb      	adds	r3, r7, r3
 8001a88:	2208      	movs	r2, #8
 8001a8a:	18b9      	adds	r1, r7, r2
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	188a      	adds	r2, r1, r2
 8001a90:	7812      	ldrb	r2, [r2, #0]
 8001a92:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	e027      	b.n	8001aea <sevSeg_Init+0x15e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001a9a:	4b49      	ldr	r3, [pc, #292]	@ (8001bc0 <sevSeg_Init+0x234>)
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	4b41      	ldr	r3, [pc, #260]	@ (8001ba4 <sevSeg_Init+0x218>)
 8001aa0:	8819      	ldrh	r1, [r3, #0]
 8001aa2:	241b      	movs	r4, #27
 8001aa4:	193b      	adds	r3, r7, r4
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4013      	ands	r3, r2
 8001aac:	4a45      	ldr	r2, [pc, #276]	@ (8001bc4 <sevSeg_Init+0x238>)
 8001aae:	5cd3      	ldrb	r3, [r2, r3]
 8001ab0:	001a      	movs	r2, r3
 8001ab2:	f000 fe34 	bl	800271e <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001ab6:	4b42      	ldr	r3, [pc, #264]	@ (8001bc0 <sevSeg_Init+0x234>)
 8001ab8:	6858      	ldr	r0, [r3, #4]
 8001aba:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba8 <sevSeg_Init+0x21c>)
 8001abc:	8819      	ldrh	r1, [r3, #0]
 8001abe:	4b41      	ldr	r3, [pc, #260]	@ (8001bc4 <sevSeg_Init+0x238>)
 8001ac0:	785b      	ldrb	r3, [r3, #1]
 8001ac2:	001a      	movs	r2, r3
 8001ac4:	f000 fe2b 	bl	800271e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001ac8:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc0 <sevSeg_Init+0x234>)
 8001aca:	6858      	ldr	r0, [r3, #4]
 8001acc:	4b36      	ldr	r3, [pc, #216]	@ (8001ba8 <sevSeg_Init+0x21c>)
 8001ace:	8819      	ldrh	r1, [r3, #0]
 8001ad0:	4b3c      	ldr	r3, [pc, #240]	@ (8001bc4 <sevSeg_Init+0x238>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	f000 fe22 	bl	800271e <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001ada:	193b      	adds	r3, r7, r4
 8001adc:	193a      	adds	r2, r7, r4
 8001ade:	7812      	ldrb	r2, [r2, #0]
 8001ae0:	0852      	lsrs	r2, r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	2b07      	cmp	r3, #7
 8001aee:	ddd4      	ble.n	8001a9a <sevSeg_Init+0x10e>
	for(int i = 0; i <= 3; i++) {
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	3301      	adds	r3, #1
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	ddc3      	ble.n	8001a84 <sevSeg_Init+0xf8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001afc:	4b30      	ldr	r3, [pc, #192]	@ (8001bc0 <sevSeg_Init+0x234>)
 8001afe:	6898      	ldr	r0, [r3, #8]
 8001b00:	4b2a      	ldr	r3, [pc, #168]	@ (8001bac <sevSeg_Init+0x220>)
 8001b02:	8819      	ldrh	r1, [r3, #0]
 8001b04:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc4 <sevSeg_Init+0x238>)
 8001b06:	785b      	ldrb	r3, [r3, #1]
 8001b08:	001a      	movs	r2, r3
 8001b0a:	f000 fe08 	bl	800271e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc0 <sevSeg_Init+0x234>)
 8001b10:	6898      	ldr	r0, [r3, #8]
 8001b12:	4b26      	ldr	r3, [pc, #152]	@ (8001bac <sevSeg_Init+0x220>)
 8001b14:	8819      	ldrh	r1, [r3, #0]
 8001b16:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc4 <sevSeg_Init+0x238>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	001a      	movs	r2, r3
 8001b1c:	f000 fdff 	bl	800271e <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8001b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b22:	0018      	movs	r0, r3
 8001b24:	f003 fab2 	bl	800508c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8001b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f003 fa62 	bl	8004ff4 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8001b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b36:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8001b38:	46c0      	nop			@ (mov r8, r8)
 8001b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1ad2      	subs	r2, r2, r3
 8001b44:	2380      	movs	r3, #128	@ 0x80
 8001b46:	01db      	lsls	r3, r3, #7
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d3f6      	bcc.n	8001b3a <sevSeg_Init+0x1ae>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8001b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f003 fa9c 	bl	800508c <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001b54:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc0 <sevSeg_Init+0x234>)
 8001b56:	6918      	ldr	r0, [r3, #16]
 8001b58:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <sevSeg_Init+0x228>)
 8001b5a:	8819      	ldrh	r1, [r3, #0]
 8001b5c:	4b19      	ldr	r3, [pc, #100]	@ (8001bc4 <sevSeg_Init+0x238>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	001a      	movs	r2, r3
 8001b62:	f000 fddc 	bl	800271e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001b66:	4b16      	ldr	r3, [pc, #88]	@ (8001bc0 <sevSeg_Init+0x234>)
 8001b68:	6918      	ldr	r0, [r3, #16]
 8001b6a:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <sevSeg_Init+0x228>)
 8001b6c:	8819      	ldrh	r1, [r3, #0]
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <sevSeg_Init+0x238>)
 8001b70:	785b      	ldrb	r3, [r3, #1]
 8001b72:	001a      	movs	r2, r3
 8001b74:	f000 fdd3 	bl	800271e <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001b78:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <sevSeg_Init+0x234>)
 8001b7a:	6898      	ldr	r0, [r3, #8]
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <sevSeg_Init+0x220>)
 8001b7e:	8819      	ldrh	r1, [r3, #0]
 8001b80:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <sevSeg_Init+0x238>)
 8001b82:	785b      	ldrb	r3, [r3, #1]
 8001b84:	001a      	movs	r2, r3
 8001b86:	f000 fdca 	bl	800271e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc0 <sevSeg_Init+0x234>)
 8001b8c:	6898      	ldr	r0, [r3, #8]
 8001b8e:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <sevSeg_Init+0x220>)
 8001b90:	8819      	ldrh	r1, [r3, #0]
 8001b92:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <sevSeg_Init+0x238>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	001a      	movs	r2, r3
 8001b98:	f000 fdc1 	bl	800271e <HAL_GPIO_WritePin>

}
 8001b9c:	46c0      	nop			@ (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b008      	add	sp, #32
 8001ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba4:	200001dc 	.word	0x200001dc
 8001ba8:	200001de 	.word	0x200001de
 8001bac:	200001e0 	.word	0x200001e0
 8001bb0:	200001e2 	.word	0x200001e2
 8001bb4:	200001e4 	.word	0x200001e4
 8001bb8:	200001e8 	.word	0x200001e8
 8001bbc:	20000234 	.word	0x20000234
 8001bc0:	2000003c 	.word	0x2000003c
 8001bc4:	20000050 	.word	0x20000050
 8001bc8:	471d3700 	.word	0x471d3700

08001bcc <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	210a      	movs	r1, #10
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f7fe fa92 	bl	8000104 <__udivsi3>
 8001be0:	0003      	movs	r3, r0
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	2408      	movs	r4, #8
 8001be6:	193b      	adds	r3, r7, r4
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	210a      	movs	r1, #10
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f7fe fb0d 	bl	8000210 <__aeabi_uidivmod>
 8001bf6:	000b      	movs	r3, r1
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	193b      	adds	r3, r7, r4
 8001bfc:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001c02:	210a      	movs	r1, #10
 8001c04:	0018      	movs	r0, r3
 8001c06:	f7fe fa7d 	bl	8000104 <__udivsi3>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	193b      	adds	r3, r7, r4
 8001c10:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001c16:	210a      	movs	r1, #10
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f7fe faf9 	bl	8000210 <__aeabi_uidivmod>
 8001c1e:	000b      	movs	r3, r1
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	193b      	adds	r3, r7, r4
 8001c24:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 8001c26:	2116      	movs	r1, #22
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	78db      	ldrb	r3, [r3, #3]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d102      	bne.n	8001c3c <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 8001c36:	187b      	adds	r3, r7, r1
 8001c38:	2202      	movs	r2, #2
 8001c3a:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	e04f      	b.n	8001ce2 <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 8001c42:	2308      	movs	r3, #8
 8001c44:	18fa      	adds	r2, r7, r3
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	18d3      	adds	r3, r2, r3
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	2417      	movs	r4, #23
 8001c50:	193b      	adds	r3, r7, r4
 8001c52:	4a30      	ldr	r2, [pc, #192]	@ (8001d14 <sevSeg_updateDigits+0x148>)
 8001c54:	5c52      	ldrb	r2, [r2, r1]
 8001c56:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d110      	bne.n	8001c80 <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	210a      	movs	r1, #10
 8001c64:	0018      	movs	r0, r3
 8001c66:	f7fe fa4d 	bl	8000104 <__udivsi3>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	001a      	movs	r2, r3
 8001c70:	2316      	movs	r3, #22
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	18d2      	adds	r2, r2, r3
 8001c78:	193b      	adds	r3, r7, r4
 8001c7a:	4927      	ldr	r1, [pc, #156]	@ (8001d18 <sevSeg_updateDigits+0x14c>)
 8001c7c:	5c8a      	ldrb	r2, [r1, r2]
 8001c7e:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	e027      	b.n	8001cd6 <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001c86:	4b25      	ldr	r3, [pc, #148]	@ (8001d1c <sevSeg_updateDigits+0x150>)
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	4b25      	ldr	r3, [pc, #148]	@ (8001d20 <sevSeg_updateDigits+0x154>)
 8001c8c:	8819      	ldrh	r1, [r3, #0]
 8001c8e:	2417      	movs	r4, #23
 8001c90:	193b      	adds	r3, r7, r4
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2201      	movs	r2, #1
 8001c96:	4013      	ands	r3, r2
 8001c98:	4a22      	ldr	r2, [pc, #136]	@ (8001d24 <sevSeg_updateDigits+0x158>)
 8001c9a:	5cd3      	ldrb	r3, [r2, r3]
 8001c9c:	001a      	movs	r2, r3
 8001c9e:	f000 fd3e 	bl	800271e <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d1c <sevSeg_updateDigits+0x150>)
 8001ca4:	6858      	ldr	r0, [r3, #4]
 8001ca6:	4b20      	ldr	r3, [pc, #128]	@ (8001d28 <sevSeg_updateDigits+0x15c>)
 8001ca8:	8819      	ldrh	r1, [r3, #0]
 8001caa:	4b1e      	ldr	r3, [pc, #120]	@ (8001d24 <sevSeg_updateDigits+0x158>)
 8001cac:	785b      	ldrb	r3, [r3, #1]
 8001cae:	001a      	movs	r2, r3
 8001cb0:	f000 fd35 	bl	800271e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001cb4:	4b19      	ldr	r3, [pc, #100]	@ (8001d1c <sevSeg_updateDigits+0x150>)
 8001cb6:	6858      	ldr	r0, [r3, #4]
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d28 <sevSeg_updateDigits+0x15c>)
 8001cba:	8819      	ldrh	r1, [r3, #0]
 8001cbc:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <sevSeg_updateDigits+0x158>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	001a      	movs	r2, r3
 8001cc2:	f000 fd2c 	bl	800271e <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001cc6:	193b      	adds	r3, r7, r4
 8001cc8:	193a      	adds	r2, r7, r4
 8001cca:	7812      	ldrb	r2, [r2, #0]
 8001ccc:	0852      	lsrs	r2, r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b07      	cmp	r3, #7
 8001cda:	ddd4      	ble.n	8001c86 <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	ddac      	ble.n	8001c42 <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d1c <sevSeg_updateDigits+0x150>)
 8001cea:	6898      	ldr	r0, [r3, #8]
 8001cec:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <sevSeg_updateDigits+0x160>)
 8001cee:	8819      	ldrh	r1, [r3, #0]
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <sevSeg_updateDigits+0x158>)
 8001cf2:	785b      	ldrb	r3, [r3, #1]
 8001cf4:	001a      	movs	r2, r3
 8001cf6:	f000 fd12 	bl	800271e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001cfa:	4b08      	ldr	r3, [pc, #32]	@ (8001d1c <sevSeg_updateDigits+0x150>)
 8001cfc:	6898      	ldr	r0, [r3, #8]
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <sevSeg_updateDigits+0x160>)
 8001d00:	8819      	ldrh	r1, [r3, #0]
 8001d02:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <sevSeg_updateDigits+0x158>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	001a      	movs	r2, r3
 8001d08:	f000 fd09 	bl	800271e <HAL_GPIO_WritePin>

	return;
 8001d0c:	46c0      	nop			@ (mov r8, r8)

}
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b007      	add	sp, #28
 8001d12:	bd90      	pop	{r4, r7, pc}
 8001d14:	08005d48 	.word	0x08005d48
 8001d18:	08005d54 	.word	0x08005d54
 8001d1c:	2000003c 	.word	0x2000003c
 8001d20:	200001dc 	.word	0x200001dc
 8001d24:	20000050 	.word	0x20000050
 8001d28:	200001de 	.word	0x200001de
 8001d2c:	200001e0 	.word	0x200001e0

08001d30 <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	0002      	movs	r2, r0
 8001d38:	1dbb      	adds	r3, r7, #6
 8001d3a:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 8001d3c:	4b20      	ldr	r3, [pc, #128]	@ (8001dc0 <sevSeg_setIntensity+0x90>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <sevSeg_setIntensity+0x20>
 8001d44:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc4 <sevSeg_setIntensity+0x94>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	1dba      	adds	r2, r7, #6
 8001d4a:	8812      	ldrh	r2, [r2, #0]
 8001d4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d4e:	e02c      	b.n	8001daa <sevSeg_setIntensity+0x7a>
 8001d50:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc0 <sevSeg_setIntensity+0x90>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d105      	bne.n	8001d64 <sevSeg_setIntensity+0x34>
 8001d58:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc4 <sevSeg_setIntensity+0x94>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	1dbb      	adds	r3, r7, #6
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d62:	e022      	b.n	8001daa <sevSeg_setIntensity+0x7a>
 8001d64:	4b16      	ldr	r3, [pc, #88]	@ (8001dc0 <sevSeg_setIntensity+0x90>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d105      	bne.n	8001d78 <sevSeg_setIntensity+0x48>
 8001d6c:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <sevSeg_setIntensity+0x94>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	1dbb      	adds	r3, r7, #6
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001d76:	e018      	b.n	8001daa <sevSeg_setIntensity+0x7a>
 8001d78:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <sevSeg_setIntensity+0x90>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b0c      	cmp	r3, #12
 8001d7e:	d105      	bne.n	8001d8c <sevSeg_setIntensity+0x5c>
 8001d80:	4b10      	ldr	r3, [pc, #64]	@ (8001dc4 <sevSeg_setIntensity+0x94>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	1dbb      	adds	r3, r7, #6
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d8a:	e00e      	b.n	8001daa <sevSeg_setIntensity+0x7a>
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc0 <sevSeg_setIntensity+0x90>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b10      	cmp	r3, #16
 8001d92:	d105      	bne.n	8001da0 <sevSeg_setIntensity+0x70>
 8001d94:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc4 <sevSeg_setIntensity+0x94>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	1dbb      	adds	r3, r7, #6
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d9e:	e004      	b.n	8001daa <sevSeg_setIntensity+0x7a>
 8001da0:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <sevSeg_setIntensity+0x94>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	1dbb      	adds	r3, r7, #6
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 8001daa:	4b05      	ldr	r3, [pc, #20]	@ (8001dc0 <sevSeg_setIntensity+0x90>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <sevSeg_setIntensity+0x94>)
 8001db0:	0011      	movs	r1, r2
 8001db2:	0018      	movs	r0, r3
 8001db4:	f003 f9e8 	bl	8005188 <HAL_TIM_PWM_Start>

}
 8001db8:	46c0      	nop			@ (mov r8, r8)
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b002      	add	sp, #8
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000234 	.word	0x20000234
 8001dc4:	200001e8 	.word	0x200001e8

08001dc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dce:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <HAL_MspInit+0x54>)
 8001dd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dd2:	4b12      	ldr	r3, [pc, #72]	@ (8001e1c <HAL_MspInit+0x54>)
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <HAL_MspInit+0x54>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	2201      	movs	r2, #1
 8001de0:	4013      	ands	r3, r2
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e1c <HAL_MspInit+0x54>)
 8001de8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dea:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <HAL_MspInit+0x54>)
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0549      	lsls	r1, r1, #21
 8001df0:	430a      	orrs	r2, r1
 8001df2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001df4:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <HAL_MspInit+0x54>)
 8001df6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001df8:	2380      	movs	r3, #128	@ 0x80
 8001dfa:	055b      	lsls	r3, r3, #21
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	2004      	movs	r0, #4
 8001e08:	f000 fad6 	bl	80023b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001e0c:	2004      	movs	r0, #4
 8001e0e:	f000 fae8 	bl	80023e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e12:	46c0      	nop			@ (mov r8, r8)
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b002      	add	sp, #8
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			@ (mov r8, r8)
 8001e1c:	40021000 	.word	0x40021000

08001e20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b095      	sub	sp, #84	@ 0x54
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	233c      	movs	r3, #60	@ 0x3c
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	2314      	movs	r3, #20
 8001e30:	001a      	movs	r2, r3
 8001e32:	2100      	movs	r1, #0
 8001e34:	f003 ff32 	bl	8005c9c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e38:	2414      	movs	r4, #20
 8001e3a:	193b      	adds	r3, r7, r4
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	2328      	movs	r3, #40	@ 0x28
 8001e40:	001a      	movs	r2, r3
 8001e42:	2100      	movs	r1, #0
 8001e44:	f003 ff2a 	bl	8005c9c <memset>
  if(hi2c->Instance==I2C1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a22      	ldr	r2, [pc, #136]	@ (8001ed8 <HAL_I2C_MspInit+0xb8>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d13d      	bne.n	8001ece <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e52:	193b      	adds	r3, r7, r4
 8001e54:	2220      	movs	r2, #32
 8001e56:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e58:	193b      	adds	r3, r7, r4
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e5e:	193b      	adds	r3, r7, r4
 8001e60:	0018      	movs	r0, r3
 8001e62:	f002 f80f 	bl	8003e84 <HAL_RCCEx_PeriphCLKConfig>
 8001e66:	1e03      	subs	r3, r0, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e6a:	f7ff fd89 	bl	8001980 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <HAL_I2C_MspInit+0xbc>)
 8001e70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e72:	4b1a      	ldr	r3, [pc, #104]	@ (8001edc <HAL_I2C_MspInit+0xbc>)
 8001e74:	2102      	movs	r1, #2
 8001e76:	430a      	orrs	r2, r1
 8001e78:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e7a:	4b18      	ldr	r3, [pc, #96]	@ (8001edc <HAL_I2C_MspInit+0xbc>)
 8001e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e7e:	2202      	movs	r2, #2
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e86:	213c      	movs	r1, #60	@ 0x3c
 8001e88:	187b      	adds	r3, r7, r1
 8001e8a:	22c0      	movs	r2, #192	@ 0xc0
 8001e8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e8e:	187b      	adds	r3, r7, r1
 8001e90:	2212      	movs	r2, #18
 8001e92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	187b      	adds	r3, r7, r1
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	187b      	adds	r3, r7, r1
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001ea0:	187b      	adds	r3, r7, r1
 8001ea2:	2206      	movs	r2, #6
 8001ea4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	187b      	adds	r3, r7, r1
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee0 <HAL_I2C_MspInit+0xc0>)
 8001eaa:	0019      	movs	r1, r3
 8001eac:	0010      	movs	r0, r2
 8001eae:	f000 fab5 	bl	800241c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001edc <HAL_I2C_MspInit+0xbc>)
 8001eb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eb6:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <HAL_I2C_MspInit+0xbc>)
 8001eb8:	2180      	movs	r1, #128	@ 0x80
 8001eba:	0389      	lsls	r1, r1, #14
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <HAL_I2C_MspInit+0xbc>)
 8001ec2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ec4:	2380      	movs	r3, #128	@ 0x80
 8001ec6:	039b      	lsls	r3, r3, #14
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b015      	add	sp, #84	@ 0x54
 8001ed4:	bd90      	pop	{r4, r7, pc}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	40005400 	.word	0x40005400
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	50000400 	.word	0x50000400

08001ee4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b08f      	sub	sp, #60	@ 0x3c
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eec:	2410      	movs	r4, #16
 8001eee:	193b      	adds	r3, r7, r4
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	2328      	movs	r3, #40	@ 0x28
 8001ef4:	001a      	movs	r2, r3
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	f003 fed0 	bl	8005c9c <memset>
  if(hrtc->Instance==RTC)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a19      	ldr	r2, [pc, #100]	@ (8001f68 <HAL_RTC_MspInit+0x84>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d12c      	bne.n	8001f60 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f06:	193b      	adds	r3, r7, r4
 8001f08:	2280      	movs	r2, #128	@ 0x80
 8001f0a:	0292      	lsls	r2, r2, #10
 8001f0c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f0e:	193b      	adds	r3, r7, r4
 8001f10:	2280      	movs	r2, #128	@ 0x80
 8001f12:	0052      	lsls	r2, r2, #1
 8001f14:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f16:	193b      	adds	r3, r7, r4
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f001 ffb3 	bl	8003e84 <HAL_RCCEx_PeriphCLKConfig>
 8001f1e:	1e03      	subs	r3, r0, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001f22:	f7ff fd2d 	bl	8001980 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f26:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <HAL_RTC_MspInit+0x88>)
 8001f28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f2a:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <HAL_RTC_MspInit+0x88>)
 8001f2c:	2180      	movs	r1, #128	@ 0x80
 8001f2e:	0209      	lsls	r1, r1, #8
 8001f30:	430a      	orrs	r2, r1
 8001f32:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001f34:	4b0d      	ldr	r3, [pc, #52]	@ (8001f6c <HAL_RTC_MspInit+0x88>)
 8001f36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <HAL_RTC_MspInit+0x88>)
 8001f3a:	2180      	movs	r1, #128	@ 0x80
 8001f3c:	00c9      	lsls	r1, r1, #3
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f42:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <HAL_RTC_MspInit+0x88>)
 8001f44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f46:	2380      	movs	r3, #128	@ 0x80
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2100      	movs	r1, #0
 8001f54:	2002      	movs	r0, #2
 8001f56:	f000 fa2f 	bl	80023b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001f5a:	2002      	movs	r0, #2
 8001f5c:	f000 fa41 	bl	80023e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f60:	46c0      	nop			@ (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b00f      	add	sp, #60	@ 0x3c
 8001f66:	bd90      	pop	{r4, r7, pc}
 8001f68:	40002800 	.word	0x40002800
 8001f6c:	40021000 	.word	0x40021000

08001f70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	@ 0x80
 8001f7e:	05db      	lsls	r3, r3, #23
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d10b      	bne.n	8001f9c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f84:	4b07      	ldr	r3, [pc, #28]	@ (8001fa4 <HAL_TIM_PWM_MspInit+0x34>)
 8001f86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f88:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <HAL_TIM_PWM_MspInit+0x34>)
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f90:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <HAL_TIM_PWM_MspInit+0x34>)
 8001f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f94:	2201      	movs	r2, #1
 8001f96:	4013      	ands	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f9c:	46c0      	nop			@ (mov r8, r8)
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b004      	add	sp, #16
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe0 <HAL_TIM_Base_MspInit+0x38>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d10d      	bne.n	8001fd6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <HAL_TIM_Base_MspInit+0x3c>)
 8001fbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fbe:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <HAL_TIM_Base_MspInit+0x3c>)
 8001fc0:	2180      	movs	r1, #128	@ 0x80
 8001fc2:	0209      	lsls	r1, r1, #8
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fc8:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_TIM_Base_MspInit+0x3c>)
 8001fca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fcc:	2380      	movs	r3, #128	@ 0x80
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001fd6:	46c0      	nop			@ (mov r8, r8)
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b004      	add	sp, #16
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			@ (mov r8, r8)
 8001fe0:	40002000 	.word	0x40002000
 8001fe4:	40021000 	.word	0x40021000

08001fe8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b089      	sub	sp, #36	@ 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	240c      	movs	r4, #12
 8001ff2:	193b      	adds	r3, r7, r4
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	2314      	movs	r3, #20
 8001ff8:	001a      	movs	r2, r3
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	f003 fe4e 	bl	8005c9c <memset>
  if(htim->Instance==TIM2)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2380      	movs	r3, #128	@ 0x80
 8002006:	05db      	lsls	r3, r3, #23
 8002008:	429a      	cmp	r2, r3
 800200a:	d121      	bne.n	8002050 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800200c:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <HAL_TIM_MspPostInit+0x70>)
 800200e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002010:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <HAL_TIM_MspPostInit+0x70>)
 8002012:	2104      	movs	r1, #4
 8002014:	430a      	orrs	r2, r1
 8002016:	635a      	str	r2, [r3, #52]	@ 0x34
 8002018:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <HAL_TIM_MspPostInit+0x70>)
 800201a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800201c:	2204      	movs	r2, #4
 800201e:	4013      	ands	r3, r2
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 8002024:	0021      	movs	r1, r4
 8002026:	187b      	adds	r3, r7, r1
 8002028:	2240      	movs	r2, #64	@ 0x40
 800202a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202c:	187b      	adds	r3, r7, r1
 800202e:	2202      	movs	r2, #2
 8002030:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	187b      	adds	r3, r7, r1
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	187b      	adds	r3, r7, r1
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800203e:	187b      	adds	r3, r7, r1
 8002040:	2202      	movs	r2, #2
 8002042:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 8002044:	187b      	adds	r3, r7, r1
 8002046:	4a05      	ldr	r2, [pc, #20]	@ (800205c <HAL_TIM_MspPostInit+0x74>)
 8002048:	0019      	movs	r1, r3
 800204a:	0010      	movs	r0, r2
 800204c:	f000 f9e6 	bl	800241c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002050:	46c0      	nop			@ (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	b009      	add	sp, #36	@ 0x24
 8002056:	bd90      	pop	{r4, r7, pc}
 8002058:	40021000 	.word	0x40021000
 800205c:	50000800 	.word	0x50000800

08002060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002064:	46c0      	nop			@ (mov r8, r8)
 8002066:	e7fd      	b.n	8002064 <NMI_Handler+0x4>

08002068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206c:	46c0      	nop			@ (mov r8, r8)
 800206e:	e7fd      	b.n	800206c <HardFault_Handler+0x4>

08002070 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002074:	46c0      	nop			@ (mov r8, r8)
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002088:	f000 f8ce 	bl	8002228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208c:	46c0      	nop			@ (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002098:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <RTC_TAMP_IRQHandler+0x14>)
 800209a:	0018      	movs	r0, r3
 800209c:	f002 fd70 	bl	8004b80 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80020a0:	46c0      	nop			@ (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			@ (mov r8, r8)
 80020a8:	20000100 	.word	0x20000100

080020ac <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80020b0:	46c0      	nop			@ (mov r8, r8)
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f000 fb68 	bl	8002790 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 80020c0:	2002      	movs	r0, #2
 80020c2:	f000 fb65 	bl	8002790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 80020d0:	2004      	movs	r0, #4
 80020d2:	f000 fb5d 	bl	8002790 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 80020d6:	2008      	movs	r0, #8
 80020d8:	f000 fb5a 	bl	8002790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80020dc:	46c0      	nop			@ (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 80020e6:	2380      	movs	r3, #128	@ 0x80
 80020e8:	021b      	lsls	r3, r3, #8
 80020ea:	0018      	movs	r0, r3
 80020ec:	f000 fb50 	bl	8002790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80020f0:	46c0      	nop			@ (mov r8, r8)
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002100:	480d      	ldr	r0, [pc, #52]	@ (8002138 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002102:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002104:	f7ff fff7 	bl	80020f6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002108:	480c      	ldr	r0, [pc, #48]	@ (800213c <LoopForever+0x6>)
  ldr r1, =_edata
 800210a:	490d      	ldr	r1, [pc, #52]	@ (8002140 <LoopForever+0xa>)
  ldr r2, =_sidata
 800210c:	4a0d      	ldr	r2, [pc, #52]	@ (8002144 <LoopForever+0xe>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002110:	e002      	b.n	8002118 <LoopCopyDataInit>

08002112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002116:	3304      	adds	r3, #4

08002118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800211c:	d3f9      	bcc.n	8002112 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211e:	4a0a      	ldr	r2, [pc, #40]	@ (8002148 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002120:	4c0a      	ldr	r4, [pc, #40]	@ (800214c <LoopForever+0x16>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002124:	e001      	b.n	800212a <LoopFillZerobss>

08002126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002128:	3204      	adds	r2, #4

0800212a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800212c:	d3fb      	bcc.n	8002126 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800212e:	f003 fdbd 	bl	8005cac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002132:	f7fe fc65 	bl	8000a00 <main>

08002136 <LoopForever>:

LoopForever:
  b LoopForever
 8002136:	e7fe      	b.n	8002136 <LoopForever>
  ldr   r0, =_estack
 8002138:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800213c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002140:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002144:	08005df4 	.word	0x08005df4
  ldr r2, =_sbss
 8002148:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800214c:	2000023c 	.word	0x2000023c

08002150 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002150:	e7fe      	b.n	8002150 <ADC1_IRQHandler>
	...

08002154 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800215a:	1dfb      	adds	r3, r7, #7
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002160:	4b0b      	ldr	r3, [pc, #44]	@ (8002190 <HAL_Init+0x3c>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <HAL_Init+0x3c>)
 8002166:	2180      	movs	r1, #128	@ 0x80
 8002168:	0049      	lsls	r1, r1, #1
 800216a:	430a      	orrs	r2, r1
 800216c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800216e:	2003      	movs	r0, #3
 8002170:	f000 f810 	bl	8002194 <HAL_InitTick>
 8002174:	1e03      	subs	r3, r0, #0
 8002176:	d003      	beq.n	8002180 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002178:	1dfb      	adds	r3, r7, #7
 800217a:	2201      	movs	r2, #1
 800217c:	701a      	strb	r2, [r3, #0]
 800217e:	e001      	b.n	8002184 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002180:	f7ff fe22 	bl	8001dc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002184:	1dfb      	adds	r3, r7, #7
 8002186:	781b      	ldrb	r3, [r3, #0]
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	b002      	add	sp, #8
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40022000 	.word	0x40022000

08002194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800219c:	230f      	movs	r3, #15
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80021a4:	4b1d      	ldr	r3, [pc, #116]	@ (800221c <HAL_InitTick+0x88>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d02b      	beq.n	8002204 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80021ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002220 <HAL_InitTick+0x8c>)
 80021ae:	681c      	ldr	r4, [r3, #0]
 80021b0:	4b1a      	ldr	r3, [pc, #104]	@ (800221c <HAL_InitTick+0x88>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	0019      	movs	r1, r3
 80021b6:	23fa      	movs	r3, #250	@ 0xfa
 80021b8:	0098      	lsls	r0, r3, #2
 80021ba:	f7fd ffa3 	bl	8000104 <__udivsi3>
 80021be:	0003      	movs	r3, r0
 80021c0:	0019      	movs	r1, r3
 80021c2:	0020      	movs	r0, r4
 80021c4:	f7fd ff9e 	bl	8000104 <__udivsi3>
 80021c8:	0003      	movs	r3, r0
 80021ca:	0018      	movs	r0, r3
 80021cc:	f000 f919 	bl	8002402 <HAL_SYSTICK_Config>
 80021d0:	1e03      	subs	r3, r0, #0
 80021d2:	d112      	bne.n	80021fa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d80a      	bhi.n	80021f0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	2301      	movs	r3, #1
 80021de:	425b      	negs	r3, r3
 80021e0:	2200      	movs	r2, #0
 80021e2:	0018      	movs	r0, r3
 80021e4:	f000 f8e8 	bl	80023b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <HAL_InitTick+0x90>)
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	e00d      	b.n	800220c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80021f0:	230f      	movs	r3, #15
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
 80021f8:	e008      	b.n	800220c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021fa:	230f      	movs	r3, #15
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
 8002202:	e003      	b.n	800220c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002204:	230f      	movs	r3, #15
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800220c:	230f      	movs	r3, #15
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	781b      	ldrb	r3, [r3, #0]
}
 8002212:	0018      	movs	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	b005      	add	sp, #20
 8002218:	bd90      	pop	{r4, r7, pc}
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	2000005c 	.word	0x2000005c
 8002220:	20000054 	.word	0x20000054
 8002224:	20000058 	.word	0x20000058

08002228 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800222c:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <HAL_IncTick+0x1c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	001a      	movs	r2, r3
 8002232:	4b05      	ldr	r3, [pc, #20]	@ (8002248 <HAL_IncTick+0x20>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	18d2      	adds	r2, r2, r3
 8002238:	4b03      	ldr	r3, [pc, #12]	@ (8002248 <HAL_IncTick+0x20>)
 800223a:	601a      	str	r2, [r3, #0]
}
 800223c:	46c0      	nop			@ (mov r8, r8)
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	46c0      	nop			@ (mov r8, r8)
 8002244:	2000005c 	.word	0x2000005c
 8002248:	20000238 	.word	0x20000238

0800224c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  return uwTick;
 8002250:	4b02      	ldr	r3, [pc, #8]	@ (800225c <HAL_GetTick+0x10>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			@ (mov r8, r8)
 800225c:	20000238 	.word	0x20000238

08002260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	0002      	movs	r2, r0
 8002268:	1dfb      	adds	r3, r7, #7
 800226a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800226c:	1dfb      	adds	r3, r7, #7
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b7f      	cmp	r3, #127	@ 0x7f
 8002272:	d809      	bhi.n	8002288 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	001a      	movs	r2, r3
 800227a:	231f      	movs	r3, #31
 800227c:	401a      	ands	r2, r3
 800227e:	4b04      	ldr	r3, [pc, #16]	@ (8002290 <__NVIC_EnableIRQ+0x30>)
 8002280:	2101      	movs	r1, #1
 8002282:	4091      	lsls	r1, r2
 8002284:	000a      	movs	r2, r1
 8002286:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002288:	46c0      	nop			@ (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	b002      	add	sp, #8
 800228e:	bd80      	pop	{r7, pc}
 8002290:	e000e100 	.word	0xe000e100

08002294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002294:	b590      	push	{r4, r7, lr}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	0002      	movs	r2, r0
 800229c:	6039      	str	r1, [r7, #0]
 800229e:	1dfb      	adds	r3, r7, #7
 80022a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80022a8:	d828      	bhi.n	80022fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002368 <__NVIC_SetPriority+0xd4>)
 80022ac:	1dfb      	adds	r3, r7, #7
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	b25b      	sxtb	r3, r3
 80022b2:	089b      	lsrs	r3, r3, #2
 80022b4:	33c0      	adds	r3, #192	@ 0xc0
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	589b      	ldr	r3, [r3, r2]
 80022ba:	1dfa      	adds	r2, r7, #7
 80022bc:	7812      	ldrb	r2, [r2, #0]
 80022be:	0011      	movs	r1, r2
 80022c0:	2203      	movs	r2, #3
 80022c2:	400a      	ands	r2, r1
 80022c4:	00d2      	lsls	r2, r2, #3
 80022c6:	21ff      	movs	r1, #255	@ 0xff
 80022c8:	4091      	lsls	r1, r2
 80022ca:	000a      	movs	r2, r1
 80022cc:	43d2      	mvns	r2, r2
 80022ce:	401a      	ands	r2, r3
 80022d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	019b      	lsls	r3, r3, #6
 80022d6:	22ff      	movs	r2, #255	@ 0xff
 80022d8:	401a      	ands	r2, r3
 80022da:	1dfb      	adds	r3, r7, #7
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	0018      	movs	r0, r3
 80022e0:	2303      	movs	r3, #3
 80022e2:	4003      	ands	r3, r0
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022e8:	481f      	ldr	r0, [pc, #124]	@ (8002368 <__NVIC_SetPriority+0xd4>)
 80022ea:	1dfb      	adds	r3, r7, #7
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	b25b      	sxtb	r3, r3
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	430a      	orrs	r2, r1
 80022f4:	33c0      	adds	r3, #192	@ 0xc0
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80022fa:	e031      	b.n	8002360 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022fc:	4a1b      	ldr	r2, [pc, #108]	@ (800236c <__NVIC_SetPriority+0xd8>)
 80022fe:	1dfb      	adds	r3, r7, #7
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	0019      	movs	r1, r3
 8002304:	230f      	movs	r3, #15
 8002306:	400b      	ands	r3, r1
 8002308:	3b08      	subs	r3, #8
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3306      	adds	r3, #6
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	18d3      	adds	r3, r2, r3
 8002312:	3304      	adds	r3, #4
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	1dfa      	adds	r2, r7, #7
 8002318:	7812      	ldrb	r2, [r2, #0]
 800231a:	0011      	movs	r1, r2
 800231c:	2203      	movs	r2, #3
 800231e:	400a      	ands	r2, r1
 8002320:	00d2      	lsls	r2, r2, #3
 8002322:	21ff      	movs	r1, #255	@ 0xff
 8002324:	4091      	lsls	r1, r2
 8002326:	000a      	movs	r2, r1
 8002328:	43d2      	mvns	r2, r2
 800232a:	401a      	ands	r2, r3
 800232c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	019b      	lsls	r3, r3, #6
 8002332:	22ff      	movs	r2, #255	@ 0xff
 8002334:	401a      	ands	r2, r3
 8002336:	1dfb      	adds	r3, r7, #7
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	0018      	movs	r0, r3
 800233c:	2303      	movs	r3, #3
 800233e:	4003      	ands	r3, r0
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002344:	4809      	ldr	r0, [pc, #36]	@ (800236c <__NVIC_SetPriority+0xd8>)
 8002346:	1dfb      	adds	r3, r7, #7
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	001c      	movs	r4, r3
 800234c:	230f      	movs	r3, #15
 800234e:	4023      	ands	r3, r4
 8002350:	3b08      	subs	r3, #8
 8002352:	089b      	lsrs	r3, r3, #2
 8002354:	430a      	orrs	r2, r1
 8002356:	3306      	adds	r3, #6
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	18c3      	adds	r3, r0, r3
 800235c:	3304      	adds	r3, #4
 800235e:	601a      	str	r2, [r3, #0]
}
 8002360:	46c0      	nop			@ (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	b003      	add	sp, #12
 8002366:	bd90      	pop	{r4, r7, pc}
 8002368:	e000e100 	.word	0xe000e100
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	1e5a      	subs	r2, r3, #1
 800237c:	2380      	movs	r3, #128	@ 0x80
 800237e:	045b      	lsls	r3, r3, #17
 8002380:	429a      	cmp	r2, r3
 8002382:	d301      	bcc.n	8002388 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002384:	2301      	movs	r3, #1
 8002386:	e010      	b.n	80023aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002388:	4b0a      	ldr	r3, [pc, #40]	@ (80023b4 <SysTick_Config+0x44>)
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	3a01      	subs	r2, #1
 800238e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002390:	2301      	movs	r3, #1
 8002392:	425b      	negs	r3, r3
 8002394:	2103      	movs	r1, #3
 8002396:	0018      	movs	r0, r3
 8002398:	f7ff ff7c 	bl	8002294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800239c:	4b05      	ldr	r3, [pc, #20]	@ (80023b4 <SysTick_Config+0x44>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a2:	4b04      	ldr	r3, [pc, #16]	@ (80023b4 <SysTick_Config+0x44>)
 80023a4:	2207      	movs	r2, #7
 80023a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b002      	add	sp, #8
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	e000e010 	.word	0xe000e010

080023b8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	210f      	movs	r1, #15
 80023c4:	187b      	adds	r3, r7, r1
 80023c6:	1c02      	adds	r2, r0, #0
 80023c8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	187b      	adds	r3, r7, r1
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	b25b      	sxtb	r3, r3
 80023d2:	0011      	movs	r1, r2
 80023d4:	0018      	movs	r0, r3
 80023d6:	f7ff ff5d 	bl	8002294 <__NVIC_SetPriority>
}
 80023da:	46c0      	nop			@ (mov r8, r8)
 80023dc:	46bd      	mov	sp, r7
 80023de:	b004      	add	sp, #16
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	0002      	movs	r2, r0
 80023ea:	1dfb      	adds	r3, r7, #7
 80023ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ee:	1dfb      	adds	r3, r7, #7
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	b25b      	sxtb	r3, r3
 80023f4:	0018      	movs	r0, r3
 80023f6:	f7ff ff33 	bl	8002260 <__NVIC_EnableIRQ>
}
 80023fa:	46c0      	nop			@ (mov r8, r8)
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b002      	add	sp, #8
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	0018      	movs	r0, r3
 800240e:	f7ff ffaf 	bl	8002370 <SysTick_Config>
 8002412:	0003      	movs	r3, r0
}
 8002414:	0018      	movs	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	b002      	add	sp, #8
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800242a:	e147      	b.n	80026bc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2101      	movs	r1, #1
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4091      	lsls	r1, r2
 8002436:	000a      	movs	r2, r1
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d100      	bne.n	8002444 <HAL_GPIO_Init+0x28>
 8002442:	e138      	b.n	80026b6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2203      	movs	r2, #3
 800244a:	4013      	ands	r3, r2
 800244c:	2b01      	cmp	r3, #1
 800244e:	d005      	beq.n	800245c <HAL_GPIO_Init+0x40>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2203      	movs	r2, #3
 8002456:	4013      	ands	r3, r2
 8002458:	2b02      	cmp	r3, #2
 800245a:	d130      	bne.n	80024be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2203      	movs	r2, #3
 8002468:	409a      	lsls	r2, r3
 800246a:	0013      	movs	r3, r2
 800246c:	43da      	mvns	r2, r3
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	409a      	lsls	r2, r3
 800247e:	0013      	movs	r3, r2
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002492:	2201      	movs	r2, #1
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	409a      	lsls	r2, r3
 8002498:	0013      	movs	r3, r2
 800249a:	43da      	mvns	r2, r3
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	2201      	movs	r2, #1
 80024aa:	401a      	ands	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	409a      	lsls	r2, r3
 80024b0:	0013      	movs	r3, r2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2203      	movs	r2, #3
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d017      	beq.n	80024fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	2203      	movs	r2, #3
 80024d6:	409a      	lsls	r2, r3
 80024d8:	0013      	movs	r3, r2
 80024da:	43da      	mvns	r2, r3
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	409a      	lsls	r2, r3
 80024ec:	0013      	movs	r3, r2
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2203      	movs	r2, #3
 8002500:	4013      	ands	r3, r2
 8002502:	2b02      	cmp	r3, #2
 8002504:	d123      	bne.n	800254e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	08da      	lsrs	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3208      	adds	r2, #8
 800250e:	0092      	lsls	r2, r2, #2
 8002510:	58d3      	ldr	r3, [r2, r3]
 8002512:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2207      	movs	r2, #7
 8002518:	4013      	ands	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	220f      	movs	r2, #15
 800251e:	409a      	lsls	r2, r3
 8002520:	0013      	movs	r3, r2
 8002522:	43da      	mvns	r2, r3
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2107      	movs	r1, #7
 8002532:	400b      	ands	r3, r1
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	409a      	lsls	r2, r3
 8002538:	0013      	movs	r3, r2
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	08da      	lsrs	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3208      	adds	r2, #8
 8002548:	0092      	lsls	r2, r2, #2
 800254a:	6939      	ldr	r1, [r7, #16]
 800254c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	2203      	movs	r2, #3
 800255a:	409a      	lsls	r2, r3
 800255c:	0013      	movs	r3, r2
 800255e:	43da      	mvns	r2, r3
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2203      	movs	r2, #3
 800256c:	401a      	ands	r2, r3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	409a      	lsls	r2, r3
 8002574:	0013      	movs	r3, r2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	23c0      	movs	r3, #192	@ 0xc0
 8002588:	029b      	lsls	r3, r3, #10
 800258a:	4013      	ands	r3, r2
 800258c:	d100      	bne.n	8002590 <HAL_GPIO_Init+0x174>
 800258e:	e092      	b.n	80026b6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002590:	4a50      	ldr	r2, [pc, #320]	@ (80026d4 <HAL_GPIO_Init+0x2b8>)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	089b      	lsrs	r3, r3, #2
 8002596:	3318      	adds	r3, #24
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	589b      	ldr	r3, [r3, r2]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2203      	movs	r2, #3
 80025a2:	4013      	ands	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	220f      	movs	r2, #15
 80025a8:	409a      	lsls	r2, r3
 80025aa:	0013      	movs	r3, r2
 80025ac:	43da      	mvns	r2, r3
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	23a0      	movs	r3, #160	@ 0xa0
 80025b8:	05db      	lsls	r3, r3, #23
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d013      	beq.n	80025e6 <HAL_GPIO_Init+0x1ca>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a45      	ldr	r2, [pc, #276]	@ (80026d8 <HAL_GPIO_Init+0x2bc>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00d      	beq.n	80025e2 <HAL_GPIO_Init+0x1c6>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a44      	ldr	r2, [pc, #272]	@ (80026dc <HAL_GPIO_Init+0x2c0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d007      	beq.n	80025de <HAL_GPIO_Init+0x1c2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a43      	ldr	r2, [pc, #268]	@ (80026e0 <HAL_GPIO_Init+0x2c4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d101      	bne.n	80025da <HAL_GPIO_Init+0x1be>
 80025d6:	2303      	movs	r3, #3
 80025d8:	e006      	b.n	80025e8 <HAL_GPIO_Init+0x1cc>
 80025da:	2305      	movs	r3, #5
 80025dc:	e004      	b.n	80025e8 <HAL_GPIO_Init+0x1cc>
 80025de:	2302      	movs	r3, #2
 80025e0:	e002      	b.n	80025e8 <HAL_GPIO_Init+0x1cc>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_GPIO_Init+0x1cc>
 80025e6:	2300      	movs	r3, #0
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	2103      	movs	r1, #3
 80025ec:	400a      	ands	r2, r1
 80025ee:	00d2      	lsls	r2, r2, #3
 80025f0:	4093      	lsls	r3, r2
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80025f8:	4936      	ldr	r1, [pc, #216]	@ (80026d4 <HAL_GPIO_Init+0x2b8>)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	089b      	lsrs	r3, r3, #2
 80025fe:	3318      	adds	r3, #24
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002606:	4b33      	ldr	r3, [pc, #204]	@ (80026d4 <HAL_GPIO_Init+0x2b8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	43da      	mvns	r2, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	2380      	movs	r3, #128	@ 0x80
 800261c:	035b      	lsls	r3, r3, #13
 800261e:	4013      	ands	r3, r2
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800262a:	4b2a      	ldr	r3, [pc, #168]	@ (80026d4 <HAL_GPIO_Init+0x2b8>)
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002630:	4b28      	ldr	r3, [pc, #160]	@ (80026d4 <HAL_GPIO_Init+0x2b8>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	43da      	mvns	r2, r3
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	2380      	movs	r3, #128	@ 0x80
 8002646:	039b      	lsls	r3, r3, #14
 8002648:	4013      	ands	r3, r2
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002654:	4b1f      	ldr	r3, [pc, #124]	@ (80026d4 <HAL_GPIO_Init+0x2b8>)
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800265a:	4a1e      	ldr	r2, [pc, #120]	@ (80026d4 <HAL_GPIO_Init+0x2b8>)
 800265c:	2384      	movs	r3, #132	@ 0x84
 800265e:	58d3      	ldr	r3, [r2, r3]
 8002660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	43da      	mvns	r2, r3
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	2380      	movs	r3, #128	@ 0x80
 8002672:	029b      	lsls	r3, r3, #10
 8002674:	4013      	ands	r3, r2
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002680:	4914      	ldr	r1, [pc, #80]	@ (80026d4 <HAL_GPIO_Init+0x2b8>)
 8002682:	2284      	movs	r2, #132	@ 0x84
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002688:	4a12      	ldr	r2, [pc, #72]	@ (80026d4 <HAL_GPIO_Init+0x2b8>)
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	58d3      	ldr	r3, [r2, r3]
 800268e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	43da      	mvns	r2, r3
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4013      	ands	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	2380      	movs	r3, #128	@ 0x80
 80026a0:	025b      	lsls	r3, r3, #9
 80026a2:	4013      	ands	r3, r2
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026ae:	4909      	ldr	r1, [pc, #36]	@ (80026d4 <HAL_GPIO_Init+0x2b8>)
 80026b0:	2280      	movs	r2, #128	@ 0x80
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	3301      	adds	r3, #1
 80026ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	40da      	lsrs	r2, r3
 80026c4:	1e13      	subs	r3, r2, #0
 80026c6:	d000      	beq.n	80026ca <HAL_GPIO_Init+0x2ae>
 80026c8:	e6b0      	b.n	800242c <HAL_GPIO_Init+0x10>
  }
}
 80026ca:	46c0      	nop			@ (mov r8, r8)
 80026cc:	46c0      	nop			@ (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b006      	add	sp, #24
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40021800 	.word	0x40021800
 80026d8:	50000400 	.word	0x50000400
 80026dc:	50000800 	.word	0x50000800
 80026e0:	50000c00 	.word	0x50000c00

080026e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	000a      	movs	r2, r1
 80026ee:	1cbb      	adds	r3, r7, #2
 80026f0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	1cba      	adds	r2, r7, #2
 80026f8:	8812      	ldrh	r2, [r2, #0]
 80026fa:	4013      	ands	r3, r2
 80026fc:	d004      	beq.n	8002708 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80026fe:	230f      	movs	r3, #15
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]
 8002706:	e003      	b.n	8002710 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002708:	230f      	movs	r3, #15
 800270a:	18fb      	adds	r3, r7, r3
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002710:	230f      	movs	r3, #15
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	781b      	ldrb	r3, [r3, #0]
}
 8002716:	0018      	movs	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	b004      	add	sp, #16
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	0008      	movs	r0, r1
 8002728:	0011      	movs	r1, r2
 800272a:	1cbb      	adds	r3, r7, #2
 800272c:	1c02      	adds	r2, r0, #0
 800272e:	801a      	strh	r2, [r3, #0]
 8002730:	1c7b      	adds	r3, r7, #1
 8002732:	1c0a      	adds	r2, r1, #0
 8002734:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002736:	1c7b      	adds	r3, r7, #1
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d004      	beq.n	8002748 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800273e:	1cbb      	adds	r3, r7, #2
 8002740:	881a      	ldrh	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002746:	e003      	b.n	8002750 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002748:	1cbb      	adds	r3, r7, #2
 800274a:	881a      	ldrh	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002750:	46c0      	nop			@ (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b002      	add	sp, #8
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	000a      	movs	r2, r1
 8002762:	1cbb      	adds	r3, r7, #2
 8002764:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800276c:	1cbb      	adds	r3, r7, #2
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4013      	ands	r3, r2
 8002774:	041a      	lsls	r2, r3, #16
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	43db      	mvns	r3, r3
 800277a:	1cb9      	adds	r1, r7, #2
 800277c:	8809      	ldrh	r1, [r1, #0]
 800277e:	400b      	ands	r3, r1
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	619a      	str	r2, [r3, #24]
}
 8002786:	46c0      	nop			@ (mov r8, r8)
 8002788:	46bd      	mov	sp, r7
 800278a:	b004      	add	sp, #16
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	0002      	movs	r2, r0
 8002798:	1dbb      	adds	r3, r7, #6
 800279a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800279c:	4b10      	ldr	r3, [pc, #64]	@ (80027e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	1dba      	adds	r2, r7, #6
 80027a2:	8812      	ldrh	r2, [r2, #0]
 80027a4:	4013      	ands	r3, r2
 80027a6:	d008      	beq.n	80027ba <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80027a8:	4b0d      	ldr	r3, [pc, #52]	@ (80027e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027aa:	1dba      	adds	r2, r7, #6
 80027ac:	8812      	ldrh	r2, [r2, #0]
 80027ae:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80027b0:	1dbb      	adds	r3, r7, #6
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	0018      	movs	r0, r3
 80027b6:	f000 f815 	bl	80027e4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80027ba:	4b09      	ldr	r3, [pc, #36]	@ (80027e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	1dba      	adds	r2, r7, #6
 80027c0:	8812      	ldrh	r2, [r2, #0]
 80027c2:	4013      	ands	r3, r2
 80027c4:	d008      	beq.n	80027d8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80027c6:	4b06      	ldr	r3, [pc, #24]	@ (80027e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027c8:	1dba      	adds	r2, r7, #6
 80027ca:	8812      	ldrh	r2, [r2, #0]
 80027cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80027ce:	1dbb      	adds	r3, r7, #6
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f7fe fddc 	bl	8001390 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80027d8:	46c0      	nop			@ (mov r8, r8)
 80027da:	46bd      	mov	sp, r7
 80027dc:	b002      	add	sp, #8
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40021800 	.word	0x40021800

080027e4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	0002      	movs	r2, r0
 80027ec:	1dbb      	adds	r3, r7, #6
 80027ee:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80027f0:	46c0      	nop			@ (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b002      	add	sp, #8
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e08f      	b.n	800292a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2241      	movs	r2, #65	@ 0x41
 800280e:	5c9b      	ldrb	r3, [r3, r2]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d107      	bne.n	8002826 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2240      	movs	r2, #64	@ 0x40
 800281a:	2100      	movs	r1, #0
 800281c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	0018      	movs	r0, r3
 8002822:	f7ff fafd 	bl	8001e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2241      	movs	r2, #65	@ 0x41
 800282a:	2124      	movs	r1, #36	@ 0x24
 800282c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2101      	movs	r1, #1
 800283a:	438a      	bics	r2, r1
 800283c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	493b      	ldr	r1, [pc, #236]	@ (8002934 <HAL_I2C_Init+0x13c>)
 8002848:	400a      	ands	r2, r1
 800284a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4938      	ldr	r1, [pc, #224]	@ (8002938 <HAL_I2C_Init+0x140>)
 8002858:	400a      	ands	r2, r1
 800285a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d108      	bne.n	8002876 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2180      	movs	r1, #128	@ 0x80
 800286e:	0209      	lsls	r1, r1, #8
 8002870:	430a      	orrs	r2, r1
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	e007      	b.n	8002886 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2184      	movs	r1, #132	@ 0x84
 8002880:	0209      	lsls	r1, r1, #8
 8002882:	430a      	orrs	r2, r1
 8002884:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d109      	bne.n	80028a2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2180      	movs	r1, #128	@ 0x80
 800289a:	0109      	lsls	r1, r1, #4
 800289c:	430a      	orrs	r2, r1
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	e007      	b.n	80028b2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4923      	ldr	r1, [pc, #140]	@ (800293c <HAL_I2C_Init+0x144>)
 80028ae:	400a      	ands	r2, r1
 80028b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4920      	ldr	r1, [pc, #128]	@ (8002940 <HAL_I2C_Init+0x148>)
 80028be:	430a      	orrs	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	491a      	ldr	r1, [pc, #104]	@ (8002938 <HAL_I2C_Init+0x140>)
 80028ce:	400a      	ands	r2, r1
 80028d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	431a      	orrs	r2, r3
 80028dc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69d9      	ldr	r1, [r3, #28]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1a      	ldr	r2, [r3, #32]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2101      	movs	r1, #1
 8002908:	430a      	orrs	r2, r1
 800290a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2241      	movs	r2, #65	@ 0x41
 8002916:	2120      	movs	r1, #32
 8002918:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2242      	movs	r2, #66	@ 0x42
 8002924:	2100      	movs	r1, #0
 8002926:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	0018      	movs	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	b002      	add	sp, #8
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			@ (mov r8, r8)
 8002934:	f0ffffff 	.word	0xf0ffffff
 8002938:	ffff7fff 	.word	0xffff7fff
 800293c:	fffff7ff 	.word	0xfffff7ff
 8002940:	02008000 	.word	0x02008000

08002944 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002944:	b590      	push	{r4, r7, lr}
 8002946:	b089      	sub	sp, #36	@ 0x24
 8002948:	af02      	add	r7, sp, #8
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	0008      	movs	r0, r1
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	0019      	movs	r1, r3
 8002952:	230a      	movs	r3, #10
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	1c02      	adds	r2, r0, #0
 8002958:	801a      	strh	r2, [r3, #0]
 800295a:	2308      	movs	r3, #8
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	1c0a      	adds	r2, r1, #0
 8002960:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2241      	movs	r2, #65	@ 0x41
 8002966:	5c9b      	ldrb	r3, [r3, r2]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b20      	cmp	r3, #32
 800296c:	d000      	beq.n	8002970 <HAL_I2C_Master_Transmit+0x2c>
 800296e:	e10a      	b.n	8002b86 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2240      	movs	r2, #64	@ 0x40
 8002974:	5c9b      	ldrb	r3, [r3, r2]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_I2C_Master_Transmit+0x3a>
 800297a:	2302      	movs	r3, #2
 800297c:	e104      	b.n	8002b88 <HAL_I2C_Master_Transmit+0x244>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2240      	movs	r2, #64	@ 0x40
 8002982:	2101      	movs	r1, #1
 8002984:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002986:	f7ff fc61 	bl	800224c <HAL_GetTick>
 800298a:	0003      	movs	r3, r0
 800298c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800298e:	2380      	movs	r3, #128	@ 0x80
 8002990:	0219      	lsls	r1, r3, #8
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	2319      	movs	r3, #25
 800299a:	2201      	movs	r2, #1
 800299c:	f000 fa26 	bl	8002dec <I2C_WaitOnFlagUntilTimeout>
 80029a0:	1e03      	subs	r3, r0, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0ef      	b.n	8002b88 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2241      	movs	r2, #65	@ 0x41
 80029ac:	2121      	movs	r1, #33	@ 0x21
 80029ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2242      	movs	r2, #66	@ 0x42
 80029b4:	2110      	movs	r1, #16
 80029b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2208      	movs	r2, #8
 80029c8:	18ba      	adds	r2, r7, r2
 80029ca:	8812      	ldrh	r2, [r2, #0]
 80029cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2bff      	cmp	r3, #255	@ 0xff
 80029dc:	d906      	bls.n	80029ec <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	22ff      	movs	r2, #255	@ 0xff
 80029e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80029e4:	2380      	movs	r3, #128	@ 0x80
 80029e6:	045b      	lsls	r3, r3, #17
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	e007      	b.n	80029fc <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80029f6:	2380      	movs	r3, #128	@ 0x80
 80029f8:	049b      	lsls	r3, r3, #18
 80029fa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d027      	beq.n	8002a54 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	697c      	ldr	r4, [r7, #20]
 8002a40:	230a      	movs	r3, #10
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	8819      	ldrh	r1, [r3, #0]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	4b51      	ldr	r3, [pc, #324]	@ (8002b90 <HAL_I2C_Master_Transmit+0x24c>)
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	0023      	movs	r3, r4
 8002a4e:	f000 fc45 	bl	80032dc <I2C_TransferConfig>
 8002a52:	e06f      	b.n	8002b34 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	697c      	ldr	r4, [r7, #20]
 8002a5c:	230a      	movs	r3, #10
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	8819      	ldrh	r1, [r3, #0]
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	4b4a      	ldr	r3, [pc, #296]	@ (8002b90 <HAL_I2C_Master_Transmit+0x24c>)
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	0023      	movs	r3, r4
 8002a6a:	f000 fc37 	bl	80032dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a6e:	e061      	b.n	8002b34 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	0018      	movs	r0, r3
 8002a78:	f000 fa10 	bl	8002e9c <I2C_WaitOnTXISFlagUntilTimeout>
 8002a7c:	1e03      	subs	r3, r0, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e081      	b.n	8002b88 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d03a      	beq.n	8002b34 <HAL_I2C_Master_Transmit+0x1f0>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d136      	bne.n	8002b34 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ac6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	0013      	movs	r3, r2
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2180      	movs	r1, #128	@ 0x80
 8002ad4:	f000 f98a 	bl	8002dec <I2C_WaitOnFlagUntilTimeout>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e053      	b.n	8002b88 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	2bff      	cmp	r3, #255	@ 0xff
 8002ae8:	d911      	bls.n	8002b0e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	22ff      	movs	r2, #255	@ 0xff
 8002aee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	2380      	movs	r3, #128	@ 0x80
 8002af8:	045c      	lsls	r4, r3, #17
 8002afa:	230a      	movs	r3, #10
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	8819      	ldrh	r1, [r3, #0]
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	2300      	movs	r3, #0
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	0023      	movs	r3, r4
 8002b08:	f000 fbe8 	bl	80032dc <I2C_TransferConfig>
 8002b0c:	e012      	b.n	8002b34 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	2380      	movs	r3, #128	@ 0x80
 8002b20:	049c      	lsls	r4, r3, #18
 8002b22:	230a      	movs	r3, #10
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	8819      	ldrh	r1, [r3, #0]
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	0023      	movs	r3, r4
 8002b30:	f000 fbd4 	bl	80032dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d198      	bne.n	8002a70 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f000 f9ef 	bl	8002f28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b4a:	1e03      	subs	r3, r0, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e01a      	b.n	8002b88 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2220      	movs	r2, #32
 8002b58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	490b      	ldr	r1, [pc, #44]	@ (8002b94 <HAL_I2C_Master_Transmit+0x250>)
 8002b66:	400a      	ands	r2, r1
 8002b68:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2241      	movs	r2, #65	@ 0x41
 8002b6e:	2120      	movs	r1, #32
 8002b70:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2242      	movs	r2, #66	@ 0x42
 8002b76:	2100      	movs	r1, #0
 8002b78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2240      	movs	r2, #64	@ 0x40
 8002b7e:	2100      	movs	r1, #0
 8002b80:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e000      	b.n	8002b88 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002b86:	2302      	movs	r3, #2
  }
}
 8002b88:	0018      	movs	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b007      	add	sp, #28
 8002b8e:	bd90      	pop	{r4, r7, pc}
 8002b90:	80002000 	.word	0x80002000
 8002b94:	fe00e800 	.word	0xfe00e800

08002b98 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b089      	sub	sp, #36	@ 0x24
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	0008      	movs	r0, r1
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	0019      	movs	r1, r3
 8002ba6:	230a      	movs	r3, #10
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	1c02      	adds	r2, r0, #0
 8002bac:	801a      	strh	r2, [r3, #0]
 8002bae:	2308      	movs	r3, #8
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	1c0a      	adds	r2, r1, #0
 8002bb4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2241      	movs	r2, #65	@ 0x41
 8002bba:	5c9b      	ldrb	r3, [r3, r2]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	d000      	beq.n	8002bc4 <HAL_I2C_Master_Receive+0x2c>
 8002bc2:	e0e8      	b.n	8002d96 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2240      	movs	r2, #64	@ 0x40
 8002bc8:	5c9b      	ldrb	r3, [r3, r2]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_I2C_Master_Receive+0x3a>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e0e2      	b.n	8002d98 <HAL_I2C_Master_Receive+0x200>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2240      	movs	r2, #64	@ 0x40
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bda:	f7ff fb37 	bl	800224c <HAL_GetTick>
 8002bde:	0003      	movs	r3, r0
 8002be0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002be2:	2380      	movs	r3, #128	@ 0x80
 8002be4:	0219      	lsls	r1, r3, #8
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	2319      	movs	r3, #25
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f000 f8fc 	bl	8002dec <I2C_WaitOnFlagUntilTimeout>
 8002bf4:	1e03      	subs	r3, r0, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0cd      	b.n	8002d98 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2241      	movs	r2, #65	@ 0x41
 8002c00:	2122      	movs	r1, #34	@ 0x22
 8002c02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2242      	movs	r2, #66	@ 0x42
 8002c08:	2110      	movs	r1, #16
 8002c0a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	18ba      	adds	r2, r7, r2
 8002c1e:	8812      	ldrh	r2, [r2, #0]
 8002c20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2bff      	cmp	r3, #255	@ 0xff
 8002c30:	d911      	bls.n	8002c56 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	22ff      	movs	r2, #255	@ 0xff
 8002c36:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	2380      	movs	r3, #128	@ 0x80
 8002c40:	045c      	lsls	r4, r3, #17
 8002c42:	230a      	movs	r3, #10
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	8819      	ldrh	r1, [r3, #0]
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	4b55      	ldr	r3, [pc, #340]	@ (8002da0 <HAL_I2C_Master_Receive+0x208>)
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	0023      	movs	r3, r4
 8002c50:	f000 fb44 	bl	80032dc <I2C_TransferConfig>
 8002c54:	e076      	b.n	8002d44 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	2380      	movs	r3, #128	@ 0x80
 8002c68:	049c      	lsls	r4, r3, #18
 8002c6a:	230a      	movs	r3, #10
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	8819      	ldrh	r1, [r3, #0]
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	4b4b      	ldr	r3, [pc, #300]	@ (8002da0 <HAL_I2C_Master_Receive+0x208>)
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	0023      	movs	r3, r4
 8002c78:	f000 fb30 	bl	80032dc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002c7c:	e062      	b.n	8002d44 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	0018      	movs	r0, r3
 8002c86:	f000 f993 	bl	8002fb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c8a:	1e03      	subs	r3, r0, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e082      	b.n	8002d98 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d03a      	beq.n	8002d44 <HAL_I2C_Master_Receive+0x1ac>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d136      	bne.n	8002d44 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	0013      	movs	r3, r2
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2180      	movs	r1, #128	@ 0x80
 8002ce4:	f000 f882 	bl	8002dec <I2C_WaitOnFlagUntilTimeout>
 8002ce8:	1e03      	subs	r3, r0, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e053      	b.n	8002d98 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2bff      	cmp	r3, #255	@ 0xff
 8002cf8:	d911      	bls.n	8002d1e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	22ff      	movs	r2, #255	@ 0xff
 8002cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	2380      	movs	r3, #128	@ 0x80
 8002d08:	045c      	lsls	r4, r3, #17
 8002d0a:	230a      	movs	r3, #10
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	8819      	ldrh	r1, [r3, #0]
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	2300      	movs	r3, #0
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	0023      	movs	r3, r4
 8002d18:	f000 fae0 	bl	80032dc <I2C_TransferConfig>
 8002d1c:	e012      	b.n	8002d44 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	2380      	movs	r3, #128	@ 0x80
 8002d30:	049c      	lsls	r4, r3, #18
 8002d32:	230a      	movs	r3, #10
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	8819      	ldrh	r1, [r3, #0]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	0023      	movs	r3, r4
 8002d40:	f000 facc 	bl	80032dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d197      	bne.n	8002c7e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	0018      	movs	r0, r3
 8002d56:	f000 f8e7 	bl	8002f28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d5a:	1e03      	subs	r3, r0, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e01a      	b.n	8002d98 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2220      	movs	r2, #32
 8002d68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	490b      	ldr	r1, [pc, #44]	@ (8002da4 <HAL_I2C_Master_Receive+0x20c>)
 8002d76:	400a      	ands	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2241      	movs	r2, #65	@ 0x41
 8002d7e:	2120      	movs	r1, #32
 8002d80:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2242      	movs	r2, #66	@ 0x42
 8002d86:	2100      	movs	r1, #0
 8002d88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2240      	movs	r2, #64	@ 0x40
 8002d8e:	2100      	movs	r1, #0
 8002d90:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e000      	b.n	8002d98 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002d96:	2302      	movs	r3, #2
  }
}
 8002d98:	0018      	movs	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b007      	add	sp, #28
 8002d9e:	bd90      	pop	{r4, r7, pc}
 8002da0:	80002400 	.word	0x80002400
 8002da4:	fe00e800 	.word	0xfe00e800

08002da8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	2202      	movs	r2, #2
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d103      	bne.n	8002dc6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d007      	beq.n	8002de4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2101      	movs	r1, #1
 8002de0:	430a      	orrs	r2, r1
 8002de2:	619a      	str	r2, [r3, #24]
  }
}
 8002de4:	46c0      	nop			@ (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b002      	add	sp, #8
 8002dea:	bd80      	pop	{r7, pc}

08002dec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	1dfb      	adds	r3, r7, #7
 8002dfa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dfc:	e03a      	b.n	8002e74 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	6839      	ldr	r1, [r7, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f000 f971 	bl	80030ec <I2C_IsErrorOccurred>
 8002e0a:	1e03      	subs	r3, r0, #0
 8002e0c:	d001      	beq.n	8002e12 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e040      	b.n	8002e94 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	3301      	adds	r3, #1
 8002e16:	d02d      	beq.n	8002e74 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e18:	f7ff fa18 	bl	800224c <HAL_GetTick>
 8002e1c:	0002      	movs	r2, r0
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d302      	bcc.n	8002e2e <I2C_WaitOnFlagUntilTimeout+0x42>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d122      	bne.n	8002e74 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	4013      	ands	r3, r2
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	425a      	negs	r2, r3
 8002e3e:	4153      	adcs	r3, r2
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	001a      	movs	r2, r3
 8002e44:	1dfb      	adds	r3, r7, #7
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d113      	bne.n	8002e74 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e50:	2220      	movs	r2, #32
 8002e52:	431a      	orrs	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2241      	movs	r2, #65	@ 0x41
 8002e5c:	2120      	movs	r1, #32
 8002e5e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2242      	movs	r2, #66	@ 0x42
 8002e64:	2100      	movs	r1, #0
 8002e66:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2240      	movs	r2, #64	@ 0x40
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e00f      	b.n	8002e94 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	425a      	negs	r2, r3
 8002e84:	4153      	adcs	r3, r2
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	001a      	movs	r2, r3
 8002e8a:	1dfb      	adds	r3, r7, #7
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d0b5      	beq.n	8002dfe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	0018      	movs	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b004      	add	sp, #16
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ea8:	e032      	b.n	8002f10 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f000 f91b 	bl	80030ec <I2C_IsErrorOccurred>
 8002eb6:	1e03      	subs	r3, r0, #0
 8002eb8:	d001      	beq.n	8002ebe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e030      	b.n	8002f20 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	d025      	beq.n	8002f10 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec4:	f7ff f9c2 	bl	800224c <HAL_GetTick>
 8002ec8:	0002      	movs	r2, r0
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d302      	bcc.n	8002eda <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d11a      	bne.n	8002f10 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d013      	beq.n	8002f10 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eec:	2220      	movs	r2, #32
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2241      	movs	r2, #65	@ 0x41
 8002ef8:	2120      	movs	r1, #32
 8002efa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2242      	movs	r2, #66	@ 0x42
 8002f00:	2100      	movs	r1, #0
 8002f02:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2240      	movs	r2, #64	@ 0x40
 8002f08:	2100      	movs	r1, #0
 8002f0a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e007      	b.n	8002f20 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	2202      	movs	r2, #2
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d1c5      	bne.n	8002eaa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	0018      	movs	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b004      	add	sp, #16
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f34:	e02f      	b.n	8002f96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	68b9      	ldr	r1, [r7, #8]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f000 f8d5 	bl	80030ec <I2C_IsErrorOccurred>
 8002f42:	1e03      	subs	r3, r0, #0
 8002f44:	d001      	beq.n	8002f4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e02d      	b.n	8002fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4a:	f7ff f97f 	bl	800224c <HAL_GetTick>
 8002f4e:	0002      	movs	r2, r0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d302      	bcc.n	8002f60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d11a      	bne.n	8002f96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	2220      	movs	r2, #32
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	d013      	beq.n	8002f96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f72:	2220      	movs	r2, #32
 8002f74:	431a      	orrs	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2241      	movs	r2, #65	@ 0x41
 8002f7e:	2120      	movs	r1, #32
 8002f80:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2242      	movs	r2, #66	@ 0x42
 8002f86:	2100      	movs	r1, #0
 8002f88:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2240      	movs	r2, #64	@ 0x40
 8002f8e:	2100      	movs	r1, #0
 8002f90:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e007      	b.n	8002fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	d1c8      	bne.n	8002f36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	b004      	add	sp, #16
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbc:	2317      	movs	r3, #23
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002fc4:	e07b      	b.n	80030be <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f000 f88d 	bl	80030ec <I2C_IsErrorOccurred>
 8002fd2:	1e03      	subs	r3, r0, #0
 8002fd4:	d003      	beq.n	8002fde <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8002fd6:	2317      	movs	r3, #23
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	2201      	movs	r2, #1
 8002fdc:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d140      	bne.n	800306e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8002fec:	2117      	movs	r1, #23
 8002fee:	187b      	adds	r3, r7, r1
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d13b      	bne.n	800306e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b04      	cmp	r3, #4
 8003002:	d106      	bne.n	8003012 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800300c:	187b      	adds	r3, r7, r1
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2210      	movs	r2, #16
 800301a:	4013      	ands	r3, r2
 800301c:	2b10      	cmp	r3, #16
 800301e:	d123      	bne.n	8003068 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2210      	movs	r2, #16
 8003026:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2204      	movs	r2, #4
 800302c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2220      	movs	r2, #32
 8003034:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4929      	ldr	r1, [pc, #164]	@ (80030e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8003042:	400a      	ands	r2, r1
 8003044:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2241      	movs	r2, #65	@ 0x41
 800304a:	2120      	movs	r1, #32
 800304c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2242      	movs	r2, #66	@ 0x42
 8003052:	2100      	movs	r1, #0
 8003054:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2240      	movs	r2, #64	@ 0x40
 800305a:	2100      	movs	r1, #0
 800305c:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800305e:	2317      	movs	r3, #23
 8003060:	18fb      	adds	r3, r7, r3
 8003062:	2201      	movs	r2, #1
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	e002      	b.n	800306e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800306e:	f7ff f8ed 	bl	800224c <HAL_GetTick>
 8003072:	0002      	movs	r2, r0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d11c      	bne.n	80030be <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003084:	2017      	movs	r0, #23
 8003086:	183b      	adds	r3, r7, r0
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d117      	bne.n	80030be <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	2204      	movs	r2, #4
 8003096:	4013      	ands	r3, r2
 8003098:	2b04      	cmp	r3, #4
 800309a:	d010      	beq.n	80030be <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a0:	2220      	movs	r2, #32
 80030a2:	431a      	orrs	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2241      	movs	r2, #65	@ 0x41
 80030ac:	2120      	movs	r1, #32
 80030ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2240      	movs	r2, #64	@ 0x40
 80030b4:	2100      	movs	r1, #0
 80030b6:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80030b8:	183b      	adds	r3, r7, r0
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2204      	movs	r2, #4
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d005      	beq.n	80030d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80030cc:	2317      	movs	r3, #23
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d100      	bne.n	80030d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80030d6:	e776      	b.n	8002fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80030d8:	2317      	movs	r3, #23
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	781b      	ldrb	r3, [r3, #0]
}
 80030de:	0018      	movs	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b006      	add	sp, #24
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			@ (mov r8, r8)
 80030e8:	fe00e800 	.word	0xfe00e800

080030ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	@ 0x28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f8:	2327      	movs	r3, #39	@ 0x27
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2210      	movs	r2, #16
 8003114:	4013      	ands	r3, r2
 8003116:	d100      	bne.n	800311a <I2C_IsErrorOccurred+0x2e>
 8003118:	e079      	b.n	800320e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2210      	movs	r2, #16
 8003120:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003122:	e057      	b.n	80031d4 <I2C_IsErrorOccurred+0xe8>
 8003124:	2227      	movs	r2, #39	@ 0x27
 8003126:	18bb      	adds	r3, r7, r2
 8003128:	18ba      	adds	r2, r7, r2
 800312a:	7812      	ldrb	r2, [r2, #0]
 800312c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	3301      	adds	r3, #1
 8003132:	d04f      	beq.n	80031d4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003134:	f7ff f88a 	bl	800224c <HAL_GetTick>
 8003138:	0002      	movs	r2, r0
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	429a      	cmp	r2, r3
 8003142:	d302      	bcc.n	800314a <I2C_IsErrorOccurred+0x5e>
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d144      	bne.n	80031d4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	2380      	movs	r3, #128	@ 0x80
 8003152:	01db      	lsls	r3, r3, #7
 8003154:	4013      	ands	r3, r2
 8003156:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003158:	2013      	movs	r0, #19
 800315a:	183b      	adds	r3, r7, r0
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	2142      	movs	r1, #66	@ 0x42
 8003160:	5c52      	ldrb	r2, [r2, r1]
 8003162:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	2380      	movs	r3, #128	@ 0x80
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	401a      	ands	r2, r3
 8003170:	2380      	movs	r3, #128	@ 0x80
 8003172:	021b      	lsls	r3, r3, #8
 8003174:	429a      	cmp	r2, r3
 8003176:	d126      	bne.n	80031c6 <I2C_IsErrorOccurred+0xda>
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	2380      	movs	r3, #128	@ 0x80
 800317c:	01db      	lsls	r3, r3, #7
 800317e:	429a      	cmp	r2, r3
 8003180:	d021      	beq.n	80031c6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003182:	183b      	adds	r3, r7, r0
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b20      	cmp	r3, #32
 8003188:	d01d      	beq.n	80031c6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2180      	movs	r1, #128	@ 0x80
 8003196:	01c9      	lsls	r1, r1, #7
 8003198:	430a      	orrs	r2, r1
 800319a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800319c:	f7ff f856 	bl	800224c <HAL_GetTick>
 80031a0:	0003      	movs	r3, r0
 80031a2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031a4:	e00f      	b.n	80031c6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031a6:	f7ff f851 	bl	800224c <HAL_GetTick>
 80031aa:	0002      	movs	r2, r0
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b19      	cmp	r3, #25
 80031b2:	d908      	bls.n	80031c6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	2220      	movs	r2, #32
 80031b8:	4313      	orrs	r3, r2
 80031ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80031bc:	2327      	movs	r3, #39	@ 0x27
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]

              break;
 80031c4:	e006      	b.n	80031d4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2220      	movs	r2, #32
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d1e8      	bne.n	80031a6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	2220      	movs	r2, #32
 80031dc:	4013      	ands	r3, r2
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d004      	beq.n	80031ec <I2C_IsErrorOccurred+0x100>
 80031e2:	2327      	movs	r3, #39	@ 0x27
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d09b      	beq.n	8003124 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031ec:	2327      	movs	r3, #39	@ 0x27
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d103      	bne.n	80031fe <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2220      	movs	r2, #32
 80031fc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	2204      	movs	r2, #4
 8003202:	4313      	orrs	r3, r2
 8003204:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003206:	2327      	movs	r3, #39	@ 0x27
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	2380      	movs	r3, #128	@ 0x80
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	4013      	ands	r3, r2
 800321e:	d00c      	beq.n	800323a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	2201      	movs	r2, #1
 8003224:	4313      	orrs	r3, r2
 8003226:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2280      	movs	r2, #128	@ 0x80
 800322e:	0052      	lsls	r2, r2, #1
 8003230:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003232:	2327      	movs	r3, #39	@ 0x27
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	2201      	movs	r2, #1
 8003238:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	2380      	movs	r3, #128	@ 0x80
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4013      	ands	r3, r2
 8003242:	d00c      	beq.n	800325e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	2208      	movs	r2, #8
 8003248:	4313      	orrs	r3, r2
 800324a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2280      	movs	r2, #128	@ 0x80
 8003252:	00d2      	lsls	r2, r2, #3
 8003254:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003256:	2327      	movs	r3, #39	@ 0x27
 8003258:	18fb      	adds	r3, r7, r3
 800325a:	2201      	movs	r2, #1
 800325c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	2380      	movs	r3, #128	@ 0x80
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4013      	ands	r3, r2
 8003266:	d00c      	beq.n	8003282 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	2202      	movs	r2, #2
 800326c:	4313      	orrs	r3, r2
 800326e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2280      	movs	r2, #128	@ 0x80
 8003276:	0092      	lsls	r2, r2, #2
 8003278:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800327a:	2327      	movs	r3, #39	@ 0x27
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003282:	2327      	movs	r3, #39	@ 0x27
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01d      	beq.n	80032c8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	0018      	movs	r0, r3
 8003290:	f7ff fd8a 	bl	8002da8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	490e      	ldr	r1, [pc, #56]	@ (80032d8 <I2C_IsErrorOccurred+0x1ec>)
 80032a0:	400a      	ands	r2, r1
 80032a2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2241      	movs	r2, #65	@ 0x41
 80032b4:	2120      	movs	r1, #32
 80032b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2242      	movs	r2, #66	@ 0x42
 80032bc:	2100      	movs	r1, #0
 80032be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2240      	movs	r2, #64	@ 0x40
 80032c4:	2100      	movs	r1, #0
 80032c6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80032c8:	2327      	movs	r3, #39	@ 0x27
 80032ca:	18fb      	adds	r3, r7, r3
 80032cc:	781b      	ldrb	r3, [r3, #0]
}
 80032ce:	0018      	movs	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b00a      	add	sp, #40	@ 0x28
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	46c0      	nop			@ (mov r8, r8)
 80032d8:	fe00e800 	.word	0xfe00e800

080032dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	0008      	movs	r0, r1
 80032e6:	0011      	movs	r1, r2
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	240a      	movs	r4, #10
 80032ec:	193b      	adds	r3, r7, r4
 80032ee:	1c02      	adds	r2, r0, #0
 80032f0:	801a      	strh	r2, [r3, #0]
 80032f2:	2009      	movs	r0, #9
 80032f4:	183b      	adds	r3, r7, r0
 80032f6:	1c0a      	adds	r2, r1, #0
 80032f8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032fa:	193b      	adds	r3, r7, r4
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	059b      	lsls	r3, r3, #22
 8003300:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003302:	183b      	adds	r3, r7, r0
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	0419      	lsls	r1, r3, #16
 8003308:	23ff      	movs	r3, #255	@ 0xff
 800330a:	041b      	lsls	r3, r3, #16
 800330c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800330e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003316:	4313      	orrs	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003326:	0d51      	lsrs	r1, r2, #21
 8003328:	2280      	movs	r2, #128	@ 0x80
 800332a:	00d2      	lsls	r2, r2, #3
 800332c:	400a      	ands	r2, r1
 800332e:	4907      	ldr	r1, [pc, #28]	@ (800334c <I2C_TransferConfig+0x70>)
 8003330:	430a      	orrs	r2, r1
 8003332:	43d2      	mvns	r2, r2
 8003334:	401a      	ands	r2, r3
 8003336:	0011      	movs	r1, r2
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	430a      	orrs	r2, r1
 8003340:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003342:	46c0      	nop			@ (mov r8, r8)
 8003344:	46bd      	mov	sp, r7
 8003346:	b007      	add	sp, #28
 8003348:	bd90      	pop	{r4, r7, pc}
 800334a:	46c0      	nop			@ (mov r8, r8)
 800334c:	03ff63ff 	.word	0x03ff63ff

08003350 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2241      	movs	r2, #65	@ 0x41
 800335e:	5c9b      	ldrb	r3, [r3, r2]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b20      	cmp	r3, #32
 8003364:	d138      	bne.n	80033d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2240      	movs	r2, #64	@ 0x40
 800336a:	5c9b      	ldrb	r3, [r3, r2]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003370:	2302      	movs	r3, #2
 8003372:	e032      	b.n	80033da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2240      	movs	r2, #64	@ 0x40
 8003378:	2101      	movs	r1, #1
 800337a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2241      	movs	r2, #65	@ 0x41
 8003380:	2124      	movs	r1, #36	@ 0x24
 8003382:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2101      	movs	r1, #1
 8003390:	438a      	bics	r2, r1
 8003392:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4911      	ldr	r1, [pc, #68]	@ (80033e4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80033a0:	400a      	ands	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6819      	ldr	r1, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2101      	movs	r1, #1
 80033c0:	430a      	orrs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2241      	movs	r2, #65	@ 0x41
 80033c8:	2120      	movs	r1, #32
 80033ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2240      	movs	r2, #64	@ 0x40
 80033d0:	2100      	movs	r1, #0
 80033d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e000      	b.n	80033da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
  }
}
 80033da:	0018      	movs	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	b002      	add	sp, #8
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	46c0      	nop			@ (mov r8, r8)
 80033e4:	ffffefff 	.word	0xffffefff

080033e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2241      	movs	r2, #65	@ 0x41
 80033f6:	5c9b      	ldrb	r3, [r3, r2]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d139      	bne.n	8003472 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2240      	movs	r2, #64	@ 0x40
 8003402:	5c9b      	ldrb	r3, [r3, r2]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003408:	2302      	movs	r3, #2
 800340a:	e033      	b.n	8003474 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2240      	movs	r2, #64	@ 0x40
 8003410:	2101      	movs	r1, #1
 8003412:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2241      	movs	r2, #65	@ 0x41
 8003418:	2124      	movs	r1, #36	@ 0x24
 800341a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2101      	movs	r1, #1
 8003428:	438a      	bics	r2, r1
 800342a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4a11      	ldr	r2, [pc, #68]	@ (800347c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003438:	4013      	ands	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	021b      	lsls	r3, r3, #8
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2101      	movs	r1, #1
 800345a:	430a      	orrs	r2, r1
 800345c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2241      	movs	r2, #65	@ 0x41
 8003462:	2120      	movs	r1, #32
 8003464:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2240      	movs	r2, #64	@ 0x40
 800346a:	2100      	movs	r1, #0
 800346c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	e000      	b.n	8003474 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003472:	2302      	movs	r3, #2
  }
}
 8003474:	0018      	movs	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	b004      	add	sp, #16
 800347a:	bd80      	pop	{r7, pc}
 800347c:	fffff0ff 	.word	0xfffff0ff

08003480 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003484:	4b04      	ldr	r3, [pc, #16]	@ (8003498 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4b03      	ldr	r3, [pc, #12]	@ (8003498 <HAL_PWR_EnableBkUpAccess+0x18>)
 800348a:	2180      	movs	r1, #128	@ 0x80
 800348c:	0049      	lsls	r1, r1, #1
 800348e:	430a      	orrs	r2, r1
 8003490:	601a      	str	r2, [r3, #0]
}
 8003492:	46c0      	nop			@ (mov r8, r8)
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40007000 	.word	0x40007000

0800349c <HAL_PWR_DisableBkUpAccess>:
/**
  * @brief  Disable access to the backup domain
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 80034a0:	4b04      	ldr	r3, [pc, #16]	@ (80034b4 <HAL_PWR_DisableBkUpAccess+0x18>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4b03      	ldr	r3, [pc, #12]	@ (80034b4 <HAL_PWR_DisableBkUpAccess+0x18>)
 80034a6:	4904      	ldr	r1, [pc, #16]	@ (80034b8 <HAL_PWR_DisableBkUpAccess+0x1c>)
 80034a8:	400a      	ands	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]
}
 80034ac:	46c0      	nop			@ (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	40007000 	.word	0x40007000
 80034b8:	fffffeff 	.word	0xfffffeff

080034bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80034c4:	4b19      	ldr	r3, [pc, #100]	@ (800352c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a19      	ldr	r2, [pc, #100]	@ (8003530 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	0019      	movs	r1, r3
 80034ce:	4b17      	ldr	r3, [pc, #92]	@ (800352c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	2380      	movs	r3, #128	@ 0x80
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	429a      	cmp	r2, r3
 80034de:	d11f      	bne.n	8003520 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80034e0:	4b14      	ldr	r3, [pc, #80]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	0013      	movs	r3, r2
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	189b      	adds	r3, r3, r2
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4912      	ldr	r1, [pc, #72]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80034ee:	0018      	movs	r0, r3
 80034f0:	f7fc fe08 	bl	8000104 <__udivsi3>
 80034f4:	0003      	movs	r3, r0
 80034f6:	3301      	adds	r3, #1
 80034f8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034fa:	e008      	b.n	800350e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3b01      	subs	r3, #1
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	e001      	b.n	800350e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e009      	b.n	8003522 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800350e:	4b07      	ldr	r3, [pc, #28]	@ (800352c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	2380      	movs	r3, #128	@ 0x80
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	401a      	ands	r2, r3
 8003518:	2380      	movs	r3, #128	@ 0x80
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	429a      	cmp	r2, r3
 800351e:	d0ed      	beq.n	80034fc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	0018      	movs	r0, r3
 8003524:	46bd      	mov	sp, r7
 8003526:	b004      	add	sp, #16
 8003528:	bd80      	pop	{r7, pc}
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	40007000 	.word	0x40007000
 8003530:	fffff9ff 	.word	0xfffff9ff
 8003534:	20000054 	.word	0x20000054
 8003538:	000f4240 	.word	0x000f4240

0800353c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e2fe      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2201      	movs	r2, #1
 8003554:	4013      	ands	r3, r2
 8003556:	d100      	bne.n	800355a <HAL_RCC_OscConfig+0x1e>
 8003558:	e07c      	b.n	8003654 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800355a:	4bc3      	ldr	r3, [pc, #780]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2238      	movs	r2, #56	@ 0x38
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003564:	4bc0      	ldr	r3, [pc, #768]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	2203      	movs	r2, #3
 800356a:	4013      	ands	r3, r2
 800356c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2b10      	cmp	r3, #16
 8003572:	d102      	bne.n	800357a <HAL_RCC_OscConfig+0x3e>
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d002      	beq.n	8003580 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b08      	cmp	r3, #8
 800357e:	d10b      	bne.n	8003598 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003580:	4bb9      	ldr	r3, [pc, #740]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	2380      	movs	r3, #128	@ 0x80
 8003586:	029b      	lsls	r3, r3, #10
 8003588:	4013      	ands	r3, r2
 800358a:	d062      	beq.n	8003652 <HAL_RCC_OscConfig+0x116>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d15e      	bne.n	8003652 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e2d9      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	2380      	movs	r3, #128	@ 0x80
 800359e:	025b      	lsls	r3, r3, #9
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_OscConfig+0x78>
 80035a4:	4bb0      	ldr	r3, [pc, #704]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	4baf      	ldr	r3, [pc, #700]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80035aa:	2180      	movs	r1, #128	@ 0x80
 80035ac:	0249      	lsls	r1, r1, #9
 80035ae:	430a      	orrs	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	e020      	b.n	80035f6 <HAL_RCC_OscConfig+0xba>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	23a0      	movs	r3, #160	@ 0xa0
 80035ba:	02db      	lsls	r3, r3, #11
 80035bc:	429a      	cmp	r2, r3
 80035be:	d10e      	bne.n	80035de <HAL_RCC_OscConfig+0xa2>
 80035c0:	4ba9      	ldr	r3, [pc, #676]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4ba8      	ldr	r3, [pc, #672]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80035c6:	2180      	movs	r1, #128	@ 0x80
 80035c8:	02c9      	lsls	r1, r1, #11
 80035ca:	430a      	orrs	r2, r1
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	4ba6      	ldr	r3, [pc, #664]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4ba5      	ldr	r3, [pc, #660]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80035d4:	2180      	movs	r1, #128	@ 0x80
 80035d6:	0249      	lsls	r1, r1, #9
 80035d8:	430a      	orrs	r2, r1
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	e00b      	b.n	80035f6 <HAL_RCC_OscConfig+0xba>
 80035de:	4ba2      	ldr	r3, [pc, #648]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	4ba1      	ldr	r3, [pc, #644]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80035e4:	49a1      	ldr	r1, [pc, #644]	@ (800386c <HAL_RCC_OscConfig+0x330>)
 80035e6:	400a      	ands	r2, r1
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	4b9f      	ldr	r3, [pc, #636]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b9e      	ldr	r3, [pc, #632]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80035f0:	499f      	ldr	r1, [pc, #636]	@ (8003870 <HAL_RCC_OscConfig+0x334>)
 80035f2:	400a      	ands	r2, r1
 80035f4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d014      	beq.n	8003628 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fe fe25 	bl	800224c <HAL_GetTick>
 8003602:	0003      	movs	r3, r0
 8003604:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003608:	f7fe fe20 	bl	800224c <HAL_GetTick>
 800360c:	0002      	movs	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	@ 0x64
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e298      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800361a:	4b93      	ldr	r3, [pc, #588]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	2380      	movs	r3, #128	@ 0x80
 8003620:	029b      	lsls	r3, r3, #10
 8003622:	4013      	ands	r3, r2
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0xcc>
 8003626:	e015      	b.n	8003654 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fe fe10 	bl	800224c <HAL_GetTick>
 800362c:	0003      	movs	r3, r0
 800362e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003632:	f7fe fe0b 	bl	800224c <HAL_GetTick>
 8003636:	0002      	movs	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b64      	cmp	r3, #100	@ 0x64
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e283      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003644:	4b88      	ldr	r3, [pc, #544]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	2380      	movs	r3, #128	@ 0x80
 800364a:	029b      	lsls	r3, r3, #10
 800364c:	4013      	ands	r3, r2
 800364e:	d1f0      	bne.n	8003632 <HAL_RCC_OscConfig+0xf6>
 8003650:	e000      	b.n	8003654 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003652:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2202      	movs	r2, #2
 800365a:	4013      	ands	r3, r2
 800365c:	d100      	bne.n	8003660 <HAL_RCC_OscConfig+0x124>
 800365e:	e099      	b.n	8003794 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003660:	4b81      	ldr	r3, [pc, #516]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2238      	movs	r2, #56	@ 0x38
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800366a:	4b7f      	ldr	r3, [pc, #508]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2203      	movs	r2, #3
 8003670:	4013      	ands	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	2b10      	cmp	r3, #16
 8003678:	d102      	bne.n	8003680 <HAL_RCC_OscConfig+0x144>
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d002      	beq.n	8003686 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d135      	bne.n	80036f2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003686:	4b78      	ldr	r3, [pc, #480]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	2380      	movs	r3, #128	@ 0x80
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4013      	ands	r3, r2
 8003690:	d005      	beq.n	800369e <HAL_RCC_OscConfig+0x162>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e256      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369e:	4b72      	ldr	r3, [pc, #456]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	4a74      	ldr	r2, [pc, #464]	@ (8003874 <HAL_RCC_OscConfig+0x338>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	0019      	movs	r1, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	021a      	lsls	r2, r3, #8
 80036ae:	4b6e      	ldr	r3, [pc, #440]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80036b0:	430a      	orrs	r2, r1
 80036b2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d112      	bne.n	80036e0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80036ba:	4b6b      	ldr	r3, [pc, #428]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a6e      	ldr	r2, [pc, #440]	@ (8003878 <HAL_RCC_OscConfig+0x33c>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	0019      	movs	r1, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	4b67      	ldr	r3, [pc, #412]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80036ca:	430a      	orrs	r2, r1
 80036cc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80036ce:	4b66      	ldr	r3, [pc, #408]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	0adb      	lsrs	r3, r3, #11
 80036d4:	2207      	movs	r2, #7
 80036d6:	4013      	ands	r3, r2
 80036d8:	4a68      	ldr	r2, [pc, #416]	@ (800387c <HAL_RCC_OscConfig+0x340>)
 80036da:	40da      	lsrs	r2, r3
 80036dc:	4b68      	ldr	r3, [pc, #416]	@ (8003880 <HAL_RCC_OscConfig+0x344>)
 80036de:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036e0:	4b68      	ldr	r3, [pc, #416]	@ (8003884 <HAL_RCC_OscConfig+0x348>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	0018      	movs	r0, r3
 80036e6:	f7fe fd55 	bl	8002194 <HAL_InitTick>
 80036ea:	1e03      	subs	r3, r0, #0
 80036ec:	d051      	beq.n	8003792 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e22c      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d030      	beq.n	800375c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80036fa:	4b5b      	ldr	r3, [pc, #364]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a5e      	ldr	r2, [pc, #376]	@ (8003878 <HAL_RCC_OscConfig+0x33c>)
 8003700:	4013      	ands	r3, r2
 8003702:	0019      	movs	r1, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	4b57      	ldr	r3, [pc, #348]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 800370a:	430a      	orrs	r2, r1
 800370c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800370e:	4b56      	ldr	r3, [pc, #344]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	4b55      	ldr	r3, [pc, #340]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 8003714:	2180      	movs	r1, #128	@ 0x80
 8003716:	0049      	lsls	r1, r1, #1
 8003718:	430a      	orrs	r2, r1
 800371a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fe fd96 	bl	800224c <HAL_GetTick>
 8003720:	0003      	movs	r3, r0
 8003722:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003726:	f7fe fd91 	bl	800224c <HAL_GetTick>
 800372a:	0002      	movs	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e209      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003738:	4b4b      	ldr	r3, [pc, #300]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	2380      	movs	r3, #128	@ 0x80
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4013      	ands	r3, r2
 8003742:	d0f0      	beq.n	8003726 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003744:	4b48      	ldr	r3, [pc, #288]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	4a4a      	ldr	r2, [pc, #296]	@ (8003874 <HAL_RCC_OscConfig+0x338>)
 800374a:	4013      	ands	r3, r2
 800374c:	0019      	movs	r1, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	021a      	lsls	r2, r3, #8
 8003754:	4b44      	ldr	r3, [pc, #272]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 8003756:	430a      	orrs	r2, r1
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	e01b      	b.n	8003794 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800375c:	4b42      	ldr	r3, [pc, #264]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	4b41      	ldr	r3, [pc, #260]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 8003762:	4949      	ldr	r1, [pc, #292]	@ (8003888 <HAL_RCC_OscConfig+0x34c>)
 8003764:	400a      	ands	r2, r1
 8003766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003768:	f7fe fd70 	bl	800224c <HAL_GetTick>
 800376c:	0003      	movs	r3, r0
 800376e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003772:	f7fe fd6b 	bl	800224c <HAL_GetTick>
 8003776:	0002      	movs	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e1e3      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003784:	4b38      	ldr	r3, [pc, #224]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	2380      	movs	r3, #128	@ 0x80
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	4013      	ands	r3, r2
 800378e:	d1f0      	bne.n	8003772 <HAL_RCC_OscConfig+0x236>
 8003790:	e000      	b.n	8003794 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003792:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2208      	movs	r2, #8
 800379a:	4013      	ands	r3, r2
 800379c:	d047      	beq.n	800382e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800379e:	4b32      	ldr	r3, [pc, #200]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2238      	movs	r2, #56	@ 0x38
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b18      	cmp	r3, #24
 80037a8:	d10a      	bne.n	80037c0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80037aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80037ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ae:	2202      	movs	r2, #2
 80037b0:	4013      	ands	r3, r2
 80037b2:	d03c      	beq.n	800382e <HAL_RCC_OscConfig+0x2f2>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d138      	bne.n	800382e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e1c5      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d019      	beq.n	80037fc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80037c8:	4b27      	ldr	r3, [pc, #156]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80037ca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80037cc:	4b26      	ldr	r3, [pc, #152]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80037ce:	2101      	movs	r1, #1
 80037d0:	430a      	orrs	r2, r1
 80037d2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fe fd3a 	bl	800224c <HAL_GetTick>
 80037d8:	0003      	movs	r3, r0
 80037da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037de:	f7fe fd35 	bl	800224c <HAL_GetTick>
 80037e2:	0002      	movs	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e1ad      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80037f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f4:	2202      	movs	r2, #2
 80037f6:	4013      	ands	r3, r2
 80037f8:	d0f1      	beq.n	80037de <HAL_RCC_OscConfig+0x2a2>
 80037fa:	e018      	b.n	800382e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80037fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 80037fe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003800:	4b19      	ldr	r3, [pc, #100]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 8003802:	2101      	movs	r1, #1
 8003804:	438a      	bics	r2, r1
 8003806:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fe fd20 	bl	800224c <HAL_GetTick>
 800380c:	0003      	movs	r3, r0
 800380e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003812:	f7fe fd1b 	bl	800224c <HAL_GetTick>
 8003816:	0002      	movs	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e193      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003824:	4b10      	ldr	r3, [pc, #64]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 8003826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003828:	2202      	movs	r2, #2
 800382a:	4013      	ands	r3, r2
 800382c:	d1f1      	bne.n	8003812 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2204      	movs	r2, #4
 8003834:	4013      	ands	r3, r2
 8003836:	d100      	bne.n	800383a <HAL_RCC_OscConfig+0x2fe>
 8003838:	e0c6      	b.n	80039c8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383a:	231f      	movs	r3, #31
 800383c:	18fb      	adds	r3, r7, r3
 800383e:	2200      	movs	r2, #0
 8003840:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003842:	4b09      	ldr	r3, [pc, #36]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2238      	movs	r2, #56	@ 0x38
 8003848:	4013      	ands	r3, r2
 800384a:	2b20      	cmp	r3, #32
 800384c:	d11e      	bne.n	800388c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800384e:	4b06      	ldr	r3, [pc, #24]	@ (8003868 <HAL_RCC_OscConfig+0x32c>)
 8003850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003852:	2202      	movs	r2, #2
 8003854:	4013      	ands	r3, r2
 8003856:	d100      	bne.n	800385a <HAL_RCC_OscConfig+0x31e>
 8003858:	e0b6      	b.n	80039c8 <HAL_RCC_OscConfig+0x48c>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d000      	beq.n	8003864 <HAL_RCC_OscConfig+0x328>
 8003862:	e0b1      	b.n	80039c8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e171      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
 8003868:	40021000 	.word	0x40021000
 800386c:	fffeffff 	.word	0xfffeffff
 8003870:	fffbffff 	.word	0xfffbffff
 8003874:	ffff80ff 	.word	0xffff80ff
 8003878:	ffffc7ff 	.word	0xffffc7ff
 800387c:	00f42400 	.word	0x00f42400
 8003880:	20000054 	.word	0x20000054
 8003884:	20000058 	.word	0x20000058
 8003888:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800388c:	4bb1      	ldr	r3, [pc, #708]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 800388e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003890:	2380      	movs	r3, #128	@ 0x80
 8003892:	055b      	lsls	r3, r3, #21
 8003894:	4013      	ands	r3, r2
 8003896:	d101      	bne.n	800389c <HAL_RCC_OscConfig+0x360>
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x362>
 800389c:	2300      	movs	r3, #0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d011      	beq.n	80038c6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80038a2:	4bac      	ldr	r3, [pc, #688]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 80038a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038a6:	4bab      	ldr	r3, [pc, #684]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 80038a8:	2180      	movs	r1, #128	@ 0x80
 80038aa:	0549      	lsls	r1, r1, #21
 80038ac:	430a      	orrs	r2, r1
 80038ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80038b0:	4ba8      	ldr	r3, [pc, #672]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 80038b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038b4:	2380      	movs	r3, #128	@ 0x80
 80038b6:	055b      	lsls	r3, r3, #21
 80038b8:	4013      	ands	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80038be:	231f      	movs	r3, #31
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	2201      	movs	r2, #1
 80038c4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038c6:	4ba4      	ldr	r3, [pc, #656]	@ (8003b58 <HAL_RCC_OscConfig+0x61c>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	2380      	movs	r3, #128	@ 0x80
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4013      	ands	r3, r2
 80038d0:	d11a      	bne.n	8003908 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038d2:	4ba1      	ldr	r3, [pc, #644]	@ (8003b58 <HAL_RCC_OscConfig+0x61c>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	4ba0      	ldr	r3, [pc, #640]	@ (8003b58 <HAL_RCC_OscConfig+0x61c>)
 80038d8:	2180      	movs	r1, #128	@ 0x80
 80038da:	0049      	lsls	r1, r1, #1
 80038dc:	430a      	orrs	r2, r1
 80038de:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80038e0:	f7fe fcb4 	bl	800224c <HAL_GetTick>
 80038e4:	0003      	movs	r3, r0
 80038e6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ea:	f7fe fcaf 	bl	800224c <HAL_GetTick>
 80038ee:	0002      	movs	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e127      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038fc:	4b96      	ldr	r3, [pc, #600]	@ (8003b58 <HAL_RCC_OscConfig+0x61c>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	2380      	movs	r3, #128	@ 0x80
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	4013      	ands	r3, r2
 8003906:	d0f0      	beq.n	80038ea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d106      	bne.n	800391e <HAL_RCC_OscConfig+0x3e2>
 8003910:	4b90      	ldr	r3, [pc, #576]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003912:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003914:	4b8f      	ldr	r3, [pc, #572]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003916:	2101      	movs	r1, #1
 8003918:	430a      	orrs	r2, r1
 800391a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800391c:	e01c      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b05      	cmp	r3, #5
 8003924:	d10c      	bne.n	8003940 <HAL_RCC_OscConfig+0x404>
 8003926:	4b8b      	ldr	r3, [pc, #556]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003928:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800392a:	4b8a      	ldr	r3, [pc, #552]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 800392c:	2104      	movs	r1, #4
 800392e:	430a      	orrs	r2, r1
 8003930:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003932:	4b88      	ldr	r3, [pc, #544]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003934:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003936:	4b87      	ldr	r3, [pc, #540]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003938:	2101      	movs	r1, #1
 800393a:	430a      	orrs	r2, r1
 800393c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800393e:	e00b      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
 8003940:	4b84      	ldr	r3, [pc, #528]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003942:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003944:	4b83      	ldr	r3, [pc, #524]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003946:	2101      	movs	r1, #1
 8003948:	438a      	bics	r2, r1
 800394a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800394c:	4b81      	ldr	r3, [pc, #516]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 800394e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003950:	4b80      	ldr	r3, [pc, #512]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003952:	2104      	movs	r1, #4
 8003954:	438a      	bics	r2, r1
 8003956:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d014      	beq.n	800398a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fe fc74 	bl	800224c <HAL_GetTick>
 8003964:	0003      	movs	r3, r0
 8003966:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003968:	e009      	b.n	800397e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396a:	f7fe fc6f 	bl	800224c <HAL_GetTick>
 800396e:	0002      	movs	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	4a79      	ldr	r2, [pc, #484]	@ (8003b5c <HAL_RCC_OscConfig+0x620>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e0e6      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800397e:	4b75      	ldr	r3, [pc, #468]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003982:	2202      	movs	r2, #2
 8003984:	4013      	ands	r3, r2
 8003986:	d0f0      	beq.n	800396a <HAL_RCC_OscConfig+0x42e>
 8003988:	e013      	b.n	80039b2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7fe fc5f 	bl	800224c <HAL_GetTick>
 800398e:	0003      	movs	r3, r0
 8003990:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003992:	e009      	b.n	80039a8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003994:	f7fe fc5a 	bl	800224c <HAL_GetTick>
 8003998:	0002      	movs	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	4a6f      	ldr	r2, [pc, #444]	@ (8003b5c <HAL_RCC_OscConfig+0x620>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e0d1      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 80039aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ac:	2202      	movs	r2, #2
 80039ae:	4013      	ands	r3, r2
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80039b2:	231f      	movs	r3, #31
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d105      	bne.n	80039c8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80039bc:	4b65      	ldr	r3, [pc, #404]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 80039be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039c0:	4b64      	ldr	r3, [pc, #400]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 80039c2:	4967      	ldr	r1, [pc, #412]	@ (8003b60 <HAL_RCC_OscConfig+0x624>)
 80039c4:	400a      	ands	r2, r1
 80039c6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d100      	bne.n	80039d2 <HAL_RCC_OscConfig+0x496>
 80039d0:	e0bb      	b.n	8003b4a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039d2:	4b60      	ldr	r3, [pc, #384]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2238      	movs	r2, #56	@ 0x38
 80039d8:	4013      	ands	r3, r2
 80039da:	2b10      	cmp	r3, #16
 80039dc:	d100      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4a4>
 80039de:	e07b      	b.n	8003ad8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d156      	bne.n	8003a96 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e8:	4b5a      	ldr	r3, [pc, #360]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4b59      	ldr	r3, [pc, #356]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 80039ee:	495d      	ldr	r1, [pc, #372]	@ (8003b64 <HAL_RCC_OscConfig+0x628>)
 80039f0:	400a      	ands	r2, r1
 80039f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7fe fc2a 	bl	800224c <HAL_GetTick>
 80039f8:	0003      	movs	r3, r0
 80039fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fe:	f7fe fc25 	bl	800224c <HAL_GetTick>
 8003a02:	0002      	movs	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e09d      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a10:	4b50      	ldr	r3, [pc, #320]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2380      	movs	r3, #128	@ 0x80
 8003a16:	049b      	lsls	r3, r3, #18
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d1f0      	bne.n	80039fe <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a1c:	4b4d      	ldr	r3, [pc, #308]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4a51      	ldr	r2, [pc, #324]	@ (8003b68 <HAL_RCC_OscConfig+0x62c>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	0019      	movs	r1, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1a      	ldr	r2, [r3, #32]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	4b42      	ldr	r3, [pc, #264]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a50:	4b40      	ldr	r3, [pc, #256]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4b3f      	ldr	r3, [pc, #252]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003a56:	2180      	movs	r1, #128	@ 0x80
 8003a58:	0449      	lsls	r1, r1, #17
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	4b3c      	ldr	r3, [pc, #240]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003a64:	2180      	movs	r1, #128	@ 0x80
 8003a66:	0549      	lsls	r1, r1, #21
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fe fbee 	bl	800224c <HAL_GetTick>
 8003a70:	0003      	movs	r3, r0
 8003a72:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a76:	f7fe fbe9 	bl	800224c <HAL_GetTick>
 8003a7a:	0002      	movs	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e061      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a88:	4b32      	ldr	r3, [pc, #200]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	2380      	movs	r3, #128	@ 0x80
 8003a8e:	049b      	lsls	r3, r3, #18
 8003a90:	4013      	ands	r3, r2
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCC_OscConfig+0x53a>
 8003a94:	e059      	b.n	8003b4a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a96:	4b2f      	ldr	r3, [pc, #188]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003a9c:	4931      	ldr	r1, [pc, #196]	@ (8003b64 <HAL_RCC_OscConfig+0x628>)
 8003a9e:	400a      	ands	r2, r1
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa2:	f7fe fbd3 	bl	800224c <HAL_GetTick>
 8003aa6:	0003      	movs	r3, r0
 8003aa8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aac:	f7fe fbce 	bl	800224c <HAL_GetTick>
 8003ab0:	0002      	movs	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e046      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003abe:	4b25      	ldr	r3, [pc, #148]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	2380      	movs	r3, #128	@ 0x80
 8003ac4:	049b      	lsls	r3, r3, #18
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003aca:	4b22      	ldr	r3, [pc, #136]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	4b21      	ldr	r3, [pc, #132]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003ad0:	4926      	ldr	r1, [pc, #152]	@ (8003b6c <HAL_RCC_OscConfig+0x630>)
 8003ad2:	400a      	ands	r2, r1
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	e038      	b.n	8003b4a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e033      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2203      	movs	r2, #3
 8003aee:	401a      	ands	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d126      	bne.n	8003b46 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2270      	movs	r2, #112	@ 0x70
 8003afc:	401a      	ands	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d11f      	bne.n	8003b46 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	23fe      	movs	r3, #254	@ 0xfe
 8003b0a:	01db      	lsls	r3, r3, #7
 8003b0c:	401a      	ands	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b12:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d116      	bne.n	8003b46 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	23f8      	movs	r3, #248	@ 0xf8
 8003b1c:	039b      	lsls	r3, r3, #14
 8003b1e:	401a      	ands	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d10e      	bne.n	8003b46 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	23e0      	movs	r3, #224	@ 0xe0
 8003b2c:	051b      	lsls	r3, r3, #20
 8003b2e:	401a      	ands	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d106      	bne.n	8003b46 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	0f5b      	lsrs	r3, r3, #29
 8003b3c:	075a      	lsls	r2, r3, #29
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d001      	beq.n	8003b4a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b008      	add	sp, #32
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40007000 	.word	0x40007000
 8003b5c:	00001388 	.word	0x00001388
 8003b60:	efffffff 	.word	0xefffffff
 8003b64:	feffffff 	.word	0xfeffffff
 8003b68:	11c1808c 	.word	0x11c1808c
 8003b6c:	eefefffc 	.word	0xeefefffc

08003b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0e9      	b.n	8003d58 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b84:	4b76      	ldr	r3, [pc, #472]	@ (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2207      	movs	r2, #7
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d91e      	bls.n	8003bd0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	4b73      	ldr	r3, [pc, #460]	@ (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2207      	movs	r2, #7
 8003b98:	4393      	bics	r3, r2
 8003b9a:	0019      	movs	r1, r3
 8003b9c:	4b70      	ldr	r3, [pc, #448]	@ (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ba4:	f7fe fb52 	bl	800224c <HAL_GetTick>
 8003ba8:	0003      	movs	r3, r0
 8003baa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003bac:	e009      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bae:	f7fe fb4d 	bl	800224c <HAL_GetTick>
 8003bb2:	0002      	movs	r2, r0
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	4a6a      	ldr	r2, [pc, #424]	@ (8003d64 <HAL_RCC_ClockConfig+0x1f4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e0ca      	b.n	8003d58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003bc2:	4b67      	ldr	r3, [pc, #412]	@ (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2207      	movs	r2, #7
 8003bc8:	4013      	ands	r3, r2
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d1ee      	bne.n	8003bae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	d015      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2204      	movs	r2, #4
 8003be0:	4013      	ands	r3, r2
 8003be2:	d006      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003be4:	4b60      	ldr	r3, [pc, #384]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f8>)
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	4b5f      	ldr	r3, [pc, #380]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f8>)
 8003bea:	21e0      	movs	r1, #224	@ 0xe0
 8003bec:	01c9      	lsls	r1, r1, #7
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf2:	4b5d      	ldr	r3, [pc, #372]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f8>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	4a5d      	ldr	r2, [pc, #372]	@ (8003d6c <HAL_RCC_ClockConfig+0x1fc>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	0019      	movs	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	4b59      	ldr	r3, [pc, #356]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f8>)
 8003c02:	430a      	orrs	r2, r1
 8003c04:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d057      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d107      	bne.n	8003c28 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c18:	4b53      	ldr	r3, [pc, #332]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f8>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	2380      	movs	r3, #128	@ 0x80
 8003c1e:	029b      	lsls	r3, r3, #10
 8003c20:	4013      	ands	r3, r2
 8003c22:	d12b      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e097      	b.n	8003d58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c30:	4b4d      	ldr	r3, [pc, #308]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f8>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	2380      	movs	r3, #128	@ 0x80
 8003c36:	049b      	lsls	r3, r3, #18
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d11f      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e08b      	b.n	8003d58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d107      	bne.n	8003c58 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c48:	4b47      	ldr	r3, [pc, #284]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f8>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	2380      	movs	r3, #128	@ 0x80
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4013      	ands	r3, r2
 8003c52:	d113      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e07f      	b.n	8003d58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d106      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c60:	4b41      	ldr	r3, [pc, #260]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f8>)
 8003c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c64:	2202      	movs	r2, #2
 8003c66:	4013      	ands	r3, r2
 8003c68:	d108      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e074      	b.n	8003d58 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f8>)
 8003c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c72:	2202      	movs	r2, #2
 8003c74:	4013      	ands	r3, r2
 8003c76:	d101      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e06d      	b.n	8003d58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c7c:	4b3a      	ldr	r3, [pc, #232]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f8>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2207      	movs	r2, #7
 8003c82:	4393      	bics	r3, r2
 8003c84:	0019      	movs	r1, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	4b37      	ldr	r3, [pc, #220]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f8>)
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c90:	f7fe fadc 	bl	800224c <HAL_GetTick>
 8003c94:	0003      	movs	r3, r0
 8003c96:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c98:	e009      	b.n	8003cae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c9a:	f7fe fad7 	bl	800224c <HAL_GetTick>
 8003c9e:	0002      	movs	r2, r0
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	4a2f      	ldr	r2, [pc, #188]	@ (8003d64 <HAL_RCC_ClockConfig+0x1f4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e054      	b.n	8003d58 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cae:	4b2e      	ldr	r3, [pc, #184]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f8>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2238      	movs	r2, #56	@ 0x38
 8003cb4:	401a      	ands	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d1ec      	bne.n	8003c9a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc0:	4b27      	ldr	r3, [pc, #156]	@ (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2207      	movs	r2, #7
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d21e      	bcs.n	8003d0c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cce:	4b24      	ldr	r3, [pc, #144]	@ (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2207      	movs	r2, #7
 8003cd4:	4393      	bics	r3, r2
 8003cd6:	0019      	movs	r1, r3
 8003cd8:	4b21      	ldr	r3, [pc, #132]	@ (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ce0:	f7fe fab4 	bl	800224c <HAL_GetTick>
 8003ce4:	0003      	movs	r3, r0
 8003ce6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ce8:	e009      	b.n	8003cfe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cea:	f7fe faaf 	bl	800224c <HAL_GetTick>
 8003cee:	0002      	movs	r2, r0
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d64 <HAL_RCC_ClockConfig+0x1f4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e02c      	b.n	8003d58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003cfe:	4b18      	ldr	r3, [pc, #96]	@ (8003d60 <HAL_RCC_ClockConfig+0x1f0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2207      	movs	r2, #7
 8003d04:	4013      	ands	r3, r2
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d1ee      	bne.n	8003cea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2204      	movs	r2, #4
 8003d12:	4013      	ands	r3, r2
 8003d14:	d009      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003d16:	4b14      	ldr	r3, [pc, #80]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f8>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	4a15      	ldr	r2, [pc, #84]	@ (8003d70 <HAL_RCC_ClockConfig+0x200>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	0019      	movs	r1, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	4b10      	ldr	r3, [pc, #64]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f8>)
 8003d26:	430a      	orrs	r2, r1
 8003d28:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003d2a:	f000 f829 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8003d2e:	0001      	movs	r1, r0
 8003d30:	4b0d      	ldr	r3, [pc, #52]	@ (8003d68 <HAL_RCC_ClockConfig+0x1f8>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	0a1b      	lsrs	r3, r3, #8
 8003d36:	220f      	movs	r2, #15
 8003d38:	401a      	ands	r2, r3
 8003d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8003d74 <HAL_RCC_ClockConfig+0x204>)
 8003d3c:	0092      	lsls	r2, r2, #2
 8003d3e:	58d3      	ldr	r3, [r2, r3]
 8003d40:	221f      	movs	r2, #31
 8003d42:	4013      	ands	r3, r2
 8003d44:	000a      	movs	r2, r1
 8003d46:	40da      	lsrs	r2, r3
 8003d48:	4b0b      	ldr	r3, [pc, #44]	@ (8003d78 <HAL_RCC_ClockConfig+0x208>)
 8003d4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d7c <HAL_RCC_ClockConfig+0x20c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	0018      	movs	r0, r3
 8003d52:	f7fe fa1f 	bl	8002194 <HAL_InitTick>
 8003d56:	0003      	movs	r3, r0
}
 8003d58:	0018      	movs	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b004      	add	sp, #16
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40022000 	.word	0x40022000
 8003d64:	00001388 	.word	0x00001388
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	fffff0ff 	.word	0xfffff0ff
 8003d70:	ffff8fff 	.word	0xffff8fff
 8003d74:	08005d58 	.word	0x08005d58
 8003d78:	20000054 	.word	0x20000054
 8003d7c:	20000058 	.word	0x20000058

08003d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d86:	4b3c      	ldr	r3, [pc, #240]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2238      	movs	r2, #56	@ 0x38
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d10f      	bne.n	8003db0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003d90:	4b39      	ldr	r3, [pc, #228]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	0adb      	lsrs	r3, r3, #11
 8003d96:	2207      	movs	r2, #7
 8003d98:	4013      	ands	r3, r2
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	0013      	movs	r3, r2
 8003da0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003da2:	6839      	ldr	r1, [r7, #0]
 8003da4:	4835      	ldr	r0, [pc, #212]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003da6:	f7fc f9ad 	bl	8000104 <__udivsi3>
 8003daa:	0003      	movs	r3, r0
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	e05d      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003db0:	4b31      	ldr	r3, [pc, #196]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2238      	movs	r2, #56	@ 0x38
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d102      	bne.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003dbc:	4b30      	ldr	r3, [pc, #192]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x100>)
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	e054      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dc2:	4b2d      	ldr	r3, [pc, #180]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2238      	movs	r2, #56	@ 0x38
 8003dc8:	4013      	ands	r3, r2
 8003dca:	2b10      	cmp	r3, #16
 8003dcc:	d138      	bne.n	8003e40 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003dce:	4b2a      	ldr	r3, [pc, #168]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dd8:	4b27      	ldr	r3, [pc, #156]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	2207      	movs	r2, #7
 8003de0:	4013      	ands	r3, r2
 8003de2:	3301      	adds	r3, #1
 8003de4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d10d      	bne.n	8003e08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	4824      	ldr	r0, [pc, #144]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x100>)
 8003df0:	f7fc f988 	bl	8000104 <__udivsi3>
 8003df4:	0003      	movs	r3, r0
 8003df6:	0019      	movs	r1, r3
 8003df8:	4b1f      	ldr	r3, [pc, #124]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	0a1b      	lsrs	r3, r3, #8
 8003dfe:	227f      	movs	r2, #127	@ 0x7f
 8003e00:	4013      	ands	r3, r2
 8003e02:	434b      	muls	r3, r1
 8003e04:	617b      	str	r3, [r7, #20]
        break;
 8003e06:	e00d      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	481c      	ldr	r0, [pc, #112]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003e0c:	f7fc f97a 	bl	8000104 <__udivsi3>
 8003e10:	0003      	movs	r3, r0
 8003e12:	0019      	movs	r1, r3
 8003e14:	4b18      	ldr	r3, [pc, #96]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	0a1b      	lsrs	r3, r3, #8
 8003e1a:	227f      	movs	r2, #127	@ 0x7f
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	434b      	muls	r3, r1
 8003e20:	617b      	str	r3, [r7, #20]
        break;
 8003e22:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003e24:	4b14      	ldr	r3, [pc, #80]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	0f5b      	lsrs	r3, r3, #29
 8003e2a:	2207      	movs	r2, #7
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	3301      	adds	r3, #1
 8003e30:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	6978      	ldr	r0, [r7, #20]
 8003e36:	f7fc f965 	bl	8000104 <__udivsi3>
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	e015      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003e40:	4b0d      	ldr	r3, [pc, #52]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2238      	movs	r2, #56	@ 0x38
 8003e46:	4013      	ands	r3, r2
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	d103      	bne.n	8003e54 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003e4c:	2380      	movs	r3, #128	@ 0x80
 8003e4e:	021b      	lsls	r3, r3, #8
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	e00b      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003e54:	4b08      	ldr	r3, [pc, #32]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2238      	movs	r2, #56	@ 0x38
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b18      	cmp	r3, #24
 8003e5e:	d103      	bne.n	8003e68 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003e60:	23fa      	movs	r3, #250	@ 0xfa
 8003e62:	01db      	lsls	r3, r3, #7
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	e001      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e6c:	693b      	ldr	r3, [r7, #16]
}
 8003e6e:	0018      	movs	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b006      	add	sp, #24
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	46c0      	nop			@ (mov r8, r8)
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	00f42400 	.word	0x00f42400
 8003e80:	007a1200 	.word	0x007a1200

08003e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003e8c:	2313      	movs	r3, #19
 8003e8e:	18fb      	adds	r3, r7, r3
 8003e90:	2200      	movs	r2, #0
 8003e92:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e94:	2312      	movs	r3, #18
 8003e96:	18fb      	adds	r3, r7, r3
 8003e98:	2200      	movs	r2, #0
 8003e9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	2380      	movs	r3, #128	@ 0x80
 8003ea2:	029b      	lsls	r3, r3, #10
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d100      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003ea8:	e0a3      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eaa:	2011      	movs	r0, #17
 8003eac:	183b      	adds	r3, r7, r0
 8003eae:	2200      	movs	r2, #0
 8003eb0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb2:	4ba5      	ldr	r3, [pc, #660]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003eb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003eb6:	2380      	movs	r3, #128	@ 0x80
 8003eb8:	055b      	lsls	r3, r3, #21
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d110      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ebe:	4ba2      	ldr	r3, [pc, #648]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ec0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ec2:	4ba1      	ldr	r3, [pc, #644]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ec4:	2180      	movs	r1, #128	@ 0x80
 8003ec6:	0549      	lsls	r1, r1, #21
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ecc:	4b9e      	ldr	r3, [pc, #632]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ece:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ed0:	2380      	movs	r3, #128	@ 0x80
 8003ed2:	055b      	lsls	r3, r3, #21
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eda:	183b      	adds	r3, r7, r0
 8003edc:	2201      	movs	r2, #1
 8003ede:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ee0:	4b9a      	ldr	r3, [pc, #616]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4b99      	ldr	r3, [pc, #612]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003ee6:	2180      	movs	r1, #128	@ 0x80
 8003ee8:	0049      	lsls	r1, r1, #1
 8003eea:	430a      	orrs	r2, r1
 8003eec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eee:	f7fe f9ad 	bl	800224c <HAL_GetTick>
 8003ef2:	0003      	movs	r3, r0
 8003ef4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ef6:	e00b      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef8:	f7fe f9a8 	bl	800224c <HAL_GetTick>
 8003efc:	0002      	movs	r2, r0
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d904      	bls.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003f06:	2313      	movs	r3, #19
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	701a      	strb	r2, [r3, #0]
        break;
 8003f0e:	e005      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f10:	4b8e      	ldr	r3, [pc, #568]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	2380      	movs	r3, #128	@ 0x80
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4013      	ands	r3, r2
 8003f1a:	d0ed      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003f1c:	2313      	movs	r3, #19
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d154      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f26:	4b88      	ldr	r3, [pc, #544]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f2a:	23c0      	movs	r3, #192	@ 0xc0
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4013      	ands	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d019      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d014      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f42:	4b81      	ldr	r3, [pc, #516]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f46:	4a82      	ldr	r2, [pc, #520]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f4c:	4b7e      	ldr	r3, [pc, #504]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f50:	4b7d      	ldr	r3, [pc, #500]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f52:	2180      	movs	r1, #128	@ 0x80
 8003f54:	0249      	lsls	r1, r1, #9
 8003f56:	430a      	orrs	r2, r1
 8003f58:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f5a:	4b7b      	ldr	r3, [pc, #492]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f5e:	4b7a      	ldr	r3, [pc, #488]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f60:	497c      	ldr	r1, [pc, #496]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003f62:	400a      	ands	r2, r1
 8003f64:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f66:	4b78      	ldr	r3, [pc, #480]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	4013      	ands	r3, r2
 8003f72:	d016      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fe f96a 	bl	800224c <HAL_GetTick>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f7c:	e00c      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7e:	f7fe f965 	bl	800224c <HAL_GetTick>
 8003f82:	0002      	movs	r2, r0
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	4a73      	ldr	r2, [pc, #460]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d904      	bls.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003f8e:	2313      	movs	r3, #19
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	2203      	movs	r2, #3
 8003f94:	701a      	strb	r2, [r3, #0]
            break;
 8003f96:	e004      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f98:	4b6b      	ldr	r3, [pc, #428]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d0ed      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003fa2:	2313      	movs	r3, #19
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10a      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fac:	4b66      	ldr	r3, [pc, #408]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb0:	4a67      	ldr	r2, [pc, #412]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	0019      	movs	r1, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fba:	4b63      	ldr	r3, [pc, #396]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003fc0:	e00c      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fc2:	2312      	movs	r3, #18
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	2213      	movs	r2, #19
 8003fc8:	18ba      	adds	r2, r7, r2
 8003fca:	7812      	ldrb	r2, [r2, #0]
 8003fcc:	701a      	strb	r2, [r3, #0]
 8003fce:	e005      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd0:	2312      	movs	r3, #18
 8003fd2:	18fb      	adds	r3, r7, r3
 8003fd4:	2213      	movs	r2, #19
 8003fd6:	18ba      	adds	r2, r7, r2
 8003fd8:	7812      	ldrb	r2, [r2, #0]
 8003fda:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fdc:	2311      	movs	r3, #17
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d105      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe6:	4b58      	ldr	r3, [pc, #352]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fe8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fea:	4b57      	ldr	r3, [pc, #348]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fec:	495b      	ldr	r1, [pc, #364]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003fee:	400a      	ands	r2, r1
 8003ff0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d009      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ffc:	4b52      	ldr	r3, [pc, #328]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004000:	2203      	movs	r2, #3
 8004002:	4393      	bics	r3, r2
 8004004:	0019      	movs	r1, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	4b4f      	ldr	r3, [pc, #316]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800400c:	430a      	orrs	r2, r1
 800400e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2210      	movs	r2, #16
 8004016:	4013      	ands	r3, r2
 8004018:	d009      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800401a:	4b4b      	ldr	r3, [pc, #300]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800401c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401e:	4a50      	ldr	r2, [pc, #320]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004020:	4013      	ands	r3, r2
 8004022:	0019      	movs	r1, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	4b47      	ldr	r3, [pc, #284]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800402a:	430a      	orrs	r2, r1
 800402c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	2380      	movs	r3, #128	@ 0x80
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4013      	ands	r3, r2
 8004038:	d009      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800403a:	4b43      	ldr	r3, [pc, #268]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800403c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403e:	4a49      	ldr	r2, [pc, #292]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004040:	4013      	ands	r3, r2
 8004042:	0019      	movs	r1, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	4b3f      	ldr	r3, [pc, #252]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800404a:	430a      	orrs	r2, r1
 800404c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	2380      	movs	r3, #128	@ 0x80
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	4013      	ands	r3, r2
 8004058:	d009      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800405a:	4b3b      	ldr	r3, [pc, #236]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800405c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405e:	4a42      	ldr	r2, [pc, #264]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004060:	4013      	ands	r3, r2
 8004062:	0019      	movs	r1, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699a      	ldr	r2, [r3, #24]
 8004068:	4b37      	ldr	r3, [pc, #220]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800406a:	430a      	orrs	r2, r1
 800406c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2220      	movs	r2, #32
 8004074:	4013      	ands	r3, r2
 8004076:	d009      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004078:	4b33      	ldr	r3, [pc, #204]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800407a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407c:	4a3b      	ldr	r2, [pc, #236]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800407e:	4013      	ands	r3, r2
 8004080:	0019      	movs	r1, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	4b30      	ldr	r3, [pc, #192]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004088:	430a      	orrs	r2, r1
 800408a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	2380      	movs	r3, #128	@ 0x80
 8004092:	01db      	lsls	r3, r3, #7
 8004094:	4013      	ands	r3, r2
 8004096:	d015      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004098:	4b2b      	ldr	r3, [pc, #172]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800409a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	0899      	lsrs	r1, r3, #2
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69da      	ldr	r2, [r3, #28]
 80040a4:	4b28      	ldr	r3, [pc, #160]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040a6:	430a      	orrs	r2, r1
 80040a8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69da      	ldr	r2, [r3, #28]
 80040ae:	2380      	movs	r3, #128	@ 0x80
 80040b0:	05db      	lsls	r3, r3, #23
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d106      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80040b6:	4b24      	ldr	r3, [pc, #144]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	4b23      	ldr	r3, [pc, #140]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040bc:	2180      	movs	r1, #128	@ 0x80
 80040be:	0249      	lsls	r1, r1, #9
 80040c0:	430a      	orrs	r2, r1
 80040c2:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	2380      	movs	r3, #128	@ 0x80
 80040ca:	039b      	lsls	r3, r3, #14
 80040cc:	4013      	ands	r3, r2
 80040ce:	d016      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80040d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d4:	4a26      	ldr	r2, [pc, #152]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	0019      	movs	r1, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1a      	ldr	r2, [r3, #32]
 80040de:	4b1a      	ldr	r3, [pc, #104]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040e0:	430a      	orrs	r2, r1
 80040e2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1a      	ldr	r2, [r3, #32]
 80040e8:	2380      	movs	r3, #128	@ 0x80
 80040ea:	03db      	lsls	r3, r3, #15
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d106      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80040f0:	4b15      	ldr	r3, [pc, #84]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	4b14      	ldr	r3, [pc, #80]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040f6:	2180      	movs	r1, #128	@ 0x80
 80040f8:	0449      	lsls	r1, r1, #17
 80040fa:	430a      	orrs	r2, r1
 80040fc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	2380      	movs	r3, #128	@ 0x80
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	4013      	ands	r3, r2
 8004108:	d016      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800410a:	4b0f      	ldr	r3, [pc, #60]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800410c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410e:	4a19      	ldr	r2, [pc, #100]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004110:	4013      	ands	r3, r2
 8004112:	0019      	movs	r1, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	4b0b      	ldr	r3, [pc, #44]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800411a:	430a      	orrs	r2, r1
 800411c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	2380      	movs	r3, #128	@ 0x80
 8004124:	01db      	lsls	r3, r3, #7
 8004126:	429a      	cmp	r2, r3
 8004128:	d106      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800412a:	4b07      	ldr	r3, [pc, #28]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	4b06      	ldr	r3, [pc, #24]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004130:	2180      	movs	r1, #128	@ 0x80
 8004132:	0249      	lsls	r1, r1, #9
 8004134:	430a      	orrs	r2, r1
 8004136:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004138:	2312      	movs	r3, #18
 800413a:	18fb      	adds	r3, r7, r3
 800413c:	781b      	ldrb	r3, [r3, #0]
}
 800413e:	0018      	movs	r0, r3
 8004140:	46bd      	mov	sp, r7
 8004142:	b006      	add	sp, #24
 8004144:	bd80      	pop	{r7, pc}
 8004146:	46c0      	nop			@ (mov r8, r8)
 8004148:	40021000 	.word	0x40021000
 800414c:	40007000 	.word	0x40007000
 8004150:	fffffcff 	.word	0xfffffcff
 8004154:	fffeffff 	.word	0xfffeffff
 8004158:	00001388 	.word	0x00001388
 800415c:	efffffff 	.word	0xefffffff
 8004160:	fffff3ff 	.word	0xfffff3ff
 8004164:	fff3ffff 	.word	0xfff3ffff
 8004168:	ffcfffff 	.word	0xffcfffff
 800416c:	ffffcfff 	.word	0xffffcfff
 8004170:	ffbfffff 	.word	0xffbfffff
 8004174:	ffff3fff 	.word	0xffff3fff

08004178 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8004178:	b590      	push	{r4, r7, lr}
 800417a:	b08b      	sub	sp, #44	@ 0x2c
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8004180:	2427      	movs	r4, #39	@ 0x27
 8004182:	193b      	adds	r3, r7, r4
 8004184:	2200      	movs	r2, #0
 8004186:	701a      	strb	r2, [r3, #0]
  FlagStatus       backupchanged = RESET;
 8004188:	2326      	movs	r3, #38	@ 0x26
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 8004190:	4b31      	ldr	r3, [pc, #196]	@ (8004258 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004192:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004194:	4b30      	ldr	r3, [pc, #192]	@ (8004258 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004196:	2101      	movs	r1, #1
 8004198:	430a      	orrs	r2, r1
 800419a:	635a      	str	r2, [r3, #52]	@ 0x34
 800419c:	4b2e      	ldr	r3, [pc, #184]	@ (8004258 <HAL_RCCEx_EnableLSCO+0xe0>)
 800419e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a0:	2201      	movs	r2, #1
 80041a2:	4013      	ands	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 80041a8:	2110      	movs	r1, #16
 80041aa:	187b      	adds	r3, r7, r1
 80041ac:	2204      	movs	r2, #4
 80041ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041b0:	187b      	adds	r3, r7, r1
 80041b2:	2203      	movs	r2, #3
 80041b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b6:	187b      	adds	r3, r7, r1
 80041b8:	2203      	movs	r2, #3
 80041ba:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041bc:	187b      	adds	r3, r7, r1
 80041be:	2200      	movs	r2, #0
 80041c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 80041c2:	187a      	adds	r2, r7, r1
 80041c4:	23a0      	movs	r3, #160	@ 0xa0
 80041c6:	05db      	lsls	r3, r3, #23
 80041c8:	0011      	movs	r1, r2
 80041ca:	0018      	movs	r0, r3
 80041cc:	f7fe f926 	bl	800241c <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d0:	4b21      	ldr	r3, [pc, #132]	@ (8004258 <HAL_RCCEx_EnableLSCO+0xe0>)
 80041d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041d4:	2380      	movs	r3, #128	@ 0x80
 80041d6:	055b      	lsls	r3, r3, #21
 80041d8:	4013      	ands	r3, r2
 80041da:	d110      	bne.n	80041fe <HAL_RCCEx_EnableLSCO+0x86>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004258 <HAL_RCCEx_EnableLSCO+0xe0>)
 80041de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004258 <HAL_RCCEx_EnableLSCO+0xe0>)
 80041e2:	2180      	movs	r1, #128	@ 0x80
 80041e4:	0549      	lsls	r1, r1, #21
 80041e6:	430a      	orrs	r2, r1
 80041e8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80041ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004258 <HAL_RCCEx_EnableLSCO+0xe0>)
 80041ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041ee:	2380      	movs	r3, #128	@ 0x80
 80041f0:	055b      	lsls	r3, r3, #21
 80041f2:	4013      	ands	r3, r2
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 80041f8:	193b      	adds	r3, r7, r4
 80041fa:	2201      	movs	r2, #1
 80041fc:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041fe:	4b17      	ldr	r3, [pc, #92]	@ (800425c <HAL_RCCEx_EnableLSCO+0xe4>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	2380      	movs	r3, #128	@ 0x80
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	4013      	ands	r3, r2
 8004208:	d105      	bne.n	8004216 <HAL_RCCEx_EnableLSCO+0x9e>
  {
    HAL_PWR_EnableBkUpAccess();
 800420a:	f7ff f939 	bl	8003480 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 800420e:	2326      	movs	r3, #38	@ 0x26
 8004210:	18fb      	adds	r3, r7, r3
 8004212:	2201      	movs	r2, #1
 8004214:	701a      	strb	r2, [r3, #0]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8004216:	4b10      	ldr	r3, [pc, #64]	@ (8004258 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800421a:	4a11      	ldr	r2, [pc, #68]	@ (8004260 <HAL_RCCEx_EnableLSCO+0xe8>)
 800421c:	401a      	ands	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	431a      	orrs	r2, r3
 8004222:	4b0d      	ldr	r3, [pc, #52]	@ (8004258 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004224:	2180      	movs	r1, #128	@ 0x80
 8004226:	0449      	lsls	r1, r1, #17
 8004228:	430a      	orrs	r2, r1
 800422a:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (backupchanged == SET)
 800422c:	2326      	movs	r3, #38	@ 0x26
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_RCCEx_EnableLSCO+0xc2>
  {
    HAL_PWR_DisableBkUpAccess();
 8004236:	f7ff f931 	bl	800349c <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 800423a:	2327      	movs	r3, #39	@ 0x27
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d105      	bne.n	8004250 <HAL_RCCEx_EnableLSCO+0xd8>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8004244:	4b04      	ldr	r3, [pc, #16]	@ (8004258 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004246:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004248:	4b03      	ldr	r3, [pc, #12]	@ (8004258 <HAL_RCCEx_EnableLSCO+0xe0>)
 800424a:	4906      	ldr	r1, [pc, #24]	@ (8004264 <HAL_RCCEx_EnableLSCO+0xec>)
 800424c:	400a      	ands	r2, r1
 800424e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8004250:	46c0      	nop			@ (mov r8, r8)
 8004252:	46bd      	mov	sp, r7
 8004254:	b00b      	add	sp, #44	@ 0x2c
 8004256:	bd90      	pop	{r4, r7, pc}
 8004258:	40021000 	.word	0x40021000
 800425c:	40007000 	.word	0x40007000
 8004260:	fcffffff 	.word	0xfcffffff
 8004264:	efffffff 	.word	0xefffffff

08004268 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004268:	b5b0      	push	{r4, r5, r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004270:	230f      	movs	r3, #15
 8004272:	18fb      	adds	r3, r7, r3
 8004274:	2201      	movs	r2, #1
 8004276:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d100      	bne.n	8004280 <HAL_RTC_Init+0x18>
 800427e:	e08c      	b.n	800439a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2229      	movs	r2, #41	@ 0x29
 8004284:	5c9b      	ldrb	r3, [r3, r2]
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10b      	bne.n	80042a4 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2228      	movs	r2, #40	@ 0x28
 8004290:	2100      	movs	r1, #0
 8004292:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2288      	movs	r2, #136	@ 0x88
 8004298:	0212      	lsls	r2, r2, #8
 800429a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	0018      	movs	r0, r3
 80042a0:	f7fd fe20 	bl	8001ee4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2229      	movs	r2, #41	@ 0x29
 80042a8:	2102      	movs	r1, #2
 80042aa:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	2210      	movs	r2, #16
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b10      	cmp	r3, #16
 80042b8:	d062      	beq.n	8004380 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	22ca      	movs	r2, #202	@ 0xca
 80042c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2253      	movs	r2, #83	@ 0x53
 80042c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80042ca:	250f      	movs	r5, #15
 80042cc:	197c      	adds	r4, r7, r5
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	0018      	movs	r0, r3
 80042d2:	f000 fcb9 	bl	8004c48 <RTC_EnterInitMode>
 80042d6:	0003      	movs	r3, r0
 80042d8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80042da:	0028      	movs	r0, r5
 80042dc:	183b      	adds	r3, r7, r0
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d12c      	bne.n	800433e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	492e      	ldr	r1, [pc, #184]	@ (80043a8 <HAL_RTC_Init+0x140>)
 80042f0:	400a      	ands	r2, r1
 80042f2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6999      	ldr	r1, [r3, #24]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6912      	ldr	r2, [r2, #16]
 800431a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6919      	ldr	r1, [r3, #16]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	041a      	lsls	r2, r3, #16
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004330:	183c      	adds	r4, r7, r0
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	0018      	movs	r0, r3
 8004336:	f000 fcc9 	bl	8004ccc <RTC_ExitInitMode>
 800433a:	0003      	movs	r3, r0
 800433c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800433e:	230f      	movs	r3, #15
 8004340:	18fb      	adds	r3, r7, r3
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d116      	bne.n	8004376 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699a      	ldr	r2, [r3, #24]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	00d2      	lsls	r2, r2, #3
 8004354:	08d2      	lsrs	r2, r2, #3
 8004356:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6999      	ldr	r1, [r3, #24]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	22ff      	movs	r2, #255	@ 0xff
 800437c:	625a      	str	r2, [r3, #36]	@ 0x24
 800437e:	e003      	b.n	8004388 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004380:	230f      	movs	r3, #15
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	2200      	movs	r2, #0
 8004386:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004388:	230f      	movs	r3, #15
 800438a:	18fb      	adds	r3, r7, r3
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d103      	bne.n	800439a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2229      	movs	r2, #41	@ 0x29
 8004396:	2101      	movs	r1, #1
 8004398:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800439a:	230f      	movs	r3, #15
 800439c:	18fb      	adds	r3, r7, r3
 800439e:	781b      	ldrb	r3, [r3, #0]
}
 80043a0:	0018      	movs	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	b004      	add	sp, #16
 80043a6:	bdb0      	pop	{r4, r5, r7, pc}
 80043a8:	fb8fffbf 	.word	0xfb8fffbf

080043ac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80043ac:	b5b0      	push	{r4, r5, r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2228      	movs	r2, #40	@ 0x28
 80043bc:	5c9b      	ldrb	r3, [r3, r2]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_RTC_SetTime+0x1a>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e092      	b.n	80044ec <HAL_RTC_SetTime+0x140>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2228      	movs	r2, #40	@ 0x28
 80043ca:	2101      	movs	r1, #1
 80043cc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2229      	movs	r2, #41	@ 0x29
 80043d2:	2102      	movs	r1, #2
 80043d4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	22ca      	movs	r2, #202	@ 0xca
 80043dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2253      	movs	r2, #83	@ 0x53
 80043e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80043e6:	2513      	movs	r5, #19
 80043e8:	197c      	adds	r4, r7, r5
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	0018      	movs	r0, r3
 80043ee:	f000 fc2b 	bl	8004c48 <RTC_EnterInitMode>
 80043f2:	0003      	movs	r3, r0
 80043f4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80043f6:	197b      	adds	r3, r7, r5
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d162      	bne.n	80044c4 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d125      	bne.n	8004450 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	2240      	movs	r2, #64	@ 0x40
 800440c:	4013      	ands	r3, r2
 800440e:	d102      	bne.n	8004416 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2200      	movs	r2, #0
 8004414:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	0018      	movs	r0, r3
 800441c:	f000 fc9a 	bl	8004d54 <RTC_ByteToBcd2>
 8004420:	0003      	movs	r3, r0
 8004422:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	785b      	ldrb	r3, [r3, #1]
 8004428:	0018      	movs	r0, r3
 800442a:	f000 fc93 	bl	8004d54 <RTC_ByteToBcd2>
 800442e:	0003      	movs	r3, r0
 8004430:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004432:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	789b      	ldrb	r3, [r3, #2]
 8004438:	0018      	movs	r0, r3
 800443a:	f000 fc8b 	bl	8004d54 <RTC_ByteToBcd2>
 800443e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004440:	0022      	movs	r2, r4
 8004442:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	78db      	ldrb	r3, [r3, #3]
 8004448:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	e017      	b.n	8004480 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	2240      	movs	r2, #64	@ 0x40
 8004458:	4013      	ands	r3, r2
 800445a:	d102      	bne.n	8004462 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2200      	movs	r2, #0
 8004460:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	785b      	ldrb	r3, [r3, #1]
 800446c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800446e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004474:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	78db      	ldrb	r3, [r3, #3]
 800447a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	491b      	ldr	r1, [pc, #108]	@ (80044f4 <HAL_RTC_SetTime+0x148>)
 8004488:	400a      	ands	r2, r1
 800448a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4918      	ldr	r1, [pc, #96]	@ (80044f8 <HAL_RTC_SetTime+0x14c>)
 8004498:	400a      	ands	r2, r1
 800449a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6999      	ldr	r1, [r3, #24]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80044b4:	2313      	movs	r3, #19
 80044b6:	18fc      	adds	r4, r7, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	0018      	movs	r0, r3
 80044bc:	f000 fc06 	bl	8004ccc <RTC_ExitInitMode>
 80044c0:	0003      	movs	r3, r0
 80044c2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	22ff      	movs	r2, #255	@ 0xff
 80044ca:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 80044cc:	2313      	movs	r3, #19
 80044ce:	18fb      	adds	r3, r7, r3
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d103      	bne.n	80044de <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2229      	movs	r2, #41	@ 0x29
 80044da:	2101      	movs	r1, #1
 80044dc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2228      	movs	r2, #40	@ 0x28
 80044e2:	2100      	movs	r1, #0
 80044e4:	5499      	strb	r1, [r3, r2]

  return status;
 80044e6:	2313      	movs	r3, #19
 80044e8:	18fb      	adds	r3, r7, r3
 80044ea:	781b      	ldrb	r3, [r3, #0]
}
 80044ec:	0018      	movs	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b006      	add	sp, #24
 80044f2:	bdb0      	pop	{r4, r5, r7, pc}
 80044f4:	007f7f7f 	.word	0x007f7f7f
 80044f8:	fffbffff 	.word	0xfffbffff

080044fc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	045b      	lsls	r3, r3, #17
 800451a:	0c5a      	lsrs	r2, r3, #17
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a22      	ldr	r2, [pc, #136]	@ (80045b0 <HAL_RTC_GetTime+0xb4>)
 8004528:	4013      	ands	r3, r2
 800452a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	0c1b      	lsrs	r3, r3, #16
 8004530:	b2db      	uxtb	r3, r3
 8004532:	223f      	movs	r2, #63	@ 0x3f
 8004534:	4013      	ands	r3, r2
 8004536:	b2da      	uxtb	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	0a1b      	lsrs	r3, r3, #8
 8004540:	b2db      	uxtb	r3, r3
 8004542:	227f      	movs	r2, #127	@ 0x7f
 8004544:	4013      	ands	r3, r2
 8004546:	b2da      	uxtb	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	227f      	movs	r2, #127	@ 0x7f
 8004552:	4013      	ands	r3, r2
 8004554:	b2da      	uxtb	r2, r3
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	0d9b      	lsrs	r3, r3, #22
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2201      	movs	r2, #1
 8004562:	4013      	ands	r3, r2
 8004564:	b2da      	uxtb	r2, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d11a      	bne.n	80045a6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	0018      	movs	r0, r3
 8004576:	f000 fc15 	bl	8004da4 <RTC_Bcd2ToByte>
 800457a:	0003      	movs	r3, r0
 800457c:	001a      	movs	r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	0018      	movs	r0, r3
 8004588:	f000 fc0c 	bl	8004da4 <RTC_Bcd2ToByte>
 800458c:	0003      	movs	r3, r0
 800458e:	001a      	movs	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	789b      	ldrb	r3, [r3, #2]
 8004598:	0018      	movs	r0, r3
 800459a:	f000 fc03 	bl	8004da4 <RTC_Bcd2ToByte>
 800459e:	0003      	movs	r3, r0
 80045a0:	001a      	movs	r2, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	0018      	movs	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b006      	add	sp, #24
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	007f7f7f 	.word	0x007f7f7f

080045b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80045b4:	b5b0      	push	{r4, r5, r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2228      	movs	r2, #40	@ 0x28
 80045c4:	5c9b      	ldrb	r3, [r3, r2]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_RTC_SetDate+0x1a>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e07e      	b.n	80046cc <HAL_RTC_SetDate+0x118>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2228      	movs	r2, #40	@ 0x28
 80045d2:	2101      	movs	r1, #1
 80045d4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2229      	movs	r2, #41	@ 0x29
 80045da:	2102      	movs	r1, #2
 80045dc:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10e      	bne.n	8004602 <HAL_RTC_SetDate+0x4e>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	785b      	ldrb	r3, [r3, #1]
 80045e8:	001a      	movs	r2, r3
 80045ea:	2310      	movs	r3, #16
 80045ec:	4013      	ands	r3, r2
 80045ee:	d008      	beq.n	8004602 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	785b      	ldrb	r3, [r3, #1]
 80045f4:	2210      	movs	r2, #16
 80045f6:	4393      	bics	r3, r2
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	330a      	adds	r3, #10
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d11c      	bne.n	8004642 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	78db      	ldrb	r3, [r3, #3]
 800460c:	0018      	movs	r0, r3
 800460e:	f000 fba1 	bl	8004d54 <RTC_ByteToBcd2>
 8004612:	0003      	movs	r3, r0
 8004614:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	785b      	ldrb	r3, [r3, #1]
 800461a:	0018      	movs	r0, r3
 800461c:	f000 fb9a 	bl	8004d54 <RTC_ByteToBcd2>
 8004620:	0003      	movs	r3, r0
 8004622:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004624:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	789b      	ldrb	r3, [r3, #2]
 800462a:	0018      	movs	r0, r3
 800462c:	f000 fb92 	bl	8004d54 <RTC_ByteToBcd2>
 8004630:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004632:	0022      	movs	r2, r4
 8004634:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	e00e      	b.n	8004660 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	78db      	ldrb	r3, [r3, #3]
 8004646:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	785b      	ldrb	r3, [r3, #1]
 800464c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800464e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004654:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	22ca      	movs	r2, #202	@ 0xca
 8004666:	625a      	str	r2, [r3, #36]	@ 0x24
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2253      	movs	r2, #83	@ 0x53
 800466e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004670:	2513      	movs	r5, #19
 8004672:	197c      	adds	r4, r7, r5
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	0018      	movs	r0, r3
 8004678:	f000 fae6 	bl	8004c48 <RTC_EnterInitMode>
 800467c:	0003      	movs	r3, r0
 800467e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004680:	0028      	movs	r0, r5
 8004682:	183b      	adds	r3, r7, r0
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10c      	bne.n	80046a4 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4910      	ldr	r1, [pc, #64]	@ (80046d4 <HAL_RTC_SetDate+0x120>)
 8004692:	400a      	ands	r2, r1
 8004694:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004696:	183c      	adds	r4, r7, r0
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	0018      	movs	r0, r3
 800469c:	f000 fb16 	bl	8004ccc <RTC_ExitInitMode>
 80046a0:	0003      	movs	r3, r0
 80046a2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	22ff      	movs	r2, #255	@ 0xff
 80046aa:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80046ac:	2313      	movs	r3, #19
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d103      	bne.n	80046be <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2229      	movs	r2, #41	@ 0x29
 80046ba:	2101      	movs	r1, #1
 80046bc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2228      	movs	r2, #40	@ 0x28
 80046c2:	2100      	movs	r1, #0
 80046c4:	5499      	strb	r1, [r3, r2]

  return status;
 80046c6:	2313      	movs	r3, #19
 80046c8:	18fb      	adds	r3, r7, r3
 80046ca:	781b      	ldrb	r3, [r3, #0]
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b006      	add	sp, #24
 80046d2:	bdb0      	pop	{r4, r5, r7, pc}
 80046d4:	00ffff3f 	.word	0x00ffff3f

080046d8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	4a21      	ldr	r2, [pc, #132]	@ (8004770 <HAL_RTC_GetDate+0x98>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	0c1b      	lsrs	r3, r3, #16
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	0a1b      	lsrs	r3, r3, #8
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	221f      	movs	r2, #31
 8004702:	4013      	ands	r3, r2
 8004704:	b2da      	uxtb	r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	223f      	movs	r2, #63	@ 0x3f
 8004710:	4013      	ands	r3, r2
 8004712:	b2da      	uxtb	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	0b5b      	lsrs	r3, r3, #13
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2207      	movs	r2, #7
 8004720:	4013      	ands	r3, r2
 8004722:	b2da      	uxtb	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d11a      	bne.n	8004764 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	78db      	ldrb	r3, [r3, #3]
 8004732:	0018      	movs	r0, r3
 8004734:	f000 fb36 	bl	8004da4 <RTC_Bcd2ToByte>
 8004738:	0003      	movs	r3, r0
 800473a:	001a      	movs	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	0018      	movs	r0, r3
 8004746:	f000 fb2d 	bl	8004da4 <RTC_Bcd2ToByte>
 800474a:	0003      	movs	r3, r0
 800474c:	001a      	movs	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	789b      	ldrb	r3, [r3, #2]
 8004756:	0018      	movs	r0, r3
 8004758:	f000 fb24 	bl	8004da4 <RTC_Bcd2ToByte>
 800475c:	0003      	movs	r3, r0
 800475e:	001a      	movs	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	0018      	movs	r0, r3
 8004768:	46bd      	mov	sp, r7
 800476a:	b006      	add	sp, #24
 800476c:	bd80      	pop	{r7, pc}
 800476e:	46c0      	nop			@ (mov r8, r8)
 8004770:	00ffff3f 	.word	0x00ffff3f

08004774 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004774:	b590      	push	{r4, r7, lr}
 8004776:	b089      	sub	sp, #36	@ 0x24
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2228      	movs	r2, #40	@ 0x28
 8004784:	5c9b      	ldrb	r3, [r3, r2]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <HAL_RTC_SetAlarm_IT+0x1a>
 800478a:	2302      	movs	r3, #2
 800478c:	e127      	b.n	80049de <HAL_RTC_SetAlarm_IT+0x26a>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2228      	movs	r2, #40	@ 0x28
 8004792:	2101      	movs	r1, #1
 8004794:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2229      	movs	r2, #41	@ 0x29
 800479a:	2102      	movs	r1, #2
 800479c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d136      	bne.n	8004812 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2240      	movs	r2, #64	@ 0x40
 80047ac:	4013      	ands	r3, r2
 80047ae:	d102      	bne.n	80047b6 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2200      	movs	r2, #0
 80047b4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	0018      	movs	r0, r3
 80047bc:	f000 faca 	bl	8004d54 <RTC_ByteToBcd2>
 80047c0:	0003      	movs	r3, r0
 80047c2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	785b      	ldrb	r3, [r3, #1]
 80047c8:	0018      	movs	r0, r3
 80047ca:	f000 fac3 	bl	8004d54 <RTC_ByteToBcd2>
 80047ce:	0003      	movs	r3, r0
 80047d0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047d2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	789b      	ldrb	r3, [r3, #2]
 80047d8:	0018      	movs	r0, r3
 80047da:	f000 fabb 	bl	8004d54 <RTC_ByteToBcd2>
 80047de:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80047e0:	0022      	movs	r2, r4
 80047e2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	78db      	ldrb	r3, [r3, #3]
 80047e8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80047ea:	431a      	orrs	r2, r3
 80047ec:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2220      	movs	r2, #32
 80047f2:	5c9b      	ldrb	r3, [r3, r2]
 80047f4:	0018      	movs	r0, r3
 80047f6:	f000 faad 	bl	8004d54 <RTC_ByteToBcd2>
 80047fa:	0003      	movs	r3, r0
 80047fc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80047fe:	0022      	movs	r2, r4
 8004800:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004806:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800480c:	4313      	orrs	r3, r2
 800480e:	61fb      	str	r3, [r7, #28]
 8004810:	e022      	b.n	8004858 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	2240      	movs	r2, #64	@ 0x40
 800481a:	4013      	ands	r3, r2
 800481c:	d102      	bne.n	8004824 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2200      	movs	r2, #0
 8004822:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	785b      	ldrb	r3, [r3, #1]
 800482e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004830:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004836:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	78db      	ldrb	r3, [r3, #3]
 800483c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800483e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2120      	movs	r1, #32
 8004844:	5c5b      	ldrb	r3, [r3, r1]
 8004846:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004848:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800484e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004854:	4313      	orrs	r3, r2
 8004856:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	4313      	orrs	r3, r2
 8004862:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	22ca      	movs	r2, #202	@ 0xca
 800486a:	625a      	str	r2, [r3, #36]	@ 0x24
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2253      	movs	r2, #83	@ 0x53
 8004872:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004878:	2380      	movs	r3, #128	@ 0x80
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	429a      	cmp	r2, r3
 800487e:	d14c      	bne.n	800491a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4957      	ldr	r1, [pc, #348]	@ (80049e8 <HAL_RTC_SetAlarm_IT+0x274>)
 800488c:	400a      	ands	r2, r1
 800488e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2101      	movs	r1, #1
 800489c:	430a      	orrs	r2, r1
 800489e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80048a0:	f7fd fcd4 	bl	800224c <HAL_GetTick>
 80048a4:	0003      	movs	r3, r0
 80048a6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80048a8:	e016      	b.n	80048d8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80048aa:	f7fd fccf 	bl	800224c <HAL_GetTick>
 80048ae:	0002      	movs	r2, r0
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	1ad2      	subs	r2, r2, r3
 80048b4:	23fa      	movs	r3, #250	@ 0xfa
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d90d      	bls.n	80048d8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	22ff      	movs	r2, #255	@ 0xff
 80048c2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2229      	movs	r2, #41	@ 0x29
 80048c8:	2103      	movs	r1, #3
 80048ca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2228      	movs	r2, #40	@ 0x28
 80048d0:	2100      	movs	r1, #0
 80048d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e082      	b.n	80049de <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	4013      	ands	r3, r2
 80048e2:	d0e2      	beq.n	80048aa <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699a      	ldr	r2, [r3, #24]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2180      	movs	r1, #128	@ 0x80
 8004900:	0049      	lsls	r1, r1, #1
 8004902:	430a      	orrs	r2, r1
 8004904:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	699a      	ldr	r2, [r3, #24]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2180      	movs	r1, #128	@ 0x80
 8004912:	0149      	lsls	r1, r1, #5
 8004914:	430a      	orrs	r2, r1
 8004916:	619a      	str	r2, [r3, #24]
 8004918:	e04b      	b.n	80049b2 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	699a      	ldr	r2, [r3, #24]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4931      	ldr	r1, [pc, #196]	@ (80049ec <HAL_RTC_SetAlarm_IT+0x278>)
 8004926:	400a      	ands	r2, r1
 8004928:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2102      	movs	r1, #2
 8004936:	430a      	orrs	r2, r1
 8004938:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800493a:	f7fd fc87 	bl	800224c <HAL_GetTick>
 800493e:	0003      	movs	r3, r0
 8004940:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004942:	e016      	b.n	8004972 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004944:	f7fd fc82 	bl	800224c <HAL_GetTick>
 8004948:	0002      	movs	r2, r0
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	1ad2      	subs	r2, r2, r3
 800494e:	23fa      	movs	r3, #250	@ 0xfa
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	429a      	cmp	r2, r3
 8004954:	d90d      	bls.n	8004972 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	22ff      	movs	r2, #255	@ 0xff
 800495c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2229      	movs	r2, #41	@ 0x29
 8004962:	2103      	movs	r1, #3
 8004964:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2228      	movs	r2, #40	@ 0x28
 800496a:	2100      	movs	r1, #0
 800496c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e035      	b.n	80049de <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	2202      	movs	r2, #2
 800497a:	4013      	ands	r3, r2
 800497c:	d0e2      	beq.n	8004944 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69fa      	ldr	r2, [r7, #28]
 8004984:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699a      	ldr	r2, [r3, #24]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2180      	movs	r1, #128	@ 0x80
 800499a:	0089      	lsls	r1, r1, #2
 800499c:	430a      	orrs	r2, r1
 800499e:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699a      	ldr	r2, [r3, #24]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2180      	movs	r1, #128	@ 0x80
 80049ac:	0189      	lsls	r1, r1, #6
 80049ae:	430a      	orrs	r2, r1
 80049b0:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80049b2:	4a0f      	ldr	r2, [pc, #60]	@ (80049f0 <HAL_RTC_SetAlarm_IT+0x27c>)
 80049b4:	2380      	movs	r3, #128	@ 0x80
 80049b6:	58d3      	ldr	r3, [r2, r3]
 80049b8:	490d      	ldr	r1, [pc, #52]	@ (80049f0 <HAL_RTC_SetAlarm_IT+0x27c>)
 80049ba:	2280      	movs	r2, #128	@ 0x80
 80049bc:	0312      	lsls	r2, r2, #12
 80049be:	4313      	orrs	r3, r2
 80049c0:	2280      	movs	r2, #128	@ 0x80
 80049c2:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	22ff      	movs	r2, #255	@ 0xff
 80049ca:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2229      	movs	r2, #41	@ 0x29
 80049d0:	2101      	movs	r1, #1
 80049d2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2228      	movs	r2, #40	@ 0x28
 80049d8:	2100      	movs	r1, #0
 80049da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	0018      	movs	r0, r3
 80049e0:	46bd      	mov	sp, r7
 80049e2:	b009      	add	sp, #36	@ 0x24
 80049e4:	bd90      	pop	{r4, r7, pc}
 80049e6:	46c0      	nop			@ (mov r8, r8)
 80049e8:	fffffeff 	.word	0xfffffeff
 80049ec:	fffffdff 	.word	0xfffffdff
 80049f0:	40021800 	.word	0x40021800

080049f4 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	2380      	movs	r3, #128	@ 0x80
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d144      	bne.n	8004a96 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2280      	movs	r2, #128	@ 0x80
 8004a10:	0052      	lsls	r2, r2, #1
 8004a12:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1a:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a22:	045b      	lsls	r3, r3, #17
 8004a24:	0c5b      	lsrs	r3, r3, #17
 8004a26:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	0c1b      	lsrs	r3, r3, #16
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	223f      	movs	r2, #63	@ 0x3f
 8004a30:	4013      	ands	r3, r2
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	0a1b      	lsrs	r3, r3, #8
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	227f      	movs	r2, #127	@ 0x7f
 8004a40:	4013      	ands	r3, r2
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	227f      	movs	r2, #127	@ 0x7f
 8004a4e:	4013      	ands	r3, r2
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	0d9b      	lsrs	r3, r3, #22
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	4013      	ands	r3, r2
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	0e1b      	lsrs	r3, r3, #24
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	223f      	movs	r2, #63	@ 0x3f
 8004a74:	4013      	ands	r3, r2
 8004a76:	b2d9      	uxtb	r1, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	2380      	movs	r3, #128	@ 0x80
 8004a82:	05db      	lsls	r3, r3, #23
 8004a84:	401a      	ands	r2, r3
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	4a3b      	ldr	r2, [pc, #236]	@ (8004b7c <HAL_RTC_GetAlarm+0x188>)
 8004a8e:	401a      	ands	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	615a      	str	r2, [r3, #20]
 8004a94:	e043      	b.n	8004b1e <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2280      	movs	r2, #128	@ 0x80
 8004a9a:	0092      	lsls	r2, r2, #2
 8004a9c:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa4:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aac:	045b      	lsls	r3, r3, #17
 8004aae:	0c5b      	lsrs	r3, r3, #17
 8004ab0:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	0c1b      	lsrs	r3, r3, #16
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	223f      	movs	r2, #63	@ 0x3f
 8004aba:	4013      	ands	r3, r2
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	0a1b      	lsrs	r3, r3, #8
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	227f      	movs	r2, #127	@ 0x7f
 8004aca:	4013      	ands	r3, r2
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	227f      	movs	r2, #127	@ 0x7f
 8004ad8:	4013      	ands	r3, r2
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	0d9b      	lsrs	r3, r3, #22
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	4013      	ands	r3, r2
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	0e1b      	lsrs	r3, r3, #24
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	223f      	movs	r2, #63	@ 0x3f
 8004afe:	4013      	ands	r3, r2
 8004b00:	b2d9      	uxtb	r1, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2220      	movs	r2, #32
 8004b06:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	2380      	movs	r3, #128	@ 0x80
 8004b0c:	05db      	lsls	r3, r3, #23
 8004b0e:	401a      	ands	r2, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	4a19      	ldr	r2, [pc, #100]	@ (8004b7c <HAL_RTC_GetAlarm+0x188>)
 8004b18:	401a      	ands	r2, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d125      	bne.n	8004b70 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f000 f93b 	bl	8004da4 <RTC_Bcd2ToByte>
 8004b2e:	0003      	movs	r3, r0
 8004b30:	001a      	movs	r2, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	785b      	ldrb	r3, [r3, #1]
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f000 f932 	bl	8004da4 <RTC_Bcd2ToByte>
 8004b40:	0003      	movs	r3, r0
 8004b42:	001a      	movs	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	789b      	ldrb	r3, [r3, #2]
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f000 f929 	bl	8004da4 <RTC_Bcd2ToByte>
 8004b52:	0003      	movs	r3, r0
 8004b54:	001a      	movs	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	5c9b      	ldrb	r3, [r3, r2]
 8004b60:	0018      	movs	r0, r3
 8004b62:	f000 f91f 	bl	8004da4 <RTC_Bcd2ToByte>
 8004b66:	0003      	movs	r3, r0
 8004b68:	0019      	movs	r1, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	0018      	movs	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b006      	add	sp, #24
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	46c0      	nop			@ (mov r8, r8)
 8004b7c:	80808080 	.word	0x80808080

08004b80 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	2380      	movs	r3, #128	@ 0x80
 8004b90:	015b      	lsls	r3, r3, #5
 8004b92:	4013      	ands	r3, r2
 8004b94:	d011      	beq.n	8004bba <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d00b      	beq.n	8004bba <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2101      	movs	r1, #1
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f7fc fb13 	bl	80011e0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699a      	ldr	r2, [r3, #24]
 8004bc0:	2380      	movs	r3, #128	@ 0x80
 8004bc2:	019b      	lsls	r3, r3, #6
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d011      	beq.n	8004bec <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bce:	2202      	movs	r2, #2
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	d00b      	beq.n	8004bec <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2102      	movs	r1, #2
 8004be0:	430a      	orrs	r2, r1
 8004be2:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	0018      	movs	r0, r3
 8004be8:	f000 f9a4 	bl	8004f34 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2229      	movs	r2, #41	@ 0x29
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	5499      	strb	r1, [r3, r2]
}
 8004bf4:	46c0      	nop			@ (mov r8, r8)
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b002      	add	sp, #8
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a0e      	ldr	r2, [pc, #56]	@ (8004c44 <HAL_RTC_WaitForSynchro+0x48>)
 8004c0a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004c0c:	f7fd fb1e 	bl	800224c <HAL_GetTick>
 8004c10:	0003      	movs	r3, r0
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004c14:	e00a      	b.n	8004c2c <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c16:	f7fd fb19 	bl	800224c <HAL_GetTick>
 8004c1a:	0002      	movs	r2, r0
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	1ad2      	subs	r2, r2, r3
 8004c20:	23fa      	movs	r3, #250	@ 0xfa
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d901      	bls.n	8004c2c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e006      	b.n	8004c3a <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	4013      	ands	r3, r2
 8004c36:	d0ee      	beq.n	8004c16 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	b004      	add	sp, #16
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	46c0      	nop			@ (mov r8, r8)
 8004c44:	0001005f 	.word	0x0001005f

08004c48 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004c50:	230f      	movs	r3, #15
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	2240      	movs	r2, #64	@ 0x40
 8004c60:	4013      	ands	r3, r2
 8004c62:	d12c      	bne.n	8004cbe <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2180      	movs	r1, #128	@ 0x80
 8004c70:	430a      	orrs	r2, r1
 8004c72:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004c74:	f7fd faea 	bl	800224c <HAL_GetTick>
 8004c78:	0003      	movs	r3, r0
 8004c7a:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004c7c:	e014      	b.n	8004ca8 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c7e:	f7fd fae5 	bl	800224c <HAL_GetTick>
 8004c82:	0002      	movs	r2, r0
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	1ad2      	subs	r2, r2, r3
 8004c88:	200f      	movs	r0, #15
 8004c8a:	183b      	adds	r3, r7, r0
 8004c8c:	1839      	adds	r1, r7, r0
 8004c8e:	7809      	ldrb	r1, [r1, #0]
 8004c90:	7019      	strb	r1, [r3, #0]
 8004c92:	23fa      	movs	r3, #250	@ 0xfa
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d906      	bls.n	8004ca8 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004c9a:	183b      	adds	r3, r7, r0
 8004c9c:	2203      	movs	r2, #3
 8004c9e:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2229      	movs	r2, #41	@ 0x29
 8004ca4:	2103      	movs	r1, #3
 8004ca6:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	2240      	movs	r2, #64	@ 0x40
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d104      	bne.n	8004cbe <RTC_EnterInitMode+0x76>
 8004cb4:	230f      	movs	r3, #15
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d1df      	bne.n	8004c7e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004cbe:	230f      	movs	r3, #15
 8004cc0:	18fb      	adds	r3, r7, r3
 8004cc2:	781b      	ldrb	r3, [r3, #0]
}
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	b004      	add	sp, #16
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ccc:	b590      	push	{r4, r7, lr}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd4:	240f      	movs	r4, #15
 8004cd6:	193b      	adds	r3, r7, r4
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8004d50 <RTC_ExitInitMode+0x84>)
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d50 <RTC_ExitInitMode+0x84>)
 8004ce2:	2180      	movs	r1, #128	@ 0x80
 8004ce4:	438a      	bics	r2, r1
 8004ce6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004ce8:	4b19      	ldr	r3, [pc, #100]	@ (8004d50 <RTC_ExitInitMode+0x84>)
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	2220      	movs	r2, #32
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d10d      	bne.n	8004d0e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f7ff ff81 	bl	8004bfc <HAL_RTC_WaitForSynchro>
 8004cfa:	1e03      	subs	r3, r0, #0
 8004cfc:	d021      	beq.n	8004d42 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2229      	movs	r2, #41	@ 0x29
 8004d02:	2103      	movs	r1, #3
 8004d04:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004d06:	193b      	adds	r3, r7, r4
 8004d08:	2203      	movs	r2, #3
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	e019      	b.n	8004d42 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004d0e:	4b10      	ldr	r3, [pc, #64]	@ (8004d50 <RTC_ExitInitMode+0x84>)
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	4b0f      	ldr	r3, [pc, #60]	@ (8004d50 <RTC_ExitInitMode+0x84>)
 8004d14:	2120      	movs	r1, #32
 8004d16:	438a      	bics	r2, r1
 8004d18:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f7ff ff6d 	bl	8004bfc <HAL_RTC_WaitForSynchro>
 8004d22:	1e03      	subs	r3, r0, #0
 8004d24:	d007      	beq.n	8004d36 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2229      	movs	r2, #41	@ 0x29
 8004d2a:	2103      	movs	r1, #3
 8004d2c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004d2e:	230f      	movs	r3, #15
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	2203      	movs	r2, #3
 8004d34:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004d36:	4b06      	ldr	r3, [pc, #24]	@ (8004d50 <RTC_ExitInitMode+0x84>)
 8004d38:	699a      	ldr	r2, [r3, #24]
 8004d3a:	4b05      	ldr	r3, [pc, #20]	@ (8004d50 <RTC_ExitInitMode+0x84>)
 8004d3c:	2120      	movs	r1, #32
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004d42:	230f      	movs	r3, #15
 8004d44:	18fb      	adds	r3, r7, r3
 8004d46:	781b      	ldrb	r3, [r3, #0]
}
 8004d48:	0018      	movs	r0, r3
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	b005      	add	sp, #20
 8004d4e:	bd90      	pop	{r4, r7, pc}
 8004d50:	40002800 	.word	0x40002800

08004d54 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	0002      	movs	r2, r0
 8004d5c:	1dfb      	adds	r3, r7, #7
 8004d5e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004d64:	230b      	movs	r3, #11
 8004d66:	18fb      	adds	r3, r7, r3
 8004d68:	1dfa      	adds	r2, r7, #7
 8004d6a:	7812      	ldrb	r2, [r2, #0]
 8004d6c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004d6e:	e008      	b.n	8004d82 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	3301      	adds	r3, #1
 8004d74:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004d76:	220b      	movs	r2, #11
 8004d78:	18bb      	adds	r3, r7, r2
 8004d7a:	18ba      	adds	r2, r7, r2
 8004d7c:	7812      	ldrb	r2, [r2, #0]
 8004d7e:	3a0a      	subs	r2, #10
 8004d80:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004d82:	210b      	movs	r1, #11
 8004d84:	187b      	adds	r3, r7, r1
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b09      	cmp	r3, #9
 8004d8a:	d8f1      	bhi.n	8004d70 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	187b      	adds	r3, r7, r1
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	b2db      	uxtb	r3, r3
}
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	b004      	add	sp, #16
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	0002      	movs	r2, r0
 8004dac:	1dfb      	adds	r3, r7, #7
 8004dae:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004db0:	1dfb      	adds	r3, r7, #7
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	091b      	lsrs	r3, r3, #4
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	001a      	movs	r2, r3
 8004dba:	0013      	movs	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	189b      	adds	r3, r3, r2
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	1dfb      	adds	r3, r7, #7
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	210f      	movs	r1, #15
 8004dce:	400b      	ands	r3, r1
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	18d3      	adds	r3, r2, r3
 8004dd4:	b2db      	uxtb	r3, r3
}
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	b004      	add	sp, #16
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b086      	sub	sp, #24
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	607a      	str	r2, [r7, #4]
 8004dea:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2228      	movs	r2, #40	@ 0x28
 8004df0:	5c9b      	ldrb	r3, [r3, r2]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d101      	bne.n	8004dfa <HAL_RTCEx_SetSmoothCalib+0x1c>
 8004df6:	2302      	movs	r3, #2
 8004df8:	e04f      	b.n	8004e9a <HAL_RTCEx_SetSmoothCalib+0xbc>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2228      	movs	r2, #40	@ 0x28
 8004dfe:	2101      	movs	r1, #1
 8004e00:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2229      	movs	r2, #41	@ 0x29
 8004e06:	2102      	movs	r1, #2
 8004e08:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	22ca      	movs	r2, #202	@ 0xca
 8004e10:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2253      	movs	r2, #83	@ 0x53
 8004e18:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	2380      	movs	r3, #128	@ 0x80
 8004e22:	025b      	lsls	r3, r3, #9
 8004e24:	4013      	ands	r3, r2
 8004e26:	d022      	beq.n	8004e6e <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8004e28:	f7fd fa10 	bl	800224c <HAL_GetTick>
 8004e2c:	0003      	movs	r3, r0
 8004e2e:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8004e30:	e016      	b.n	8004e60 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e32:	f7fd fa0b 	bl	800224c <HAL_GetTick>
 8004e36:	0002      	movs	r2, r0
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	1ad2      	subs	r2, r2, r3
 8004e3c:	23fa      	movs	r3, #250	@ 0xfa
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d90d      	bls.n	8004e60 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	22ff      	movs	r2, #255	@ 0xff
 8004e4a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2229      	movs	r2, #41	@ 0x29
 8004e50:	2103      	movs	r1, #3
 8004e52:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2228      	movs	r2, #40	@ 0x28
 8004e58:	2100      	movs	r1, #0
 8004e5a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e01c      	b.n	8004e9a <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	2380      	movs	r3, #128	@ 0x80
 8004e68:	025b      	lsls	r3, r3, #9
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d1e1      	bne.n	8004e32 <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	0011      	movs	r1, r2
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	22ff      	movs	r2, #255	@ 0xff
 8004e86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2229      	movs	r2, #41	@ 0x29
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2228      	movs	r2, #40	@ 0x28
 8004e94:	2100      	movs	r1, #0
 8004e96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	b006      	add	sp, #24
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2228      	movs	r2, #40	@ 0x28
 8004eb2:	5c9b      	ldrb	r3, [r3, r2]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e035      	b.n	8004f28 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2228      	movs	r2, #40	@ 0x28
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2229      	movs	r2, #41	@ 0x29
 8004ec8:	2102      	movs	r1, #2
 8004eca:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	22ca      	movs	r2, #202	@ 0xca
 8004ed2:	625a      	str	r2, [r3, #36]	@ 0x24
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2253      	movs	r2, #83	@ 0x53
 8004eda:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699a      	ldr	r2, [r3, #24]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4912      	ldr	r1, [pc, #72]	@ (8004f30 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8004ee8:	400a      	ands	r2, r1
 8004eea:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6999      	ldr	r1, [r3, #24]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2180      	movs	r1, #128	@ 0x80
 8004f08:	0409      	lsls	r1, r1, #16
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	22ff      	movs	r2, #255	@ 0xff
 8004f14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2229      	movs	r2, #41	@ 0x29
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2228      	movs	r2, #40	@ 0x28
 8004f22:	2100      	movs	r1, #0
 8004f24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	0018      	movs	r0, r3
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	b002      	add	sp, #8
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	fff7ffff 	.word	0xfff7ffff

08004f34 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004f3c:	46c0      	nop			@ (mov r8, r8)
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b002      	add	sp, #8
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e04a      	b.n	8004fec <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	223d      	movs	r2, #61	@ 0x3d
 8004f5a:	5c9b      	ldrb	r3, [r3, r2]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d107      	bne.n	8004f72 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	223c      	movs	r2, #60	@ 0x3c
 8004f66:	2100      	movs	r1, #0
 8004f68:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f7fd f81b 	bl	8001fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	223d      	movs	r2, #61	@ 0x3d
 8004f76:	2102      	movs	r1, #2
 8004f78:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3304      	adds	r3, #4
 8004f82:	0019      	movs	r1, r3
 8004f84:	0010      	movs	r0, r2
 8004f86:	f000 fadd 	bl	8005544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2248      	movs	r2, #72	@ 0x48
 8004f8e:	2101      	movs	r1, #1
 8004f90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	223e      	movs	r2, #62	@ 0x3e
 8004f96:	2101      	movs	r1, #1
 8004f98:	5499      	strb	r1, [r3, r2]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	223f      	movs	r2, #63	@ 0x3f
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	5499      	strb	r1, [r3, r2]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2240      	movs	r2, #64	@ 0x40
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	5499      	strb	r1, [r3, r2]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2241      	movs	r2, #65	@ 0x41
 8004fae:	2101      	movs	r1, #1
 8004fb0:	5499      	strb	r1, [r3, r2]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2242      	movs	r2, #66	@ 0x42
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	5499      	strb	r1, [r3, r2]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2243      	movs	r2, #67	@ 0x43
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2244      	movs	r2, #68	@ 0x44
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	5499      	strb	r1, [r3, r2]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2245      	movs	r2, #69	@ 0x45
 8004fce:	2101      	movs	r1, #1
 8004fd0:	5499      	strb	r1, [r3, r2]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2246      	movs	r2, #70	@ 0x46
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	5499      	strb	r1, [r3, r2]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2247      	movs	r2, #71	@ 0x47
 8004fde:	2101      	movs	r1, #1
 8004fe0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	223d      	movs	r2, #61	@ 0x3d
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	0018      	movs	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	b002      	add	sp, #8
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	223d      	movs	r2, #61	@ 0x3d
 8005000:	5c9b      	ldrb	r3, [r3, r2]
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b01      	cmp	r3, #1
 8005006:	d001      	beq.n	800500c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e035      	b.n	8005078 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	223d      	movs	r2, #61	@ 0x3d
 8005010:	2102      	movs	r1, #2
 8005012:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a19      	ldr	r2, [pc, #100]	@ (8005080 <HAL_TIM_Base_Start+0x8c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00a      	beq.n	8005034 <HAL_TIM_Base_Start+0x40>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	2380      	movs	r3, #128	@ 0x80
 8005024:	05db      	lsls	r3, r3, #23
 8005026:	429a      	cmp	r2, r3
 8005028:	d004      	beq.n	8005034 <HAL_TIM_Base_Start+0x40>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a15      	ldr	r2, [pc, #84]	@ (8005084 <HAL_TIM_Base_Start+0x90>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d116      	bne.n	8005062 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	4a13      	ldr	r2, [pc, #76]	@ (8005088 <HAL_TIM_Base_Start+0x94>)
 800503c:	4013      	ands	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b06      	cmp	r3, #6
 8005044:	d016      	beq.n	8005074 <HAL_TIM_Base_Start+0x80>
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	2380      	movs	r3, #128	@ 0x80
 800504a:	025b      	lsls	r3, r3, #9
 800504c:	429a      	cmp	r2, r3
 800504e:	d011      	beq.n	8005074 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2101      	movs	r1, #1
 800505c:	430a      	orrs	r2, r1
 800505e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005060:	e008      	b.n	8005074 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2101      	movs	r1, #1
 800506e:	430a      	orrs	r2, r1
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	e000      	b.n	8005076 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005074:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	0018      	movs	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	b004      	add	sp, #16
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40012c00 	.word	0x40012c00
 8005084:	40000400 	.word	0x40000400
 8005088:	00010007 	.word	0x00010007

0800508c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	4a0d      	ldr	r2, [pc, #52]	@ (80050d0 <HAL_TIM_Base_Stop+0x44>)
 800509c:	4013      	ands	r3, r2
 800509e:	d10d      	bne.n	80050bc <HAL_TIM_Base_Stop+0x30>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	4a0b      	ldr	r2, [pc, #44]	@ (80050d4 <HAL_TIM_Base_Stop+0x48>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	d107      	bne.n	80050bc <HAL_TIM_Base_Stop+0x30>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2101      	movs	r1, #1
 80050b8:	438a      	bics	r2, r1
 80050ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	223d      	movs	r2, #61	@ 0x3d
 80050c0:	2101      	movs	r1, #1
 80050c2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	0018      	movs	r0, r3
 80050c8:	46bd      	mov	sp, r7
 80050ca:	b002      	add	sp, #8
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	46c0      	nop			@ (mov r8, r8)
 80050d0:	00001111 	.word	0x00001111
 80050d4:	00000444 	.word	0x00000444

080050d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e04a      	b.n	8005180 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	223d      	movs	r2, #61	@ 0x3d
 80050ee:	5c9b      	ldrb	r3, [r3, r2]
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d107      	bne.n	8005106 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	223c      	movs	r2, #60	@ 0x3c
 80050fa:	2100      	movs	r1, #0
 80050fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	0018      	movs	r0, r3
 8005102:	f7fc ff35 	bl	8001f70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	223d      	movs	r2, #61	@ 0x3d
 800510a:	2102      	movs	r1, #2
 800510c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3304      	adds	r3, #4
 8005116:	0019      	movs	r1, r3
 8005118:	0010      	movs	r0, r2
 800511a:	f000 fa13 	bl	8005544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2248      	movs	r2, #72	@ 0x48
 8005122:	2101      	movs	r1, #1
 8005124:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	223e      	movs	r2, #62	@ 0x3e
 800512a:	2101      	movs	r1, #1
 800512c:	5499      	strb	r1, [r3, r2]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	223f      	movs	r2, #63	@ 0x3f
 8005132:	2101      	movs	r1, #1
 8005134:	5499      	strb	r1, [r3, r2]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2240      	movs	r2, #64	@ 0x40
 800513a:	2101      	movs	r1, #1
 800513c:	5499      	strb	r1, [r3, r2]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2241      	movs	r2, #65	@ 0x41
 8005142:	2101      	movs	r1, #1
 8005144:	5499      	strb	r1, [r3, r2]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2242      	movs	r2, #66	@ 0x42
 800514a:	2101      	movs	r1, #1
 800514c:	5499      	strb	r1, [r3, r2]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2243      	movs	r2, #67	@ 0x43
 8005152:	2101      	movs	r1, #1
 8005154:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2244      	movs	r2, #68	@ 0x44
 800515a:	2101      	movs	r1, #1
 800515c:	5499      	strb	r1, [r3, r2]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2245      	movs	r2, #69	@ 0x45
 8005162:	2101      	movs	r1, #1
 8005164:	5499      	strb	r1, [r3, r2]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2246      	movs	r2, #70	@ 0x46
 800516a:	2101      	movs	r1, #1
 800516c:	5499      	strb	r1, [r3, r2]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2247      	movs	r2, #71	@ 0x47
 8005172:	2101      	movs	r1, #1
 8005174:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	223d      	movs	r2, #61	@ 0x3d
 800517a:	2101      	movs	r1, #1
 800517c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	0018      	movs	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	b002      	add	sp, #8
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d108      	bne.n	80051aa <HAL_TIM_PWM_Start+0x22>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	223e      	movs	r2, #62	@ 0x3e
 800519c:	5c9b      	ldrb	r3, [r3, r2]
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	1e5a      	subs	r2, r3, #1
 80051a4:	4193      	sbcs	r3, r2
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	e037      	b.n	800521a <HAL_TIM_PWM_Start+0x92>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d108      	bne.n	80051c2 <HAL_TIM_PWM_Start+0x3a>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	223f      	movs	r2, #63	@ 0x3f
 80051b4:	5c9b      	ldrb	r3, [r3, r2]
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	3b01      	subs	r3, #1
 80051ba:	1e5a      	subs	r2, r3, #1
 80051bc:	4193      	sbcs	r3, r2
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	e02b      	b.n	800521a <HAL_TIM_PWM_Start+0x92>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d108      	bne.n	80051da <HAL_TIM_PWM_Start+0x52>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2240      	movs	r2, #64	@ 0x40
 80051cc:	5c9b      	ldrb	r3, [r3, r2]
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	1e5a      	subs	r2, r3, #1
 80051d4:	4193      	sbcs	r3, r2
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	e01f      	b.n	800521a <HAL_TIM_PWM_Start+0x92>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b0c      	cmp	r3, #12
 80051de:	d108      	bne.n	80051f2 <HAL_TIM_PWM_Start+0x6a>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2241      	movs	r2, #65	@ 0x41
 80051e4:	5c9b      	ldrb	r3, [r3, r2]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	1e5a      	subs	r2, r3, #1
 80051ec:	4193      	sbcs	r3, r2
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	e013      	b.n	800521a <HAL_TIM_PWM_Start+0x92>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b10      	cmp	r3, #16
 80051f6:	d108      	bne.n	800520a <HAL_TIM_PWM_Start+0x82>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2242      	movs	r2, #66	@ 0x42
 80051fc:	5c9b      	ldrb	r3, [r3, r2]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	1e5a      	subs	r2, r3, #1
 8005204:	4193      	sbcs	r3, r2
 8005206:	b2db      	uxtb	r3, r3
 8005208:	e007      	b.n	800521a <HAL_TIM_PWM_Start+0x92>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2243      	movs	r2, #67	@ 0x43
 800520e:	5c9b      	ldrb	r3, [r3, r2]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	1e5a      	subs	r2, r3, #1
 8005216:	4193      	sbcs	r3, r2
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e081      	b.n	8005326 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d104      	bne.n	8005232 <HAL_TIM_PWM_Start+0xaa>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	223e      	movs	r2, #62	@ 0x3e
 800522c:	2102      	movs	r1, #2
 800522e:	5499      	strb	r1, [r3, r2]
 8005230:	e023      	b.n	800527a <HAL_TIM_PWM_Start+0xf2>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b04      	cmp	r3, #4
 8005236:	d104      	bne.n	8005242 <HAL_TIM_PWM_Start+0xba>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	223f      	movs	r2, #63	@ 0x3f
 800523c:	2102      	movs	r1, #2
 800523e:	5499      	strb	r1, [r3, r2]
 8005240:	e01b      	b.n	800527a <HAL_TIM_PWM_Start+0xf2>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b08      	cmp	r3, #8
 8005246:	d104      	bne.n	8005252 <HAL_TIM_PWM_Start+0xca>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2240      	movs	r2, #64	@ 0x40
 800524c:	2102      	movs	r1, #2
 800524e:	5499      	strb	r1, [r3, r2]
 8005250:	e013      	b.n	800527a <HAL_TIM_PWM_Start+0xf2>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b0c      	cmp	r3, #12
 8005256:	d104      	bne.n	8005262 <HAL_TIM_PWM_Start+0xda>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2241      	movs	r2, #65	@ 0x41
 800525c:	2102      	movs	r1, #2
 800525e:	5499      	strb	r1, [r3, r2]
 8005260:	e00b      	b.n	800527a <HAL_TIM_PWM_Start+0xf2>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b10      	cmp	r3, #16
 8005266:	d104      	bne.n	8005272 <HAL_TIM_PWM_Start+0xea>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2242      	movs	r2, #66	@ 0x42
 800526c:	2102      	movs	r1, #2
 800526e:	5499      	strb	r1, [r3, r2]
 8005270:	e003      	b.n	800527a <HAL_TIM_PWM_Start+0xf2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2243      	movs	r2, #67	@ 0x43
 8005276:	2102      	movs	r1, #2
 8005278:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6839      	ldr	r1, [r7, #0]
 8005280:	2201      	movs	r2, #1
 8005282:	0018      	movs	r0, r3
 8005284:	f000 fc7e 	bl	8005b84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a28      	ldr	r2, [pc, #160]	@ (8005330 <HAL_TIM_PWM_Start+0x1a8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d009      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x11e>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a27      	ldr	r2, [pc, #156]	@ (8005334 <HAL_TIM_PWM_Start+0x1ac>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d004      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x11e>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a25      	ldr	r2, [pc, #148]	@ (8005338 <HAL_TIM_PWM_Start+0x1b0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d101      	bne.n	80052aa <HAL_TIM_PWM_Start+0x122>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <HAL_TIM_PWM_Start+0x124>
 80052aa:	2300      	movs	r3, #0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d008      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2180      	movs	r1, #128	@ 0x80
 80052bc:	0209      	lsls	r1, r1, #8
 80052be:	430a      	orrs	r2, r1
 80052c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1a      	ldr	r2, [pc, #104]	@ (8005330 <HAL_TIM_PWM_Start+0x1a8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00a      	beq.n	80052e2 <HAL_TIM_PWM_Start+0x15a>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	2380      	movs	r3, #128	@ 0x80
 80052d2:	05db      	lsls	r3, r3, #23
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d004      	beq.n	80052e2 <HAL_TIM_PWM_Start+0x15a>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a17      	ldr	r2, [pc, #92]	@ (800533c <HAL_TIM_PWM_Start+0x1b4>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d116      	bne.n	8005310 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	4a15      	ldr	r2, [pc, #84]	@ (8005340 <HAL_TIM_PWM_Start+0x1b8>)
 80052ea:	4013      	ands	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b06      	cmp	r3, #6
 80052f2:	d016      	beq.n	8005322 <HAL_TIM_PWM_Start+0x19a>
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	2380      	movs	r3, #128	@ 0x80
 80052f8:	025b      	lsls	r3, r3, #9
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d011      	beq.n	8005322 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2101      	movs	r1, #1
 800530a:	430a      	orrs	r2, r1
 800530c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530e:	e008      	b.n	8005322 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2101      	movs	r1, #1
 800531c:	430a      	orrs	r2, r1
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	e000      	b.n	8005324 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005322:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	0018      	movs	r0, r3
 8005328:	46bd      	mov	sp, r7
 800532a:	b004      	add	sp, #16
 800532c:	bd80      	pop	{r7, pc}
 800532e:	46c0      	nop			@ (mov r8, r8)
 8005330:	40012c00 	.word	0x40012c00
 8005334:	40014400 	.word	0x40014400
 8005338:	40014800 	.word	0x40014800
 800533c:	40000400 	.word	0x40000400
 8005340:	00010007 	.word	0x00010007

08005344 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005350:	2317      	movs	r3, #23
 8005352:	18fb      	adds	r3, r7, r3
 8005354:	2200      	movs	r2, #0
 8005356:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	223c      	movs	r2, #60	@ 0x3c
 800535c:	5c9b      	ldrb	r3, [r3, r2]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005362:	2302      	movs	r3, #2
 8005364:	e0e5      	b.n	8005532 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	223c      	movs	r2, #60	@ 0x3c
 800536a:	2101      	movs	r1, #1
 800536c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b14      	cmp	r3, #20
 8005372:	d900      	bls.n	8005376 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005374:	e0d1      	b.n	800551a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	009a      	lsls	r2, r3, #2
 800537a:	4b70      	ldr	r3, [pc, #448]	@ (800553c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800537c:	18d3      	adds	r3, r2, r3
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	0011      	movs	r1, r2
 800538a:	0018      	movs	r0, r3
 800538c:	f000 f95e 	bl	800564c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699a      	ldr	r2, [r3, #24]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2108      	movs	r1, #8
 800539c:	430a      	orrs	r2, r1
 800539e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2104      	movs	r1, #4
 80053ac:	438a      	bics	r2, r1
 80053ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6999      	ldr	r1, [r3, #24]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	691a      	ldr	r2, [r3, #16]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	619a      	str	r2, [r3, #24]
      break;
 80053c2:	e0af      	b.n	8005524 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	0011      	movs	r1, r2
 80053cc:	0018      	movs	r0, r3
 80053ce:	f000 f9bd 	bl	800574c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699a      	ldr	r2, [r3, #24]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2180      	movs	r1, #128	@ 0x80
 80053de:	0109      	lsls	r1, r1, #4
 80053e0:	430a      	orrs	r2, r1
 80053e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699a      	ldr	r2, [r3, #24]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4954      	ldr	r1, [pc, #336]	@ (8005540 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80053f0:	400a      	ands	r2, r1
 80053f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6999      	ldr	r1, [r3, #24]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	021a      	lsls	r2, r3, #8
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	619a      	str	r2, [r3, #24]
      break;
 8005408:	e08c      	b.n	8005524 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	0011      	movs	r1, r2
 8005412:	0018      	movs	r0, r3
 8005414:	f000 fa18 	bl	8005848 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69da      	ldr	r2, [r3, #28]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2108      	movs	r1, #8
 8005424:	430a      	orrs	r2, r1
 8005426:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	69da      	ldr	r2, [r3, #28]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2104      	movs	r1, #4
 8005434:	438a      	bics	r2, r1
 8005436:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69d9      	ldr	r1, [r3, #28]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	61da      	str	r2, [r3, #28]
      break;
 800544a:	e06b      	b.n	8005524 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	0011      	movs	r1, r2
 8005454:	0018      	movs	r0, r3
 8005456:	f000 fa79 	bl	800594c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69da      	ldr	r2, [r3, #28]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2180      	movs	r1, #128	@ 0x80
 8005466:	0109      	lsls	r1, r1, #4
 8005468:	430a      	orrs	r2, r1
 800546a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	69da      	ldr	r2, [r3, #28]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4932      	ldr	r1, [pc, #200]	@ (8005540 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005478:	400a      	ands	r2, r1
 800547a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69d9      	ldr	r1, [r3, #28]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	021a      	lsls	r2, r3, #8
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	61da      	str	r2, [r3, #28]
      break;
 8005490:	e048      	b.n	8005524 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	0011      	movs	r1, r2
 800549a:	0018      	movs	r0, r3
 800549c:	f000 faba 	bl	8005a14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2108      	movs	r1, #8
 80054ac:	430a      	orrs	r2, r1
 80054ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2104      	movs	r1, #4
 80054bc:	438a      	bics	r2, r1
 80054be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80054d2:	e027      	b.n	8005524 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	0011      	movs	r1, r2
 80054dc:	0018      	movs	r0, r3
 80054de:	f000 faf3 	bl	8005ac8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2180      	movs	r1, #128	@ 0x80
 80054ee:	0109      	lsls	r1, r1, #4
 80054f0:	430a      	orrs	r2, r1
 80054f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4910      	ldr	r1, [pc, #64]	@ (8005540 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005500:	400a      	ands	r2, r1
 8005502:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	021a      	lsls	r2, r3, #8
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005518:	e004      	b.n	8005524 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800551a:	2317      	movs	r3, #23
 800551c:	18fb      	adds	r3, r7, r3
 800551e:	2201      	movs	r2, #1
 8005520:	701a      	strb	r2, [r3, #0]
      break;
 8005522:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	223c      	movs	r2, #60	@ 0x3c
 8005528:	2100      	movs	r1, #0
 800552a:	5499      	strb	r1, [r3, r2]

  return status;
 800552c:	2317      	movs	r3, #23
 800552e:	18fb      	adds	r3, r7, r3
 8005530:	781b      	ldrb	r3, [r3, #0]
}
 8005532:	0018      	movs	r0, r3
 8005534:	46bd      	mov	sp, r7
 8005536:	b006      	add	sp, #24
 8005538:	bd80      	pop	{r7, pc}
 800553a:	46c0      	nop			@ (mov r8, r8)
 800553c:	08005d98 	.word	0x08005d98
 8005540:	fffffbff 	.word	0xfffffbff

08005544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a37      	ldr	r2, [pc, #220]	@ (8005634 <TIM_Base_SetConfig+0xf0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d008      	beq.n	800556e <TIM_Base_SetConfig+0x2a>
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	2380      	movs	r3, #128	@ 0x80
 8005560:	05db      	lsls	r3, r3, #23
 8005562:	429a      	cmp	r2, r3
 8005564:	d003      	beq.n	800556e <TIM_Base_SetConfig+0x2a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a33      	ldr	r2, [pc, #204]	@ (8005638 <TIM_Base_SetConfig+0xf4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d108      	bne.n	8005580 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2270      	movs	r2, #112	@ 0x70
 8005572:	4393      	bics	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a2c      	ldr	r2, [pc, #176]	@ (8005634 <TIM_Base_SetConfig+0xf0>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d014      	beq.n	80055b2 <TIM_Base_SetConfig+0x6e>
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	2380      	movs	r3, #128	@ 0x80
 800558c:	05db      	lsls	r3, r3, #23
 800558e:	429a      	cmp	r2, r3
 8005590:	d00f      	beq.n	80055b2 <TIM_Base_SetConfig+0x6e>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a28      	ldr	r2, [pc, #160]	@ (8005638 <TIM_Base_SetConfig+0xf4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00b      	beq.n	80055b2 <TIM_Base_SetConfig+0x6e>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a27      	ldr	r2, [pc, #156]	@ (800563c <TIM_Base_SetConfig+0xf8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d007      	beq.n	80055b2 <TIM_Base_SetConfig+0x6e>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a26      	ldr	r2, [pc, #152]	@ (8005640 <TIM_Base_SetConfig+0xfc>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d003      	beq.n	80055b2 <TIM_Base_SetConfig+0x6e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a25      	ldr	r2, [pc, #148]	@ (8005644 <TIM_Base_SetConfig+0x100>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d108      	bne.n	80055c4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4a24      	ldr	r2, [pc, #144]	@ (8005648 <TIM_Base_SetConfig+0x104>)
 80055b6:	4013      	ands	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2280      	movs	r2, #128	@ 0x80
 80055c8:	4393      	bics	r3, r2
 80055ca:	001a      	movs	r2, r3
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a11      	ldr	r2, [pc, #68]	@ (8005634 <TIM_Base_SetConfig+0xf0>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d007      	beq.n	8005602 <TIM_Base_SetConfig+0xbe>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a12      	ldr	r2, [pc, #72]	@ (8005640 <TIM_Base_SetConfig+0xfc>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d003      	beq.n	8005602 <TIM_Base_SetConfig+0xbe>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a11      	ldr	r2, [pc, #68]	@ (8005644 <TIM_Base_SetConfig+0x100>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d103      	bne.n	800560a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	691a      	ldr	r2, [r3, #16]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	2201      	movs	r2, #1
 8005616:	4013      	ands	r3, r2
 8005618:	2b01      	cmp	r3, #1
 800561a:	d106      	bne.n	800562a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	2201      	movs	r2, #1
 8005622:	4393      	bics	r3, r2
 8005624:	001a      	movs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	611a      	str	r2, [r3, #16]
  }
}
 800562a:	46c0      	nop			@ (mov r8, r8)
 800562c:	46bd      	mov	sp, r7
 800562e:	b004      	add	sp, #16
 8005630:	bd80      	pop	{r7, pc}
 8005632:	46c0      	nop			@ (mov r8, r8)
 8005634:	40012c00 	.word	0x40012c00
 8005638:	40000400 	.word	0x40000400
 800563c:	40002000 	.word	0x40002000
 8005640:	40014400 	.word	0x40014400
 8005644:	40014800 	.word	0x40014800
 8005648:	fffffcff 	.word	0xfffffcff

0800564c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	2201      	movs	r2, #1
 8005662:	4393      	bics	r3, r2
 8005664:	001a      	movs	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4a2e      	ldr	r2, [pc, #184]	@ (8005734 <TIM_OC1_SetConfig+0xe8>)
 800567a:	4013      	ands	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2203      	movs	r2, #3
 8005682:	4393      	bics	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2202      	movs	r2, #2
 8005694:	4393      	bics	r3, r2
 8005696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a24      	ldr	r2, [pc, #144]	@ (8005738 <TIM_OC1_SetConfig+0xec>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d007      	beq.n	80056ba <TIM_OC1_SetConfig+0x6e>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a23      	ldr	r2, [pc, #140]	@ (800573c <TIM_OC1_SetConfig+0xf0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_OC1_SetConfig+0x6e>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a22      	ldr	r2, [pc, #136]	@ (8005740 <TIM_OC1_SetConfig+0xf4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d10c      	bne.n	80056d4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2208      	movs	r2, #8
 80056be:	4393      	bics	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2204      	movs	r2, #4
 80056d0:	4393      	bics	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a18      	ldr	r2, [pc, #96]	@ (8005738 <TIM_OC1_SetConfig+0xec>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d007      	beq.n	80056ec <TIM_OC1_SetConfig+0xa0>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a17      	ldr	r2, [pc, #92]	@ (800573c <TIM_OC1_SetConfig+0xf0>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d003      	beq.n	80056ec <TIM_OC1_SetConfig+0xa0>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a16      	ldr	r2, [pc, #88]	@ (8005740 <TIM_OC1_SetConfig+0xf4>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d111      	bne.n	8005710 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	4a15      	ldr	r2, [pc, #84]	@ (8005744 <TIM_OC1_SetConfig+0xf8>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	4a14      	ldr	r2, [pc, #80]	@ (8005748 <TIM_OC1_SetConfig+0xfc>)
 80056f8:	4013      	ands	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	621a      	str	r2, [r3, #32]
}
 800572a:	46c0      	nop			@ (mov r8, r8)
 800572c:	46bd      	mov	sp, r7
 800572e:	b006      	add	sp, #24
 8005730:	bd80      	pop	{r7, pc}
 8005732:	46c0      	nop			@ (mov r8, r8)
 8005734:	fffeff8f 	.word	0xfffeff8f
 8005738:	40012c00 	.word	0x40012c00
 800573c:	40014400 	.word	0x40014400
 8005740:	40014800 	.word	0x40014800
 8005744:	fffffeff 	.word	0xfffffeff
 8005748:	fffffdff 	.word	0xfffffdff

0800574c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	2210      	movs	r2, #16
 8005762:	4393      	bics	r3, r2
 8005764:	001a      	movs	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4a2c      	ldr	r2, [pc, #176]	@ (800582c <TIM_OC2_SetConfig+0xe0>)
 800577a:	4013      	ands	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4a2b      	ldr	r2, [pc, #172]	@ (8005830 <TIM_OC2_SetConfig+0xe4>)
 8005782:	4013      	ands	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	021b      	lsls	r3, r3, #8
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2220      	movs	r2, #32
 8005796:	4393      	bics	r3, r2
 8005798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a22      	ldr	r2, [pc, #136]	@ (8005834 <TIM_OC2_SetConfig+0xe8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d10d      	bne.n	80057ca <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2280      	movs	r2, #128	@ 0x80
 80057b2:	4393      	bics	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	4313      	orrs	r3, r2
 80057c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2240      	movs	r2, #64	@ 0x40
 80057c6:	4393      	bics	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a19      	ldr	r2, [pc, #100]	@ (8005834 <TIM_OC2_SetConfig+0xe8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d007      	beq.n	80057e2 <TIM_OC2_SetConfig+0x96>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a18      	ldr	r2, [pc, #96]	@ (8005838 <TIM_OC2_SetConfig+0xec>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d003      	beq.n	80057e2 <TIM_OC2_SetConfig+0x96>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a17      	ldr	r2, [pc, #92]	@ (800583c <TIM_OC2_SetConfig+0xf0>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d113      	bne.n	800580a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	4a16      	ldr	r2, [pc, #88]	@ (8005840 <TIM_OC2_SetConfig+0xf4>)
 80057e6:	4013      	ands	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	4a15      	ldr	r2, [pc, #84]	@ (8005844 <TIM_OC2_SetConfig+0xf8>)
 80057ee:	4013      	ands	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	621a      	str	r2, [r3, #32]
}
 8005824:	46c0      	nop			@ (mov r8, r8)
 8005826:	46bd      	mov	sp, r7
 8005828:	b006      	add	sp, #24
 800582a:	bd80      	pop	{r7, pc}
 800582c:	feff8fff 	.word	0xfeff8fff
 8005830:	fffffcff 	.word	0xfffffcff
 8005834:	40012c00 	.word	0x40012c00
 8005838:	40014400 	.word	0x40014400
 800583c:	40014800 	.word	0x40014800
 8005840:	fffffbff 	.word	0xfffffbff
 8005844:	fffff7ff 	.word	0xfffff7ff

08005848 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	4a31      	ldr	r2, [pc, #196]	@ (8005924 <TIM_OC3_SetConfig+0xdc>)
 800585e:	401a      	ands	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4a2d      	ldr	r2, [pc, #180]	@ (8005928 <TIM_OC3_SetConfig+0xe0>)
 8005874:	4013      	ands	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2203      	movs	r2, #3
 800587c:	4393      	bics	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	4a27      	ldr	r2, [pc, #156]	@ (800592c <TIM_OC3_SetConfig+0xe4>)
 800588e:	4013      	ands	r3, r2
 8005890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	021b      	lsls	r3, r3, #8
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a23      	ldr	r2, [pc, #140]	@ (8005930 <TIM_OC3_SetConfig+0xe8>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d10d      	bne.n	80058c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	4a22      	ldr	r2, [pc, #136]	@ (8005934 <TIM_OC3_SetConfig+0xec>)
 80058aa:	4013      	ands	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	021b      	lsls	r3, r3, #8
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005938 <TIM_OC3_SetConfig+0xf0>)
 80058be:	4013      	ands	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a1a      	ldr	r2, [pc, #104]	@ (8005930 <TIM_OC3_SetConfig+0xe8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d007      	beq.n	80058da <TIM_OC3_SetConfig+0x92>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a1b      	ldr	r2, [pc, #108]	@ (800593c <TIM_OC3_SetConfig+0xf4>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d003      	beq.n	80058da <TIM_OC3_SetConfig+0x92>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005940 <TIM_OC3_SetConfig+0xf8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d113      	bne.n	8005902 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	4a19      	ldr	r2, [pc, #100]	@ (8005944 <TIM_OC3_SetConfig+0xfc>)
 80058de:	4013      	ands	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	4a18      	ldr	r2, [pc, #96]	@ (8005948 <TIM_OC3_SetConfig+0x100>)
 80058e6:	4013      	ands	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4313      	orrs	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	621a      	str	r2, [r3, #32]
}
 800591c:	46c0      	nop			@ (mov r8, r8)
 800591e:	46bd      	mov	sp, r7
 8005920:	b006      	add	sp, #24
 8005922:	bd80      	pop	{r7, pc}
 8005924:	fffffeff 	.word	0xfffffeff
 8005928:	fffeff8f 	.word	0xfffeff8f
 800592c:	fffffdff 	.word	0xfffffdff
 8005930:	40012c00 	.word	0x40012c00
 8005934:	fffff7ff 	.word	0xfffff7ff
 8005938:	fffffbff 	.word	0xfffffbff
 800593c:	40014400 	.word	0x40014400
 8005940:	40014800 	.word	0x40014800
 8005944:	ffffefff 	.word	0xffffefff
 8005948:	ffffdfff 	.word	0xffffdfff

0800594c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	4a24      	ldr	r2, [pc, #144]	@ (80059f4 <TIM_OC4_SetConfig+0xa8>)
 8005962:	401a      	ands	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4a20      	ldr	r2, [pc, #128]	@ (80059f8 <TIM_OC4_SetConfig+0xac>)
 8005978:	4013      	ands	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4a1f      	ldr	r2, [pc, #124]	@ (80059fc <TIM_OC4_SetConfig+0xb0>)
 8005980:	4013      	ands	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	021b      	lsls	r3, r3, #8
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	4a1b      	ldr	r2, [pc, #108]	@ (8005a00 <TIM_OC4_SetConfig+0xb4>)
 8005994:	4013      	ands	r3, r2
 8005996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	031b      	lsls	r3, r3, #12
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a17      	ldr	r2, [pc, #92]	@ (8005a04 <TIM_OC4_SetConfig+0xb8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d007      	beq.n	80059bc <TIM_OC4_SetConfig+0x70>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a16      	ldr	r2, [pc, #88]	@ (8005a08 <TIM_OC4_SetConfig+0xbc>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_OC4_SetConfig+0x70>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a15      	ldr	r2, [pc, #84]	@ (8005a0c <TIM_OC4_SetConfig+0xc0>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d109      	bne.n	80059d0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	4a14      	ldr	r2, [pc, #80]	@ (8005a10 <TIM_OC4_SetConfig+0xc4>)
 80059c0:	4013      	ands	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	019b      	lsls	r3, r3, #6
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	46c0      	nop			@ (mov r8, r8)
 80059ec:	46bd      	mov	sp, r7
 80059ee:	b006      	add	sp, #24
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	46c0      	nop			@ (mov r8, r8)
 80059f4:	ffffefff 	.word	0xffffefff
 80059f8:	feff8fff 	.word	0xfeff8fff
 80059fc:	fffffcff 	.word	0xfffffcff
 8005a00:	ffffdfff 	.word	0xffffdfff
 8005a04:	40012c00 	.word	0x40012c00
 8005a08:	40014400 	.word	0x40014400
 8005a0c:	40014800 	.word	0x40014800
 8005a10:	ffffbfff 	.word	0xffffbfff

08005a14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	4a21      	ldr	r2, [pc, #132]	@ (8005ab0 <TIM_OC5_SetConfig+0x9c>)
 8005a2a:	401a      	ands	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ab4 <TIM_OC5_SetConfig+0xa0>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	4a19      	ldr	r2, [pc, #100]	@ (8005ab8 <TIM_OC5_SetConfig+0xa4>)
 8005a52:	4013      	ands	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	041b      	lsls	r3, r3, #16
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a15      	ldr	r2, [pc, #84]	@ (8005abc <TIM_OC5_SetConfig+0xa8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d007      	beq.n	8005a7a <TIM_OC5_SetConfig+0x66>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a14      	ldr	r2, [pc, #80]	@ (8005ac0 <TIM_OC5_SetConfig+0xac>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d003      	beq.n	8005a7a <TIM_OC5_SetConfig+0x66>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a13      	ldr	r2, [pc, #76]	@ (8005ac4 <TIM_OC5_SetConfig+0xb0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d109      	bne.n	8005a8e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	4a0c      	ldr	r2, [pc, #48]	@ (8005ab0 <TIM_OC5_SetConfig+0x9c>)
 8005a7e:	4013      	ands	r3, r2
 8005a80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	021b      	lsls	r3, r3, #8
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	621a      	str	r2, [r3, #32]
}
 8005aa8:	46c0      	nop			@ (mov r8, r8)
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	b006      	add	sp, #24
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	fffeffff 	.word	0xfffeffff
 8005ab4:	fffeff8f 	.word	0xfffeff8f
 8005ab8:	fffdffff 	.word	0xfffdffff
 8005abc:	40012c00 	.word	0x40012c00
 8005ac0:	40014400 	.word	0x40014400
 8005ac4:	40014800 	.word	0x40014800

08005ac8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	4a22      	ldr	r2, [pc, #136]	@ (8005b68 <TIM_OC6_SetConfig+0xa0>)
 8005ade:	401a      	ands	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4a1e      	ldr	r2, [pc, #120]	@ (8005b6c <TIM_OC6_SetConfig+0xa4>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	021b      	lsls	r3, r3, #8
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	4a1a      	ldr	r2, [pc, #104]	@ (8005b70 <TIM_OC6_SetConfig+0xa8>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	051b      	lsls	r3, r3, #20
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a16      	ldr	r2, [pc, #88]	@ (8005b74 <TIM_OC6_SetConfig+0xac>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d007      	beq.n	8005b30 <TIM_OC6_SetConfig+0x68>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a15      	ldr	r2, [pc, #84]	@ (8005b78 <TIM_OC6_SetConfig+0xb0>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d003      	beq.n	8005b30 <TIM_OC6_SetConfig+0x68>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a14      	ldr	r2, [pc, #80]	@ (8005b7c <TIM_OC6_SetConfig+0xb4>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d109      	bne.n	8005b44 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	4a13      	ldr	r2, [pc, #76]	@ (8005b80 <TIM_OC6_SetConfig+0xb8>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	029b      	lsls	r3, r3, #10
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	621a      	str	r2, [r3, #32]
}
 8005b5e:	46c0      	nop			@ (mov r8, r8)
 8005b60:	46bd      	mov	sp, r7
 8005b62:	b006      	add	sp, #24
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	46c0      	nop			@ (mov r8, r8)
 8005b68:	ffefffff 	.word	0xffefffff
 8005b6c:	feff8fff 	.word	0xfeff8fff
 8005b70:	ffdfffff 	.word	0xffdfffff
 8005b74:	40012c00 	.word	0x40012c00
 8005b78:	40014400 	.word	0x40014400
 8005b7c:	40014800 	.word	0x40014800
 8005b80:	fffbffff 	.word	0xfffbffff

08005b84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	221f      	movs	r2, #31
 8005b94:	4013      	ands	r3, r2
 8005b96:	2201      	movs	r2, #1
 8005b98:	409a      	lsls	r2, r3
 8005b9a:	0013      	movs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	43d2      	mvns	r2, r2
 8005ba6:	401a      	ands	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a1a      	ldr	r2, [r3, #32]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	211f      	movs	r1, #31
 8005bb4:	400b      	ands	r3, r1
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	4099      	lsls	r1, r3
 8005bba:	000b      	movs	r3, r1
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	621a      	str	r2, [r3, #32]
}
 8005bc2:	46c0      	nop			@ (mov r8, r8)
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b006      	add	sp, #24
 8005bc8:	bd80      	pop	{r7, pc}
	...

08005bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	223c      	movs	r2, #60	@ 0x3c
 8005bda:	5c9b      	ldrb	r3, [r3, r2]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e050      	b.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	223c      	movs	r2, #60	@ 0x3c
 8005be8:	2101      	movs	r1, #1
 8005bea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	223d      	movs	r2, #61	@ 0x3d
 8005bf0:	2102      	movs	r1, #2
 8005bf2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a21      	ldr	r2, [pc, #132]	@ (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d108      	bne.n	8005c20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4a20      	ldr	r2, [pc, #128]	@ (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005c12:	4013      	ands	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2270      	movs	r2, #112	@ 0x70
 8005c24:	4393      	bics	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a14      	ldr	r2, [pc, #80]	@ (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00a      	beq.n	8005c5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	2380      	movs	r3, #128	@ 0x80
 8005c4a:	05db      	lsls	r3, r3, #23
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d004      	beq.n	8005c5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a10      	ldr	r2, [pc, #64]	@ (8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d10c      	bne.n	8005c74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2280      	movs	r2, #128	@ 0x80
 8005c5e:	4393      	bics	r3, r2
 8005c60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	223d      	movs	r2, #61	@ 0x3d
 8005c78:	2101      	movs	r1, #1
 8005c7a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	223c      	movs	r2, #60	@ 0x3c
 8005c80:	2100      	movs	r1, #0
 8005c82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	0018      	movs	r0, r3
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	b004      	add	sp, #16
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	46c0      	nop			@ (mov r8, r8)
 8005c90:	40012c00 	.word	0x40012c00
 8005c94:	ff0fffff 	.word	0xff0fffff
 8005c98:	40000400 	.word	0x40000400

08005c9c <memset>:
 8005c9c:	0003      	movs	r3, r0
 8005c9e:	1882      	adds	r2, r0, r2
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d100      	bne.n	8005ca6 <memset+0xa>
 8005ca4:	4770      	bx	lr
 8005ca6:	7019      	strb	r1, [r3, #0]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	e7f9      	b.n	8005ca0 <memset+0x4>

08005cac <__libc_init_array>:
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	2600      	movs	r6, #0
 8005cb0:	4c0c      	ldr	r4, [pc, #48]	@ (8005ce4 <__libc_init_array+0x38>)
 8005cb2:	4d0d      	ldr	r5, [pc, #52]	@ (8005ce8 <__libc_init_array+0x3c>)
 8005cb4:	1b64      	subs	r4, r4, r5
 8005cb6:	10a4      	asrs	r4, r4, #2
 8005cb8:	42a6      	cmp	r6, r4
 8005cba:	d109      	bne.n	8005cd0 <__libc_init_array+0x24>
 8005cbc:	2600      	movs	r6, #0
 8005cbe:	f000 f823 	bl	8005d08 <_init>
 8005cc2:	4c0a      	ldr	r4, [pc, #40]	@ (8005cec <__libc_init_array+0x40>)
 8005cc4:	4d0a      	ldr	r5, [pc, #40]	@ (8005cf0 <__libc_init_array+0x44>)
 8005cc6:	1b64      	subs	r4, r4, r5
 8005cc8:	10a4      	asrs	r4, r4, #2
 8005cca:	42a6      	cmp	r6, r4
 8005ccc:	d105      	bne.n	8005cda <__libc_init_array+0x2e>
 8005cce:	bd70      	pop	{r4, r5, r6, pc}
 8005cd0:	00b3      	lsls	r3, r6, #2
 8005cd2:	58eb      	ldr	r3, [r5, r3]
 8005cd4:	4798      	blx	r3
 8005cd6:	3601      	adds	r6, #1
 8005cd8:	e7ee      	b.n	8005cb8 <__libc_init_array+0xc>
 8005cda:	00b3      	lsls	r3, r6, #2
 8005cdc:	58eb      	ldr	r3, [r5, r3]
 8005cde:	4798      	blx	r3
 8005ce0:	3601      	adds	r6, #1
 8005ce2:	e7f2      	b.n	8005cca <__libc_init_array+0x1e>
 8005ce4:	08005dec 	.word	0x08005dec
 8005ce8:	08005dec 	.word	0x08005dec
 8005cec:	08005df0 	.word	0x08005df0
 8005cf0:	08005dec 	.word	0x08005dec

08005cf4 <memcpy>:
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	b510      	push	{r4, lr}
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d100      	bne.n	8005cfe <memcpy+0xa>
 8005cfc:	bd10      	pop	{r4, pc}
 8005cfe:	5ccc      	ldrb	r4, [r1, r3]
 8005d00:	54c4      	strb	r4, [r0, r3]
 8005d02:	3301      	adds	r3, #1
 8005d04:	e7f8      	b.n	8005cf8 <memcpy+0x4>
	...

08005d08 <_init>:
 8005d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0a:	46c0      	nop			@ (mov r8, r8)
 8005d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0e:	bc08      	pop	{r3}
 8005d10:	469e      	mov	lr, r3
 8005d12:	4770      	bx	lr

08005d14 <_fini>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	46c0      	nop			@ (mov r8, r8)
 8005d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1a:	bc08      	pop	{r3}
 8005d1c:	469e      	mov	lr, r3
 8005d1e:	4770      	bx	lr
