
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004fac  08004fac  00005fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005054  08005054  00007050  2**0
                  CONTENTS
  4 .ARM          00000000  08005054  08005054  00007050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005054  08005054  00007050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005054  08005054  00006054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005058  08005058  00006058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  0800505c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000050  080050ac  00007050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  080050ac  00007228  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f41  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bcd  00000000  00000000  00019fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  0001cb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f3c  00000000  00000000  0001df18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f3d  00000000  00000000  0001ee54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017867  00000000  00000000  00037d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a115f  00000000  00000000  0004f5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0757  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004748  00000000  00000000  000f079c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000f4ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000050 	.word	0x20000050
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004f94 	.word	0x08004f94

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000054 	.word	0x20000054
 8000100:	08004f94 	.word	0x08004f94

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <getRTCTime>:
				internalAlarm_initTest.AlarmTime.Minutes, internalAlarm_initTest.AlarmTime.Seconds);
	}

}

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000228:	68b9      	ldr	r1, [r7, #8]
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	2200      	movs	r2, #0
 800022e:	0018      	movs	r0, r3
 8000230:	f003 fbdc 	bl	80039ec <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000234:	6879      	ldr	r1, [r7, #4]
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	2200      	movs	r2, #0
 800023a:	0018      	movs	r0, r3
 800023c:	f003 fcc4 	bl	8003bc8 <HAL_RTC_GetDate>

}
 8000240:	46c0      	nop			@ (mov r8, r8)
 8000242:	46bd      	mov	sp, r7
 8000244:	b004      	add	sp, #16
 8000246:	bd80      	pop	{r7, pc}

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800024a:	b089      	sub	sp, #36	@ 0x24
 800024c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024e:	f001 fb09 	bl	8001864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000252:	f000 f847 	bl	80002e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000256:	f000 fa97 	bl	8000788 <MX_GPIO_Init>
  MX_ADC1_Init();
 800025a:	f000 f8af 	bl	80003bc <MX_ADC1_Init>
  MX_RTC_Init();
 800025e:	f000 f959 	bl	8000514 <MX_RTC_Init>
  MX_I2C1_Init();
 8000262:	f000 f917 	bl	8000494 <MX_I2C1_Init>
  MX_TIM14_Init();
 8000266:	f000 fa69 	bl	800073c <MX_TIM14_Init>
  MX_TIM2_Init();
 800026a:	f000 fa07 	bl	800067c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 800026e:	2380      	movs	r3, #128	@ 0x80
 8000270:	009c      	lsls	r4, r3, #2
 8000272:	2380      	movs	r3, #128	@ 0x80
 8000274:	00dd      	lsls	r5, r3, #3
 8000276:	2680      	movs	r6, #128	@ 0x80
 8000278:	2340      	movs	r3, #64	@ 0x40
 800027a:	469c      	mov	ip, r3
 800027c:	2380      	movs	r3, #128	@ 0x80
 800027e:	011a      	lsls	r2, r3, #4
 8000280:	4b12      	ldr	r3, [pc, #72]	@ (80002cc <main+0x84>)
 8000282:	6819      	ldr	r1, [r3, #0]
 8000284:	4b12      	ldr	r3, [pc, #72]	@ (80002d0 <main+0x88>)
 8000286:	6818      	ldr	r0, [r3, #0]
 8000288:	4b12      	ldr	r3, [pc, #72]	@ (80002d4 <main+0x8c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	9304      	str	r3, [sp, #16]
 800028e:	9003      	str	r0, [sp, #12]
 8000290:	9102      	str	r1, [sp, #8]
 8000292:	4b11      	ldr	r3, [pc, #68]	@ (80002d8 <main+0x90>)
 8000294:	9301      	str	r3, [sp, #4]
 8000296:	9200      	str	r2, [sp, #0]
 8000298:	4663      	mov	r3, ip
 800029a:	0032      	movs	r2, r6
 800029c:	0029      	movs	r1, r5
 800029e:	0020      	movs	r0, r4
 80002a0:	f000 fed4 	bl	800104c <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);

	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 80002a4:	1dfc      	adds	r4, r7, #7
 80002a6:	f000 fb41 	bl	800092c <updateAndDisplayTime>
 80002aa:	0003      	movs	r3, r0
 80002ac:	7023      	strb	r3, [r4, #0]
		//printf("HAL Error - TX current time\n\r");
	} else {
		//printf("Display Updated with current time\n\r");
	}

	userAlarmToggle = false;			//Default to off
 80002ae:	4b0b      	ldr	r3, [pc, #44]	@ (80002dc <main+0x94>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	701a      	strb	r2, [r3, #0]

    // User alarm default value
    userAlarmTime.Hours = 1;
 80002b4:	4b0a      	ldr	r3, [pc, #40]	@ (80002e0 <main+0x98>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	701a      	strb	r2, [r3, #0]
    userAlarmTime.Minutes = 1;
 80002ba:	4b09      	ldr	r3, [pc, #36]	@ (80002e0 <main+0x98>)
 80002bc:	2201      	movs	r2, #1
 80002be:	705a      	strb	r2, [r3, #1]
    userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80002c0:	4b07      	ldr	r3, [pc, #28]	@ (80002e0 <main+0x98>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	70da      	strb	r2, [r3, #3]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80002c6:	46c0      	nop			@ (mov r8, r8)
 80002c8:	e7fd      	b.n	80002c6 <main+0x7e>
 80002ca:	46c0      	nop			@ (mov r8, r8)
 80002cc:	20000020 	.word	0x20000020
 80002d0:	20000024 	.word	0x20000024
 80002d4:	20000028 	.word	0x20000028
 80002d8:	2000000c 	.word	0x2000000c
 80002dc:	2000006d 	.word	0x2000006d
 80002e0:	20000204 	.word	0x20000204

080002e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e4:	b590      	push	{r4, r7, lr}
 80002e6:	b093      	sub	sp, #76	@ 0x4c
 80002e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ea:	2410      	movs	r4, #16
 80002ec:	193b      	adds	r3, r7, r4
 80002ee:	0018      	movs	r0, r3
 80002f0:	2338      	movs	r3, #56	@ 0x38
 80002f2:	001a      	movs	r2, r3
 80002f4:	2100      	movs	r1, #0
 80002f6:	f004 fe21 	bl	8004f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fa:	003b      	movs	r3, r7
 80002fc:	0018      	movs	r0, r3
 80002fe:	2310      	movs	r3, #16
 8000300:	001a      	movs	r2, r3
 8000302:	2100      	movs	r1, #0
 8000304:	f004 fe1a 	bl	8004f3c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000308:	2380      	movs	r3, #128	@ 0x80
 800030a:	009b      	lsls	r3, r3, #2
 800030c:	0018      	movs	r0, r3
 800030e:	f002 fbc5 	bl	8002a9c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000312:	f002 fbb5 	bl	8002a80 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000316:	4b28      	ldr	r3, [pc, #160]	@ (80003b8 <SystemClock_Config+0xd4>)
 8000318:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800031a:	4b27      	ldr	r3, [pc, #156]	@ (80003b8 <SystemClock_Config+0xd4>)
 800031c:	2118      	movs	r1, #24
 800031e:	438a      	bics	r2, r1
 8000320:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000322:	193b      	adds	r3, r7, r4
 8000324:	2206      	movs	r2, #6
 8000326:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000328:	193b      	adds	r3, r7, r4
 800032a:	2201      	movs	r2, #1
 800032c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032e:	193b      	adds	r3, r7, r4
 8000330:	2280      	movs	r2, #128	@ 0x80
 8000332:	0052      	lsls	r2, r2, #1
 8000334:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000336:	0021      	movs	r1, r4
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2200      	movs	r2, #0
 800033c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2240      	movs	r2, #64	@ 0x40
 8000342:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2202      	movs	r2, #2
 8000348:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2202      	movs	r2, #2
 800034e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2200      	movs	r2, #0
 8000354:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2208      	movs	r2, #8
 800035a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2280      	movs	r2, #128	@ 0x80
 8000360:	0292      	lsls	r2, r2, #10
 8000362:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2280      	movs	r2, #128	@ 0x80
 8000368:	0492      	lsls	r2, r2, #18
 800036a:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2280      	movs	r2, #128	@ 0x80
 8000370:	0592      	lsls	r2, r2, #22
 8000372:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000374:	187b      	adds	r3, r7, r1
 8000376:	0018      	movs	r0, r3
 8000378:	f002 fbd0 	bl	8002b1c <HAL_RCC_OscConfig>
 800037c:	1e03      	subs	r3, r0, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000380:	f000 fe5e 	bl	8001040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000384:	003b      	movs	r3, r7
 8000386:	2207      	movs	r2, #7
 8000388:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038a:	003b      	movs	r3, r7
 800038c:	2202      	movs	r2, #2
 800038e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000390:	003b      	movs	r3, r7
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000396:	003b      	movs	r3, r7
 8000398:	2200      	movs	r2, #0
 800039a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800039c:	003b      	movs	r3, r7
 800039e:	2102      	movs	r1, #2
 80003a0:	0018      	movs	r0, r3
 80003a2:	f002 fed5 	bl	8003150 <HAL_RCC_ClockConfig>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0xca>
  {
    Error_Handler();
 80003aa:	f000 fe49 	bl	8001040 <Error_Handler>
  }
}
 80003ae:	46c0      	nop			@ (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	b013      	add	sp, #76	@ 0x4c
 80003b4:	bd90      	pop	{r4, r7, pc}
 80003b6:	46c0      	nop			@ (mov r8, r8)
 80003b8:	40021000 	.word	0x40021000

080003bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	0018      	movs	r0, r3
 80003c6:	230c      	movs	r3, #12
 80003c8:	001a      	movs	r2, r3
 80003ca:	2100      	movs	r1, #0
 80003cc:	f004 fdb6 	bl	8004f3c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80003d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000488 <MX_ADC1_Init+0xcc>)
 80003d2:	4a2e      	ldr	r2, [pc, #184]	@ (800048c <MX_ADC1_Init+0xd0>)
 80003d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80003d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000488 <MX_ADC1_Init+0xcc>)
 80003d8:	2280      	movs	r2, #128	@ 0x80
 80003da:	05d2      	lsls	r2, r2, #23
 80003dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003de:	4b2a      	ldr	r3, [pc, #168]	@ (8000488 <MX_ADC1_Init+0xcc>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003e4:	4b28      	ldr	r3, [pc, #160]	@ (8000488 <MX_ADC1_Init+0xcc>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ea:	4b27      	ldr	r3, [pc, #156]	@ (8000488 <MX_ADC1_Init+0xcc>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003f0:	4b25      	ldr	r3, [pc, #148]	@ (8000488 <MX_ADC1_Init+0xcc>)
 80003f2:	2204      	movs	r2, #4
 80003f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003f6:	4b24      	ldr	r3, [pc, #144]	@ (8000488 <MX_ADC1_Init+0xcc>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80003fc:	4b22      	ldr	r3, [pc, #136]	@ (8000488 <MX_ADC1_Init+0xcc>)
 80003fe:	2200      	movs	r2, #0
 8000400:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000402:	4b21      	ldr	r3, [pc, #132]	@ (8000488 <MX_ADC1_Init+0xcc>)
 8000404:	2200      	movs	r2, #0
 8000406:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000408:	4b1f      	ldr	r3, [pc, #124]	@ (8000488 <MX_ADC1_Init+0xcc>)
 800040a:	2201      	movs	r2, #1
 800040c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800040e:	4b1e      	ldr	r3, [pc, #120]	@ (8000488 <MX_ADC1_Init+0xcc>)
 8000410:	2220      	movs	r2, #32
 8000412:	2100      	movs	r1, #0
 8000414:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000416:	4b1c      	ldr	r3, [pc, #112]	@ (8000488 <MX_ADC1_Init+0xcc>)
 8000418:	2200      	movs	r2, #0
 800041a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800041c:	4b1a      	ldr	r3, [pc, #104]	@ (8000488 <MX_ADC1_Init+0xcc>)
 800041e:	2200      	movs	r2, #0
 8000420:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000422:	4b19      	ldr	r3, [pc, #100]	@ (8000488 <MX_ADC1_Init+0xcc>)
 8000424:	222c      	movs	r2, #44	@ 0x2c
 8000426:	2100      	movs	r1, #0
 8000428:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800042a:	4b17      	ldr	r3, [pc, #92]	@ (8000488 <MX_ADC1_Init+0xcc>)
 800042c:	2200      	movs	r2, #0
 800042e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000430:	4b15      	ldr	r3, [pc, #84]	@ (8000488 <MX_ADC1_Init+0xcc>)
 8000432:	2200      	movs	r2, #0
 8000434:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000436:	4b14      	ldr	r3, [pc, #80]	@ (8000488 <MX_ADC1_Init+0xcc>)
 8000438:	2200      	movs	r2, #0
 800043a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800043c:	4b12      	ldr	r3, [pc, #72]	@ (8000488 <MX_ADC1_Init+0xcc>)
 800043e:	223c      	movs	r2, #60	@ 0x3c
 8000440:	2100      	movs	r1, #0
 8000442:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000444:	4b10      	ldr	r3, [pc, #64]	@ (8000488 <MX_ADC1_Init+0xcc>)
 8000446:	2200      	movs	r2, #0
 8000448:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800044a:	4b0f      	ldr	r3, [pc, #60]	@ (8000488 <MX_ADC1_Init+0xcc>)
 800044c:	0018      	movs	r0, r3
 800044e:	f001 fb8d 	bl	8001b6c <HAL_ADC_Init>
 8000452:	1e03      	subs	r3, r0, #0
 8000454:	d001      	beq.n	800045a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000456:	f000 fdf3 	bl	8001040 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	4a0c      	ldr	r2, [pc, #48]	@ (8000490 <MX_ADC1_Init+0xd4>)
 800045e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2200      	movs	r2, #0
 8000464:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800046c:	1d3a      	adds	r2, r7, #4
 800046e:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <MX_ADC1_Init+0xcc>)
 8000470:	0011      	movs	r1, r2
 8000472:	0018      	movs	r0, r3
 8000474:	f001 fd22 	bl	8001ebc <HAL_ADC_ConfigChannel>
 8000478:	1e03      	subs	r3, r0, #0
 800047a:	d001      	beq.n	8000480 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800047c:	f000 fde0 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000480:	46c0      	nop			@ (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b004      	add	sp, #16
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000070 	.word	0x20000070
 800048c:	40012400 	.word	0x40012400
 8000490:	08000004 	.word	0x08000004

08000494 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000498:	4b1b      	ldr	r3, [pc, #108]	@ (8000508 <MX_I2C1_Init+0x74>)
 800049a:	4a1c      	ldr	r2, [pc, #112]	@ (800050c <MX_I2C1_Init+0x78>)
 800049c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800049e:	4b1a      	ldr	r3, [pc, #104]	@ (8000508 <MX_I2C1_Init+0x74>)
 80004a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000510 <MX_I2C1_Init+0x7c>)
 80004a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004a4:	4b18      	ldr	r3, [pc, #96]	@ (8000508 <MX_I2C1_Init+0x74>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004aa:	4b17      	ldr	r3, [pc, #92]	@ (8000508 <MX_I2C1_Init+0x74>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b0:	4b15      	ldr	r3, [pc, #84]	@ (8000508 <MX_I2C1_Init+0x74>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004b6:	4b14      	ldr	r3, [pc, #80]	@ (8000508 <MX_I2C1_Init+0x74>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004bc:	4b12      	ldr	r3, [pc, #72]	@ (8000508 <MX_I2C1_Init+0x74>)
 80004be:	2200      	movs	r2, #0
 80004c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004c2:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <MX_I2C1_Init+0x74>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000508 <MX_I2C1_Init+0x74>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000508 <MX_I2C1_Init+0x74>)
 80004d0:	0018      	movs	r0, r3
 80004d2:	f002 f997 	bl	8002804 <HAL_I2C_Init>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004da:	f000 fdb1 	bl	8001040 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004de:	4b0a      	ldr	r3, [pc, #40]	@ (8000508 <MX_I2C1_Init+0x74>)
 80004e0:	2100      	movs	r1, #0
 80004e2:	0018      	movs	r0, r3
 80004e4:	f002 fa34 	bl	8002950 <HAL_I2CEx_ConfigAnalogFilter>
 80004e8:	1e03      	subs	r3, r0, #0
 80004ea:	d001      	beq.n	80004f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004ec:	f000 fda8 	bl	8001040 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004f0:	4b05      	ldr	r3, [pc, #20]	@ (8000508 <MX_I2C1_Init+0x74>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	0018      	movs	r0, r3
 80004f6:	f002 fa77 	bl	80029e8 <HAL_I2CEx_ConfigDigitalFilter>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004fe:	f000 fd9f 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000502:	46c0      	nop			@ (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	200000d4 	.word	0x200000d4
 800050c:	40005400 	.word	0x40005400
 8000510:	10707dbc 	.word	0x10707dbc

08000514 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b090      	sub	sp, #64	@ 0x40
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800051a:	232c      	movs	r3, #44	@ 0x2c
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	0018      	movs	r0, r3
 8000520:	2314      	movs	r3, #20
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	f004 fd09 	bl	8004f3c <memset>
  RTC_DateTypeDef sDate = {0};
 800052a:	2328      	movs	r3, #40	@ 0x28
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000532:	003b      	movs	r3, r7
 8000534:	0018      	movs	r0, r3
 8000536:	2328      	movs	r3, #40	@ 0x28
 8000538:	001a      	movs	r2, r3
 800053a:	2100      	movs	r1, #0
 800053c:	f004 fcfe 	bl	8004f3c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000540:	4b4b      	ldr	r3, [pc, #300]	@ (8000670 <MX_RTC_Init+0x15c>)
 8000542:	4a4c      	ldr	r2, [pc, #304]	@ (8000674 <MX_RTC_Init+0x160>)
 8000544:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000546:	4b4a      	ldr	r3, [pc, #296]	@ (8000670 <MX_RTC_Init+0x15c>)
 8000548:	2240      	movs	r2, #64	@ 0x40
 800054a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800054c:	4b48      	ldr	r3, [pc, #288]	@ (8000670 <MX_RTC_Init+0x15c>)
 800054e:	227f      	movs	r2, #127	@ 0x7f
 8000550:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000552:	4b47      	ldr	r3, [pc, #284]	@ (8000670 <MX_RTC_Init+0x15c>)
 8000554:	22ff      	movs	r2, #255	@ 0xff
 8000556:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000558:	4b45      	ldr	r3, [pc, #276]	@ (8000670 <MX_RTC_Init+0x15c>)
 800055a:	2200      	movs	r2, #0
 800055c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800055e:	4b44      	ldr	r3, [pc, #272]	@ (8000670 <MX_RTC_Init+0x15c>)
 8000560:	2200      	movs	r2, #0
 8000562:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000564:	4b42      	ldr	r3, [pc, #264]	@ (8000670 <MX_RTC_Init+0x15c>)
 8000566:	2200      	movs	r2, #0
 8000568:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800056a:	4b41      	ldr	r3, [pc, #260]	@ (8000670 <MX_RTC_Init+0x15c>)
 800056c:	2280      	movs	r2, #128	@ 0x80
 800056e:	05d2      	lsls	r2, r2, #23
 8000570:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000572:	4b3f      	ldr	r3, [pc, #252]	@ (8000670 <MX_RTC_Init+0x15c>)
 8000574:	2200      	movs	r2, #0
 8000576:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000578:	4b3d      	ldr	r3, [pc, #244]	@ (8000670 <MX_RTC_Init+0x15c>)
 800057a:	0018      	movs	r0, r3
 800057c:	f003 f8ec 	bl	8003758 <HAL_RTC_Init>
 8000580:	1e03      	subs	r3, r0, #0
 8000582:	d001      	beq.n	8000588 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000584:	f000 fd5c 	bl	8001040 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000588:	212c      	movs	r1, #44	@ 0x2c
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2201      	movs	r2, #1
 800058e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2200      	movs	r2, #0
 80005a6:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80005b4:	1879      	adds	r1, r7, r1
 80005b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000670 <MX_RTC_Init+0x15c>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	0018      	movs	r0, r3
 80005bc:	f003 f96e 	bl	800389c <HAL_RTC_SetTime>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 80005c4:	f000 fd3c 	bl	8001040 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80005c8:	2128      	movs	r1, #40	@ 0x28
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2201      	movs	r2, #1
 80005d4:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2201      	movs	r2, #1
 80005da:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2200      	movs	r2, #0
 80005e0:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80005e2:	1879      	adds	r1, r7, r1
 80005e4:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <MX_RTC_Init+0x15c>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	0018      	movs	r0, r3
 80005ea:	f003 fa5b 	bl	8003aa4 <HAL_RTC_SetDate>
 80005ee:	1e03      	subs	r3, r0, #0
 80005f0:	d001      	beq.n	80005f6 <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 80005f2:	f000 fd25 	bl	8001040 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 80005f6:	003b      	movs	r3, r7
 80005f8:	2201      	movs	r2, #1
 80005fa:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 80005fc:	003b      	movs	r3, r7
 80005fe:	2201      	movs	r2, #1
 8000600:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000602:	003b      	movs	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000608:	003b      	movs	r3, r7
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800060e:	003b      	movs	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000614:	003b      	movs	r3, r7
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800061a:	003b      	movs	r3, r7
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000620:	003b      	movs	r3, r7
 8000622:	4a15      	ldr	r2, [pc, #84]	@ (8000678 <MX_RTC_Init+0x164>)
 8000624:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000626:	003b      	movs	r3, r7
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800062c:	003b      	movs	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000632:	003b      	movs	r3, r7
 8000634:	2220      	movs	r2, #32
 8000636:	2101      	movs	r1, #1
 8000638:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800063a:	003b      	movs	r3, r7
 800063c:	2280      	movs	r2, #128	@ 0x80
 800063e:	0052      	lsls	r2, r2, #1
 8000640:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000642:	0039      	movs	r1, r7
 8000644:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <MX_RTC_Init+0x15c>)
 8000646:	2201      	movs	r2, #1
 8000648:	0018      	movs	r0, r3
 800064a:	f003 fb0b 	bl	8003c64 <HAL_RTC_SetAlarm_IT>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <MX_RTC_Init+0x142>
  {
    Error_Handler();
 8000652:	f000 fcf5 	bl	8001040 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <MX_RTC_Init+0x15c>)
 8000658:	2100      	movs	r1, #0
 800065a:	0018      	movs	r0, r3
 800065c:	f003 fd72 	bl	8004144 <HAL_RTCEx_SetCalibrationOutPut>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d001      	beq.n	8000668 <MX_RTC_Init+0x154>
  {
    Error_Handler();
 8000664:	f000 fcec 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000668:	46c0      	nop			@ (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b010      	add	sp, #64	@ 0x40
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000128 	.word	0x20000128
 8000674:	40002800 	.word	0x40002800
 8000678:	80800080 	.word	0x80800080

0800067c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	@ 0x28
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000682:	231c      	movs	r3, #28
 8000684:	18fb      	adds	r3, r7, r3
 8000686:	0018      	movs	r0, r3
 8000688:	230c      	movs	r3, #12
 800068a:	001a      	movs	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f004 fc55 	bl	8004f3c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000692:	003b      	movs	r3, r7
 8000694:	0018      	movs	r0, r3
 8000696:	231c      	movs	r3, #28
 8000698:	001a      	movs	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f004 fc4e 	bl	8004f3c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006a0:	4b24      	ldr	r3, [pc, #144]	@ (8000734 <MX_TIM2_Init+0xb8>)
 80006a2:	2280      	movs	r2, #128	@ 0x80
 80006a4:	05d2      	lsls	r2, r2, #23
 80006a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 80006a8:	4b22      	ldr	r3, [pc, #136]	@ (8000734 <MX_TIM2_Init+0xb8>)
 80006aa:	4a23      	ldr	r2, [pc, #140]	@ (8000738 <MX_TIM2_Init+0xbc>)
 80006ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ae:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <MX_TIM2_Init+0xb8>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80006b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <MX_TIM2_Init+0xb8>)
 80006b6:	2263      	movs	r2, #99	@ 0x63
 80006b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <MX_TIM2_Init+0xb8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <MX_TIM2_Init+0xb8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <MX_TIM2_Init+0xb8>)
 80006c8:	0018      	movs	r0, r3
 80006ca:	f003 fe55 	bl	8004378 <HAL_TIM_PWM_Init>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80006d2:	f000 fcb5 	bl	8001040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d6:	211c      	movs	r1, #28
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006e4:	187a      	adds	r2, r7, r1
 80006e6:	4b13      	ldr	r3, [pc, #76]	@ (8000734 <MX_TIM2_Init+0xb8>)
 80006e8:	0011      	movs	r1, r2
 80006ea:	0018      	movs	r0, r3
 80006ec:	f004 fbbe 	bl	8004e6c <HAL_TIMEx_MasterConfigSynchronization>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80006f4:	f000 fca4 	bl	8001040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f8:	003b      	movs	r3, r7
 80006fa:	2260      	movs	r2, #96	@ 0x60
 80006fc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80006fe:	003b      	movs	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000704:	003b      	movs	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800070a:	003b      	movs	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000710:	0039      	movs	r1, r7
 8000712:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <MX_TIM2_Init+0xb8>)
 8000714:	2208      	movs	r2, #8
 8000716:	0018      	movs	r0, r3
 8000718:	f003 ff64 	bl	80045e4 <HAL_TIM_PWM_ConfigChannel>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000720:	f000 fc8e 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000724:	4b03      	ldr	r3, [pc, #12]	@ (8000734 <MX_TIM2_Init+0xb8>)
 8000726:	0018      	movs	r0, r3
 8000728:	f000 ffea 	bl	8001700 <HAL_TIM_MspPostInit>

}
 800072c:	46c0      	nop			@ (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b00a      	add	sp, #40	@ 0x28
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000154 	.word	0x20000154
 8000738:	0000031f 	.word	0x0000031f

0800073c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_TIM14_Init+0x40>)
 8000742:	4a0f      	ldr	r2, [pc, #60]	@ (8000780 <MX_TIM14_Init+0x44>)
 8000744:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8000746:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <MX_TIM14_Init+0x40>)
 8000748:	22f4      	movs	r2, #244	@ 0xf4
 800074a:	0092      	lsls	r2, r2, #2
 800074c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_TIM14_Init+0x40>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_TIM14_Init+0x40>)
 8000756:	4a0b      	ldr	r2, [pc, #44]	@ (8000784 <MX_TIM14_Init+0x48>)
 8000758:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_TIM14_Init+0x40>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_TIM14_Init+0x40>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000766:	4b05      	ldr	r3, [pc, #20]	@ (800077c <MX_TIM14_Init+0x40>)
 8000768:	0018      	movs	r0, r3
 800076a:	f003 fd3b 	bl	80041e4 <HAL_TIM_Base_Init>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000772:	f000 fc65 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000776:	46c0      	nop			@ (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200001a0 	.word	0x200001a0
 8000780:	40002000 	.word	0x40002000
 8000784:	0000ffff 	.word	0x0000ffff

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b08b      	sub	sp, #44	@ 0x2c
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	2414      	movs	r4, #20
 8000790:	193b      	adds	r3, r7, r4
 8000792:	0018      	movs	r0, r3
 8000794:	2314      	movs	r3, #20
 8000796:	001a      	movs	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	f004 fbcf 	bl	8004f3c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b5e      	ldr	r3, [pc, #376]	@ (8000918 <MX_GPIO_Init+0x190>)
 80007a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007a2:	4b5d      	ldr	r3, [pc, #372]	@ (8000918 <MX_GPIO_Init+0x190>)
 80007a4:	2104      	movs	r1, #4
 80007a6:	430a      	orrs	r2, r1
 80007a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007aa:	4b5b      	ldr	r3, [pc, #364]	@ (8000918 <MX_GPIO_Init+0x190>)
 80007ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007ae:	2204      	movs	r2, #4
 80007b0:	4013      	ands	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b58      	ldr	r3, [pc, #352]	@ (8000918 <MX_GPIO_Init+0x190>)
 80007b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007ba:	4b57      	ldr	r3, [pc, #348]	@ (8000918 <MX_GPIO_Init+0x190>)
 80007bc:	2101      	movs	r1, #1
 80007be:	430a      	orrs	r2, r1
 80007c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007c2:	4b55      	ldr	r3, [pc, #340]	@ (8000918 <MX_GPIO_Init+0x190>)
 80007c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007c6:	2201      	movs	r2, #1
 80007c8:	4013      	ands	r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	4b52      	ldr	r3, [pc, #328]	@ (8000918 <MX_GPIO_Init+0x190>)
 80007d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007d2:	4b51      	ldr	r3, [pc, #324]	@ (8000918 <MX_GPIO_Init+0x190>)
 80007d4:	2108      	movs	r1, #8
 80007d6:	430a      	orrs	r2, r1
 80007d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007da:	4b4f      	ldr	r3, [pc, #316]	@ (8000918 <MX_GPIO_Init+0x190>)
 80007dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007de:	2208      	movs	r2, #8
 80007e0:	4013      	ands	r3, r2
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b4c      	ldr	r3, [pc, #304]	@ (8000918 <MX_GPIO_Init+0x190>)
 80007e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007ea:	4b4b      	ldr	r3, [pc, #300]	@ (8000918 <MX_GPIO_Init+0x190>)
 80007ec:	2102      	movs	r1, #2
 80007ee:	430a      	orrs	r2, r1
 80007f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007f2:	4b49      	ldr	r3, [pc, #292]	@ (8000918 <MX_GPIO_Init+0x190>)
 80007f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007f6:	2202      	movs	r2, #2
 80007f8:	4013      	ands	r3, r2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 80007fe:	4947      	ldr	r1, [pc, #284]	@ (800091c <MX_GPIO_Init+0x194>)
 8000800:	23a0      	movs	r3, #160	@ 0xa0
 8000802:	05db      	lsls	r3, r3, #23
 8000804:	2200      	movs	r2, #0
 8000806:	0018      	movs	r0, r3
 8000808:	f001 ff8f 	bl	800272a <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 800080c:	4b44      	ldr	r3, [pc, #272]	@ (8000920 <MX_GPIO_Init+0x198>)
 800080e:	2200      	movs	r2, #0
 8000810:	2180      	movs	r1, #128	@ 0x80
 8000812:	0018      	movs	r0, r3
 8000814:	f001 ff89 	bl	800272a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_EN_GPIO_Port, CTOUCH_EN_Pin, GPIO_PIN_RESET);
 8000818:	2380      	movs	r3, #128	@ 0x80
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	4841      	ldr	r0, [pc, #260]	@ (8000924 <MX_GPIO_Init+0x19c>)
 800081e:	2200      	movs	r2, #0
 8000820:	0019      	movs	r1, r3
 8000822:	f001 ff82 	bl	800272a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin BUZZER_OUT_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin
                           SHIFT_MCLR_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8000826:	193b      	adds	r3, r7, r4
 8000828:	4a3c      	ldr	r2, [pc, #240]	@ (800091c <MX_GPIO_Init+0x194>)
 800082a:	601a      	str	r2, [r3, #0]
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	193b      	adds	r3, r7, r4
 800082e:	2201      	movs	r2, #1
 8000830:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	193b      	adds	r3, r7, r4
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	193b      	adds	r3, r7, r4
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083e:	193a      	adds	r2, r7, r4
 8000840:	23a0      	movs	r3, #160	@ 0xa0
 8000842:	05db      	lsls	r3, r3, #23
 8000844:	0011      	movs	r1, r2
 8000846:	0018      	movs	r0, r3
 8000848:	f001 fdee 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 800084c:	193b      	adds	r3, r7, r4
 800084e:	2280      	movs	r2, #128	@ 0x80
 8000850:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2201      	movs	r2, #1
 8000856:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	193b      	adds	r3, r7, r4
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 8000864:	193b      	adds	r3, r7, r4
 8000866:	4a2e      	ldr	r2, [pc, #184]	@ (8000920 <MX_GPIO_Init+0x198>)
 8000868:	0019      	movs	r1, r3
 800086a:	0010      	movs	r0, r2
 800086c:	f001 fddc 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 8000870:	193b      	adds	r3, r7, r4
 8000872:	2280      	movs	r2, #128	@ 0x80
 8000874:	0212      	lsls	r2, r2, #8
 8000876:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	2284      	movs	r2, #132	@ 0x84
 800087c:	0392      	lsls	r2, r2, #14
 800087e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2201      	movs	r2, #1
 8000884:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000886:	193a      	adds	r2, r7, r4
 8000888:	23a0      	movs	r3, #160	@ 0xa0
 800088a:	05db      	lsls	r3, r3, #23
 800088c:	0011      	movs	r1, r2
 800088e:	0018      	movs	r0, r3
 8000890:	f001 fdca 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 8000894:	0021      	movs	r1, r4
 8000896:	187b      	adds	r3, r7, r1
 8000898:	220f      	movs	r2, #15
 800089a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2284      	movs	r2, #132	@ 0x84
 80008a0:	0392      	lsls	r2, r2, #14
 80008a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2201      	movs	r2, #1
 80008a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008aa:	000c      	movs	r4, r1
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000928 <MX_GPIO_Init+0x1a0>)
 80008b0:	0019      	movs	r1, r3
 80008b2:	0010      	movs	r0, r2
 80008b4:	f001 fdb8 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_EN_Pin */
  GPIO_InitStruct.Pin = CTOUCH_EN_Pin;
 80008b8:	0021      	movs	r1, r4
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2280      	movs	r2, #128	@ 0x80
 80008be:	0092      	lsls	r2, r2, #2
 80008c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2201      	movs	r2, #1
 80008c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_EN_GPIO_Port, &GPIO_InitStruct);
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	4a13      	ldr	r2, [pc, #76]	@ (8000924 <MX_GPIO_Init+0x19c>)
 80008d8:	0019      	movs	r1, r3
 80008da:	0010      	movs	r0, r2
 80008dc:	f001 fda4 	bl	8002428 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	2005      	movs	r0, #5
 80008e6:	f001 fd6d 	bl	80023c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80008ea:	2005      	movs	r0, #5
 80008ec:	f001 fd7f 	bl	80023ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	2006      	movs	r0, #6
 80008f6:	f001 fd65 	bl	80023c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80008fa:	2006      	movs	r0, #6
 80008fc:	f001 fd77 	bl	80023ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2101      	movs	r1, #1
 8000904:	2007      	movs	r0, #7
 8000906:	f001 fd5d 	bl	80023c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800090a:	2007      	movs	r0, #7
 800090c:	f001 fd6f 	bl	80023ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000910:	46c0      	nop			@ (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	b00b      	add	sp, #44	@ 0x2c
 8000916:	bd90      	pop	{r4, r7, pc}
 8000918:	40021000 	.word	0x40021000
 800091c:	00001f01 	.word	0x00001f01
 8000920:	50000800 	.word	0x50000800
 8000924:	50000400 	.word	0x50000400
 8000928:	50000c00 	.word	0x50000c00

0800092c <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8000938:	4a07      	ldr	r2, [pc, #28]	@ (8000958 <updateAndDisplayTime+0x2c>)
 800093a:	4908      	ldr	r1, [pc, #32]	@ (800095c <updateAndDisplayTime+0x30>)
 800093c:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <updateAndDisplayTime+0x34>)
 800093e:	0018      	movs	r0, r3
 8000940:	f7ff fc6c 	bl	800021c <getRTCTime>
	sevSeg_updateDigits(&currTime);
 8000944:	4b05      	ldr	r3, [pc, #20]	@ (800095c <updateAndDisplayTime+0x30>)
 8000946:	0018      	movs	r0, r3
 8000948:	f000 fc98 	bl	800127c <sevSeg_updateDigits>

	return halRet;
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	781b      	ldrb	r3, [r3, #0]

}
 8000950:	0018      	movs	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	b002      	add	sp, #8
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000200 	.word	0x20000200
 800095c:	200001ec 	.word	0x200001ec
 8000960:	20000128 	.word	0x20000128

08000964 <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 8000970:	4b04      	ldr	r3, [pc, #16]	@ (8000984 <updateAndDisplayAlarm+0x20>)
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fc82 	bl	800127c <sevSeg_updateDigits>

	return halRet;
 8000978:	1dfb      	adds	r3, r7, #7
 800097a:	781b      	ldrb	r3, [r3, #0]

}
 800097c:	0018      	movs	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	b002      	add	sp, #8
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000204 	.word	0x20000204

08000988 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b08c      	sub	sp, #48	@ 0x30
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

	  //printf("Enter current time minute increment interrupt\n\r");

	  RTC_AlarmTypeDef sAlarm;
	  getRTCTime(hrtc, &currTime, &currDate);
 8000990:	4a1e      	ldr	r2, [pc, #120]	@ (8000a0c <HAL_RTC_AlarmAEventCallback+0x84>)
 8000992:	491f      	ldr	r1, [pc, #124]	@ (8000a10 <HAL_RTC_AlarmAEventCallback+0x88>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	0018      	movs	r0, r3
 8000998:	f7ff fc40 	bl	800021c <getRTCTime>

	  if(sAlarm.AlarmTime.Minutes>58) {
 800099c:	2208      	movs	r2, #8
 800099e:	18bb      	adds	r3, r7, r2
 80009a0:	785b      	ldrb	r3, [r3, #1]
 80009a2:	2b3a      	cmp	r3, #58	@ 0x3a
 80009a4:	d903      	bls.n	80009ae <HAL_RTC_AlarmAEventCallback+0x26>
		sAlarm.AlarmTime.Minutes=0;
 80009a6:	18bb      	adds	r3, r7, r2
 80009a8:	2200      	movs	r2, #0
 80009aa:	705a      	strb	r2, [r3, #1]
 80009ac:	e006      	b.n	80009bc <HAL_RTC_AlarmAEventCallback+0x34>
		//printf("Reset alarm time\n\r");
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 80009ae:	2108      	movs	r1, #8
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	785b      	ldrb	r3, [r3, #1]
 80009b4:	3301      	adds	r3, #1
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	2308      	movs	r3, #8
 80009c0:	18f9      	adds	r1, r7, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	0018      	movs	r0, r3
 80009c8:	f003 f94c 	bl	8003c64 <HAL_RTC_SetAlarm_IT>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d1f6      	bne.n	80009be <HAL_RTC_AlarmAEventCallback+0x36>

	  updateAndDisplayTime();
 80009d0:	f7ff ffac 	bl	800092c <updateAndDisplayTime>

	  //printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 80009d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <HAL_RTC_AlarmAEventCallback+0x8c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d013      	beq.n	8000a04 <HAL_RTC_AlarmAEventCallback+0x7c>
 80009dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <HAL_RTC_AlarmAEventCallback+0x90>)
 80009de:	781a      	ldrb	r2, [r3, #0]
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <HAL_RTC_AlarmAEventCallback+0x88>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d10d      	bne.n	8000a04 <HAL_RTC_AlarmAEventCallback+0x7c>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 80009e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <HAL_RTC_AlarmAEventCallback+0x90>)
 80009ea:	785a      	ldrb	r2, [r3, #1]
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <HAL_RTC_AlarmAEventCallback+0x88>)
 80009ee:	785b      	ldrb	r3, [r3, #1]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d107      	bne.n	8000a04 <HAL_RTC_AlarmAEventCallback+0x7c>
 80009f4:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <HAL_RTC_AlarmAEventCallback+0x90>)
 80009f6:	78da      	ldrb	r2, [r3, #3]
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <HAL_RTC_AlarmAEventCallback+0x88>)
 80009fa:	78db      	ldrb	r3, [r3, #3]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d101      	bne.n	8000a04 <HAL_RTC_AlarmAEventCallback+0x7c>
		  userAlarmBeep();
 8000a00:	f000 f80c 	bl	8000a1c <userAlarmBeep>
	  }

}
 8000a04:	46c0      	nop			@ (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b00c      	add	sp, #48	@ 0x30
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000200 	.word	0x20000200
 8000a10:	200001ec 	.word	0x200001ec
 8000a14:	2000006d 	.word	0x2000006d
 8000a18:	20000204 	.word	0x20000204

08000a1c <userAlarmBeep>:

void userAlarmBeep() {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8000a22:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad4 <userAlarmBeep+0xb8>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	0018      	movs	r0, r3
 8000a28:	f003 fc80 	bl	800432c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8000a2c:	4b29      	ldr	r3, [pc, #164]	@ (8000ad4 <userAlarmBeep+0xb8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	0018      	movs	r0, r3
 8000a32:	f003 fc2f 	bl	8004294 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8000a36:	4b27      	ldr	r3, [pc, #156]	@ (8000ad4 <userAlarmBeep+0xb8>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a3e:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8000a40:	1cfb      	adds	r3, r7, #3
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8000a46:	1cbb      	adds	r3, r7, #2
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 8000a4c:	f7ff ff6e 	bl	800092c <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 8000a50:	4b20      	ldr	r3, [pc, #128]	@ (8000ad4 <userAlarmBeep+0xb8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad8 <userAlarmBeep+0xbc>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d926      	bls.n	8000ab0 <userAlarmBeep+0x94>

			sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 8000a62:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <userAlarmBeep+0xc0>)
 8000a64:	6818      	ldr	r0, [r3, #0]
 8000a66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae0 <userAlarmBeep+0xc4>)
 8000a68:	6819      	ldr	r1, [r3, #0]
 8000a6a:	1cfb      	adds	r3, r7, #3
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ae4 <userAlarmBeep+0xc8>)
 8000a70:	5cd3      	ldrb	r3, [r2, r3]
 8000a72:	001a      	movs	r2, r3
 8000a74:	f000 fcb4 	bl	80013e0 <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(buzzerPort, buzzerPin);					// Toggle Buzzer
 8000a78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae8 <userAlarmBeep+0xcc>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2280      	movs	r2, #128	@ 0x80
 8000a7e:	0052      	lsls	r2, r2, #1
 8000a80:	0011      	movs	r1, r2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f001 fe6e 	bl	8002764 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8000a88:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <userAlarmBeep+0xb8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a90:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8000a92:	1cfb      	adds	r3, r7, #3
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	1e5a      	subs	r2, r3, #1
 8000a98:	4193      	sbcs	r3, r2
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4053      	eors	r3, r2
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	001a      	movs	r2, r3
 8000aa4:	1cfb      	adds	r3, r7, #3
 8000aa6:	701a      	strb	r2, [r3, #0]
 8000aa8:	781a      	ldrb	r2, [r3, #0]
 8000aaa:	2101      	movs	r1, #1
 8000aac:	400a      	ands	r2, r1
 8000aae:	701a      	strb	r2, [r3, #0]

			//printf("Display Blink = %u\n\r", displayBlink);

		}

		i++;		// Get rid of. This is just for testing.
 8000ab0:	1cbb      	adds	r3, r7, #2
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	1cbb      	adds	r3, r7, #2
 8000ab6:	3201      	adds	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]

//	} while(capTouchTrigger(snoozeButtonPin));
	} while(i < 5);
 8000aba:	1cbb      	adds	r3, r7, #2
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	d9c4      	bls.n	8000a4c <userAlarmBeep+0x30>

	HAL_TIM_Base_Stop(timerDelay);
 8000ac2:	4b04      	ldr	r3, [pc, #16]	@ (8000ad4 <userAlarmBeep+0xb8>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f003 fc30 	bl	800432c <HAL_TIM_Base_Stop>

}
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b002      	add	sp, #8
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000020 	.word	0x20000020
 8000ad8:	00007ffe 	.word	0x00007ffe
 8000adc:	20000024 	.word	0x20000024
 8000ae0:	20000028 	.word	0x20000028
 8000ae4:	08004fac 	.word	0x08004fac
 8000ae8:	20000008 	.word	0x20000008

08000aec <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	0002      	movs	r2, r0
 8000af4:	1dbb      	adds	r3, r7, #6
 8000af6:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8000af8:	2208      	movs	r2, #8
 8000afa:	1dbb      	adds	r3, r7, #6
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d106      	bne.n	8000b10 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 8000b02:	230f      	movs	r3, #15
 8000b04:	18fc      	adds	r4, r7, r3
 8000b06:	f000 f839 	bl	8000b7c <displayButtonISR>
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8000b0e:	e031      	b.n	8000b74 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8000b10:	2204      	movs	r2, #4
 8000b12:	1dbb      	adds	r3, r7, #6
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d106      	bne.n	8000b28 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	18fc      	adds	r4, r7, r3
 8000b1e:	f000 f85d 	bl	8000bdc <alarmEnableISR>
 8000b22:	0003      	movs	r3, r0
 8000b24:	7023      	strb	r3, [r4, #0]
}
 8000b26:	e025      	b.n	8000b74 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8000b28:	2380      	movs	r3, #128	@ 0x80
 8000b2a:	021b      	lsls	r3, r3, #8
 8000b2c:	1dba      	adds	r2, r7, #6
 8000b2e:	8812      	ldrh	r2, [r2, #0]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d106      	bne.n	8000b42 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 8000b34:	230f      	movs	r3, #15
 8000b36:	18fc      	adds	r4, r7, r3
 8000b38:	f000 f884 	bl	8000c44 <alarmSetISR>
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	7023      	strb	r3, [r4, #0]
}
 8000b40:	e018      	b.n	8000b74 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 8000b42:	2201      	movs	r2, #1
 8000b44:	1dbb      	adds	r3, r7, #6
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d106      	bne.n	8000b5a <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	18fc      	adds	r4, r7, r3
 8000b50:	f000 f954 	bl	8000dfc <hourSetISR>
 8000b54:	0003      	movs	r3, r0
 8000b56:	7023      	strb	r3, [r4, #0]
}
 8000b58:	e00c      	b.n	8000b74 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	1dbb      	adds	r3, r7, #6
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d106      	bne.n	8000b72 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 8000b64:	230f      	movs	r3, #15
 8000b66:	18fc      	adds	r4, r7, r3
 8000b68:	f000 f9c6 	bl	8000ef8 <minuteSetISR>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	7023      	strb	r3, [r4, #0]
}
 8000b70:	e000      	b.n	8000b74 <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 8000b72:	46c0      	nop			@ (mov r8, r8)
}
 8000b74:	46c0      	nop			@ (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b005      	add	sp, #20
 8000b7a:	bd90      	pop	{r4, r7, pc}

08000b7c <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 8000b88:	f7ff fed0 	bl	800092c <updateAndDisplayTime>

	sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <displayButtonISR+0x50>)
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <displayButtonISR+0x54>)
 8000b92:	6819      	ldr	r1, [r3, #0]
 8000b94:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <displayButtonISR+0x58>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	001a      	movs	r2, r3
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <displayButtonISR+0x5c>)
 8000b9c:	5c9b      	ldrb	r3, [r3, r2]
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	f000 fc1e 	bl	80013e0 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd4 <displayButtonISR+0x58>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d903      	bls.n	8000bb4 <displayButtonISR+0x38>
		displayToggle = 0;
 8000bac:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <displayButtonISR+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
 8000bb2:	e005      	b.n	8000bc0 <displayButtonISR+0x44>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <displayButtonISR+0x58>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <displayButtonISR+0x58>)
 8000bbe:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	781b      	ldrb	r3, [r3, #0]

}
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b002      	add	sp, #8
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000024 	.word	0x20000024
 8000bd0:	20000028 	.word	0x20000028
 8000bd4:	2000006c 	.word	0x2000006c
 8000bd8:	08004fac 	.word	0x08004fac

08000bdc <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <alarmEnableISR+0x60>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2201      	movs	r2, #1
 8000bee:	4053      	eors	r3, r2
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d00b      	beq.n	8000c0e <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 8000bf6:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <alarmEnableISR+0x64>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2280      	movs	r2, #128	@ 0x80
 8000bfc:	0151      	lsls	r1, r2, #5
 8000bfe:	2201      	movs	r2, #1
 8000c00:	0018      	movs	r0, r3
 8000c02:	f001 fd92 	bl	800272a <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 8000c06:	4b0d      	ldr	r3, [pc, #52]	@ (8000c3c <alarmEnableISR+0x60>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]
 8000c0c:	e010      	b.n	8000c30 <alarmEnableISR+0x54>

		//printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
								//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <alarmEnableISR+0x60>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d00b      	beq.n	8000c2e <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 8000c16:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <alarmEnableISR+0x64>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2280      	movs	r2, #128	@ 0x80
 8000c1c:	0151      	lsls	r1, r2, #5
 8000c1e:	2200      	movs	r2, #0
 8000c20:	0018      	movs	r0, r3
 8000c22:	f001 fd82 	bl	800272a <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 8000c26:	4b05      	ldr	r3, [pc, #20]	@ (8000c3c <alarmEnableISR+0x60>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
 8000c2c:	e000      	b.n	8000c30 <alarmEnableISR+0x54>

		//printf("User alarm disabled.\n\r");
	}
	else {
		__NOP();							//Code should never reach here.
 8000c2e:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 8000c30:	1dfb      	adds	r3, r7, #7
 8000c32:	781b      	ldrb	r3, [r3, #0]

}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b002      	add	sp, #8
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	2000006d 	.word	0x2000006d
 8000c40:	20000004 	.word	0x20000004

08000c44 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
	//printf("Enter user alarm set ISR.\n\r");

	//printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
			//userAlarmTime.Minutes, userAlarmTime.Seconds);

	HAL_StatusTypeDef halRet = HAL_OK;
 8000c4a:	1cbb      	adds	r3, r7, #2
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for switch debounce
	 */

	// First wait for button to deactivate again
	while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_SET);
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	4b64      	ldr	r3, [pc, #400]	@ (8000de4 <alarmSetISR+0x1a0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2280      	movs	r2, #128	@ 0x80
 8000c58:	0212      	lsls	r2, r2, #8
 8000c5a:	0011      	movs	r1, r2
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f001 fd47 	bl	80026f0 <HAL_GPIO_ReadPin>
 8000c62:	0003      	movs	r3, r0
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d1f4      	bne.n	8000c52 <alarmSetISR+0xe>

	// Go through debounce
	HAL_TIM_Base_Stop(timerDelay);
 8000c68:	4b5f      	ldr	r3, [pc, #380]	@ (8000de8 <alarmSetISR+0x1a4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f003 fb5d 	bl	800432c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8000c72:	4b5d      	ldr	r3, [pc, #372]	@ (8000de8 <alarmSetISR+0x1a4>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	0018      	movs	r0, r3
 8000c78:	f003 fb0c 	bl	8004294 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8000c7c:	4b5a      	ldr	r3, [pc, #360]	@ (8000de8 <alarmSetISR+0x1a4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c84:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 8));
 8000c86:	4b58      	ldr	r3, [pc, #352]	@ (8000de8 <alarmSetISR+0x1a4>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	1ad2      	subs	r2, r2, r3
 8000c92:	2380      	movs	r3, #128	@ 0x80
 8000c94:	019b      	lsls	r3, r3, #6
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d9f5      	bls.n	8000c86 <alarmSetISR+0x42>


	/*
	 *  Poll for 1 second to see if the alarm set button is pressed again
	 */
	HAL_TIM_Base_Stop(timerDelay);
 8000c9a:	4b53      	ldr	r3, [pc, #332]	@ (8000de8 <alarmSetISR+0x1a4>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f003 fb44 	bl	800432c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8000ca4:	4b50      	ldr	r3, [pc, #320]	@ (8000de8 <alarmSetISR+0x1a4>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f003 faf3 	bl	8004294 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8000cae:	4b4e      	ldr	r3, [pc, #312]	@ (8000de8 <alarmSetISR+0x1a4>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cb6:	607b      	str	r3, [r7, #4]

	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 8000cb8:	e00d      	b.n	8000cd6 <alarmSetISR+0x92>

		if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 8000cba:	4b4a      	ldr	r3, [pc, #296]	@ (8000de4 <alarmSetISR+0x1a0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2280      	movs	r2, #128	@ 0x80
 8000cc0:	0212      	lsls	r2, r2, #8
 8000cc2:	0011      	movs	r1, r2
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f001 fd13 	bl	80026f0 <HAL_GPIO_ReadPin>
 8000cca:	1e03      	subs	r3, r0, #0
 8000ccc:	d103      	bne.n	8000cd6 <alarmSetISR+0x92>
			alarmSetMode = true;
 8000cce:	4b47      	ldr	r3, [pc, #284]	@ (8000dec <alarmSetISR+0x1a8>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	701a      	strb	r2, [r3, #0]
//			HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
			break;
 8000cd4:	e009      	b.n	8000cea <alarmSetISR+0xa6>
	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 8000cd6:	4b44      	ldr	r3, [pc, #272]	@ (8000de8 <alarmSetISR+0x1a4>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	1ad2      	subs	r2, r2, r3
 8000ce2:	2380      	movs	r3, #128	@ 0x80
 8000ce4:	025b      	lsls	r3, r3, #9
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d9e7      	bls.n	8000cba <alarmSetISR+0x76>
		}

	}

	// Go through debounce once again
	HAL_TIM_Base_Stop(timerDelay);
 8000cea:	4b3f      	ldr	r3, [pc, #252]	@ (8000de8 <alarmSetISR+0x1a4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f003 fb1c 	bl	800432c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8000cf4:	4b3c      	ldr	r3, [pc, #240]	@ (8000de8 <alarmSetISR+0x1a4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f003 facb 	bl	8004294 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8000cfe:	4b3a      	ldr	r3, [pc, #232]	@ (8000de8 <alarmSetISR+0x1a4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d06:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 4));
 8000d08:	4b37      	ldr	r3, [pc, #220]	@ (8000de8 <alarmSetISR+0x1a4>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	1ad2      	subs	r2, r2, r3
 8000d14:	2380      	movs	r3, #128	@ 0x80
 8000d16:	01db      	lsls	r3, r3, #7
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d9f5      	bls.n	8000d08 <alarmSetISR+0xc4>
	/*
	 * Then, if we are in alarm set mode, go through the
	 * alarm set process until the button is pressed again
	 */

	HAL_TIM_Base_Stop(timerDelay);
 8000d1c:	4b32      	ldr	r3, [pc, #200]	@ (8000de8 <alarmSetISR+0x1a4>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	0018      	movs	r0, r3
 8000d22:	f003 fb03 	bl	800432c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8000d26:	4b30      	ldr	r3, [pc, #192]	@ (8000de8 <alarmSetISR+0x1a4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f003 fab2 	bl	8004294 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8000d30:	4b2d      	ldr	r3, [pc, #180]	@ (8000de8 <alarmSetISR+0x1a4>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d38:	607b      	str	r3, [r7, #4]

	if(alarmSetMode) {
 8000d3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000dec <alarmSetISR+0x1a8>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d046      	beq.n	8000dd0 <alarmSetISR+0x18c>

		bool displayBlink = false;
 8000d42:	1cfb      	adds	r3, r7, #3
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			updateAndDisplayAlarm();
 8000d48:	f7ff fe0c 	bl	8000964 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 8000d4c:	4b26      	ldr	r3, [pc, #152]	@ (8000de8 <alarmSetISR+0x1a4>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	1ad2      	subs	r2, r2, r3
 8000d58:	2380      	movs	r3, #128	@ 0x80
 8000d5a:	021b      	lsls	r3, r3, #8
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d31e      	bcc.n	8000d9e <alarmSetISR+0x15a>

//				HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

				sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 8000d60:	4b23      	ldr	r3, [pc, #140]	@ (8000df0 <alarmSetISR+0x1ac>)
 8000d62:	6818      	ldr	r0, [r3, #0]
 8000d64:	4b23      	ldr	r3, [pc, #140]	@ (8000df4 <alarmSetISR+0x1b0>)
 8000d66:	6819      	ldr	r1, [r3, #0]
 8000d68:	1cfb      	adds	r3, r7, #3
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4a22      	ldr	r2, [pc, #136]	@ (8000df8 <alarmSetISR+0x1b4>)
 8000d6e:	5cd3      	ldrb	r3, [r2, r3]
 8000d70:	001a      	movs	r2, r3
 8000d72:	f000 fb35 	bl	80013e0 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 8000d76:	4b1c      	ldr	r3, [pc, #112]	@ (8000de8 <alarmSetISR+0x1a4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d7e:	607b      	str	r3, [r7, #4]
				displayBlink = !displayBlink;
 8000d80:	1cfb      	adds	r3, r7, #3
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	1e5a      	subs	r2, r3, #1
 8000d86:	4193      	sbcs	r3, r2
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4053      	eors	r3, r2
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	001a      	movs	r2, r3
 8000d92:	1cfb      	adds	r3, r7, #3
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	781a      	ldrb	r2, [r3, #0]
 8000d98:	2101      	movs	r1, #1
 8000d9a:	400a      	ands	r2, r1
 8000d9c:	701a      	strb	r2, [r3, #0]

			}

		}while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET);
 8000d9e:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <alarmSetISR+0x1a0>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2280      	movs	r2, #128	@ 0x80
 8000da4:	0212      	lsls	r2, r2, #8
 8000da6:	0011      	movs	r1, r2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f001 fca1 	bl	80026f0 <HAL_GPIO_ReadPin>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d1ca      	bne.n	8000d48 <alarmSetISR+0x104>

//		HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_RESET);

		sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 8000db2:	4b0f      	ldr	r3, [pc, #60]	@ (8000df0 <alarmSetISR+0x1ac>)
 8000db4:	6818      	ldr	r0, [r3, #0]
 8000db6:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <alarmSetISR+0x1b0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	225a      	movs	r2, #90	@ 0x5a
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	f000 fb0f 	bl	80013e0 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 8000dc2:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <alarmSetISR+0x1a4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f003 fab0 	bl	800432c <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8000dcc:	f7ff fdae 	bl	800092c <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <alarmSetISR+0x1a8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 8000dd6:	1cbb      	adds	r3, r7, #2
 8000dd8:	781b      	ldrb	r3, [r3, #0]

}
 8000dda:	0018      	movs	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000020 	.word	0x20000020
 8000dec:	20000218 	.word	0x20000218
 8000df0:	20000024 	.word	0x20000024
 8000df4:	20000028 	.word	0x20000028
 8000df8:	08004fac 	.word	0x08004fac

08000dfc <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0

//	printf("Entered hour set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);


	HAL_StatusTypeDef halRet = HAL_OK;
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8000e08:	4b36      	ldr	r3, [pc, #216]	@ (8000ee4 <hourSetISR+0xe8>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d027      	beq.n	8000e60 <hourSetISR+0x64>


		if(userAlarmTime.Hours >= 12) {
 8000e10:	4b35      	ldr	r3, [pc, #212]	@ (8000ee8 <hourSetISR+0xec>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b0b      	cmp	r3, #11
 8000e16:	d903      	bls.n	8000e20 <hourSetISR+0x24>
			userAlarmTime.Hours = 1;
 8000e18:	4b33      	ldr	r3, [pc, #204]	@ (8000ee8 <hourSetISR+0xec>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	e05a      	b.n	8000ed6 <hourSetISR+0xda>
		}
		else if(userAlarmTime.Hours == 11) {
 8000e20:	4b31      	ldr	r3, [pc, #196]	@ (8000ee8 <hourSetISR+0xec>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b0b      	cmp	r3, #11
 8000e26:	d10e      	bne.n	8000e46 <hourSetISR+0x4a>
			if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8000e28:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee8 <hourSetISR+0xec>)
 8000e2a:	78db      	ldrb	r3, [r3, #3]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d103      	bne.n	8000e38 <hourSetISR+0x3c>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8000e30:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee8 <hourSetISR+0xec>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	70da      	strb	r2, [r3, #3]
 8000e36:	e002      	b.n	8000e3e <hourSetISR+0x42>
			}
			else {
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000e38:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee8 <hourSetISR+0xec>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	70da      	strb	r2, [r3, #3]
			}
			userAlarmTime.Hours = 12;
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee8 <hourSetISR+0xec>)
 8000e40:	220c      	movs	r2, #12
 8000e42:	701a      	strb	r2, [r3, #0]
 8000e44:	e047      	b.n	8000ed6 <hourSetISR+0xda>
		}
		else if(userAlarmTime.Hours < 11) {
 8000e46:	4b28      	ldr	r3, [pc, #160]	@ (8000ee8 <hourSetISR+0xec>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b0a      	cmp	r3, #10
 8000e4c:	d806      	bhi.n	8000e5c <hourSetISR+0x60>
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8000e4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ee8 <hourSetISR+0xec>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4b24      	ldr	r3, [pc, #144]	@ (8000ee8 <hourSetISR+0xec>)
 8000e58:	701a      	strb	r2, [r3, #0]
 8000e5a:	e03c      	b.n	8000ed6 <hourSetISR+0xda>
		}
		else {
			__NOP();
 8000e5c:	46c0      	nop			@ (mov r8, r8)
 8000e5e:	e03a      	b.n	8000ed6 <hourSetISR+0xda>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		getRTCTime(&hrtc, &currTime, &currDate);
 8000e60:	4a22      	ldr	r2, [pc, #136]	@ (8000eec <hourSetISR+0xf0>)
 8000e62:	4923      	ldr	r1, [pc, #140]	@ (8000ef0 <hourSetISR+0xf4>)
 8000e64:	4b23      	ldr	r3, [pc, #140]	@ (8000ef4 <hourSetISR+0xf8>)
 8000e66:	0018      	movs	r0, r3
 8000e68:	f7ff f9d8 	bl	800021c <getRTCTime>

		if(currTime.Hours >= 12) {
 8000e6c:	4b20      	ldr	r3, [pc, #128]	@ (8000ef0 <hourSetISR+0xf4>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b0b      	cmp	r3, #11
 8000e72:	d903      	bls.n	8000e7c <hourSetISR+0x80>
			currTime.Hours = 1;
 8000e74:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <hourSetISR+0xf4>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	701a      	strb	r2, [r3, #0]
 8000e7a:	e01e      	b.n	8000eba <hourSetISR+0xbe>
		}
		else if(currTime.Hours == 11) {
 8000e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <hourSetISR+0xf4>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b0b      	cmp	r3, #11
 8000e82:	d10e      	bne.n	8000ea2 <hourSetISR+0xa6>
			if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8000e84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <hourSetISR+0xf4>)
 8000e86:	78db      	ldrb	r3, [r3, #3]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d103      	bne.n	8000e94 <hourSetISR+0x98>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <hourSetISR+0xf4>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	70da      	strb	r2, [r3, #3]
 8000e92:	e002      	b.n	8000e9a <hourSetISR+0x9e>
			}
			else {
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000e94:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <hourSetISR+0xf4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	70da      	strb	r2, [r3, #3]
			}
			currTime.Hours = 12;
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <hourSetISR+0xf4>)
 8000e9c:	220c      	movs	r2, #12
 8000e9e:	701a      	strb	r2, [r3, #0]
 8000ea0:	e00b      	b.n	8000eba <hourSetISR+0xbe>
		}
		else if(userAlarmTime.Hours < 11) {
 8000ea2:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <hourSetISR+0xec>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b0a      	cmp	r3, #10
 8000ea8:	d806      	bhi.n	8000eb8 <hourSetISR+0xbc>
			currTime.Hours = currTime.Hours + 1;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <hourSetISR+0xf4>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <hourSetISR+0xf4>)
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	e000      	b.n	8000eba <hourSetISR+0xbe>
		}
		else {
			__NOP();
 8000eb8:	46c0      	nop			@ (mov r8, r8)
		}

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8000eba:	490d      	ldr	r1, [pc, #52]	@ (8000ef0 <hourSetISR+0xf4>)
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef4 <hourSetISR+0xf8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f002 fceb 	bl	800389c <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8000ec6:	f7ff fd31 	bl	800092c <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8000eca:	4a08      	ldr	r2, [pc, #32]	@ (8000eec <hourSetISR+0xf0>)
 8000ecc:	4908      	ldr	r1, [pc, #32]	@ (8000ef0 <hourSetISR+0xf4>)
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <hourSetISR+0xf8>)
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f7ff f9a3 	bl	800021c <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	781b      	ldrb	r3, [r3, #0]

}
 8000eda:	0018      	movs	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b002      	add	sp, #8
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	20000218 	.word	0x20000218
 8000ee8:	20000204 	.word	0x20000204
 8000eec:	20000200 	.word	0x20000200
 8000ef0:	200001ec 	.word	0x200001ec
 8000ef4:	20000128 	.word	0x20000128

08000ef8 <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0

//	printf("Entered minute set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

	HAL_StatusTypeDef halRet = HAL_OK;
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8000f04:	4b49      	ldr	r3, [pc, #292]	@ (800102c <minuteSetISR+0x134>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d03a      	beq.n	8000f82 <minuteSetISR+0x8a>

		if(userAlarmTime.Minutes >= 59) {
 8000f0c:	4b48      	ldr	r3, [pc, #288]	@ (8001030 <minuteSetISR+0x138>)
 8000f0e:	785b      	ldrb	r3, [r3, #1]
 8000f10:	2b3a      	cmp	r3, #58	@ 0x3a
 8000f12:	d929      	bls.n	8000f68 <minuteSetISR+0x70>
			userAlarmTime.Minutes = 0;
 8000f14:	4b46      	ldr	r3, [pc, #280]	@ (8001030 <minuteSetISR+0x138>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	705a      	strb	r2, [r3, #1]
			userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8000f1a:	4b45      	ldr	r3, [pc, #276]	@ (8001030 <minuteSetISR+0x138>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4b43      	ldr	r3, [pc, #268]	@ (8001030 <minuteSetISR+0x138>)
 8000f24:	701a      	strb	r2, [r3, #0]
			if(userAlarmTime.Hours > 12) {
 8000f26:	4b42      	ldr	r3, [pc, #264]	@ (8001030 <minuteSetISR+0x138>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b0c      	cmp	r3, #12
 8000f2c:	d902      	bls.n	8000f34 <minuteSetISR+0x3c>
				userAlarmTime.Hours = 1;
 8000f2e:	4b40      	ldr	r3, [pc, #256]	@ (8001030 <minuteSetISR+0x138>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
			}
			if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8000f34:	4b3e      	ldr	r3, [pc, #248]	@ (8001030 <minuteSetISR+0x138>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b0c      	cmp	r3, #12
 8000f3a:	d107      	bne.n	8000f4c <minuteSetISR+0x54>
 8000f3c:	4b3c      	ldr	r3, [pc, #240]	@ (8001030 <minuteSetISR+0x138>)
 8000f3e:	78db      	ldrb	r3, [r3, #3]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d103      	bne.n	8000f4c <minuteSetISR+0x54>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8000f44:	4b3a      	ldr	r3, [pc, #232]	@ (8001030 <minuteSetISR+0x138>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	70da      	strb	r2, [r3, #3]
 8000f4a:	e068      	b.n	800101e <minuteSetISR+0x126>
			} else if(userAlarmTime.Hours == 12 && userAlarmTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 8000f4c:	4b38      	ldr	r3, [pc, #224]	@ (8001030 <minuteSetISR+0x138>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b0c      	cmp	r3, #12
 8000f52:	d107      	bne.n	8000f64 <minuteSetISR+0x6c>
 8000f54:	4b36      	ldr	r3, [pc, #216]	@ (8001030 <minuteSetISR+0x138>)
 8000f56:	78db      	ldrb	r3, [r3, #3]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d103      	bne.n	8000f64 <minuteSetISR+0x6c>
				userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000f5c:	4b34      	ldr	r3, [pc, #208]	@ (8001030 <minuteSetISR+0x138>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	70da      	strb	r2, [r3, #3]
 8000f62:	e05c      	b.n	800101e <minuteSetISR+0x126>
			}
			else {
				__NOP();
 8000f64:	46c0      	nop			@ (mov r8, r8)
 8000f66:	e05a      	b.n	800101e <minuteSetISR+0x126>
			}
		}
		else if(userAlarmTime.Minutes < 59) {
 8000f68:	4b31      	ldr	r3, [pc, #196]	@ (8001030 <minuteSetISR+0x138>)
 8000f6a:	785b      	ldrb	r3, [r3, #1]
 8000f6c:	2b3a      	cmp	r3, #58	@ 0x3a
 8000f6e:	d806      	bhi.n	8000f7e <minuteSetISR+0x86>
			userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8000f70:	4b2f      	ldr	r3, [pc, #188]	@ (8001030 <minuteSetISR+0x138>)
 8000f72:	785b      	ldrb	r3, [r3, #1]
 8000f74:	3301      	adds	r3, #1
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	4b2d      	ldr	r3, [pc, #180]	@ (8001030 <minuteSetISR+0x138>)
 8000f7a:	705a      	strb	r2, [r3, #1]
 8000f7c:	e04f      	b.n	800101e <minuteSetISR+0x126>
		}
		else {
			__NOP();
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	e04d      	b.n	800101e <minuteSetISR+0x126>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		getRTCTime(&hrtc, &currTime, &currDate);
 8000f82:	4a2c      	ldr	r2, [pc, #176]	@ (8001034 <minuteSetISR+0x13c>)
 8000f84:	492c      	ldr	r1, [pc, #176]	@ (8001038 <minuteSetISR+0x140>)
 8000f86:	4b2d      	ldr	r3, [pc, #180]	@ (800103c <minuteSetISR+0x144>)
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff f947 	bl	800021c <getRTCTime>

		if(currTime.Minutes >= 59) {
 8000f8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001038 <minuteSetISR+0x140>)
 8000f90:	785b      	ldrb	r3, [r3, #1]
 8000f92:	2b3a      	cmp	r3, #58	@ 0x3a
 8000f94:	d929      	bls.n	8000fea <minuteSetISR+0xf2>
			currTime.Minutes = 0;
 8000f96:	4b28      	ldr	r3, [pc, #160]	@ (8001038 <minuteSetISR+0x140>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	705a      	strb	r2, [r3, #1]
			currTime.Hours = currTime.Hours + 1;
 8000f9c:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <minuteSetISR+0x140>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b24      	ldr	r3, [pc, #144]	@ (8001038 <minuteSetISR+0x140>)
 8000fa6:	701a      	strb	r2, [r3, #0]
			if(currTime.Hours > 12) {
 8000fa8:	4b23      	ldr	r3, [pc, #140]	@ (8001038 <minuteSetISR+0x140>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b0c      	cmp	r3, #12
 8000fae:	d902      	bls.n	8000fb6 <minuteSetISR+0xbe>
				currTime.Hours = 1;
 8000fb0:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <minuteSetISR+0x140>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
			}
			if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8000fb6:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <minuteSetISR+0x140>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b0c      	cmp	r3, #12
 8000fbc:	d107      	bne.n	8000fce <minuteSetISR+0xd6>
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001038 <minuteSetISR+0x140>)
 8000fc0:	78db      	ldrb	r3, [r3, #3]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d103      	bne.n	8000fce <minuteSetISR+0xd6>
				currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <minuteSetISR+0x140>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	70da      	strb	r2, [r3, #3]
 8000fcc:	e019      	b.n	8001002 <minuteSetISR+0x10a>
			} else if(currTime.Hours == 12 && currTime.TimeFormat == RTC_HOURFORMAT12_PM) {
 8000fce:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <minuteSetISR+0x140>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b0c      	cmp	r3, #12
 8000fd4:	d107      	bne.n	8000fe6 <minuteSetISR+0xee>
 8000fd6:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <minuteSetISR+0x140>)
 8000fd8:	78db      	ldrb	r3, [r3, #3]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d103      	bne.n	8000fe6 <minuteSetISR+0xee>
				currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <minuteSetISR+0x140>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	70da      	strb	r2, [r3, #3]
 8000fe4:	e00d      	b.n	8001002 <minuteSetISR+0x10a>
			}
			else {
				__NOP();
 8000fe6:	46c0      	nop			@ (mov r8, r8)
 8000fe8:	e00b      	b.n	8001002 <minuteSetISR+0x10a>
			}
		}
		else if(currTime.Minutes < 59) {
 8000fea:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <minuteSetISR+0x140>)
 8000fec:	785b      	ldrb	r3, [r3, #1]
 8000fee:	2b3a      	cmp	r3, #58	@ 0x3a
 8000ff0:	d806      	bhi.n	8001000 <minuteSetISR+0x108>
			currTime.Minutes = currTime.Minutes + 1;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <minuteSetISR+0x140>)
 8000ff4:	785b      	ldrb	r3, [r3, #1]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <minuteSetISR+0x140>)
 8000ffc:	705a      	strb	r2, [r3, #1]
 8000ffe:	e000      	b.n	8001002 <minuteSetISR+0x10a>
		}
		else {
			__NOP();
 8001000:	46c0      	nop			@ (mov r8, r8)
		}
		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001002:	490d      	ldr	r1, [pc, #52]	@ (8001038 <minuteSetISR+0x140>)
 8001004:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <minuteSetISR+0x144>)
 8001006:	2200      	movs	r2, #0
 8001008:	0018      	movs	r0, r3
 800100a:	f002 fc47 	bl	800389c <HAL_RTC_SetTime>

		updateAndDisplayTime();
 800100e:	f7ff fc8d 	bl	800092c <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001012:	4a08      	ldr	r2, [pc, #32]	@ (8001034 <minuteSetISR+0x13c>)
 8001014:	4908      	ldr	r1, [pc, #32]	@ (8001038 <minuteSetISR+0x140>)
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <minuteSetISR+0x144>)
 8001018:	0018      	movs	r0, r3
 800101a:	f7ff f8ff 	bl	800021c <getRTCTime>

		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	781b      	ldrb	r3, [r3, #0]
}
 8001022:	0018      	movs	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			@ (mov r8, r8)
 800102c:	20000218 	.word	0x20000218
 8001030:	20000204 	.word	0x20000204
 8001034:	20000200 	.word	0x20000200
 8001038:	200001ec 	.word	0x200001ec
 800103c:	20000128 	.word	0x20000128

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
}
 8001046:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001048:	46c0      	nop			@ (mov r8, r8)
 800104a:	e7fd      	b.n	8001048 <Error_Handler+0x8>

0800104c <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM,
					uint32_t tim_PWM_CHANNEL) {
 800104c:	b5b0      	push	{r4, r5, r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	0005      	movs	r5, r0
 8001054:	000c      	movs	r4, r1
 8001056:	0010      	movs	r0, r2
 8001058:	0019      	movs	r1, r3
 800105a:	1dbb      	adds	r3, r7, #6
 800105c:	1c2a      	adds	r2, r5, #0
 800105e:	801a      	strh	r2, [r3, #0]
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	1c22      	adds	r2, r4, #0
 8001064:	801a      	strh	r2, [r3, #0]
 8001066:	1cbb      	adds	r3, r7, #2
 8001068:	1c02      	adds	r2, r0, #0
 800106a:	801a      	strh	r2, [r3, #0]
 800106c:	003b      	movs	r3, r7
 800106e:	1c0a      	adds	r2, r1, #0
 8001070:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001072:	4b7a      	ldr	r3, [pc, #488]	@ (800125c <sevSeg_Init+0x210>)
 8001074:	1dba      	adds	r2, r7, #6
 8001076:	8812      	ldrh	r2, [r2, #0]
 8001078:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 800107a:	4b79      	ldr	r3, [pc, #484]	@ (8001260 <sevSeg_Init+0x214>)
 800107c:	1d3a      	adds	r2, r7, #4
 800107e:	8812      	ldrh	r2, [r2, #0]
 8001080:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001082:	4b78      	ldr	r3, [pc, #480]	@ (8001264 <sevSeg_Init+0x218>)
 8001084:	1cba      	adds	r2, r7, #2
 8001086:	8812      	ldrh	r2, [r2, #0]
 8001088:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 800108a:	4b77      	ldr	r3, [pc, #476]	@ (8001268 <sevSeg_Init+0x21c>)
 800108c:	003a      	movs	r2, r7
 800108e:	8812      	ldrh	r2, [r2, #0]
 8001090:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001092:	4a76      	ldr	r2, [pc, #472]	@ (800126c <sevSeg_Init+0x220>)
 8001094:	2330      	movs	r3, #48	@ 0x30
 8001096:	18fb      	adds	r3, r7, r3
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	8013      	strh	r3, [r2, #0]

	for(int i = 0; i < 5; i++) {
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
 80010a0:	e00b      	b.n	80010ba <sevSeg_Init+0x6e>
		portArray[i] = GPIOPortArray[i];
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010a8:	18d3      	adds	r3, r2, r3
 80010aa:	6819      	ldr	r1, [r3, #0]
 80010ac:	4b70      	ldr	r3, [pc, #448]	@ (8001270 <sevSeg_Init+0x224>)
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	0092      	lsls	r2, r2, #2
 80010b2:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	3301      	adds	r3, #1
 80010b8:	61fb      	str	r3, [r7, #28]
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	2b04      	cmp	r3, #4
 80010be:	ddf0      	ble.n	80010a2 <sevSeg_Init+0x56>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 80010c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001270 <sevSeg_Init+0x224>)
 80010c2:	6918      	ldr	r0, [r3, #16]
 80010c4:	4b69      	ldr	r3, [pc, #420]	@ (800126c <sevSeg_Init+0x220>)
 80010c6:	8819      	ldrh	r1, [r3, #0]
 80010c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001274 <sevSeg_Init+0x228>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	001a      	movs	r2, r3
 80010ce:	f001 fb2c 	bl	800272a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 80010d2:	4b67      	ldr	r3, [pc, #412]	@ (8001270 <sevSeg_Init+0x224>)
 80010d4:	6918      	ldr	r0, [r3, #16]
 80010d6:	4b65      	ldr	r3, [pc, #404]	@ (800126c <sevSeg_Init+0x220>)
 80010d8:	8819      	ldrh	r1, [r3, #0]
 80010da:	4b66      	ldr	r3, [pc, #408]	@ (8001274 <sevSeg_Init+0x228>)
 80010dc:	785b      	ldrb	r3, [r3, #1]
 80010de:	001a      	movs	r2, r3
 80010e0:	f001 fb23 	bl	800272a <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80010e4:	4b62      	ldr	r3, [pc, #392]	@ (8001270 <sevSeg_Init+0x224>)
 80010e6:	6898      	ldr	r0, [r3, #8]
 80010e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001264 <sevSeg_Init+0x218>)
 80010ea:	8819      	ldrh	r1, [r3, #0]
 80010ec:	4b61      	ldr	r3, [pc, #388]	@ (8001274 <sevSeg_Init+0x228>)
 80010ee:	785b      	ldrb	r3, [r3, #1]
 80010f0:	001a      	movs	r2, r3
 80010f2:	f001 fb1a 	bl	800272a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80010f6:	4b5e      	ldr	r3, [pc, #376]	@ (8001270 <sevSeg_Init+0x224>)
 80010f8:	6898      	ldr	r0, [r3, #8]
 80010fa:	4b5a      	ldr	r3, [pc, #360]	@ (8001264 <sevSeg_Init+0x218>)
 80010fc:	8819      	ldrh	r1, [r3, #0]
 80010fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001274 <sevSeg_Init+0x228>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	001a      	movs	r2, r3
 8001104:	f001 fb11 	bl	800272a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8001108:	4b59      	ldr	r3, [pc, #356]	@ (8001270 <sevSeg_Init+0x224>)
 800110a:	68d8      	ldr	r0, [r3, #12]
 800110c:	4b56      	ldr	r3, [pc, #344]	@ (8001268 <sevSeg_Init+0x21c>)
 800110e:	8819      	ldrh	r1, [r3, #0]
 8001110:	4b58      	ldr	r3, [pc, #352]	@ (8001274 <sevSeg_Init+0x228>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	001a      	movs	r2, r3
 8001116:	f001 fb08 	bl	800272a <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(htim_PWM, tim_PWM_CHANNEL, 50);
 800111a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800111c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800111e:	2232      	movs	r2, #50	@ 0x32
 8001120:	0018      	movs	r0, r3
 8001122:	f000 f95d 	bl	80013e0 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8001126:	2308      	movs	r3, #8
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	4a53      	ldr	r2, [pc, #332]	@ (8001278 <sevSeg_Init+0x22c>)
 800112c:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	e038      	b.n	80011a6 <sevSeg_Init+0x15a>

		sendByte = hofSymb[i];
 8001134:	231b      	movs	r3, #27
 8001136:	18fb      	adds	r3, r7, r3
 8001138:	2208      	movs	r2, #8
 800113a:	18b9      	adds	r1, r7, r2
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	188a      	adds	r2, r1, r2
 8001140:	7812      	ldrb	r2, [r2, #0]
 8001142:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	e027      	b.n	800119a <sevSeg_Init+0x14e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 800114a:	4b49      	ldr	r3, [pc, #292]	@ (8001270 <sevSeg_Init+0x224>)
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	4b43      	ldr	r3, [pc, #268]	@ (800125c <sevSeg_Init+0x210>)
 8001150:	8819      	ldrh	r1, [r3, #0]
 8001152:	241b      	movs	r4, #27
 8001154:	193b      	adds	r3, r7, r4
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2201      	movs	r2, #1
 800115a:	4013      	ands	r3, r2
 800115c:	4a45      	ldr	r2, [pc, #276]	@ (8001274 <sevSeg_Init+0x228>)
 800115e:	5cd3      	ldrb	r3, [r2, r3]
 8001160:	001a      	movs	r2, r3
 8001162:	f001 fae2 	bl	800272a <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001166:	4b42      	ldr	r3, [pc, #264]	@ (8001270 <sevSeg_Init+0x224>)
 8001168:	6858      	ldr	r0, [r3, #4]
 800116a:	4b3d      	ldr	r3, [pc, #244]	@ (8001260 <sevSeg_Init+0x214>)
 800116c:	8819      	ldrh	r1, [r3, #0]
 800116e:	4b41      	ldr	r3, [pc, #260]	@ (8001274 <sevSeg_Init+0x228>)
 8001170:	785b      	ldrb	r3, [r3, #1]
 8001172:	001a      	movs	r2, r3
 8001174:	f001 fad9 	bl	800272a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001178:	4b3d      	ldr	r3, [pc, #244]	@ (8001270 <sevSeg_Init+0x224>)
 800117a:	6858      	ldr	r0, [r3, #4]
 800117c:	4b38      	ldr	r3, [pc, #224]	@ (8001260 <sevSeg_Init+0x214>)
 800117e:	8819      	ldrh	r1, [r3, #0]
 8001180:	4b3c      	ldr	r3, [pc, #240]	@ (8001274 <sevSeg_Init+0x228>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	001a      	movs	r2, r3
 8001186:	f001 fad0 	bl	800272a <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 800118a:	193b      	adds	r3, r7, r4
 800118c:	193a      	adds	r2, r7, r4
 800118e:	7812      	ldrb	r2, [r2, #0]
 8001190:	0852      	lsrs	r2, r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	3301      	adds	r3, #1
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	2b07      	cmp	r3, #7
 800119e:	ddd4      	ble.n	800114a <sevSeg_Init+0xfe>
	for(int i = 0; i <= 3; i++) {
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	ddc3      	ble.n	8001134 <sevSeg_Init+0xe8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80011ac:	4b30      	ldr	r3, [pc, #192]	@ (8001270 <sevSeg_Init+0x224>)
 80011ae:	6898      	ldr	r0, [r3, #8]
 80011b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001264 <sevSeg_Init+0x218>)
 80011b2:	8819      	ldrh	r1, [r3, #0]
 80011b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001274 <sevSeg_Init+0x228>)
 80011b6:	785b      	ldrb	r3, [r3, #1]
 80011b8:	001a      	movs	r2, r3
 80011ba:	f001 fab6 	bl	800272a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80011be:	4b2c      	ldr	r3, [pc, #176]	@ (8001270 <sevSeg_Init+0x224>)
 80011c0:	6898      	ldr	r0, [r3, #8]
 80011c2:	4b28      	ldr	r3, [pc, #160]	@ (8001264 <sevSeg_Init+0x218>)
 80011c4:	8819      	ldrh	r1, [r3, #0]
 80011c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001274 <sevSeg_Init+0x228>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	001a      	movs	r2, r3
 80011cc:	f001 faad 	bl	800272a <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 80011d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011d2:	0018      	movs	r0, r3
 80011d4:	f003 f8aa 	bl	800432c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 80011d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011da:	0018      	movs	r0, r3
 80011dc:	f003 f85a 	bl	8004294 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 80011e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e6:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 2)){ timerVal = __HAL_TIM_GET_COUNTER(htim); }
 80011e8:	e003      	b.n	80011f2 <sevSeg_Init+0x1a6>
 80011ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	1ad2      	subs	r2, r2, r3
 80011fc:	2380      	movs	r3, #128	@ 0x80
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	429a      	cmp	r2, r3
 8001202:	d3f2      	bcc.n	80011ea <sevSeg_Init+0x19e>

	HAL_TIM_Base_Stop(htim);
 8001204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001206:	0018      	movs	r0, r3
 8001208:	f003 f890 	bl	800432c <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 800120c:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <sevSeg_Init+0x224>)
 800120e:	6918      	ldr	r0, [r3, #16]
 8001210:	4b16      	ldr	r3, [pc, #88]	@ (800126c <sevSeg_Init+0x220>)
 8001212:	8819      	ldrh	r1, [r3, #0]
 8001214:	4b17      	ldr	r3, [pc, #92]	@ (8001274 <sevSeg_Init+0x228>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	001a      	movs	r2, r3
 800121a:	f001 fa86 	bl	800272a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 800121e:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <sevSeg_Init+0x224>)
 8001220:	6918      	ldr	r0, [r3, #16]
 8001222:	4b12      	ldr	r3, [pc, #72]	@ (800126c <sevSeg_Init+0x220>)
 8001224:	8819      	ldrh	r1, [r3, #0]
 8001226:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <sevSeg_Init+0x228>)
 8001228:	785b      	ldrb	r3, [r3, #1]
 800122a:	001a      	movs	r2, r3
 800122c:	f001 fa7d 	bl	800272a <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001230:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <sevSeg_Init+0x224>)
 8001232:	6898      	ldr	r0, [r3, #8]
 8001234:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <sevSeg_Init+0x218>)
 8001236:	8819      	ldrh	r1, [r3, #0]
 8001238:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <sevSeg_Init+0x228>)
 800123a:	785b      	ldrb	r3, [r3, #1]
 800123c:	001a      	movs	r2, r3
 800123e:	f001 fa74 	bl	800272a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001242:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <sevSeg_Init+0x224>)
 8001244:	6898      	ldr	r0, [r3, #8]
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <sevSeg_Init+0x218>)
 8001248:	8819      	ldrh	r1, [r3, #0]
 800124a:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <sevSeg_Init+0x228>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	001a      	movs	r2, r3
 8001250:	f001 fa6b 	bl	800272a <HAL_GPIO_WritePin>

}
 8001254:	46c0      	nop			@ (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	b008      	add	sp, #32
 800125a:	bdb0      	pop	{r4, r5, r7, pc}
 800125c:	2000021a 	.word	0x2000021a
 8001260:	2000021c 	.word	0x2000021c
 8001264:	2000021e 	.word	0x2000021e
 8001268:	20000220 	.word	0x20000220
 800126c:	20000222 	.word	0x20000222
 8001270:	2000002c 	.word	0x2000002c
 8001274:	20000040 	.word	0x20000040
 8001278:	471d3700 	.word	0x471d3700

0800127c <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	210a      	movs	r1, #10
 800128a:	0018      	movs	r0, r3
 800128c:	f7fe ff3a 	bl	8000104 <__udivsi3>
 8001290:	0003      	movs	r3, r0
 8001292:	b2da      	uxtb	r2, r3
 8001294:	2408      	movs	r4, #8
 8001296:	193b      	adds	r3, r7, r4
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	210a      	movs	r1, #10
 80012a0:	0018      	movs	r0, r3
 80012a2:	f7fe ffb5 	bl	8000210 <__aeabi_uidivmod>
 80012a6:	000b      	movs	r3, r1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	193b      	adds	r3, r7, r4
 80012ac:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80012b2:	210a      	movs	r1, #10
 80012b4:	0018      	movs	r0, r3
 80012b6:	f7fe ff25 	bl	8000104 <__udivsi3>
 80012ba:	0003      	movs	r3, r0
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	193b      	adds	r3, r7, r4
 80012c0:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80012c6:	210a      	movs	r1, #10
 80012c8:	0018      	movs	r0, r3
 80012ca:	f7fe ffa1 	bl	8000210 <__aeabi_uidivmod>
 80012ce:	000b      	movs	r3, r1
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	193b      	adds	r3, r7, r4
 80012d4:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 80012d6:	2116      	movs	r1, #22
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	78db      	ldrb	r3, [r3, #3]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d102      	bne.n	80012ec <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	2202      	movs	r2, #2
 80012ea:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	e04f      	b.n	8001392 <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 80012f2:	2308      	movs	r3, #8
 80012f4:	18fa      	adds	r2, r7, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	18d3      	adds	r3, r2, r3
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	0019      	movs	r1, r3
 80012fe:	2417      	movs	r4, #23
 8001300:	193b      	adds	r3, r7, r4
 8001302:	4a30      	ldr	r2, [pc, #192]	@ (80013c4 <sevSeg_updateDigits+0x148>)
 8001304:	5c52      	ldrb	r2, [r2, r1]
 8001306:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d110      	bne.n	8001330 <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	210a      	movs	r1, #10
 8001314:	0018      	movs	r0, r3
 8001316:	f7fe fef5 	bl	8000104 <__udivsi3>
 800131a:	0003      	movs	r3, r0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	001a      	movs	r2, r3
 8001320:	2316      	movs	r3, #22
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	18d2      	adds	r2, r2, r3
 8001328:	193b      	adds	r3, r7, r4
 800132a:	4927      	ldr	r1, [pc, #156]	@ (80013c8 <sevSeg_updateDigits+0x14c>)
 800132c:	5c8a      	ldrb	r2, [r1, r2]
 800132e:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	e027      	b.n	8001386 <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001336:	4b25      	ldr	r3, [pc, #148]	@ (80013cc <sevSeg_updateDigits+0x150>)
 8001338:	6818      	ldr	r0, [r3, #0]
 800133a:	4b25      	ldr	r3, [pc, #148]	@ (80013d0 <sevSeg_updateDigits+0x154>)
 800133c:	8819      	ldrh	r1, [r3, #0]
 800133e:	2417      	movs	r4, #23
 8001340:	193b      	adds	r3, r7, r4
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2201      	movs	r2, #1
 8001346:	4013      	ands	r3, r2
 8001348:	4a22      	ldr	r2, [pc, #136]	@ (80013d4 <sevSeg_updateDigits+0x158>)
 800134a:	5cd3      	ldrb	r3, [r2, r3]
 800134c:	001a      	movs	r2, r3
 800134e:	f001 f9ec 	bl	800272a <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001352:	4b1e      	ldr	r3, [pc, #120]	@ (80013cc <sevSeg_updateDigits+0x150>)
 8001354:	6858      	ldr	r0, [r3, #4]
 8001356:	4b20      	ldr	r3, [pc, #128]	@ (80013d8 <sevSeg_updateDigits+0x15c>)
 8001358:	8819      	ldrh	r1, [r3, #0]
 800135a:	4b1e      	ldr	r3, [pc, #120]	@ (80013d4 <sevSeg_updateDigits+0x158>)
 800135c:	785b      	ldrb	r3, [r3, #1]
 800135e:	001a      	movs	r2, r3
 8001360:	f001 f9e3 	bl	800272a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001364:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <sevSeg_updateDigits+0x150>)
 8001366:	6858      	ldr	r0, [r3, #4]
 8001368:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <sevSeg_updateDigits+0x15c>)
 800136a:	8819      	ldrh	r1, [r3, #0]
 800136c:	4b19      	ldr	r3, [pc, #100]	@ (80013d4 <sevSeg_updateDigits+0x158>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	001a      	movs	r2, r3
 8001372:	f001 f9da 	bl	800272a <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001376:	193b      	adds	r3, r7, r4
 8001378:	193a      	adds	r2, r7, r4
 800137a:	7812      	ldrb	r2, [r2, #0]
 800137c:	0852      	lsrs	r2, r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	3301      	adds	r3, #1
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2b07      	cmp	r3, #7
 800138a:	ddd4      	ble.n	8001336 <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	3301      	adds	r3, #1
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	2b03      	cmp	r3, #3
 8001396:	ddac      	ble.n	80012f2 <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <sevSeg_updateDigits+0x150>)
 800139a:	6898      	ldr	r0, [r3, #8]
 800139c:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <sevSeg_updateDigits+0x160>)
 800139e:	8819      	ldrh	r1, [r3, #0]
 80013a0:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <sevSeg_updateDigits+0x158>)
 80013a2:	785b      	ldrb	r3, [r3, #1]
 80013a4:	001a      	movs	r2, r3
 80013a6:	f001 f9c0 	bl	800272a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80013aa:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <sevSeg_updateDigits+0x150>)
 80013ac:	6898      	ldr	r0, [r3, #8]
 80013ae:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <sevSeg_updateDigits+0x160>)
 80013b0:	8819      	ldrh	r1, [r3, #0]
 80013b2:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <sevSeg_updateDigits+0x158>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	001a      	movs	r2, r3
 80013b8:	f001 f9b7 	bl	800272a <HAL_GPIO_WritePin>

	return;
 80013bc:	46c0      	nop			@ (mov r8, r8)

}
 80013be:	46bd      	mov	sp, r7
 80013c0:	b007      	add	sp, #28
 80013c2:	bd90      	pop	{r4, r7, pc}
 80013c4:	08004fb0 	.word	0x08004fb0
 80013c8:	08004fbc 	.word	0x08004fbc
 80013cc:	2000002c 	.word	0x2000002c
 80013d0:	2000021a 	.word	0x2000021a
 80013d4:	20000040 	.word	0x20000040
 80013d8:	2000021c 	.word	0x2000021c
 80013dc:	2000021e 	.word	0x2000021e

080013e0 <sevSeg_setIntensity>:

void sevSeg_setIntensity(TIM_HandleTypeDef *htim_PWM, uint32_t tim_PWM_CHANNEL, uint16_t dutyCycle) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	1dbb      	adds	r3, r7, #6
 80013ec:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(htim_PWM, tim_PWM_CHANNEL, dutyCycle);
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d105      	bne.n	8001400 <sevSeg_setIntensity+0x20>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	1dba      	adds	r2, r7, #6
 80013fa:	8812      	ldrh	r2, [r2, #0]
 80013fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80013fe:	e028      	b.n	8001452 <sevSeg_setIntensity+0x72>
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	2b04      	cmp	r3, #4
 8001404:	d105      	bne.n	8001412 <sevSeg_setIntensity+0x32>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	1dbb      	adds	r3, r7, #6
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	6393      	str	r3, [r2, #56]	@ 0x38
 8001410:	e01f      	b.n	8001452 <sevSeg_setIntensity+0x72>
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	2b08      	cmp	r3, #8
 8001416:	d105      	bne.n	8001424 <sevSeg_setIntensity+0x44>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	1dbb      	adds	r3, r7, #6
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001422:	e016      	b.n	8001452 <sevSeg_setIntensity+0x72>
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	2b0c      	cmp	r3, #12
 8001428:	d105      	bne.n	8001436 <sevSeg_setIntensity+0x56>
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	1dbb      	adds	r3, r7, #6
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	6413      	str	r3, [r2, #64]	@ 0x40
 8001434:	e00d      	b.n	8001452 <sevSeg_setIntensity+0x72>
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2b10      	cmp	r3, #16
 800143a:	d105      	bne.n	8001448 <sevSeg_setIntensity+0x68>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	1dbb      	adds	r3, r7, #6
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	6593      	str	r3, [r2, #88]	@ 0x58
 8001446:	e004      	b.n	8001452 <sevSeg_setIntensity+0x72>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	1dbb      	adds	r3, r7, #6
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(htim_PWM, tim_PWM_CHANNEL);
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	0011      	movs	r1, r2
 8001458:	0018      	movs	r0, r3
 800145a:	f002 ffe5 	bl	8004428 <HAL_TIM_PWM_Start>

}
 800145e:	46c0      	nop			@ (mov r8, r8)
 8001460:	46bd      	mov	sp, r7
 8001462:	b004      	add	sp, #16
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <HAL_MspInit+0x44>)
 8001470:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <HAL_MspInit+0x44>)
 8001474:	2101      	movs	r1, #1
 8001476:	430a      	orrs	r2, r1
 8001478:	641a      	str	r2, [r3, #64]	@ 0x40
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <HAL_MspInit+0x44>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	2201      	movs	r2, #1
 8001480:	4013      	ands	r3, r2
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <HAL_MspInit+0x44>)
 8001488:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800148a:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <HAL_MspInit+0x44>)
 800148c:	2180      	movs	r1, #128	@ 0x80
 800148e:	0549      	lsls	r1, r1, #21
 8001490:	430a      	orrs	r2, r1
 8001492:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001494:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <HAL_MspInit+0x44>)
 8001496:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001498:	2380      	movs	r3, #128	@ 0x80
 800149a:	055b      	lsls	r3, r3, #21
 800149c:	4013      	ands	r3, r2
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a2:	46c0      	nop			@ (mov r8, r8)
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b002      	add	sp, #8
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			@ (mov r8, r8)
 80014ac:	40021000 	.word	0x40021000

080014b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b08b      	sub	sp, #44	@ 0x2c
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	2414      	movs	r4, #20
 80014ba:	193b      	adds	r3, r7, r4
 80014bc:	0018      	movs	r0, r3
 80014be:	2314      	movs	r3, #20
 80014c0:	001a      	movs	r2, r3
 80014c2:	2100      	movs	r1, #0
 80014c4:	f003 fd3a 	bl	8004f3c <memset>
  if(hadc->Instance==ADC1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a18      	ldr	r2, [pc, #96]	@ (8001530 <HAL_ADC_MspInit+0x80>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d129      	bne.n	8001526 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014d2:	4b18      	ldr	r3, [pc, #96]	@ (8001534 <HAL_ADC_MspInit+0x84>)
 80014d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014d6:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <HAL_ADC_MspInit+0x84>)
 80014d8:	2180      	movs	r1, #128	@ 0x80
 80014da:	0349      	lsls	r1, r1, #13
 80014dc:	430a      	orrs	r2, r1
 80014de:	641a      	str	r2, [r3, #64]	@ 0x40
 80014e0:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <HAL_ADC_MspInit+0x84>)
 80014e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014e4:	2380      	movs	r3, #128	@ 0x80
 80014e6:	035b      	lsls	r3, r3, #13
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <HAL_ADC_MspInit+0x84>)
 80014f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <HAL_ADC_MspInit+0x84>)
 80014f4:	2101      	movs	r1, #1
 80014f6:	430a      	orrs	r2, r1
 80014f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <HAL_ADC_MspInit+0x84>)
 80014fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014fe:	2201      	movs	r2, #1
 8001500:	4013      	ands	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001506:	193b      	adds	r3, r7, r4
 8001508:	2204      	movs	r2, #4
 800150a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150c:	193b      	adds	r3, r7, r4
 800150e:	2203      	movs	r2, #3
 8001510:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	193b      	adds	r3, r7, r4
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	193a      	adds	r2, r7, r4
 800151a:	23a0      	movs	r3, #160	@ 0xa0
 800151c:	05db      	lsls	r3, r3, #23
 800151e:	0011      	movs	r1, r2
 8001520:	0018      	movs	r0, r3
 8001522:	f000 ff81 	bl	8002428 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	46bd      	mov	sp, r7
 800152a:	b00b      	add	sp, #44	@ 0x2c
 800152c:	bd90      	pop	{r4, r7, pc}
 800152e:	46c0      	nop			@ (mov r8, r8)
 8001530:	40012400 	.word	0x40012400
 8001534:	40021000 	.word	0x40021000

08001538 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b095      	sub	sp, #84	@ 0x54
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	233c      	movs	r3, #60	@ 0x3c
 8001542:	18fb      	adds	r3, r7, r3
 8001544:	0018      	movs	r0, r3
 8001546:	2314      	movs	r3, #20
 8001548:	001a      	movs	r2, r3
 800154a:	2100      	movs	r1, #0
 800154c:	f003 fcf6 	bl	8004f3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001550:	2414      	movs	r4, #20
 8001552:	193b      	adds	r3, r7, r4
 8001554:	0018      	movs	r0, r3
 8001556:	2328      	movs	r3, #40	@ 0x28
 8001558:	001a      	movs	r2, r3
 800155a:	2100      	movs	r1, #0
 800155c:	f003 fcee 	bl	8004f3c <memset>
  if(hi2c->Instance==I2C1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a22      	ldr	r2, [pc, #136]	@ (80015f0 <HAL_I2C_MspInit+0xb8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d13d      	bne.n	80015e6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800156a:	193b      	adds	r3, r7, r4
 800156c:	2220      	movs	r2, #32
 800156e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001570:	193b      	adds	r3, r7, r4
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001576:	193b      	adds	r3, r7, r4
 8001578:	0018      	movs	r0, r3
 800157a:	f001 ff73 	bl	8003464 <HAL_RCCEx_PeriphCLKConfig>
 800157e:	1e03      	subs	r3, r0, #0
 8001580:	d001      	beq.n	8001586 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001582:	f7ff fd5d 	bl	8001040 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <HAL_I2C_MspInit+0xbc>)
 8001588:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800158a:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <HAL_I2C_MspInit+0xbc>)
 800158c:	2102      	movs	r1, #2
 800158e:	430a      	orrs	r2, r1
 8001590:	635a      	str	r2, [r3, #52]	@ 0x34
 8001592:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <HAL_I2C_MspInit+0xbc>)
 8001594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001596:	2202      	movs	r2, #2
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800159e:	213c      	movs	r1, #60	@ 0x3c
 80015a0:	187b      	adds	r3, r7, r1
 80015a2:	22c0      	movs	r2, #192	@ 0xc0
 80015a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a6:	187b      	adds	r3, r7, r1
 80015a8:	2212      	movs	r2, #18
 80015aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	187b      	adds	r3, r7, r1
 80015b4:	2200      	movs	r2, #0
 80015b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80015b8:	187b      	adds	r3, r7, r1
 80015ba:	2206      	movs	r2, #6
 80015bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015be:	187b      	adds	r3, r7, r1
 80015c0:	4a0d      	ldr	r2, [pc, #52]	@ (80015f8 <HAL_I2C_MspInit+0xc0>)
 80015c2:	0019      	movs	r1, r3
 80015c4:	0010      	movs	r0, r2
 80015c6:	f000 ff2f 	bl	8002428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <HAL_I2C_MspInit+0xbc>)
 80015cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <HAL_I2C_MspInit+0xbc>)
 80015d0:	2180      	movs	r1, #128	@ 0x80
 80015d2:	0389      	lsls	r1, r1, #14
 80015d4:	430a      	orrs	r2, r1
 80015d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_I2C_MspInit+0xbc>)
 80015da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015dc:	2380      	movs	r3, #128	@ 0x80
 80015de:	039b      	lsls	r3, r3, #14
 80015e0:	4013      	ands	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015e6:	46c0      	nop			@ (mov r8, r8)
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b015      	add	sp, #84	@ 0x54
 80015ec:	bd90      	pop	{r4, r7, pc}
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	40005400 	.word	0x40005400
 80015f4:	40021000 	.word	0x40021000
 80015f8:	50000400 	.word	0x50000400

080015fc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b08f      	sub	sp, #60	@ 0x3c
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001604:	2410      	movs	r4, #16
 8001606:	193b      	adds	r3, r7, r4
 8001608:	0018      	movs	r0, r3
 800160a:	2328      	movs	r3, #40	@ 0x28
 800160c:	001a      	movs	r2, r3
 800160e:	2100      	movs	r1, #0
 8001610:	f003 fc94 	bl	8004f3c <memset>
  if(hrtc->Instance==RTC)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a19      	ldr	r2, [pc, #100]	@ (8001680 <HAL_RTC_MspInit+0x84>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d12c      	bne.n	8001678 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800161e:	193b      	adds	r3, r7, r4
 8001620:	2280      	movs	r2, #128	@ 0x80
 8001622:	0292      	lsls	r2, r2, #10
 8001624:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001626:	193b      	adds	r3, r7, r4
 8001628:	2280      	movs	r2, #128	@ 0x80
 800162a:	0052      	lsls	r2, r2, #1
 800162c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800162e:	193b      	adds	r3, r7, r4
 8001630:	0018      	movs	r0, r3
 8001632:	f001 ff17 	bl	8003464 <HAL_RCCEx_PeriphCLKConfig>
 8001636:	1e03      	subs	r3, r0, #0
 8001638:	d001      	beq.n	800163e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800163a:	f7ff fd01 	bl	8001040 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800163e:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <HAL_RTC_MspInit+0x88>)
 8001640:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <HAL_RTC_MspInit+0x88>)
 8001644:	2180      	movs	r1, #128	@ 0x80
 8001646:	0209      	lsls	r1, r1, #8
 8001648:	430a      	orrs	r2, r1
 800164a:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800164c:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <HAL_RTC_MspInit+0x88>)
 800164e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001650:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <HAL_RTC_MspInit+0x88>)
 8001652:	2180      	movs	r1, #128	@ 0x80
 8001654:	00c9      	lsls	r1, r1, #3
 8001656:	430a      	orrs	r2, r1
 8001658:	63da      	str	r2, [r3, #60]	@ 0x3c
 800165a:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <HAL_RTC_MspInit+0x88>)
 800165c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800165e:	2380      	movs	r3, #128	@ 0x80
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4013      	ands	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	2002      	movs	r0, #2
 800166e:	f000 fea9 	bl	80023c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001672:	2002      	movs	r0, #2
 8001674:	f000 febb 	bl	80023ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001678:	46c0      	nop			@ (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	b00f      	add	sp, #60	@ 0x3c
 800167e:	bd90      	pop	{r4, r7, pc}
 8001680:	40002800 	.word	0x40002800
 8001684:	40021000 	.word	0x40021000

08001688 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2380      	movs	r3, #128	@ 0x80
 8001696:	05db      	lsls	r3, r3, #23
 8001698:	429a      	cmp	r2, r3
 800169a:	d10b      	bne.n	80016b4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800169c:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <HAL_TIM_PWM_MspInit+0x34>)
 800169e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_TIM_PWM_MspInit+0x34>)
 80016a2:	2101      	movs	r1, #1
 80016a4:	430a      	orrs	r2, r1
 80016a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016a8:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <HAL_TIM_PWM_MspInit+0x34>)
 80016aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ac:	2201      	movs	r2, #1
 80016ae:	4013      	ands	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016b4:	46c0      	nop			@ (mov r8, r8)
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b004      	add	sp, #16
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000

080016c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0a      	ldr	r2, [pc, #40]	@ (80016f8 <HAL_TIM_Base_MspInit+0x38>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d10d      	bne.n	80016ee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80016d2:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <HAL_TIM_Base_MspInit+0x3c>)
 80016d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016d6:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <HAL_TIM_Base_MspInit+0x3c>)
 80016d8:	2180      	movs	r1, #128	@ 0x80
 80016da:	0209      	lsls	r1, r1, #8
 80016dc:	430a      	orrs	r2, r1
 80016de:	641a      	str	r2, [r3, #64]	@ 0x40
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_TIM_Base_MspInit+0x3c>)
 80016e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016e4:	2380      	movs	r3, #128	@ 0x80
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	4013      	ands	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b004      	add	sp, #16
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			@ (mov r8, r8)
 80016f8:	40002000 	.word	0x40002000
 80016fc:	40021000 	.word	0x40021000

08001700 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b089      	sub	sp, #36	@ 0x24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	240c      	movs	r4, #12
 800170a:	193b      	adds	r3, r7, r4
 800170c:	0018      	movs	r0, r3
 800170e:	2314      	movs	r3, #20
 8001710:	001a      	movs	r2, r3
 8001712:	2100      	movs	r1, #0
 8001714:	f003 fc12 	bl	8004f3c <memset>
  if(htim->Instance==TIM2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	2380      	movs	r3, #128	@ 0x80
 800171e:	05db      	lsls	r3, r3, #23
 8001720:	429a      	cmp	r2, r3
 8001722:	d121      	bne.n	8001768 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001724:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <HAL_TIM_MspPostInit+0x70>)
 8001726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001728:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <HAL_TIM_MspPostInit+0x70>)
 800172a:	2104      	movs	r1, #4
 800172c:	430a      	orrs	r2, r1
 800172e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001730:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <HAL_TIM_MspPostInit+0x70>)
 8001732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001734:	2204      	movs	r2, #4
 8001736:	4013      	ands	r3, r2
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 800173c:	0021      	movs	r1, r4
 800173e:	187b      	adds	r3, r7, r1
 8001740:	2240      	movs	r2, #64	@ 0x40
 8001742:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	187b      	adds	r3, r7, r1
 8001746:	2202      	movs	r2, #2
 8001748:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	187b      	adds	r3, r7, r1
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	187b      	adds	r3, r7, r1
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001756:	187b      	adds	r3, r7, r1
 8001758:	2202      	movs	r2, #2
 800175a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 800175c:	187b      	adds	r3, r7, r1
 800175e:	4a05      	ldr	r2, [pc, #20]	@ (8001774 <HAL_TIM_MspPostInit+0x74>)
 8001760:	0019      	movs	r1, r3
 8001762:	0010      	movs	r0, r2
 8001764:	f000 fe60 	bl	8002428 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001768:	46c0      	nop			@ (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b009      	add	sp, #36	@ 0x24
 800176e:	bd90      	pop	{r4, r7, pc}
 8001770:	40021000 	.word	0x40021000
 8001774:	50000800 	.word	0x50000800

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800177c:	46c0      	nop			@ (mov r8, r8)
 800177e:	e7fd      	b.n	800177c <NMI_Handler+0x4>

08001780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001784:	46c0      	nop			@ (mov r8, r8)
 8001786:	e7fd      	b.n	8001784 <HardFault_Handler+0x4>

08001788 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800178c:	46c0      	nop			@ (mov r8, r8)
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001796:	46c0      	nop			@ (mov r8, r8)
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a0:	f000 f8ca 	bl	8001938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a4:	46c0      	nop			@ (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80017b0:	4b03      	ldr	r3, [pc, #12]	@ (80017c0 <RTC_TAMP_IRQHandler+0x14>)
 80017b2:	0018      	movs	r0, r3
 80017b4:	f002 fb96 	bl	8003ee4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80017b8:	46c0      	nop			@ (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			@ (mov r8, r8)
 80017c0:	20000128 	.word	0x20000128

080017c4 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 80017c8:	2001      	movs	r0, #1
 80017ca:	f000 ffe7 	bl	800279c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 80017ce:	2002      	movs	r0, #2
 80017d0:	f000 ffe4 	bl	800279c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80017d4:	46c0      	nop			@ (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 80017de:	2004      	movs	r0, #4
 80017e0:	f000 ffdc 	bl	800279c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 80017e4:	2008      	movs	r0, #8
 80017e6:	f000 ffd9 	bl	800279c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80017ea:	46c0      	nop			@ (mov r8, r8)
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 80017f4:	2380      	movs	r3, #128	@ 0x80
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	0018      	movs	r0, r3
 80017fa:	f000 ffcf 	bl	800279c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80017fe:	46c0      	nop			@ (mov r8, r8)
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	46c0      	nop			@ (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001810:	480d      	ldr	r0, [pc, #52]	@ (8001848 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001812:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001814:	f7ff fff6 	bl	8001804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001818:	480c      	ldr	r0, [pc, #48]	@ (800184c <LoopForever+0x6>)
  ldr r1, =_edata
 800181a:	490d      	ldr	r1, [pc, #52]	@ (8001850 <LoopForever+0xa>)
  ldr r2, =_sidata
 800181c:	4a0d      	ldr	r2, [pc, #52]	@ (8001854 <LoopForever+0xe>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001820:	e002      	b.n	8001828 <LoopCopyDataInit>

08001822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001826:	3304      	adds	r3, #4

08001828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800182c:	d3f9      	bcc.n	8001822 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182e:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001830:	4c0a      	ldr	r4, [pc, #40]	@ (800185c <LoopForever+0x16>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001834:	e001      	b.n	800183a <LoopFillZerobss>

08001836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001838:	3204      	adds	r2, #4

0800183a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800183c:	d3fb      	bcc.n	8001836 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800183e:	f003 fb85 	bl	8004f4c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001842:	f7fe fd01 	bl	8000248 <main>

08001846 <LoopForever>:

LoopForever:
  b LoopForever
 8001846:	e7fe      	b.n	8001846 <LoopForever>
  ldr   r0, =_estack
 8001848:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800184c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001850:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001854:	0800505c 	.word	0x0800505c
  ldr r2, =_sbss
 8001858:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 800185c:	20000228 	.word	0x20000228

08001860 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001860:	e7fe      	b.n	8001860 <ADC1_IRQHandler>
	...

08001864 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001870:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <HAL_Init+0x3c>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <HAL_Init+0x3c>)
 8001876:	2180      	movs	r1, #128	@ 0x80
 8001878:	0049      	lsls	r1, r1, #1
 800187a:	430a      	orrs	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800187e:	2003      	movs	r0, #3
 8001880:	f000 f810 	bl	80018a4 <HAL_InitTick>
 8001884:	1e03      	subs	r3, r0, #0
 8001886:	d003      	beq.n	8001890 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001888:	1dfb      	adds	r3, r7, #7
 800188a:	2201      	movs	r2, #1
 800188c:	701a      	strb	r2, [r3, #0]
 800188e:	e001      	b.n	8001894 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001890:	f7ff fdea 	bl	8001468 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001894:	1dfb      	adds	r3, r7, #7
 8001896:	781b      	ldrb	r3, [r3, #0]
}
 8001898:	0018      	movs	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	b002      	add	sp, #8
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40022000 	.word	0x40022000

080018a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018ac:	230f      	movs	r3, #15
 80018ae:	18fb      	adds	r3, r7, r3
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80018b4:	4b1d      	ldr	r3, [pc, #116]	@ (800192c <HAL_InitTick+0x88>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d02b      	beq.n	8001914 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80018bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001930 <HAL_InitTick+0x8c>)
 80018be:	681c      	ldr	r4, [r3, #0]
 80018c0:	4b1a      	ldr	r3, [pc, #104]	@ (800192c <HAL_InitTick+0x88>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	0019      	movs	r1, r3
 80018c6:	23fa      	movs	r3, #250	@ 0xfa
 80018c8:	0098      	lsls	r0, r3, #2
 80018ca:	f7fe fc1b 	bl	8000104 <__udivsi3>
 80018ce:	0003      	movs	r3, r0
 80018d0:	0019      	movs	r1, r3
 80018d2:	0020      	movs	r0, r4
 80018d4:	f7fe fc16 	bl	8000104 <__udivsi3>
 80018d8:	0003      	movs	r3, r0
 80018da:	0018      	movs	r0, r3
 80018dc:	f000 fd97 	bl	800240e <HAL_SYSTICK_Config>
 80018e0:	1e03      	subs	r3, r0, #0
 80018e2:	d112      	bne.n	800190a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d80a      	bhi.n	8001900 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	2301      	movs	r3, #1
 80018ee:	425b      	negs	r3, r3
 80018f0:	2200      	movs	r2, #0
 80018f2:	0018      	movs	r0, r3
 80018f4:	f000 fd66 	bl	80023c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <HAL_InitTick+0x90>)
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	e00d      	b.n	800191c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001900:	230f      	movs	r3, #15
 8001902:	18fb      	adds	r3, r7, r3
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
 8001908:	e008      	b.n	800191c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800190a:	230f      	movs	r3, #15
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
 8001912:	e003      	b.n	800191c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001914:	230f      	movs	r3, #15
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800191c:	230f      	movs	r3, #15
 800191e:	18fb      	adds	r3, r7, r3
 8001920:	781b      	ldrb	r3, [r3, #0]
}
 8001922:	0018      	movs	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	b005      	add	sp, #20
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	46c0      	nop			@ (mov r8, r8)
 800192c:	2000004c 	.word	0x2000004c
 8001930:	20000044 	.word	0x20000044
 8001934:	20000048 	.word	0x20000048

08001938 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800193c:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <HAL_IncTick+0x1c>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	001a      	movs	r2, r3
 8001942:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <HAL_IncTick+0x20>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	18d2      	adds	r2, r2, r3
 8001948:	4b03      	ldr	r3, [pc, #12]	@ (8001958 <HAL_IncTick+0x20>)
 800194a:	601a      	str	r2, [r3, #0]
}
 800194c:	46c0      	nop			@ (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	46c0      	nop			@ (mov r8, r8)
 8001954:	2000004c 	.word	0x2000004c
 8001958:	20000224 	.word	0x20000224

0800195c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  return uwTick;
 8001960:	4b02      	ldr	r3, [pc, #8]	@ (800196c <HAL_GetTick+0x10>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	0018      	movs	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	46c0      	nop			@ (mov r8, r8)
 800196c:	20000224 	.word	0x20000224

08001970 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a05      	ldr	r2, [pc, #20]	@ (8001994 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001980:	401a      	ands	r2, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	601a      	str	r2, [r3, #0]
}
 800198a:	46c0      	nop			@ (mov r8, r8)
 800198c:	46bd      	mov	sp, r7
 800198e:	b002      	add	sp, #8
 8001990:	bd80      	pop	{r7, pc}
 8001992:	46c0      	nop			@ (mov r8, r8)
 8001994:	fe3fffff 	.word	0xfe3fffff

08001998 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	23e0      	movs	r3, #224	@ 0xe0
 80019a6:	045b      	lsls	r3, r3, #17
 80019a8:	4013      	ands	r3, r2
}
 80019aa:	0018      	movs	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b002      	add	sp, #8
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	2104      	movs	r1, #4
 80019c6:	400a      	ands	r2, r1
 80019c8:	2107      	movs	r1, #7
 80019ca:	4091      	lsls	r1, r2
 80019cc:	000a      	movs	r2, r1
 80019ce:	43d2      	mvns	r2, r2
 80019d0:	401a      	ands	r2, r3
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2104      	movs	r1, #4
 80019d6:	400b      	ands	r3, r1
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4099      	lsls	r1, r3
 80019dc:	000b      	movs	r3, r1
 80019de:	431a      	orrs	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80019e4:	46c0      	nop			@ (mov r8, r8)
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b004      	add	sp, #16
 80019ea:	bd80      	pop	{r7, pc}

080019ec <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	2104      	movs	r1, #4
 80019fe:	400a      	ands	r2, r1
 8001a00:	2107      	movs	r1, #7
 8001a02:	4091      	lsls	r1, r2
 8001a04:	000a      	movs	r2, r1
 8001a06:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	2104      	movs	r1, #4
 8001a0c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001a0e:	40da      	lsrs	r2, r3
 8001a10:	0013      	movs	r3, r2
}
 8001a12:	0018      	movs	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b002      	add	sp, #8
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	211f      	movs	r1, #31
 8001a2e:	400a      	ands	r2, r1
 8001a30:	210f      	movs	r1, #15
 8001a32:	4091      	lsls	r1, r2
 8001a34:	000a      	movs	r2, r1
 8001a36:	43d2      	mvns	r2, r2
 8001a38:	401a      	ands	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	0e9b      	lsrs	r3, r3, #26
 8001a3e:	210f      	movs	r1, #15
 8001a40:	4019      	ands	r1, r3
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	201f      	movs	r0, #31
 8001a46:	4003      	ands	r3, r0
 8001a48:	4099      	lsls	r1, r3
 8001a4a:	000b      	movs	r3, r1
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a52:	46c0      	nop			@ (mov r8, r8)
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b004      	add	sp, #16
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	035b      	lsls	r3, r3, #13
 8001a6c:	0b5b      	lsrs	r3, r3, #13
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a74:	46c0      	nop			@ (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b002      	add	sp, #8
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	0352      	lsls	r2, r2, #13
 8001a8e:	0b52      	lsrs	r2, r2, #13
 8001a90:	43d2      	mvns	r2, r2
 8001a92:	401a      	ands	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a98:	46c0      	nop			@ (mov r8, r8)
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b002      	add	sp, #8
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	0212      	lsls	r2, r2, #8
 8001ab4:	43d2      	mvns	r2, r2
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	400b      	ands	r3, r1
 8001ac0:	4904      	ldr	r1, [pc, #16]	@ (8001ad4 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001ac2:	400b      	ands	r3, r1
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001aca:	46c0      	nop			@ (mov r8, r8)
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b004      	add	sp, #16
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	46c0      	nop			@ (mov r8, r8)
 8001ad4:	07ffff00 	.word	0x07ffff00

08001ad8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4a05      	ldr	r2, [pc, #20]	@ (8001afc <LL_ADC_EnableInternalRegulator+0x24>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2280      	movs	r2, #128	@ 0x80
 8001aea:	0552      	lsls	r2, r2, #21
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b002      	add	sp, #8
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	6fffffe8 	.word	0x6fffffe8

08001b00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	2380      	movs	r3, #128	@ 0x80
 8001b0e:	055b      	lsls	r3, r3, #21
 8001b10:	401a      	ands	r2, r3
 8001b12:	2380      	movs	r3, #128	@ 0x80
 8001b14:	055b      	lsls	r3, r3, #21
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d101      	bne.n	8001b1e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	0018      	movs	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b002      	add	sp, #8
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2201      	movs	r2, #1
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <LL_ADC_IsEnabled+0x18>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <LL_ADC_IsEnabled+0x1a>
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	0018      	movs	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b002      	add	sp, #8
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2204      	movs	r2, #4
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d101      	bne.n	8001b62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	0018      	movs	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b002      	add	sp, #8
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b74:	231f      	movs	r3, #31
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e17f      	b.n	8001e92 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10a      	bne.n	8001bb0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7ff fc87 	bl	80014b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2254      	movs	r2, #84	@ 0x54
 8001bac:	2100      	movs	r1, #0
 8001bae:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7ff ffa3 	bl	8001b00 <LL_ADC_IsInternalRegulatorEnabled>
 8001bba:	1e03      	subs	r3, r0, #0
 8001bbc:	d115      	bne.n	8001bea <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f7ff ff88 	bl	8001ad8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bc8:	4bb4      	ldr	r3, [pc, #720]	@ (8001e9c <HAL_ADC_Init+0x330>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	49b4      	ldr	r1, [pc, #720]	@ (8001ea0 <HAL_ADC_Init+0x334>)
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f7fe fa98 	bl	8000104 <__udivsi3>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bdc:	e002      	b.n	8001be4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f9      	bne.n	8001bde <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f7ff ff86 	bl	8001b00 <LL_ADC_IsInternalRegulatorEnabled>
 8001bf4:	1e03      	subs	r3, r0, #0
 8001bf6:	d10f      	bne.n	8001c18 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c08:	2201      	movs	r2, #1
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c10:	231f      	movs	r3, #31
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f7ff ff94 	bl	8001b4a <LL_ADC_REG_IsConversionOngoing>
 8001c22:	0003      	movs	r3, r0
 8001c24:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2a:	2210      	movs	r2, #16
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d000      	beq.n	8001c32 <HAL_ADC_Init+0xc6>
 8001c30:	e122      	b.n	8001e78 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d000      	beq.n	8001c3a <HAL_ADC_Init+0xce>
 8001c38:	e11e      	b.n	8001e78 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3e:	4a99      	ldr	r2, [pc, #612]	@ (8001ea4 <HAL_ADC_Init+0x338>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	2202      	movs	r2, #2
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f7ff ff6a 	bl	8001b28 <LL_ADC_IsEnabled>
 8001c54:	1e03      	subs	r3, r0, #0
 8001c56:	d000      	beq.n	8001c5a <HAL_ADC_Init+0xee>
 8001c58:	e0ad      	b.n	8001db6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7e1b      	ldrb	r3, [r3, #24]
 8001c62:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001c64:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	7e5b      	ldrb	r3, [r3, #25]
 8001c6a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001c6c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	7e9b      	ldrb	r3, [r3, #26]
 8001c72:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001c74:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <HAL_ADC_Init+0x118>
 8001c7e:	2380      	movs	r3, #128	@ 0x80
 8001c80:	015b      	lsls	r3, r3, #5
 8001c82:	e000      	b.n	8001c86 <HAL_ADC_Init+0x11a>
 8001c84:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001c86:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001c8c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	da04      	bge.n	8001ca0 <HAL_ADC_Init+0x134>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	085b      	lsrs	r3, r3, #1
 8001c9e:	e001      	b.n	8001ca4 <HAL_ADC_Init+0x138>
 8001ca0:	2380      	movs	r3, #128	@ 0x80
 8001ca2:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001ca4:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	212c      	movs	r1, #44	@ 0x2c
 8001caa:	5c5b      	ldrb	r3, [r3, r1]
 8001cac:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001cae:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	5c9b      	ldrb	r3, [r3, r2]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d115      	bne.n	8001cec <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7e9b      	ldrb	r3, [r3, #26]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d105      	bne.n	8001cd4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2280      	movs	r2, #128	@ 0x80
 8001ccc:	0252      	lsls	r2, r2, #9
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	e00b      	b.n	8001cec <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd8:	2220      	movs	r2, #32
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00a      	beq.n	8001d0a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cf8:	23e0      	movs	r3, #224	@ 0xe0
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001d02:	4313      	orrs	r3, r2
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4a65      	ldr	r2, [pc, #404]	@ (8001ea8 <HAL_ADC_Init+0x33c>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	0019      	movs	r1, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	0f9b      	lsrs	r3, r3, #30
 8001d26:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	223c      	movs	r2, #60	@ 0x3c
 8001d38:	5c9b      	ldrb	r3, [r3, r2]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d111      	bne.n	8001d62 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	0f9b      	lsrs	r3, r3, #30
 8001d44:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001d4a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001d50:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001d56:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	4a50      	ldr	r2, [pc, #320]	@ (8001eac <HAL_ADC_Init+0x340>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	23c0      	movs	r3, #192	@ 0xc0
 8001d7e:	061b      	lsls	r3, r3, #24
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d018      	beq.n	8001db6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001d88:	2380      	movs	r3, #128	@ 0x80
 8001d8a:	05db      	lsls	r3, r3, #23
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d012      	beq.n	8001db6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001d94:	2380      	movs	r3, #128	@ 0x80
 8001d96:	061b      	lsls	r3, r3, #24
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d00c      	beq.n	8001db6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001d9c:	4b44      	ldr	r3, [pc, #272]	@ (8001eb0 <HAL_ADC_Init+0x344>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a44      	ldr	r2, [pc, #272]	@ (8001eb4 <HAL_ADC_Init+0x348>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	0019      	movs	r1, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	23f0      	movs	r3, #240	@ 0xf0
 8001dac:	039b      	lsls	r3, r3, #14
 8001dae:	401a      	ands	r2, r3
 8001db0:	4b3f      	ldr	r3, [pc, #252]	@ (8001eb0 <HAL_ADC_Init+0x344>)
 8001db2:	430a      	orrs	r2, r1
 8001db4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dbe:	001a      	movs	r2, r3
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	f7ff fdf6 	bl	80019b2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dce:	493a      	ldr	r1, [pc, #232]	@ (8001eb8 <HAL_ADC_Init+0x34c>)
 8001dd0:	001a      	movs	r2, r3
 8001dd2:	f7ff fdee 	bl	80019b2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d109      	bne.n	8001df2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2110      	movs	r1, #16
 8001dea:	4249      	negs	r1, r1
 8001dec:	430a      	orrs	r2, r1
 8001dee:	629a      	str	r2, [r3, #40]	@ 0x28
 8001df0:	e018      	b.n	8001e24 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691a      	ldr	r2, [r3, #16]
 8001df6:	2380      	movs	r3, #128	@ 0x80
 8001df8:	039b      	lsls	r3, r3, #14
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d112      	bne.n	8001e24 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	221c      	movs	r2, #28
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2210      	movs	r2, #16
 8001e12:	4252      	negs	r2, r2
 8001e14:	409a      	lsls	r2, r3
 8001e16:	0011      	movs	r1, r2
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2100      	movs	r1, #0
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f7ff fdde 	bl	80019ec <LL_ADC_GetSamplingTimeCommonChannels>
 8001e30:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d10b      	bne.n	8001e52 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e44:	2203      	movs	r2, #3
 8001e46:	4393      	bics	r3, r2
 8001e48:	2201      	movs	r2, #1
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001e50:	e01c      	b.n	8001e8c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e56:	2212      	movs	r2, #18
 8001e58:	4393      	bics	r3, r2
 8001e5a:	2210      	movs	r2, #16
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e66:	2201      	movs	r2, #1
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001e6e:	231f      	movs	r3, #31
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001e76:	e009      	b.n	8001e8c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7c:	2210      	movs	r2, #16
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e84:	231f      	movs	r3, #31
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001e8c:	231f      	movs	r3, #31
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	781b      	ldrb	r3, [r3, #0]
}
 8001e92:	0018      	movs	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b008      	add	sp, #32
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			@ (mov r8, r8)
 8001e9c:	20000044 	.word	0x20000044
 8001ea0:	00030d40 	.word	0x00030d40
 8001ea4:	fffffefd 	.word	0xfffffefd
 8001ea8:	ffde0201 	.word	0xffde0201
 8001eac:	1ffffc02 	.word	0x1ffffc02
 8001eb0:	40012708 	.word	0x40012708
 8001eb4:	ffc3ffff 	.word	0xffc3ffff
 8001eb8:	07ffff04 	.word	0x07ffff04

08001ebc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec6:	2317      	movs	r3, #23
 8001ec8:	18fb      	adds	r3, r7, r3
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2254      	movs	r2, #84	@ 0x54
 8001ed6:	5c9b      	ldrb	r3, [r3, r2]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x24>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e1c0      	b.n	8002262 <HAL_ADC_ConfigChannel+0x3a6>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2254      	movs	r2, #84	@ 0x54
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f7ff fe2c 	bl	8001b4a <LL_ADC_REG_IsConversionOngoing>
 8001ef2:	1e03      	subs	r3, r0, #0
 8001ef4:	d000      	beq.n	8001ef8 <HAL_ADC_ConfigChannel+0x3c>
 8001ef6:	e1a3      	b.n	8002240 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d100      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x46>
 8001f00:	e143      	b.n	800218a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	2380      	movs	r3, #128	@ 0x80
 8001f08:	061b      	lsls	r3, r3, #24
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d004      	beq.n	8001f18 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f12:	4ac1      	ldr	r2, [pc, #772]	@ (8002218 <HAL_ADC_ConfigChannel+0x35c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d108      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	0019      	movs	r1, r3
 8001f22:	0010      	movs	r0, r2
 8001f24:	f7ff fd99 	bl	8001a5a <LL_ADC_REG_SetSequencerChAdd>
 8001f28:	e0c9      	b.n	80020be <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	211f      	movs	r1, #31
 8001f34:	400b      	ands	r3, r1
 8001f36:	210f      	movs	r1, #15
 8001f38:	4099      	lsls	r1, r3
 8001f3a:	000b      	movs	r3, r1
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4013      	ands	r3, r2
 8001f40:	0019      	movs	r1, r3
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	035b      	lsls	r3, r3, #13
 8001f48:	0b5b      	lsrs	r3, r3, #13
 8001f4a:	d105      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x9c>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0e9b      	lsrs	r3, r3, #26
 8001f52:	221f      	movs	r2, #31
 8001f54:	4013      	ands	r3, r2
 8001f56:	e098      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d000      	beq.n	8001f64 <HAL_ADC_ConfigChannel+0xa8>
 8001f62:	e091      	b.n	8002088 <HAL_ADC_ConfigChannel+0x1cc>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d000      	beq.n	8001f70 <HAL_ADC_ConfigChannel+0xb4>
 8001f6e:	e089      	b.n	8002084 <HAL_ADC_ConfigChannel+0x1c8>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2204      	movs	r2, #4
 8001f76:	4013      	ands	r3, r2
 8001f78:	d000      	beq.n	8001f7c <HAL_ADC_ConfigChannel+0xc0>
 8001f7a:	e081      	b.n	8002080 <HAL_ADC_ConfigChannel+0x1c4>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2208      	movs	r2, #8
 8001f82:	4013      	ands	r3, r2
 8001f84:	d000      	beq.n	8001f88 <HAL_ADC_ConfigChannel+0xcc>
 8001f86:	e079      	b.n	800207c <HAL_ADC_ConfigChannel+0x1c0>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d000      	beq.n	8001f94 <HAL_ADC_ConfigChannel+0xd8>
 8001f92:	e071      	b.n	8002078 <HAL_ADC_ConfigChannel+0x1bc>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d000      	beq.n	8001fa0 <HAL_ADC_ConfigChannel+0xe4>
 8001f9e:	e069      	b.n	8002074 <HAL_ADC_ConfigChannel+0x1b8>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2240      	movs	r2, #64	@ 0x40
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d000      	beq.n	8001fac <HAL_ADC_ConfigChannel+0xf0>
 8001faa:	e061      	b.n	8002070 <HAL_ADC_ConfigChannel+0x1b4>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2280      	movs	r2, #128	@ 0x80
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d000      	beq.n	8001fb8 <HAL_ADC_ConfigChannel+0xfc>
 8001fb6:	e059      	b.n	800206c <HAL_ADC_ConfigChannel+0x1b0>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	@ 0x80
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d151      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x1ac>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	2380      	movs	r3, #128	@ 0x80
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d149      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x1a8>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2380      	movs	r3, #128	@ 0x80
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d141      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x1a4>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	2380      	movs	r3, #128	@ 0x80
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d139      	bne.n	800205c <HAL_ADC_ConfigChannel+0x1a0>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	2380      	movs	r3, #128	@ 0x80
 8001fee:	015b      	lsls	r3, r3, #5
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d131      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x19c>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	2380      	movs	r3, #128	@ 0x80
 8001ffa:	019b      	lsls	r3, r3, #6
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d129      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x198>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2380      	movs	r3, #128	@ 0x80
 8002006:	01db      	lsls	r3, r3, #7
 8002008:	4013      	ands	r3, r2
 800200a:	d121      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x194>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2380      	movs	r3, #128	@ 0x80
 8002012:	021b      	lsls	r3, r3, #8
 8002014:	4013      	ands	r3, r2
 8002016:	d119      	bne.n	800204c <HAL_ADC_ConfigChannel+0x190>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	@ 0x80
 800201e:	025b      	lsls	r3, r3, #9
 8002020:	4013      	ands	r3, r2
 8002022:	d111      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x18c>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2380      	movs	r3, #128	@ 0x80
 800202a:	029b      	lsls	r3, r3, #10
 800202c:	4013      	ands	r3, r2
 800202e:	d109      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x188>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	2380      	movs	r3, #128	@ 0x80
 8002036:	02db      	lsls	r3, r3, #11
 8002038:	4013      	ands	r3, r2
 800203a:	d001      	beq.n	8002040 <HAL_ADC_ConfigChannel+0x184>
 800203c:	2312      	movs	r3, #18
 800203e:	e024      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002040:	2300      	movs	r3, #0
 8002042:	e022      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002044:	2311      	movs	r3, #17
 8002046:	e020      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002048:	2310      	movs	r3, #16
 800204a:	e01e      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 800204c:	230f      	movs	r3, #15
 800204e:	e01c      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002050:	230e      	movs	r3, #14
 8002052:	e01a      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002054:	230d      	movs	r3, #13
 8002056:	e018      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002058:	230c      	movs	r3, #12
 800205a:	e016      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 800205c:	230b      	movs	r3, #11
 800205e:	e014      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002060:	230a      	movs	r3, #10
 8002062:	e012      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002064:	2309      	movs	r3, #9
 8002066:	e010      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002068:	2308      	movs	r3, #8
 800206a:	e00e      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 800206c:	2307      	movs	r3, #7
 800206e:	e00c      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002070:	2306      	movs	r3, #6
 8002072:	e00a      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002074:	2305      	movs	r3, #5
 8002076:	e008      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002078:	2304      	movs	r3, #4
 800207a:	e006      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 800207c:	2303      	movs	r3, #3
 800207e:	e004      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002080:	2302      	movs	r3, #2
 8002082:	e002      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002088:	2300      	movs	r3, #0
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	6852      	ldr	r2, [r2, #4]
 800208e:	201f      	movs	r0, #31
 8002090:	4002      	ands	r2, r0
 8002092:	4093      	lsls	r3, r2
 8002094:	000a      	movs	r2, r1
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d808      	bhi.n	80020be <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	001a      	movs	r2, r3
 80020ba:	f7ff fcae 	bl	8001a1a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6819      	ldr	r1, [r3, #0]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	001a      	movs	r2, r3
 80020cc:	f7ff fce8 	bl	8001aa0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db00      	blt.n	80020da <HAL_ADC_ConfigChannel+0x21e>
 80020d8:	e0bc      	b.n	8002254 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020da:	4b50      	ldr	r3, [pc, #320]	@ (800221c <HAL_ADC_ConfigChannel+0x360>)
 80020dc:	0018      	movs	r0, r3
 80020de:	f7ff fc5b 	bl	8001998 <LL_ADC_GetCommonPathInternalCh>
 80020e2:	0003      	movs	r3, r0
 80020e4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a4d      	ldr	r2, [pc, #308]	@ (8002220 <HAL_ADC_ConfigChannel+0x364>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d122      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	2380      	movs	r3, #128	@ 0x80
 80020f4:	041b      	lsls	r3, r3, #16
 80020f6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020f8:	d11d      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2280      	movs	r2, #128	@ 0x80
 80020fe:	0412      	lsls	r2, r2, #16
 8002100:	4313      	orrs	r3, r2
 8002102:	4a46      	ldr	r2, [pc, #280]	@ (800221c <HAL_ADC_ConfigChannel+0x360>)
 8002104:	0019      	movs	r1, r3
 8002106:	0010      	movs	r0, r2
 8002108:	f7ff fc32 	bl	8001970 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800210c:	4b45      	ldr	r3, [pc, #276]	@ (8002224 <HAL_ADC_ConfigChannel+0x368>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4945      	ldr	r1, [pc, #276]	@ (8002228 <HAL_ADC_ConfigChannel+0x36c>)
 8002112:	0018      	movs	r0, r3
 8002114:	f7fd fff6 	bl	8000104 <__udivsi3>
 8002118:	0003      	movs	r3, r0
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	0013      	movs	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	189b      	adds	r3, r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002126:	e002      	b.n	800212e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3b01      	subs	r3, #1
 800212c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f9      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002134:	e08e      	b.n	8002254 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a3c      	ldr	r2, [pc, #240]	@ (800222c <HAL_ADC_ConfigChannel+0x370>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d10e      	bne.n	800215e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	2380      	movs	r3, #128	@ 0x80
 8002144:	045b      	lsls	r3, r3, #17
 8002146:	4013      	ands	r3, r2
 8002148:	d109      	bne.n	800215e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2280      	movs	r2, #128	@ 0x80
 800214e:	0452      	lsls	r2, r2, #17
 8002150:	4313      	orrs	r3, r2
 8002152:	4a32      	ldr	r2, [pc, #200]	@ (800221c <HAL_ADC_ConfigChannel+0x360>)
 8002154:	0019      	movs	r1, r3
 8002156:	0010      	movs	r0, r2
 8002158:	f7ff fc0a 	bl	8001970 <LL_ADC_SetCommonPathInternalCh>
 800215c:	e07a      	b.n	8002254 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a33      	ldr	r2, [pc, #204]	@ (8002230 <HAL_ADC_ConfigChannel+0x374>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d000      	beq.n	800216a <HAL_ADC_ConfigChannel+0x2ae>
 8002168:	e074      	b.n	8002254 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	2380      	movs	r3, #128	@ 0x80
 800216e:	03db      	lsls	r3, r3, #15
 8002170:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002172:	d000      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x2ba>
 8002174:	e06e      	b.n	8002254 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2280      	movs	r2, #128	@ 0x80
 800217a:	03d2      	lsls	r2, r2, #15
 800217c:	4313      	orrs	r3, r2
 800217e:	4a27      	ldr	r2, [pc, #156]	@ (800221c <HAL_ADC_ConfigChannel+0x360>)
 8002180:	0019      	movs	r1, r3
 8002182:	0010      	movs	r0, r2
 8002184:	f7ff fbf4 	bl	8001970 <LL_ADC_SetCommonPathInternalCh>
 8002188:	e064      	b.n	8002254 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	2380      	movs	r3, #128	@ 0x80
 8002190:	061b      	lsls	r3, r3, #24
 8002192:	429a      	cmp	r2, r3
 8002194:	d004      	beq.n	80021a0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800219a:	4a1f      	ldr	r2, [pc, #124]	@ (8002218 <HAL_ADC_ConfigChannel+0x35c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d107      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	0019      	movs	r1, r3
 80021aa:	0010      	movs	r0, r2
 80021ac:	f7ff fc66 	bl	8001a7c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	da4d      	bge.n	8002254 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021b8:	4b18      	ldr	r3, [pc, #96]	@ (800221c <HAL_ADC_ConfigChannel+0x360>)
 80021ba:	0018      	movs	r0, r3
 80021bc:	f7ff fbec 	bl	8001998 <LL_ADC_GetCommonPathInternalCh>
 80021c0:	0003      	movs	r3, r0
 80021c2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a15      	ldr	r2, [pc, #84]	@ (8002220 <HAL_ADC_ConfigChannel+0x364>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d108      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4a18      	ldr	r2, [pc, #96]	@ (8002234 <HAL_ADC_ConfigChannel+0x378>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	4a11      	ldr	r2, [pc, #68]	@ (800221c <HAL_ADC_ConfigChannel+0x360>)
 80021d6:	0019      	movs	r1, r3
 80021d8:	0010      	movs	r0, r2
 80021da:	f7ff fbc9 	bl	8001970 <LL_ADC_SetCommonPathInternalCh>
 80021de:	e039      	b.n	8002254 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a11      	ldr	r2, [pc, #68]	@ (800222c <HAL_ADC_ConfigChannel+0x370>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d108      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4a12      	ldr	r2, [pc, #72]	@ (8002238 <HAL_ADC_ConfigChannel+0x37c>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	4a0a      	ldr	r2, [pc, #40]	@ (800221c <HAL_ADC_ConfigChannel+0x360>)
 80021f2:	0019      	movs	r1, r3
 80021f4:	0010      	movs	r0, r2
 80021f6:	f7ff fbbb 	bl	8001970 <LL_ADC_SetCommonPathInternalCh>
 80021fa:	e02b      	b.n	8002254 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0b      	ldr	r2, [pc, #44]	@ (8002230 <HAL_ADC_ConfigChannel+0x374>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d126      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4a0c      	ldr	r2, [pc, #48]	@ (800223c <HAL_ADC_ConfigChannel+0x380>)
 800220a:	4013      	ands	r3, r2
 800220c:	4a03      	ldr	r2, [pc, #12]	@ (800221c <HAL_ADC_ConfigChannel+0x360>)
 800220e:	0019      	movs	r1, r3
 8002210:	0010      	movs	r0, r2
 8002212:	f7ff fbad 	bl	8001970 <LL_ADC_SetCommonPathInternalCh>
 8002216:	e01d      	b.n	8002254 <HAL_ADC_ConfigChannel+0x398>
 8002218:	80000004 	.word	0x80000004
 800221c:	40012708 	.word	0x40012708
 8002220:	b0001000 	.word	0xb0001000
 8002224:	20000044 	.word	0x20000044
 8002228:	00030d40 	.word	0x00030d40
 800222c:	b8004000 	.word	0xb8004000
 8002230:	b4002000 	.word	0xb4002000
 8002234:	ff7fffff 	.word	0xff7fffff
 8002238:	feffffff 	.word	0xfeffffff
 800223c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002244:	2220      	movs	r2, #32
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800224c:	2317      	movs	r3, #23
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2254      	movs	r2, #84	@ 0x54
 8002258:	2100      	movs	r1, #0
 800225a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800225c:	2317      	movs	r3, #23
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	781b      	ldrb	r3, [r3, #0]
}
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	b006      	add	sp, #24
 8002268:	bd80      	pop	{r7, pc}
 800226a:	46c0      	nop			@ (mov r8, r8)

0800226c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	0002      	movs	r2, r0
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002278:	1dfb      	adds	r3, r7, #7
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b7f      	cmp	r3, #127	@ 0x7f
 800227e:	d809      	bhi.n	8002294 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002280:	1dfb      	adds	r3, r7, #7
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	001a      	movs	r2, r3
 8002286:	231f      	movs	r3, #31
 8002288:	401a      	ands	r2, r3
 800228a:	4b04      	ldr	r3, [pc, #16]	@ (800229c <__NVIC_EnableIRQ+0x30>)
 800228c:	2101      	movs	r1, #1
 800228e:	4091      	lsls	r1, r2
 8002290:	000a      	movs	r2, r1
 8002292:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002294:	46c0      	nop			@ (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b002      	add	sp, #8
 800229a:	bd80      	pop	{r7, pc}
 800229c:	e000e100 	.word	0xe000e100

080022a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a0:	b590      	push	{r4, r7, lr}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	0002      	movs	r2, r0
 80022a8:	6039      	str	r1, [r7, #0]
 80022aa:	1dfb      	adds	r3, r7, #7
 80022ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022ae:	1dfb      	adds	r3, r7, #7
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80022b4:	d828      	bhi.n	8002308 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022b6:	4a2f      	ldr	r2, [pc, #188]	@ (8002374 <__NVIC_SetPriority+0xd4>)
 80022b8:	1dfb      	adds	r3, r7, #7
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	b25b      	sxtb	r3, r3
 80022be:	089b      	lsrs	r3, r3, #2
 80022c0:	33c0      	adds	r3, #192	@ 0xc0
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	589b      	ldr	r3, [r3, r2]
 80022c6:	1dfa      	adds	r2, r7, #7
 80022c8:	7812      	ldrb	r2, [r2, #0]
 80022ca:	0011      	movs	r1, r2
 80022cc:	2203      	movs	r2, #3
 80022ce:	400a      	ands	r2, r1
 80022d0:	00d2      	lsls	r2, r2, #3
 80022d2:	21ff      	movs	r1, #255	@ 0xff
 80022d4:	4091      	lsls	r1, r2
 80022d6:	000a      	movs	r2, r1
 80022d8:	43d2      	mvns	r2, r2
 80022da:	401a      	ands	r2, r3
 80022dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	019b      	lsls	r3, r3, #6
 80022e2:	22ff      	movs	r2, #255	@ 0xff
 80022e4:	401a      	ands	r2, r3
 80022e6:	1dfb      	adds	r3, r7, #7
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	0018      	movs	r0, r3
 80022ec:	2303      	movs	r3, #3
 80022ee:	4003      	ands	r3, r0
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022f4:	481f      	ldr	r0, [pc, #124]	@ (8002374 <__NVIC_SetPriority+0xd4>)
 80022f6:	1dfb      	adds	r3, r7, #7
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	b25b      	sxtb	r3, r3
 80022fc:	089b      	lsrs	r3, r3, #2
 80022fe:	430a      	orrs	r2, r1
 8002300:	33c0      	adds	r3, #192	@ 0xc0
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002306:	e031      	b.n	800236c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002308:	4a1b      	ldr	r2, [pc, #108]	@ (8002378 <__NVIC_SetPriority+0xd8>)
 800230a:	1dfb      	adds	r3, r7, #7
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	0019      	movs	r1, r3
 8002310:	230f      	movs	r3, #15
 8002312:	400b      	ands	r3, r1
 8002314:	3b08      	subs	r3, #8
 8002316:	089b      	lsrs	r3, r3, #2
 8002318:	3306      	adds	r3, #6
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	18d3      	adds	r3, r2, r3
 800231e:	3304      	adds	r3, #4
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	1dfa      	adds	r2, r7, #7
 8002324:	7812      	ldrb	r2, [r2, #0]
 8002326:	0011      	movs	r1, r2
 8002328:	2203      	movs	r2, #3
 800232a:	400a      	ands	r2, r1
 800232c:	00d2      	lsls	r2, r2, #3
 800232e:	21ff      	movs	r1, #255	@ 0xff
 8002330:	4091      	lsls	r1, r2
 8002332:	000a      	movs	r2, r1
 8002334:	43d2      	mvns	r2, r2
 8002336:	401a      	ands	r2, r3
 8002338:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	019b      	lsls	r3, r3, #6
 800233e:	22ff      	movs	r2, #255	@ 0xff
 8002340:	401a      	ands	r2, r3
 8002342:	1dfb      	adds	r3, r7, #7
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	0018      	movs	r0, r3
 8002348:	2303      	movs	r3, #3
 800234a:	4003      	ands	r3, r0
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002350:	4809      	ldr	r0, [pc, #36]	@ (8002378 <__NVIC_SetPriority+0xd8>)
 8002352:	1dfb      	adds	r3, r7, #7
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	001c      	movs	r4, r3
 8002358:	230f      	movs	r3, #15
 800235a:	4023      	ands	r3, r4
 800235c:	3b08      	subs	r3, #8
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	430a      	orrs	r2, r1
 8002362:	3306      	adds	r3, #6
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	18c3      	adds	r3, r0, r3
 8002368:	3304      	adds	r3, #4
 800236a:	601a      	str	r2, [r3, #0]
}
 800236c:	46c0      	nop			@ (mov r8, r8)
 800236e:	46bd      	mov	sp, r7
 8002370:	b003      	add	sp, #12
 8002372:	bd90      	pop	{r4, r7, pc}
 8002374:	e000e100 	.word	0xe000e100
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	1e5a      	subs	r2, r3, #1
 8002388:	2380      	movs	r3, #128	@ 0x80
 800238a:	045b      	lsls	r3, r3, #17
 800238c:	429a      	cmp	r2, r3
 800238e:	d301      	bcc.n	8002394 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002390:	2301      	movs	r3, #1
 8002392:	e010      	b.n	80023b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002394:	4b0a      	ldr	r3, [pc, #40]	@ (80023c0 <SysTick_Config+0x44>)
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	3a01      	subs	r2, #1
 800239a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239c:	2301      	movs	r3, #1
 800239e:	425b      	negs	r3, r3
 80023a0:	2103      	movs	r1, #3
 80023a2:	0018      	movs	r0, r3
 80023a4:	f7ff ff7c 	bl	80022a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a8:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <SysTick_Config+0x44>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ae:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <SysTick_Config+0x44>)
 80023b0:	2207      	movs	r2, #7
 80023b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	0018      	movs	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b002      	add	sp, #8
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	46c0      	nop			@ (mov r8, r8)
 80023c0:	e000e010 	.word	0xe000e010

080023c4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	210f      	movs	r1, #15
 80023d0:	187b      	adds	r3, r7, r1
 80023d2:	1c02      	adds	r2, r0, #0
 80023d4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	187b      	adds	r3, r7, r1
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	b25b      	sxtb	r3, r3
 80023de:	0011      	movs	r1, r2
 80023e0:	0018      	movs	r0, r3
 80023e2:	f7ff ff5d 	bl	80022a0 <__NVIC_SetPriority>
}
 80023e6:	46c0      	nop			@ (mov r8, r8)
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b004      	add	sp, #16
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	0002      	movs	r2, r0
 80023f6:	1dfb      	adds	r3, r7, #7
 80023f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023fa:	1dfb      	adds	r3, r7, #7
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	b25b      	sxtb	r3, r3
 8002400:	0018      	movs	r0, r3
 8002402:	f7ff ff33 	bl	800226c <__NVIC_EnableIRQ>
}
 8002406:	46c0      	nop			@ (mov r8, r8)
 8002408:	46bd      	mov	sp, r7
 800240a:	b002      	add	sp, #8
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	0018      	movs	r0, r3
 800241a:	f7ff ffaf 	bl	800237c <SysTick_Config>
 800241e:	0003      	movs	r3, r0
}
 8002420:	0018      	movs	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	b002      	add	sp, #8
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002436:	e147      	b.n	80026c8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2101      	movs	r1, #1
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4091      	lsls	r1, r2
 8002442:	000a      	movs	r2, r1
 8002444:	4013      	ands	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d100      	bne.n	8002450 <HAL_GPIO_Init+0x28>
 800244e:	e138      	b.n	80026c2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2203      	movs	r2, #3
 8002456:	4013      	ands	r3, r2
 8002458:	2b01      	cmp	r3, #1
 800245a:	d005      	beq.n	8002468 <HAL_GPIO_Init+0x40>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2203      	movs	r2, #3
 8002462:	4013      	ands	r3, r2
 8002464:	2b02      	cmp	r3, #2
 8002466:	d130      	bne.n	80024ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	2203      	movs	r2, #3
 8002474:	409a      	lsls	r2, r3
 8002476:	0013      	movs	r3, r2
 8002478:	43da      	mvns	r2, r3
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	409a      	lsls	r2, r3
 800248a:	0013      	movs	r3, r2
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800249e:	2201      	movs	r2, #1
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	409a      	lsls	r2, r3
 80024a4:	0013      	movs	r3, r2
 80024a6:	43da      	mvns	r2, r3
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	2201      	movs	r2, #1
 80024b6:	401a      	ands	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	409a      	lsls	r2, r3
 80024bc:	0013      	movs	r3, r2
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2203      	movs	r2, #3
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d017      	beq.n	8002506 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	2203      	movs	r2, #3
 80024e2:	409a      	lsls	r2, r3
 80024e4:	0013      	movs	r3, r2
 80024e6:	43da      	mvns	r2, r3
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	409a      	lsls	r2, r3
 80024f8:	0013      	movs	r3, r2
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2203      	movs	r2, #3
 800250c:	4013      	ands	r3, r2
 800250e:	2b02      	cmp	r3, #2
 8002510:	d123      	bne.n	800255a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	08da      	lsrs	r2, r3, #3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3208      	adds	r2, #8
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	58d3      	ldr	r3, [r2, r3]
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2207      	movs	r2, #7
 8002524:	4013      	ands	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	220f      	movs	r2, #15
 800252a:	409a      	lsls	r2, r3
 800252c:	0013      	movs	r3, r2
 800252e:	43da      	mvns	r2, r3
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2107      	movs	r1, #7
 800253e:	400b      	ands	r3, r1
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	409a      	lsls	r2, r3
 8002544:	0013      	movs	r3, r2
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	08da      	lsrs	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3208      	adds	r2, #8
 8002554:	0092      	lsls	r2, r2, #2
 8002556:	6939      	ldr	r1, [r7, #16]
 8002558:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	409a      	lsls	r2, r3
 8002568:	0013      	movs	r3, r2
 800256a:	43da      	mvns	r2, r3
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2203      	movs	r2, #3
 8002578:	401a      	ands	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	409a      	lsls	r2, r3
 8002580:	0013      	movs	r3, r2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	23c0      	movs	r3, #192	@ 0xc0
 8002594:	029b      	lsls	r3, r3, #10
 8002596:	4013      	ands	r3, r2
 8002598:	d100      	bne.n	800259c <HAL_GPIO_Init+0x174>
 800259a:	e092      	b.n	80026c2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800259c:	4a50      	ldr	r2, [pc, #320]	@ (80026e0 <HAL_GPIO_Init+0x2b8>)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	089b      	lsrs	r3, r3, #2
 80025a2:	3318      	adds	r3, #24
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	589b      	ldr	r3, [r3, r2]
 80025a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2203      	movs	r2, #3
 80025ae:	4013      	ands	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	220f      	movs	r2, #15
 80025b4:	409a      	lsls	r2, r3
 80025b6:	0013      	movs	r3, r2
 80025b8:	43da      	mvns	r2, r3
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	23a0      	movs	r3, #160	@ 0xa0
 80025c4:	05db      	lsls	r3, r3, #23
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d013      	beq.n	80025f2 <HAL_GPIO_Init+0x1ca>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a45      	ldr	r2, [pc, #276]	@ (80026e4 <HAL_GPIO_Init+0x2bc>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00d      	beq.n	80025ee <HAL_GPIO_Init+0x1c6>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a44      	ldr	r2, [pc, #272]	@ (80026e8 <HAL_GPIO_Init+0x2c0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d007      	beq.n	80025ea <HAL_GPIO_Init+0x1c2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a43      	ldr	r2, [pc, #268]	@ (80026ec <HAL_GPIO_Init+0x2c4>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d101      	bne.n	80025e6 <HAL_GPIO_Init+0x1be>
 80025e2:	2303      	movs	r3, #3
 80025e4:	e006      	b.n	80025f4 <HAL_GPIO_Init+0x1cc>
 80025e6:	2305      	movs	r3, #5
 80025e8:	e004      	b.n	80025f4 <HAL_GPIO_Init+0x1cc>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e002      	b.n	80025f4 <HAL_GPIO_Init+0x1cc>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <HAL_GPIO_Init+0x1cc>
 80025f2:	2300      	movs	r3, #0
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	2103      	movs	r1, #3
 80025f8:	400a      	ands	r2, r1
 80025fa:	00d2      	lsls	r2, r2, #3
 80025fc:	4093      	lsls	r3, r2
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002604:	4936      	ldr	r1, [pc, #216]	@ (80026e0 <HAL_GPIO_Init+0x2b8>)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	3318      	adds	r3, #24
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002612:	4b33      	ldr	r3, [pc, #204]	@ (80026e0 <HAL_GPIO_Init+0x2b8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	43da      	mvns	r2, r3
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	2380      	movs	r3, #128	@ 0x80
 8002628:	035b      	lsls	r3, r3, #13
 800262a:	4013      	ands	r3, r2
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002636:	4b2a      	ldr	r3, [pc, #168]	@ (80026e0 <HAL_GPIO_Init+0x2b8>)
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800263c:	4b28      	ldr	r3, [pc, #160]	@ (80026e0 <HAL_GPIO_Init+0x2b8>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	43da      	mvns	r2, r3
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	2380      	movs	r3, #128	@ 0x80
 8002652:	039b      	lsls	r3, r3, #14
 8002654:	4013      	ands	r3, r2
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002660:	4b1f      	ldr	r3, [pc, #124]	@ (80026e0 <HAL_GPIO_Init+0x2b8>)
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002666:	4a1e      	ldr	r2, [pc, #120]	@ (80026e0 <HAL_GPIO_Init+0x2b8>)
 8002668:	2384      	movs	r3, #132	@ 0x84
 800266a:	58d3      	ldr	r3, [r2, r3]
 800266c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	43da      	mvns	r2, r3
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	2380      	movs	r3, #128	@ 0x80
 800267e:	029b      	lsls	r3, r3, #10
 8002680:	4013      	ands	r3, r2
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800268c:	4914      	ldr	r1, [pc, #80]	@ (80026e0 <HAL_GPIO_Init+0x2b8>)
 800268e:	2284      	movs	r2, #132	@ 0x84
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002694:	4a12      	ldr	r2, [pc, #72]	@ (80026e0 <HAL_GPIO_Init+0x2b8>)
 8002696:	2380      	movs	r3, #128	@ 0x80
 8002698:	58d3      	ldr	r3, [r2, r3]
 800269a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	43da      	mvns	r2, r3
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4013      	ands	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	2380      	movs	r3, #128	@ 0x80
 80026ac:	025b      	lsls	r3, r3, #9
 80026ae:	4013      	ands	r3, r2
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026ba:	4909      	ldr	r1, [pc, #36]	@ (80026e0 <HAL_GPIO_Init+0x2b8>)
 80026bc:	2280      	movs	r2, #128	@ 0x80
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	3301      	adds	r3, #1
 80026c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	40da      	lsrs	r2, r3
 80026d0:	1e13      	subs	r3, r2, #0
 80026d2:	d000      	beq.n	80026d6 <HAL_GPIO_Init+0x2ae>
 80026d4:	e6b0      	b.n	8002438 <HAL_GPIO_Init+0x10>
  }
}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	46c0      	nop			@ (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b006      	add	sp, #24
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021800 	.word	0x40021800
 80026e4:	50000400 	.word	0x50000400
 80026e8:	50000800 	.word	0x50000800
 80026ec:	50000c00 	.word	0x50000c00

080026f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	000a      	movs	r2, r1
 80026fa:	1cbb      	adds	r3, r7, #2
 80026fc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	1cba      	adds	r2, r7, #2
 8002704:	8812      	ldrh	r2, [r2, #0]
 8002706:	4013      	ands	r3, r2
 8002708:	d004      	beq.n	8002714 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800270a:	230f      	movs	r3, #15
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	2201      	movs	r2, #1
 8002710:	701a      	strb	r2, [r3, #0]
 8002712:	e003      	b.n	800271c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002714:	230f      	movs	r3, #15
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800271c:	230f      	movs	r3, #15
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	781b      	ldrb	r3, [r3, #0]
}
 8002722:	0018      	movs	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	b004      	add	sp, #16
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	0008      	movs	r0, r1
 8002734:	0011      	movs	r1, r2
 8002736:	1cbb      	adds	r3, r7, #2
 8002738:	1c02      	adds	r2, r0, #0
 800273a:	801a      	strh	r2, [r3, #0]
 800273c:	1c7b      	adds	r3, r7, #1
 800273e:	1c0a      	adds	r2, r1, #0
 8002740:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002742:	1c7b      	adds	r3, r7, #1
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d004      	beq.n	8002754 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800274a:	1cbb      	adds	r3, r7, #2
 800274c:	881a      	ldrh	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002752:	e003      	b.n	800275c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002754:	1cbb      	adds	r3, r7, #2
 8002756:	881a      	ldrh	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800275c:	46c0      	nop			@ (mov r8, r8)
 800275e:	46bd      	mov	sp, r7
 8002760:	b002      	add	sp, #8
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	000a      	movs	r2, r1
 800276e:	1cbb      	adds	r3, r7, #2
 8002770:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002778:	1cbb      	adds	r3, r7, #2
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4013      	ands	r3, r2
 8002780:	041a      	lsls	r2, r3, #16
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	43db      	mvns	r3, r3
 8002786:	1cb9      	adds	r1, r7, #2
 8002788:	8809      	ldrh	r1, [r1, #0]
 800278a:	400b      	ands	r3, r1
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	619a      	str	r2, [r3, #24]
}
 8002792:	46c0      	nop			@ (mov r8, r8)
 8002794:	46bd      	mov	sp, r7
 8002796:	b004      	add	sp, #16
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	0002      	movs	r2, r0
 80027a4:	1dbb      	adds	r3, r7, #6
 80027a6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80027a8:	4b10      	ldr	r3, [pc, #64]	@ (80027ec <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	1dba      	adds	r2, r7, #6
 80027ae:	8812      	ldrh	r2, [r2, #0]
 80027b0:	4013      	ands	r3, r2
 80027b2:	d008      	beq.n	80027c6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80027b4:	4b0d      	ldr	r3, [pc, #52]	@ (80027ec <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027b6:	1dba      	adds	r2, r7, #6
 80027b8:	8812      	ldrh	r2, [r2, #0]
 80027ba:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80027bc:	1dbb      	adds	r3, r7, #6
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	0018      	movs	r0, r3
 80027c2:	f000 f815 	bl	80027f0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80027c6:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	1dba      	adds	r2, r7, #6
 80027cc:	8812      	ldrh	r2, [r2, #0]
 80027ce:	4013      	ands	r3, r2
 80027d0:	d008      	beq.n	80027e4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80027d2:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027d4:	1dba      	adds	r2, r7, #6
 80027d6:	8812      	ldrh	r2, [r2, #0]
 80027d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80027da:	1dbb      	adds	r3, r7, #6
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	0018      	movs	r0, r3
 80027e0:	f7fe f984 	bl	8000aec <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80027e4:	46c0      	nop			@ (mov r8, r8)
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b002      	add	sp, #8
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40021800 	.word	0x40021800

080027f0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	0002      	movs	r2, r0
 80027f8:	1dbb      	adds	r3, r7, #6
 80027fa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80027fc:	46c0      	nop			@ (mov r8, r8)
 80027fe:	46bd      	mov	sp, r7
 8002800:	b002      	add	sp, #8
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e08f      	b.n	8002936 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2241      	movs	r2, #65	@ 0x41
 800281a:	5c9b      	ldrb	r3, [r3, r2]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d107      	bne.n	8002832 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2240      	movs	r2, #64	@ 0x40
 8002826:	2100      	movs	r1, #0
 8002828:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	0018      	movs	r0, r3
 800282e:	f7fe fe83 	bl	8001538 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2241      	movs	r2, #65	@ 0x41
 8002836:	2124      	movs	r1, #36	@ 0x24
 8002838:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	438a      	bics	r2, r1
 8002848:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	493b      	ldr	r1, [pc, #236]	@ (8002940 <HAL_I2C_Init+0x13c>)
 8002854:	400a      	ands	r2, r1
 8002856:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4938      	ldr	r1, [pc, #224]	@ (8002944 <HAL_I2C_Init+0x140>)
 8002864:	400a      	ands	r2, r1
 8002866:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d108      	bne.n	8002882 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2180      	movs	r1, #128	@ 0x80
 800287a:	0209      	lsls	r1, r1, #8
 800287c:	430a      	orrs	r2, r1
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	e007      	b.n	8002892 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2184      	movs	r1, #132	@ 0x84
 800288c:	0209      	lsls	r1, r1, #8
 800288e:	430a      	orrs	r2, r1
 8002890:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d109      	bne.n	80028ae <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2180      	movs	r1, #128	@ 0x80
 80028a6:	0109      	lsls	r1, r1, #4
 80028a8:	430a      	orrs	r2, r1
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	e007      	b.n	80028be <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4923      	ldr	r1, [pc, #140]	@ (8002948 <HAL_I2C_Init+0x144>)
 80028ba:	400a      	ands	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4920      	ldr	r1, [pc, #128]	@ (800294c <HAL_I2C_Init+0x148>)
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	491a      	ldr	r1, [pc, #104]	@ (8002944 <HAL_I2C_Init+0x140>)
 80028da:	400a      	ands	r2, r1
 80028dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691a      	ldr	r2, [r3, #16]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69d9      	ldr	r1, [r3, #28]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1a      	ldr	r2, [r3, #32]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2101      	movs	r1, #1
 8002914:	430a      	orrs	r2, r1
 8002916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2241      	movs	r2, #65	@ 0x41
 8002922:	2120      	movs	r1, #32
 8002924:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2242      	movs	r2, #66	@ 0x42
 8002930:	2100      	movs	r1, #0
 8002932:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	0018      	movs	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	b002      	add	sp, #8
 800293c:	bd80      	pop	{r7, pc}
 800293e:	46c0      	nop			@ (mov r8, r8)
 8002940:	f0ffffff 	.word	0xf0ffffff
 8002944:	ffff7fff 	.word	0xffff7fff
 8002948:	fffff7ff 	.word	0xfffff7ff
 800294c:	02008000 	.word	0x02008000

08002950 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2241      	movs	r2, #65	@ 0x41
 800295e:	5c9b      	ldrb	r3, [r3, r2]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b20      	cmp	r3, #32
 8002964:	d138      	bne.n	80029d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2240      	movs	r2, #64	@ 0x40
 800296a:	5c9b      	ldrb	r3, [r3, r2]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002970:	2302      	movs	r3, #2
 8002972:	e032      	b.n	80029da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2240      	movs	r2, #64	@ 0x40
 8002978:	2101      	movs	r1, #1
 800297a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2241      	movs	r2, #65	@ 0x41
 8002980:	2124      	movs	r1, #36	@ 0x24
 8002982:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2101      	movs	r1, #1
 8002990:	438a      	bics	r2, r1
 8002992:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4911      	ldr	r1, [pc, #68]	@ (80029e4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80029a0:	400a      	ands	r2, r1
 80029a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6819      	ldr	r1, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2101      	movs	r1, #1
 80029c0:	430a      	orrs	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2241      	movs	r2, #65	@ 0x41
 80029c8:	2120      	movs	r1, #32
 80029ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2240      	movs	r2, #64	@ 0x40
 80029d0:	2100      	movs	r1, #0
 80029d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	e000      	b.n	80029da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029d8:	2302      	movs	r3, #2
  }
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b002      	add	sp, #8
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	ffffefff 	.word	0xffffefff

080029e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2241      	movs	r2, #65	@ 0x41
 80029f6:	5c9b      	ldrb	r3, [r3, r2]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b20      	cmp	r3, #32
 80029fc:	d139      	bne.n	8002a72 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2240      	movs	r2, #64	@ 0x40
 8002a02:	5c9b      	ldrb	r3, [r3, r2]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e033      	b.n	8002a74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2240      	movs	r2, #64	@ 0x40
 8002a10:	2101      	movs	r1, #1
 8002a12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2241      	movs	r2, #65	@ 0x41
 8002a18:	2124      	movs	r1, #36	@ 0x24
 8002a1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2101      	movs	r1, #1
 8002a28:	438a      	bics	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4a11      	ldr	r2, [pc, #68]	@ (8002a7c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2101      	movs	r1, #1
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2241      	movs	r2, #65	@ 0x41
 8002a62:	2120      	movs	r1, #32
 8002a64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2240      	movs	r2, #64	@ 0x40
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e000      	b.n	8002a74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a72:	2302      	movs	r3, #2
  }
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b004      	add	sp, #16
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	fffff0ff 	.word	0xfffff0ff

08002a80 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a84:	4b04      	ldr	r3, [pc, #16]	@ (8002a98 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4b03      	ldr	r3, [pc, #12]	@ (8002a98 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002a8a:	2180      	movs	r1, #128	@ 0x80
 8002a8c:	0049      	lsls	r1, r1, #1
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]
}
 8002a92:	46c0      	nop			@ (mov r8, r8)
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40007000 	.word	0x40007000

08002a9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002aa4:	4b19      	ldr	r3, [pc, #100]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a19      	ldr	r2, [pc, #100]	@ (8002b10 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	0019      	movs	r1, r3
 8002aae:	4b17      	ldr	r3, [pc, #92]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	2380      	movs	r3, #128	@ 0x80
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d11f      	bne.n	8002b00 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002ac0:	4b14      	ldr	r3, [pc, #80]	@ (8002b14 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	0013      	movs	r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	189b      	adds	r3, r3, r2
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4912      	ldr	r1, [pc, #72]	@ (8002b18 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7fd fb18 	bl	8000104 <__udivsi3>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ada:	e008      	b.n	8002aee <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	e001      	b.n	8002aee <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e009      	b.n	8002b02 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aee:	4b07      	ldr	r3, [pc, #28]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002af0:	695a      	ldr	r2, [r3, #20]
 8002af2:	2380      	movs	r3, #128	@ 0x80
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	401a      	ands	r2, r3
 8002af8:	2380      	movs	r3, #128	@ 0x80
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d0ed      	beq.n	8002adc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b004      	add	sp, #16
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	46c0      	nop			@ (mov r8, r8)
 8002b0c:	40007000 	.word	0x40007000
 8002b10:	fffff9ff 	.word	0xfffff9ff
 8002b14:	20000044 	.word	0x20000044
 8002b18:	000f4240 	.word	0x000f4240

08002b1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e2fe      	b.n	800312c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2201      	movs	r2, #1
 8002b34:	4013      	ands	r3, r2
 8002b36:	d100      	bne.n	8002b3a <HAL_RCC_OscConfig+0x1e>
 8002b38:	e07c      	b.n	8002c34 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b3a:	4bc3      	ldr	r3, [pc, #780]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2238      	movs	r2, #56	@ 0x38
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b44:	4bc0      	ldr	r3, [pc, #768]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	2203      	movs	r2, #3
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	2b10      	cmp	r3, #16
 8002b52:	d102      	bne.n	8002b5a <HAL_RCC_OscConfig+0x3e>
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d002      	beq.n	8002b60 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d10b      	bne.n	8002b78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b60:	4bb9      	ldr	r3, [pc, #740]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	2380      	movs	r3, #128	@ 0x80
 8002b66:	029b      	lsls	r3, r3, #10
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d062      	beq.n	8002c32 <HAL_RCC_OscConfig+0x116>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d15e      	bne.n	8002c32 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e2d9      	b.n	800312c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	2380      	movs	r3, #128	@ 0x80
 8002b7e:	025b      	lsls	r3, r3, #9
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d107      	bne.n	8002b94 <HAL_RCC_OscConfig+0x78>
 8002b84:	4bb0      	ldr	r3, [pc, #704]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4baf      	ldr	r3, [pc, #700]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002b8a:	2180      	movs	r1, #128	@ 0x80
 8002b8c:	0249      	lsls	r1, r1, #9
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e020      	b.n	8002bd6 <HAL_RCC_OscConfig+0xba>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	23a0      	movs	r3, #160	@ 0xa0
 8002b9a:	02db      	lsls	r3, r3, #11
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d10e      	bne.n	8002bbe <HAL_RCC_OscConfig+0xa2>
 8002ba0:	4ba9      	ldr	r3, [pc, #676]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4ba8      	ldr	r3, [pc, #672]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002ba6:	2180      	movs	r1, #128	@ 0x80
 8002ba8:	02c9      	lsls	r1, r1, #11
 8002baa:	430a      	orrs	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	4ba6      	ldr	r3, [pc, #664]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4ba5      	ldr	r3, [pc, #660]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002bb4:	2180      	movs	r1, #128	@ 0x80
 8002bb6:	0249      	lsls	r1, r1, #9
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e00b      	b.n	8002bd6 <HAL_RCC_OscConfig+0xba>
 8002bbe:	4ba2      	ldr	r3, [pc, #648]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4ba1      	ldr	r3, [pc, #644]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002bc4:	49a1      	ldr	r1, [pc, #644]	@ (8002e4c <HAL_RCC_OscConfig+0x330>)
 8002bc6:	400a      	ands	r2, r1
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	4b9f      	ldr	r3, [pc, #636]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4b9e      	ldr	r3, [pc, #632]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002bd0:	499f      	ldr	r1, [pc, #636]	@ (8002e50 <HAL_RCC_OscConfig+0x334>)
 8002bd2:	400a      	ands	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d014      	beq.n	8002c08 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bde:	f7fe febd 	bl	800195c <HAL_GetTick>
 8002be2:	0003      	movs	r3, r0
 8002be4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be8:	f7fe feb8 	bl	800195c <HAL_GetTick>
 8002bec:	0002      	movs	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	@ 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e298      	b.n	800312c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bfa:	4b93      	ldr	r3, [pc, #588]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	2380      	movs	r3, #128	@ 0x80
 8002c00:	029b      	lsls	r3, r3, #10
 8002c02:	4013      	ands	r3, r2
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0xcc>
 8002c06:	e015      	b.n	8002c34 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe fea8 	bl	800195c <HAL_GetTick>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c12:	f7fe fea3 	bl	800195c <HAL_GetTick>
 8002c16:	0002      	movs	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b64      	cmp	r3, #100	@ 0x64
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e283      	b.n	800312c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c24:	4b88      	ldr	r3, [pc, #544]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	2380      	movs	r3, #128	@ 0x80
 8002c2a:	029b      	lsls	r3, r3, #10
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d1f0      	bne.n	8002c12 <HAL_RCC_OscConfig+0xf6>
 8002c30:	e000      	b.n	8002c34 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c32:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2202      	movs	r2, #2
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d100      	bne.n	8002c40 <HAL_RCC_OscConfig+0x124>
 8002c3e:	e099      	b.n	8002d74 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c40:	4b81      	ldr	r3, [pc, #516]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2238      	movs	r2, #56	@ 0x38
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	2203      	movs	r2, #3
 8002c50:	4013      	ands	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2b10      	cmp	r3, #16
 8002c58:	d102      	bne.n	8002c60 <HAL_RCC_OscConfig+0x144>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d002      	beq.n	8002c66 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d135      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c66:	4b78      	ldr	r3, [pc, #480]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	2380      	movs	r3, #128	@ 0x80
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d005      	beq.n	8002c7e <HAL_RCC_OscConfig+0x162>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e256      	b.n	800312c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7e:	4b72      	ldr	r3, [pc, #456]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4a74      	ldr	r2, [pc, #464]	@ (8002e54 <HAL_RCC_OscConfig+0x338>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	0019      	movs	r1, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	021a      	lsls	r2, r3, #8
 8002c8e:	4b6e      	ldr	r3, [pc, #440]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002c90:	430a      	orrs	r2, r1
 8002c92:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d112      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002c9a:	4b6b      	ldr	r3, [pc, #428]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a6e      	ldr	r2, [pc, #440]	@ (8002e58 <HAL_RCC_OscConfig+0x33c>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	4b67      	ldr	r3, [pc, #412]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002caa:	430a      	orrs	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002cae:	4b66      	ldr	r3, [pc, #408]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	0adb      	lsrs	r3, r3, #11
 8002cb4:	2207      	movs	r2, #7
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	4a68      	ldr	r2, [pc, #416]	@ (8002e5c <HAL_RCC_OscConfig+0x340>)
 8002cba:	40da      	lsrs	r2, r3
 8002cbc:	4b68      	ldr	r3, [pc, #416]	@ (8002e60 <HAL_RCC_OscConfig+0x344>)
 8002cbe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cc0:	4b68      	ldr	r3, [pc, #416]	@ (8002e64 <HAL_RCC_OscConfig+0x348>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f7fe fded 	bl	80018a4 <HAL_InitTick>
 8002cca:	1e03      	subs	r3, r0, #0
 8002ccc:	d051      	beq.n	8002d72 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e22c      	b.n	800312c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d030      	beq.n	8002d3c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002cda:	4b5b      	ldr	r3, [pc, #364]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a5e      	ldr	r2, [pc, #376]	@ (8002e58 <HAL_RCC_OscConfig+0x33c>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	4b57      	ldr	r3, [pc, #348]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002cea:	430a      	orrs	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002cee:	4b56      	ldr	r3, [pc, #344]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4b55      	ldr	r3, [pc, #340]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002cf4:	2180      	movs	r1, #128	@ 0x80
 8002cf6:	0049      	lsls	r1, r1, #1
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe fe2e 	bl	800195c <HAL_GetTick>
 8002d00:	0003      	movs	r3, r0
 8002d02:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d06:	f7fe fe29 	bl	800195c <HAL_GetTick>
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e209      	b.n	800312c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d18:	4b4b      	ldr	r3, [pc, #300]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	2380      	movs	r3, #128	@ 0x80
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4013      	ands	r3, r2
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d24:	4b48      	ldr	r3, [pc, #288]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	4a4a      	ldr	r2, [pc, #296]	@ (8002e54 <HAL_RCC_OscConfig+0x338>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	0019      	movs	r1, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	021a      	lsls	r2, r3, #8
 8002d34:	4b44      	ldr	r3, [pc, #272]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002d36:	430a      	orrs	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	e01b      	b.n	8002d74 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002d3c:	4b42      	ldr	r3, [pc, #264]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b41      	ldr	r3, [pc, #260]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002d42:	4949      	ldr	r1, [pc, #292]	@ (8002e68 <HAL_RCC_OscConfig+0x34c>)
 8002d44:	400a      	ands	r2, r1
 8002d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe fe08 	bl	800195c <HAL_GetTick>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d52:	f7fe fe03 	bl	800195c <HAL_GetTick>
 8002d56:	0002      	movs	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e1e3      	b.n	800312c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d64:	4b38      	ldr	r3, [pc, #224]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	2380      	movs	r3, #128	@ 0x80
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d1f0      	bne.n	8002d52 <HAL_RCC_OscConfig+0x236>
 8002d70:	e000      	b.n	8002d74 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d72:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2208      	movs	r2, #8
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d047      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002d7e:	4b32      	ldr	r3, [pc, #200]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2238      	movs	r2, #56	@ 0x38
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b18      	cmp	r3, #24
 8002d88:	d10a      	bne.n	8002da0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d8e:	2202      	movs	r2, #2
 8002d90:	4013      	ands	r3, r2
 8002d92:	d03c      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2f2>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d138      	bne.n	8002e0e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e1c5      	b.n	800312c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d019      	beq.n	8002ddc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002da8:	4b27      	ldr	r3, [pc, #156]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002daa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002dac:	4b26      	ldr	r3, [pc, #152]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002dae:	2101      	movs	r1, #1
 8002db0:	430a      	orrs	r2, r1
 8002db2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7fe fdd2 	bl	800195c <HAL_GetTick>
 8002db8:	0003      	movs	r3, r0
 8002dba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbe:	f7fe fdcd 	bl	800195c <HAL_GetTick>
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e1ad      	b.n	800312c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002dd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d0f1      	beq.n	8002dbe <HAL_RCC_OscConfig+0x2a2>
 8002dda:	e018      	b.n	8002e0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002dde:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002de0:	4b19      	ldr	r3, [pc, #100]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002de2:	2101      	movs	r1, #1
 8002de4:	438a      	bics	r2, r1
 8002de6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7fe fdb8 	bl	800195c <HAL_GetTick>
 8002dec:	0003      	movs	r3, r0
 8002dee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df2:	f7fe fdb3 	bl	800195c <HAL_GetTick>
 8002df6:	0002      	movs	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e193      	b.n	800312c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e04:	4b10      	ldr	r3, [pc, #64]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e08:	2202      	movs	r2, #2
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d1f1      	bne.n	8002df2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2204      	movs	r2, #4
 8002e14:	4013      	ands	r3, r2
 8002e16:	d100      	bne.n	8002e1a <HAL_RCC_OscConfig+0x2fe>
 8002e18:	e0c6      	b.n	8002fa8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1a:	231f      	movs	r3, #31
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	2200      	movs	r2, #0
 8002e20:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002e22:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2238      	movs	r2, #56	@ 0x38
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	d11e      	bne.n	8002e6c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <HAL_RCC_OscConfig+0x32c>)
 8002e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e32:	2202      	movs	r2, #2
 8002e34:	4013      	ands	r3, r2
 8002e36:	d100      	bne.n	8002e3a <HAL_RCC_OscConfig+0x31e>
 8002e38:	e0b6      	b.n	8002fa8 <HAL_RCC_OscConfig+0x48c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d000      	beq.n	8002e44 <HAL_RCC_OscConfig+0x328>
 8002e42:	e0b1      	b.n	8002fa8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e171      	b.n	800312c <HAL_RCC_OscConfig+0x610>
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	fffeffff 	.word	0xfffeffff
 8002e50:	fffbffff 	.word	0xfffbffff
 8002e54:	ffff80ff 	.word	0xffff80ff
 8002e58:	ffffc7ff 	.word	0xffffc7ff
 8002e5c:	00f42400 	.word	0x00f42400
 8002e60:	20000044 	.word	0x20000044
 8002e64:	20000048 	.word	0x20000048
 8002e68:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e6c:	4bb1      	ldr	r3, [pc, #708]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002e6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e70:	2380      	movs	r3, #128	@ 0x80
 8002e72:	055b      	lsls	r3, r3, #21
 8002e74:	4013      	ands	r3, r2
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_OscConfig+0x360>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <HAL_RCC_OscConfig+0x362>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d011      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002e82:	4bac      	ldr	r3, [pc, #688]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002e84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e86:	4bab      	ldr	r3, [pc, #684]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002e88:	2180      	movs	r1, #128	@ 0x80
 8002e8a:	0549      	lsls	r1, r1, #21
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e90:	4ba8      	ldr	r3, [pc, #672]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002e92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e94:	2380      	movs	r3, #128	@ 0x80
 8002e96:	055b      	lsls	r3, r3, #21
 8002e98:	4013      	ands	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002e9e:	231f      	movs	r3, #31
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea6:	4ba4      	ldr	r3, [pc, #656]	@ (8003138 <HAL_RCC_OscConfig+0x61c>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	2380      	movs	r3, #128	@ 0x80
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d11a      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eb2:	4ba1      	ldr	r3, [pc, #644]	@ (8003138 <HAL_RCC_OscConfig+0x61c>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4ba0      	ldr	r3, [pc, #640]	@ (8003138 <HAL_RCC_OscConfig+0x61c>)
 8002eb8:	2180      	movs	r1, #128	@ 0x80
 8002eba:	0049      	lsls	r1, r1, #1
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fd4c 	bl	800195c <HAL_GetTick>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eca:	f7fe fd47 	bl	800195c <HAL_GetTick>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e127      	b.n	800312c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002edc:	4b96      	ldr	r3, [pc, #600]	@ (8003138 <HAL_RCC_OscConfig+0x61c>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	2380      	movs	r3, #128	@ 0x80
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d106      	bne.n	8002efe <HAL_RCC_OscConfig+0x3e2>
 8002ef0:	4b90      	ldr	r3, [pc, #576]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002ef2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ef4:	4b8f      	ldr	r3, [pc, #572]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002efc:	e01c      	b.n	8002f38 <HAL_RCC_OscConfig+0x41c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b05      	cmp	r3, #5
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x404>
 8002f06:	4b8b      	ldr	r3, [pc, #556]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002f08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f0a:	4b8a      	ldr	r3, [pc, #552]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002f0c:	2104      	movs	r1, #4
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f12:	4b88      	ldr	r3, [pc, #544]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002f14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f16:	4b87      	ldr	r3, [pc, #540]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002f18:	2101      	movs	r1, #1
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f1e:	e00b      	b.n	8002f38 <HAL_RCC_OscConfig+0x41c>
 8002f20:	4b84      	ldr	r3, [pc, #528]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002f22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f24:	4b83      	ldr	r3, [pc, #524]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002f26:	2101      	movs	r1, #1
 8002f28:	438a      	bics	r2, r1
 8002f2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f2c:	4b81      	ldr	r3, [pc, #516]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002f2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f30:	4b80      	ldr	r3, [pc, #512]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002f32:	2104      	movs	r1, #4
 8002f34:	438a      	bics	r2, r1
 8002f36:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d014      	beq.n	8002f6a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe fd0c 	bl	800195c <HAL_GetTick>
 8002f44:	0003      	movs	r3, r0
 8002f46:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f48:	e009      	b.n	8002f5e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4a:	f7fe fd07 	bl	800195c <HAL_GetTick>
 8002f4e:	0002      	movs	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	4a79      	ldr	r2, [pc, #484]	@ (800313c <HAL_RCC_OscConfig+0x620>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e0e6      	b.n	800312c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f5e:	4b75      	ldr	r3, [pc, #468]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f62:	2202      	movs	r2, #2
 8002f64:	4013      	ands	r3, r2
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0x42e>
 8002f68:	e013      	b.n	8002f92 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6a:	f7fe fcf7 	bl	800195c <HAL_GetTick>
 8002f6e:	0003      	movs	r3, r0
 8002f70:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f72:	e009      	b.n	8002f88 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f74:	f7fe fcf2 	bl	800195c <HAL_GetTick>
 8002f78:	0002      	movs	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	4a6f      	ldr	r2, [pc, #444]	@ (800313c <HAL_RCC_OscConfig+0x620>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e0d1      	b.n	800312c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f88:	4b6a      	ldr	r3, [pc, #424]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002f92:	231f      	movs	r3, #31
 8002f94:	18fb      	adds	r3, r7, r3
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d105      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002f9c:	4b65      	ldr	r3, [pc, #404]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002f9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fa0:	4b64      	ldr	r3, [pc, #400]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002fa2:	4967      	ldr	r1, [pc, #412]	@ (8003140 <HAL_RCC_OscConfig+0x624>)
 8002fa4:	400a      	ands	r2, r1
 8002fa6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d100      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x496>
 8002fb0:	e0bb      	b.n	800312a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb2:	4b60      	ldr	r3, [pc, #384]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2238      	movs	r2, #56	@ 0x38
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b10      	cmp	r3, #16
 8002fbc:	d100      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x4a4>
 8002fbe:	e07b      	b.n	80030b8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d156      	bne.n	8003076 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc8:	4b5a      	ldr	r3, [pc, #360]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b59      	ldr	r3, [pc, #356]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002fce:	495d      	ldr	r1, [pc, #372]	@ (8003144 <HAL_RCC_OscConfig+0x628>)
 8002fd0:	400a      	ands	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fcc2 	bl	800195c <HAL_GetTick>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fde:	f7fe fcbd 	bl	800195c <HAL_GetTick>
 8002fe2:	0002      	movs	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e09d      	b.n	800312c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff0:	4b50      	ldr	r3, [pc, #320]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	2380      	movs	r3, #128	@ 0x80
 8002ff6:	049b      	lsls	r3, r3, #18
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d1f0      	bne.n	8002fde <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ffc:	4b4d      	ldr	r3, [pc, #308]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4a51      	ldr	r2, [pc, #324]	@ (8003148 <HAL_RCC_OscConfig+0x62c>)
 8003002:	4013      	ands	r3, r2
 8003004:	0019      	movs	r1, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1a      	ldr	r2, [r3, #32]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003028:	431a      	orrs	r2, r3
 800302a:	4b42      	ldr	r3, [pc, #264]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 800302c:	430a      	orrs	r2, r1
 800302e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003030:	4b40      	ldr	r3, [pc, #256]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4b3f      	ldr	r3, [pc, #252]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8003036:	2180      	movs	r1, #128	@ 0x80
 8003038:	0449      	lsls	r1, r1, #17
 800303a:	430a      	orrs	r2, r1
 800303c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800303e:	4b3d      	ldr	r3, [pc, #244]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	4b3c      	ldr	r3, [pc, #240]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8003044:	2180      	movs	r1, #128	@ 0x80
 8003046:	0549      	lsls	r1, r1, #21
 8003048:	430a      	orrs	r2, r1
 800304a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fe fc86 	bl	800195c <HAL_GetTick>
 8003050:	0003      	movs	r3, r0
 8003052:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003056:	f7fe fc81 	bl	800195c <HAL_GetTick>
 800305a:	0002      	movs	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e061      	b.n	800312c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003068:	4b32      	ldr	r3, [pc, #200]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	2380      	movs	r3, #128	@ 0x80
 800306e:	049b      	lsls	r3, r3, #18
 8003070:	4013      	ands	r3, r2
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x53a>
 8003074:	e059      	b.n	800312a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003076:	4b2f      	ldr	r3, [pc, #188]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4b2e      	ldr	r3, [pc, #184]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 800307c:	4931      	ldr	r1, [pc, #196]	@ (8003144 <HAL_RCC_OscConfig+0x628>)
 800307e:	400a      	ands	r2, r1
 8003080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003082:	f7fe fc6b 	bl	800195c <HAL_GetTick>
 8003086:	0003      	movs	r3, r0
 8003088:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308c:	f7fe fc66 	bl	800195c <HAL_GetTick>
 8003090:	0002      	movs	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e046      	b.n	800312c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800309e:	4b25      	ldr	r3, [pc, #148]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	2380      	movs	r3, #128	@ 0x80
 80030a4:	049b      	lsls	r3, r3, #18
 80030a6:	4013      	ands	r3, r2
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80030aa:	4b22      	ldr	r3, [pc, #136]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	4b21      	ldr	r3, [pc, #132]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 80030b0:	4926      	ldr	r1, [pc, #152]	@ (800314c <HAL_RCC_OscConfig+0x630>)
 80030b2:	400a      	ands	r2, r1
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	e038      	b.n	800312a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e033      	b.n	800312c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80030c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003134 <HAL_RCC_OscConfig+0x618>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2203      	movs	r2, #3
 80030ce:	401a      	ands	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d126      	bne.n	8003126 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2270      	movs	r2, #112	@ 0x70
 80030dc:	401a      	ands	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d11f      	bne.n	8003126 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	23fe      	movs	r3, #254	@ 0xfe
 80030ea:	01db      	lsls	r3, r3, #7
 80030ec:	401a      	ands	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d116      	bne.n	8003126 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	23f8      	movs	r3, #248	@ 0xf8
 80030fc:	039b      	lsls	r3, r3, #14
 80030fe:	401a      	ands	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003104:	429a      	cmp	r2, r3
 8003106:	d10e      	bne.n	8003126 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	23e0      	movs	r3, #224	@ 0xe0
 800310c:	051b      	lsls	r3, r3, #20
 800310e:	401a      	ands	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d106      	bne.n	8003126 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	0f5b      	lsrs	r3, r3, #29
 800311c:	075a      	lsls	r2, r3, #29
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d001      	beq.n	800312a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	0018      	movs	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	b008      	add	sp, #32
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40021000 	.word	0x40021000
 8003138:	40007000 	.word	0x40007000
 800313c:	00001388 	.word	0x00001388
 8003140:	efffffff 	.word	0xefffffff
 8003144:	feffffff 	.word	0xfeffffff
 8003148:	11c1808c 	.word	0x11c1808c
 800314c:	eefefffc 	.word	0xeefefffc

08003150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0e9      	b.n	8003338 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003164:	4b76      	ldr	r3, [pc, #472]	@ (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2207      	movs	r2, #7
 800316a:	4013      	ands	r3, r2
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d91e      	bls.n	80031b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b73      	ldr	r3, [pc, #460]	@ (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2207      	movs	r2, #7
 8003178:	4393      	bics	r3, r2
 800317a:	0019      	movs	r1, r3
 800317c:	4b70      	ldr	r3, [pc, #448]	@ (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003184:	f7fe fbea 	bl	800195c <HAL_GetTick>
 8003188:	0003      	movs	r3, r0
 800318a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800318c:	e009      	b.n	80031a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800318e:	f7fe fbe5 	bl	800195c <HAL_GetTick>
 8003192:	0002      	movs	r2, r0
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	4a6a      	ldr	r2, [pc, #424]	@ (8003344 <HAL_RCC_ClockConfig+0x1f4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e0ca      	b.n	8003338 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031a2:	4b67      	ldr	r3, [pc, #412]	@ (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2207      	movs	r2, #7
 80031a8:	4013      	ands	r3, r2
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d1ee      	bne.n	800318e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2202      	movs	r2, #2
 80031b6:	4013      	ands	r3, r2
 80031b8:	d015      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2204      	movs	r2, #4
 80031c0:	4013      	ands	r3, r2
 80031c2:	d006      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80031c4:	4b60      	ldr	r3, [pc, #384]	@ (8003348 <HAL_RCC_ClockConfig+0x1f8>)
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	4b5f      	ldr	r3, [pc, #380]	@ (8003348 <HAL_RCC_ClockConfig+0x1f8>)
 80031ca:	21e0      	movs	r1, #224	@ 0xe0
 80031cc:	01c9      	lsls	r1, r1, #7
 80031ce:	430a      	orrs	r2, r1
 80031d0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003348 <HAL_RCC_ClockConfig+0x1f8>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	4a5d      	ldr	r2, [pc, #372]	@ (800334c <HAL_RCC_ClockConfig+0x1fc>)
 80031d8:	4013      	ands	r3, r2
 80031da:	0019      	movs	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	4b59      	ldr	r3, [pc, #356]	@ (8003348 <HAL_RCC_ClockConfig+0x1f8>)
 80031e2:	430a      	orrs	r2, r1
 80031e4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2201      	movs	r2, #1
 80031ec:	4013      	ands	r3, r2
 80031ee:	d057      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d107      	bne.n	8003208 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031f8:	4b53      	ldr	r3, [pc, #332]	@ (8003348 <HAL_RCC_ClockConfig+0x1f8>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	2380      	movs	r3, #128	@ 0x80
 80031fe:	029b      	lsls	r3, r3, #10
 8003200:	4013      	ands	r3, r2
 8003202:	d12b      	bne.n	800325c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e097      	b.n	8003338 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d107      	bne.n	8003220 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003210:	4b4d      	ldr	r3, [pc, #308]	@ (8003348 <HAL_RCC_ClockConfig+0x1f8>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	2380      	movs	r3, #128	@ 0x80
 8003216:	049b      	lsls	r3, r3, #18
 8003218:	4013      	ands	r3, r2
 800321a:	d11f      	bne.n	800325c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e08b      	b.n	8003338 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d107      	bne.n	8003238 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003228:	4b47      	ldr	r3, [pc, #284]	@ (8003348 <HAL_RCC_ClockConfig+0x1f8>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	2380      	movs	r3, #128	@ 0x80
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4013      	ands	r3, r2
 8003232:	d113      	bne.n	800325c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e07f      	b.n	8003338 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b03      	cmp	r3, #3
 800323e:	d106      	bne.n	800324e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003240:	4b41      	ldr	r3, [pc, #260]	@ (8003348 <HAL_RCC_ClockConfig+0x1f8>)
 8003242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003244:	2202      	movs	r2, #2
 8003246:	4013      	ands	r3, r2
 8003248:	d108      	bne.n	800325c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e074      	b.n	8003338 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800324e:	4b3e      	ldr	r3, [pc, #248]	@ (8003348 <HAL_RCC_ClockConfig+0x1f8>)
 8003250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003252:	2202      	movs	r2, #2
 8003254:	4013      	ands	r3, r2
 8003256:	d101      	bne.n	800325c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e06d      	b.n	8003338 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800325c:	4b3a      	ldr	r3, [pc, #232]	@ (8003348 <HAL_RCC_ClockConfig+0x1f8>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2207      	movs	r2, #7
 8003262:	4393      	bics	r3, r2
 8003264:	0019      	movs	r1, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	4b37      	ldr	r3, [pc, #220]	@ (8003348 <HAL_RCC_ClockConfig+0x1f8>)
 800326c:	430a      	orrs	r2, r1
 800326e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003270:	f7fe fb74 	bl	800195c <HAL_GetTick>
 8003274:	0003      	movs	r3, r0
 8003276:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003278:	e009      	b.n	800328e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327a:	f7fe fb6f 	bl	800195c <HAL_GetTick>
 800327e:	0002      	movs	r2, r0
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	4a2f      	ldr	r2, [pc, #188]	@ (8003344 <HAL_RCC_ClockConfig+0x1f4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e054      	b.n	8003338 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328e:	4b2e      	ldr	r3, [pc, #184]	@ (8003348 <HAL_RCC_ClockConfig+0x1f8>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2238      	movs	r2, #56	@ 0x38
 8003294:	401a      	ands	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	429a      	cmp	r2, r3
 800329e:	d1ec      	bne.n	800327a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032a0:	4b27      	ldr	r3, [pc, #156]	@ (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2207      	movs	r2, #7
 80032a6:	4013      	ands	r3, r2
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d21e      	bcs.n	80032ec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ae:	4b24      	ldr	r3, [pc, #144]	@ (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2207      	movs	r2, #7
 80032b4:	4393      	bics	r3, r2
 80032b6:	0019      	movs	r1, r3
 80032b8:	4b21      	ldr	r3, [pc, #132]	@ (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032c0:	f7fe fb4c 	bl	800195c <HAL_GetTick>
 80032c4:	0003      	movs	r3, r0
 80032c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032c8:	e009      	b.n	80032de <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ca:	f7fe fb47 	bl	800195c <HAL_GetTick>
 80032ce:	0002      	movs	r2, r0
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003344 <HAL_RCC_ClockConfig+0x1f4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e02c      	b.n	8003338 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032de:	4b18      	ldr	r3, [pc, #96]	@ (8003340 <HAL_RCC_ClockConfig+0x1f0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2207      	movs	r2, #7
 80032e4:	4013      	ands	r3, r2
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d1ee      	bne.n	80032ca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2204      	movs	r2, #4
 80032f2:	4013      	ands	r3, r2
 80032f4:	d009      	beq.n	800330a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80032f6:	4b14      	ldr	r3, [pc, #80]	@ (8003348 <HAL_RCC_ClockConfig+0x1f8>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	4a15      	ldr	r2, [pc, #84]	@ (8003350 <HAL_RCC_ClockConfig+0x200>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	0019      	movs	r1, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	4b10      	ldr	r3, [pc, #64]	@ (8003348 <HAL_RCC_ClockConfig+0x1f8>)
 8003306:	430a      	orrs	r2, r1
 8003308:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800330a:	f000 f829 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 800330e:	0001      	movs	r1, r0
 8003310:	4b0d      	ldr	r3, [pc, #52]	@ (8003348 <HAL_RCC_ClockConfig+0x1f8>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	0a1b      	lsrs	r3, r3, #8
 8003316:	220f      	movs	r2, #15
 8003318:	401a      	ands	r2, r3
 800331a:	4b0e      	ldr	r3, [pc, #56]	@ (8003354 <HAL_RCC_ClockConfig+0x204>)
 800331c:	0092      	lsls	r2, r2, #2
 800331e:	58d3      	ldr	r3, [r2, r3]
 8003320:	221f      	movs	r2, #31
 8003322:	4013      	ands	r3, r2
 8003324:	000a      	movs	r2, r1
 8003326:	40da      	lsrs	r2, r3
 8003328:	4b0b      	ldr	r3, [pc, #44]	@ (8003358 <HAL_RCC_ClockConfig+0x208>)
 800332a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800332c:	4b0b      	ldr	r3, [pc, #44]	@ (800335c <HAL_RCC_ClockConfig+0x20c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	0018      	movs	r0, r3
 8003332:	f7fe fab7 	bl	80018a4 <HAL_InitTick>
 8003336:	0003      	movs	r3, r0
}
 8003338:	0018      	movs	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	b004      	add	sp, #16
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40022000 	.word	0x40022000
 8003344:	00001388 	.word	0x00001388
 8003348:	40021000 	.word	0x40021000
 800334c:	fffff0ff 	.word	0xfffff0ff
 8003350:	ffff8fff 	.word	0xffff8fff
 8003354:	08004fc0 	.word	0x08004fc0
 8003358:	20000044 	.word	0x20000044
 800335c:	20000048 	.word	0x20000048

08003360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003366:	4b3c      	ldr	r3, [pc, #240]	@ (8003458 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2238      	movs	r2, #56	@ 0x38
 800336c:	4013      	ands	r3, r2
 800336e:	d10f      	bne.n	8003390 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003370:	4b39      	ldr	r3, [pc, #228]	@ (8003458 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	0adb      	lsrs	r3, r3, #11
 8003376:	2207      	movs	r2, #7
 8003378:	4013      	ands	r3, r2
 800337a:	2201      	movs	r2, #1
 800337c:	409a      	lsls	r2, r3
 800337e:	0013      	movs	r3, r2
 8003380:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003382:	6839      	ldr	r1, [r7, #0]
 8003384:	4835      	ldr	r0, [pc, #212]	@ (800345c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003386:	f7fc febd 	bl	8000104 <__udivsi3>
 800338a:	0003      	movs	r3, r0
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	e05d      	b.n	800344c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003390:	4b31      	ldr	r3, [pc, #196]	@ (8003458 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2238      	movs	r2, #56	@ 0x38
 8003396:	4013      	ands	r3, r2
 8003398:	2b08      	cmp	r3, #8
 800339a:	d102      	bne.n	80033a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800339c:	4b30      	ldr	r3, [pc, #192]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x100>)
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	e054      	b.n	800344c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003458 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2238      	movs	r2, #56	@ 0x38
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b10      	cmp	r3, #16
 80033ac:	d138      	bne.n	8003420 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80033ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003458 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2203      	movs	r2, #3
 80033b4:	4013      	ands	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033b8:	4b27      	ldr	r3, [pc, #156]	@ (8003458 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	2207      	movs	r2, #7
 80033c0:	4013      	ands	r3, r2
 80033c2:	3301      	adds	r3, #1
 80033c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d10d      	bne.n	80033e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	4824      	ldr	r0, [pc, #144]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x100>)
 80033d0:	f7fc fe98 	bl	8000104 <__udivsi3>
 80033d4:	0003      	movs	r3, r0
 80033d6:	0019      	movs	r1, r3
 80033d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003458 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	0a1b      	lsrs	r3, r3, #8
 80033de:	227f      	movs	r2, #127	@ 0x7f
 80033e0:	4013      	ands	r3, r2
 80033e2:	434b      	muls	r3, r1
 80033e4:	617b      	str	r3, [r7, #20]
        break;
 80033e6:	e00d      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	481c      	ldr	r0, [pc, #112]	@ (800345c <HAL_RCC_GetSysClockFreq+0xfc>)
 80033ec:	f7fc fe8a 	bl	8000104 <__udivsi3>
 80033f0:	0003      	movs	r3, r0
 80033f2:	0019      	movs	r1, r3
 80033f4:	4b18      	ldr	r3, [pc, #96]	@ (8003458 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	0a1b      	lsrs	r3, r3, #8
 80033fa:	227f      	movs	r2, #127	@ 0x7f
 80033fc:	4013      	ands	r3, r2
 80033fe:	434b      	muls	r3, r1
 8003400:	617b      	str	r3, [r7, #20]
        break;
 8003402:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003404:	4b14      	ldr	r3, [pc, #80]	@ (8003458 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	0f5b      	lsrs	r3, r3, #29
 800340a:	2207      	movs	r2, #7
 800340c:	4013      	ands	r3, r2
 800340e:	3301      	adds	r3, #1
 8003410:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	6978      	ldr	r0, [r7, #20]
 8003416:	f7fc fe75 	bl	8000104 <__udivsi3>
 800341a:	0003      	movs	r3, r0
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	e015      	b.n	800344c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003420:	4b0d      	ldr	r3, [pc, #52]	@ (8003458 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2238      	movs	r2, #56	@ 0x38
 8003426:	4013      	ands	r3, r2
 8003428:	2b20      	cmp	r3, #32
 800342a:	d103      	bne.n	8003434 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800342c:	2380      	movs	r3, #128	@ 0x80
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	e00b      	b.n	800344c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003434:	4b08      	ldr	r3, [pc, #32]	@ (8003458 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2238      	movs	r2, #56	@ 0x38
 800343a:	4013      	ands	r3, r2
 800343c:	2b18      	cmp	r3, #24
 800343e:	d103      	bne.n	8003448 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003440:	23fa      	movs	r3, #250	@ 0xfa
 8003442:	01db      	lsls	r3, r3, #7
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	e001      	b.n	800344c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800344c:	693b      	ldr	r3, [r7, #16]
}
 800344e:	0018      	movs	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	b006      	add	sp, #24
 8003454:	bd80      	pop	{r7, pc}
 8003456:	46c0      	nop			@ (mov r8, r8)
 8003458:	40021000 	.word	0x40021000
 800345c:	00f42400 	.word	0x00f42400
 8003460:	007a1200 	.word	0x007a1200

08003464 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800346c:	2313      	movs	r3, #19
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003474:	2312      	movs	r3, #18
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	2380      	movs	r3, #128	@ 0x80
 8003482:	029b      	lsls	r3, r3, #10
 8003484:	4013      	ands	r3, r2
 8003486:	d100      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003488:	e0a3      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800348a:	2011      	movs	r0, #17
 800348c:	183b      	adds	r3, r7, r0
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003492:	4ba5      	ldr	r3, [pc, #660]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003494:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003496:	2380      	movs	r3, #128	@ 0x80
 8003498:	055b      	lsls	r3, r3, #21
 800349a:	4013      	ands	r3, r2
 800349c:	d110      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800349e:	4ba2      	ldr	r3, [pc, #648]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034a2:	4ba1      	ldr	r3, [pc, #644]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034a4:	2180      	movs	r1, #128	@ 0x80
 80034a6:	0549      	lsls	r1, r1, #21
 80034a8:	430a      	orrs	r2, r1
 80034aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80034ac:	4b9e      	ldr	r3, [pc, #632]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034b0:	2380      	movs	r3, #128	@ 0x80
 80034b2:	055b      	lsls	r3, r3, #21
 80034b4:	4013      	ands	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ba:	183b      	adds	r3, r7, r0
 80034bc:	2201      	movs	r2, #1
 80034be:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034c0:	4b9a      	ldr	r3, [pc, #616]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4b99      	ldr	r3, [pc, #612]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80034c6:	2180      	movs	r1, #128	@ 0x80
 80034c8:	0049      	lsls	r1, r1, #1
 80034ca:	430a      	orrs	r2, r1
 80034cc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034ce:	f7fe fa45 	bl	800195c <HAL_GetTick>
 80034d2:	0003      	movs	r3, r0
 80034d4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034d6:	e00b      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d8:	f7fe fa40 	bl	800195c <HAL_GetTick>
 80034dc:	0002      	movs	r2, r0
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d904      	bls.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80034e6:	2313      	movs	r3, #19
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	2203      	movs	r2, #3
 80034ec:	701a      	strb	r2, [r3, #0]
        break;
 80034ee:	e005      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034f0:	4b8e      	ldr	r3, [pc, #568]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	2380      	movs	r3, #128	@ 0x80
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	4013      	ands	r3, r2
 80034fa:	d0ed      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80034fc:	2313      	movs	r3, #19
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d154      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003506:	4b88      	ldr	r3, [pc, #544]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003508:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800350a:	23c0      	movs	r3, #192	@ 0xc0
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4013      	ands	r3, r2
 8003510:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d019      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	429a      	cmp	r2, r3
 8003520:	d014      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003522:	4b81      	ldr	r3, [pc, #516]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003526:	4a82      	ldr	r2, [pc, #520]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003528:	4013      	ands	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800352c:	4b7e      	ldr	r3, [pc, #504]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800352e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003530:	4b7d      	ldr	r3, [pc, #500]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003532:	2180      	movs	r1, #128	@ 0x80
 8003534:	0249      	lsls	r1, r1, #9
 8003536:	430a      	orrs	r2, r1
 8003538:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800353a:	4b7b      	ldr	r3, [pc, #492]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800353c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800353e:	4b7a      	ldr	r3, [pc, #488]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003540:	497c      	ldr	r1, [pc, #496]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003542:	400a      	ands	r2, r1
 8003544:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003546:	4b78      	ldr	r3, [pc, #480]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2201      	movs	r2, #1
 8003550:	4013      	ands	r3, r2
 8003552:	d016      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fe fa02 	bl	800195c <HAL_GetTick>
 8003558:	0003      	movs	r3, r0
 800355a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800355c:	e00c      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fe f9fd 	bl	800195c <HAL_GetTick>
 8003562:	0002      	movs	r2, r0
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	4a73      	ldr	r2, [pc, #460]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d904      	bls.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800356e:	2313      	movs	r3, #19
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	2203      	movs	r2, #3
 8003574:	701a      	strb	r2, [r3, #0]
            break;
 8003576:	e004      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003578:	4b6b      	ldr	r3, [pc, #428]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800357a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357c:	2202      	movs	r2, #2
 800357e:	4013      	ands	r3, r2
 8003580:	d0ed      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003582:	2313      	movs	r3, #19
 8003584:	18fb      	adds	r3, r7, r3
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10a      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800358c:	4b66      	ldr	r3, [pc, #408]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800358e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003590:	4a67      	ldr	r2, [pc, #412]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003592:	4013      	ands	r3, r2
 8003594:	0019      	movs	r1, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800359a:	4b63      	ldr	r3, [pc, #396]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800359c:	430a      	orrs	r2, r1
 800359e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035a0:	e00c      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035a2:	2312      	movs	r3, #18
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	2213      	movs	r2, #19
 80035a8:	18ba      	adds	r2, r7, r2
 80035aa:	7812      	ldrb	r2, [r2, #0]
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	e005      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b0:	2312      	movs	r3, #18
 80035b2:	18fb      	adds	r3, r7, r3
 80035b4:	2213      	movs	r2, #19
 80035b6:	18ba      	adds	r2, r7, r2
 80035b8:	7812      	ldrb	r2, [r2, #0]
 80035ba:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035bc:	2311      	movs	r3, #17
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d105      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c6:	4b58      	ldr	r3, [pc, #352]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035ca:	4b57      	ldr	r3, [pc, #348]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035cc:	495b      	ldr	r1, [pc, #364]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80035ce:	400a      	ands	r2, r1
 80035d0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2201      	movs	r2, #1
 80035d8:	4013      	ands	r3, r2
 80035da:	d009      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035dc:	4b52      	ldr	r3, [pc, #328]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e0:	2203      	movs	r2, #3
 80035e2:	4393      	bics	r3, r2
 80035e4:	0019      	movs	r1, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	4b4f      	ldr	r3, [pc, #316]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035ec:	430a      	orrs	r2, r1
 80035ee:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2210      	movs	r2, #16
 80035f6:	4013      	ands	r3, r2
 80035f8:	d009      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035fa:	4b4b      	ldr	r3, [pc, #300]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fe:	4a50      	ldr	r2, [pc, #320]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003600:	4013      	ands	r3, r2
 8003602:	0019      	movs	r1, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	4b47      	ldr	r3, [pc, #284]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800360a:	430a      	orrs	r2, r1
 800360c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	2380      	movs	r3, #128	@ 0x80
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4013      	ands	r3, r2
 8003618:	d009      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800361a:	4b43      	ldr	r3, [pc, #268]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800361c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361e:	4a49      	ldr	r2, [pc, #292]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003620:	4013      	ands	r3, r2
 8003622:	0019      	movs	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	4b3f      	ldr	r3, [pc, #252]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800362a:	430a      	orrs	r2, r1
 800362c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	2380      	movs	r3, #128	@ 0x80
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4013      	ands	r3, r2
 8003638:	d009      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800363a:	4b3b      	ldr	r3, [pc, #236]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800363c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800363e:	4a42      	ldr	r2, [pc, #264]	@ (8003748 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003640:	4013      	ands	r3, r2
 8003642:	0019      	movs	r1, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699a      	ldr	r2, [r3, #24]
 8003648:	4b37      	ldr	r3, [pc, #220]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800364a:	430a      	orrs	r2, r1
 800364c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2220      	movs	r2, #32
 8003654:	4013      	ands	r3, r2
 8003656:	d009      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003658:	4b33      	ldr	r3, [pc, #204]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800365a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800365c:	4a3b      	ldr	r2, [pc, #236]	@ (800374c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800365e:	4013      	ands	r3, r2
 8003660:	0019      	movs	r1, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	4b30      	ldr	r3, [pc, #192]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003668:	430a      	orrs	r2, r1
 800366a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	2380      	movs	r3, #128	@ 0x80
 8003672:	01db      	lsls	r3, r3, #7
 8003674:	4013      	ands	r3, r2
 8003676:	d015      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003678:	4b2b      	ldr	r3, [pc, #172]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800367a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	0899      	lsrs	r1, r3, #2
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69da      	ldr	r2, [r3, #28]
 8003684:	4b28      	ldr	r3, [pc, #160]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003686:	430a      	orrs	r2, r1
 8003688:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69da      	ldr	r2, [r3, #28]
 800368e:	2380      	movs	r3, #128	@ 0x80
 8003690:	05db      	lsls	r3, r3, #23
 8003692:	429a      	cmp	r2, r3
 8003694:	d106      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003696:	4b24      	ldr	r3, [pc, #144]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	4b23      	ldr	r3, [pc, #140]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800369c:	2180      	movs	r1, #128	@ 0x80
 800369e:	0249      	lsls	r1, r1, #9
 80036a0:	430a      	orrs	r2, r1
 80036a2:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	2380      	movs	r3, #128	@ 0x80
 80036aa:	039b      	lsls	r3, r3, #14
 80036ac:	4013      	ands	r3, r2
 80036ae:	d016      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b4:	4a26      	ldr	r2, [pc, #152]	@ (8003750 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	0019      	movs	r1, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1a      	ldr	r2, [r3, #32]
 80036be:	4b1a      	ldr	r3, [pc, #104]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036c0:	430a      	orrs	r2, r1
 80036c2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1a      	ldr	r2, [r3, #32]
 80036c8:	2380      	movs	r3, #128	@ 0x80
 80036ca:	03db      	lsls	r3, r3, #15
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d106      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80036d0:	4b15      	ldr	r3, [pc, #84]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	4b14      	ldr	r3, [pc, #80]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036d6:	2180      	movs	r1, #128	@ 0x80
 80036d8:	0449      	lsls	r1, r1, #17
 80036da:	430a      	orrs	r2, r1
 80036dc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	2380      	movs	r3, #128	@ 0x80
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	4013      	ands	r3, r2
 80036e8:	d016      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80036ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ee:	4a19      	ldr	r2, [pc, #100]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	0019      	movs	r1, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036fa:	430a      	orrs	r2, r1
 80036fc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	2380      	movs	r3, #128	@ 0x80
 8003704:	01db      	lsls	r3, r3, #7
 8003706:	429a      	cmp	r2, r3
 8003708:	d106      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800370a:	4b07      	ldr	r3, [pc, #28]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	4b06      	ldr	r3, [pc, #24]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003710:	2180      	movs	r1, #128	@ 0x80
 8003712:	0249      	lsls	r1, r1, #9
 8003714:	430a      	orrs	r2, r1
 8003716:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003718:	2312      	movs	r3, #18
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	781b      	ldrb	r3, [r3, #0]
}
 800371e:	0018      	movs	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	b006      	add	sp, #24
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	40021000 	.word	0x40021000
 800372c:	40007000 	.word	0x40007000
 8003730:	fffffcff 	.word	0xfffffcff
 8003734:	fffeffff 	.word	0xfffeffff
 8003738:	00001388 	.word	0x00001388
 800373c:	efffffff 	.word	0xefffffff
 8003740:	fffff3ff 	.word	0xfffff3ff
 8003744:	fff3ffff 	.word	0xfff3ffff
 8003748:	ffcfffff 	.word	0xffcfffff
 800374c:	ffffcfff 	.word	0xffffcfff
 8003750:	ffbfffff 	.word	0xffbfffff
 8003754:	ffff3fff 	.word	0xffff3fff

08003758 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003758:	b5b0      	push	{r4, r5, r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003760:	230f      	movs	r3, #15
 8003762:	18fb      	adds	r3, r7, r3
 8003764:	2201      	movs	r2, #1
 8003766:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d100      	bne.n	8003770 <HAL_RTC_Init+0x18>
 800376e:	e08c      	b.n	800388a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2229      	movs	r2, #41	@ 0x29
 8003774:	5c9b      	ldrb	r3, [r3, r2]
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10b      	bne.n	8003794 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2228      	movs	r2, #40	@ 0x28
 8003780:	2100      	movs	r1, #0
 8003782:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2288      	movs	r2, #136	@ 0x88
 8003788:	0212      	lsls	r2, r2, #8
 800378a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	0018      	movs	r0, r3
 8003790:	f7fd ff34 	bl	80015fc <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2229      	movs	r2, #41	@ 0x29
 8003798:	2102      	movs	r1, #2
 800379a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	2210      	movs	r2, #16
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b10      	cmp	r3, #16
 80037a8:	d062      	beq.n	8003870 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	22ca      	movs	r2, #202	@ 0xca
 80037b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2253      	movs	r2, #83	@ 0x53
 80037b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80037ba:	250f      	movs	r5, #15
 80037bc:	197c      	adds	r4, r7, r5
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	0018      	movs	r0, r3
 80037c2:	f000 fbf3 	bl	8003fac <RTC_EnterInitMode>
 80037c6:	0003      	movs	r3, r0
 80037c8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80037ca:	0028      	movs	r0, r5
 80037cc:	183b      	adds	r3, r7, r0
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d12c      	bne.n	800382e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	492e      	ldr	r1, [pc, #184]	@ (8003898 <HAL_RTC_Init+0x140>)
 80037e0:	400a      	ands	r2, r1
 80037e2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6999      	ldr	r1, [r3, #24]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6912      	ldr	r2, [r2, #16]
 800380a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6919      	ldr	r1, [r3, #16]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	041a      	lsls	r2, r3, #16
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003820:	183c      	adds	r4, r7, r0
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	0018      	movs	r0, r3
 8003826:	f000 fc03 	bl	8004030 <RTC_ExitInitMode>
 800382a:	0003      	movs	r3, r0
 800382c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800382e:	230f      	movs	r3, #15
 8003830:	18fb      	adds	r3, r7, r3
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d116      	bne.n	8003866 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	00d2      	lsls	r2, r2, #3
 8003844:	08d2      	lsrs	r2, r2, #3
 8003846:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6999      	ldr	r1, [r3, #24]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	22ff      	movs	r2, #255	@ 0xff
 800386c:	625a      	str	r2, [r3, #36]	@ 0x24
 800386e:	e003      	b.n	8003878 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003870:	230f      	movs	r3, #15
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8003878:	230f      	movs	r3, #15
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d103      	bne.n	800388a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2229      	movs	r2, #41	@ 0x29
 8003886:	2101      	movs	r1, #1
 8003888:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800388a:	230f      	movs	r3, #15
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	781b      	ldrb	r3, [r3, #0]
}
 8003890:	0018      	movs	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	b004      	add	sp, #16
 8003896:	bdb0      	pop	{r4, r5, r7, pc}
 8003898:	fb8fffbf 	.word	0xfb8fffbf

0800389c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800389c:	b5b0      	push	{r4, r5, r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2228      	movs	r2, #40	@ 0x28
 80038ac:	5c9b      	ldrb	r3, [r3, r2]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_RTC_SetTime+0x1a>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e092      	b.n	80039dc <HAL_RTC_SetTime+0x140>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2228      	movs	r2, #40	@ 0x28
 80038ba:	2101      	movs	r1, #1
 80038bc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2229      	movs	r2, #41	@ 0x29
 80038c2:	2102      	movs	r1, #2
 80038c4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	22ca      	movs	r2, #202	@ 0xca
 80038cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2253      	movs	r2, #83	@ 0x53
 80038d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80038d6:	2513      	movs	r5, #19
 80038d8:	197c      	adds	r4, r7, r5
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	0018      	movs	r0, r3
 80038de:	f000 fb65 	bl	8003fac <RTC_EnterInitMode>
 80038e2:	0003      	movs	r3, r0
 80038e4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80038e6:	197b      	adds	r3, r7, r5
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d162      	bne.n	80039b4 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d125      	bne.n	8003940 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	2240      	movs	r2, #64	@ 0x40
 80038fc:	4013      	ands	r3, r2
 80038fe:	d102      	bne.n	8003906 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2200      	movs	r2, #0
 8003904:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	0018      	movs	r0, r3
 800390c:	f000 fbd4 	bl	80040b8 <RTC_ByteToBcd2>
 8003910:	0003      	movs	r3, r0
 8003912:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	785b      	ldrb	r3, [r3, #1]
 8003918:	0018      	movs	r0, r3
 800391a:	f000 fbcd 	bl	80040b8 <RTC_ByteToBcd2>
 800391e:	0003      	movs	r3, r0
 8003920:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003922:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	789b      	ldrb	r3, [r3, #2]
 8003928:	0018      	movs	r0, r3
 800392a:	f000 fbc5 	bl	80040b8 <RTC_ByteToBcd2>
 800392e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003930:	0022      	movs	r2, r4
 8003932:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	78db      	ldrb	r3, [r3, #3]
 8003938:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	e017      	b.n	8003970 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2240      	movs	r2, #64	@ 0x40
 8003948:	4013      	ands	r3, r2
 800394a:	d102      	bne.n	8003952 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2200      	movs	r2, #0
 8003950:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	785b      	ldrb	r3, [r3, #1]
 800395c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800395e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003964:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	78db      	ldrb	r3, [r3, #3]
 800396a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	491b      	ldr	r1, [pc, #108]	@ (80039e4 <HAL_RTC_SetTime+0x148>)
 8003978:	400a      	ands	r2, r1
 800397a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4918      	ldr	r1, [pc, #96]	@ (80039e8 <HAL_RTC_SetTime+0x14c>)
 8003988:	400a      	ands	r2, r1
 800398a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6999      	ldr	r1, [r3, #24]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	431a      	orrs	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80039a4:	2313      	movs	r3, #19
 80039a6:	18fc      	adds	r4, r7, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	0018      	movs	r0, r3
 80039ac:	f000 fb40 	bl	8004030 <RTC_ExitInitMode>
 80039b0:	0003      	movs	r3, r0
 80039b2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	22ff      	movs	r2, #255	@ 0xff
 80039ba:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 80039bc:	2313      	movs	r3, #19
 80039be:	18fb      	adds	r3, r7, r3
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d103      	bne.n	80039ce <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2229      	movs	r2, #41	@ 0x29
 80039ca:	2101      	movs	r1, #1
 80039cc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2228      	movs	r2, #40	@ 0x28
 80039d2:	2100      	movs	r1, #0
 80039d4:	5499      	strb	r1, [r3, r2]

  return status;
 80039d6:	2313      	movs	r3, #19
 80039d8:	18fb      	adds	r3, r7, r3
 80039da:	781b      	ldrb	r3, [r3, #0]
}
 80039dc:	0018      	movs	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	b006      	add	sp, #24
 80039e2:	bdb0      	pop	{r4, r5, r7, pc}
 80039e4:	007f7f7f 	.word	0x007f7f7f
 80039e8:	fffbffff 	.word	0xfffbffff

080039ec <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	045b      	lsls	r3, r3, #17
 8003a0a:	0c5a      	lsrs	r2, r3, #17
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a22      	ldr	r2, [pc, #136]	@ (8003aa0 <HAL_RTC_GetTime+0xb4>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	0c1b      	lsrs	r3, r3, #16
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	223f      	movs	r2, #63	@ 0x3f
 8003a24:	4013      	ands	r3, r2
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	227f      	movs	r2, #127	@ 0x7f
 8003a34:	4013      	ands	r3, r2
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	227f      	movs	r2, #127	@ 0x7f
 8003a42:	4013      	ands	r3, r2
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	0d9b      	lsrs	r3, r3, #22
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2201      	movs	r2, #1
 8003a52:	4013      	ands	r3, r2
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d11a      	bne.n	8003a96 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	0018      	movs	r0, r3
 8003a66:	f000 fb4f 	bl	8004108 <RTC_Bcd2ToByte>
 8003a6a:	0003      	movs	r3, r0
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	785b      	ldrb	r3, [r3, #1]
 8003a76:	0018      	movs	r0, r3
 8003a78:	f000 fb46 	bl	8004108 <RTC_Bcd2ToByte>
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	001a      	movs	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	789b      	ldrb	r3, [r3, #2]
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f000 fb3d 	bl	8004108 <RTC_Bcd2ToByte>
 8003a8e:	0003      	movs	r3, r0
 8003a90:	001a      	movs	r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	0018      	movs	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b006      	add	sp, #24
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	007f7f7f 	.word	0x007f7f7f

08003aa4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003aa4:	b5b0      	push	{r4, r5, r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2228      	movs	r2, #40	@ 0x28
 8003ab4:	5c9b      	ldrb	r3, [r3, r2]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_RTC_SetDate+0x1a>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e07e      	b.n	8003bbc <HAL_RTC_SetDate+0x118>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2228      	movs	r2, #40	@ 0x28
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2229      	movs	r2, #41	@ 0x29
 8003aca:	2102      	movs	r1, #2
 8003acc:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10e      	bne.n	8003af2 <HAL_RTC_SetDate+0x4e>
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	785b      	ldrb	r3, [r3, #1]
 8003ad8:	001a      	movs	r2, r3
 8003ada:	2310      	movs	r3, #16
 8003adc:	4013      	ands	r3, r2
 8003ade:	d008      	beq.n	8003af2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	785b      	ldrb	r3, [r3, #1]
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	4393      	bics	r3, r2
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	330a      	adds	r3, #10
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d11c      	bne.n	8003b32 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	78db      	ldrb	r3, [r3, #3]
 8003afc:	0018      	movs	r0, r3
 8003afe:	f000 fadb 	bl	80040b8 <RTC_ByteToBcd2>
 8003b02:	0003      	movs	r3, r0
 8003b04:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	785b      	ldrb	r3, [r3, #1]
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f000 fad4 	bl	80040b8 <RTC_ByteToBcd2>
 8003b10:	0003      	movs	r3, r0
 8003b12:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003b14:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	789b      	ldrb	r3, [r3, #2]
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f000 facc 	bl	80040b8 <RTC_ByteToBcd2>
 8003b20:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003b22:	0022      	movs	r2, r4
 8003b24:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	e00e      	b.n	8003b50 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	78db      	ldrb	r3, [r3, #3]
 8003b36:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	785b      	ldrb	r3, [r3, #1]
 8003b3c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003b3e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003b44:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	22ca      	movs	r2, #202	@ 0xca
 8003b56:	625a      	str	r2, [r3, #36]	@ 0x24
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2253      	movs	r2, #83	@ 0x53
 8003b5e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003b60:	2513      	movs	r5, #19
 8003b62:	197c      	adds	r4, r7, r5
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	0018      	movs	r0, r3
 8003b68:	f000 fa20 	bl	8003fac <RTC_EnterInitMode>
 8003b6c:	0003      	movs	r3, r0
 8003b6e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003b70:	0028      	movs	r0, r5
 8003b72:	183b      	adds	r3, r7, r0
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10c      	bne.n	8003b94 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	4910      	ldr	r1, [pc, #64]	@ (8003bc4 <HAL_RTC_SetDate+0x120>)
 8003b82:	400a      	ands	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003b86:	183c      	adds	r4, r7, r0
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f000 fa50 	bl	8004030 <RTC_ExitInitMode>
 8003b90:	0003      	movs	r3, r0
 8003b92:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	22ff      	movs	r2, #255	@ 0xff
 8003b9a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8003b9c:	2313      	movs	r3, #19
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d103      	bne.n	8003bae <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2229      	movs	r2, #41	@ 0x29
 8003baa:	2101      	movs	r1, #1
 8003bac:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2228      	movs	r2, #40	@ 0x28
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	5499      	strb	r1, [r3, r2]

  return status;
 8003bb6:	2313      	movs	r3, #19
 8003bb8:	18fb      	adds	r3, r7, r3
 8003bba:	781b      	ldrb	r3, [r3, #0]
}
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b006      	add	sp, #24
 8003bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8003bc4:	00ffff3f 	.word	0x00ffff3f

08003bc8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4a21      	ldr	r2, [pc, #132]	@ (8003c60 <HAL_RTC_GetDate+0x98>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	0c1b      	lsrs	r3, r3, #16
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	221f      	movs	r2, #31
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	223f      	movs	r2, #63	@ 0x3f
 8003c00:	4013      	ands	r3, r2
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	0b5b      	lsrs	r3, r3, #13
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2207      	movs	r2, #7
 8003c10:	4013      	ands	r3, r2
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d11a      	bne.n	8003c54 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	78db      	ldrb	r3, [r3, #3]
 8003c22:	0018      	movs	r0, r3
 8003c24:	f000 fa70 	bl	8004108 <RTC_Bcd2ToByte>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	001a      	movs	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	785b      	ldrb	r3, [r3, #1]
 8003c34:	0018      	movs	r0, r3
 8003c36:	f000 fa67 	bl	8004108 <RTC_Bcd2ToByte>
 8003c3a:	0003      	movs	r3, r0
 8003c3c:	001a      	movs	r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	789b      	ldrb	r3, [r3, #2]
 8003c46:	0018      	movs	r0, r3
 8003c48:	f000 fa5e 	bl	8004108 <RTC_Bcd2ToByte>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	001a      	movs	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	0018      	movs	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b006      	add	sp, #24
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			@ (mov r8, r8)
 8003c60:	00ffff3f 	.word	0x00ffff3f

08003c64 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003c64:	b590      	push	{r4, r7, lr}
 8003c66:	b089      	sub	sp, #36	@ 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2228      	movs	r2, #40	@ 0x28
 8003c74:	5c9b      	ldrb	r3, [r3, r2]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_RTC_SetAlarm_IT+0x1a>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e127      	b.n	8003ece <HAL_RTC_SetAlarm_IT+0x26a>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2228      	movs	r2, #40	@ 0x28
 8003c82:	2101      	movs	r1, #1
 8003c84:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2229      	movs	r2, #41	@ 0x29
 8003c8a:	2102      	movs	r1, #2
 8003c8c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d136      	bne.n	8003d02 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2240      	movs	r2, #64	@ 0x40
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d102      	bne.n	8003ca6 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	0018      	movs	r0, r3
 8003cac:	f000 fa04 	bl	80040b8 <RTC_ByteToBcd2>
 8003cb0:	0003      	movs	r3, r0
 8003cb2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	785b      	ldrb	r3, [r3, #1]
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f000 f9fd 	bl	80040b8 <RTC_ByteToBcd2>
 8003cbe:	0003      	movs	r3, r0
 8003cc0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003cc2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	789b      	ldrb	r3, [r3, #2]
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f000 f9f5 	bl	80040b8 <RTC_ByteToBcd2>
 8003cce:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003cd0:	0022      	movs	r2, r4
 8003cd2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	78db      	ldrb	r3, [r3, #3]
 8003cd8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	5c9b      	ldrb	r3, [r3, r2]
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f000 f9e7 	bl	80040b8 <RTC_ByteToBcd2>
 8003cea:	0003      	movs	r3, r0
 8003cec:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003cee:	0022      	movs	r2, r4
 8003cf0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003cf6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61fb      	str	r3, [r7, #28]
 8003d00:	e022      	b.n	8003d48 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	2240      	movs	r2, #64	@ 0x40
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	d102      	bne.n	8003d14 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2200      	movs	r2, #0
 8003d12:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	785b      	ldrb	r3, [r3, #1]
 8003d1e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d20:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003d26:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	78db      	ldrb	r3, [r3, #3]
 8003d2c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003d2e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2120      	movs	r1, #32
 8003d34:	5c5b      	ldrb	r3, [r3, r1]
 8003d36:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003d38:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003d3e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	22ca      	movs	r2, #202	@ 0xca
 8003d5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2253      	movs	r2, #83	@ 0x53
 8003d62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d68:	2380      	movs	r3, #128	@ 0x80
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d14c      	bne.n	8003e0a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699a      	ldr	r2, [r3, #24]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4957      	ldr	r1, [pc, #348]	@ (8003ed8 <HAL_RTC_SetAlarm_IT+0x274>)
 8003d7c:	400a      	ands	r2, r1
 8003d7e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8003d90:	f7fd fde4 	bl	800195c <HAL_GetTick>
 8003d94:	0003      	movs	r3, r0
 8003d96:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003d98:	e016      	b.n	8003dc8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003d9a:	f7fd fddf 	bl	800195c <HAL_GetTick>
 8003d9e:	0002      	movs	r2, r0
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	1ad2      	subs	r2, r2, r3
 8003da4:	23fa      	movs	r3, #250	@ 0xfa
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d90d      	bls.n	8003dc8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	22ff      	movs	r2, #255	@ 0xff
 8003db2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2229      	movs	r2, #41	@ 0x29
 8003db8:	2103      	movs	r1, #3
 8003dba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2228      	movs	r2, #40	@ 0x28
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e082      	b.n	8003ece <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d0e2      	beq.n	8003d9a <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699a      	ldr	r2, [r3, #24]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2180      	movs	r1, #128	@ 0x80
 8003df0:	0049      	lsls	r1, r1, #1
 8003df2:	430a      	orrs	r2, r1
 8003df4:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699a      	ldr	r2, [r3, #24]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2180      	movs	r1, #128	@ 0x80
 8003e02:	0149      	lsls	r1, r1, #5
 8003e04:	430a      	orrs	r2, r1
 8003e06:	619a      	str	r2, [r3, #24]
 8003e08:	e04b      	b.n	8003ea2 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699a      	ldr	r2, [r3, #24]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4931      	ldr	r1, [pc, #196]	@ (8003edc <HAL_RTC_SetAlarm_IT+0x278>)
 8003e16:	400a      	ands	r2, r1
 8003e18:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2102      	movs	r1, #2
 8003e26:	430a      	orrs	r2, r1
 8003e28:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8003e2a:	f7fd fd97 	bl	800195c <HAL_GetTick>
 8003e2e:	0003      	movs	r3, r0
 8003e30:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003e32:	e016      	b.n	8003e62 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003e34:	f7fd fd92 	bl	800195c <HAL_GetTick>
 8003e38:	0002      	movs	r2, r0
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	1ad2      	subs	r2, r2, r3
 8003e3e:	23fa      	movs	r3, #250	@ 0xfa
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d90d      	bls.n	8003e62 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	22ff      	movs	r2, #255	@ 0xff
 8003e4c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2229      	movs	r2, #41	@ 0x29
 8003e52:	2103      	movs	r1, #3
 8003e54:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2228      	movs	r2, #40	@ 0x28
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e035      	b.n	8003ece <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d0e2      	beq.n	8003e34 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69fa      	ldr	r2, [r7, #28]
 8003e74:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699a      	ldr	r2, [r3, #24]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2180      	movs	r1, #128	@ 0x80
 8003e8a:	0089      	lsls	r1, r1, #2
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2180      	movs	r1, #128	@ 0x80
 8003e9c:	0189      	lsls	r1, r1, #6
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003ea2:	4a0f      	ldr	r2, [pc, #60]	@ (8003ee0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8003ea4:	2380      	movs	r3, #128	@ 0x80
 8003ea6:	58d3      	ldr	r3, [r2, r3]
 8003ea8:	490d      	ldr	r1, [pc, #52]	@ (8003ee0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8003eaa:	2280      	movs	r2, #128	@ 0x80
 8003eac:	0312      	lsls	r2, r2, #12
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	2280      	movs	r2, #128	@ 0x80
 8003eb2:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	22ff      	movs	r2, #255	@ 0xff
 8003eba:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2229      	movs	r2, #41	@ 0x29
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2228      	movs	r2, #40	@ 0x28
 8003ec8:	2100      	movs	r1, #0
 8003eca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	0018      	movs	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b009      	add	sp, #36	@ 0x24
 8003ed4:	bd90      	pop	{r4, r7, pc}
 8003ed6:	46c0      	nop			@ (mov r8, r8)
 8003ed8:	fffffeff 	.word	0xfffffeff
 8003edc:	fffffdff 	.word	0xfffffdff
 8003ee0:	40021800 	.word	0x40021800

08003ee4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	2380      	movs	r3, #128	@ 0x80
 8003ef4:	015b      	lsls	r3, r3, #5
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d011      	beq.n	8003f1e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f00:	2201      	movs	r2, #1
 8003f02:	4013      	ands	r3, r2
 8003f04:	d00b      	beq.n	8003f1e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2101      	movs	r1, #1
 8003f12:	430a      	orrs	r2, r1
 8003f14:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f7fc fd35 	bl	8000988 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	699a      	ldr	r2, [r3, #24]
 8003f24:	2380      	movs	r3, #128	@ 0x80
 8003f26:	019b      	lsls	r3, r3, #6
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d011      	beq.n	8003f50 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f32:	2202      	movs	r2, #2
 8003f34:	4013      	ands	r3, r2
 8003f36:	d00b      	beq.n	8003f50 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2102      	movs	r1, #2
 8003f44:	430a      	orrs	r2, r1
 8003f46:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f000 f942 	bl	80041d4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2229      	movs	r2, #41	@ 0x29
 8003f54:	2101      	movs	r1, #1
 8003f56:	5499      	strb	r1, [r3, r2]
}
 8003f58:	46c0      	nop			@ (mov r8, r8)
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b002      	add	sp, #8
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a0e      	ldr	r2, [pc, #56]	@ (8003fa8 <HAL_RTC_WaitForSynchro+0x48>)
 8003f6e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003f70:	f7fd fcf4 	bl	800195c <HAL_GetTick>
 8003f74:	0003      	movs	r3, r0
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003f78:	e00a      	b.n	8003f90 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003f7a:	f7fd fcef 	bl	800195c <HAL_GetTick>
 8003f7e:	0002      	movs	r2, r0
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	1ad2      	subs	r2, r2, r3
 8003f84:	23fa      	movs	r3, #250	@ 0xfa
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d901      	bls.n	8003f90 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e006      	b.n	8003f9e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d0ee      	beq.n	8003f7a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	b004      	add	sp, #16
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	46c0      	nop			@ (mov r8, r8)
 8003fa8:	0001005f 	.word	0x0001005f

08003fac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8003fb4:	230f      	movs	r3, #15
 8003fb6:	18fb      	adds	r3, r7, r3
 8003fb8:	2200      	movs	r2, #0
 8003fba:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	2240      	movs	r2, #64	@ 0x40
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d12c      	bne.n	8004022 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2180      	movs	r1, #128	@ 0x80
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003fd8:	f7fd fcc0 	bl	800195c <HAL_GetTick>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003fe0:	e014      	b.n	800400c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003fe2:	f7fd fcbb 	bl	800195c <HAL_GetTick>
 8003fe6:	0002      	movs	r2, r0
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	1ad2      	subs	r2, r2, r3
 8003fec:	200f      	movs	r0, #15
 8003fee:	183b      	adds	r3, r7, r0
 8003ff0:	1839      	adds	r1, r7, r0
 8003ff2:	7809      	ldrb	r1, [r1, #0]
 8003ff4:	7019      	strb	r1, [r3, #0]
 8003ff6:	23fa      	movs	r3, #250	@ 0xfa
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d906      	bls.n	800400c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8003ffe:	183b      	adds	r3, r7, r0
 8004000:	2203      	movs	r2, #3
 8004002:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2229      	movs	r2, #41	@ 0x29
 8004008:	2103      	movs	r1, #3
 800400a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	2240      	movs	r2, #64	@ 0x40
 8004014:	4013      	ands	r3, r2
 8004016:	d104      	bne.n	8004022 <RTC_EnterInitMode+0x76>
 8004018:	230f      	movs	r3, #15
 800401a:	18fb      	adds	r3, r7, r3
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b03      	cmp	r3, #3
 8004020:	d1df      	bne.n	8003fe2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004022:	230f      	movs	r3, #15
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	781b      	ldrb	r3, [r3, #0]
}
 8004028:	0018      	movs	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	b004      	add	sp, #16
 800402e:	bd80      	pop	{r7, pc}

08004030 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004030:	b590      	push	{r4, r7, lr}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004038:	240f      	movs	r4, #15
 800403a:	193b      	adds	r3, r7, r4
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004040:	4b1c      	ldr	r3, [pc, #112]	@ (80040b4 <RTC_ExitInitMode+0x84>)
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	4b1b      	ldr	r3, [pc, #108]	@ (80040b4 <RTC_ExitInitMode+0x84>)
 8004046:	2180      	movs	r1, #128	@ 0x80
 8004048:	438a      	bics	r2, r1
 800404a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800404c:	4b19      	ldr	r3, [pc, #100]	@ (80040b4 <RTC_ExitInitMode+0x84>)
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	2220      	movs	r2, #32
 8004052:	4013      	ands	r3, r2
 8004054:	d10d      	bne.n	8004072 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	0018      	movs	r0, r3
 800405a:	f7ff ff81 	bl	8003f60 <HAL_RTC_WaitForSynchro>
 800405e:	1e03      	subs	r3, r0, #0
 8004060:	d021      	beq.n	80040a6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2229      	movs	r2, #41	@ 0x29
 8004066:	2103      	movs	r1, #3
 8004068:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800406a:	193b      	adds	r3, r7, r4
 800406c:	2203      	movs	r2, #3
 800406e:	701a      	strb	r2, [r3, #0]
 8004070:	e019      	b.n	80040a6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004072:	4b10      	ldr	r3, [pc, #64]	@ (80040b4 <RTC_ExitInitMode+0x84>)
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	4b0f      	ldr	r3, [pc, #60]	@ (80040b4 <RTC_ExitInitMode+0x84>)
 8004078:	2120      	movs	r1, #32
 800407a:	438a      	bics	r2, r1
 800407c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	0018      	movs	r0, r3
 8004082:	f7ff ff6d 	bl	8003f60 <HAL_RTC_WaitForSynchro>
 8004086:	1e03      	subs	r3, r0, #0
 8004088:	d007      	beq.n	800409a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2229      	movs	r2, #41	@ 0x29
 800408e:	2103      	movs	r1, #3
 8004090:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004092:	230f      	movs	r3, #15
 8004094:	18fb      	adds	r3, r7, r3
 8004096:	2203      	movs	r2, #3
 8004098:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800409a:	4b06      	ldr	r3, [pc, #24]	@ (80040b4 <RTC_ExitInitMode+0x84>)
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	4b05      	ldr	r3, [pc, #20]	@ (80040b4 <RTC_ExitInitMode+0x84>)
 80040a0:	2120      	movs	r1, #32
 80040a2:	430a      	orrs	r2, r1
 80040a4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80040a6:	230f      	movs	r3, #15
 80040a8:	18fb      	adds	r3, r7, r3
 80040aa:	781b      	ldrb	r3, [r3, #0]
}
 80040ac:	0018      	movs	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b005      	add	sp, #20
 80040b2:	bd90      	pop	{r4, r7, pc}
 80040b4:	40002800 	.word	0x40002800

080040b8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	0002      	movs	r2, r0
 80040c0:	1dfb      	adds	r3, r7, #7
 80040c2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80040c8:	230b      	movs	r3, #11
 80040ca:	18fb      	adds	r3, r7, r3
 80040cc:	1dfa      	adds	r2, r7, #7
 80040ce:	7812      	ldrb	r2, [r2, #0]
 80040d0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80040d2:	e008      	b.n	80040e6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3301      	adds	r3, #1
 80040d8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80040da:	220b      	movs	r2, #11
 80040dc:	18bb      	adds	r3, r7, r2
 80040de:	18ba      	adds	r2, r7, r2
 80040e0:	7812      	ldrb	r2, [r2, #0]
 80040e2:	3a0a      	subs	r2, #10
 80040e4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80040e6:	210b      	movs	r1, #11
 80040e8:	187b      	adds	r3, r7, r1
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b09      	cmp	r3, #9
 80040ee:	d8f1      	bhi.n	80040d4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	187b      	adds	r3, r7, r1
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	b2db      	uxtb	r3, r3
}
 8004100:	0018      	movs	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	b004      	add	sp, #16
 8004106:	bd80      	pop	{r7, pc}

08004108 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	0002      	movs	r2, r0
 8004110:	1dfb      	adds	r3, r7, #7
 8004112:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004114:	1dfb      	adds	r3, r7, #7
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	091b      	lsrs	r3, r3, #4
 800411a:	b2db      	uxtb	r3, r3
 800411c:	001a      	movs	r2, r3
 800411e:	0013      	movs	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	189b      	adds	r3, r3, r2
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	b2da      	uxtb	r2, r3
 800412c:	1dfb      	adds	r3, r7, #7
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	210f      	movs	r1, #15
 8004132:	400b      	ands	r3, r1
 8004134:	b2db      	uxtb	r3, r3
 8004136:	18d3      	adds	r3, r2, r3
 8004138:	b2db      	uxtb	r3, r3
}
 800413a:	0018      	movs	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	b004      	add	sp, #16
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2228      	movs	r2, #40	@ 0x28
 8004152:	5c9b      	ldrb	r3, [r3, r2]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d101      	bne.n	800415c <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8004158:	2302      	movs	r3, #2
 800415a:	e035      	b.n	80041c8 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2228      	movs	r2, #40	@ 0x28
 8004160:	2101      	movs	r1, #1
 8004162:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2229      	movs	r2, #41	@ 0x29
 8004168:	2102      	movs	r1, #2
 800416a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	22ca      	movs	r2, #202	@ 0xca
 8004172:	625a      	str	r2, [r3, #36]	@ 0x24
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2253      	movs	r2, #83	@ 0x53
 800417a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699a      	ldr	r2, [r3, #24]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4912      	ldr	r1, [pc, #72]	@ (80041d0 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8004188:	400a      	ands	r2, r1
 800418a:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6999      	ldr	r1, [r3, #24]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2180      	movs	r1, #128	@ 0x80
 80041a8:	0409      	lsls	r1, r1, #16
 80041aa:	430a      	orrs	r2, r1
 80041ac:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	22ff      	movs	r2, #255	@ 0xff
 80041b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2229      	movs	r2, #41	@ 0x29
 80041ba:	2101      	movs	r1, #1
 80041bc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2228      	movs	r2, #40	@ 0x28
 80041c2:	2100      	movs	r1, #0
 80041c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	0018      	movs	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b002      	add	sp, #8
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	fff7ffff 	.word	0xfff7ffff

080041d4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80041dc:	46c0      	nop			@ (mov r8, r8)
 80041de:	46bd      	mov	sp, r7
 80041e0:	b002      	add	sp, #8
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e04a      	b.n	800428c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	223d      	movs	r2, #61	@ 0x3d
 80041fa:	5c9b      	ldrb	r3, [r3, r2]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d107      	bne.n	8004212 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	223c      	movs	r2, #60	@ 0x3c
 8004206:	2100      	movs	r1, #0
 8004208:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	0018      	movs	r0, r3
 800420e:	f7fd fa57 	bl	80016c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	223d      	movs	r2, #61	@ 0x3d
 8004216:	2102      	movs	r1, #2
 8004218:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3304      	adds	r3, #4
 8004222:	0019      	movs	r1, r3
 8004224:	0010      	movs	r0, r2
 8004226:	f000 fadd 	bl	80047e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2248      	movs	r2, #72	@ 0x48
 800422e:	2101      	movs	r1, #1
 8004230:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	223e      	movs	r2, #62	@ 0x3e
 8004236:	2101      	movs	r1, #1
 8004238:	5499      	strb	r1, [r3, r2]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	223f      	movs	r2, #63	@ 0x3f
 800423e:	2101      	movs	r1, #1
 8004240:	5499      	strb	r1, [r3, r2]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2240      	movs	r2, #64	@ 0x40
 8004246:	2101      	movs	r1, #1
 8004248:	5499      	strb	r1, [r3, r2]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2241      	movs	r2, #65	@ 0x41
 800424e:	2101      	movs	r1, #1
 8004250:	5499      	strb	r1, [r3, r2]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2242      	movs	r2, #66	@ 0x42
 8004256:	2101      	movs	r1, #1
 8004258:	5499      	strb	r1, [r3, r2]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2243      	movs	r2, #67	@ 0x43
 800425e:	2101      	movs	r1, #1
 8004260:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2244      	movs	r2, #68	@ 0x44
 8004266:	2101      	movs	r1, #1
 8004268:	5499      	strb	r1, [r3, r2]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2245      	movs	r2, #69	@ 0x45
 800426e:	2101      	movs	r1, #1
 8004270:	5499      	strb	r1, [r3, r2]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2246      	movs	r2, #70	@ 0x46
 8004276:	2101      	movs	r1, #1
 8004278:	5499      	strb	r1, [r3, r2]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2247      	movs	r2, #71	@ 0x47
 800427e:	2101      	movs	r1, #1
 8004280:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	223d      	movs	r2, #61	@ 0x3d
 8004286:	2101      	movs	r1, #1
 8004288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	0018      	movs	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	b002      	add	sp, #8
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	223d      	movs	r2, #61	@ 0x3d
 80042a0:	5c9b      	ldrb	r3, [r3, r2]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d001      	beq.n	80042ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e035      	b.n	8004318 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	223d      	movs	r2, #61	@ 0x3d
 80042b0:	2102      	movs	r1, #2
 80042b2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a19      	ldr	r2, [pc, #100]	@ (8004320 <HAL_TIM_Base_Start+0x8c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00a      	beq.n	80042d4 <HAL_TIM_Base_Start+0x40>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	2380      	movs	r3, #128	@ 0x80
 80042c4:	05db      	lsls	r3, r3, #23
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d004      	beq.n	80042d4 <HAL_TIM_Base_Start+0x40>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a15      	ldr	r2, [pc, #84]	@ (8004324 <HAL_TIM_Base_Start+0x90>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d116      	bne.n	8004302 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	4a13      	ldr	r2, [pc, #76]	@ (8004328 <HAL_TIM_Base_Start+0x94>)
 80042dc:	4013      	ands	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b06      	cmp	r3, #6
 80042e4:	d016      	beq.n	8004314 <HAL_TIM_Base_Start+0x80>
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	2380      	movs	r3, #128	@ 0x80
 80042ea:	025b      	lsls	r3, r3, #9
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d011      	beq.n	8004314 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2101      	movs	r1, #1
 80042fc:	430a      	orrs	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004300:	e008      	b.n	8004314 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2101      	movs	r1, #1
 800430e:	430a      	orrs	r2, r1
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	e000      	b.n	8004316 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004314:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	0018      	movs	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	b004      	add	sp, #16
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40012c00 	.word	0x40012c00
 8004324:	40000400 	.word	0x40000400
 8004328:	00010007 	.word	0x00010007

0800432c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	4a0d      	ldr	r2, [pc, #52]	@ (8004370 <HAL_TIM_Base_Stop+0x44>)
 800433c:	4013      	ands	r3, r2
 800433e:	d10d      	bne.n	800435c <HAL_TIM_Base_Stop+0x30>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	4a0b      	ldr	r2, [pc, #44]	@ (8004374 <HAL_TIM_Base_Stop+0x48>)
 8004348:	4013      	ands	r3, r2
 800434a:	d107      	bne.n	800435c <HAL_TIM_Base_Stop+0x30>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2101      	movs	r1, #1
 8004358:	438a      	bics	r2, r1
 800435a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	223d      	movs	r2, #61	@ 0x3d
 8004360:	2101      	movs	r1, #1
 8004362:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	0018      	movs	r0, r3
 8004368:	46bd      	mov	sp, r7
 800436a:	b002      	add	sp, #8
 800436c:	bd80      	pop	{r7, pc}
 800436e:	46c0      	nop			@ (mov r8, r8)
 8004370:	00001111 	.word	0x00001111
 8004374:	00000444 	.word	0x00000444

08004378 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e04a      	b.n	8004420 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	223d      	movs	r2, #61	@ 0x3d
 800438e:	5c9b      	ldrb	r3, [r3, r2]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d107      	bne.n	80043a6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	223c      	movs	r2, #60	@ 0x3c
 800439a:	2100      	movs	r1, #0
 800439c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	0018      	movs	r0, r3
 80043a2:	f7fd f971 	bl	8001688 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	223d      	movs	r2, #61	@ 0x3d
 80043aa:	2102      	movs	r1, #2
 80043ac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3304      	adds	r3, #4
 80043b6:	0019      	movs	r1, r3
 80043b8:	0010      	movs	r0, r2
 80043ba:	f000 fa13 	bl	80047e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2248      	movs	r2, #72	@ 0x48
 80043c2:	2101      	movs	r1, #1
 80043c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	223e      	movs	r2, #62	@ 0x3e
 80043ca:	2101      	movs	r1, #1
 80043cc:	5499      	strb	r1, [r3, r2]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	223f      	movs	r2, #63	@ 0x3f
 80043d2:	2101      	movs	r1, #1
 80043d4:	5499      	strb	r1, [r3, r2]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2240      	movs	r2, #64	@ 0x40
 80043da:	2101      	movs	r1, #1
 80043dc:	5499      	strb	r1, [r3, r2]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2241      	movs	r2, #65	@ 0x41
 80043e2:	2101      	movs	r1, #1
 80043e4:	5499      	strb	r1, [r3, r2]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2242      	movs	r2, #66	@ 0x42
 80043ea:	2101      	movs	r1, #1
 80043ec:	5499      	strb	r1, [r3, r2]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2243      	movs	r2, #67	@ 0x43
 80043f2:	2101      	movs	r1, #1
 80043f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2244      	movs	r2, #68	@ 0x44
 80043fa:	2101      	movs	r1, #1
 80043fc:	5499      	strb	r1, [r3, r2]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2245      	movs	r2, #69	@ 0x45
 8004402:	2101      	movs	r1, #1
 8004404:	5499      	strb	r1, [r3, r2]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2246      	movs	r2, #70	@ 0x46
 800440a:	2101      	movs	r1, #1
 800440c:	5499      	strb	r1, [r3, r2]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2247      	movs	r2, #71	@ 0x47
 8004412:	2101      	movs	r1, #1
 8004414:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	223d      	movs	r2, #61	@ 0x3d
 800441a:	2101      	movs	r1, #1
 800441c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	0018      	movs	r0, r3
 8004422:	46bd      	mov	sp, r7
 8004424:	b002      	add	sp, #8
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d108      	bne.n	800444a <HAL_TIM_PWM_Start+0x22>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	223e      	movs	r2, #62	@ 0x3e
 800443c:	5c9b      	ldrb	r3, [r3, r2]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	1e5a      	subs	r2, r3, #1
 8004444:	4193      	sbcs	r3, r2
 8004446:	b2db      	uxtb	r3, r3
 8004448:	e037      	b.n	80044ba <HAL_TIM_PWM_Start+0x92>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b04      	cmp	r3, #4
 800444e:	d108      	bne.n	8004462 <HAL_TIM_PWM_Start+0x3a>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	223f      	movs	r2, #63	@ 0x3f
 8004454:	5c9b      	ldrb	r3, [r3, r2]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	1e5a      	subs	r2, r3, #1
 800445c:	4193      	sbcs	r3, r2
 800445e:	b2db      	uxtb	r3, r3
 8004460:	e02b      	b.n	80044ba <HAL_TIM_PWM_Start+0x92>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b08      	cmp	r3, #8
 8004466:	d108      	bne.n	800447a <HAL_TIM_PWM_Start+0x52>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2240      	movs	r2, #64	@ 0x40
 800446c:	5c9b      	ldrb	r3, [r3, r2]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	1e5a      	subs	r2, r3, #1
 8004474:	4193      	sbcs	r3, r2
 8004476:	b2db      	uxtb	r3, r3
 8004478:	e01f      	b.n	80044ba <HAL_TIM_PWM_Start+0x92>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b0c      	cmp	r3, #12
 800447e:	d108      	bne.n	8004492 <HAL_TIM_PWM_Start+0x6a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2241      	movs	r2, #65	@ 0x41
 8004484:	5c9b      	ldrb	r3, [r3, r2]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	1e5a      	subs	r2, r3, #1
 800448c:	4193      	sbcs	r3, r2
 800448e:	b2db      	uxtb	r3, r3
 8004490:	e013      	b.n	80044ba <HAL_TIM_PWM_Start+0x92>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b10      	cmp	r3, #16
 8004496:	d108      	bne.n	80044aa <HAL_TIM_PWM_Start+0x82>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2242      	movs	r2, #66	@ 0x42
 800449c:	5c9b      	ldrb	r3, [r3, r2]
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	1e5a      	subs	r2, r3, #1
 80044a4:	4193      	sbcs	r3, r2
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	e007      	b.n	80044ba <HAL_TIM_PWM_Start+0x92>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2243      	movs	r2, #67	@ 0x43
 80044ae:	5c9b      	ldrb	r3, [r3, r2]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	1e5a      	subs	r2, r3, #1
 80044b6:	4193      	sbcs	r3, r2
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e081      	b.n	80045c6 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d104      	bne.n	80044d2 <HAL_TIM_PWM_Start+0xaa>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	223e      	movs	r2, #62	@ 0x3e
 80044cc:	2102      	movs	r1, #2
 80044ce:	5499      	strb	r1, [r3, r2]
 80044d0:	e023      	b.n	800451a <HAL_TIM_PWM_Start+0xf2>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d104      	bne.n	80044e2 <HAL_TIM_PWM_Start+0xba>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	223f      	movs	r2, #63	@ 0x3f
 80044dc:	2102      	movs	r1, #2
 80044de:	5499      	strb	r1, [r3, r2]
 80044e0:	e01b      	b.n	800451a <HAL_TIM_PWM_Start+0xf2>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d104      	bne.n	80044f2 <HAL_TIM_PWM_Start+0xca>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2240      	movs	r2, #64	@ 0x40
 80044ec:	2102      	movs	r1, #2
 80044ee:	5499      	strb	r1, [r3, r2]
 80044f0:	e013      	b.n	800451a <HAL_TIM_PWM_Start+0xf2>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b0c      	cmp	r3, #12
 80044f6:	d104      	bne.n	8004502 <HAL_TIM_PWM_Start+0xda>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2241      	movs	r2, #65	@ 0x41
 80044fc:	2102      	movs	r1, #2
 80044fe:	5499      	strb	r1, [r3, r2]
 8004500:	e00b      	b.n	800451a <HAL_TIM_PWM_Start+0xf2>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b10      	cmp	r3, #16
 8004506:	d104      	bne.n	8004512 <HAL_TIM_PWM_Start+0xea>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2242      	movs	r2, #66	@ 0x42
 800450c:	2102      	movs	r1, #2
 800450e:	5499      	strb	r1, [r3, r2]
 8004510:	e003      	b.n	800451a <HAL_TIM_PWM_Start+0xf2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2243      	movs	r2, #67	@ 0x43
 8004516:	2102      	movs	r1, #2
 8004518:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6839      	ldr	r1, [r7, #0]
 8004520:	2201      	movs	r2, #1
 8004522:	0018      	movs	r0, r3
 8004524:	f000 fc7e 	bl	8004e24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a28      	ldr	r2, [pc, #160]	@ (80045d0 <HAL_TIM_PWM_Start+0x1a8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d009      	beq.n	8004546 <HAL_TIM_PWM_Start+0x11e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a27      	ldr	r2, [pc, #156]	@ (80045d4 <HAL_TIM_PWM_Start+0x1ac>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <HAL_TIM_PWM_Start+0x11e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a25      	ldr	r2, [pc, #148]	@ (80045d8 <HAL_TIM_PWM_Start+0x1b0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d101      	bne.n	800454a <HAL_TIM_PWM_Start+0x122>
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <HAL_TIM_PWM_Start+0x124>
 800454a:	2300      	movs	r3, #0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d008      	beq.n	8004562 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2180      	movs	r1, #128	@ 0x80
 800455c:	0209      	lsls	r1, r1, #8
 800455e:	430a      	orrs	r2, r1
 8004560:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1a      	ldr	r2, [pc, #104]	@ (80045d0 <HAL_TIM_PWM_Start+0x1a8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00a      	beq.n	8004582 <HAL_TIM_PWM_Start+0x15a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	2380      	movs	r3, #128	@ 0x80
 8004572:	05db      	lsls	r3, r3, #23
 8004574:	429a      	cmp	r2, r3
 8004576:	d004      	beq.n	8004582 <HAL_TIM_PWM_Start+0x15a>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a17      	ldr	r2, [pc, #92]	@ (80045dc <HAL_TIM_PWM_Start+0x1b4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d116      	bne.n	80045b0 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	4a15      	ldr	r2, [pc, #84]	@ (80045e0 <HAL_TIM_PWM_Start+0x1b8>)
 800458a:	4013      	ands	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b06      	cmp	r3, #6
 8004592:	d016      	beq.n	80045c2 <HAL_TIM_PWM_Start+0x19a>
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	2380      	movs	r3, #128	@ 0x80
 8004598:	025b      	lsls	r3, r3, #9
 800459a:	429a      	cmp	r2, r3
 800459c:	d011      	beq.n	80045c2 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2101      	movs	r1, #1
 80045aa:	430a      	orrs	r2, r1
 80045ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ae:	e008      	b.n	80045c2 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2101      	movs	r1, #1
 80045bc:	430a      	orrs	r2, r1
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	e000      	b.n	80045c4 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	0018      	movs	r0, r3
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b004      	add	sp, #16
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	46c0      	nop			@ (mov r8, r8)
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40014400 	.word	0x40014400
 80045d8:	40014800 	.word	0x40014800
 80045dc:	40000400 	.word	0x40000400
 80045e0:	00010007 	.word	0x00010007

080045e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f0:	2317      	movs	r3, #23
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	2200      	movs	r2, #0
 80045f6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	223c      	movs	r2, #60	@ 0x3c
 80045fc:	5c9b      	ldrb	r3, [r3, r2]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004602:	2302      	movs	r3, #2
 8004604:	e0e5      	b.n	80047d2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	223c      	movs	r2, #60	@ 0x3c
 800460a:	2101      	movs	r1, #1
 800460c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b14      	cmp	r3, #20
 8004612:	d900      	bls.n	8004616 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004614:	e0d1      	b.n	80047ba <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	009a      	lsls	r2, r3, #2
 800461a:	4b70      	ldr	r3, [pc, #448]	@ (80047dc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800461c:	18d3      	adds	r3, r2, r3
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	0011      	movs	r1, r2
 800462a:	0018      	movs	r0, r3
 800462c:	f000 f95e 	bl	80048ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2108      	movs	r1, #8
 800463c:	430a      	orrs	r2, r1
 800463e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2104      	movs	r1, #4
 800464c:	438a      	bics	r2, r1
 800464e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6999      	ldr	r1, [r3, #24]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	691a      	ldr	r2, [r3, #16]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	619a      	str	r2, [r3, #24]
      break;
 8004662:	e0af      	b.n	80047c4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	0011      	movs	r1, r2
 800466c:	0018      	movs	r0, r3
 800466e:	f000 f9bd 	bl	80049ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	699a      	ldr	r2, [r3, #24]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2180      	movs	r1, #128	@ 0x80
 800467e:	0109      	lsls	r1, r1, #4
 8004680:	430a      	orrs	r2, r1
 8004682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699a      	ldr	r2, [r3, #24]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4954      	ldr	r1, [pc, #336]	@ (80047e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004690:	400a      	ands	r2, r1
 8004692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6999      	ldr	r1, [r3, #24]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	021a      	lsls	r2, r3, #8
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	619a      	str	r2, [r3, #24]
      break;
 80046a8:	e08c      	b.n	80047c4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	0011      	movs	r1, r2
 80046b2:	0018      	movs	r0, r3
 80046b4:	f000 fa18 	bl	8004ae8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	69da      	ldr	r2, [r3, #28]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2108      	movs	r1, #8
 80046c4:	430a      	orrs	r2, r1
 80046c6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	69da      	ldr	r2, [r3, #28]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2104      	movs	r1, #4
 80046d4:	438a      	bics	r2, r1
 80046d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	69d9      	ldr	r1, [r3, #28]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	61da      	str	r2, [r3, #28]
      break;
 80046ea:	e06b      	b.n	80047c4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	0011      	movs	r1, r2
 80046f4:	0018      	movs	r0, r3
 80046f6:	f000 fa79 	bl	8004bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2180      	movs	r1, #128	@ 0x80
 8004706:	0109      	lsls	r1, r1, #4
 8004708:	430a      	orrs	r2, r1
 800470a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69da      	ldr	r2, [r3, #28]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4932      	ldr	r1, [pc, #200]	@ (80047e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004718:	400a      	ands	r2, r1
 800471a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69d9      	ldr	r1, [r3, #28]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	021a      	lsls	r2, r3, #8
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	61da      	str	r2, [r3, #28]
      break;
 8004730:	e048      	b.n	80047c4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	0011      	movs	r1, r2
 800473a:	0018      	movs	r0, r3
 800473c:	f000 faba 	bl	8004cb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2108      	movs	r1, #8
 800474c:	430a      	orrs	r2, r1
 800474e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2104      	movs	r1, #4
 800475c:	438a      	bics	r2, r1
 800475e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004772:	e027      	b.n	80047c4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	0011      	movs	r1, r2
 800477c:	0018      	movs	r0, r3
 800477e:	f000 faf3 	bl	8004d68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2180      	movs	r1, #128	@ 0x80
 800478e:	0109      	lsls	r1, r1, #4
 8004790:	430a      	orrs	r2, r1
 8004792:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4910      	ldr	r1, [pc, #64]	@ (80047e0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80047a0:	400a      	ands	r2, r1
 80047a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	021a      	lsls	r2, r3, #8
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80047b8:	e004      	b.n	80047c4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80047ba:	2317      	movs	r3, #23
 80047bc:	18fb      	adds	r3, r7, r3
 80047be:	2201      	movs	r2, #1
 80047c0:	701a      	strb	r2, [r3, #0]
      break;
 80047c2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	223c      	movs	r2, #60	@ 0x3c
 80047c8:	2100      	movs	r1, #0
 80047ca:	5499      	strb	r1, [r3, r2]

  return status;
 80047cc:	2317      	movs	r3, #23
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	781b      	ldrb	r3, [r3, #0]
}
 80047d2:	0018      	movs	r0, r3
 80047d4:	46bd      	mov	sp, r7
 80047d6:	b006      	add	sp, #24
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	46c0      	nop			@ (mov r8, r8)
 80047dc:	08005000 	.word	0x08005000
 80047e0:	fffffbff 	.word	0xfffffbff

080047e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a37      	ldr	r2, [pc, #220]	@ (80048d4 <TIM_Base_SetConfig+0xf0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d008      	beq.n	800480e <TIM_Base_SetConfig+0x2a>
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	2380      	movs	r3, #128	@ 0x80
 8004800:	05db      	lsls	r3, r3, #23
 8004802:	429a      	cmp	r2, r3
 8004804:	d003      	beq.n	800480e <TIM_Base_SetConfig+0x2a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a33      	ldr	r2, [pc, #204]	@ (80048d8 <TIM_Base_SetConfig+0xf4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d108      	bne.n	8004820 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2270      	movs	r2, #112	@ 0x70
 8004812:	4393      	bics	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4313      	orrs	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a2c      	ldr	r2, [pc, #176]	@ (80048d4 <TIM_Base_SetConfig+0xf0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d014      	beq.n	8004852 <TIM_Base_SetConfig+0x6e>
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	2380      	movs	r3, #128	@ 0x80
 800482c:	05db      	lsls	r3, r3, #23
 800482e:	429a      	cmp	r2, r3
 8004830:	d00f      	beq.n	8004852 <TIM_Base_SetConfig+0x6e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a28      	ldr	r2, [pc, #160]	@ (80048d8 <TIM_Base_SetConfig+0xf4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00b      	beq.n	8004852 <TIM_Base_SetConfig+0x6e>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a27      	ldr	r2, [pc, #156]	@ (80048dc <TIM_Base_SetConfig+0xf8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d007      	beq.n	8004852 <TIM_Base_SetConfig+0x6e>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a26      	ldr	r2, [pc, #152]	@ (80048e0 <TIM_Base_SetConfig+0xfc>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d003      	beq.n	8004852 <TIM_Base_SetConfig+0x6e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a25      	ldr	r2, [pc, #148]	@ (80048e4 <TIM_Base_SetConfig+0x100>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d108      	bne.n	8004864 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4a24      	ldr	r2, [pc, #144]	@ (80048e8 <TIM_Base_SetConfig+0x104>)
 8004856:	4013      	ands	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2280      	movs	r2, #128	@ 0x80
 8004868:	4393      	bics	r3, r2
 800486a:	001a      	movs	r2, r3
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a11      	ldr	r2, [pc, #68]	@ (80048d4 <TIM_Base_SetConfig+0xf0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d007      	beq.n	80048a2 <TIM_Base_SetConfig+0xbe>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a12      	ldr	r2, [pc, #72]	@ (80048e0 <TIM_Base_SetConfig+0xfc>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d003      	beq.n	80048a2 <TIM_Base_SetConfig+0xbe>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a11      	ldr	r2, [pc, #68]	@ (80048e4 <TIM_Base_SetConfig+0x100>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d103      	bne.n	80048aa <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	691a      	ldr	r2, [r3, #16]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2201      	movs	r2, #1
 80048b6:	4013      	ands	r3, r2
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d106      	bne.n	80048ca <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	2201      	movs	r2, #1
 80048c2:	4393      	bics	r3, r2
 80048c4:	001a      	movs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	611a      	str	r2, [r3, #16]
  }
}
 80048ca:	46c0      	nop			@ (mov r8, r8)
 80048cc:	46bd      	mov	sp, r7
 80048ce:	b004      	add	sp, #16
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	46c0      	nop			@ (mov r8, r8)
 80048d4:	40012c00 	.word	0x40012c00
 80048d8:	40000400 	.word	0x40000400
 80048dc:	40002000 	.word	0x40002000
 80048e0:	40014400 	.word	0x40014400
 80048e4:	40014800 	.word	0x40014800
 80048e8:	fffffcff 	.word	0xfffffcff

080048ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	2201      	movs	r2, #1
 8004902:	4393      	bics	r3, r2
 8004904:	001a      	movs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a2e      	ldr	r2, [pc, #184]	@ (80049d4 <TIM_OC1_SetConfig+0xe8>)
 800491a:	4013      	ands	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2203      	movs	r2, #3
 8004922:	4393      	bics	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	2202      	movs	r2, #2
 8004934:	4393      	bics	r3, r2
 8004936:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a24      	ldr	r2, [pc, #144]	@ (80049d8 <TIM_OC1_SetConfig+0xec>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d007      	beq.n	800495a <TIM_OC1_SetConfig+0x6e>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a23      	ldr	r2, [pc, #140]	@ (80049dc <TIM_OC1_SetConfig+0xf0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d003      	beq.n	800495a <TIM_OC1_SetConfig+0x6e>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a22      	ldr	r2, [pc, #136]	@ (80049e0 <TIM_OC1_SetConfig+0xf4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d10c      	bne.n	8004974 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2208      	movs	r2, #8
 800495e:	4393      	bics	r3, r2
 8004960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2204      	movs	r2, #4
 8004970:	4393      	bics	r3, r2
 8004972:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a18      	ldr	r2, [pc, #96]	@ (80049d8 <TIM_OC1_SetConfig+0xec>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d007      	beq.n	800498c <TIM_OC1_SetConfig+0xa0>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a17      	ldr	r2, [pc, #92]	@ (80049dc <TIM_OC1_SetConfig+0xf0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d003      	beq.n	800498c <TIM_OC1_SetConfig+0xa0>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a16      	ldr	r2, [pc, #88]	@ (80049e0 <TIM_OC1_SetConfig+0xf4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d111      	bne.n	80049b0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4a15      	ldr	r2, [pc, #84]	@ (80049e4 <TIM_OC1_SetConfig+0xf8>)
 8004990:	4013      	ands	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4a14      	ldr	r2, [pc, #80]	@ (80049e8 <TIM_OC1_SetConfig+0xfc>)
 8004998:	4013      	ands	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	621a      	str	r2, [r3, #32]
}
 80049ca:	46c0      	nop			@ (mov r8, r8)
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b006      	add	sp, #24
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	fffeff8f 	.word	0xfffeff8f
 80049d8:	40012c00 	.word	0x40012c00
 80049dc:	40014400 	.word	0x40014400
 80049e0:	40014800 	.word	0x40014800
 80049e4:	fffffeff 	.word	0xfffffeff
 80049e8:	fffffdff 	.word	0xfffffdff

080049ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	2210      	movs	r2, #16
 8004a02:	4393      	bics	r3, r2
 8004a04:	001a      	movs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4a2c      	ldr	r2, [pc, #176]	@ (8004acc <TIM_OC2_SetConfig+0xe0>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4a2b      	ldr	r2, [pc, #172]	@ (8004ad0 <TIM_OC2_SetConfig+0xe4>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	021b      	lsls	r3, r3, #8
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2220      	movs	r2, #32
 8004a36:	4393      	bics	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a22      	ldr	r2, [pc, #136]	@ (8004ad4 <TIM_OC2_SetConfig+0xe8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d10d      	bne.n	8004a6a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2280      	movs	r2, #128	@ 0x80
 8004a52:	4393      	bics	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2240      	movs	r2, #64	@ 0x40
 8004a66:	4393      	bics	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a19      	ldr	r2, [pc, #100]	@ (8004ad4 <TIM_OC2_SetConfig+0xe8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d007      	beq.n	8004a82 <TIM_OC2_SetConfig+0x96>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a18      	ldr	r2, [pc, #96]	@ (8004ad8 <TIM_OC2_SetConfig+0xec>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d003      	beq.n	8004a82 <TIM_OC2_SetConfig+0x96>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a17      	ldr	r2, [pc, #92]	@ (8004adc <TIM_OC2_SetConfig+0xf0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d113      	bne.n	8004aaa <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	4a16      	ldr	r2, [pc, #88]	@ (8004ae0 <TIM_OC2_SetConfig+0xf4>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4a15      	ldr	r2, [pc, #84]	@ (8004ae4 <TIM_OC2_SetConfig+0xf8>)
 8004a8e:	4013      	ands	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	621a      	str	r2, [r3, #32]
}
 8004ac4:	46c0      	nop			@ (mov r8, r8)
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b006      	add	sp, #24
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	feff8fff 	.word	0xfeff8fff
 8004ad0:	fffffcff 	.word	0xfffffcff
 8004ad4:	40012c00 	.word	0x40012c00
 8004ad8:	40014400 	.word	0x40014400
 8004adc:	40014800 	.word	0x40014800
 8004ae0:	fffffbff 	.word	0xfffffbff
 8004ae4:	fffff7ff 	.word	0xfffff7ff

08004ae8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	4a31      	ldr	r2, [pc, #196]	@ (8004bc4 <TIM_OC3_SetConfig+0xdc>)
 8004afe:	401a      	ands	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4a2d      	ldr	r2, [pc, #180]	@ (8004bc8 <TIM_OC3_SetConfig+0xe0>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	4393      	bics	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	4a27      	ldr	r2, [pc, #156]	@ (8004bcc <TIM_OC3_SetConfig+0xe4>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a23      	ldr	r2, [pc, #140]	@ (8004bd0 <TIM_OC3_SetConfig+0xe8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d10d      	bne.n	8004b62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	4a22      	ldr	r2, [pc, #136]	@ (8004bd4 <TIM_OC3_SetConfig+0xec>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8004bd8 <TIM_OC3_SetConfig+0xf0>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a1a      	ldr	r2, [pc, #104]	@ (8004bd0 <TIM_OC3_SetConfig+0xe8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d007      	beq.n	8004b7a <TIM_OC3_SetConfig+0x92>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bdc <TIM_OC3_SetConfig+0xf4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d003      	beq.n	8004b7a <TIM_OC3_SetConfig+0x92>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a1a      	ldr	r2, [pc, #104]	@ (8004be0 <TIM_OC3_SetConfig+0xf8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d113      	bne.n	8004ba2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	4a19      	ldr	r2, [pc, #100]	@ (8004be4 <TIM_OC3_SetConfig+0xfc>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	4a18      	ldr	r2, [pc, #96]	@ (8004be8 <TIM_OC3_SetConfig+0x100>)
 8004b86:	4013      	ands	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	621a      	str	r2, [r3, #32]
}
 8004bbc:	46c0      	nop			@ (mov r8, r8)
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	b006      	add	sp, #24
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	fffffeff 	.word	0xfffffeff
 8004bc8:	fffeff8f 	.word	0xfffeff8f
 8004bcc:	fffffdff 	.word	0xfffffdff
 8004bd0:	40012c00 	.word	0x40012c00
 8004bd4:	fffff7ff 	.word	0xfffff7ff
 8004bd8:	fffffbff 	.word	0xfffffbff
 8004bdc:	40014400 	.word	0x40014400
 8004be0:	40014800 	.word	0x40014800
 8004be4:	ffffefff 	.word	0xffffefff
 8004be8:	ffffdfff 	.word	0xffffdfff

08004bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	4a24      	ldr	r2, [pc, #144]	@ (8004c94 <TIM_OC4_SetConfig+0xa8>)
 8004c02:	401a      	ands	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4a20      	ldr	r2, [pc, #128]	@ (8004c98 <TIM_OC4_SetConfig+0xac>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8004c9c <TIM_OC4_SetConfig+0xb0>)
 8004c20:	4013      	ands	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	021b      	lsls	r3, r3, #8
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	4a1b      	ldr	r2, [pc, #108]	@ (8004ca0 <TIM_OC4_SetConfig+0xb4>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	031b      	lsls	r3, r3, #12
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a17      	ldr	r2, [pc, #92]	@ (8004ca4 <TIM_OC4_SetConfig+0xb8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d007      	beq.n	8004c5c <TIM_OC4_SetConfig+0x70>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a16      	ldr	r2, [pc, #88]	@ (8004ca8 <TIM_OC4_SetConfig+0xbc>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d003      	beq.n	8004c5c <TIM_OC4_SetConfig+0x70>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a15      	ldr	r2, [pc, #84]	@ (8004cac <TIM_OC4_SetConfig+0xc0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d109      	bne.n	8004c70 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	4a14      	ldr	r2, [pc, #80]	@ (8004cb0 <TIM_OC4_SetConfig+0xc4>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	019b      	lsls	r3, r3, #6
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	621a      	str	r2, [r3, #32]
}
 8004c8a:	46c0      	nop			@ (mov r8, r8)
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	b006      	add	sp, #24
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	46c0      	nop			@ (mov r8, r8)
 8004c94:	ffffefff 	.word	0xffffefff
 8004c98:	feff8fff 	.word	0xfeff8fff
 8004c9c:	fffffcff 	.word	0xfffffcff
 8004ca0:	ffffdfff 	.word	0xffffdfff
 8004ca4:	40012c00 	.word	0x40012c00
 8004ca8:	40014400 	.word	0x40014400
 8004cac:	40014800 	.word	0x40014800
 8004cb0:	ffffbfff 	.word	0xffffbfff

08004cb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	4a21      	ldr	r2, [pc, #132]	@ (8004d50 <TIM_OC5_SetConfig+0x9c>)
 8004cca:	401a      	ands	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4a1d      	ldr	r2, [pc, #116]	@ (8004d54 <TIM_OC5_SetConfig+0xa0>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4a19      	ldr	r2, [pc, #100]	@ (8004d58 <TIM_OC5_SetConfig+0xa4>)
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	041b      	lsls	r3, r3, #16
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a15      	ldr	r2, [pc, #84]	@ (8004d5c <TIM_OC5_SetConfig+0xa8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d007      	beq.n	8004d1a <TIM_OC5_SetConfig+0x66>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a14      	ldr	r2, [pc, #80]	@ (8004d60 <TIM_OC5_SetConfig+0xac>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d003      	beq.n	8004d1a <TIM_OC5_SetConfig+0x66>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a13      	ldr	r2, [pc, #76]	@ (8004d64 <TIM_OC5_SetConfig+0xb0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d109      	bne.n	8004d2e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8004d50 <TIM_OC5_SetConfig+0x9c>)
 8004d1e:	4013      	ands	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	621a      	str	r2, [r3, #32]
}
 8004d48:	46c0      	nop			@ (mov r8, r8)
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	b006      	add	sp, #24
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	fffeffff 	.word	0xfffeffff
 8004d54:	fffeff8f 	.word	0xfffeff8f
 8004d58:	fffdffff 	.word	0xfffdffff
 8004d5c:	40012c00 	.word	0x40012c00
 8004d60:	40014400 	.word	0x40014400
 8004d64:	40014800 	.word	0x40014800

08004d68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	4a22      	ldr	r2, [pc, #136]	@ (8004e08 <TIM_OC6_SetConfig+0xa0>)
 8004d7e:	401a      	ands	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4a1e      	ldr	r2, [pc, #120]	@ (8004e0c <TIM_OC6_SetConfig+0xa4>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	4a1a      	ldr	r2, [pc, #104]	@ (8004e10 <TIM_OC6_SetConfig+0xa8>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	051b      	lsls	r3, r3, #20
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a16      	ldr	r2, [pc, #88]	@ (8004e14 <TIM_OC6_SetConfig+0xac>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d007      	beq.n	8004dd0 <TIM_OC6_SetConfig+0x68>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a15      	ldr	r2, [pc, #84]	@ (8004e18 <TIM_OC6_SetConfig+0xb0>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d003      	beq.n	8004dd0 <TIM_OC6_SetConfig+0x68>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a14      	ldr	r2, [pc, #80]	@ (8004e1c <TIM_OC6_SetConfig+0xb4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d109      	bne.n	8004de4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	4a13      	ldr	r2, [pc, #76]	@ (8004e20 <TIM_OC6_SetConfig+0xb8>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	029b      	lsls	r3, r3, #10
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	621a      	str	r2, [r3, #32]
}
 8004dfe:	46c0      	nop			@ (mov r8, r8)
 8004e00:	46bd      	mov	sp, r7
 8004e02:	b006      	add	sp, #24
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	46c0      	nop			@ (mov r8, r8)
 8004e08:	ffefffff 	.word	0xffefffff
 8004e0c:	feff8fff 	.word	0xfeff8fff
 8004e10:	ffdfffff 	.word	0xffdfffff
 8004e14:	40012c00 	.word	0x40012c00
 8004e18:	40014400 	.word	0x40014400
 8004e1c:	40014800 	.word	0x40014800
 8004e20:	fffbffff 	.word	0xfffbffff

08004e24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	221f      	movs	r2, #31
 8004e34:	4013      	ands	r3, r2
 8004e36:	2201      	movs	r2, #1
 8004e38:	409a      	lsls	r2, r3
 8004e3a:	0013      	movs	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	43d2      	mvns	r2, r2
 8004e46:	401a      	ands	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6a1a      	ldr	r2, [r3, #32]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	211f      	movs	r1, #31
 8004e54:	400b      	ands	r3, r1
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	4099      	lsls	r1, r3
 8004e5a:	000b      	movs	r3, r1
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	621a      	str	r2, [r3, #32]
}
 8004e62:	46c0      	nop			@ (mov r8, r8)
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b006      	add	sp, #24
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	223c      	movs	r2, #60	@ 0x3c
 8004e7a:	5c9b      	ldrb	r3, [r3, r2]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e050      	b.n	8004f26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	223c      	movs	r2, #60	@ 0x3c
 8004e88:	2101      	movs	r1, #1
 8004e8a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	223d      	movs	r2, #61	@ 0x3d
 8004e90:	2102      	movs	r1, #2
 8004e92:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a21      	ldr	r2, [pc, #132]	@ (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d108      	bne.n	8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4a20      	ldr	r2, [pc, #128]	@ (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2270      	movs	r2, #112	@ 0x70
 8004ec4:	4393      	bics	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a14      	ldr	r2, [pc, #80]	@ (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00a      	beq.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	2380      	movs	r3, #128	@ 0x80
 8004eea:	05db      	lsls	r3, r3, #23
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d004      	beq.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a10      	ldr	r2, [pc, #64]	@ (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d10c      	bne.n	8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2280      	movs	r2, #128	@ 0x80
 8004efe:	4393      	bics	r3, r2
 8004f00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	223d      	movs	r2, #61	@ 0x3d
 8004f18:	2101      	movs	r1, #1
 8004f1a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	223c      	movs	r2, #60	@ 0x3c
 8004f20:	2100      	movs	r1, #0
 8004f22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	0018      	movs	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b004      	add	sp, #16
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	46c0      	nop			@ (mov r8, r8)
 8004f30:	40012c00 	.word	0x40012c00
 8004f34:	ff0fffff 	.word	0xff0fffff
 8004f38:	40000400 	.word	0x40000400

08004f3c <memset>:
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	1882      	adds	r2, r0, r2
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d100      	bne.n	8004f46 <memset+0xa>
 8004f44:	4770      	bx	lr
 8004f46:	7019      	strb	r1, [r3, #0]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	e7f9      	b.n	8004f40 <memset+0x4>

08004f4c <__libc_init_array>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	2600      	movs	r6, #0
 8004f50:	4c0c      	ldr	r4, [pc, #48]	@ (8004f84 <__libc_init_array+0x38>)
 8004f52:	4d0d      	ldr	r5, [pc, #52]	@ (8004f88 <__libc_init_array+0x3c>)
 8004f54:	1b64      	subs	r4, r4, r5
 8004f56:	10a4      	asrs	r4, r4, #2
 8004f58:	42a6      	cmp	r6, r4
 8004f5a:	d109      	bne.n	8004f70 <__libc_init_array+0x24>
 8004f5c:	2600      	movs	r6, #0
 8004f5e:	f000 f819 	bl	8004f94 <_init>
 8004f62:	4c0a      	ldr	r4, [pc, #40]	@ (8004f8c <__libc_init_array+0x40>)
 8004f64:	4d0a      	ldr	r5, [pc, #40]	@ (8004f90 <__libc_init_array+0x44>)
 8004f66:	1b64      	subs	r4, r4, r5
 8004f68:	10a4      	asrs	r4, r4, #2
 8004f6a:	42a6      	cmp	r6, r4
 8004f6c:	d105      	bne.n	8004f7a <__libc_init_array+0x2e>
 8004f6e:	bd70      	pop	{r4, r5, r6, pc}
 8004f70:	00b3      	lsls	r3, r6, #2
 8004f72:	58eb      	ldr	r3, [r5, r3]
 8004f74:	4798      	blx	r3
 8004f76:	3601      	adds	r6, #1
 8004f78:	e7ee      	b.n	8004f58 <__libc_init_array+0xc>
 8004f7a:	00b3      	lsls	r3, r6, #2
 8004f7c:	58eb      	ldr	r3, [r5, r3]
 8004f7e:	4798      	blx	r3
 8004f80:	3601      	adds	r6, #1
 8004f82:	e7f2      	b.n	8004f6a <__libc_init_array+0x1e>
 8004f84:	08005054 	.word	0x08005054
 8004f88:	08005054 	.word	0x08005054
 8004f8c:	08005058 	.word	0x08005058
 8004f90:	08005054 	.word	0x08005054

08004f94 <_init>:
 8004f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f96:	46c0      	nop			@ (mov r8, r8)
 8004f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9a:	bc08      	pop	{r3}
 8004f9c:	469e      	mov	lr, r3
 8004f9e:	4770      	bx	lr

08004fa0 <_fini>:
 8004fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa2:	46c0      	nop			@ (mov r8, r8)
 8004fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa6:	bc08      	pop	{r3}
 8004fa8:	469e      	mov	lr, r3
 8004faa:	4770      	bx	lr
