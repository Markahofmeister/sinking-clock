
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025d8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002694  08002694  00012694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026d4  080026d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026d4  080026d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026d4  080026d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026d4  080026d4  000126d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026d8  080026d8  000126d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  080026e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080026e8  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f78  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a8e  00000000  00000000  00028fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0002aa40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002b3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016044  00000000  00000000  0002bca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a630  00000000  00000000  00041cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f6ad  00000000  00000000  0004c31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db9c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002184  00000000  00000000  000dba1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800267c 	.word	0x0800267c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800267c 	.word	0x0800267c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fad2 	bl	80007c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f810 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f912 	bl	8000450 <MX_GPIO_Init>
  MX_ADC1_Init();
 800022c:	f000 f86e 	bl	800030c <MX_ADC1_Init>
  MX_RTC_Init();
 8000230:	f000 f8d8 	bl	80003e4 <MX_RTC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Enable Cap. touch
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000234:	2380      	movs	r3, #128	; 0x80
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <main+0x28>)
 800023a:	2201      	movs	r2, #1
 800023c:	0019      	movs	r1, r3
 800023e:	f001 f9df 	bl	8001600 <HAL_GPIO_WritePin>
  while (1)
 8000242:	e7fe      	b.n	8000242 <main+0x26>
 8000244:	50000400 	.word	0x50000400

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b590      	push	{r4, r7, lr}
 800024a:	b093      	sub	sp, #76	; 0x4c
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	2410      	movs	r4, #16
 8000250:	193b      	adds	r3, r7, r4
 8000252:	0018      	movs	r0, r3
 8000254:	2338      	movs	r3, #56	; 0x38
 8000256:	001a      	movs	r2, r3
 8000258:	2100      	movs	r1, #0
 800025a:	f002 fa07 	bl	800266c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025e:	003b      	movs	r3, r7
 8000260:	0018      	movs	r0, r3
 8000262:	2310      	movs	r3, #16
 8000264:	001a      	movs	r2, r3
 8000266:	2100      	movs	r1, #0
 8000268:	f002 fa00 	bl	800266c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800026c:	2380      	movs	r3, #128	; 0x80
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	0018      	movs	r0, r3
 8000272:	f001 f9e3 	bl	800163c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000276:	193b      	adds	r3, r7, r4
 8000278:	220a      	movs	r2, #10
 800027a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	193b      	adds	r3, r7, r4
 800027e:	2280      	movs	r2, #128	; 0x80
 8000280:	0052      	lsls	r2, r2, #1
 8000282:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000284:	0021      	movs	r1, r4
 8000286:	187b      	adds	r3, r7, r1
 8000288:	2200      	movs	r2, #0
 800028a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028c:	187b      	adds	r3, r7, r1
 800028e:	2240      	movs	r2, #64	; 0x40
 8000290:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2201      	movs	r2, #1
 8000296:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2202      	movs	r2, #2
 800029c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2202      	movs	r2, #2
 80002a2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2200      	movs	r2, #0
 80002a8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2208      	movs	r2, #8
 80002ae:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2280      	movs	r2, #128	; 0x80
 80002b4:	0292      	lsls	r2, r2, #10
 80002b6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2280      	movs	r2, #128	; 0x80
 80002bc:	0492      	lsls	r2, r2, #18
 80002be:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2280      	movs	r2, #128	; 0x80
 80002c4:	0592      	lsls	r2, r2, #22
 80002c6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	0018      	movs	r0, r3
 80002cc:	f001 f9f6 	bl	80016bc <HAL_RCC_OscConfig>
 80002d0:	1e03      	subs	r3, r0, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002d4:	f000 f986 	bl	80005e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d8:	003b      	movs	r3, r7
 80002da:	2207      	movs	r2, #7
 80002dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002de:	003b      	movs	r3, r7
 80002e0:	2202      	movs	r2, #2
 80002e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e4:	003b      	movs	r3, r7
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ea:	003b      	movs	r3, r7
 80002ec:	2200      	movs	r2, #0
 80002ee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f0:	003b      	movs	r3, r7
 80002f2:	2102      	movs	r1, #2
 80002f4:	0018      	movs	r0, r3
 80002f6:	f001 fcfb 	bl	8001cf0 <HAL_RCC_ClockConfig>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80002fe:	f000 f971 	bl	80005e4 <Error_Handler>
  }
}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	46bd      	mov	sp, r7
 8000306:	b013      	add	sp, #76	; 0x4c
 8000308:	bd90      	pop	{r4, r7, pc}
	...

0800030c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	0018      	movs	r0, r3
 8000316:	230c      	movs	r3, #12
 8000318:	001a      	movs	r2, r3
 800031a:	2100      	movs	r1, #0
 800031c:	f002 f9a6 	bl	800266c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000320:	4b2d      	ldr	r3, [pc, #180]	; (80003d8 <MX_ADC1_Init+0xcc>)
 8000322:	4a2e      	ldr	r2, [pc, #184]	; (80003dc <MX_ADC1_Init+0xd0>)
 8000324:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000326:	4b2c      	ldr	r3, [pc, #176]	; (80003d8 <MX_ADC1_Init+0xcc>)
 8000328:	2280      	movs	r2, #128	; 0x80
 800032a:	05d2      	lsls	r2, r2, #23
 800032c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800032e:	4b2a      	ldr	r3, [pc, #168]	; (80003d8 <MX_ADC1_Init+0xcc>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000334:	4b28      	ldr	r3, [pc, #160]	; (80003d8 <MX_ADC1_Init+0xcc>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800033a:	4b27      	ldr	r3, [pc, #156]	; (80003d8 <MX_ADC1_Init+0xcc>)
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000340:	4b25      	ldr	r3, [pc, #148]	; (80003d8 <MX_ADC1_Init+0xcc>)
 8000342:	2204      	movs	r2, #4
 8000344:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000346:	4b24      	ldr	r3, [pc, #144]	; (80003d8 <MX_ADC1_Init+0xcc>)
 8000348:	2200      	movs	r2, #0
 800034a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800034c:	4b22      	ldr	r3, [pc, #136]	; (80003d8 <MX_ADC1_Init+0xcc>)
 800034e:	2200      	movs	r2, #0
 8000350:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000352:	4b21      	ldr	r3, [pc, #132]	; (80003d8 <MX_ADC1_Init+0xcc>)
 8000354:	2200      	movs	r2, #0
 8000356:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000358:	4b1f      	ldr	r3, [pc, #124]	; (80003d8 <MX_ADC1_Init+0xcc>)
 800035a:	2201      	movs	r2, #1
 800035c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800035e:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <MX_ADC1_Init+0xcc>)
 8000360:	2220      	movs	r2, #32
 8000362:	2100      	movs	r1, #0
 8000364:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000366:	4b1c      	ldr	r3, [pc, #112]	; (80003d8 <MX_ADC1_Init+0xcc>)
 8000368:	2200      	movs	r2, #0
 800036a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800036c:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <MX_ADC1_Init+0xcc>)
 800036e:	2200      	movs	r2, #0
 8000370:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000372:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <MX_ADC1_Init+0xcc>)
 8000374:	222c      	movs	r2, #44	; 0x2c
 8000376:	2100      	movs	r1, #0
 8000378:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800037a:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <MX_ADC1_Init+0xcc>)
 800037c:	2200      	movs	r2, #0
 800037e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_ADC1_Init+0xcc>)
 8000382:	2200      	movs	r2, #0
 8000384:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000386:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <MX_ADC1_Init+0xcc>)
 8000388:	2200      	movs	r2, #0
 800038a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_ADC1_Init+0xcc>)
 800038e:	223c      	movs	r2, #60	; 0x3c
 8000390:	2100      	movs	r1, #0
 8000392:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000394:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <MX_ADC1_Init+0xcc>)
 8000396:	2200      	movs	r2, #0
 8000398:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_ADC1_Init+0xcc>)
 800039c:	0018      	movs	r0, r3
 800039e:	f000 fb97 	bl	8000ad0 <HAL_ADC_Init>
 80003a2:	1e03      	subs	r3, r0, #0
 80003a4:	d001      	beq.n	80003aa <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80003a6:	f000 f91d 	bl	80005e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4a0c      	ldr	r2, [pc, #48]	; (80003e0 <MX_ADC1_Init+0xd4>)
 80003ae:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003bc:	1d3a      	adds	r2, r7, #4
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <MX_ADC1_Init+0xcc>)
 80003c0:	0011      	movs	r1, r2
 80003c2:	0018      	movs	r0, r3
 80003c4:	f000 fd2c 	bl	8000e20 <HAL_ADC_ConfigChannel>
 80003c8:	1e03      	subs	r3, r0, #0
 80003ca:	d001      	beq.n	80003d0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80003cc:	f000 f90a 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003d0:	46c0      	nop			; (mov r8, r8)
 80003d2:	46bd      	mov	sp, r7
 80003d4:	b004      	add	sp, #16
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000028 	.word	0x20000028
 80003dc:	40012400 	.word	0x40012400
 80003e0:	08000004 	.word	0x08000004

080003e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003e8:	4b17      	ldr	r3, [pc, #92]	; (8000448 <MX_RTC_Init+0x64>)
 80003ea:	4a18      	ldr	r2, [pc, #96]	; (800044c <MX_RTC_Init+0x68>)
 80003ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80003ee:	4b16      	ldr	r3, [pc, #88]	; (8000448 <MX_RTC_Init+0x64>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80003f4:	4b14      	ldr	r3, [pc, #80]	; (8000448 <MX_RTC_Init+0x64>)
 80003f6:	227f      	movs	r2, #127	; 0x7f
 80003f8:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80003fa:	4b13      	ldr	r3, [pc, #76]	; (8000448 <MX_RTC_Init+0x64>)
 80003fc:	22ff      	movs	r2, #255	; 0xff
 80003fe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000400:	4b11      	ldr	r3, [pc, #68]	; (8000448 <MX_RTC_Init+0x64>)
 8000402:	2200      	movs	r2, #0
 8000404:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000406:	4b10      	ldr	r3, [pc, #64]	; (8000448 <MX_RTC_Init+0x64>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800040c:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <MX_RTC_Init+0x64>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000412:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <MX_RTC_Init+0x64>)
 8000414:	2280      	movs	r2, #128	; 0x80
 8000416:	05d2      	lsls	r2, r2, #23
 8000418:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <MX_RTC_Init+0x64>)
 800041c:	2200      	movs	r2, #0
 800041e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000420:	4b09      	ldr	r3, [pc, #36]	; (8000448 <MX_RTC_Init+0x64>)
 8000422:	0018      	movs	r0, r3
 8000424:	f001 ff68 	bl	80022f8 <HAL_RTC_Init>
 8000428:	1e03      	subs	r3, r0, #0
 800042a:	d001      	beq.n	8000430 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 800042c:	f000 f8da 	bl	80005e4 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000430:	4b05      	ldr	r3, [pc, #20]	; (8000448 <MX_RTC_Init+0x64>)
 8000432:	2100      	movs	r1, #0
 8000434:	0018      	movs	r0, r3
 8000436:	f002 f8ad 	bl	8002594 <HAL_RTCEx_SetCalibrationOutPut>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800043e:	f000 f8d1 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	2000008c 	.word	0x2000008c
 800044c:	40002800 	.word	0x40002800

08000450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000450:	b590      	push	{r4, r7, lr}
 8000452:	b08b      	sub	sp, #44	; 0x2c
 8000454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000456:	2414      	movs	r4, #20
 8000458:	193b      	adds	r3, r7, r4
 800045a:	0018      	movs	r0, r3
 800045c:	2314      	movs	r3, #20
 800045e:	001a      	movs	r2, r3
 8000460:	2100      	movs	r1, #0
 8000462:	f002 f903 	bl	800266c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000466:	4b5b      	ldr	r3, [pc, #364]	; (80005d4 <MX_GPIO_Init+0x184>)
 8000468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800046a:	4b5a      	ldr	r3, [pc, #360]	; (80005d4 <MX_GPIO_Init+0x184>)
 800046c:	2104      	movs	r1, #4
 800046e:	430a      	orrs	r2, r1
 8000470:	635a      	str	r2, [r3, #52]	; 0x34
 8000472:	4b58      	ldr	r3, [pc, #352]	; (80005d4 <MX_GPIO_Init+0x184>)
 8000474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000476:	2204      	movs	r2, #4
 8000478:	4013      	ands	r3, r2
 800047a:	613b      	str	r3, [r7, #16]
 800047c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047e:	4b55      	ldr	r3, [pc, #340]	; (80005d4 <MX_GPIO_Init+0x184>)
 8000480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000482:	4b54      	ldr	r3, [pc, #336]	; (80005d4 <MX_GPIO_Init+0x184>)
 8000484:	2101      	movs	r1, #1
 8000486:	430a      	orrs	r2, r1
 8000488:	635a      	str	r2, [r3, #52]	; 0x34
 800048a:	4b52      	ldr	r3, [pc, #328]	; (80005d4 <MX_GPIO_Init+0x184>)
 800048c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800048e:	2201      	movs	r2, #1
 8000490:	4013      	ands	r3, r2
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000496:	4b4f      	ldr	r3, [pc, #316]	; (80005d4 <MX_GPIO_Init+0x184>)
 8000498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800049a:	4b4e      	ldr	r3, [pc, #312]	; (80005d4 <MX_GPIO_Init+0x184>)
 800049c:	2108      	movs	r1, #8
 800049e:	430a      	orrs	r2, r1
 80004a0:	635a      	str	r2, [r3, #52]	; 0x34
 80004a2:	4b4c      	ldr	r3, [pc, #304]	; (80005d4 <MX_GPIO_Init+0x184>)
 80004a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004a6:	2208      	movs	r2, #8
 80004a8:	4013      	ands	r3, r2
 80004aa:	60bb      	str	r3, [r7, #8]
 80004ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ae:	4b49      	ldr	r3, [pc, #292]	; (80005d4 <MX_GPIO_Init+0x184>)
 80004b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004b2:	4b48      	ldr	r3, [pc, #288]	; (80005d4 <MX_GPIO_Init+0x184>)
 80004b4:	2102      	movs	r1, #2
 80004b6:	430a      	orrs	r2, r1
 80004b8:	635a      	str	r2, [r3, #52]	; 0x34
 80004ba:	4b46      	ldr	r3, [pc, #280]	; (80005d4 <MX_GPIO_Init+0x184>)
 80004bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004be:	2202      	movs	r2, #2
 80004c0:	4013      	ands	r3, r2
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzz_test_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80004c6:	23f8      	movs	r3, #248	; 0xf8
 80004c8:	0159      	lsls	r1, r3, #5
 80004ca:	23a0      	movs	r3, #160	; 0xa0
 80004cc:	05db      	lsls	r3, r3, #23
 80004ce:	2200      	movs	r2, #0
 80004d0:	0018      	movs	r0, r3
 80004d2:	f001 f895 	bl	8001600 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80004d6:	4b40      	ldr	r3, [pc, #256]	; (80005d8 <MX_GPIO_Init+0x188>)
 80004d8:	2200      	movs	r2, #0
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	0018      	movs	r0, r3
 80004de:	f001 f88f 	bl	8001600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_EN_GPIO_Port, CTOUCH_EN_Pin, GPIO_PIN_RESET);
 80004e2:	2380      	movs	r3, #128	; 0x80
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	483d      	ldr	r0, [pc, #244]	; (80005dc <MX_GPIO_Init+0x18c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	0019      	movs	r1, r3
 80004ec:	f001 f888 	bl	8001600 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : buzz_test_Pin PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = buzz_test_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	22f8      	movs	r2, #248	; 0xf8
 80004f4:	0152      	lsls	r2, r2, #5
 80004f6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	2201      	movs	r2, #1
 80004fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000504:	193b      	adds	r3, r7, r4
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050a:	193a      	adds	r2, r7, r4
 800050c:	23a0      	movs	r3, #160	; 0xa0
 800050e:	05db      	lsls	r3, r3, #23
 8000510:	0011      	movs	r1, r2
 8000512:	0018      	movs	r0, r3
 8000514:	f000 ff10 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_DEBOUNCE_Pin */
  GPIO_InitStruct.Pin = TEST_DEBOUNCE_Pin;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	2240      	movs	r2, #64	; 0x40
 800051c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2200      	movs	r2, #0
 8000522:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2201      	movs	r2, #1
 8000528:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TEST_DEBOUNCE_GPIO_Port, &GPIO_InitStruct);
 800052a:	193b      	adds	r3, r7, r4
 800052c:	4a2a      	ldr	r2, [pc, #168]	; (80005d8 <MX_GPIO_Init+0x188>)
 800052e:	0019      	movs	r1, r3
 8000530:	0010      	movs	r0, r2
 8000532:	f000 ff01 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000536:	193b      	adds	r3, r7, r4
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053c:	193b      	adds	r3, r7, r4
 800053e:	2201      	movs	r2, #1
 8000540:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	193b      	adds	r3, r7, r4
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	193b      	adds	r3, r7, r4
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800054e:	193b      	adds	r3, r7, r4
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <MX_GPIO_Init+0x188>)
 8000552:	0019      	movs	r1, r3
 8000554:	0010      	movs	r0, r2
 8000556:	f000 feef 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800055a:	193b      	adds	r3, r7, r4
 800055c:	2280      	movs	r2, #128	; 0x80
 800055e:	0212      	lsls	r2, r2, #8
 8000560:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2288      	movs	r2, #136	; 0x88
 8000566:	0352      	lsls	r2, r2, #13
 8000568:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	193b      	adds	r3, r7, r4
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000570:	193a      	adds	r2, r7, r4
 8000572:	23a0      	movs	r3, #160	; 0xa0
 8000574:	05db      	lsls	r3, r3, #23
 8000576:	0011      	movs	r1, r2
 8000578:	0018      	movs	r0, r3
 800057a:	f000 fedd 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800057e:	0021      	movs	r1, r4
 8000580:	187b      	adds	r3, r7, r1
 8000582:	220f      	movs	r2, #15
 8000584:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2288      	movs	r2, #136	; 0x88
 800058a:	0352      	lsls	r2, r2, #13
 800058c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000594:	000c      	movs	r4, r1
 8000596:	187b      	adds	r3, r7, r1
 8000598:	4a11      	ldr	r2, [pc, #68]	; (80005e0 <MX_GPIO_Init+0x190>)
 800059a:	0019      	movs	r1, r3
 800059c:	0010      	movs	r0, r2
 800059e:	f000 fecb 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_EN_Pin */
  GPIO_InitStruct.Pin = CTOUCH_EN_Pin;
 80005a2:	0021      	movs	r1, r4
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	0092      	lsls	r2, r2, #2
 80005aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2201      	movs	r2, #1
 80005b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_EN_GPIO_Port, &GPIO_InitStruct);
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <MX_GPIO_Init+0x18c>)
 80005c2:	0019      	movs	r1, r3
 80005c4:	0010      	movs	r0, r2
 80005c6:	f000 feb7 	bl	8001338 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b00b      	add	sp, #44	; 0x2c
 80005d0:	bd90      	pop	{r4, r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	40021000 	.word	0x40021000
 80005d8:	50000800 	.word	0x50000800
 80005dc:	50000400 	.word	0x50000400
 80005e0:	50000c00 	.word	0x50000c00

080005e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e8:	b672      	cpsid	i
}
 80005ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ec:	e7fe      	b.n	80005ec <Error_Handler+0x8>
	...

080005f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <HAL_MspInit+0x44>)
 80005f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <HAL_MspInit+0x44>)
 80005fc:	2101      	movs	r1, #1
 80005fe:	430a      	orrs	r2, r1
 8000600:	641a      	str	r2, [r3, #64]	; 0x40
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <HAL_MspInit+0x44>)
 8000604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000606:	2201      	movs	r2, #1
 8000608:	4013      	ands	r3, r2
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <HAL_MspInit+0x44>)
 8000610:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <HAL_MspInit+0x44>)
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	0549      	lsls	r1, r1, #21
 8000618:	430a      	orrs	r2, r1
 800061a:	63da      	str	r2, [r3, #60]	; 0x3c
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <HAL_MspInit+0x44>)
 800061e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	055b      	lsls	r3, r3, #21
 8000624:	4013      	ands	r3, r2
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b002      	add	sp, #8
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	40021000 	.word	0x40021000

08000638 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b08b      	sub	sp, #44	; 0x2c
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	2414      	movs	r4, #20
 8000642:	193b      	adds	r3, r7, r4
 8000644:	0018      	movs	r0, r3
 8000646:	2314      	movs	r3, #20
 8000648:	001a      	movs	r2, r3
 800064a:	2100      	movs	r1, #0
 800064c:	f002 f80e 	bl	800266c <memset>
  if(hadc->Instance==ADC1)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a18      	ldr	r2, [pc, #96]	; (80006b8 <HAL_ADC_MspInit+0x80>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d129      	bne.n	80006ae <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800065a:	4b18      	ldr	r3, [pc, #96]	; (80006bc <HAL_ADC_MspInit+0x84>)
 800065c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <HAL_ADC_MspInit+0x84>)
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	0349      	lsls	r1, r1, #13
 8000664:	430a      	orrs	r2, r1
 8000666:	641a      	str	r2, [r3, #64]	; 0x40
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <HAL_ADC_MspInit+0x84>)
 800066a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	035b      	lsls	r3, r3, #13
 8000670:	4013      	ands	r3, r2
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <HAL_ADC_MspInit+0x84>)
 8000678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <HAL_ADC_MspInit+0x84>)
 800067c:	2101      	movs	r1, #1
 800067e:	430a      	orrs	r2, r1
 8000680:	635a      	str	r2, [r3, #52]	; 0x34
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <HAL_ADC_MspInit+0x84>)
 8000684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000686:	2201      	movs	r2, #1
 8000688:	4013      	ands	r3, r2
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2204      	movs	r2, #4
 8000692:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2203      	movs	r2, #3
 8000698:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	193b      	adds	r3, r7, r4
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	193a      	adds	r2, r7, r4
 80006a2:	23a0      	movs	r3, #160	; 0xa0
 80006a4:	05db      	lsls	r3, r3, #23
 80006a6:	0011      	movs	r1, r2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 fe45 	bl	8001338 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b00b      	add	sp, #44	; 0x2c
 80006b4:	bd90      	pop	{r4, r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	40012400 	.word	0x40012400
 80006bc:	40021000 	.word	0x40021000

080006c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b08f      	sub	sp, #60	; 0x3c
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c8:	2410      	movs	r4, #16
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	0018      	movs	r0, r3
 80006ce:	2328      	movs	r3, #40	; 0x28
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f001 ffca 	bl	800266c <memset>
  if(hrtc->Instance==RTC)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a15      	ldr	r2, [pc, #84]	; (8000734 <HAL_RTC_MspInit+0x74>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d124      	bne.n	800072c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	0292      	lsls	r2, r2, #10
 80006e8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2280      	movs	r2, #128	; 0x80
 80006ee:	0092      	lsls	r2, r2, #2
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	0018      	movs	r0, r3
 80006f6:	f001 fc85 	bl	8002004 <HAL_RCCEx_PeriphCLKConfig>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80006fe:	f7ff ff71 	bl	80005e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <HAL_RTC_MspInit+0x78>)
 8000704:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <HAL_RTC_MspInit+0x78>)
 8000708:	2180      	movs	r1, #128	; 0x80
 800070a:	0209      	lsls	r1, r1, #8
 800070c:	430a      	orrs	r2, r1
 800070e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <HAL_RTC_MspInit+0x78>)
 8000712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_RTC_MspInit+0x78>)
 8000716:	2180      	movs	r1, #128	; 0x80
 8000718:	00c9      	lsls	r1, r1, #3
 800071a:	430a      	orrs	r2, r1
 800071c:	63da      	str	r2, [r3, #60]	; 0x3c
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_RTC_MspInit+0x78>)
 8000720:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000722:	2380      	movs	r3, #128	; 0x80
 8000724:	00db      	lsls	r3, r3, #3
 8000726:	4013      	ands	r3, r2
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b00f      	add	sp, #60	; 0x3c
 8000732:	bd90      	pop	{r4, r7, pc}
 8000734:	40002800 	.word	0x40002800
 8000738:	40021000 	.word	0x40021000

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <NMI_Handler+0x4>

08000742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <HardFault_Handler+0x4>

08000748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000760:	f000 f89c 	bl	800089c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000776:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000778:	f7ff fff7 	bl	800076a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800077e:	490d      	ldr	r1, [pc, #52]	; (80007b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000780:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <LoopForever+0xe>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000784:	e002      	b.n	800078c <LoopCopyDataInit>

08000786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078a:	3304      	adds	r3, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800078c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000790:	d3f9      	bcc.n	8000786 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000794:	4c0a      	ldr	r4, [pc, #40]	; (80007c0 <LoopForever+0x16>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000798:	e001      	b.n	800079e <LoopFillZerobss>

0800079a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800079c:	3204      	adds	r2, #4

0800079e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a0:	d3fb      	bcc.n	800079a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007a2:	f001 ff3f 	bl	8002624 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80007a6:	f7ff fd39 	bl	800021c <main>

080007aa <LoopForever>:

LoopForever:
  b LoopForever
 80007aa:	e7fe      	b.n	80007aa <LoopForever>
  ldr   r0, =_estack
 80007ac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007b8:	080026dc 	.word	0x080026dc
  ldr r2, =_sbss
 80007bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007c0:	200000bc 	.word	0x200000bc

080007c4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC1_IRQHandler>
	...

080007c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <HAL_Init+0x3c>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <HAL_Init+0x3c>)
 80007da:	2180      	movs	r1, #128	; 0x80
 80007dc:	0049      	lsls	r1, r1, #1
 80007de:	430a      	orrs	r2, r1
 80007e0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007e2:	2003      	movs	r0, #3
 80007e4:	f000 f810 	bl	8000808 <HAL_InitTick>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d003      	beq.n	80007f4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	2201      	movs	r2, #1
 80007f0:	701a      	strb	r2, [r3, #0]
 80007f2:	e001      	b.n	80007f8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80007f4:	f7ff fefc 	bl	80005f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	781b      	ldrb	r3, [r3, #0]
}
 80007fc:	0018      	movs	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	b002      	add	sp, #8
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40022000 	.word	0x40022000

08000808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000810:	230f      	movs	r3, #15
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <HAL_InitTick+0x88>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d02b      	beq.n	8000878 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000820:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <HAL_InitTick+0x8c>)
 8000822:	681c      	ldr	r4, [r3, #0]
 8000824:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <HAL_InitTick+0x88>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	0019      	movs	r1, r3
 800082a:	23fa      	movs	r3, #250	; 0xfa
 800082c:	0098      	lsls	r0, r3, #2
 800082e:	f7ff fc69 	bl	8000104 <__udivsi3>
 8000832:	0003      	movs	r3, r0
 8000834:	0019      	movs	r1, r3
 8000836:	0020      	movs	r0, r4
 8000838:	f7ff fc64 	bl	8000104 <__udivsi3>
 800083c:	0003      	movs	r3, r0
 800083e:	0018      	movs	r0, r3
 8000840:	f000 fd6d 	bl	800131e <HAL_SYSTICK_Config>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d112      	bne.n	800086e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b03      	cmp	r3, #3
 800084c:	d80a      	bhi.n	8000864 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	2301      	movs	r3, #1
 8000852:	425b      	negs	r3, r3
 8000854:	2200      	movs	r2, #0
 8000856:	0018      	movs	r0, r3
 8000858:	f000 fd4c 	bl	80012f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800085c:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <HAL_InitTick+0x90>)
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	e00d      	b.n	8000880 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000864:	230f      	movs	r3, #15
 8000866:	18fb      	adds	r3, r7, r3
 8000868:	2201      	movs	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
 800086c:	e008      	b.n	8000880 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800086e:	230f      	movs	r3, #15
 8000870:	18fb      	adds	r3, r7, r3
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
 8000876:	e003      	b.n	8000880 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000878:	230f      	movs	r3, #15
 800087a:	18fb      	adds	r3, r7, r3
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000880:	230f      	movs	r3, #15
 8000882:	18fb      	adds	r3, r7, r3
 8000884:	781b      	ldrb	r3, [r3, #0]
}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b005      	add	sp, #20
 800088c:	bd90      	pop	{r4, r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	20000008 	.word	0x20000008
 8000894:	20000000 	.word	0x20000000
 8000898:	20000004 	.word	0x20000004

0800089c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HAL_IncTick+0x1c>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	001a      	movs	r2, r3
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_IncTick+0x20>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	18d2      	adds	r2, r2, r3
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <HAL_IncTick+0x20>)
 80008ae:	601a      	str	r2, [r3, #0]
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	20000008 	.word	0x20000008
 80008bc:	200000b8 	.word	0x200000b8

080008c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  return uwTick;
 80008c4:	4b02      	ldr	r3, [pc, #8]	; (80008d0 <HAL_GetTick+0x10>)
 80008c6:	681b      	ldr	r3, [r3, #0]
}
 80008c8:	0018      	movs	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	200000b8 	.word	0x200000b8

080008d4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80008e4:	401a      	ands	r2, r3
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	431a      	orrs	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	601a      	str	r2, [r3, #0]
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	fe3fffff 	.word	0xfe3fffff

080008fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	23e0      	movs	r3, #224	; 0xe0
 800090a:	045b      	lsls	r3, r3, #17
 800090c:	4013      	ands	r3, r2
}
 800090e:	0018      	movs	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	b002      	add	sp, #8
 8000914:	bd80      	pop	{r7, pc}

08000916 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b084      	sub	sp, #16
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	2104      	movs	r1, #4
 800092a:	400a      	ands	r2, r1
 800092c:	2107      	movs	r1, #7
 800092e:	4091      	lsls	r1, r2
 8000930:	000a      	movs	r2, r1
 8000932:	43d2      	mvns	r2, r2
 8000934:	401a      	ands	r2, r3
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	2104      	movs	r1, #4
 800093a:	400b      	ands	r3, r1
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	4099      	lsls	r1, r3
 8000940:	000b      	movs	r3, r1
 8000942:	431a      	orrs	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b004      	add	sp, #16
 800094e:	bd80      	pop	{r7, pc}

08000950 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	683a      	ldr	r2, [r7, #0]
 8000960:	2104      	movs	r1, #4
 8000962:	400a      	ands	r2, r1
 8000964:	2107      	movs	r1, #7
 8000966:	4091      	lsls	r1, r2
 8000968:	000a      	movs	r2, r1
 800096a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	2104      	movs	r1, #4
 8000970:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000972:	40da      	lsrs	r2, r3
 8000974:	0013      	movs	r3, r2
}
 8000976:	0018      	movs	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	b002      	add	sp, #8
 800097c:	bd80      	pop	{r7, pc}

0800097e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b084      	sub	sp, #16
 8000982:	af00      	add	r7, sp, #0
 8000984:	60f8      	str	r0, [r7, #12]
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	211f      	movs	r1, #31
 8000992:	400a      	ands	r2, r1
 8000994:	210f      	movs	r1, #15
 8000996:	4091      	lsls	r1, r2
 8000998:	000a      	movs	r2, r1
 800099a:	43d2      	mvns	r2, r2
 800099c:	401a      	ands	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	0e9b      	lsrs	r3, r3, #26
 80009a2:	210f      	movs	r1, #15
 80009a4:	4019      	ands	r1, r3
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	201f      	movs	r0, #31
 80009aa:	4003      	ands	r3, r0
 80009ac:	4099      	lsls	r1, r3
 80009ae:	000b      	movs	r3, r1
 80009b0:	431a      	orrs	r2, r3
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b004      	add	sp, #16
 80009bc:	bd80      	pop	{r7, pc}

080009be <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	035b      	lsls	r3, r3, #13
 80009d0:	0b5b      	lsrs	r3, r3, #13
 80009d2:	431a      	orrs	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	b002      	add	sp, #8
 80009de:	bd80      	pop	{r7, pc}

080009e0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ee:	683a      	ldr	r2, [r7, #0]
 80009f0:	0352      	lsls	r2, r2, #13
 80009f2:	0b52      	lsrs	r2, r2, #13
 80009f4:	43d2      	mvns	r2, r2
 80009f6:	401a      	ands	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	695b      	ldr	r3, [r3, #20]
 8000a14:	68ba      	ldr	r2, [r7, #8]
 8000a16:	0212      	lsls	r2, r2, #8
 8000a18:	43d2      	mvns	r2, r2
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	021b      	lsls	r3, r3, #8
 8000a20:	6879      	ldr	r1, [r7, #4]
 8000a22:	400b      	ands	r3, r1
 8000a24:	4904      	ldr	r1, [pc, #16]	; (8000a38 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000a26:	400b      	ands	r3, r1
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b004      	add	sp, #16
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	07ffff00 	.word	0x07ffff00

08000a3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <LL_ADC_EnableInternalRegulator+0x24>)
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	0552      	lsls	r2, r2, #21
 8000a50:	431a      	orrs	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b002      	add	sp, #8
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	6fffffe8 	.word	0x6fffffe8

08000a64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	055b      	lsls	r3, r3, #21
 8000a74:	401a      	ands	r2, r3
 8000a76:	2380      	movs	r3, #128	; 0x80
 8000a78:	055b      	lsls	r3, r3, #21
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d101      	bne.n	8000a82 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e000      	b.n	8000a84 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000a82:	2300      	movs	r3, #0
}
 8000a84:	0018      	movs	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d101      	bne.n	8000aa4 <LL_ADC_IsEnabled+0x18>
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e000      	b.n	8000aa6 <LL_ADC_IsEnabled+0x1a>
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b002      	add	sp, #8
 8000aac:	bd80      	pop	{r7, pc}

08000aae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	2204      	movs	r2, #4
 8000abc:	4013      	ands	r3, r2
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	d101      	bne.n	8000ac6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e000      	b.n	8000ac8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	0018      	movs	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b002      	add	sp, #8
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ad8:	231f      	movs	r3, #31
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d101      	bne.n	8000af6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e17f      	b.n	8000df6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d10a      	bne.n	8000b14 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	0018      	movs	r0, r3
 8000b02:	f7ff fd99 	bl	8000638 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2254      	movs	r2, #84	; 0x54
 8000b10:	2100      	movs	r1, #0
 8000b12:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f7ff ffa3 	bl	8000a64 <LL_ADC_IsInternalRegulatorEnabled>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d115      	bne.n	8000b4e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff ff88 	bl	8000a3c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000b2c:	4bb4      	ldr	r3, [pc, #720]	; (8000e00 <HAL_ADC_Init+0x330>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	49b4      	ldr	r1, [pc, #720]	; (8000e04 <HAL_ADC_Init+0x334>)
 8000b32:	0018      	movs	r0, r3
 8000b34:	f7ff fae6 	bl	8000104 <__udivsi3>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000b40:	e002      	b.n	8000b48 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	3b01      	subs	r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1f9      	bne.n	8000b42 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	0018      	movs	r0, r3
 8000b54:	f7ff ff86 	bl	8000a64 <LL_ADC_IsInternalRegulatorEnabled>
 8000b58:	1e03      	subs	r3, r0, #0
 8000b5a:	d10f      	bne.n	8000b7c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b60:	2210      	movs	r2, #16
 8000b62:	431a      	orrs	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	431a      	orrs	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000b74:	231f      	movs	r3, #31
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	0018      	movs	r0, r3
 8000b82:	f7ff ff94 	bl	8000aae <LL_ADC_REG_IsConversionOngoing>
 8000b86:	0003      	movs	r3, r0
 8000b88:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8e:	2210      	movs	r2, #16
 8000b90:	4013      	ands	r3, r2
 8000b92:	d000      	beq.n	8000b96 <HAL_ADC_Init+0xc6>
 8000b94:	e122      	b.n	8000ddc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d000      	beq.n	8000b9e <HAL_ADC_Init+0xce>
 8000b9c:	e11e      	b.n	8000ddc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba2:	4a99      	ldr	r2, [pc, #612]	; (8000e08 <HAL_ADC_Init+0x338>)
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	431a      	orrs	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f7ff ff6a 	bl	8000a8c <LL_ADC_IsEnabled>
 8000bb8:	1e03      	subs	r3, r0, #0
 8000bba:	d000      	beq.n	8000bbe <HAL_ADC_Init+0xee>
 8000bbc:	e0ad      	b.n	8000d1a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	7e1b      	ldrb	r3, [r3, #24]
 8000bc6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000bc8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	7e5b      	ldrb	r3, [r3, #25]
 8000bce:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000bd0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	7e9b      	ldrb	r3, [r3, #26]
 8000bd6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000bd8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d002      	beq.n	8000be8 <HAL_ADC_Init+0x118>
 8000be2:	2380      	movs	r3, #128	; 0x80
 8000be4:	015b      	lsls	r3, r3, #5
 8000be6:	e000      	b.n	8000bea <HAL_ADC_Init+0x11a>
 8000be8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000bea:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000bf0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	691b      	ldr	r3, [r3, #16]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	da04      	bge.n	8000c04 <HAL_ADC_Init+0x134>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	085b      	lsrs	r3, r3, #1
 8000c02:	e001      	b.n	8000c08 <HAL_ADC_Init+0x138>
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8000c08:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	212c      	movs	r1, #44	; 0x2c
 8000c0e:	5c5b      	ldrb	r3, [r3, r1]
 8000c10:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000c12:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2220      	movs	r2, #32
 8000c1e:	5c9b      	ldrb	r3, [r3, r2]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d115      	bne.n	8000c50 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	7e9b      	ldrb	r3, [r3, #26]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d105      	bne.n	8000c38 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	0252      	lsls	r2, r2, #9
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
 8000c36:	e00b      	b.n	8000c50 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3c:	2220      	movs	r2, #32
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c48:	2201      	movs	r2, #1
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d00a      	beq.n	8000c6e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c5c:	23e0      	movs	r3, #224	; 0xe0
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000c66:	4313      	orrs	r3, r2
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	4a65      	ldr	r2, [pc, #404]	; (8000e0c <HAL_ADC_Init+0x33c>)
 8000c76:	4013      	ands	r3, r2
 8000c78:	0019      	movs	r1, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	430a      	orrs	r2, r1
 8000c82:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	0f9b      	lsrs	r3, r3, #30
 8000c8a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000c90:	4313      	orrs	r3, r2
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	223c      	movs	r2, #60	; 0x3c
 8000c9c:	5c9b      	ldrb	r3, [r3, r2]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d111      	bne.n	8000cc6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	0f9b      	lsrs	r3, r3, #30
 8000ca8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cae:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8000cb4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8000cba:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	691b      	ldr	r3, [r3, #16]
 8000ccc:	4a50      	ldr	r2, [pc, #320]	; (8000e10 <HAL_ADC_Init+0x340>)
 8000cce:	4013      	ands	r3, r2
 8000cd0:	0019      	movs	r1, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	23c0      	movs	r3, #192	; 0xc0
 8000ce2:	061b      	lsls	r3, r3, #24
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d018      	beq.n	8000d1a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	05db      	lsls	r3, r3, #23
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d012      	beq.n	8000d1a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	061b      	lsls	r3, r3, #24
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d00c      	beq.n	8000d1a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000d00:	4b44      	ldr	r3, [pc, #272]	; (8000e14 <HAL_ADC_Init+0x344>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a44      	ldr	r2, [pc, #272]	; (8000e18 <HAL_ADC_Init+0x348>)
 8000d06:	4013      	ands	r3, r2
 8000d08:	0019      	movs	r1, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	23f0      	movs	r3, #240	; 0xf0
 8000d10:	039b      	lsls	r3, r3, #14
 8000d12:	401a      	ands	r2, r3
 8000d14:	4b3f      	ldr	r3, [pc, #252]	; (8000e14 <HAL_ADC_Init+0x344>)
 8000d16:	430a      	orrs	r2, r1
 8000d18:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6818      	ldr	r0, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d22:	001a      	movs	r2, r3
 8000d24:	2100      	movs	r1, #0
 8000d26:	f7ff fdf6 	bl	8000916 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6818      	ldr	r0, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d32:	493a      	ldr	r1, [pc, #232]	; (8000e1c <HAL_ADC_Init+0x34c>)
 8000d34:	001a      	movs	r2, r3
 8000d36:	f7ff fdee 	bl	8000916 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d109      	bne.n	8000d56 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2110      	movs	r1, #16
 8000d4e:	4249      	negs	r1, r1
 8000d50:	430a      	orrs	r2, r1
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
 8000d54:	e018      	b.n	8000d88 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	691a      	ldr	r2, [r3, #16]
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	039b      	lsls	r3, r3, #14
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d112      	bne.n	8000d88 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69db      	ldr	r3, [r3, #28]
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	221c      	movs	r2, #28
 8000d72:	4013      	ands	r3, r2
 8000d74:	2210      	movs	r2, #16
 8000d76:	4252      	negs	r2, r2
 8000d78:	409a      	lsls	r2, r3
 8000d7a:	0011      	movs	r1, r2
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	430a      	orrs	r2, r1
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f7ff fdde 	bl	8000950 <LL_ADC_GetSamplingTimeCommonChannels>
 8000d94:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d10b      	bne.n	8000db6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da8:	2203      	movs	r2, #3
 8000daa:	4393      	bics	r3, r2
 8000dac:	2201      	movs	r2, #1
 8000dae:	431a      	orrs	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000db4:	e01c      	b.n	8000df0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dba:	2212      	movs	r2, #18
 8000dbc:	4393      	bics	r3, r2
 8000dbe:	2210      	movs	r2, #16
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dca:	2201      	movs	r2, #1
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8000dd2:	231f      	movs	r3, #31
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000dda:	e009      	b.n	8000df0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de0:	2210      	movs	r2, #16
 8000de2:	431a      	orrs	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000de8:	231f      	movs	r3, #31
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000df0:	231f      	movs	r3, #31
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	781b      	ldrb	r3, [r3, #0]
}
 8000df6:	0018      	movs	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b008      	add	sp, #32
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	20000000 	.word	0x20000000
 8000e04:	00030d40 	.word	0x00030d40
 8000e08:	fffffefd 	.word	0xfffffefd
 8000e0c:	ffde0201 	.word	0xffde0201
 8000e10:	1ffffc02 	.word	0x1ffffc02
 8000e14:	40012708 	.word	0x40012708
 8000e18:	ffc3ffff 	.word	0xffc3ffff
 8000e1c:	07ffff04 	.word	0x07ffff04

08000e20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e2a:	2317      	movs	r3, #23
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2254      	movs	r2, #84	; 0x54
 8000e3a:	5c9b      	ldrb	r3, [r3, r2]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d101      	bne.n	8000e44 <HAL_ADC_ConfigChannel+0x24>
 8000e40:	2302      	movs	r3, #2
 8000e42:	e1c0      	b.n	80011c6 <HAL_ADC_ConfigChannel+0x3a6>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2254      	movs	r2, #84	; 0x54
 8000e48:	2101      	movs	r1, #1
 8000e4a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	0018      	movs	r0, r3
 8000e52:	f7ff fe2c 	bl	8000aae <LL_ADC_REG_IsConversionOngoing>
 8000e56:	1e03      	subs	r3, r0, #0
 8000e58:	d000      	beq.n	8000e5c <HAL_ADC_ConfigChannel+0x3c>
 8000e5a:	e1a3      	b.n	80011a4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d100      	bne.n	8000e66 <HAL_ADC_ConfigChannel+0x46>
 8000e64:	e143      	b.n	80010ee <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	691a      	ldr	r2, [r3, #16]
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	061b      	lsls	r3, r3, #24
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d004      	beq.n	8000e7c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000e76:	4ac1      	ldr	r2, [pc, #772]	; (800117c <HAL_ADC_ConfigChannel+0x35c>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d108      	bne.n	8000e8e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	0019      	movs	r1, r3
 8000e86:	0010      	movs	r0, r2
 8000e88:	f7ff fd99 	bl	80009be <LL_ADC_REG_SetSequencerChAdd>
 8000e8c:	e0c9      	b.n	8001022 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	211f      	movs	r1, #31
 8000e98:	400b      	ands	r3, r1
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	4099      	lsls	r1, r3
 8000e9e:	000b      	movs	r3, r1
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	035b      	lsls	r3, r3, #13
 8000eac:	0b5b      	lsrs	r3, r3, #13
 8000eae:	d105      	bne.n	8000ebc <HAL_ADC_ConfigChannel+0x9c>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	0e9b      	lsrs	r3, r3, #26
 8000eb6:	221f      	movs	r2, #31
 8000eb8:	4013      	ands	r3, r2
 8000eba:	e098      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1ce>
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d000      	beq.n	8000ec8 <HAL_ADC_ConfigChannel+0xa8>
 8000ec6:	e091      	b.n	8000fec <HAL_ADC_ConfigChannel+0x1cc>
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2202      	movs	r2, #2
 8000ece:	4013      	ands	r3, r2
 8000ed0:	d000      	beq.n	8000ed4 <HAL_ADC_ConfigChannel+0xb4>
 8000ed2:	e089      	b.n	8000fe8 <HAL_ADC_ConfigChannel+0x1c8>
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2204      	movs	r2, #4
 8000eda:	4013      	ands	r3, r2
 8000edc:	d000      	beq.n	8000ee0 <HAL_ADC_ConfigChannel+0xc0>
 8000ede:	e081      	b.n	8000fe4 <HAL_ADC_ConfigChannel+0x1c4>
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2208      	movs	r2, #8
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d000      	beq.n	8000eec <HAL_ADC_ConfigChannel+0xcc>
 8000eea:	e079      	b.n	8000fe0 <HAL_ADC_ConfigChannel+0x1c0>
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2210      	movs	r2, #16
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d000      	beq.n	8000ef8 <HAL_ADC_ConfigChannel+0xd8>
 8000ef6:	e071      	b.n	8000fdc <HAL_ADC_ConfigChannel+0x1bc>
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2220      	movs	r2, #32
 8000efe:	4013      	ands	r3, r2
 8000f00:	d000      	beq.n	8000f04 <HAL_ADC_ConfigChannel+0xe4>
 8000f02:	e069      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0x1b8>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2240      	movs	r2, #64	; 0x40
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d000      	beq.n	8000f10 <HAL_ADC_ConfigChannel+0xf0>
 8000f0e:	e061      	b.n	8000fd4 <HAL_ADC_ConfigChannel+0x1b4>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	4013      	ands	r3, r2
 8000f18:	d000      	beq.n	8000f1c <HAL_ADC_ConfigChannel+0xfc>
 8000f1a:	e059      	b.n	8000fd0 <HAL_ADC_ConfigChannel+0x1b0>
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4013      	ands	r3, r2
 8000f26:	d151      	bne.n	8000fcc <HAL_ADC_ConfigChannel+0x1ac>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4013      	ands	r3, r2
 8000f32:	d149      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x1a8>
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d141      	bne.n	8000fc4 <HAL_ADC_ConfigChannel+0x1a4>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d139      	bne.n	8000fc0 <HAL_ADC_ConfigChannel+0x1a0>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	015b      	lsls	r3, r3, #5
 8000f54:	4013      	ands	r3, r2
 8000f56:	d131      	bne.n	8000fbc <HAL_ADC_ConfigChannel+0x19c>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	019b      	lsls	r3, r3, #6
 8000f60:	4013      	ands	r3, r2
 8000f62:	d129      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x198>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	01db      	lsls	r3, r3, #7
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d121      	bne.n	8000fb4 <HAL_ADC_ConfigChannel+0x194>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	4013      	ands	r3, r2
 8000f7a:	d119      	bne.n	8000fb0 <HAL_ADC_ConfigChannel+0x190>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	025b      	lsls	r3, r3, #9
 8000f84:	4013      	ands	r3, r2
 8000f86:	d111      	bne.n	8000fac <HAL_ADC_ConfigChannel+0x18c>
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	029b      	lsls	r3, r3, #10
 8000f90:	4013      	ands	r3, r2
 8000f92:	d109      	bne.n	8000fa8 <HAL_ADC_ConfigChannel+0x188>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	02db      	lsls	r3, r3, #11
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d001      	beq.n	8000fa4 <HAL_ADC_ConfigChannel+0x184>
 8000fa0:	2312      	movs	r3, #18
 8000fa2:	e024      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1ce>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	e022      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1ce>
 8000fa8:	2311      	movs	r3, #17
 8000faa:	e020      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1ce>
 8000fac:	2310      	movs	r3, #16
 8000fae:	e01e      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1ce>
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	e01c      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1ce>
 8000fb4:	230e      	movs	r3, #14
 8000fb6:	e01a      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1ce>
 8000fb8:	230d      	movs	r3, #13
 8000fba:	e018      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1ce>
 8000fbc:	230c      	movs	r3, #12
 8000fbe:	e016      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1ce>
 8000fc0:	230b      	movs	r3, #11
 8000fc2:	e014      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1ce>
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	e012      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1ce>
 8000fc8:	2309      	movs	r3, #9
 8000fca:	e010      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1ce>
 8000fcc:	2308      	movs	r3, #8
 8000fce:	e00e      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1ce>
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	e00c      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1ce>
 8000fd4:	2306      	movs	r3, #6
 8000fd6:	e00a      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1ce>
 8000fd8:	2305      	movs	r3, #5
 8000fda:	e008      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1ce>
 8000fdc:	2304      	movs	r3, #4
 8000fde:	e006      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1ce>
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e004      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1ce>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e002      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1ce>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1ce>
 8000fec:	2300      	movs	r3, #0
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	6852      	ldr	r2, [r2, #4]
 8000ff2:	201f      	movs	r0, #31
 8000ff4:	4002      	ands	r2, r0
 8000ff6:	4093      	lsls	r3, r2
 8000ff8:	000a      	movs	r2, r1
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69db      	ldr	r3, [r3, #28]
 800100c:	429a      	cmp	r2, r3
 800100e:	d808      	bhi.n	8001022 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	6859      	ldr	r1, [r3, #4]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	001a      	movs	r2, r3
 800101e:	f7ff fcae 	bl	800097e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6818      	ldr	r0, [r3, #0]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	6819      	ldr	r1, [r3, #0]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	001a      	movs	r2, r3
 8001030:	f7ff fce8 	bl	8000a04 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	db00      	blt.n	800103e <HAL_ADC_ConfigChannel+0x21e>
 800103c:	e0bc      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800103e:	4b50      	ldr	r3, [pc, #320]	; (8001180 <HAL_ADC_ConfigChannel+0x360>)
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff fc5b 	bl	80008fc <LL_ADC_GetCommonPathInternalCh>
 8001046:	0003      	movs	r3, r0
 8001048:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a4d      	ldr	r2, [pc, #308]	; (8001184 <HAL_ADC_ConfigChannel+0x364>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d122      	bne.n	800109a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	041b      	lsls	r3, r3, #16
 800105a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800105c:	d11d      	bne.n	800109a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	0412      	lsls	r2, r2, #16
 8001064:	4313      	orrs	r3, r2
 8001066:	4a46      	ldr	r2, [pc, #280]	; (8001180 <HAL_ADC_ConfigChannel+0x360>)
 8001068:	0019      	movs	r1, r3
 800106a:	0010      	movs	r0, r2
 800106c:	f7ff fc32 	bl	80008d4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001070:	4b45      	ldr	r3, [pc, #276]	; (8001188 <HAL_ADC_ConfigChannel+0x368>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4945      	ldr	r1, [pc, #276]	; (800118c <HAL_ADC_ConfigChannel+0x36c>)
 8001076:	0018      	movs	r0, r3
 8001078:	f7ff f844 	bl	8000104 <__udivsi3>
 800107c:	0003      	movs	r3, r0
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	0013      	movs	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	189b      	adds	r3, r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800108a:	e002      	b.n	8001092 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3b01      	subs	r3, #1
 8001090:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f9      	bne.n	800108c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001098:	e08e      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a3c      	ldr	r2, [pc, #240]	; (8001190 <HAL_ADC_ConfigChannel+0x370>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d10e      	bne.n	80010c2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	2380      	movs	r3, #128	; 0x80
 80010a8:	045b      	lsls	r3, r3, #17
 80010aa:	4013      	ands	r3, r2
 80010ac:	d109      	bne.n	80010c2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	0452      	lsls	r2, r2, #17
 80010b4:	4313      	orrs	r3, r2
 80010b6:	4a32      	ldr	r2, [pc, #200]	; (8001180 <HAL_ADC_ConfigChannel+0x360>)
 80010b8:	0019      	movs	r1, r3
 80010ba:	0010      	movs	r0, r2
 80010bc:	f7ff fc0a 	bl	80008d4 <LL_ADC_SetCommonPathInternalCh>
 80010c0:	e07a      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a33      	ldr	r2, [pc, #204]	; (8001194 <HAL_ADC_ConfigChannel+0x374>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d000      	beq.n	80010ce <HAL_ADC_ConfigChannel+0x2ae>
 80010cc:	e074      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	03db      	lsls	r3, r3, #15
 80010d4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80010d6:	d000      	beq.n	80010da <HAL_ADC_ConfigChannel+0x2ba>
 80010d8:	e06e      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	2280      	movs	r2, #128	; 0x80
 80010de:	03d2      	lsls	r2, r2, #15
 80010e0:	4313      	orrs	r3, r2
 80010e2:	4a27      	ldr	r2, [pc, #156]	; (8001180 <HAL_ADC_ConfigChannel+0x360>)
 80010e4:	0019      	movs	r1, r3
 80010e6:	0010      	movs	r0, r2
 80010e8:	f7ff fbf4 	bl	80008d4 <LL_ADC_SetCommonPathInternalCh>
 80010ec:	e064      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	061b      	lsls	r3, r3, #24
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d004      	beq.n	8001104 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80010fe:	4a1f      	ldr	r2, [pc, #124]	; (800117c <HAL_ADC_ConfigChannel+0x35c>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d107      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	0019      	movs	r1, r3
 800110e:	0010      	movs	r0, r2
 8001110:	f7ff fc66 	bl	80009e0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	da4d      	bge.n	80011b8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_ADC_ConfigChannel+0x360>)
 800111e:	0018      	movs	r0, r3
 8001120:	f7ff fbec 	bl	80008fc <LL_ADC_GetCommonPathInternalCh>
 8001124:	0003      	movs	r3, r0
 8001126:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a15      	ldr	r2, [pc, #84]	; (8001184 <HAL_ADC_ConfigChannel+0x364>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d108      	bne.n	8001144 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4a18      	ldr	r2, [pc, #96]	; (8001198 <HAL_ADC_ConfigChannel+0x378>)
 8001136:	4013      	ands	r3, r2
 8001138:	4a11      	ldr	r2, [pc, #68]	; (8001180 <HAL_ADC_ConfigChannel+0x360>)
 800113a:	0019      	movs	r1, r3
 800113c:	0010      	movs	r0, r2
 800113e:	f7ff fbc9 	bl	80008d4 <LL_ADC_SetCommonPathInternalCh>
 8001142:	e039      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a11      	ldr	r2, [pc, #68]	; (8001190 <HAL_ADC_ConfigChannel+0x370>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d108      	bne.n	8001160 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <HAL_ADC_ConfigChannel+0x37c>)
 8001152:	4013      	ands	r3, r2
 8001154:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <HAL_ADC_ConfigChannel+0x360>)
 8001156:	0019      	movs	r1, r3
 8001158:	0010      	movs	r0, r2
 800115a:	f7ff fbbb 	bl	80008d4 <LL_ADC_SetCommonPathInternalCh>
 800115e:	e02b      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <HAL_ADC_ConfigChannel+0x374>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d126      	bne.n	80011b8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4a0c      	ldr	r2, [pc, #48]	; (80011a0 <HAL_ADC_ConfigChannel+0x380>)
 800116e:	4013      	ands	r3, r2
 8001170:	4a03      	ldr	r2, [pc, #12]	; (8001180 <HAL_ADC_ConfigChannel+0x360>)
 8001172:	0019      	movs	r1, r3
 8001174:	0010      	movs	r0, r2
 8001176:	f7ff fbad 	bl	80008d4 <LL_ADC_SetCommonPathInternalCh>
 800117a:	e01d      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x398>
 800117c:	80000004 	.word	0x80000004
 8001180:	40012708 	.word	0x40012708
 8001184:	b0001000 	.word	0xb0001000
 8001188:	20000000 	.word	0x20000000
 800118c:	00030d40 	.word	0x00030d40
 8001190:	b8004000 	.word	0xb8004000
 8001194:	b4002000 	.word	0xb4002000
 8001198:	ff7fffff 	.word	0xff7fffff
 800119c:	feffffff 	.word	0xfeffffff
 80011a0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a8:	2220      	movs	r2, #32
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80011b0:	2317      	movs	r3, #23
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2254      	movs	r2, #84	; 0x54
 80011bc:	2100      	movs	r1, #0
 80011be:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80011c0:	2317      	movs	r3, #23
 80011c2:	18fb      	adds	r3, r7, r3
 80011c4:	781b      	ldrb	r3, [r3, #0]
}
 80011c6:	0018      	movs	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b006      	add	sp, #24
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	0002      	movs	r2, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b7f      	cmp	r3, #127	; 0x7f
 80011e4:	d828      	bhi.n	8001238 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011e6:	4a2f      	ldr	r2, [pc, #188]	; (80012a4 <__NVIC_SetPriority+0xd4>)
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	33c0      	adds	r3, #192	; 0xc0
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	589b      	ldr	r3, [r3, r2]
 80011f6:	1dfa      	adds	r2, r7, #7
 80011f8:	7812      	ldrb	r2, [r2, #0]
 80011fa:	0011      	movs	r1, r2
 80011fc:	2203      	movs	r2, #3
 80011fe:	400a      	ands	r2, r1
 8001200:	00d2      	lsls	r2, r2, #3
 8001202:	21ff      	movs	r1, #255	; 0xff
 8001204:	4091      	lsls	r1, r2
 8001206:	000a      	movs	r2, r1
 8001208:	43d2      	mvns	r2, r2
 800120a:	401a      	ands	r2, r3
 800120c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	019b      	lsls	r3, r3, #6
 8001212:	22ff      	movs	r2, #255	; 0xff
 8001214:	401a      	ands	r2, r3
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	0018      	movs	r0, r3
 800121c:	2303      	movs	r3, #3
 800121e:	4003      	ands	r3, r0
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001224:	481f      	ldr	r0, [pc, #124]	; (80012a4 <__NVIC_SetPriority+0xd4>)
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	b25b      	sxtb	r3, r3
 800122c:	089b      	lsrs	r3, r3, #2
 800122e:	430a      	orrs	r2, r1
 8001230:	33c0      	adds	r3, #192	; 0xc0
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001236:	e031      	b.n	800129c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001238:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <__NVIC_SetPriority+0xd8>)
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	0019      	movs	r1, r3
 8001240:	230f      	movs	r3, #15
 8001242:	400b      	ands	r3, r1
 8001244:	3b08      	subs	r3, #8
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	3306      	adds	r3, #6
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	18d3      	adds	r3, r2, r3
 800124e:	3304      	adds	r3, #4
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	1dfa      	adds	r2, r7, #7
 8001254:	7812      	ldrb	r2, [r2, #0]
 8001256:	0011      	movs	r1, r2
 8001258:	2203      	movs	r2, #3
 800125a:	400a      	ands	r2, r1
 800125c:	00d2      	lsls	r2, r2, #3
 800125e:	21ff      	movs	r1, #255	; 0xff
 8001260:	4091      	lsls	r1, r2
 8001262:	000a      	movs	r2, r1
 8001264:	43d2      	mvns	r2, r2
 8001266:	401a      	ands	r2, r3
 8001268:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	019b      	lsls	r3, r3, #6
 800126e:	22ff      	movs	r2, #255	; 0xff
 8001270:	401a      	ands	r2, r3
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	0018      	movs	r0, r3
 8001278:	2303      	movs	r3, #3
 800127a:	4003      	ands	r3, r0
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001280:	4809      	ldr	r0, [pc, #36]	; (80012a8 <__NVIC_SetPriority+0xd8>)
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	001c      	movs	r4, r3
 8001288:	230f      	movs	r3, #15
 800128a:	4023      	ands	r3, r4
 800128c:	3b08      	subs	r3, #8
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	430a      	orrs	r2, r1
 8001292:	3306      	adds	r3, #6
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	18c3      	adds	r3, r0, r3
 8001298:	3304      	adds	r3, #4
 800129a:	601a      	str	r2, [r3, #0]
}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b003      	add	sp, #12
 80012a2:	bd90      	pop	{r4, r7, pc}
 80012a4:	e000e100 	.word	0xe000e100
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	1e5a      	subs	r2, r3, #1
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	045b      	lsls	r3, r3, #17
 80012bc:	429a      	cmp	r2, r3
 80012be:	d301      	bcc.n	80012c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c0:	2301      	movs	r3, #1
 80012c2:	e010      	b.n	80012e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <SysTick_Config+0x44>)
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	3a01      	subs	r2, #1
 80012ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012cc:	2301      	movs	r3, #1
 80012ce:	425b      	negs	r3, r3
 80012d0:	2103      	movs	r1, #3
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7ff ff7c 	bl	80011d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <SysTick_Config+0x44>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012de:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <SysTick_Config+0x44>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	0018      	movs	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b002      	add	sp, #8
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	210f      	movs	r1, #15
 8001300:	187b      	adds	r3, r7, r1
 8001302:	1c02      	adds	r2, r0, #0
 8001304:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	187b      	adds	r3, r7, r1
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b25b      	sxtb	r3, r3
 800130e:	0011      	movs	r1, r2
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff ff5d 	bl	80011d0 <__NVIC_SetPriority>
}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b004      	add	sp, #16
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	0018      	movs	r0, r3
 800132a:	f7ff ffbf 	bl	80012ac <SysTick_Config>
 800132e:	0003      	movs	r3, r0
}
 8001330:	0018      	movs	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	b002      	add	sp, #8
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001346:	e147      	b.n	80015d8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2101      	movs	r1, #1
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	4091      	lsls	r1, r2
 8001352:	000a      	movs	r2, r1
 8001354:	4013      	ands	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d100      	bne.n	8001360 <HAL_GPIO_Init+0x28>
 800135e:	e138      	b.n	80015d2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2203      	movs	r2, #3
 8001366:	4013      	ands	r3, r2
 8001368:	2b01      	cmp	r3, #1
 800136a:	d005      	beq.n	8001378 <HAL_GPIO_Init+0x40>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2203      	movs	r2, #3
 8001372:	4013      	ands	r3, r2
 8001374:	2b02      	cmp	r3, #2
 8001376:	d130      	bne.n	80013da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	409a      	lsls	r2, r3
 8001386:	0013      	movs	r3, r2
 8001388:	43da      	mvns	r2, r3
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	409a      	lsls	r2, r3
 800139a:	0013      	movs	r3, r2
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ae:	2201      	movs	r2, #1
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	409a      	lsls	r2, r3
 80013b4:	0013      	movs	r3, r2
 80013b6:	43da      	mvns	r2, r3
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	2201      	movs	r2, #1
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
 80013cc:	0013      	movs	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2203      	movs	r2, #3
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d017      	beq.n	8001416 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	409a      	lsls	r2, r3
 80013f4:	0013      	movs	r3, r2
 80013f6:	43da      	mvns	r2, r3
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	409a      	lsls	r2, r3
 8001408:	0013      	movs	r3, r2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2203      	movs	r2, #3
 800141c:	4013      	ands	r3, r2
 800141e:	2b02      	cmp	r3, #2
 8001420:	d123      	bne.n	800146a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	08da      	lsrs	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3208      	adds	r2, #8
 800142a:	0092      	lsls	r2, r2, #2
 800142c:	58d3      	ldr	r3, [r2, r3]
 800142e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2207      	movs	r2, #7
 8001434:	4013      	ands	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	220f      	movs	r2, #15
 800143a:	409a      	lsls	r2, r3
 800143c:	0013      	movs	r3, r2
 800143e:	43da      	mvns	r2, r3
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	691a      	ldr	r2, [r3, #16]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	2107      	movs	r1, #7
 800144e:	400b      	ands	r3, r1
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	409a      	lsls	r2, r3
 8001454:	0013      	movs	r3, r2
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	08da      	lsrs	r2, r3, #3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3208      	adds	r2, #8
 8001464:	0092      	lsls	r2, r2, #2
 8001466:	6939      	ldr	r1, [r7, #16]
 8001468:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	409a      	lsls	r2, r3
 8001478:	0013      	movs	r3, r2
 800147a:	43da      	mvns	r2, r3
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2203      	movs	r2, #3
 8001488:	401a      	ands	r2, r3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	409a      	lsls	r2, r3
 8001490:	0013      	movs	r3, r2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	23c0      	movs	r3, #192	; 0xc0
 80014a4:	029b      	lsls	r3, r3, #10
 80014a6:	4013      	ands	r3, r2
 80014a8:	d100      	bne.n	80014ac <HAL_GPIO_Init+0x174>
 80014aa:	e092      	b.n	80015d2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80014ac:	4a50      	ldr	r2, [pc, #320]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	089b      	lsrs	r3, r3, #2
 80014b2:	3318      	adds	r3, #24
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	589b      	ldr	r3, [r3, r2]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2203      	movs	r2, #3
 80014be:	4013      	ands	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	220f      	movs	r2, #15
 80014c4:	409a      	lsls	r2, r3
 80014c6:	0013      	movs	r3, r2
 80014c8:	43da      	mvns	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	23a0      	movs	r3, #160	; 0xa0
 80014d4:	05db      	lsls	r3, r3, #23
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d013      	beq.n	8001502 <HAL_GPIO_Init+0x1ca>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a45      	ldr	r2, [pc, #276]	; (80015f4 <HAL_GPIO_Init+0x2bc>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d00d      	beq.n	80014fe <HAL_GPIO_Init+0x1c6>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a44      	ldr	r2, [pc, #272]	; (80015f8 <HAL_GPIO_Init+0x2c0>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d007      	beq.n	80014fa <HAL_GPIO_Init+0x1c2>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a43      	ldr	r2, [pc, #268]	; (80015fc <HAL_GPIO_Init+0x2c4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d101      	bne.n	80014f6 <HAL_GPIO_Init+0x1be>
 80014f2:	2303      	movs	r3, #3
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x1cc>
 80014f6:	2305      	movs	r3, #5
 80014f8:	e004      	b.n	8001504 <HAL_GPIO_Init+0x1cc>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e002      	b.n	8001504 <HAL_GPIO_Init+0x1cc>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_GPIO_Init+0x1cc>
 8001502:	2300      	movs	r3, #0
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	2103      	movs	r1, #3
 8001508:	400a      	ands	r2, r1
 800150a:	00d2      	lsls	r2, r2, #3
 800150c:	4093      	lsls	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001514:	4936      	ldr	r1, [pc, #216]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	3318      	adds	r3, #24
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001522:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43da      	mvns	r2, r3
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	035b      	lsls	r3, r3, #13
 800153a:	4013      	ands	r3, r2
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800154c:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	43da      	mvns	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	039b      	lsls	r3, r3, #14
 8001564:	4013      	ands	r3, r2
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001576:	4a1e      	ldr	r2, [pc, #120]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 8001578:	2384      	movs	r3, #132	; 0x84
 800157a:	58d3      	ldr	r3, [r2, r3]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43da      	mvns	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	029b      	lsls	r3, r3, #10
 8001590:	4013      	ands	r3, r2
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800159c:	4914      	ldr	r1, [pc, #80]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 800159e:	2284      	movs	r2, #132	; 0x84
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80015a4:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	58d3      	ldr	r3, [r2, r3]
 80015aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	43da      	mvns	r2, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	025b      	lsls	r3, r3, #9
 80015be:	4013      	ands	r3, r2
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015ca:	4909      	ldr	r1, [pc, #36]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 80015cc:	2280      	movs	r2, #128	; 0x80
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	40da      	lsrs	r2, r3
 80015e0:	1e13      	subs	r3, r2, #0
 80015e2:	d000      	beq.n	80015e6 <HAL_GPIO_Init+0x2ae>
 80015e4:	e6b0      	b.n	8001348 <HAL_GPIO_Init+0x10>
  }
}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	46c0      	nop			; (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b006      	add	sp, #24
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40021800 	.word	0x40021800
 80015f4:	50000400 	.word	0x50000400
 80015f8:	50000800 	.word	0x50000800
 80015fc:	50000c00 	.word	0x50000c00

08001600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	0008      	movs	r0, r1
 800160a:	0011      	movs	r1, r2
 800160c:	1cbb      	adds	r3, r7, #2
 800160e:	1c02      	adds	r2, r0, #0
 8001610:	801a      	strh	r2, [r3, #0]
 8001612:	1c7b      	adds	r3, r7, #1
 8001614:	1c0a      	adds	r2, r1, #0
 8001616:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001618:	1c7b      	adds	r3, r7, #1
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d004      	beq.n	800162a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001620:	1cbb      	adds	r3, r7, #2
 8001622:	881a      	ldrh	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001628:	e003      	b.n	8001632 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800162a:	1cbb      	adds	r3, r7, #2
 800162c:	881a      	ldrh	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	46bd      	mov	sp, r7
 8001636:	b002      	add	sp, #8
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a19      	ldr	r2, [pc, #100]	; (80016b0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800164a:	4013      	ands	r3, r2
 800164c:	0019      	movs	r1, r3
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	430a      	orrs	r2, r1
 8001654:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	429a      	cmp	r2, r3
 800165e:	d11f      	bne.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	0013      	movs	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	189b      	adds	r3, r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4912      	ldr	r1, [pc, #72]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800166e:	0018      	movs	r0, r3
 8001670:	f7fe fd48 	bl	8000104 <__udivsi3>
 8001674:	0003      	movs	r3, r0
 8001676:	3301      	adds	r3, #1
 8001678:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800167a:	e008      	b.n	800168e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	3b01      	subs	r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	e001      	b.n	800168e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e009      	b.n	80016a2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	401a      	ands	r2, r3
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	429a      	cmp	r2, r3
 800169e:	d0ed      	beq.n	800167c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b004      	add	sp, #16
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	40007000 	.word	0x40007000
 80016b0:	fffff9ff 	.word	0xfffff9ff
 80016b4:	20000000 	.word	0x20000000
 80016b8:	000f4240 	.word	0x000f4240

080016bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e2fe      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2201      	movs	r2, #1
 80016d4:	4013      	ands	r3, r2
 80016d6:	d100      	bne.n	80016da <HAL_RCC_OscConfig+0x1e>
 80016d8:	e07c      	b.n	80017d4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016da:	4bc3      	ldr	r3, [pc, #780]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2238      	movs	r2, #56	; 0x38
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e4:	4bc0      	ldr	r3, [pc, #768]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2203      	movs	r2, #3
 80016ea:	4013      	ands	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	2b10      	cmp	r3, #16
 80016f2:	d102      	bne.n	80016fa <HAL_RCC_OscConfig+0x3e>
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d002      	beq.n	8001700 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d10b      	bne.n	8001718 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	4bb9      	ldr	r3, [pc, #740]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	029b      	lsls	r3, r3, #10
 8001708:	4013      	ands	r3, r2
 800170a:	d062      	beq.n	80017d2 <HAL_RCC_OscConfig+0x116>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d15e      	bne.n	80017d2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e2d9      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	025b      	lsls	r3, r3, #9
 8001720:	429a      	cmp	r2, r3
 8001722:	d107      	bne.n	8001734 <HAL_RCC_OscConfig+0x78>
 8001724:	4bb0      	ldr	r3, [pc, #704]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4baf      	ldr	r3, [pc, #700]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	0249      	lsls	r1, r1, #9
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e020      	b.n	8001776 <HAL_RCC_OscConfig+0xba>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	23a0      	movs	r3, #160	; 0xa0
 800173a:	02db      	lsls	r3, r3, #11
 800173c:	429a      	cmp	r2, r3
 800173e:	d10e      	bne.n	800175e <HAL_RCC_OscConfig+0xa2>
 8001740:	4ba9      	ldr	r3, [pc, #676]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4ba8      	ldr	r3, [pc, #672]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001746:	2180      	movs	r1, #128	; 0x80
 8001748:	02c9      	lsls	r1, r1, #11
 800174a:	430a      	orrs	r2, r1
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	4ba6      	ldr	r3, [pc, #664]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4ba5      	ldr	r3, [pc, #660]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001754:	2180      	movs	r1, #128	; 0x80
 8001756:	0249      	lsls	r1, r1, #9
 8001758:	430a      	orrs	r2, r1
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	e00b      	b.n	8001776 <HAL_RCC_OscConfig+0xba>
 800175e:	4ba2      	ldr	r3, [pc, #648]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4ba1      	ldr	r3, [pc, #644]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001764:	49a1      	ldr	r1, [pc, #644]	; (80019ec <HAL_RCC_OscConfig+0x330>)
 8001766:	400a      	ands	r2, r1
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	4b9f      	ldr	r3, [pc, #636]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b9e      	ldr	r3, [pc, #632]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001770:	499f      	ldr	r1, [pc, #636]	; (80019f0 <HAL_RCC_OscConfig+0x334>)
 8001772:	400a      	ands	r2, r1
 8001774:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d014      	beq.n	80017a8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff f89f 	bl	80008c0 <HAL_GetTick>
 8001782:	0003      	movs	r3, r0
 8001784:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001788:	f7ff f89a 	bl	80008c0 <HAL_GetTick>
 800178c:	0002      	movs	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	; 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e298      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179a:	4b93      	ldr	r3, [pc, #588]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	029b      	lsls	r3, r3, #10
 80017a2:	4013      	ands	r3, r2
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0xcc>
 80017a6:	e015      	b.n	80017d4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff f88a 	bl	80008c0 <HAL_GetTick>
 80017ac:	0003      	movs	r3, r0
 80017ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b2:	f7ff f885 	bl	80008c0 <HAL_GetTick>
 80017b6:	0002      	movs	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b64      	cmp	r3, #100	; 0x64
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e283      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017c4:	4b88      	ldr	r3, [pc, #544]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	029b      	lsls	r3, r3, #10
 80017cc:	4013      	ands	r3, r2
 80017ce:	d1f0      	bne.n	80017b2 <HAL_RCC_OscConfig+0xf6>
 80017d0:	e000      	b.n	80017d4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2202      	movs	r2, #2
 80017da:	4013      	ands	r3, r2
 80017dc:	d100      	bne.n	80017e0 <HAL_RCC_OscConfig+0x124>
 80017de:	e099      	b.n	8001914 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017e0:	4b81      	ldr	r3, [pc, #516]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2238      	movs	r2, #56	; 0x38
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ea:	4b7f      	ldr	r3, [pc, #508]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2203      	movs	r2, #3
 80017f0:	4013      	ands	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	2b10      	cmp	r3, #16
 80017f8:	d102      	bne.n	8001800 <HAL_RCC_OscConfig+0x144>
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d002      	beq.n	8001806 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d135      	bne.n	8001872 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001806:	4b78      	ldr	r3, [pc, #480]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4013      	ands	r3, r2
 8001810:	d005      	beq.n	800181e <HAL_RCC_OscConfig+0x162>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e256      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181e:	4b72      	ldr	r3, [pc, #456]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	4a74      	ldr	r2, [pc, #464]	; (80019f4 <HAL_RCC_OscConfig+0x338>)
 8001824:	4013      	ands	r3, r2
 8001826:	0019      	movs	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	021a      	lsls	r2, r3, #8
 800182e:	4b6e      	ldr	r3, [pc, #440]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001830:	430a      	orrs	r2, r1
 8001832:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d112      	bne.n	8001860 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800183a:	4b6b      	ldr	r3, [pc, #428]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a6e      	ldr	r2, [pc, #440]	; (80019f8 <HAL_RCC_OscConfig+0x33c>)
 8001840:	4013      	ands	r3, r2
 8001842:	0019      	movs	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	4b67      	ldr	r3, [pc, #412]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800184a:	430a      	orrs	r2, r1
 800184c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800184e:	4b66      	ldr	r3, [pc, #408]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	0adb      	lsrs	r3, r3, #11
 8001854:	2207      	movs	r2, #7
 8001856:	4013      	ands	r3, r2
 8001858:	4a68      	ldr	r2, [pc, #416]	; (80019fc <HAL_RCC_OscConfig+0x340>)
 800185a:	40da      	lsrs	r2, r3
 800185c:	4b68      	ldr	r3, [pc, #416]	; (8001a00 <HAL_RCC_OscConfig+0x344>)
 800185e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001860:	4b68      	ldr	r3, [pc, #416]	; (8001a04 <HAL_RCC_OscConfig+0x348>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	0018      	movs	r0, r3
 8001866:	f7fe ffcf 	bl	8000808 <HAL_InitTick>
 800186a:	1e03      	subs	r3, r0, #0
 800186c:	d051      	beq.n	8001912 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e22c      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d030      	beq.n	80018dc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800187a:	4b5b      	ldr	r3, [pc, #364]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a5e      	ldr	r2, [pc, #376]	; (80019f8 <HAL_RCC_OscConfig+0x33c>)
 8001880:	4013      	ands	r3, r2
 8001882:	0019      	movs	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	4b57      	ldr	r3, [pc, #348]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800188a:	430a      	orrs	r2, r1
 800188c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800188e:	4b56      	ldr	r3, [pc, #344]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4b55      	ldr	r3, [pc, #340]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	0049      	lsls	r1, r1, #1
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff f810 	bl	80008c0 <HAL_GetTick>
 80018a0:	0003      	movs	r3, r0
 80018a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a6:	f7ff f80b 	bl	80008c0 <HAL_GetTick>
 80018aa:	0002      	movs	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e209      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b8:	4b4b      	ldr	r3, [pc, #300]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4013      	ands	r3, r2
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c4:	4b48      	ldr	r3, [pc, #288]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	4a4a      	ldr	r2, [pc, #296]	; (80019f4 <HAL_RCC_OscConfig+0x338>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	0019      	movs	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	021a      	lsls	r2, r3, #8
 80018d4:	4b44      	ldr	r3, [pc, #272]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80018d6:	430a      	orrs	r2, r1
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	e01b      	b.n	8001914 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80018dc:	4b42      	ldr	r3, [pc, #264]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b41      	ldr	r3, [pc, #260]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80018e2:	4949      	ldr	r1, [pc, #292]	; (8001a08 <HAL_RCC_OscConfig+0x34c>)
 80018e4:	400a      	ands	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e8:	f7fe ffea 	bl	80008c0 <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f2:	f7fe ffe5 	bl	80008c0 <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e1e3      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001904:	4b38      	ldr	r3, [pc, #224]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4013      	ands	r3, r2
 800190e:	d1f0      	bne.n	80018f2 <HAL_RCC_OscConfig+0x236>
 8001910:	e000      	b.n	8001914 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001912:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2208      	movs	r2, #8
 800191a:	4013      	ands	r3, r2
 800191c:	d047      	beq.n	80019ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800191e:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2238      	movs	r2, #56	; 0x38
 8001924:	4013      	ands	r3, r2
 8001926:	2b18      	cmp	r3, #24
 8001928:	d10a      	bne.n	8001940 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800192a:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800192c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192e:	2202      	movs	r2, #2
 8001930:	4013      	ands	r3, r2
 8001932:	d03c      	beq.n	80019ae <HAL_RCC_OscConfig+0x2f2>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d138      	bne.n	80019ae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e1c5      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d019      	beq.n	800197c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001948:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800194a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800194c:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800194e:	2101      	movs	r1, #1
 8001950:	430a      	orrs	r2, r1
 8001952:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7fe ffb4 	bl	80008c0 <HAL_GetTick>
 8001958:	0003      	movs	r3, r0
 800195a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195e:	f7fe ffaf 	bl	80008c0 <HAL_GetTick>
 8001962:	0002      	movs	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e1ad      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001974:	2202      	movs	r2, #2
 8001976:	4013      	ands	r3, r2
 8001978:	d0f1      	beq.n	800195e <HAL_RCC_OscConfig+0x2a2>
 800197a:	e018      	b.n	80019ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800197e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001982:	2101      	movs	r1, #1
 8001984:	438a      	bics	r2, r1
 8001986:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7fe ff9a 	bl	80008c0 <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001992:	f7fe ff95 	bl	80008c0 <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e193      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80019a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a8:	2202      	movs	r2, #2
 80019aa:	4013      	ands	r3, r2
 80019ac:	d1f1      	bne.n	8001992 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2204      	movs	r2, #4
 80019b4:	4013      	ands	r3, r2
 80019b6:	d100      	bne.n	80019ba <HAL_RCC_OscConfig+0x2fe>
 80019b8:	e0c6      	b.n	8001b48 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ba:	231f      	movs	r3, #31
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2238      	movs	r2, #56	; 0x38
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b20      	cmp	r3, #32
 80019cc:	d11e      	bne.n	8001a0c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80019d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d2:	2202      	movs	r2, #2
 80019d4:	4013      	ands	r3, r2
 80019d6:	d100      	bne.n	80019da <HAL_RCC_OscConfig+0x31e>
 80019d8:	e0b6      	b.n	8001b48 <HAL_RCC_OscConfig+0x48c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d000      	beq.n	80019e4 <HAL_RCC_OscConfig+0x328>
 80019e2:	e0b1      	b.n	8001b48 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e171      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
 80019e8:	40021000 	.word	0x40021000
 80019ec:	fffeffff 	.word	0xfffeffff
 80019f0:	fffbffff 	.word	0xfffbffff
 80019f4:	ffff80ff 	.word	0xffff80ff
 80019f8:	ffffc7ff 	.word	0xffffc7ff
 80019fc:	00f42400 	.word	0x00f42400
 8001a00:	20000000 	.word	0x20000000
 8001a04:	20000004 	.word	0x20000004
 8001a08:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a0c:	4bb1      	ldr	r3, [pc, #708]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	055b      	lsls	r3, r3, #21
 8001a14:	4013      	ands	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_OscConfig+0x360>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <HAL_RCC_OscConfig+0x362>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d011      	beq.n	8001a46 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	4bac      	ldr	r3, [pc, #688]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001a24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a26:	4bab      	ldr	r3, [pc, #684]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001a28:	2180      	movs	r1, #128	; 0x80
 8001a2a:	0549      	lsls	r1, r1, #21
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a30:	4ba8      	ldr	r3, [pc, #672]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	055b      	lsls	r3, r3, #21
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a3e:	231f      	movs	r3, #31
 8001a40:	18fb      	adds	r3, r7, r3
 8001a42:	2201      	movs	r2, #1
 8001a44:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a46:	4ba4      	ldr	r3, [pc, #656]	; (8001cd8 <HAL_RCC_OscConfig+0x61c>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d11a      	bne.n	8001a88 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a52:	4ba1      	ldr	r3, [pc, #644]	; (8001cd8 <HAL_RCC_OscConfig+0x61c>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4ba0      	ldr	r3, [pc, #640]	; (8001cd8 <HAL_RCC_OscConfig+0x61c>)
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	0049      	lsls	r1, r1, #1
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a60:	f7fe ff2e 	bl	80008c0 <HAL_GetTick>
 8001a64:	0003      	movs	r3, r0
 8001a66:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6a:	f7fe ff29 	bl	80008c0 <HAL_GetTick>
 8001a6e:	0002      	movs	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e127      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a7c:	4b96      	ldr	r3, [pc, #600]	; (8001cd8 <HAL_RCC_OscConfig+0x61c>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4013      	ands	r3, r2
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d106      	bne.n	8001a9e <HAL_RCC_OscConfig+0x3e2>
 8001a90:	4b90      	ldr	r3, [pc, #576]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001a92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a94:	4b8f      	ldr	r3, [pc, #572]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a9c:	e01c      	b.n	8001ad8 <HAL_RCC_OscConfig+0x41c>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b05      	cmp	r3, #5
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x404>
 8001aa6:	4b8b      	ldr	r3, [pc, #556]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001aa8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aaa:	4b8a      	ldr	r3, [pc, #552]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001aac:	2104      	movs	r1, #4
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ab2:	4b88      	ldr	r3, [pc, #544]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001ab4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ab6:	4b87      	ldr	r3, [pc, #540]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001ab8:	2101      	movs	r1, #1
 8001aba:	430a      	orrs	r2, r1
 8001abc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001abe:	e00b      	b.n	8001ad8 <HAL_RCC_OscConfig+0x41c>
 8001ac0:	4b84      	ldr	r3, [pc, #528]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001ac2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ac4:	4b83      	ldr	r3, [pc, #524]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	438a      	bics	r2, r1
 8001aca:	65da      	str	r2, [r3, #92]	; 0x5c
 8001acc:	4b81      	ldr	r3, [pc, #516]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001ace:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ad0:	4b80      	ldr	r3, [pc, #512]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	438a      	bics	r2, r1
 8001ad6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d014      	beq.n	8001b0a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7fe feee 	bl	80008c0 <HAL_GetTick>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae8:	e009      	b.n	8001afe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7fe fee9 	bl	80008c0 <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	4a79      	ldr	r2, [pc, #484]	; (8001cdc <HAL_RCC_OscConfig+0x620>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e0e6      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001afe:	4b75      	ldr	r3, [pc, #468]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b02:	2202      	movs	r2, #2
 8001b04:	4013      	ands	r3, r2
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x42e>
 8001b08:	e013      	b.n	8001b32 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0a:	f7fe fed9 	bl	80008c0 <HAL_GetTick>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b12:	e009      	b.n	8001b28 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b14:	f7fe fed4 	bl	80008c0 <HAL_GetTick>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	4a6f      	ldr	r2, [pc, #444]	; (8001cdc <HAL_RCC_OscConfig+0x620>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e0d1      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b28:	4b6a      	ldr	r3, [pc, #424]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b32:	231f      	movs	r3, #31
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d105      	bne.n	8001b48 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b3c:	4b65      	ldr	r3, [pc, #404]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b40:	4b64      	ldr	r3, [pc, #400]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b42:	4967      	ldr	r1, [pc, #412]	; (8001ce0 <HAL_RCC_OscConfig+0x624>)
 8001b44:	400a      	ands	r2, r1
 8001b46:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d100      	bne.n	8001b52 <HAL_RCC_OscConfig+0x496>
 8001b50:	e0bb      	b.n	8001cca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b52:	4b60      	ldr	r3, [pc, #384]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2238      	movs	r2, #56	; 0x38
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b10      	cmp	r3, #16
 8001b5c:	d100      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4a4>
 8001b5e:	e07b      	b.n	8001c58 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d156      	bne.n	8001c16 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b68:	4b5a      	ldr	r3, [pc, #360]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b59      	ldr	r3, [pc, #356]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b6e:	495d      	ldr	r1, [pc, #372]	; (8001ce4 <HAL_RCC_OscConfig+0x628>)
 8001b70:	400a      	ands	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7fe fea4 	bl	80008c0 <HAL_GetTick>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7fe fe9f 	bl	80008c0 <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e09d      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b90:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	049b      	lsls	r3, r3, #18
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d1f0      	bne.n	8001b7e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b9c:	4b4d      	ldr	r3, [pc, #308]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	4a51      	ldr	r2, [pc, #324]	; (8001ce8 <HAL_RCC_OscConfig+0x62c>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1a      	ldr	r2, [r3, #32]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	4b42      	ldr	r3, [pc, #264]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd0:	4b40      	ldr	r3, [pc, #256]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001bd6:	2180      	movs	r1, #128	; 0x80
 8001bd8:	0449      	lsls	r1, r1, #17
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	4b3c      	ldr	r3, [pc, #240]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001be4:	2180      	movs	r1, #128	; 0x80
 8001be6:	0549      	lsls	r1, r1, #21
 8001be8:	430a      	orrs	r2, r1
 8001bea:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7fe fe68 	bl	80008c0 <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7fe fe63 	bl	80008c0 <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e061      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c08:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	049b      	lsls	r3, r3, #18
 8001c10:	4013      	ands	r3, r2
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x53a>
 8001c14:	e059      	b.n	8001cca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c16:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b2e      	ldr	r3, [pc, #184]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c1c:	4931      	ldr	r1, [pc, #196]	; (8001ce4 <HAL_RCC_OscConfig+0x628>)
 8001c1e:	400a      	ands	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c22:	f7fe fe4d 	bl	80008c0 <HAL_GetTick>
 8001c26:	0003      	movs	r3, r0
 8001c28:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2c:	f7fe fe48 	bl	80008c0 <HAL_GetTick>
 8001c30:	0002      	movs	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e046      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	049b      	lsls	r3, r3, #18
 8001c46:	4013      	ands	r3, r2
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001c4a:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c50:	4926      	ldr	r1, [pc, #152]	; (8001cec <HAL_RCC_OscConfig+0x630>)
 8001c52:	400a      	ands	r2, r1
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	e038      	b.n	8001cca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e033      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	401a      	ands	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d126      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2270      	movs	r2, #112	; 0x70
 8001c7c:	401a      	ands	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d11f      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	23fe      	movs	r3, #254	; 0xfe
 8001c8a:	01db      	lsls	r3, r3, #7
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d116      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	23f8      	movs	r3, #248	; 0xf8
 8001c9c:	039b      	lsls	r3, r3, #14
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d10e      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	23e0      	movs	r3, #224	; 0xe0
 8001cac:	051b      	lsls	r3, r3, #20
 8001cae:	401a      	ands	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	0f5b      	lsrs	r3, r3, #29
 8001cbc:	075a      	lsls	r2, r3, #29
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d001      	beq.n	8001cca <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b008      	add	sp, #32
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40007000 	.word	0x40007000
 8001cdc:	00001388 	.word	0x00001388
 8001ce0:	efffffff 	.word	0xefffffff
 8001ce4:	feffffff 	.word	0xfeffffff
 8001ce8:	11c1808c 	.word	0x11c1808c
 8001cec:	eefefffc 	.word	0xeefefffc

08001cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0e9      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d04:	4b76      	ldr	r3, [pc, #472]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2207      	movs	r2, #7
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d91e      	bls.n	8001d50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b73      	ldr	r3, [pc, #460]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2207      	movs	r2, #7
 8001d18:	4393      	bics	r3, r2
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	4b70      	ldr	r3, [pc, #448]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d24:	f7fe fdcc 	bl	80008c0 <HAL_GetTick>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d2c:	e009      	b.n	8001d42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2e:	f7fe fdc7 	bl	80008c0 <HAL_GetTick>
 8001d32:	0002      	movs	r2, r0
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	4a6a      	ldr	r2, [pc, #424]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e0ca      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d42:	4b67      	ldr	r3, [pc, #412]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2207      	movs	r2, #7
 8001d48:	4013      	ands	r3, r2
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d1ee      	bne.n	8001d2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2202      	movs	r2, #2
 8001d56:	4013      	ands	r3, r2
 8001d58:	d015      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2204      	movs	r2, #4
 8001d60:	4013      	ands	r3, r2
 8001d62:	d006      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d64:	4b60      	ldr	r3, [pc, #384]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	4b5f      	ldr	r3, [pc, #380]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6a:	21e0      	movs	r1, #224	; 0xe0
 8001d6c:	01c9      	lsls	r1, r1, #7
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d72:	4b5d      	ldr	r3, [pc, #372]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	4a5d      	ldr	r2, [pc, #372]	; (8001eec <HAL_RCC_ClockConfig+0x1fc>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	4b59      	ldr	r3, [pc, #356]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d82:	430a      	orrs	r2, r1
 8001d84:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d057      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d107      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d98:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	029b      	lsls	r3, r3, #10
 8001da0:	4013      	ands	r3, r2
 8001da2:	d12b      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e097      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db0:	4b4d      	ldr	r3, [pc, #308]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	049b      	lsls	r3, r3, #18
 8001db8:	4013      	ands	r3, r2
 8001dba:	d11f      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e08b      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d107      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc8:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d113      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e07f      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d106      	bne.n	8001dee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001de0:	4b41      	ldr	r3, [pc, #260]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de4:	2202      	movs	r2, #2
 8001de6:	4013      	ands	r3, r2
 8001de8:	d108      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e074      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dee:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df2:	2202      	movs	r2, #2
 8001df4:	4013      	ands	r3, r2
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e06d      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dfc:	4b3a      	ldr	r3, [pc, #232]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2207      	movs	r2, #7
 8001e02:	4393      	bics	r3, r2
 8001e04:	0019      	movs	r1, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4b37      	ldr	r3, [pc, #220]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e10:	f7fe fd56 	bl	80008c0 <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e18:	e009      	b.n	8001e2e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1a:	f7fe fd51 	bl	80008c0 <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	4a2f      	ldr	r2, [pc, #188]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e054      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2238      	movs	r2, #56	; 0x38
 8001e34:	401a      	ands	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d1ec      	bne.n	8001e1a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e40:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2207      	movs	r2, #7
 8001e46:	4013      	ands	r3, r2
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d21e      	bcs.n	8001e8c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2207      	movs	r2, #7
 8001e54:	4393      	bics	r3, r2
 8001e56:	0019      	movs	r1, r3
 8001e58:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e60:	f7fe fd2e 	bl	80008c0 <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e68:	e009      	b.n	8001e7e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6a:	f7fe fd29 	bl	80008c0 <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	4a1b      	ldr	r2, [pc, #108]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e02c      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e7e:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2207      	movs	r2, #7
 8001e84:	4013      	ands	r3, r2
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d1ee      	bne.n	8001e6a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2204      	movs	r2, #4
 8001e92:	4013      	ands	r3, r2
 8001e94:	d009      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	4a15      	ldr	r2, [pc, #84]	; (8001ef0 <HAL_RCC_ClockConfig+0x200>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001eaa:	f000 f829 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8001eae:	0001      	movs	r1, r0
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	401a      	ands	r2, r3
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <HAL_RCC_ClockConfig+0x204>)
 8001ebc:	0092      	lsls	r2, r2, #2
 8001ebe:	58d3      	ldr	r3, [r2, r3]
 8001ec0:	221f      	movs	r2, #31
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	000a      	movs	r2, r1
 8001ec6:	40da      	lsrs	r2, r3
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_ClockConfig+0x208>)
 8001eca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_RCC_ClockConfig+0x20c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f7fe fc99 	bl	8000808 <HAL_InitTick>
 8001ed6:	0003      	movs	r3, r0
}
 8001ed8:	0018      	movs	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b004      	add	sp, #16
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40022000 	.word	0x40022000
 8001ee4:	00001388 	.word	0x00001388
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	fffff0ff 	.word	0xfffff0ff
 8001ef0:	ffff8fff 	.word	0xffff8fff
 8001ef4:	08002694 	.word	0x08002694
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	20000004 	.word	0x20000004

08001f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f06:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2238      	movs	r2, #56	; 0x38
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d10f      	bne.n	8001f30 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f10:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0adb      	lsrs	r3, r3, #11
 8001f16:	2207      	movs	r2, #7
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	0013      	movs	r3, r2
 8001f20:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f22:	6839      	ldr	r1, [r7, #0]
 8001f24:	4835      	ldr	r0, [pc, #212]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f26:	f7fe f8ed 	bl	8000104 <__udivsi3>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	e05d      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f30:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2238      	movs	r2, #56	; 0x38
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d102      	bne.n	8001f42 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f3c:	4b30      	ldr	r3, [pc, #192]	; (8002000 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	e054      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f42:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2238      	movs	r2, #56	; 0x38
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b10      	cmp	r3, #16
 8001f4c:	d138      	bne.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f4e:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2203      	movs	r2, #3
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f58:	4b27      	ldr	r3, [pc, #156]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	2207      	movs	r2, #7
 8001f60:	4013      	ands	r3, r2
 8001f62:	3301      	adds	r3, #1
 8001f64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d10d      	bne.n	8001f88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	4824      	ldr	r0, [pc, #144]	; (8002000 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f70:	f7fe f8c8 	bl	8000104 <__udivsi3>
 8001f74:	0003      	movs	r3, r0
 8001f76:	0019      	movs	r1, r3
 8001f78:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	227f      	movs	r2, #127	; 0x7f
 8001f80:	4013      	ands	r3, r2
 8001f82:	434b      	muls	r3, r1
 8001f84:	617b      	str	r3, [r7, #20]
        break;
 8001f86:	e00d      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	481c      	ldr	r0, [pc, #112]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f8c:	f7fe f8ba 	bl	8000104 <__udivsi3>
 8001f90:	0003      	movs	r3, r0
 8001f92:	0019      	movs	r1, r3
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	227f      	movs	r2, #127	; 0x7f
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	434b      	muls	r3, r1
 8001fa0:	617b      	str	r3, [r7, #20]
        break;
 8001fa2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	0f5b      	lsrs	r3, r3, #29
 8001faa:	2207      	movs	r2, #7
 8001fac:	4013      	ands	r3, r2
 8001fae:	3301      	adds	r3, #1
 8001fb0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	6978      	ldr	r0, [r7, #20]
 8001fb6:	f7fe f8a5 	bl	8000104 <__udivsi3>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	e015      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2238      	movs	r2, #56	; 0x38
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	d103      	bne.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	e00b      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2238      	movs	r2, #56	; 0x38
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b18      	cmp	r3, #24
 8001fde:	d103      	bne.n	8001fe8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001fe0:	23fa      	movs	r3, #250	; 0xfa
 8001fe2:	01db      	lsls	r3, r3, #7
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	e001      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fec:	693b      	ldr	r3, [r7, #16]
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b006      	add	sp, #24
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	00f42400 	.word	0x00f42400
 8002000:	007a1200 	.word	0x007a1200

08002004 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800200c:	2313      	movs	r3, #19
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002014:	2312      	movs	r3, #18
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	029b      	lsls	r3, r3, #10
 8002024:	4013      	ands	r3, r2
 8002026:	d100      	bne.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002028:	e0a3      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202a:	2011      	movs	r0, #17
 800202c:	183b      	adds	r3, r7, r0
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002032:	4ba5      	ldr	r3, [pc, #660]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002034:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	055b      	lsls	r3, r3, #21
 800203a:	4013      	ands	r3, r2
 800203c:	d110      	bne.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	4ba2      	ldr	r3, [pc, #648]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002040:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002042:	4ba1      	ldr	r3, [pc, #644]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002044:	2180      	movs	r1, #128	; 0x80
 8002046:	0549      	lsls	r1, r1, #21
 8002048:	430a      	orrs	r2, r1
 800204a:	63da      	str	r2, [r3, #60]	; 0x3c
 800204c:	4b9e      	ldr	r3, [pc, #632]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800204e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	055b      	lsls	r3, r3, #21
 8002054:	4013      	ands	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205a:	183b      	adds	r3, r7, r0
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002060:	4b9a      	ldr	r3, [pc, #616]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b99      	ldr	r3, [pc, #612]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002066:	2180      	movs	r1, #128	; 0x80
 8002068:	0049      	lsls	r1, r1, #1
 800206a:	430a      	orrs	r2, r1
 800206c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800206e:	f7fe fc27 	bl	80008c0 <HAL_GetTick>
 8002072:	0003      	movs	r3, r0
 8002074:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002076:	e00b      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002078:	f7fe fc22 	bl	80008c0 <HAL_GetTick>
 800207c:	0002      	movs	r2, r0
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d904      	bls.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002086:	2313      	movs	r3, #19
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	2203      	movs	r2, #3
 800208c:	701a      	strb	r2, [r3, #0]
        break;
 800208e:	e005      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002090:	4b8e      	ldr	r3, [pc, #568]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4013      	ands	r3, r2
 800209a:	d0ed      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800209c:	2313      	movs	r3, #19
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d154      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020a6:	4b88      	ldr	r3, [pc, #544]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020aa:	23c0      	movs	r3, #192	; 0xc0
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4013      	ands	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d019      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d014      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020c2:	4b81      	ldr	r3, [pc, #516]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	4a82      	ldr	r2, [pc, #520]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020cc:	4b7e      	ldr	r3, [pc, #504]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020d0:	4b7d      	ldr	r3, [pc, #500]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020d2:	2180      	movs	r1, #128	; 0x80
 80020d4:	0249      	lsls	r1, r1, #9
 80020d6:	430a      	orrs	r2, r1
 80020d8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020da:	4b7b      	ldr	r3, [pc, #492]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020de:	4b7a      	ldr	r3, [pc, #488]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020e0:	497c      	ldr	r1, [pc, #496]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80020e2:	400a      	ands	r2, r1
 80020e4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020e6:	4b78      	ldr	r3, [pc, #480]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2201      	movs	r2, #1
 80020f0:	4013      	ands	r3, r2
 80020f2:	d016      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7fe fbe4 	bl	80008c0 <HAL_GetTick>
 80020f8:	0003      	movs	r3, r0
 80020fa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fc:	e00c      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fe:	f7fe fbdf 	bl	80008c0 <HAL_GetTick>
 8002102:	0002      	movs	r2, r0
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	4a73      	ldr	r2, [pc, #460]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d904      	bls.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800210e:	2313      	movs	r3, #19
 8002110:	18fb      	adds	r3, r7, r3
 8002112:	2203      	movs	r2, #3
 8002114:	701a      	strb	r2, [r3, #0]
            break;
 8002116:	e004      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002118:	4b6b      	ldr	r3, [pc, #428]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800211a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211c:	2202      	movs	r2, #2
 800211e:	4013      	ands	r3, r2
 8002120:	d0ed      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002122:	2313      	movs	r3, #19
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10a      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800212c:	4b66      	ldr	r3, [pc, #408]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800212e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002130:	4a67      	ldr	r2, [pc, #412]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002132:	4013      	ands	r3, r2
 8002134:	0019      	movs	r1, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800213a:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800213c:	430a      	orrs	r2, r1
 800213e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002140:	e00c      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002142:	2312      	movs	r3, #18
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	2213      	movs	r2, #19
 8002148:	18ba      	adds	r2, r7, r2
 800214a:	7812      	ldrb	r2, [r2, #0]
 800214c:	701a      	strb	r2, [r3, #0]
 800214e:	e005      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002150:	2312      	movs	r3, #18
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	2213      	movs	r2, #19
 8002156:	18ba      	adds	r2, r7, r2
 8002158:	7812      	ldrb	r2, [r2, #0]
 800215a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800215c:	2311      	movs	r3, #17
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d105      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002166:	4b58      	ldr	r3, [pc, #352]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002168:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800216a:	4b57      	ldr	r3, [pc, #348]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800216c:	495b      	ldr	r1, [pc, #364]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800216e:	400a      	ands	r2, r1
 8002170:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2201      	movs	r2, #1
 8002178:	4013      	ands	r3, r2
 800217a:	d009      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800217c:	4b52      	ldr	r3, [pc, #328]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800217e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002180:	2203      	movs	r2, #3
 8002182:	4393      	bics	r3, r2
 8002184:	0019      	movs	r1, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	4b4f      	ldr	r3, [pc, #316]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800218c:	430a      	orrs	r2, r1
 800218e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2210      	movs	r2, #16
 8002196:	4013      	ands	r3, r2
 8002198:	d009      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800219a:	4b4b      	ldr	r3, [pc, #300]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800219c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219e:	4a50      	ldr	r2, [pc, #320]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	0019      	movs	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021aa:	430a      	orrs	r2, r1
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4013      	ands	r3, r2
 80021b8:	d009      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021ba:	4b43      	ldr	r3, [pc, #268]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021be:	4a49      	ldr	r2, [pc, #292]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	0019      	movs	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021ca:	430a      	orrs	r2, r1
 80021cc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4013      	ands	r3, r2
 80021d8:	d009      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021da:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021de:	4a42      	ldr	r2, [pc, #264]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	0019      	movs	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699a      	ldr	r2, [r3, #24]
 80021e8:	4b37      	ldr	r3, [pc, #220]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021ea:	430a      	orrs	r2, r1
 80021ec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2220      	movs	r2, #32
 80021f4:	4013      	ands	r3, r2
 80021f6:	d009      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021f8:	4b33      	ldr	r3, [pc, #204]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fc:	4a3b      	ldr	r2, [pc, #236]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021fe:	4013      	ands	r3, r2
 8002200:	0019      	movs	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002208:	430a      	orrs	r2, r1
 800220a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	01db      	lsls	r3, r3, #7
 8002214:	4013      	ands	r3, r2
 8002216:	d015      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002218:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800221a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	0899      	lsrs	r1, r3, #2
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69da      	ldr	r2, [r3, #28]
 8002224:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002226:	430a      	orrs	r2, r1
 8002228:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69da      	ldr	r2, [r3, #28]
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	05db      	lsls	r3, r3, #23
 8002232:	429a      	cmp	r2, r3
 8002234:	d106      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800223c:	2180      	movs	r1, #128	; 0x80
 800223e:	0249      	lsls	r1, r1, #9
 8002240:	430a      	orrs	r2, r1
 8002242:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	039b      	lsls	r3, r3, #14
 800224c:	4013      	ands	r3, r2
 800224e:	d016      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002254:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002256:	4013      	ands	r3, r2
 8002258:	0019      	movs	r1, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1a      	ldr	r2, [r3, #32]
 800225e:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002260:	430a      	orrs	r2, r1
 8002262:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1a      	ldr	r2, [r3, #32]
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	03db      	lsls	r3, r3, #15
 800226c:	429a      	cmp	r2, r3
 800226e:	d106      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002270:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002276:	2180      	movs	r1, #128	; 0x80
 8002278:	0449      	lsls	r1, r1, #17
 800227a:	430a      	orrs	r2, r1
 800227c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	4013      	ands	r3, r2
 8002288:	d016      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800228c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228e:	4a19      	ldr	r2, [pc, #100]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002290:	4013      	ands	r3, r2
 8002292:	0019      	movs	r1, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800229a:	430a      	orrs	r2, r1
 800229c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691a      	ldr	r2, [r3, #16]
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	01db      	lsls	r3, r3, #7
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d106      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022aa:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022b0:	2180      	movs	r1, #128	; 0x80
 80022b2:	0249      	lsls	r1, r1, #9
 80022b4:	430a      	orrs	r2, r1
 80022b6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80022b8:	2312      	movs	r3, #18
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	781b      	ldrb	r3, [r3, #0]
}
 80022be:	0018      	movs	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b006      	add	sp, #24
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40007000 	.word	0x40007000
 80022d0:	fffffcff 	.word	0xfffffcff
 80022d4:	fffeffff 	.word	0xfffeffff
 80022d8:	00001388 	.word	0x00001388
 80022dc:	efffffff 	.word	0xefffffff
 80022e0:	fffff3ff 	.word	0xfffff3ff
 80022e4:	fff3ffff 	.word	0xfff3ffff
 80022e8:	ffcfffff 	.word	0xffcfffff
 80022ec:	ffffcfff 	.word	0xffffcfff
 80022f0:	ffbfffff 	.word	0xffbfffff
 80022f4:	ffff3fff 	.word	0xffff3fff

080022f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80022f8:	b5b0      	push	{r4, r5, r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002300:	230f      	movs	r3, #15
 8002302:	18fb      	adds	r3, r7, r3
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d100      	bne.n	8002310 <HAL_RTC_Init+0x18>
 800230e:	e08c      	b.n	800242a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2229      	movs	r2, #41	; 0x29
 8002314:	5c9b      	ldrb	r3, [r3, r2]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10b      	bne.n	8002334 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2228      	movs	r2, #40	; 0x28
 8002320:	2100      	movs	r1, #0
 8002322:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2288      	movs	r2, #136	; 0x88
 8002328:	0212      	lsls	r2, r2, #8
 800232a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	0018      	movs	r0, r3
 8002330:	f7fe f9c6 	bl	80006c0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2229      	movs	r2, #41	; 0x29
 8002338:	2102      	movs	r1, #2
 800233a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2210      	movs	r2, #16
 8002344:	4013      	ands	r3, r2
 8002346:	2b10      	cmp	r3, #16
 8002348:	d062      	beq.n	8002410 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	22ca      	movs	r2, #202	; 0xca
 8002350:	625a      	str	r2, [r3, #36]	; 0x24
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2253      	movs	r2, #83	; 0x53
 8002358:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800235a:	250f      	movs	r5, #15
 800235c:	197c      	adds	r4, r7, r5
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	0018      	movs	r0, r3
 8002362:	f000 f891 	bl	8002488 <RTC_EnterInitMode>
 8002366:	0003      	movs	r3, r0
 8002368:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800236a:	0028      	movs	r0, r5
 800236c:	183b      	adds	r3, r7, r0
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d12c      	bne.n	80023ce <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	492e      	ldr	r1, [pc, #184]	; (8002438 <HAL_RTC_Init+0x140>)
 8002380:	400a      	ands	r2, r1
 8002382:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6999      	ldr	r1, [r3, #24]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6912      	ldr	r2, [r2, #16]
 80023aa:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6919      	ldr	r1, [r3, #16]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	041a      	lsls	r2, r3, #16
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80023c0:	183c      	adds	r4, r7, r0
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 f8a1 	bl	800250c <RTC_ExitInitMode>
 80023ca:	0003      	movs	r3, r0
 80023cc:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80023ce:	230f      	movs	r3, #15
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d116      	bne.n	8002406 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	00d2      	lsls	r2, r2, #3
 80023e4:	08d2      	lsrs	r2, r2, #3
 80023e6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6999      	ldr	r1, [r3, #24]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	22ff      	movs	r2, #255	; 0xff
 800240c:	625a      	str	r2, [r3, #36]	; 0x24
 800240e:	e003      	b.n	8002418 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002410:	230f      	movs	r3, #15
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002418:	230f      	movs	r3, #15
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d103      	bne.n	800242a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2229      	movs	r2, #41	; 0x29
 8002426:	2101      	movs	r1, #1
 8002428:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800242a:	230f      	movs	r3, #15
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	781b      	ldrb	r3, [r3, #0]
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b004      	add	sp, #16
 8002436:	bdb0      	pop	{r4, r5, r7, pc}
 8002438:	fb8fffbf 	.word	0xfb8fffbf

0800243c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <HAL_RTC_WaitForSynchro+0x48>)
 800244a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800244c:	f7fe fa38 	bl	80008c0 <HAL_GetTick>
 8002450:	0003      	movs	r3, r0
 8002452:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002454:	e00a      	b.n	800246c <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002456:	f7fe fa33 	bl	80008c0 <HAL_GetTick>
 800245a:	0002      	movs	r2, r0
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1ad2      	subs	r2, r2, r3
 8002460:	23fa      	movs	r3, #250	; 0xfa
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	429a      	cmp	r2, r3
 8002466:	d901      	bls.n	800246c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e006      	b.n	800247a <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2220      	movs	r2, #32
 8002474:	4013      	ands	r3, r2
 8002476:	d0ee      	beq.n	8002456 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	0018      	movs	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	b004      	add	sp, #16
 8002480:	bd80      	pop	{r7, pc}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	0001005f 	.word	0x0001005f

08002488 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002490:	230f      	movs	r3, #15
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2240      	movs	r2, #64	; 0x40
 80024a0:	4013      	ands	r3, r2
 80024a2:	d12c      	bne.n	80024fe <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2180      	movs	r1, #128	; 0x80
 80024b0:	430a      	orrs	r2, r1
 80024b2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80024b4:	f7fe fa04 	bl	80008c0 <HAL_GetTick>
 80024b8:	0003      	movs	r3, r0
 80024ba:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80024bc:	e014      	b.n	80024e8 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80024be:	f7fe f9ff 	bl	80008c0 <HAL_GetTick>
 80024c2:	0002      	movs	r2, r0
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	1ad2      	subs	r2, r2, r3
 80024c8:	200f      	movs	r0, #15
 80024ca:	183b      	adds	r3, r7, r0
 80024cc:	1839      	adds	r1, r7, r0
 80024ce:	7809      	ldrb	r1, [r1, #0]
 80024d0:	7019      	strb	r1, [r3, #0]
 80024d2:	23fa      	movs	r3, #250	; 0xfa
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d906      	bls.n	80024e8 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80024da:	183b      	adds	r3, r7, r0
 80024dc:	2203      	movs	r2, #3
 80024de:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2229      	movs	r2, #41	; 0x29
 80024e4:	2103      	movs	r1, #3
 80024e6:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2240      	movs	r2, #64	; 0x40
 80024f0:	4013      	ands	r3, r2
 80024f2:	d104      	bne.n	80024fe <RTC_EnterInitMode+0x76>
 80024f4:	230f      	movs	r3, #15
 80024f6:	18fb      	adds	r3, r7, r3
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d1df      	bne.n	80024be <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80024fe:	230f      	movs	r3, #15
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	781b      	ldrb	r3, [r3, #0]
}
 8002504:	0018      	movs	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	b004      	add	sp, #16
 800250a:	bd80      	pop	{r7, pc}

0800250c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800250c:	b590      	push	{r4, r7, lr}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002514:	240f      	movs	r4, #15
 8002516:	193b      	adds	r3, r7, r4
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800251c:	4b1c      	ldr	r3, [pc, #112]	; (8002590 <RTC_ExitInitMode+0x84>)
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <RTC_ExitInitMode+0x84>)
 8002522:	2180      	movs	r1, #128	; 0x80
 8002524:	438a      	bics	r2, r1
 8002526:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <RTC_ExitInitMode+0x84>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	2220      	movs	r2, #32
 800252e:	4013      	ands	r3, r2
 8002530:	d10d      	bne.n	800254e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	0018      	movs	r0, r3
 8002536:	f7ff ff81 	bl	800243c <HAL_RTC_WaitForSynchro>
 800253a:	1e03      	subs	r3, r0, #0
 800253c:	d021      	beq.n	8002582 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2229      	movs	r2, #41	; 0x29
 8002542:	2103      	movs	r1, #3
 8002544:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002546:	193b      	adds	r3, r7, r4
 8002548:	2203      	movs	r2, #3
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e019      	b.n	8002582 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <RTC_ExitInitMode+0x84>)
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <RTC_ExitInitMode+0x84>)
 8002554:	2120      	movs	r1, #32
 8002556:	438a      	bics	r2, r1
 8002558:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	0018      	movs	r0, r3
 800255e:	f7ff ff6d 	bl	800243c <HAL_RTC_WaitForSynchro>
 8002562:	1e03      	subs	r3, r0, #0
 8002564:	d007      	beq.n	8002576 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2229      	movs	r2, #41	; 0x29
 800256a:	2103      	movs	r1, #3
 800256c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800256e:	230f      	movs	r3, #15
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	2203      	movs	r2, #3
 8002574:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <RTC_ExitInitMode+0x84>)
 8002578:	699a      	ldr	r2, [r3, #24]
 800257a:	4b05      	ldr	r3, [pc, #20]	; (8002590 <RTC_ExitInitMode+0x84>)
 800257c:	2120      	movs	r1, #32
 800257e:	430a      	orrs	r2, r1
 8002580:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002582:	230f      	movs	r3, #15
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	781b      	ldrb	r3, [r3, #0]
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	b005      	add	sp, #20
 800258e:	bd90      	pop	{r4, r7, pc}
 8002590:	40002800 	.word	0x40002800

08002594 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2228      	movs	r2, #40	; 0x28
 80025a2:	5c9b      	ldrb	r3, [r3, r2]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_RTCEx_SetCalibrationOutPut+0x18>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e035      	b.n	8002618 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2228      	movs	r2, #40	; 0x28
 80025b0:	2101      	movs	r1, #1
 80025b2:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2229      	movs	r2, #41	; 0x29
 80025b8:	2102      	movs	r1, #2
 80025ba:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	22ca      	movs	r2, #202	; 0xca
 80025c2:	625a      	str	r2, [r3, #36]	; 0x24
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2253      	movs	r2, #83	; 0x53
 80025ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699a      	ldr	r2, [r3, #24]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4912      	ldr	r1, [pc, #72]	; (8002620 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 80025d8:	400a      	ands	r2, r1
 80025da:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6999      	ldr	r1, [r3, #24]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2180      	movs	r1, #128	; 0x80
 80025f8:	0409      	lsls	r1, r1, #16
 80025fa:	430a      	orrs	r2, r1
 80025fc:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	22ff      	movs	r2, #255	; 0xff
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2229      	movs	r2, #41	; 0x29
 800260a:	2101      	movs	r1, #1
 800260c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2228      	movs	r2, #40	; 0x28
 8002612:	2100      	movs	r1, #0
 8002614:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	0018      	movs	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	b002      	add	sp, #8
 800261e:	bd80      	pop	{r7, pc}
 8002620:	fff7ffff 	.word	0xfff7ffff

08002624 <__libc_init_array>:
 8002624:	b570      	push	{r4, r5, r6, lr}
 8002626:	2600      	movs	r6, #0
 8002628:	4d0c      	ldr	r5, [pc, #48]	; (800265c <__libc_init_array+0x38>)
 800262a:	4c0d      	ldr	r4, [pc, #52]	; (8002660 <__libc_init_array+0x3c>)
 800262c:	1b64      	subs	r4, r4, r5
 800262e:	10a4      	asrs	r4, r4, #2
 8002630:	42a6      	cmp	r6, r4
 8002632:	d109      	bne.n	8002648 <__libc_init_array+0x24>
 8002634:	2600      	movs	r6, #0
 8002636:	f000 f821 	bl	800267c <_init>
 800263a:	4d0a      	ldr	r5, [pc, #40]	; (8002664 <__libc_init_array+0x40>)
 800263c:	4c0a      	ldr	r4, [pc, #40]	; (8002668 <__libc_init_array+0x44>)
 800263e:	1b64      	subs	r4, r4, r5
 8002640:	10a4      	asrs	r4, r4, #2
 8002642:	42a6      	cmp	r6, r4
 8002644:	d105      	bne.n	8002652 <__libc_init_array+0x2e>
 8002646:	bd70      	pop	{r4, r5, r6, pc}
 8002648:	00b3      	lsls	r3, r6, #2
 800264a:	58eb      	ldr	r3, [r5, r3]
 800264c:	4798      	blx	r3
 800264e:	3601      	adds	r6, #1
 8002650:	e7ee      	b.n	8002630 <__libc_init_array+0xc>
 8002652:	00b3      	lsls	r3, r6, #2
 8002654:	58eb      	ldr	r3, [r5, r3]
 8002656:	4798      	blx	r3
 8002658:	3601      	adds	r6, #1
 800265a:	e7f2      	b.n	8002642 <__libc_init_array+0x1e>
 800265c:	080026d4 	.word	0x080026d4
 8002660:	080026d4 	.word	0x080026d4
 8002664:	080026d4 	.word	0x080026d4
 8002668:	080026d8 	.word	0x080026d8

0800266c <memset>:
 800266c:	0003      	movs	r3, r0
 800266e:	1882      	adds	r2, r0, r2
 8002670:	4293      	cmp	r3, r2
 8002672:	d100      	bne.n	8002676 <memset+0xa>
 8002674:	4770      	bx	lr
 8002676:	7019      	strb	r1, [r3, #0]
 8002678:	3301      	adds	r3, #1
 800267a:	e7f9      	b.n	8002670 <memset+0x4>

0800267c <_init>:
 800267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002682:	bc08      	pop	{r3}
 8002684:	469e      	mov	lr, r3
 8002686:	4770      	bx	lr

08002688 <_fini>:
 8002688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268e:	bc08      	pop	{r3}
 8002690:	469e      	mov	lr, r3
 8002692:	4770      	bx	lr
