
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b84  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005c40  08005c40  00006c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d1c  08005d1c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000000  08005d1c  08005d1c  0000705c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d1c  08005d1c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d1c  08005d1c  00006d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d20  08005d20  00006d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005d24  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000005c  08005d80  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08005d80  000071e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124b7  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b91  00000000  00000000  0001953b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0001c0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e10  00000000  00000000  0001d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018116  00000000  00000000  0001e0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164a2  00000000  00000000  00036206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098325  00000000  00000000  0004c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e49cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004138  00000000  00000000  000e4a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e8b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005c28 	.word	0x08005c28

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08005c28 	.word	0x08005c28

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	b089      	sub	sp, #36	@ 0x24
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231f      	movs	r3, #31
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	2108      	movs	r1, #8
 800024a:	185b      	adds	r3, r3, r1
 800024c:	19db      	adds	r3, r3, r7
 800024e:	881b      	ldrh	r3, [r3, #0]
 8000250:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-high hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	6818      	ldr	r0, [r3, #0]
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	899b      	ldrh	r3, [r3, #12]
 800025c:	2201      	movs	r2, #1
 800025e:	0019      	movs	r1, r3
 8000260:	f002 f9f7 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	689b      	ldr	r3, [r3, #8]
 8000268:	6818      	ldr	r0, [r3, #0]
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	899b      	ldrh	r3, [r3, #12]
 800026e:	2200      	movs	r2, #0
 8000270:	0019      	movs	r1, r3
 8000272:	f002 f9ee 	bl	8002652 <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	0018      	movs	r0, r3
 800027c:	f004 fea0 	bl	8004fc0 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	0018      	movs	r0, r3
 8000286:	f004 fe4f 	bl	8004f28 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000292:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000294:	46c0      	nop			@ (mov r8, r8)
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029e:	69bb      	ldr	r3, [r7, #24]
 80002a0:	1ad2      	subs	r2, r2, r3
 80002a2:	2380      	movs	r3, #128	@ 0x80
 80002a4:	021b      	lsls	r3, r3, #8
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d3f5      	bcc.n	8000296 <capTouch_Init+0x7a>

	// Verify device ID
	uint8_t deviceIDRet = 0x00;
 80002aa:	2517      	movs	r5, #23
 80002ac:	197b      	adds	r3, r7, r5
 80002ae:	2200      	movs	r2, #0
 80002b0:	701a      	strb	r2, [r3, #0]
	halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b2:	261f      	movs	r6, #31
 80002b4:	19bc      	adds	r4, r7, r6
 80002b6:	197a      	adds	r2, r7, r5
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	0011      	movs	r1, r2
 80002bc:	0018      	movs	r0, r3
 80002be:	f000 f855 	bl	800036c <capTouch_ReadDeviceID>
 80002c2:	0003      	movs	r3, r0
 80002c4:	7023      	strb	r3, [r4, #0]

	if(deviceIDRet != DEVICE_ID || halRet != HAL_OK) {
 80002c6:	197b      	adds	r3, r7, r5
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80002cc:	d103      	bne.n	80002d6 <capTouch_Init+0xba>
 80002ce:	19bb      	adds	r3, r7, r6
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <capTouch_Init+0xbe>
		return 1;
 80002d6:	2301      	movs	r3, #1
 80002d8:	e043      	b.n	8000362 <capTouch_Init+0x146>
	}

	capTouch->deviceID = deviceIDRet;
 80002da:	2317      	movs	r3, #23
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	781a      	ldrb	r2, [r3, #0]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	739a      	strb	r2, [r3, #14]

	// Force Device Recalibration
	halRet = capTouch_Recalibrate(capTouch);
 80002e4:	251f      	movs	r5, #31
 80002e6:	197c      	adds	r4, r7, r5
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 f880 	bl	80003f0 <capTouch_Recalibrate>
 80002f0:	0003      	movs	r3, r0
 80002f2:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 80002f4:	197b      	adds	r3, r7, r5
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <capTouch_Init+0xe4>
		return 2;
 80002fc:	2302      	movs	r3, #2
 80002fe:	e030      	b.n	8000362 <capTouch_Init+0x146>
	}

	// Wait until calibration sequence completes
	while(capTouch_checkCal(capTouch)) {}
 8000300:	46c0      	nop			@ (mov r8, r8)
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	0018      	movs	r0, r3
 8000306:	f000 f895 	bl	8000434 <capTouch_checkCal>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d1f9      	bne.n	8000302 <capTouch_Init+0xe6>

	// Get initial reading of channels
	halRet = capTouch_readChannels(capTouch);
 800030e:	251f      	movs	r5, #31
 8000310:	197c      	adds	r4, r7, r5
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	0018      	movs	r0, r3
 8000316:	f000 f8d1 	bl	80004bc <capTouch_readChannels>
 800031a:	0003      	movs	r3, r0
 800031c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 800031e:	197b      	adds	r3, r7, r5
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <capTouch_Init+0x10e>
		return 3;
 8000326:	2303      	movs	r3, #3
 8000328:	e01b      	b.n	8000362 <capTouch_Init+0x146>
	}

	halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 800032a:	251f      	movs	r5, #31
 800032c:	197c      	adds	r4, r7, r5
 800032e:	2334      	movs	r3, #52	@ 0x34
 8000330:	2208      	movs	r2, #8
 8000332:	189b      	adds	r3, r3, r2
 8000334:	19db      	adds	r3, r3, r7
 8000336:	781a      	ldrb	r2, [r3, #0]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	0011      	movs	r1, r2
 800033c:	0018      	movs	r0, r3
 800033e:	f000 f901 	bl	8000544 <capTouch_enableKeys>
 8000342:	0003      	movs	r3, r0
 8000344:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000346:	197b      	adds	r3, r7, r5
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <capTouch_Init+0x136>
		return 4;
 800034e:	2304      	movs	r3, #4
 8000350:	e007      	b.n	8000362 <capTouch_Init+0x146>
	}
	capTouch->keys = keyEnFlags;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	2234      	movs	r2, #52	@ 0x34
 8000356:	2108      	movs	r1, #8
 8000358:	1852      	adds	r2, r2, r1
 800035a:	19d2      	adds	r2, r2, r7
 800035c:	7812      	ldrb	r2, [r2, #0]
 800035e:	73da      	strb	r2, [r3, #15]

	return 0;
 8000360:	2300      	movs	r3, #0

}
 8000362:	0018      	movs	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	b009      	add	sp, #36	@ 0x24
 8000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800036c <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 800036c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036e:	b087      	sub	sp, #28
 8000370:	af02      	add	r7, sp, #8
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 8000376:	230e      	movs	r3, #14
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800037e:	250f      	movs	r5, #15
 8000380:	197b      	adds	r3, r7, r5
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 8000386:	210c      	movs	r1, #12
 8000388:	187b      	adds	r3, r7, r1
 800038a:	4a18      	ldr	r2, [pc, #96]	@ (80003ec <capTouch_ReadDeviceID+0x80>)
 800038c:	7812      	ldrb	r2, [r2, #0]
 800038e:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	6818      	ldr	r0, [r3, #0]
 8000394:	197c      	adds	r4, r7, r5
 8000396:	187a      	adds	r2, r7, r1
 8000398:	2301      	movs	r3, #1
 800039a:	425b      	negs	r3, r3
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	2301      	movs	r3, #1
 80003a0:	2136      	movs	r1, #54	@ 0x36
 80003a2:	f002 fa69 	bl	8002878 <HAL_I2C_Master_Transmit>
 80003a6:	0003      	movs	r3, r0
 80003a8:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80003aa:	197b      	adds	r3, r7, r5
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d002      	beq.n	80003b8 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 80003b2:	197b      	adds	r3, r7, r5
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	e014      	b.n	80003e2 <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6818      	ldr	r0, [r3, #0]
 80003bc:	250f      	movs	r5, #15
 80003be:	197c      	adds	r4, r7, r5
 80003c0:	260e      	movs	r6, #14
 80003c2:	19ba      	adds	r2, r7, r6
 80003c4:	2301      	movs	r3, #1
 80003c6:	425b      	negs	r3, r3
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	2301      	movs	r3, #1
 80003cc:	2136      	movs	r1, #54	@ 0x36
 80003ce:	f002 fb7d 	bl	8002acc <HAL_I2C_Master_Receive>
 80003d2:	0003      	movs	r3, r0
 80003d4:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 80003d6:	19bb      	adds	r3, r7, r6
 80003d8:	781a      	ldrb	r2, [r3, #0]
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	701a      	strb	r2, [r3, #0]

	return halRet;
 80003de:	197b      	adds	r3, r7, r5
 80003e0:	781b      	ldrb	r3, [r3, #0]

}
 80003e2:	0018      	movs	r0, r3
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b005      	add	sp, #20
 80003e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ea:	46c0      	nop			@ (mov r8, r8)
 80003ec:	08005c40 	.word	0x08005c40

080003f0 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80003f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f2:	b087      	sub	sp, #28
 80003f4:	af02      	add	r7, sp, #8
 80003f6:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80003f8:	210f      	movs	r1, #15
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2200      	movs	r2, #0
 80003fe:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 8000400:	260c      	movs	r6, #12
 8000402:	19bb      	adds	r3, r7, r6
 8000404:	22c8      	movs	r2, #200	@ 0xc8
 8000406:	4252      	negs	r2, r2
 8000408:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	6818      	ldr	r0, [r3, #0]
 800040e:	000d      	movs	r5, r1
 8000410:	187c      	adds	r4, r7, r1
 8000412:	19ba      	adds	r2, r7, r6
 8000414:	2301      	movs	r3, #1
 8000416:	425b      	negs	r3, r3
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2302      	movs	r3, #2
 800041c:	2136      	movs	r1, #54	@ 0x36
 800041e:	f002 fa2b 	bl	8002878 <HAL_I2C_Master_Transmit>
 8000422:	0003      	movs	r3, r0
 8000424:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 8000426:	197b      	adds	r3, r7, r5
 8000428:	781b      	ldrb	r3, [r3, #0]

}
 800042a:	0018      	movs	r0, r3
 800042c:	46bd      	mov	sp, r7
 800042e:	b005      	add	sp, #20
 8000430:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000434 <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	b087      	sub	sp, #28
 8000438:	af02      	add	r7, sp, #8
 800043a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800043c:	210f      	movs	r1, #15
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 8000444:	230d      	movs	r3, #13
 8000446:	18fb      	adds	r3, r7, r3
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 800044c:	260c      	movs	r6, #12
 800044e:	19bb      	adds	r3, r7, r6
 8000450:	4a19      	ldr	r2, [pc, #100]	@ (80004b8 <capTouch_checkCal+0x84>)
 8000452:	7812      	ldrb	r2, [r2, #0]
 8000454:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	000d      	movs	r5, r1
 800045c:	187c      	adds	r4, r7, r1
 800045e:	19ba      	adds	r2, r7, r6
 8000460:	2301      	movs	r3, #1
 8000462:	425b      	negs	r3, r3
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	2301      	movs	r3, #1
 8000468:	2136      	movs	r1, #54	@ 0x36
 800046a:	f002 fa05 	bl	8002878 <HAL_I2C_Master_Transmit>
 800046e:	0003      	movs	r3, r0
 8000470:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000472:	197b      	adds	r3, r7, r5
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d002      	beq.n	8000480 <capTouch_checkCal+0x4c>
		return halRet;
 800047a:	197b      	adds	r3, r7, r5
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	e016      	b.n	80004ae <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6818      	ldr	r0, [r3, #0]
 8000484:	230f      	movs	r3, #15
 8000486:	18fc      	adds	r4, r7, r3
 8000488:	250d      	movs	r5, #13
 800048a:	197a      	adds	r2, r7, r5
 800048c:	2301      	movs	r3, #1
 800048e:	425b      	negs	r3, r3
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	2301      	movs	r3, #1
 8000494:	2136      	movs	r1, #54	@ 0x36
 8000496:	f002 fb19 	bl	8002acc <HAL_I2C_Master_Receive>
 800049a:	0003      	movs	r3, r0
 800049c:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 800049e:	197b      	adds	r3, r7, r5
 80004a0:	781a      	ldrb	r2, [r3, #0]
 80004a2:	210e      	movs	r1, #14
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	09d2      	lsrs	r2, r2, #7
 80004a8:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	781b      	ldrb	r3, [r3, #0]

}
 80004ae:	0018      	movs	r0, r3
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b005      	add	sp, #20
 80004b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	08005c44 	.word	0x08005c44

080004bc <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	b087      	sub	sp, #28
 80004c0:	af02      	add	r7, sp, #8
 80004c2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004c4:	210f      	movs	r1, #15
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 80004cc:	230e      	movs	r3, #14
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	2200      	movs	r2, #0
 80004d2:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 80004d4:	260c      	movs	r6, #12
 80004d6:	19bb      	adds	r3, r7, r6
 80004d8:	4a19      	ldr	r2, [pc, #100]	@ (8000540 <capTouch_readChannels+0x84>)
 80004da:	7812      	ldrb	r2, [r2, #0]
 80004dc:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6818      	ldr	r0, [r3, #0]
 80004e2:	000d      	movs	r5, r1
 80004e4:	187c      	adds	r4, r7, r1
 80004e6:	19ba      	adds	r2, r7, r6
 80004e8:	2301      	movs	r3, #1
 80004ea:	425b      	negs	r3, r3
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	2136      	movs	r1, #54	@ 0x36
 80004f2:	f002 f9c1 	bl	8002878 <HAL_I2C_Master_Transmit>
 80004f6:	0003      	movs	r3, r0
 80004f8:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80004fa:	197b      	adds	r3, r7, r5
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d002      	beq.n	8000508 <capTouch_readChannels+0x4c>
		return halRet;
 8000502:	197b      	adds	r3, r7, r5
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	e017      	b.n	8000538 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6818      	ldr	r0, [r3, #0]
 800050c:	250f      	movs	r5, #15
 800050e:	197c      	adds	r4, r7, r5
 8000510:	260e      	movs	r6, #14
 8000512:	19ba      	adds	r2, r7, r6
 8000514:	2301      	movs	r3, #1
 8000516:	425b      	negs	r3, r3
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	2136      	movs	r1, #54	@ 0x36
 800051e:	f002 fad5 	bl	8002acc <HAL_I2C_Master_Receive>
 8000522:	0003      	movs	r3, r0
 8000524:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 8000526:	19bb      	adds	r3, r7, r6
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	227f      	movs	r2, #127	@ 0x7f
 800052c:	4013      	ands	r3, r2
 800052e:	b2da      	uxtb	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	741a      	strb	r2, [r3, #16]

	return halRet;
 8000534:	197b      	adds	r3, r7, r5
 8000536:	781b      	ldrb	r3, [r3, #0]

}
 8000538:	0018      	movs	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	b005      	add	sp, #20
 800053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000540:	08005c48 	.word	0x08005c48

08000544 <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	b08b      	sub	sp, #44	@ 0x2c
 8000548:	af02      	add	r7, sp, #8
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	000a      	movs	r2, r1
 800054e:	1cfb      	adds	r3, r7, #3
 8000550:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000552:	241e      	movs	r4, #30
 8000554:	193b      	adds	r3, r7, r4
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800055a:	2314      	movs	r3, #20
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	4a39      	ldr	r2, [pc, #228]	@ (8000644 <capTouch_enableKeys+0x100>)
 8000560:	6811      	ldr	r1, [r2, #0]
 8000562:	6019      	str	r1, [r3, #0]
 8000564:	8891      	ldrh	r1, [r2, #4]
 8000566:	8099      	strh	r1, [r3, #4]
 8000568:	7992      	ldrb	r2, [r2, #6]
 800056a:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 800056c:	260c      	movs	r6, #12
 800056e:	19bb      	adds	r3, r7, r6
 8000570:	4a35      	ldr	r2, [pc, #212]	@ (8000648 <capTouch_enableKeys+0x104>)
 8000572:	6811      	ldr	r1, [r2, #0]
 8000574:	6019      	str	r1, [r3, #0]
 8000576:	8891      	ldrh	r1, [r2, #4]
 8000578:	8099      	strh	r1, [r3, #4]
 800057a:	7992      	ldrb	r2, [r2, #6]
 800057c:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6818      	ldr	r0, [r3, #0]
 8000582:	0025      	movs	r5, r4
 8000584:	193c      	adds	r4, r7, r4
 8000586:	19ba      	adds	r2, r7, r6
 8000588:	2301      	movs	r3, #1
 800058a:	425b      	negs	r3, r3
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	2136      	movs	r1, #54	@ 0x36
 8000592:	f002 f971 	bl	8002878 <HAL_I2C_Master_Transmit>
 8000596:	0003      	movs	r3, r0
 8000598:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800059a:	197b      	adds	r3, r7, r5
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d002      	beq.n	80005a8 <capTouch_enableKeys+0x64>
		return halRet;
 80005a2:	197b      	adds	r3, r7, r5
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	e049      	b.n	800063c <capTouch_enableKeys+0xf8>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6818      	ldr	r0, [r3, #0]
 80005ac:	251e      	movs	r5, #30
 80005ae:	197c      	adds	r4, r7, r5
 80005b0:	2314      	movs	r3, #20
 80005b2:	18fa      	adds	r2, r7, r3
 80005b4:	2301      	movs	r3, #1
 80005b6:	425b      	negs	r3, r3
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2307      	movs	r3, #7
 80005bc:	2136      	movs	r1, #54	@ 0x36
 80005be:	f002 fa85 	bl	8002acc <HAL_I2C_Master_Receive>
 80005c2:	0003      	movs	r3, r0
 80005c4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80005c6:	197b      	adds	r3, r7, r5
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <capTouch_enableKeys+0x90>
		return halRet;
 80005ce:	197b      	adds	r3, r7, r5
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	e033      	b.n	800063c <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80005d4:	231f      	movs	r3, #31
 80005d6:	18fb      	adds	r3, r7, r3
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e01c      	b.n	8000618 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 80005de:	201f      	movs	r0, #31
 80005e0:	183b      	adds	r3, r7, r0
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2414      	movs	r4, #20
 80005e6:	193a      	adds	r2, r7, r4
 80005e8:	5cd3      	ldrb	r3, [r2, r3]
 80005ea:	089b      	lsrs	r3, r3, #2
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	1cfb      	adds	r3, r7, #3
 80005f0:	7819      	ldrb	r1, [r3, #0]
 80005f2:	183b      	adds	r3, r7, r0
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	4119      	asrs	r1, r3
 80005f8:	000b      	movs	r3, r1
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2101      	movs	r1, #1
 80005fe:	400b      	ands	r3, r1
 8000600:	b2d9      	uxtb	r1, r3
 8000602:	183b      	adds	r3, r7, r0
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	434a      	muls	r2, r1
 8000608:	b2d1      	uxtb	r1, r2
 800060a:	193a      	adds	r2, r7, r4
 800060c:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 800060e:	183b      	adds	r3, r7, r0
 8000610:	781a      	ldrb	r2, [r3, #0]
 8000612:	183b      	adds	r3, r7, r0
 8000614:	3201      	adds	r2, #1
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	231f      	movs	r3, #31
 800061a:	18fb      	adds	r3, r7, r3
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b06      	cmp	r3, #6
 8000620:	d9dd      	bls.n	80005de <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 8000622:	251e      	movs	r5, #30
 8000624:	197c      	adds	r4, r7, r5
 8000626:	2314      	movs	r3, #20
 8000628:	18fa      	adds	r2, r7, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f000 f80c 	bl	800064c <capTouch_SetAveragingFactor>
 8000634:	0003      	movs	r3, r0
 8000636:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000638:	197b      	adds	r3, r7, r5
 800063a:	781b      	ldrb	r3, [r3, #0]

}
 800063c:	0018      	movs	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	b009      	add	sp, #36	@ 0x24
 8000642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000644:	08005c4c 	.word	0x08005c4c
 8000648:	08005c54 	.word	0x08005c54

0800064c <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 800064c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064e:	b08b      	sub	sp, #44	@ 0x2c
 8000650:	af02      	add	r7, sp, #8
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000656:	241e      	movs	r4, #30
 8000658:	193b      	adds	r3, r7, r4
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800065e:	2314      	movs	r3, #20
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	4a5d      	ldr	r2, [pc, #372]	@ (80007d8 <capTouch_SetAveragingFactor+0x18c>)
 8000664:	6811      	ldr	r1, [r2, #0]
 8000666:	6019      	str	r1, [r3, #0]
 8000668:	8891      	ldrh	r1, [r2, #4]
 800066a:	8099      	strh	r1, [r3, #4]
 800066c:	7992      	ldrb	r2, [r2, #6]
 800066e:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000670:	260c      	movs	r6, #12
 8000672:	19bb      	adds	r3, r7, r6
 8000674:	4a59      	ldr	r2, [pc, #356]	@ (80007dc <capTouch_SetAveragingFactor+0x190>)
 8000676:	6811      	ldr	r1, [r2, #0]
 8000678:	6019      	str	r1, [r3, #0]
 800067a:	8891      	ldrh	r1, [r2, #4]
 800067c:	8099      	strh	r1, [r3, #4]
 800067e:	7992      	ldrb	r2, [r2, #6]
 8000680:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6818      	ldr	r0, [r3, #0]
 8000686:	0025      	movs	r5, r4
 8000688:	193c      	adds	r4, r7, r4
 800068a:	19ba      	adds	r2, r7, r6
 800068c:	2301      	movs	r3, #1
 800068e:	425b      	negs	r3, r3
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	2136      	movs	r1, #54	@ 0x36
 8000696:	f002 f8ef 	bl	8002878 <HAL_I2C_Master_Transmit>
 800069a:	0003      	movs	r3, r0
 800069c:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800069e:	197b      	adds	r3, r7, r5
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d002      	beq.n	80006ac <capTouch_SetAveragingFactor+0x60>
		return halRet;
 80006a6:	197b      	adds	r3, r7, r5
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	e090      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6818      	ldr	r0, [r3, #0]
 80006b0:	251e      	movs	r5, #30
 80006b2:	197c      	adds	r4, r7, r5
 80006b4:	2314      	movs	r3, #20
 80006b6:	18fa      	adds	r2, r7, r3
 80006b8:	2301      	movs	r3, #1
 80006ba:	425b      	negs	r3, r3
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2307      	movs	r3, #7
 80006c0:	2136      	movs	r1, #54	@ 0x36
 80006c2:	f002 fa03 	bl	8002acc <HAL_I2C_Master_Receive>
 80006c6:	0003      	movs	r3, r0
 80006c8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80006ca:	197b      	adds	r3, r7, r5
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d002      	beq.n	80006d8 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 80006d2:	197b      	adds	r3, r7, r5
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	e07a      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 80006d8:	2308      	movs	r3, #8
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	2200      	movs	r2, #0
 80006de:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 80006e0:	231d      	movs	r3, #29
 80006e2:	18fb      	adds	r3, r7, r3
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80006e8:	231f      	movs	r3, #31
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
 80006f0:	e041      	b.n	8000776 <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80006f2:	241f      	movs	r4, #31
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2214      	movs	r2, #20
 80006fa:	18ba      	adds	r2, r7, r2
 80006fc:	5cd2      	ldrb	r2, [r2, r3]
 80006fe:	201d      	movs	r0, #29
 8000700:	183b      	adds	r3, r7, r0
 8000702:	2103      	movs	r1, #3
 8000704:	400a      	ands	r2, r1
 8000706:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 8000708:	193b      	adds	r3, r7, r4
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	18d3      	adds	r3, r2, r3
 8000710:	781a      	ldrb	r2, [r3, #0]
 8000712:	251c      	movs	r5, #28
 8000714:	197b      	adds	r3, r7, r5
 8000716:	0092      	lsls	r2, r2, #2
 8000718:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 800071a:	183b      	adds	r3, r7, r0
 800071c:	1839      	adds	r1, r7, r0
 800071e:	197a      	adds	r2, r7, r5
 8000720:	7809      	ldrb	r1, [r1, #0]
 8000722:	7812      	ldrb	r2, [r2, #0]
 8000724:	430a      	orrs	r2, r1
 8000726:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 8000728:	193b      	adds	r3, r7, r4
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	220c      	movs	r2, #12
 800072e:	18ba      	adds	r2, r7, r2
 8000730:	5cd2      	ldrb	r2, [r2, r3]
 8000732:	2108      	movs	r1, #8
 8000734:	187b      	adds	r3, r7, r1
 8000736:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	183a      	adds	r2, r7, r0
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6818      	ldr	r0, [r3, #0]
 8000744:	251e      	movs	r5, #30
 8000746:	197c      	adds	r4, r7, r5
 8000748:	187a      	adds	r2, r7, r1
 800074a:	2301      	movs	r3, #1
 800074c:	425b      	negs	r3, r3
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2302      	movs	r3, #2
 8000752:	2136      	movs	r1, #54	@ 0x36
 8000754:	f002 f890 	bl	8002878 <HAL_I2C_Master_Transmit>
 8000758:	0003      	movs	r3, r0
 800075a:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 800075c:	197b      	adds	r3, r7, r5
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 8000764:	197b      	adds	r3, r7, r5
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	e031      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 800076a:	211f      	movs	r1, #31
 800076c:	187b      	adds	r3, r7, r1
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	187b      	adds	r3, r7, r1
 8000772:	3201      	adds	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	231f      	movs	r3, #31
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b06      	cmp	r3, #6
 800077e:	d9b8      	bls.n	80006f2 <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	251e      	movs	r5, #30
 8000786:	197c      	adds	r4, r7, r5
 8000788:	230c      	movs	r3, #12
 800078a:	18fa      	adds	r2, r7, r3
 800078c:	2301      	movs	r3, #1
 800078e:	425b      	negs	r3, r3
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	2136      	movs	r1, #54	@ 0x36
 8000796:	f002 f86f 	bl	8002878 <HAL_I2C_Master_Transmit>
 800079a:	0003      	movs	r3, r0
 800079c:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800079e:	197b      	adds	r3, r7, r5
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <capTouch_SetAveragingFactor+0x160>
		return halRet;
 80007a6:	197b      	adds	r3, r7, r5
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	e010      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	251e      	movs	r5, #30
 80007b2:	197c      	adds	r4, r7, r5
 80007b4:	2314      	movs	r3, #20
 80007b6:	18fa      	adds	r2, r7, r3
 80007b8:	2301      	movs	r3, #1
 80007ba:	425b      	negs	r3, r3
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2307      	movs	r3, #7
 80007c0:	2136      	movs	r1, #54	@ 0x36
 80007c2:	f002 f983 	bl	8002acc <HAL_I2C_Master_Receive>
 80007c6:	0003      	movs	r3, r0
 80007c8:	7023      	strb	r3, [r4, #0]

	return halRet;
 80007ca:	197b      	adds	r3, r7, r5
 80007cc:	781b      	ldrb	r3, [r3, #0]

}
 80007ce:	0018      	movs	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b009      	add	sp, #36	@ 0x24
 80007d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	08005c4c 	.word	0x08005c4c
 80007dc:	08005c54 	.word	0x08005c54

080007e0 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 80007e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e2:	b08b      	sub	sp, #44	@ 0x2c
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80007ea:	231e      	movs	r3, #30
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80007f2:	2314      	movs	r3, #20
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	4a31      	ldr	r2, [pc, #196]	@ (80008bc <capTouch_SetDetectionIntegrator+0xdc>)
 80007f8:	6811      	ldr	r1, [r2, #0]
 80007fa:	6019      	str	r1, [r3, #0]
 80007fc:	8891      	ldrh	r1, [r2, #4]
 80007fe:	8099      	strh	r1, [r3, #4]
 8000800:	7992      	ldrb	r2, [r2, #6]
 8000802:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 8000804:	2310      	movs	r3, #16
 8000806:	18fb      	adds	r3, r7, r3
 8000808:	2200      	movs	r2, #0
 800080a:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800080c:	231f      	movs	r3, #31
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
 8000814:	e022      	b.n	800085c <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 8000816:	251f      	movs	r5, #31
 8000818:	197b      	adds	r3, r7, r5
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2214      	movs	r2, #20
 800081e:	18ba      	adds	r2, r7, r2
 8000820:	5cd2      	ldrb	r2, [r2, r3]
 8000822:	2110      	movs	r1, #16
 8000824:	187b      	adds	r3, r7, r1
 8000826:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 8000828:	197b      	adds	r3, r7, r5
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	18d3      	adds	r3, r2, r3
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	187b      	adds	r3, r7, r1
 8000834:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6818      	ldr	r0, [r3, #0]
 800083a:	231e      	movs	r3, #30
 800083c:	18fc      	adds	r4, r7, r3
 800083e:	187a      	adds	r2, r7, r1
 8000840:	2301      	movs	r3, #1
 8000842:	425b      	negs	r3, r3
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2302      	movs	r3, #2
 8000848:	2136      	movs	r1, #54	@ 0x36
 800084a:	f002 f815 	bl	8002878 <HAL_I2C_Master_Transmit>
 800084e:	0003      	movs	r3, r0
 8000850:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 8000852:	197b      	adds	r3, r7, r5
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	197b      	adds	r3, r7, r5
 8000858:	3201      	adds	r2, #1
 800085a:	701a      	strb	r2, [r3, #0]
 800085c:	231f      	movs	r3, #31
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b06      	cmp	r3, #6
 8000864:	d9d7      	bls.n	8000816 <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000866:	2608      	movs	r6, #8
 8000868:	19bb      	adds	r3, r7, r6
 800086a:	4a15      	ldr	r2, [pc, #84]	@ (80008c0 <capTouch_SetDetectionIntegrator+0xe0>)
 800086c:	6811      	ldr	r1, [r2, #0]
 800086e:	6019      	str	r1, [r3, #0]
 8000870:	8891      	ldrh	r1, [r2, #4]
 8000872:	8099      	strh	r1, [r3, #4]
 8000874:	7992      	ldrb	r2, [r2, #6]
 8000876:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	251e      	movs	r5, #30
 800087e:	197c      	adds	r4, r7, r5
 8000880:	2314      	movs	r3, #20
 8000882:	18fa      	adds	r2, r7, r3
 8000884:	2301      	movs	r3, #1
 8000886:	425b      	negs	r3, r3
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2301      	movs	r3, #1
 800088c:	2136      	movs	r1, #54	@ 0x36
 800088e:	f001 fff3 	bl	8002878 <HAL_I2C_Master_Transmit>
 8000892:	0003      	movs	r3, r0
 8000894:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6818      	ldr	r0, [r3, #0]
 800089a:	197c      	adds	r4, r7, r5
 800089c:	19ba      	adds	r2, r7, r6
 800089e:	2301      	movs	r3, #1
 80008a0:	425b      	negs	r3, r3
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2307      	movs	r3, #7
 80008a6:	2136      	movs	r1, #54	@ 0x36
 80008a8:	f002 f910 	bl	8002acc <HAL_I2C_Master_Receive>
 80008ac:	0003      	movs	r3, r0
 80008ae:	7023      	strb	r3, [r4, #0]

	return halRet;
 80008b0:	197b      	adds	r3, r7, r5
 80008b2:	781b      	ldrb	r3, [r3, #0]

}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b009      	add	sp, #36	@ 0x24
 80008ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008bc:	08005c5c 	.word	0x08005c5c
 80008c0:	08005c4c 	.word	0x08005c4c

080008c4 <initRTCTime>:
 */

#include "../Inc/alarm.h"


void initRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80008c4:	b5b0      	push	{r4, r5, r7, lr}
 80008c6:	b09a      	sub	sp, #104	@ 0x68
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]

	currTime->Hours = 1;				// Initialize current RTC time to default values
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
	currTime->Minutes = 00;
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	2200      	movs	r2, #0
 80008da:	705a      	strb	r2, [r3, #1]
	currTime->Seconds = 00;
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	2200      	movs	r2, #0
 80008e0:	709a      	strb	r2, [r3, #2]
	currTime->TimeFormat = RTC_HOURFORMAT12_AM;			//This is initially in the A.M., so P.M. LED is off.
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	2200      	movs	r2, #0
 80008e6:	70da      	strb	r2, [r3, #3]

	currDate->Year = 0;					// Initialize current RTC date to default values
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2200      	movs	r2, #0
 80008ec:	70da      	strb	r2, [r3, #3]
	currDate->Month = RTC_MONTH_JANUARY;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2201      	movs	r2, #1
 80008f2:	705a      	strb	r2, [r3, #1]
	currDate->Date = 0;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	709a      	strb	r2, [r3, #2]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008fa:	2567      	movs	r5, #103	@ 0x67
 80008fc:	197b      	adds	r3, r7, r5
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
	halRet = HAL_RTC_SetTime(hrtc, currTime, RTCTimeFormat);
 8000902:	197c      	adds	r4, r7, r5
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2200      	movs	r2, #0
 800090a:	0018      	movs	r0, r3
 800090c:	f003 fce8 	bl	80042e0 <HAL_RTC_SetTime>
 8000910:	0003      	movs	r3, r0
 8000912:	7023      	strb	r3, [r4, #0]
	halRet = HAL_RTC_SetDate(hrtc, currDate, RTCTimeFormat);
 8000914:	197c      	adds	r4, r7, r5
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2200      	movs	r2, #0
 800091c:	0018      	movs	r0, r3
 800091e:	f003 fde3 	bl	80044e8 <HAL_RTC_SetDate>
 8000922:	0003      	movs	r3, r0
 8000924:	7023      	strb	r3, [r4, #0]
//	}
//	else {
//		printf("Error defaulting RTC time.\n\r");
//	}

	RTC_AlarmTypeDef internalAlarm_init = {0};
 8000926:	243c      	movs	r4, #60	@ 0x3c
 8000928:	193b      	adds	r3, r7, r4
 800092a:	0018      	movs	r0, r3
 800092c:	2328      	movs	r3, #40	@ 0x28
 800092e:	001a      	movs	r2, r3
 8000930:	2100      	movs	r1, #0
 8000932:	f005 f94d 	bl	8005bd0 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	781a      	ldrb	r2, [r3, #0]
 800093a:	0021      	movs	r1, r4
 800093c:	187b      	adds	r3, r7, r1
 800093e:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	785b      	ldrb	r3, [r3, #1]
 8000944:	3301      	adds	r3, #1
 8000946:	b2da      	uxtb	r2, r3
 8000948:	187b      	adds	r3, r7, r1
 800094a:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	789a      	ldrb	r2, [r3, #2]
 8000950:	187b      	adds	r3, r7, r1
 8000952:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	685a      	ldr	r2, [r3, #4]
 8000958:	187b      	adds	r3, r7, r1
 800095a:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	78da      	ldrb	r2, [r3, #3]
 8000960:	187b      	adds	r3, r7, r1
 8000962:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	78da      	ldrb	r2, [r3, #3]
 8000968:	187b      	adds	r3, r7, r1
 800096a:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800096c:	0008      	movs	r0, r1
 800096e:	183b      	adds	r3, r7, r0
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000974:	183b      	adds	r3, r7, r0
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 800097a:	183b      	adds	r3, r7, r0
 800097c:	4a14      	ldr	r2, [pc, #80]	@ (80009d0 <initRTCTime+0x10c>)
 800097e:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000980:	183b      	adds	r3, r7, r0
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000986:	183b      	adds	r3, r7, r0
 8000988:	2200      	movs	r2, #0
 800098a:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 800098c:	183b      	adds	r3, r7, r0
 800098e:	2220      	movs	r2, #32
 8000990:	2101      	movs	r1, #1
 8000992:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 8000994:	0001      	movs	r1, r0
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2280      	movs	r2, #128	@ 0x80
 800099a:	0052      	lsls	r2, r2, #1
 800099c:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 800099e:	197c      	adds	r4, r7, r5
 80009a0:	1879      	adds	r1, r7, r1
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2200      	movs	r2, #0
 80009a6:	0018      	movs	r0, r3
 80009a8:	f003 fe7e 	bl	80046a8 <HAL_RTC_SetAlarm_IT>
 80009ac:	0003      	movs	r3, r0
 80009ae:	7023      	strb	r3, [r4, #0]

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 80009b0:	197c      	adds	r4, r7, r5
 80009b2:	2380      	movs	r3, #128	@ 0x80
 80009b4:	005a      	lsls	r2, r3, #1
 80009b6:	2314      	movs	r3, #20
 80009b8:	18f9      	adds	r1, r7, r3
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	2300      	movs	r3, #0
 80009be:	f003 ffb3 	bl	8004928 <HAL_RTC_GetAlarm>
 80009c2:	0003      	movs	r3, r0
 80009c4:	7023      	strb	r3, [r4, #0]
//	if(halRet == HAL_OK) {
//		printf("Internal alarm A defaulted to %u:%u:%u.\n\r", internalAlarm_initTest.AlarmTime.Hours,
//				internalAlarm_initTest.AlarmTime.Minutes, internalAlarm_initTest.AlarmTime.Seconds);
//	}

}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b01a      	add	sp, #104	@ 0x68
 80009cc:	bdb0      	pop	{r4, r5, r7, pc}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	80800080 	.word	0x80800080

080009d4 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2200      	movs	r2, #0
 80009e6:	0018      	movs	r0, r3
 80009e8:	f003 fd22 	bl	8004430 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2200      	movs	r2, #0
 80009f2:	0018      	movs	r0, r3
 80009f4:	f003 fe0a 	bl	800460c <HAL_RTC_GetDate>

}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b004      	add	sp, #16
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a02:	b08d      	sub	sp, #52	@ 0x34
 8000a04:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f001 fb3f 	bl	8002088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 f8b3 	bl	8000b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f000 fa9f 	bl	8000f50 <MX_GPIO_Init>
  MX_RTC_Init();
 8000a12:	f000 f963 	bl	8000cdc <MX_RTC_Init>
  MX_I2C1_Init();
 8000a16:	f000 f921 	bl	8000c5c <MX_I2C1_Init>
  MX_TIM14_Init();
 8000a1a:	f000 fa73 	bl	8000f04 <MX_TIM14_Init>
  MX_TIM2_Init();
 8000a1e:	f000 fa11 	bl	8000e44 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Set Smooth Calibration Value
    HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 8000a22:	4b45      	ldr	r3, [pc, #276]	@ (8000b38 <main+0x138>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2280      	movs	r2, #128	@ 0x80
 8000a28:	01d1      	lsls	r1, r2, #7
 8000a2a:	4844      	ldr	r0, [pc, #272]	@ (8000b3c <main+0x13c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f004 f970 	bl	8004d12 <HAL_RTCEx_SetSmoothCalib>
    							RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);

  uint8_t initRet = 0;
 8000a32:	2317      	movs	r3, #23
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]

  initRTCTime(&hrtc, &currTime, &currDate);
 8000a3a:	4a41      	ldr	r2, [pc, #260]	@ (8000b40 <main+0x140>)
 8000a3c:	4941      	ldr	r1, [pc, #260]	@ (8000b44 <main+0x144>)
 8000a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8000b3c <main+0x13c>)
 8000a40:	0018      	movs	r0, r3
 8000a42:	f7ff ff3f 	bl	80008c4 <initRTCTime>

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000a46:	2380      	movs	r3, #128	@ 0x80
 8000a48:	009c      	lsls	r4, r3, #2
 8000a4a:	2380      	movs	r3, #128	@ 0x80
 8000a4c:	00dd      	lsls	r5, r3, #3
 8000a4e:	2680      	movs	r6, #128	@ 0x80
 8000a50:	2240      	movs	r2, #64	@ 0x40
 8000a52:	4694      	mov	ip, r2
 8000a54:	2380      	movs	r3, #128	@ 0x80
 8000a56:	011a      	lsls	r2, r3, #4
 8000a58:	4b3b      	ldr	r3, [pc, #236]	@ (8000b48 <main+0x148>)
 8000a5a:	6819      	ldr	r1, [r3, #0]
 8000a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8000b4c <main+0x14c>)
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	4b3b      	ldr	r3, [pc, #236]	@ (8000b50 <main+0x150>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	9304      	str	r3, [sp, #16]
 8000a66:	9003      	str	r0, [sp, #12]
 8000a68:	9102      	str	r1, [sp, #8]
 8000a6a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b54 <main+0x154>)
 8000a6c:	9301      	str	r3, [sp, #4]
 8000a6e:	9200      	str	r2, [sp, #0]
 8000a70:	4663      	mov	r3, ip
 8000a72:	0032      	movs	r2, r6
 8000a74:	0029      	movs	r1, r5
 8000a76:	0020      	movs	r0, r4
 8000a78:	f000 ff36 	bl	80018e8 <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);


	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 8000a7c:	2216      	movs	r2, #22
 8000a7e:	18bc      	adds	r4, r7, r2
 8000a80:	f000 fb48 	bl	8001114 <updateAndDisplayTime>
 8000a84:	0003      	movs	r3, r0
 8000a86:	7023      	strb	r3, [r4, #0]

    /*
     * Initialize capacitive touch sensor
     */

    initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 8000a88:	4b2f      	ldr	r3, [pc, #188]	@ (8000b48 <main+0x148>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	2380      	movs	r3, #128	@ 0x80
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	2117      	movs	r1, #23
 8000a92:	187c      	adds	r4, r7, r1
 8000a94:	4d30      	ldr	r5, [pc, #192]	@ (8000b58 <main+0x158>)
 8000a96:	4931      	ldr	r1, [pc, #196]	@ (8000b5c <main+0x15c>)
 8000a98:	4831      	ldr	r0, [pc, #196]	@ (8000b60 <main+0x160>)
 8000a9a:	260f      	movs	r6, #15
 8000a9c:	9601      	str	r6, [sp, #4]
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	002b      	movs	r3, r5
 8000aa2:	f7ff fbbb 	bl	800021c <capTouch_Init>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	7023      	strb	r3, [r4, #0]
    						&capTouchResetPort, capTouchResetPin, 0b00001111);

    if(initRet != 0) {
 8000aaa:	2117      	movs	r1, #23
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <main+0xb8>
    	dispError();
 8000ab4:	f000 fed0 	bl	8001858 <dispError>
    }

    // Max. out averaging factor
    uint8_t avgFactors_New[7] = {32, 32, 32, 32, 0, 0, 0};
 8000ab8:	200c      	movs	r0, #12
 8000aba:	183b      	adds	r3, r7, r0
 8000abc:	4a29      	ldr	r2, [pc, #164]	@ (8000b64 <main+0x164>)
 8000abe:	6811      	ldr	r1, [r2, #0]
 8000ac0:	6019      	str	r1, [r3, #0]
 8000ac2:	8891      	ldrh	r1, [r2, #4]
 8000ac4:	8099      	strh	r1, [r3, #4]
 8000ac6:	7992      	ldrb	r2, [r2, #6]
 8000ac8:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000aca:	2516      	movs	r5, #22
 8000acc:	197c      	adds	r4, r7, r5
 8000ace:	183a      	adds	r2, r7, r0
 8000ad0:	4b23      	ldr	r3, [pc, #140]	@ (8000b60 <main+0x160>)
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff fdb9 	bl	800064c <capTouch_SetAveragingFactor>
 8000ada:	0003      	movs	r3, r0
 8000adc:	7023      	strb	r3, [r4, #0]

    if(halRet != HAL_OK) {
 8000ade:	197b      	adds	r3, r7, r5
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <main+0xea>
    	dispError();
 8000ae6:	f000 feb7 	bl	8001858 <dispError>
    }

    // Set detection integration factors
    uint8_t detIntFactors_New[7] = {0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04};
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	4a1e      	ldr	r2, [pc, #120]	@ (8000b68 <main+0x168>)
 8000aee:	6811      	ldr	r1, [r2, #0]
 8000af0:	6019      	str	r1, [r3, #0]
 8000af2:	8891      	ldrh	r1, [r2, #4]
 8000af4:	8099      	strh	r1, [r3, #4]
 8000af6:	7992      	ldrb	r2, [r2, #6]
 8000af8:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 8000afa:	2516      	movs	r5, #22
 8000afc:	197c      	adds	r4, r7, r5
 8000afe:	1d3a      	adds	r2, r7, #4
 8000b00:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <main+0x160>)
 8000b02:	0011      	movs	r1, r2
 8000b04:	0018      	movs	r0, r3
 8000b06:	f7ff fe6b 	bl	80007e0 <capTouch_SetDetectionIntegrator>
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	7023      	strb	r3, [r4, #0]
    if(halRet != HAL_OK) {
 8000b0e:	197b      	adds	r3, r7, r5
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <main+0x11a>
    	dispError();
 8000b16:	f000 fe9f 	bl	8001858 <dispError>
    }

    userAlarmToggle = false;			//Default to off
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <main+0x16c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]

    // User alarm default value
    userAlarmTime.Hours = 1;
 8000b20:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <main+0x170>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
    userAlarmTime.Minutes = 1;
 8000b26:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <main+0x170>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	705a      	strb	r2, [r3, #1]
    userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000b2c:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <main+0x170>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	70da      	strb	r2, [r3, #3]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	e7fd      	b.n	8000b32 <main+0x132>
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	20000028 	.word	0x20000028
 8000b3c:	200000d0 	.word	0x200000d0
 8000b40:	200001a8 	.word	0x200001a8
 8000b44:	20000194 	.word	0x20000194
 8000b48:	2000002c 	.word	0x2000002c
 8000b4c:	20000030 	.word	0x20000030
 8000b50:	20000034 	.word	0x20000034
 8000b54:	20000010 	.word	0x20000010
 8000b58:	20000004 	.word	0x20000004
 8000b5c:	2000007c 	.word	0x2000007c
 8000b60:	200001c4 	.word	0x200001c4
 8000b64:	08005c64 	.word	0x08005c64
 8000b68:	08005c6c 	.word	0x08005c6c
 8000b6c:	20000079 	.word	0x20000079
 8000b70:	200001ac 	.word	0x200001ac

08000b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b093      	sub	sp, #76	@ 0x4c
 8000b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7a:	2410      	movs	r4, #16
 8000b7c:	193b      	adds	r3, r7, r4
 8000b7e:	0018      	movs	r0, r3
 8000b80:	2338      	movs	r3, #56	@ 0x38
 8000b82:	001a      	movs	r2, r3
 8000b84:	2100      	movs	r1, #0
 8000b86:	f005 f823 	bl	8005bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8a:	003b      	movs	r3, r7
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	2310      	movs	r3, #16
 8000b90:	001a      	movs	r2, r3
 8000b92:	2100      	movs	r1, #0
 8000b94:	f005 f81c 	bl	8005bd0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b98:	2380      	movs	r3, #128	@ 0x80
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f002 fc27 	bl	80033f0 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ba2:	f002 fc07 	bl	80033b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 8000ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c58 <SystemClock_Config+0xe4>)
 8000ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000baa:	2218      	movs	r2, #24
 8000bac:	4393      	bics	r3, r2
 8000bae:	001a      	movs	r2, r3
 8000bb0:	4b29      	ldr	r3, [pc, #164]	@ (8000c58 <SystemClock_Config+0xe4>)
 8000bb2:	2108      	movs	r1, #8
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	220e      	movs	r2, #14
 8000bbc:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	2280      	movs	r2, #128	@ 0x80
 8000bc8:	0052      	lsls	r2, r2, #1
 8000bca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000bcc:	0021      	movs	r1, r4
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2240      	movs	r2, #64	@ 0x40
 8000bd8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2201      	movs	r2, #1
 8000bde:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2202      	movs	r2, #2
 8000be4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2202      	movs	r2, #2
 8000bea:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2208      	movs	r2, #8
 8000bf6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2280      	movs	r2, #128	@ 0x80
 8000bfc:	0292      	lsls	r2, r2, #10
 8000bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2280      	movs	r2, #128	@ 0x80
 8000c04:	0492      	lsls	r2, r2, #18
 8000c06:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2280      	movs	r2, #128	@ 0x80
 8000c0c:	0592      	lsls	r2, r2, #22
 8000c0e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	0018      	movs	r0, r3
 8000c14:	f002 fc2c 	bl	8003470 <HAL_RCC_OscConfig>
 8000c18:	1e03      	subs	r3, r0, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c1c:	f000 fe5e 	bl	80018dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c20:	003b      	movs	r3, r7
 8000c22:	2207      	movs	r2, #7
 8000c24:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c26:	003b      	movs	r3, r7
 8000c28:	2202      	movs	r2, #2
 8000c2a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2c:	003b      	movs	r3, r7
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c32:	003b      	movs	r3, r7
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c38:	003b      	movs	r3, r7
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f002 ff31 	bl	8003aa4 <HAL_RCC_ClockConfig>
 8000c42:	1e03      	subs	r3, r0, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000c46:	f000 fe49 	bl	80018dc <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f003 fa2e 	bl	80040ac <HAL_RCCEx_EnableLSCO>
}
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b013      	add	sp, #76	@ 0x4c
 8000c56:	bd90      	pop	{r4, r7, pc}
 8000c58:	40021000 	.word	0x40021000

08000c5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c62:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd4 <MX_I2C1_Init+0x78>)
 8000c64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c68:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd8 <MX_I2C1_Init+0x7c>)
 8000c6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c96:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f001 fd47 	bl	800272c <HAL_I2C_Init>
 8000c9e:	1e03      	subs	r3, r0, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ca2:	f000 fe1b 	bl	80018dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000ca8:	2100      	movs	r1, #0
 8000caa:	0018      	movs	r0, r3
 8000cac:	f002 faea 	bl	8003284 <HAL_I2CEx_ConfigAnalogFilter>
 8000cb0:	1e03      	subs	r3, r0, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cb4:	f000 fe12 	bl	80018dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cb8:	4b05      	ldr	r3, [pc, #20]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f002 fb2d 	bl	800331c <HAL_I2CEx_ConfigDigitalFilter>
 8000cc2:	1e03      	subs	r3, r0, #0
 8000cc4:	d001      	beq.n	8000cca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cc6:	f000 fe09 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	2000007c 	.word	0x2000007c
 8000cd4:	40005400 	.word	0x40005400
 8000cd8:	00602173 	.word	0x00602173

08000cdc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b090      	sub	sp, #64	@ 0x40
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ce2:	232c      	movs	r3, #44	@ 0x2c
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	2314      	movs	r3, #20
 8000cea:	001a      	movs	r2, r3
 8000cec:	2100      	movs	r1, #0
 8000cee:	f004 ff6f 	bl	8005bd0 <memset>
  RTC_DateTypeDef sDate = {0};
 8000cf2:	2328      	movs	r3, #40	@ 0x28
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000cfa:	003b      	movs	r3, r7
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	2328      	movs	r3, #40	@ 0x28
 8000d00:	001a      	movs	r2, r3
 8000d02:	2100      	movs	r1, #0
 8000d04:	f004 ff64 	bl	8005bd0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d08:	4b4b      	ldr	r3, [pc, #300]	@ (8000e38 <MX_RTC_Init+0x15c>)
 8000d0a:	4a4c      	ldr	r2, [pc, #304]	@ (8000e3c <MX_RTC_Init+0x160>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000d0e:	4b4a      	ldr	r3, [pc, #296]	@ (8000e38 <MX_RTC_Init+0x15c>)
 8000d10:	2240      	movs	r2, #64	@ 0x40
 8000d12:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000d14:	4b48      	ldr	r3, [pc, #288]	@ (8000e38 <MX_RTC_Init+0x15c>)
 8000d16:	227f      	movs	r2, #127	@ 0x7f
 8000d18:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000d1a:	4b47      	ldr	r3, [pc, #284]	@ (8000e38 <MX_RTC_Init+0x15c>)
 8000d1c:	22ff      	movs	r2, #255	@ 0xff
 8000d1e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d20:	4b45      	ldr	r3, [pc, #276]	@ (8000e38 <MX_RTC_Init+0x15c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d26:	4b44      	ldr	r3, [pc, #272]	@ (8000e38 <MX_RTC_Init+0x15c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d2c:	4b42      	ldr	r3, [pc, #264]	@ (8000e38 <MX_RTC_Init+0x15c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d32:	4b41      	ldr	r3, [pc, #260]	@ (8000e38 <MX_RTC_Init+0x15c>)
 8000d34:	2280      	movs	r2, #128	@ 0x80
 8000d36:	05d2      	lsls	r2, r2, #23
 8000d38:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e38 <MX_RTC_Init+0x15c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d40:	4b3d      	ldr	r3, [pc, #244]	@ (8000e38 <MX_RTC_Init+0x15c>)
 8000d42:	0018      	movs	r0, r3
 8000d44:	f003 fa2a 	bl	800419c <HAL_RTC_Init>
 8000d48:	1e03      	subs	r3, r0, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000d4c:	f000 fdc6 	bl	80018dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000d50:	212c      	movs	r1, #44	@ 0x2c
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2201      	movs	r2, #1
 8000d56:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2200      	movs	r2, #0
 8000d62:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2200      	movs	r2, #0
 8000d68:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e38 <MX_RTC_Init+0x15c>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	0018      	movs	r0, r3
 8000d84:	f003 faac 	bl	80042e0 <HAL_RTC_SetTime>
 8000d88:	1e03      	subs	r3, r0, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000d8c:	f000 fda6 	bl	80018dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d90:	2128      	movs	r1, #40	@ 0x28
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2201      	movs	r2, #1
 8000da2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2200      	movs	r2, #0
 8000da8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000daa:	1879      	adds	r1, r7, r1
 8000dac:	4b22      	ldr	r3, [pc, #136]	@ (8000e38 <MX_RTC_Init+0x15c>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	0018      	movs	r0, r3
 8000db2:	f003 fb99 	bl	80044e8 <HAL_RTC_SetDate>
 8000db6:	1e03      	subs	r3, r0, #0
 8000db8:	d001      	beq.n	8000dbe <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 8000dba:	f000 fd8f 	bl	80018dc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000dbe:	003b      	movs	r3, r7
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000dc4:	003b      	movs	r3, r7
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000dca:	003b      	movs	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000dd0:	003b      	movs	r3, r7
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000dd6:	003b      	movs	r3, r7
 8000dd8:	2200      	movs	r2, #0
 8000dda:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ddc:	003b      	movs	r3, r7
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000de2:	003b      	movs	r3, r7
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000de8:	003b      	movs	r3, r7
 8000dea:	4a15      	ldr	r2, [pc, #84]	@ (8000e40 <MX_RTC_Init+0x164>)
 8000dec:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000dee:	003b      	movs	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000df4:	003b      	movs	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2220      	movs	r2, #32
 8000dfe:	2101      	movs	r1, #1
 8000e00:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000e02:	003b      	movs	r3, r7
 8000e04:	2280      	movs	r2, #128	@ 0x80
 8000e06:	0052      	lsls	r2, r2, #1
 8000e08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e0a:	0039      	movs	r1, r7
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e38 <MX_RTC_Init+0x15c>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	0018      	movs	r0, r3
 8000e12:	f003 fc49 	bl	80046a8 <HAL_RTC_SetAlarm_IT>
 8000e16:	1e03      	subs	r3, r0, #0
 8000e18:	d001      	beq.n	8000e1e <MX_RTC_Init+0x142>
  {
    Error_Handler();
 8000e1a:	f000 fd5f 	bl	80018dc <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <MX_RTC_Init+0x15c>)
 8000e20:	2100      	movs	r1, #0
 8000e22:	0018      	movs	r0, r3
 8000e24:	f003 ffd8 	bl	8004dd8 <HAL_RTCEx_SetCalibrationOutPut>
 8000e28:	1e03      	subs	r3, r0, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_RTC_Init+0x154>
  {
    Error_Handler();
 8000e2c:	f000 fd56 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e30:	46c0      	nop			@ (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b010      	add	sp, #64	@ 0x40
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200000d0 	.word	0x200000d0
 8000e3c:	40002800 	.word	0x40002800
 8000e40:	80800080 	.word	0x80800080

08000e44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	@ 0x28
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4a:	231c      	movs	r3, #28
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	0018      	movs	r0, r3
 8000e50:	230c      	movs	r3, #12
 8000e52:	001a      	movs	r2, r3
 8000e54:	2100      	movs	r1, #0
 8000e56:	f004 febb 	bl	8005bd0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5a:	003b      	movs	r3, r7
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	231c      	movs	r3, #28
 8000e60:	001a      	movs	r2, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	f004 feb4 	bl	8005bd0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e68:	4b24      	ldr	r3, [pc, #144]	@ (8000efc <MX_TIM2_Init+0xb8>)
 8000e6a:	2280      	movs	r2, #128	@ 0x80
 8000e6c:	05d2      	lsls	r2, r2, #23
 8000e6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8000e70:	4b22      	ldr	r3, [pc, #136]	@ (8000efc <MX_TIM2_Init+0xb8>)
 8000e72:	4a23      	ldr	r2, [pc, #140]	@ (8000f00 <MX_TIM2_Init+0xbc>)
 8000e74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e76:	4b21      	ldr	r3, [pc, #132]	@ (8000efc <MX_TIM2_Init+0xb8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <MX_TIM2_Init+0xb8>)
 8000e7e:	2263      	movs	r2, #99	@ 0x63
 8000e80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e82:	4b1e      	ldr	r3, [pc, #120]	@ (8000efc <MX_TIM2_Init+0xb8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e88:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <MX_TIM2_Init+0xb8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000efc <MX_TIM2_Init+0xb8>)
 8000e90:	0018      	movs	r0, r3
 8000e92:	f004 f8bb 	bl	800500c <HAL_TIM_PWM_Init>
 8000e96:	1e03      	subs	r3, r0, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000e9a:	f000 fd1f 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9e:	211c      	movs	r1, #28
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eac:	187a      	adds	r2, r7, r1
 8000eae:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <MX_TIM2_Init+0xb8>)
 8000eb0:	0011      	movs	r1, r2
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f004 fe24 	bl	8005b00 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb8:	1e03      	subs	r3, r0, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000ebc:	f000 fd0e 	bl	80018dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ec0:	003b      	movs	r3, r7
 8000ec2:	2260      	movs	r2, #96	@ 0x60
 8000ec4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ec6:	003b      	movs	r3, r7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ecc:	003b      	movs	r3, r7
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed2:	003b      	movs	r3, r7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ed8:	0039      	movs	r1, r7
 8000eda:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <MX_TIM2_Init+0xb8>)
 8000edc:	2208      	movs	r2, #8
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f004 f9ca 	bl	8005278 <HAL_TIM_PWM_ConfigChannel>
 8000ee4:	1e03      	subs	r3, r0, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000ee8:	f000 fcf8 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000eec:	4b03      	ldr	r3, [pc, #12]	@ (8000efc <MX_TIM2_Init+0xb8>)
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f001 f814 	bl	8001f1c <HAL_TIM_MspPostInit>

}
 8000ef4:	46c0      	nop			@ (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b00a      	add	sp, #40	@ 0x28
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000fc 	.word	0x200000fc
 8000f00:	0000031f 	.word	0x0000031f

08000f04 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_TIM14_Init+0x40>)
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f48 <MX_TIM14_Init+0x44>)
 8000f0c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <MX_TIM14_Init+0x40>)
 8000f10:	22f4      	movs	r2, #244	@ 0xf4
 8000f12:	0092      	lsls	r2, r2, #2
 8000f14:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <MX_TIM14_Init+0x40>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <MX_TIM14_Init+0x40>)
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f4c <MX_TIM14_Init+0x48>)
 8000f20:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <MX_TIM14_Init+0x40>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_TIM14_Init+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f2e:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <MX_TIM14_Init+0x40>)
 8000f30:	0018      	movs	r0, r3
 8000f32:	f003 ffa1 	bl	8004e78 <HAL_TIM_Base_Init>
 8000f36:	1e03      	subs	r3, r0, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000f3a:	f000 fccf 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000148 	.word	0x20000148
 8000f48:	40002000 	.word	0x40002000
 8000f4c:	0000ffff 	.word	0x0000ffff

08000f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b08b      	sub	sp, #44	@ 0x2c
 8000f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	2414      	movs	r4, #20
 8000f58:	193b      	adds	r3, r7, r4
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	2314      	movs	r3, #20
 8000f5e:	001a      	movs	r2, r3
 8000f60:	2100      	movs	r1, #0
 8000f62:	f004 fe35 	bl	8005bd0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b66      	ldr	r3, [pc, #408]	@ (8001100 <MX_GPIO_Init+0x1b0>)
 8000f68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f6a:	4b65      	ldr	r3, [pc, #404]	@ (8001100 <MX_GPIO_Init+0x1b0>)
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f72:	4b63      	ldr	r3, [pc, #396]	@ (8001100 <MX_GPIO_Init+0x1b0>)
 8000f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f76:	2204      	movs	r2, #4
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b60      	ldr	r3, [pc, #384]	@ (8001100 <MX_GPIO_Init+0x1b0>)
 8000f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f82:	4b5f      	ldr	r3, [pc, #380]	@ (8001100 <MX_GPIO_Init+0x1b0>)
 8000f84:	2101      	movs	r1, #1
 8000f86:	430a      	orrs	r2, r1
 8000f88:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001100 <MX_GPIO_Init+0x1b0>)
 8000f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4013      	ands	r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f96:	4b5a      	ldr	r3, [pc, #360]	@ (8001100 <MX_GPIO_Init+0x1b0>)
 8000f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f9a:	4b59      	ldr	r3, [pc, #356]	@ (8001100 <MX_GPIO_Init+0x1b0>)
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fa2:	4b57      	ldr	r3, [pc, #348]	@ (8001100 <MX_GPIO_Init+0x1b0>)
 8000fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fa6:	2208      	movs	r2, #8
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	4b54      	ldr	r3, [pc, #336]	@ (8001100 <MX_GPIO_Init+0x1b0>)
 8000fb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fb2:	4b53      	ldr	r3, [pc, #332]	@ (8001100 <MX_GPIO_Init+0x1b0>)
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fba:	4b51      	ldr	r3, [pc, #324]	@ (8001100 <MX_GPIO_Init+0x1b0>)
 8000fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8000fc6:	494f      	ldr	r1, [pc, #316]	@ (8001104 <MX_GPIO_Init+0x1b4>)
 8000fc8:	23a0      	movs	r3, #160	@ 0xa0
 8000fca:	05db      	lsls	r3, r3, #23
 8000fcc:	2200      	movs	r2, #0
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f001 fb3f 	bl	8002652 <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8000fd4:	4b4c      	ldr	r3, [pc, #304]	@ (8001108 <MX_GPIO_Init+0x1b8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2180      	movs	r1, #128	@ 0x80
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f001 fb39 	bl	8002652 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_RST_GPIO_Port, CTOUCH_RST_Pin, GPIO_PIN_RESET);
 8000fe0:	2380      	movs	r3, #128	@ 0x80
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4849      	ldr	r0, [pc, #292]	@ (800110c <MX_GPIO_Init+0x1bc>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	0019      	movs	r1, r3
 8000fea:	f001 fb32 	bl	8002652 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin BUZZER_OUT_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin
                           SHIFT_MCLR_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8000fee:	193b      	adds	r3, r7, r4
 8000ff0:	4a44      	ldr	r2, [pc, #272]	@ (8001104 <MX_GPIO_Init+0x1b4>)
 8000ff2:	601a      	str	r2, [r3, #0]
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	193b      	adds	r3, r7, r4
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	193b      	adds	r3, r7, r4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	193b      	adds	r3, r7, r4
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	193a      	adds	r2, r7, r4
 8001008:	23a0      	movs	r3, #160	@ 0xa0
 800100a:	05db      	lsls	r3, r3, #23
 800100c:	0011      	movs	r1, r2
 800100e:	0018      	movs	r0, r3
 8001010:	f001 f99e 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001014:	193b      	adds	r3, r7, r4
 8001016:	2204      	movs	r2, #4
 8001018:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101a:	193b      	adds	r3, r7, r4
 800101c:	2203      	movs	r2, #3
 800101e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	193b      	adds	r3, r7, r4
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	193a      	adds	r2, r7, r4
 8001028:	23a0      	movs	r3, #160	@ 0xa0
 800102a:	05db      	lsls	r3, r3, #23
 800102c:	0011      	movs	r1, r2
 800102e:	0018      	movs	r0, r3
 8001030:	f001 f98e 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8001034:	193b      	adds	r3, r7, r4
 8001036:	2280      	movs	r2, #128	@ 0x80
 8001038:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	193b      	adds	r3, r7, r4
 800103c:	2201      	movs	r2, #1
 800103e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	193b      	adds	r3, r7, r4
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	193b      	adds	r3, r7, r4
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 800104c:	193b      	adds	r3, r7, r4
 800104e:	4a2e      	ldr	r2, [pc, #184]	@ (8001108 <MX_GPIO_Init+0x1b8>)
 8001050:	0019      	movs	r1, r3
 8001052:	0010      	movs	r0, r2
 8001054:	f001 f97c 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 8001058:	193b      	adds	r3, r7, r4
 800105a:	2280      	movs	r2, #128	@ 0x80
 800105c:	0212      	lsls	r2, r2, #8
 800105e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001060:	193b      	adds	r3, r7, r4
 8001062:	2284      	movs	r2, #132	@ 0x84
 8001064:	0392      	lsls	r2, r2, #14
 8001066:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001068:	193b      	adds	r3, r7, r4
 800106a:	2201      	movs	r2, #1
 800106c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800106e:	193a      	adds	r2, r7, r4
 8001070:	23a0      	movs	r3, #160	@ 0xa0
 8001072:	05db      	lsls	r3, r3, #23
 8001074:	0011      	movs	r1, r2
 8001076:	0018      	movs	r0, r3
 8001078:	f001 f96a 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 800107c:	0021      	movs	r1, r4
 800107e:	187b      	adds	r3, r7, r1
 8001080:	220f      	movs	r2, #15
 8001082:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2284      	movs	r2, #132	@ 0x84
 8001088:	0392      	lsls	r2, r2, #14
 800108a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108c:	187b      	adds	r3, r7, r1
 800108e:	2201      	movs	r2, #1
 8001090:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001092:	000c      	movs	r4, r1
 8001094:	187b      	adds	r3, r7, r1
 8001096:	4a1e      	ldr	r2, [pc, #120]	@ (8001110 <MX_GPIO_Init+0x1c0>)
 8001098:	0019      	movs	r1, r3
 800109a:	0010      	movs	r0, r2
 800109c:	f001 f958 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_RST_Pin */
  GPIO_InitStruct.Pin = CTOUCH_RST_Pin;
 80010a0:	0021      	movs	r1, r4
 80010a2:	187b      	adds	r3, r7, r1
 80010a4:	2280      	movs	r2, #128	@ 0x80
 80010a6:	0052      	lsls	r2, r2, #1
 80010a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2201      	movs	r2, #1
 80010ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	4a13      	ldr	r2, [pc, #76]	@ (800110c <MX_GPIO_Init+0x1bc>)
 80010c0:	0019      	movs	r1, r3
 80010c2:	0010      	movs	r0, r2
 80010c4:	f001 f944 	bl	8002350 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2100      	movs	r1, #0
 80010cc:	2005      	movs	r0, #5
 80010ce:	f001 f90d 	bl	80022ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80010d2:	2005      	movs	r0, #5
 80010d4:	f001 f91f 	bl	8002316 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2006      	movs	r0, #6
 80010de:	f001 f905 	bl	80022ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80010e2:	2006      	movs	r0, #6
 80010e4:	f001 f917 	bl	8002316 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2101      	movs	r1, #1
 80010ec:	2007      	movs	r0, #7
 80010ee:	f001 f8fd 	bl	80022ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80010f2:	2007      	movs	r0, #7
 80010f4:	f001 f90f 	bl	8002316 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010f8:	46c0      	nop			@ (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b00b      	add	sp, #44	@ 0x2c
 80010fe:	bd90      	pop	{r4, r7, pc}
 8001100:	40021000 	.word	0x40021000
 8001104:	00001f01 	.word	0x00001f01
 8001108:	50000800 	.word	0x50000800
 800110c:	50000400 	.word	0x50000400
 8001110:	50000c00 	.word	0x50000c00

08001114 <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800111a:	1dfb      	adds	r3, r7, #7
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8001120:	4a07      	ldr	r2, [pc, #28]	@ (8001140 <updateAndDisplayTime+0x2c>)
 8001122:	4908      	ldr	r1, [pc, #32]	@ (8001144 <updateAndDisplayTime+0x30>)
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <updateAndDisplayTime+0x34>)
 8001126:	0018      	movs	r0, r3
 8001128:	f7ff fc54 	bl	80009d4 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 800112c:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <updateAndDisplayTime+0x30>)
 800112e:	0018      	movs	r0, r3
 8001130:	f000 fcee 	bl	8001b10 <sevSeg_updateDigits>

	return halRet;
 8001134:	1dfb      	adds	r3, r7, #7
 8001136:	781b      	ldrb	r3, [r3, #0]

}
 8001138:	0018      	movs	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	b002      	add	sp, #8
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200001a8 	.word	0x200001a8
 8001144:	20000194 	.word	0x20000194
 8001148:	200000d0 	.word	0x200000d0

0800114c <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 8001158:	4b04      	ldr	r3, [pc, #16]	@ (800116c <updateAndDisplayAlarm+0x20>)
 800115a:	0018      	movs	r0, r3
 800115c:	f000 fcd8 	bl	8001b10 <sevSeg_updateDigits>

	return halRet;
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	781b      	ldrb	r3, [r3, #0]

}
 8001164:	0018      	movs	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	b002      	add	sp, #8
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200001ac 	.word	0x200001ac

08001170 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b08d      	sub	sp, #52	@ 0x34
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

	  //printf("Enter current time minute increment interrupt\n\r");

	  RTC_AlarmTypeDef sAlarm;
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8001178:	2380      	movs	r3, #128	@ 0x80
 800117a:	005a      	lsls	r2, r3, #1
 800117c:	2408      	movs	r4, #8
 800117e:	1939      	adds	r1, r7, r4
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	2300      	movs	r3, #0
 8001184:	f003 fbd0 	bl	8004928 <HAL_RTC_GetAlarm>
	  getRTCTime(hrtc, &currTime, &currDate);
 8001188:	4a22      	ldr	r2, [pc, #136]	@ (8001214 <HAL_RTC_AlarmAEventCallback+0xa4>)
 800118a:	4923      	ldr	r1, [pc, #140]	@ (8001218 <HAL_RTC_AlarmAEventCallback+0xa8>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	0018      	movs	r0, r3
 8001190:	f7ff fc20 	bl	80009d4 <getRTCTime>

	  if(sAlarm.AlarmTime.Minutes>58) {
 8001194:	0022      	movs	r2, r4
 8001196:	18bb      	adds	r3, r7, r2
 8001198:	785b      	ldrb	r3, [r3, #1]
 800119a:	2b3a      	cmp	r3, #58	@ 0x3a
 800119c:	d903      	bls.n	80011a6 <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 800119e:	18bb      	adds	r3, r7, r2
 80011a0:	2200      	movs	r2, #0
 80011a2:	705a      	strb	r2, [r3, #1]
 80011a4:	e00e      	b.n	80011c4 <HAL_RTC_AlarmAEventCallback+0x54>
		//printf("Reset alarm time\n\r");
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 80011a6:	2108      	movs	r1, #8
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	785b      	ldrb	r3, [r3, #1]
 80011ac:	3301      	adds	r3, #1
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 80011b4:	e006      	b.n	80011c4 <HAL_RTC_AlarmAEventCallback+0x54>
			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 80011b6:	4b19      	ldr	r3, [pc, #100]	@ (800121c <HAL_RTC_AlarmAEventCallback+0xac>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2201      	movs	r2, #1
 80011bc:	0011      	movs	r1, r2
 80011be:	0018      	movs	r0, r3
 80011c0:	f001 fa64 	bl	800268c <HAL_GPIO_TogglePin>
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 80011c4:	2308      	movs	r3, #8
 80011c6:	18f9      	adds	r1, r7, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	0018      	movs	r0, r3
 80011ce:	f003 fa6b 	bl	80046a8 <HAL_RTC_SetAlarm_IT>
 80011d2:	1e03      	subs	r3, r0, #0
 80011d4:	d1ef      	bne.n	80011b6 <HAL_RTC_AlarmAEventCallback+0x46>
		}

	  updateAndDisplayTime();
 80011d6:	f7ff ff9d 	bl	8001114 <updateAndDisplayTime>

	  //printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <HAL_RTC_AlarmAEventCallback+0xb0>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d013      	beq.n	800120a <HAL_RTC_AlarmAEventCallback+0x9a>
 80011e2:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <HAL_RTC_AlarmAEventCallback+0xb4>)
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <HAL_RTC_AlarmAEventCallback+0xa8>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d10d      	bne.n	800120a <HAL_RTC_AlarmAEventCallback+0x9a>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 80011ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <HAL_RTC_AlarmAEventCallback+0xb4>)
 80011f0:	785a      	ldrb	r2, [r3, #1]
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <HAL_RTC_AlarmAEventCallback+0xa8>)
 80011f4:	785b      	ldrb	r3, [r3, #1]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d107      	bne.n	800120a <HAL_RTC_AlarmAEventCallback+0x9a>
 80011fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <HAL_RTC_AlarmAEventCallback+0xb4>)
 80011fc:	78da      	ldrb	r2, [r3, #3]
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001200:	78db      	ldrb	r3, [r3, #3]
 8001202:	429a      	cmp	r2, r3
 8001204:	d101      	bne.n	800120a <HAL_RTC_AlarmAEventCallback+0x9a>
		  userAlarmBeep();
 8001206:	f000 f80f 	bl	8001228 <userAlarmBeep>
	  }

}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b00d      	add	sp, #52	@ 0x34
 8001210:	bd90      	pop	{r4, r7, pc}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	200001a8 	.word	0x200001a8
 8001218:	20000194 	.word	0x20000194
 800121c:	20000024 	.word	0x20000024
 8001220:	20000079 	.word	0x20000079
 8001224:	200001ac 	.word	0x200001ac

08001228 <userAlarmBeep>:

void userAlarmBeep() {
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 800122e:	4b3b      	ldr	r3, [pc, #236]	@ (800131c <userAlarmBeep+0xf4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	0018      	movs	r0, r3
 8001234:	f003 fec4 	bl	8004fc0 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001238:	4b38      	ldr	r3, [pc, #224]	@ (800131c <userAlarmBeep+0xf4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	0018      	movs	r0, r3
 800123e:	f003 fe73 	bl	8004f28 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001242:	4b36      	ldr	r3, [pc, #216]	@ (800131c <userAlarmBeep+0xf4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124a:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 800124c:	1cfb      	adds	r3, r7, #3
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 8001252:	f7ff ff5f 	bl	8001114 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 8001256:	4b31      	ldr	r3, [pc, #196]	@ (800131c <userAlarmBeep+0xf4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	4a2f      	ldr	r2, [pc, #188]	@ (8001320 <userAlarmBeep+0xf8>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d926      	bls.n	80012b6 <userAlarmBeep+0x8e>

			sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 8001268:	4b2e      	ldr	r3, [pc, #184]	@ (8001324 <userAlarmBeep+0xfc>)
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	4b2e      	ldr	r3, [pc, #184]	@ (8001328 <userAlarmBeep+0x100>)
 800126e:	6819      	ldr	r1, [r3, #0]
 8001270:	1cfb      	adds	r3, r7, #3
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4a2d      	ldr	r2, [pc, #180]	@ (800132c <userAlarmBeep+0x104>)
 8001276:	5cd3      	ldrb	r3, [r2, r3]
 8001278:	001a      	movs	r2, r3
 800127a:	f000 fcfb 	bl	8001c74 <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(buzzerPort, buzzerPin);					// Toggle Buzzer
 800127e:	4b2c      	ldr	r3, [pc, #176]	@ (8001330 <userAlarmBeep+0x108>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2280      	movs	r2, #128	@ 0x80
 8001284:	0052      	lsls	r2, r2, #1
 8001286:	0011      	movs	r1, r2
 8001288:	0018      	movs	r0, r3
 800128a:	f001 f9ff 	bl	800268c <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 800128e:	4b23      	ldr	r3, [pc, #140]	@ (800131c <userAlarmBeep+0xf4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001296:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001298:	1cfb      	adds	r3, r7, #3
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	1e5a      	subs	r2, r3, #1
 800129e:	4193      	sbcs	r3, r2
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2201      	movs	r2, #1
 80012a4:	4053      	eors	r3, r2
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	001a      	movs	r2, r3
 80012aa:	1cfb      	adds	r3, r7, #3
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	781a      	ldrb	r2, [r3, #0]
 80012b0:	2101      	movs	r1, #1
 80012b2:	400a      	ands	r2, r1
 80012b4:	701a      	strb	r2, [r3, #0]

		}


		HAL_StatusTypeDef halRet = capTouch_readChannels(&capTouch);
 80012b6:	1cbc      	adds	r4, r7, #2
 80012b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <userAlarmBeep+0x10c>)
 80012ba:	0018      	movs	r0, r3
 80012bc:	f7ff f8fe 	bl	80004bc <capTouch_readChannels>
 80012c0:	0003      	movs	r3, r0
 80012c2:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK)
 80012c4:	1cbb      	adds	r3, r7, #2
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <userAlarmBeep+0xa8>
			dispError();
 80012cc:	f000 fac4 	bl	8001858 <dispError>

	} while(capTouch.keyStat == 0x00);
 80012d0:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <userAlarmBeep+0x10c>)
 80012d2:	7c1b      	ldrb	r3, [r3, #16]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0bc      	beq.n	8001252 <userAlarmBeep+0x2a>

	HAL_TIM_Base_Stop(timerDelay);
 80012d8:	4b10      	ldr	r3, [pc, #64]	@ (800131c <userAlarmBeep+0xf4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	0018      	movs	r0, r3
 80012de:	f003 fe6f 	bl	8004fc0 <HAL_TIM_Base_Stop>
	HAL_GPIO_WritePin(buzzerPort, buzzerPin, GPIO_PIN_RESET);
 80012e2:	4b13      	ldr	r3, [pc, #76]	@ (8001330 <userAlarmBeep+0x108>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2280      	movs	r2, #128	@ 0x80
 80012e8:	0051      	lsls	r1, r2, #1
 80012ea:	2200      	movs	r2, #0
 80012ec:	0018      	movs	r0, r3
 80012ee:	f001 f9b0 	bl	8002652 <HAL_GPIO_WritePin>
	updateAndDisplayTime();				// Update to current time and display
 80012f2:	f7ff ff0f 	bl	8001114 <updateAndDisplayTime>
	sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[1]);	// Toggle 0% to 50% duty cycle
 80012f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <userAlarmBeep+0xfc>)
 80012f8:	6818      	ldr	r0, [r3, #0]
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <userAlarmBeep+0x100>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	225a      	movs	r2, #90	@ 0x5a
 8001300:	0019      	movs	r1, r3
 8001302:	f000 fcb7 	bl	8001c74 <sevSeg_setIntensity>


	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 8001306:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <userAlarmBeep+0x110>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2201      	movs	r2, #1
 800130c:	0011      	movs	r1, r2
 800130e:	0018      	movs	r0, r3
 8001310:	f001 f9bc 	bl	800268c <HAL_GPIO_TogglePin>

}
 8001314:	46c0      	nop			@ (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	b003      	add	sp, #12
 800131a:	bd90      	pop	{r4, r7, pc}
 800131c:	2000002c 	.word	0x2000002c
 8001320:	00007ffe 	.word	0x00007ffe
 8001324:	20000030 	.word	0x20000030
 8001328:	20000034 	.word	0x20000034
 800132c:	08005c74 	.word	0x08005c74
 8001330:	2000000c 	.word	0x2000000c
 8001334:	200001c4 	.word	0x200001c4
 8001338:	20000024 	.word	0x20000024

0800133c <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	0002      	movs	r2, r0
 8001344:	1dbb      	adds	r3, r7, #6
 8001346:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8001348:	2208      	movs	r2, #8
 800134a:	1dbb      	adds	r3, r7, #6
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	4293      	cmp	r3, r2
 8001350:	d106      	bne.n	8001360 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 8001352:	230f      	movs	r3, #15
 8001354:	18fc      	adds	r4, r7, r3
 8001356:	f000 f839 	bl	80013cc <displayButtonISR>
 800135a:	0003      	movs	r3, r0
 800135c:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 800135e:	e031      	b.n	80013c4 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8001360:	2204      	movs	r2, #4
 8001362:	1dbb      	adds	r3, r7, #6
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	4293      	cmp	r3, r2
 8001368:	d106      	bne.n	8001378 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 800136a:	230f      	movs	r3, #15
 800136c:	18fc      	adds	r4, r7, r3
 800136e:	f000 f85d 	bl	800142c <alarmEnableISR>
 8001372:	0003      	movs	r3, r0
 8001374:	7023      	strb	r3, [r4, #0]
}
 8001376:	e025      	b.n	80013c4 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8001378:	2380      	movs	r3, #128	@ 0x80
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	1dba      	adds	r2, r7, #6
 800137e:	8812      	ldrh	r2, [r2, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	d106      	bne.n	8001392 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 8001384:	230f      	movs	r3, #15
 8001386:	18fc      	adds	r4, r7, r3
 8001388:	f000 f884 	bl	8001494 <alarmSetISR>
 800138c:	0003      	movs	r3, r0
 800138e:	7023      	strb	r3, [r4, #0]
}
 8001390:	e018      	b.n	80013c4 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 8001392:	2201      	movs	r2, #1
 8001394:	1dbb      	adds	r3, r7, #6
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	4293      	cmp	r3, r2
 800139a:	d106      	bne.n	80013aa <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 800139c:	230f      	movs	r3, #15
 800139e:	18fc      	adds	r4, r7, r3
 80013a0:	f000 f954 	bl	800164c <hourSetISR>
 80013a4:	0003      	movs	r3, r0
 80013a6:	7023      	strb	r3, [r4, #0]
}
 80013a8:	e00c      	b.n	80013c4 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 80013aa:	2202      	movs	r2, #2
 80013ac:	1dbb      	adds	r3, r7, #6
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d106      	bne.n	80013c2 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 80013b4:	230f      	movs	r3, #15
 80013b6:	18fc      	adds	r4, r7, r3
 80013b8:	f000 f974 	bl	80016a4 <minuteSetISR>
 80013bc:	0003      	movs	r3, r0
 80013be:	7023      	strb	r3, [r4, #0]
}
 80013c0:	e000      	b.n	80013c4 <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 80013c2:	46c0      	nop			@ (mov r8, r8)
}
 80013c4:	46c0      	nop			@ (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b005      	add	sp, #20
 80013ca:	bd90      	pop	{r4, r7, pc}

080013cc <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 80013d2:	1dfb      	adds	r3, r7, #7
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 80013d8:	f7ff fe9c 	bl	8001114 <updateAndDisplayTime>

	sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 80013dc:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <displayButtonISR+0x50>)
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <displayButtonISR+0x54>)
 80013e2:	6819      	ldr	r1, [r3, #0]
 80013e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <displayButtonISR+0x58>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	001a      	movs	r2, r3
 80013ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <displayButtonISR+0x5c>)
 80013ec:	5c9b      	ldrb	r3, [r3, r2]
 80013ee:	001a      	movs	r2, r3
 80013f0:	f000 fc40 	bl	8001c74 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 80013f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <displayButtonISR+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d903      	bls.n	8001404 <displayButtonISR+0x38>
		displayToggle = 0;
 80013fc:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <displayButtonISR+0x58>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
 8001402:	e005      	b.n	8001410 <displayButtonISR+0x44>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 8001404:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <displayButtonISR+0x58>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	3301      	adds	r3, #1
 800140a:	b2da      	uxtb	r2, r3
 800140c:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <displayButtonISR+0x58>)
 800140e:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8001410:	1dfb      	adds	r3, r7, #7
 8001412:	781b      	ldrb	r3, [r3, #0]

}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	b002      	add	sp, #8
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000030 	.word	0x20000030
 8001420:	20000034 	.word	0x20000034
 8001424:	20000078 	.word	0x20000078
 8001428:	08005c74 	.word	0x08005c74

0800142c <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8001438:	4b14      	ldr	r3, [pc, #80]	@ (800148c <alarmEnableISR+0x60>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2201      	movs	r2, #1
 800143e:	4053      	eors	r3, r2
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00b      	beq.n	800145e <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 8001446:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <alarmEnableISR+0x64>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2280      	movs	r2, #128	@ 0x80
 800144c:	0151      	lsls	r1, r2, #5
 800144e:	2201      	movs	r2, #1
 8001450:	0018      	movs	r0, r3
 8001452:	f001 f8fe 	bl	8002652 <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 8001456:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <alarmEnableISR+0x60>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
 800145c:	e010      	b.n	8001480 <alarmEnableISR+0x54>

		//printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
								//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 800145e:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <alarmEnableISR+0x60>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00b      	beq.n	800147e <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 8001466:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <alarmEnableISR+0x64>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2280      	movs	r2, #128	@ 0x80
 800146c:	0151      	lsls	r1, r2, #5
 800146e:	2200      	movs	r2, #0
 8001470:	0018      	movs	r0, r3
 8001472:	f001 f8ee 	bl	8002652 <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 8001476:	4b05      	ldr	r3, [pc, #20]	@ (800148c <alarmEnableISR+0x60>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
 800147c:	e000      	b.n	8001480 <alarmEnableISR+0x54>

		//printf("User alarm disabled.\n\r");
	}
	else {
		__NOP();							//Code should never reach here.
 800147e:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 8001480:	1dfb      	adds	r3, r7, #7
 8001482:	781b      	ldrb	r3, [r3, #0]

}
 8001484:	0018      	movs	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	b002      	add	sp, #8
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000079 	.word	0x20000079
 8001490:	20000008 	.word	0x20000008

08001494 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
	//printf("Enter user alarm set ISR.\n\r");

	//printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
			//userAlarmTime.Minutes, userAlarmTime.Seconds);

	HAL_StatusTypeDef halRet = HAL_OK;
 800149a:	1cbb      	adds	r3, r7, #2
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for switch debounce
	 */

	// First wait for button to deactivate again
	while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_SET);
 80014a0:	46c0      	nop			@ (mov r8, r8)
 80014a2:	4b64      	ldr	r3, [pc, #400]	@ (8001634 <alarmSetISR+0x1a0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2280      	movs	r2, #128	@ 0x80
 80014a8:	0212      	lsls	r2, r2, #8
 80014aa:	0011      	movs	r1, r2
 80014ac:	0018      	movs	r0, r3
 80014ae:	f001 f8b3 	bl	8002618 <HAL_GPIO_ReadPin>
 80014b2:	0003      	movs	r3, r0
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d1f4      	bne.n	80014a2 <alarmSetISR+0xe>

	// Go through debounce
	HAL_TIM_Base_Stop(timerDelay);
 80014b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001638 <alarmSetISR+0x1a4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	0018      	movs	r0, r3
 80014be:	f003 fd7f 	bl	8004fc0 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80014c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001638 <alarmSetISR+0x1a4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	0018      	movs	r0, r3
 80014c8:	f003 fd2e 	bl	8004f28 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80014cc:	4b5a      	ldr	r3, [pc, #360]	@ (8001638 <alarmSetISR+0x1a4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d4:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 8));
 80014d6:	4b58      	ldr	r3, [pc, #352]	@ (8001638 <alarmSetISR+0x1a4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	1ad2      	subs	r2, r2, r3
 80014e2:	2380      	movs	r3, #128	@ 0x80
 80014e4:	019b      	lsls	r3, r3, #6
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d9f5      	bls.n	80014d6 <alarmSetISR+0x42>


	/*
	 *  Poll for 1 second to see if the alarm set button is pressed again
	 */
	HAL_TIM_Base_Stop(timerDelay);
 80014ea:	4b53      	ldr	r3, [pc, #332]	@ (8001638 <alarmSetISR+0x1a4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	0018      	movs	r0, r3
 80014f0:	f003 fd66 	bl	8004fc0 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80014f4:	4b50      	ldr	r3, [pc, #320]	@ (8001638 <alarmSetISR+0x1a4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	0018      	movs	r0, r3
 80014fa:	f003 fd15 	bl	8004f28 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80014fe:	4b4e      	ldr	r3, [pc, #312]	@ (8001638 <alarmSetISR+0x1a4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001506:	607b      	str	r3, [r7, #4]

	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 8001508:	e00d      	b.n	8001526 <alarmSetISR+0x92>

		if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 800150a:	4b4a      	ldr	r3, [pc, #296]	@ (8001634 <alarmSetISR+0x1a0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2280      	movs	r2, #128	@ 0x80
 8001510:	0212      	lsls	r2, r2, #8
 8001512:	0011      	movs	r1, r2
 8001514:	0018      	movs	r0, r3
 8001516:	f001 f87f 	bl	8002618 <HAL_GPIO_ReadPin>
 800151a:	1e03      	subs	r3, r0, #0
 800151c:	d103      	bne.n	8001526 <alarmSetISR+0x92>
			alarmSetMode = true;
 800151e:	4b47      	ldr	r3, [pc, #284]	@ (800163c <alarmSetISR+0x1a8>)
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
//			HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
			break;
 8001524:	e009      	b.n	800153a <alarmSetISR+0xa6>
	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 8001526:	4b44      	ldr	r3, [pc, #272]	@ (8001638 <alarmSetISR+0x1a4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	1ad2      	subs	r2, r2, r3
 8001532:	2380      	movs	r3, #128	@ 0x80
 8001534:	025b      	lsls	r3, r3, #9
 8001536:	429a      	cmp	r2, r3
 8001538:	d9e7      	bls.n	800150a <alarmSetISR+0x76>
		}

	}

	// Go through debounce once again
	HAL_TIM_Base_Stop(timerDelay);
 800153a:	4b3f      	ldr	r3, [pc, #252]	@ (8001638 <alarmSetISR+0x1a4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	0018      	movs	r0, r3
 8001540:	f003 fd3e 	bl	8004fc0 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001544:	4b3c      	ldr	r3, [pc, #240]	@ (8001638 <alarmSetISR+0x1a4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	0018      	movs	r0, r3
 800154a:	f003 fced 	bl	8004f28 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 800154e:	4b3a      	ldr	r3, [pc, #232]	@ (8001638 <alarmSetISR+0x1a4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001556:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 4));
 8001558:	4b37      	ldr	r3, [pc, #220]	@ (8001638 <alarmSetISR+0x1a4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	1ad2      	subs	r2, r2, r3
 8001564:	2380      	movs	r3, #128	@ 0x80
 8001566:	01db      	lsls	r3, r3, #7
 8001568:	429a      	cmp	r2, r3
 800156a:	d9f5      	bls.n	8001558 <alarmSetISR+0xc4>
	/*
	 * Then, if we are in alarm set mode, go through the
	 * alarm set process until the button is pressed again
	 */

	HAL_TIM_Base_Stop(timerDelay);
 800156c:	4b32      	ldr	r3, [pc, #200]	@ (8001638 <alarmSetISR+0x1a4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	0018      	movs	r0, r3
 8001572:	f003 fd25 	bl	8004fc0 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001576:	4b30      	ldr	r3, [pc, #192]	@ (8001638 <alarmSetISR+0x1a4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	0018      	movs	r0, r3
 800157c:	f003 fcd4 	bl	8004f28 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001580:	4b2d      	ldr	r3, [pc, #180]	@ (8001638 <alarmSetISR+0x1a4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001588:	607b      	str	r3, [r7, #4]

	if(alarmSetMode) {
 800158a:	4b2c      	ldr	r3, [pc, #176]	@ (800163c <alarmSetISR+0x1a8>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d046      	beq.n	8001620 <alarmSetISR+0x18c>

		bool displayBlink = false;
 8001592:	1cfb      	adds	r3, r7, #3
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			updateAndDisplayAlarm();
 8001598:	f7ff fdd8 	bl	800114c <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 800159c:	4b26      	ldr	r3, [pc, #152]	@ (8001638 <alarmSetISR+0x1a4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	1ad2      	subs	r2, r2, r3
 80015a8:	2380      	movs	r3, #128	@ 0x80
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d31e      	bcc.n	80015ee <alarmSetISR+0x15a>

//				HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

				sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 80015b0:	4b23      	ldr	r3, [pc, #140]	@ (8001640 <alarmSetISR+0x1ac>)
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	4b23      	ldr	r3, [pc, #140]	@ (8001644 <alarmSetISR+0x1b0>)
 80015b6:	6819      	ldr	r1, [r3, #0]
 80015b8:	1cfb      	adds	r3, r7, #3
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4a22      	ldr	r2, [pc, #136]	@ (8001648 <alarmSetISR+0x1b4>)
 80015be:	5cd3      	ldrb	r3, [r2, r3]
 80015c0:	001a      	movs	r2, r3
 80015c2:	f000 fb57 	bl	8001c74 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 80015c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <alarmSetISR+0x1a4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ce:	607b      	str	r3, [r7, #4]
				displayBlink = !displayBlink;
 80015d0:	1cfb      	adds	r3, r7, #3
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	1e5a      	subs	r2, r3, #1
 80015d6:	4193      	sbcs	r3, r2
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2201      	movs	r2, #1
 80015dc:	4053      	eors	r3, r2
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	001a      	movs	r2, r3
 80015e2:	1cfb      	adds	r3, r7, #3
 80015e4:	701a      	strb	r2, [r3, #0]
 80015e6:	781a      	ldrb	r2, [r3, #0]
 80015e8:	2101      	movs	r1, #1
 80015ea:	400a      	ands	r2, r1
 80015ec:	701a      	strb	r2, [r3, #0]

			}

		}while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET);
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <alarmSetISR+0x1a0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2280      	movs	r2, #128	@ 0x80
 80015f4:	0212      	lsls	r2, r2, #8
 80015f6:	0011      	movs	r1, r2
 80015f8:	0018      	movs	r0, r3
 80015fa:	f001 f80d 	bl	8002618 <HAL_GPIO_ReadPin>
 80015fe:	1e03      	subs	r3, r0, #0
 8001600:	d1ca      	bne.n	8001598 <alarmSetISR+0x104>

//		HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_RESET);

		sevSeg_setIntensity(timerPWM, tim_PWM_CHANNEL, sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 8001602:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <alarmSetISR+0x1ac>)
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <alarmSetISR+0x1b0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	225a      	movs	r2, #90	@ 0x5a
 800160c:	0019      	movs	r1, r3
 800160e:	f000 fb31 	bl	8001c74 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 8001612:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <alarmSetISR+0x1a4>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	0018      	movs	r0, r3
 8001618:	f003 fcd2 	bl	8004fc0 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 800161c:	f7ff fd7a 	bl	8001114 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <alarmSetISR+0x1a8>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 8001626:	1cbb      	adds	r3, r7, #2
 8001628:	781b      	ldrb	r3, [r3, #0]

}
 800162a:	0018      	movs	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	b002      	add	sp, #8
 8001630:	bd80      	pop	{r7, pc}
 8001632:	46c0      	nop			@ (mov r8, r8)
 8001634:	20000000 	.word	0x20000000
 8001638:	2000002c 	.word	0x2000002c
 800163c:	200001c0 	.word	0x200001c0
 8001640:	20000030 	.word	0x20000030
 8001644:	20000034 	.word	0x20000034
 8001648:	08005c74 	.word	0x08005c74

0800164c <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0

//	printf("Entered hour set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);


	HAL_StatusTypeDef halRet = HAL_OK;
 8001652:	1dfb      	adds	r3, r7, #7
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <hourSetISR+0x48>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <hourSetISR+0x1a>

		alarmHourInc();
 8001660:	f000 f84c 	bl	80016fc <alarmHourInc>
 8001664:	e00f      	b.n	8001686 <hourSetISR+0x3a>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 8001666:	f000 f877 	bl	8001758 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 800166a:	490b      	ldr	r1, [pc, #44]	@ (8001698 <hourSetISR+0x4c>)
 800166c:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <hourSetISR+0x50>)
 800166e:	2200      	movs	r2, #0
 8001670:	0018      	movs	r0, r3
 8001672:	f002 fe35 	bl	80042e0 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8001676:	f7ff fd4d 	bl	8001114 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 800167a:	4a09      	ldr	r2, [pc, #36]	@ (80016a0 <hourSetISR+0x54>)
 800167c:	4906      	ldr	r1, [pc, #24]	@ (8001698 <hourSetISR+0x4c>)
 800167e:	4b07      	ldr	r3, [pc, #28]	@ (800169c <hourSetISR+0x50>)
 8001680:	0018      	movs	r0, r3
 8001682:	f7ff f9a7 	bl	80009d4 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 8001686:	1dfb      	adds	r3, r7, #7
 8001688:	781b      	ldrb	r3, [r3, #0]

}
 800168a:	0018      	movs	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	b002      	add	sp, #8
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	200001c0 	.word	0x200001c0
 8001698:	20000194 	.word	0x20000194
 800169c:	200000d0 	.word	0x200000d0
 80016a0:	200001a8 	.word	0x200001a8

080016a4 <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0

//	printf("Entered minute set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

	HAL_StatusTypeDef halRet = HAL_OK;
 80016aa:	1dfb      	adds	r3, r7, #7
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80016b0:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <minuteSetISR+0x48>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <minuteSetISR+0x1a>

		alarmMinuteInc();
 80016b8:	f000 f888 	bl	80017cc <alarmMinuteInc>
 80016bc:	e00f      	b.n	80016de <minuteSetISR+0x3a>
				//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 80016be:	f000 f8a3 	bl	8001808 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80016c2:	490b      	ldr	r1, [pc, #44]	@ (80016f0 <minuteSetISR+0x4c>)
 80016c4:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <minuteSetISR+0x50>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	0018      	movs	r0, r3
 80016ca:	f002 fe09 	bl	80042e0 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80016ce:	f7ff fd21 	bl	8001114 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80016d2:	4a09      	ldr	r2, [pc, #36]	@ (80016f8 <minuteSetISR+0x54>)
 80016d4:	4906      	ldr	r1, [pc, #24]	@ (80016f0 <minuteSetISR+0x4c>)
 80016d6:	4b07      	ldr	r3, [pc, #28]	@ (80016f4 <minuteSetISR+0x50>)
 80016d8:	0018      	movs	r0, r3
 80016da:	f7ff f97b 	bl	80009d4 <getRTCTime>

		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 80016de:	1dfb      	adds	r3, r7, #7
 80016e0:	781b      	ldrb	r3, [r3, #0]
}
 80016e2:	0018      	movs	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b002      	add	sp, #8
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			@ (mov r8, r8)
 80016ec:	200001c0 	.word	0x200001c0
 80016f0:	20000194 	.word	0x20000194
 80016f4:	200000d0 	.word	0x200000d0
 80016f8:	200001a8 	.word	0x200001a8

080016fc <alarmHourInc>:

void alarmHourInc(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8001700:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <alarmHourInc+0x58>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b0b      	cmp	r3, #11
 8001706:	d903      	bls.n	8001710 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <alarmHourInc+0x58>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 800170e:	e01e      	b.n	800174e <alarmHourInc+0x52>
	else if(userAlarmTime.Hours == 11) {
 8001710:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <alarmHourInc+0x58>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b0b      	cmp	r3, #11
 8001716:	d10e      	bne.n	8001736 <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001718:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <alarmHourInc+0x58>)
 800171a:	78db      	ldrb	r3, [r3, #3]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d103      	bne.n	8001728 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001720:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <alarmHourInc+0x58>)
 8001722:	2201      	movs	r2, #1
 8001724:	70da      	strb	r2, [r3, #3]
 8001726:	e002      	b.n	800172e <alarmHourInc+0x32>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001728:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <alarmHourInc+0x58>)
 800172a:	2200      	movs	r2, #0
 800172c:	70da      	strb	r2, [r3, #3]
		userAlarmTime.Hours = 12;
 800172e:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <alarmHourInc+0x58>)
 8001730:	220c      	movs	r2, #12
 8001732:	701a      	strb	r2, [r3, #0]
}
 8001734:	e00b      	b.n	800174e <alarmHourInc+0x52>
	else if(userAlarmTime.Hours < 11) {
 8001736:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <alarmHourInc+0x58>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b0a      	cmp	r3, #10
 800173c:	d806      	bhi.n	800174c <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 800173e:	4b05      	ldr	r3, [pc, #20]	@ (8001754 <alarmHourInc+0x58>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	3301      	adds	r3, #1
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4b03      	ldr	r3, [pc, #12]	@ (8001754 <alarmHourInc+0x58>)
 8001748:	701a      	strb	r2, [r3, #0]
}
 800174a:	e000      	b.n	800174e <alarmHourInc+0x52>
		__NOP();
 800174c:	46c0      	nop			@ (mov r8, r8)
}
 800174e:	46c0      	nop			@ (mov r8, r8)
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200001ac 	.word	0x200001ac

08001758 <currHourInc>:

void currHourInc(void) {
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 800175c:	4a17      	ldr	r2, [pc, #92]	@ (80017bc <currHourInc+0x64>)
 800175e:	4918      	ldr	r1, [pc, #96]	@ (80017c0 <currHourInc+0x68>)
 8001760:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <currHourInc+0x6c>)
 8001762:	0018      	movs	r0, r3
 8001764:	f7ff f936 	bl	80009d4 <getRTCTime>

	if(currTime.Hours >= 12) {
 8001768:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <currHourInc+0x68>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b0b      	cmp	r3, #11
 800176e:	d903      	bls.n	8001778 <currHourInc+0x20>
		currTime.Hours = 1;
 8001770:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <currHourInc+0x68>)
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
	}
	else {
		__NOP();
	}

}
 8001776:	e01e      	b.n	80017b6 <currHourInc+0x5e>
	else if(currTime.Hours == 11) {
 8001778:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <currHourInc+0x68>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b0b      	cmp	r3, #11
 800177e:	d10e      	bne.n	800179e <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001780:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <currHourInc+0x68>)
 8001782:	78db      	ldrb	r3, [r3, #3]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d103      	bne.n	8001790 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001788:	4b0d      	ldr	r3, [pc, #52]	@ (80017c0 <currHourInc+0x68>)
 800178a:	2201      	movs	r2, #1
 800178c:	70da      	strb	r2, [r3, #3]
 800178e:	e002      	b.n	8001796 <currHourInc+0x3e>
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001790:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <currHourInc+0x68>)
 8001792:	2200      	movs	r2, #0
 8001794:	70da      	strb	r2, [r3, #3]
		currTime.Hours = 12;
 8001796:	4b0a      	ldr	r3, [pc, #40]	@ (80017c0 <currHourInc+0x68>)
 8001798:	220c      	movs	r2, #12
 800179a:	701a      	strb	r2, [r3, #0]
}
 800179c:	e00b      	b.n	80017b6 <currHourInc+0x5e>
	else if(userAlarmTime.Hours < 11) {
 800179e:	4b0a      	ldr	r3, [pc, #40]	@ (80017c8 <currHourInc+0x70>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b0a      	cmp	r3, #10
 80017a4:	d806      	bhi.n	80017b4 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 80017a6:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <currHourInc+0x68>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	3301      	adds	r3, #1
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4b04      	ldr	r3, [pc, #16]	@ (80017c0 <currHourInc+0x68>)
 80017b0:	701a      	strb	r2, [r3, #0]
}
 80017b2:	e000      	b.n	80017b6 <currHourInc+0x5e>
		__NOP();
 80017b4:	46c0      	nop			@ (mov r8, r8)
}
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200001a8 	.word	0x200001a8
 80017c0:	20000194 	.word	0x20000194
 80017c4:	200000d0 	.word	0x200000d0
 80017c8:	200001ac 	.word	0x200001ac

080017cc <alarmMinuteInc>:

void alarmMinuteInc(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 80017d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <alarmMinuteInc+0x38>)
 80017d2:	785b      	ldrb	r3, [r3, #1]
 80017d4:	2b3a      	cmp	r3, #58	@ 0x3a
 80017d6:	d905      	bls.n	80017e4 <alarmMinuteInc+0x18>
		alarmHourInc();
 80017d8:	f7ff ff90 	bl	80016fc <alarmHourInc>
		userAlarmTime.Minutes = 0;
 80017dc:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <alarmMinuteInc+0x38>)
 80017de:	2200      	movs	r2, #0
 80017e0:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 80017e2:	e00b      	b.n	80017fc <alarmMinuteInc+0x30>
	else if(userAlarmTime.Minutes < 59) {
 80017e4:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <alarmMinuteInc+0x38>)
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	2b3a      	cmp	r3, #58	@ 0x3a
 80017ea:	d806      	bhi.n	80017fa <alarmMinuteInc+0x2e>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 80017ec:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <alarmMinuteInc+0x38>)
 80017ee:	785b      	ldrb	r3, [r3, #1]
 80017f0:	3301      	adds	r3, #1
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b03      	ldr	r3, [pc, #12]	@ (8001804 <alarmMinuteInc+0x38>)
 80017f6:	705a      	strb	r2, [r3, #1]
}
 80017f8:	e000      	b.n	80017fc <alarmMinuteInc+0x30>
		__NOP();
 80017fa:	46c0      	nop			@ (mov r8, r8)
}
 80017fc:	46c0      	nop			@ (mov r8, r8)
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	46c0      	nop			@ (mov r8, r8)
 8001804:	200001ac 	.word	0x200001ac

08001808 <currMinuteInc>:

void currMinuteInc(void) {
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 800180c:	4a0f      	ldr	r2, [pc, #60]	@ (800184c <currMinuteInc+0x44>)
 800180e:	4910      	ldr	r1, [pc, #64]	@ (8001850 <currMinuteInc+0x48>)
 8001810:	4b10      	ldr	r3, [pc, #64]	@ (8001854 <currMinuteInc+0x4c>)
 8001812:	0018      	movs	r0, r3
 8001814:	f7ff f8de 	bl	80009d4 <getRTCTime>

	if(currTime.Minutes >= 59) {
 8001818:	4b0d      	ldr	r3, [pc, #52]	@ (8001850 <currMinuteInc+0x48>)
 800181a:	785b      	ldrb	r3, [r3, #1]
 800181c:	2b3a      	cmp	r3, #58	@ 0x3a
 800181e:	d905      	bls.n	800182c <currMinuteInc+0x24>
		currHourInc();
 8001820:	f7ff ff9a 	bl	8001758 <currHourInc>
		currTime.Minutes = 0;
 8001824:	4b0a      	ldr	r3, [pc, #40]	@ (8001850 <currMinuteInc+0x48>)
 8001826:	2200      	movs	r2, #0
 8001828:	705a      	strb	r2, [r3, #1]
	}
	else {
		__NOP();
	}

}
 800182a:	e00b      	b.n	8001844 <currMinuteInc+0x3c>
	else if(currTime.Minutes < 59) {
 800182c:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <currMinuteInc+0x48>)
 800182e:	785b      	ldrb	r3, [r3, #1]
 8001830:	2b3a      	cmp	r3, #58	@ 0x3a
 8001832:	d806      	bhi.n	8001842 <currMinuteInc+0x3a>
		currTime.Minutes = currTime.Minutes + 1;
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <currMinuteInc+0x48>)
 8001836:	785b      	ldrb	r3, [r3, #1]
 8001838:	3301      	adds	r3, #1
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <currMinuteInc+0x48>)
 800183e:	705a      	strb	r2, [r3, #1]
}
 8001840:	e000      	b.n	8001844 <currMinuteInc+0x3c>
		__NOP();
 8001842:	46c0      	nop			@ (mov r8, r8)
}
 8001844:	46c0      	nop			@ (mov r8, r8)
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	46c0      	nop			@ (mov r8, r8)
 800184c:	200001a8 	.word	0x200001a8
 8001850:	20000194 	.word	0x20000194
 8001854:	200000d0 	.word	0x200000d0

08001858 <dispError>:

void dispError(void) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 800185e:	4b1c      	ldr	r3, [pc, #112]	@ (80018d0 <dispError+0x78>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	0018      	movs	r0, r3
 8001864:	f003 fbac 	bl	8004fc0 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001868:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <dispError+0x78>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	0018      	movs	r0, r3
 800186e:	f003 fb5b 	bl	8004f28 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001872:	4b17      	ldr	r3, [pc, #92]	@ (80018d0 <dispError+0x78>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 800187c:	1cfb      	adds	r3, r7, #3
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001882:	4b13      	ldr	r3, [pc, #76]	@ (80018d0 <dispError+0x78>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	4a11      	ldr	r2, [pc, #68]	@ (80018d4 <dispError+0x7c>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d9f6      	bls.n	8001882 <dispError+0x2a>

			HAL_GPIO_TogglePin(alarmLEDPort, alarmLEDPin);
 8001894:	4b10      	ldr	r3, [pc, #64]	@ (80018d8 <dispError+0x80>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2280      	movs	r2, #128	@ 0x80
 800189a:	0152      	lsls	r2, r2, #5
 800189c:	0011      	movs	r1, r2
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 fef4 	bl	800268c <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80018a4:	4b0a      	ldr	r3, [pc, #40]	@ (80018d0 <dispError+0x78>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ac:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80018ae:	1cfb      	adds	r3, r7, #3
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	1e5a      	subs	r2, r3, #1
 80018b4:	4193      	sbcs	r3, r2
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2201      	movs	r2, #1
 80018ba:	4053      	eors	r3, r2
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	001a      	movs	r2, r3
 80018c0:	1cfb      	adds	r3, r7, #3
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	781a      	ldrb	r2, [r3, #0]
 80018c6:	2101      	movs	r1, #1
 80018c8:	400a      	ands	r2, r1
 80018ca:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 80018cc:	e7d9      	b.n	8001882 <dispError+0x2a>
 80018ce:	46c0      	nop			@ (mov r8, r8)
 80018d0:	2000002c 	.word	0x2000002c
 80018d4:	00003ffe 	.word	0x00003ffe
 80018d8:	20000008 	.word	0x20000008

080018dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e0:	b672      	cpsid	i
}
 80018e2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e4:	46c0      	nop			@ (mov r8, r8)
 80018e6:	e7fd      	b.n	80018e4 <Error_Handler+0x8>

080018e8 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM,
					uint32_t tim_PWM_CHANNEL) {
 80018e8:	b5b0      	push	{r4, r5, r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	0005      	movs	r5, r0
 80018f0:	000c      	movs	r4, r1
 80018f2:	0010      	movs	r0, r2
 80018f4:	0019      	movs	r1, r3
 80018f6:	1dbb      	adds	r3, r7, #6
 80018f8:	1c2a      	adds	r2, r5, #0
 80018fa:	801a      	strh	r2, [r3, #0]
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	1c22      	adds	r2, r4, #0
 8001900:	801a      	strh	r2, [r3, #0]
 8001902:	1cbb      	adds	r3, r7, #2
 8001904:	1c02      	adds	r2, r0, #0
 8001906:	801a      	strh	r2, [r3, #0]
 8001908:	003b      	movs	r3, r7
 800190a:	1c0a      	adds	r2, r1, #0
 800190c:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 800190e:	4b78      	ldr	r3, [pc, #480]	@ (8001af0 <sevSeg_Init+0x208>)
 8001910:	1dba      	adds	r2, r7, #6
 8001912:	8812      	ldrh	r2, [r2, #0]
 8001914:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8001916:	4b77      	ldr	r3, [pc, #476]	@ (8001af4 <sevSeg_Init+0x20c>)
 8001918:	1d3a      	adds	r2, r7, #4
 800191a:	8812      	ldrh	r2, [r2, #0]
 800191c:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 800191e:	4b76      	ldr	r3, [pc, #472]	@ (8001af8 <sevSeg_Init+0x210>)
 8001920:	1cba      	adds	r2, r7, #2
 8001922:	8812      	ldrh	r2, [r2, #0]
 8001924:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8001926:	4b75      	ldr	r3, [pc, #468]	@ (8001afc <sevSeg_Init+0x214>)
 8001928:	003a      	movs	r2, r7
 800192a:	8812      	ldrh	r2, [r2, #0]
 800192c:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 800192e:	4a74      	ldr	r2, [pc, #464]	@ (8001b00 <sevSeg_Init+0x218>)
 8001930:	2330      	movs	r3, #48	@ 0x30
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	8013      	strh	r3, [r2, #0]

	for(int i = 0; i < 5; i++) {
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
 800193c:	e00b      	b.n	8001956 <sevSeg_Init+0x6e>
		portArray[i] = GPIOPortArray[i];
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001944:	18d3      	adds	r3, r2, r3
 8001946:	6819      	ldr	r1, [r3, #0]
 8001948:	4b6e      	ldr	r3, [pc, #440]	@ (8001b04 <sevSeg_Init+0x21c>)
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	0092      	lsls	r2, r2, #2
 800194e:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	3301      	adds	r3, #1
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	2b04      	cmp	r3, #4
 800195a:	ddf0      	ble.n	800193e <sevSeg_Init+0x56>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 800195c:	4b69      	ldr	r3, [pc, #420]	@ (8001b04 <sevSeg_Init+0x21c>)
 800195e:	6918      	ldr	r0, [r3, #16]
 8001960:	4b67      	ldr	r3, [pc, #412]	@ (8001b00 <sevSeg_Init+0x218>)
 8001962:	8819      	ldrh	r1, [r3, #0]
 8001964:	4b68      	ldr	r3, [pc, #416]	@ (8001b08 <sevSeg_Init+0x220>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	001a      	movs	r2, r3
 800196a:	f000 fe72 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 800196e:	4b65      	ldr	r3, [pc, #404]	@ (8001b04 <sevSeg_Init+0x21c>)
 8001970:	6918      	ldr	r0, [r3, #16]
 8001972:	4b63      	ldr	r3, [pc, #396]	@ (8001b00 <sevSeg_Init+0x218>)
 8001974:	8819      	ldrh	r1, [r3, #0]
 8001976:	4b64      	ldr	r3, [pc, #400]	@ (8001b08 <sevSeg_Init+0x220>)
 8001978:	785b      	ldrb	r3, [r3, #1]
 800197a:	001a      	movs	r2, r3
 800197c:	f000 fe69 	bl	8002652 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001980:	4b60      	ldr	r3, [pc, #384]	@ (8001b04 <sevSeg_Init+0x21c>)
 8001982:	6898      	ldr	r0, [r3, #8]
 8001984:	4b5c      	ldr	r3, [pc, #368]	@ (8001af8 <sevSeg_Init+0x210>)
 8001986:	8819      	ldrh	r1, [r3, #0]
 8001988:	4b5f      	ldr	r3, [pc, #380]	@ (8001b08 <sevSeg_Init+0x220>)
 800198a:	785b      	ldrb	r3, [r3, #1]
 800198c:	001a      	movs	r2, r3
 800198e:	f000 fe60 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001992:	4b5c      	ldr	r3, [pc, #368]	@ (8001b04 <sevSeg_Init+0x21c>)
 8001994:	6898      	ldr	r0, [r3, #8]
 8001996:	4b58      	ldr	r3, [pc, #352]	@ (8001af8 <sevSeg_Init+0x210>)
 8001998:	8819      	ldrh	r1, [r3, #0]
 800199a:	4b5b      	ldr	r3, [pc, #364]	@ (8001b08 <sevSeg_Init+0x220>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	001a      	movs	r2, r3
 80019a0:	f000 fe57 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 80019a4:	4b57      	ldr	r3, [pc, #348]	@ (8001b04 <sevSeg_Init+0x21c>)
 80019a6:	68d8      	ldr	r0, [r3, #12]
 80019a8:	4b54      	ldr	r3, [pc, #336]	@ (8001afc <sevSeg_Init+0x214>)
 80019aa:	8819      	ldrh	r1, [r3, #0]
 80019ac:	4b56      	ldr	r3, [pc, #344]	@ (8001b08 <sevSeg_Init+0x220>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	001a      	movs	r2, r3
 80019b2:	f000 fe4e 	bl	8002652 <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(htim_PWM, tim_PWM_CHANNEL, 50);
 80019b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80019b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019ba:	2232      	movs	r2, #50	@ 0x32
 80019bc:	0018      	movs	r0, r3
 80019be:	f000 f959 	bl	8001c74 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 80019c2:	2308      	movs	r3, #8
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	4a51      	ldr	r2, [pc, #324]	@ (8001b0c <sevSeg_Init+0x224>)
 80019c8:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e038      	b.n	8001a42 <sevSeg_Init+0x15a>

		sendByte = hofSymb[i];
 80019d0:	231b      	movs	r3, #27
 80019d2:	18fb      	adds	r3, r7, r3
 80019d4:	2208      	movs	r2, #8
 80019d6:	18b9      	adds	r1, r7, r2
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	188a      	adds	r2, r1, r2
 80019dc:	7812      	ldrb	r2, [r2, #0]
 80019de:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	e027      	b.n	8001a36 <sevSeg_Init+0x14e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 80019e6:	4b47      	ldr	r3, [pc, #284]	@ (8001b04 <sevSeg_Init+0x21c>)
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	4b41      	ldr	r3, [pc, #260]	@ (8001af0 <sevSeg_Init+0x208>)
 80019ec:	8819      	ldrh	r1, [r3, #0]
 80019ee:	241b      	movs	r4, #27
 80019f0:	193b      	adds	r3, r7, r4
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2201      	movs	r2, #1
 80019f6:	4013      	ands	r3, r2
 80019f8:	4a43      	ldr	r2, [pc, #268]	@ (8001b08 <sevSeg_Init+0x220>)
 80019fa:	5cd3      	ldrb	r3, [r2, r3]
 80019fc:	001a      	movs	r2, r3
 80019fe:	f000 fe28 	bl	8002652 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001a02:	4b40      	ldr	r3, [pc, #256]	@ (8001b04 <sevSeg_Init+0x21c>)
 8001a04:	6858      	ldr	r0, [r3, #4]
 8001a06:	4b3b      	ldr	r3, [pc, #236]	@ (8001af4 <sevSeg_Init+0x20c>)
 8001a08:	8819      	ldrh	r1, [r3, #0]
 8001a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b08 <sevSeg_Init+0x220>)
 8001a0c:	785b      	ldrb	r3, [r3, #1]
 8001a0e:	001a      	movs	r2, r3
 8001a10:	f000 fe1f 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001a14:	4b3b      	ldr	r3, [pc, #236]	@ (8001b04 <sevSeg_Init+0x21c>)
 8001a16:	6858      	ldr	r0, [r3, #4]
 8001a18:	4b36      	ldr	r3, [pc, #216]	@ (8001af4 <sevSeg_Init+0x20c>)
 8001a1a:	8819      	ldrh	r1, [r3, #0]
 8001a1c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b08 <sevSeg_Init+0x220>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	001a      	movs	r2, r3
 8001a22:	f000 fe16 	bl	8002652 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001a26:	193b      	adds	r3, r7, r4
 8001a28:	193a      	adds	r2, r7, r4
 8001a2a:	7812      	ldrb	r2, [r2, #0]
 8001a2c:	0852      	lsrs	r2, r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	3301      	adds	r3, #1
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2b07      	cmp	r3, #7
 8001a3a:	ddd4      	ble.n	80019e6 <sevSeg_Init+0xfe>
	for(int i = 0; i <= 3; i++) {
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	ddc3      	ble.n	80019d0 <sevSeg_Init+0xe8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001a48:	4b2e      	ldr	r3, [pc, #184]	@ (8001b04 <sevSeg_Init+0x21c>)
 8001a4a:	6898      	ldr	r0, [r3, #8]
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001af8 <sevSeg_Init+0x210>)
 8001a4e:	8819      	ldrh	r1, [r3, #0]
 8001a50:	4b2d      	ldr	r3, [pc, #180]	@ (8001b08 <sevSeg_Init+0x220>)
 8001a52:	785b      	ldrb	r3, [r3, #1]
 8001a54:	001a      	movs	r2, r3
 8001a56:	f000 fdfc 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b04 <sevSeg_Init+0x21c>)
 8001a5c:	6898      	ldr	r0, [r3, #8]
 8001a5e:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <sevSeg_Init+0x210>)
 8001a60:	8819      	ldrh	r1, [r3, #0]
 8001a62:	4b29      	ldr	r3, [pc, #164]	@ (8001b08 <sevSeg_Init+0x220>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	001a      	movs	r2, r3
 8001a68:	f000 fdf3 	bl	8002652 <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8001a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f003 faa6 	bl	8004fc0 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8001a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a76:	0018      	movs	r0, r3
 8001a78:	f003 fa56 	bl	8004f28 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8001a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a82:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8001a84:	46c0      	nop			@ (mov r8, r8)
 8001a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	1ad2      	subs	r2, r2, r3
 8001a90:	2380      	movs	r3, #128	@ 0x80
 8001a92:	01db      	lsls	r3, r3, #7
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d3f6      	bcc.n	8001a86 <sevSeg_Init+0x19e>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8001a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f003 fa90 	bl	8004fc0 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001aa0:	4b18      	ldr	r3, [pc, #96]	@ (8001b04 <sevSeg_Init+0x21c>)
 8001aa2:	6918      	ldr	r0, [r3, #16]
 8001aa4:	4b16      	ldr	r3, [pc, #88]	@ (8001b00 <sevSeg_Init+0x218>)
 8001aa6:	8819      	ldrh	r1, [r3, #0]
 8001aa8:	4b17      	ldr	r3, [pc, #92]	@ (8001b08 <sevSeg_Init+0x220>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	001a      	movs	r2, r3
 8001aae:	f000 fdd0 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001ab2:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <sevSeg_Init+0x21c>)
 8001ab4:	6918      	ldr	r0, [r3, #16]
 8001ab6:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <sevSeg_Init+0x218>)
 8001ab8:	8819      	ldrh	r1, [r3, #0]
 8001aba:	4b13      	ldr	r3, [pc, #76]	@ (8001b08 <sevSeg_Init+0x220>)
 8001abc:	785b      	ldrb	r3, [r3, #1]
 8001abe:	001a      	movs	r2, r3
 8001ac0:	f000 fdc7 	bl	8002652 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b04 <sevSeg_Init+0x21c>)
 8001ac6:	6898      	ldr	r0, [r3, #8]
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8001af8 <sevSeg_Init+0x210>)
 8001aca:	8819      	ldrh	r1, [r3, #0]
 8001acc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <sevSeg_Init+0x220>)
 8001ace:	785b      	ldrb	r3, [r3, #1]
 8001ad0:	001a      	movs	r2, r3
 8001ad2:	f000 fdbe 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b04 <sevSeg_Init+0x21c>)
 8001ad8:	6898      	ldr	r0, [r3, #8]
 8001ada:	4b07      	ldr	r3, [pc, #28]	@ (8001af8 <sevSeg_Init+0x210>)
 8001adc:	8819      	ldrh	r1, [r3, #0]
 8001ade:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <sevSeg_Init+0x220>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	001a      	movs	r2, r3
 8001ae4:	f000 fdb5 	bl	8002652 <HAL_GPIO_WritePin>

}
 8001ae8:	46c0      	nop			@ (mov r8, r8)
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b008      	add	sp, #32
 8001aee:	bdb0      	pop	{r4, r5, r7, pc}
 8001af0:	200001d8 	.word	0x200001d8
 8001af4:	200001da 	.word	0x200001da
 8001af8:	200001dc 	.word	0x200001dc
 8001afc:	200001de 	.word	0x200001de
 8001b00:	200001e0 	.word	0x200001e0
 8001b04:	20000038 	.word	0x20000038
 8001b08:	2000004c 	.word	0x2000004c
 8001b0c:	471d3700 	.word	0x471d3700

08001b10 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b087      	sub	sp, #28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	210a      	movs	r1, #10
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f7fe faf0 	bl	8000104 <__udivsi3>
 8001b24:	0003      	movs	r3, r0
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	2408      	movs	r4, #8
 8001b2a:	193b      	adds	r3, r7, r4
 8001b2c:	701a      	strb	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	210a      	movs	r1, #10
 8001b34:	0018      	movs	r0, r3
 8001b36:	f7fe fb6b 	bl	8000210 <__aeabi_uidivmod>
 8001b3a:	000b      	movs	r3, r1
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	193b      	adds	r3, r7, r4
 8001b40:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001b46:	210a      	movs	r1, #10
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f7fe fadb 	bl	8000104 <__udivsi3>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	193b      	adds	r3, r7, r4
 8001b54:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001b5a:	210a      	movs	r1, #10
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f7fe fb57 	bl	8000210 <__aeabi_uidivmod>
 8001b62:	000b      	movs	r3, r1
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	193b      	adds	r3, r7, r4
 8001b68:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 8001b6a:	2116      	movs	r1, #22
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	78db      	ldrb	r3, [r3, #3]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d102      	bne.n	8001b80 <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 8001b7a:	187b      	adds	r3, r7, r1
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	e04f      	b.n	8001c26 <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 8001b86:	2308      	movs	r3, #8
 8001b88:	18fa      	adds	r2, r7, r3
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	18d3      	adds	r3, r2, r3
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	0019      	movs	r1, r3
 8001b92:	2417      	movs	r4, #23
 8001b94:	193b      	adds	r3, r7, r4
 8001b96:	4a30      	ldr	r2, [pc, #192]	@ (8001c58 <sevSeg_updateDigits+0x148>)
 8001b98:	5c52      	ldrb	r2, [r2, r1]
 8001b9a:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d110      	bne.n	8001bc4 <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	210a      	movs	r1, #10
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f7fe faab 	bl	8000104 <__udivsi3>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	001a      	movs	r2, r3
 8001bb4:	2316      	movs	r3, #22
 8001bb6:	18fb      	adds	r3, r7, r3
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	18d2      	adds	r2, r2, r3
 8001bbc:	193b      	adds	r3, r7, r4
 8001bbe:	4927      	ldr	r1, [pc, #156]	@ (8001c5c <sevSeg_updateDigits+0x14c>)
 8001bc0:	5c8a      	ldrb	r2, [r1, r2]
 8001bc2:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	e027      	b.n	8001c1a <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001bca:	4b25      	ldr	r3, [pc, #148]	@ (8001c60 <sevSeg_updateDigits+0x150>)
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	4b25      	ldr	r3, [pc, #148]	@ (8001c64 <sevSeg_updateDigits+0x154>)
 8001bd0:	8819      	ldrh	r1, [r3, #0]
 8001bd2:	2417      	movs	r4, #23
 8001bd4:	193b      	adds	r3, r7, r4
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4013      	ands	r3, r2
 8001bdc:	4a22      	ldr	r2, [pc, #136]	@ (8001c68 <sevSeg_updateDigits+0x158>)
 8001bde:	5cd3      	ldrb	r3, [r2, r3]
 8001be0:	001a      	movs	r2, r3
 8001be2:	f000 fd36 	bl	8002652 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001be6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c60 <sevSeg_updateDigits+0x150>)
 8001be8:	6858      	ldr	r0, [r3, #4]
 8001bea:	4b20      	ldr	r3, [pc, #128]	@ (8001c6c <sevSeg_updateDigits+0x15c>)
 8001bec:	8819      	ldrh	r1, [r3, #0]
 8001bee:	4b1e      	ldr	r3, [pc, #120]	@ (8001c68 <sevSeg_updateDigits+0x158>)
 8001bf0:	785b      	ldrb	r3, [r3, #1]
 8001bf2:	001a      	movs	r2, r3
 8001bf4:	f000 fd2d 	bl	8002652 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001bf8:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <sevSeg_updateDigits+0x150>)
 8001bfa:	6858      	ldr	r0, [r3, #4]
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c6c <sevSeg_updateDigits+0x15c>)
 8001bfe:	8819      	ldrh	r1, [r3, #0]
 8001c00:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <sevSeg_updateDigits+0x158>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	001a      	movs	r2, r3
 8001c06:	f000 fd24 	bl	8002652 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001c0a:	193b      	adds	r3, r7, r4
 8001c0c:	193a      	adds	r2, r7, r4
 8001c0e:	7812      	ldrb	r2, [r2, #0]
 8001c10:	0852      	lsrs	r2, r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3301      	adds	r3, #1
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2b07      	cmp	r3, #7
 8001c1e:	ddd4      	ble.n	8001bca <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	3301      	adds	r3, #1
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	ddac      	ble.n	8001b86 <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <sevSeg_updateDigits+0x150>)
 8001c2e:	6898      	ldr	r0, [r3, #8]
 8001c30:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <sevSeg_updateDigits+0x160>)
 8001c32:	8819      	ldrh	r1, [r3, #0]
 8001c34:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <sevSeg_updateDigits+0x158>)
 8001c36:	785b      	ldrb	r3, [r3, #1]
 8001c38:	001a      	movs	r2, r3
 8001c3a:	f000 fd0a 	bl	8002652 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001c3e:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <sevSeg_updateDigits+0x150>)
 8001c40:	6898      	ldr	r0, [r3, #8]
 8001c42:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <sevSeg_updateDigits+0x160>)
 8001c44:	8819      	ldrh	r1, [r3, #0]
 8001c46:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <sevSeg_updateDigits+0x158>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	001a      	movs	r2, r3
 8001c4c:	f000 fd01 	bl	8002652 <HAL_GPIO_WritePin>

	return;
 8001c50:	46c0      	nop			@ (mov r8, r8)

}
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b007      	add	sp, #28
 8001c56:	bd90      	pop	{r4, r7, pc}
 8001c58:	08005c78 	.word	0x08005c78
 8001c5c:	08005c84 	.word	0x08005c84
 8001c60:	20000038 	.word	0x20000038
 8001c64:	200001d8 	.word	0x200001d8
 8001c68:	2000004c 	.word	0x2000004c
 8001c6c:	200001da 	.word	0x200001da
 8001c70:	200001dc 	.word	0x200001dc

08001c74 <sevSeg_setIntensity>:

void sevSeg_setIntensity(TIM_HandleTypeDef *htim_PWM, uint32_t tim_PWM_CHANNEL, uint16_t dutyCycle) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	1dbb      	adds	r3, r7, #6
 8001c80:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(htim_PWM, tim_PWM_CHANNEL, dutyCycle);
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d105      	bne.n	8001c94 <sevSeg_setIntensity+0x20>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	1dba      	adds	r2, r7, #6
 8001c8e:	8812      	ldrh	r2, [r2, #0]
 8001c90:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c92:	e028      	b.n	8001ce6 <sevSeg_setIntensity+0x72>
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d105      	bne.n	8001ca6 <sevSeg_setIntensity+0x32>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	1dbb      	adds	r3, r7, #6
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	6393      	str	r3, [r2, #56]	@ 0x38
 8001ca4:	e01f      	b.n	8001ce6 <sevSeg_setIntensity+0x72>
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d105      	bne.n	8001cb8 <sevSeg_setIntensity+0x44>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	1dbb      	adds	r3, r7, #6
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001cb6:	e016      	b.n	8001ce6 <sevSeg_setIntensity+0x72>
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b0c      	cmp	r3, #12
 8001cbc:	d105      	bne.n	8001cca <sevSeg_setIntensity+0x56>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	1dbb      	adds	r3, r7, #6
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc8:	e00d      	b.n	8001ce6 <sevSeg_setIntensity+0x72>
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b10      	cmp	r3, #16
 8001cce:	d105      	bne.n	8001cdc <sevSeg_setIntensity+0x68>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	1dbb      	adds	r3, r7, #6
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cda:	e004      	b.n	8001ce6 <sevSeg_setIntensity+0x72>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	1dbb      	adds	r3, r7, #6
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(htim_PWM, tim_PWM_CHANNEL);
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	0011      	movs	r1, r2
 8001cec:	0018      	movs	r0, r3
 8001cee:	f003 f9e5 	bl	80050bc <HAL_TIM_PWM_Start>

}
 8001cf2:	46c0      	nop			@ (mov r8, r8)
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b004      	add	sp, #16
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <HAL_MspInit+0x54>)
 8001d04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d06:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <HAL_MspInit+0x54>)
 8001d08:	2101      	movs	r1, #1
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d0e:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <HAL_MspInit+0x54>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	2201      	movs	r2, #1
 8001d14:	4013      	ands	r3, r2
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d50 <HAL_MspInit+0x54>)
 8001d1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <HAL_MspInit+0x54>)
 8001d20:	2180      	movs	r1, #128	@ 0x80
 8001d22:	0549      	lsls	r1, r1, #21
 8001d24:	430a      	orrs	r2, r1
 8001d26:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d28:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <HAL_MspInit+0x54>)
 8001d2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	055b      	lsls	r3, r3, #21
 8001d30:	4013      	ands	r3, r2
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2004      	movs	r0, #4
 8001d3c:	f000 fad6 	bl	80022ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001d40:	2004      	movs	r0, #4
 8001d42:	f000 fae8 	bl	8002316 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d46:	46c0      	nop			@ (mov r8, r8)
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b002      	add	sp, #8
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			@ (mov r8, r8)
 8001d50:	40021000 	.word	0x40021000

08001d54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d54:	b590      	push	{r4, r7, lr}
 8001d56:	b095      	sub	sp, #84	@ 0x54
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	233c      	movs	r3, #60	@ 0x3c
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	0018      	movs	r0, r3
 8001d62:	2314      	movs	r3, #20
 8001d64:	001a      	movs	r2, r3
 8001d66:	2100      	movs	r1, #0
 8001d68:	f003 ff32 	bl	8005bd0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d6c:	2414      	movs	r4, #20
 8001d6e:	193b      	adds	r3, r7, r4
 8001d70:	0018      	movs	r0, r3
 8001d72:	2328      	movs	r3, #40	@ 0x28
 8001d74:	001a      	movs	r2, r3
 8001d76:	2100      	movs	r1, #0
 8001d78:	f003 ff2a 	bl	8005bd0 <memset>
  if(hi2c->Instance==I2C1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a22      	ldr	r2, [pc, #136]	@ (8001e0c <HAL_I2C_MspInit+0xb8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d13d      	bne.n	8001e02 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d86:	193b      	adds	r3, r7, r4
 8001d88:	2220      	movs	r2, #32
 8001d8a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d8c:	193b      	adds	r3, r7, r4
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d92:	193b      	adds	r3, r7, r4
 8001d94:	0018      	movs	r0, r3
 8001d96:	f002 f80f 	bl	8003db8 <HAL_RCCEx_PeriphCLKConfig>
 8001d9a:	1e03      	subs	r3, r0, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d9e:	f7ff fd9d 	bl	80018dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <HAL_I2C_MspInit+0xbc>)
 8001da4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001da6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <HAL_I2C_MspInit+0xbc>)
 8001da8:	2102      	movs	r1, #2
 8001daa:	430a      	orrs	r2, r1
 8001dac:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dae:	4b18      	ldr	r3, [pc, #96]	@ (8001e10 <HAL_I2C_MspInit+0xbc>)
 8001db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db2:	2202      	movs	r2, #2
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dba:	213c      	movs	r1, #60	@ 0x3c
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	22c0      	movs	r2, #192	@ 0xc0
 8001dc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	2212      	movs	r2, #18
 8001dc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	187b      	adds	r3, r7, r1
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	187b      	adds	r3, r7, r1
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001dd4:	187b      	adds	r3, r7, r1
 8001dd6:	2206      	movs	r2, #6
 8001dd8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dda:	187b      	adds	r3, r7, r1
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e14 <HAL_I2C_MspInit+0xc0>)
 8001dde:	0019      	movs	r1, r3
 8001de0:	0010      	movs	r0, r2
 8001de2:	f000 fab5 	bl	8002350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001de6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <HAL_I2C_MspInit+0xbc>)
 8001de8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dea:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <HAL_I2C_MspInit+0xbc>)
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0389      	lsls	r1, r1, #14
 8001df0:	430a      	orrs	r2, r1
 8001df2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_I2C_MspInit+0xbc>)
 8001df6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001df8:	2380      	movs	r3, #128	@ 0x80
 8001dfa:	039b      	lsls	r3, r3, #14
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e02:	46c0      	nop			@ (mov r8, r8)
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b015      	add	sp, #84	@ 0x54
 8001e08:	bd90      	pop	{r4, r7, pc}
 8001e0a:	46c0      	nop			@ (mov r8, r8)
 8001e0c:	40005400 	.word	0x40005400
 8001e10:	40021000 	.word	0x40021000
 8001e14:	50000400 	.word	0x50000400

08001e18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b08f      	sub	sp, #60	@ 0x3c
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e20:	2410      	movs	r4, #16
 8001e22:	193b      	adds	r3, r7, r4
 8001e24:	0018      	movs	r0, r3
 8001e26:	2328      	movs	r3, #40	@ 0x28
 8001e28:	001a      	movs	r2, r3
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	f003 fed0 	bl	8005bd0 <memset>
  if(hrtc->Instance==RTC)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a19      	ldr	r2, [pc, #100]	@ (8001e9c <HAL_RTC_MspInit+0x84>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d12c      	bne.n	8001e94 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e3a:	193b      	adds	r3, r7, r4
 8001e3c:	2280      	movs	r2, #128	@ 0x80
 8001e3e:	0292      	lsls	r2, r2, #10
 8001e40:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001e42:	193b      	adds	r3, r7, r4
 8001e44:	2280      	movs	r2, #128	@ 0x80
 8001e46:	0052      	lsls	r2, r2, #1
 8001e48:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e4a:	193b      	adds	r3, r7, r4
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f001 ffb3 	bl	8003db8 <HAL_RCCEx_PeriphCLKConfig>
 8001e52:	1e03      	subs	r3, r0, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001e56:	f7ff fd41 	bl	80018dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <HAL_RTC_MspInit+0x88>)
 8001e5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <HAL_RTC_MspInit+0x88>)
 8001e60:	2180      	movs	r1, #128	@ 0x80
 8001e62:	0209      	lsls	r1, r1, #8
 8001e64:	430a      	orrs	r2, r1
 8001e66:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001e68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea0 <HAL_RTC_MspInit+0x88>)
 8001e6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea0 <HAL_RTC_MspInit+0x88>)
 8001e6e:	2180      	movs	r1, #128	@ 0x80
 8001e70:	00c9      	lsls	r1, r1, #3
 8001e72:	430a      	orrs	r2, r1
 8001e74:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <HAL_RTC_MspInit+0x88>)
 8001e78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e7a:	2380      	movs	r3, #128	@ 0x80
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4013      	ands	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001e84:	2200      	movs	r2, #0
 8001e86:	2100      	movs	r1, #0
 8001e88:	2002      	movs	r0, #2
 8001e8a:	f000 fa2f 	bl	80022ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001e8e:	2002      	movs	r0, #2
 8001e90:	f000 fa41 	bl	8002316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e94:	46c0      	nop			@ (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b00f      	add	sp, #60	@ 0x3c
 8001e9a:	bd90      	pop	{r4, r7, pc}
 8001e9c:	40002800 	.word	0x40002800
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	05db      	lsls	r3, r3, #23
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eb8:	4b07      	ldr	r3, [pc, #28]	@ (8001ed8 <HAL_TIM_PWM_MspInit+0x34>)
 8001eba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ebc:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <HAL_TIM_PWM_MspInit+0x34>)
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ec4:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <HAL_TIM_PWM_MspInit+0x34>)
 8001ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec8:	2201      	movs	r2, #1
 8001eca:	4013      	ands	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ed0:	46c0      	nop			@ (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b004      	add	sp, #16
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000

08001edc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8001f14 <HAL_TIM_Base_MspInit+0x38>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d10d      	bne.n	8001f0a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001eee:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <HAL_TIM_Base_MspInit+0x3c>)
 8001ef0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_TIM_Base_MspInit+0x3c>)
 8001ef4:	2180      	movs	r1, #128	@ 0x80
 8001ef6:	0209      	lsls	r1, r1, #8
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	641a      	str	r2, [r3, #64]	@ 0x40
 8001efc:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <HAL_TIM_Base_MspInit+0x3c>)
 8001efe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f00:	2380      	movs	r3, #128	@ 0x80
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	4013      	ands	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001f0a:	46c0      	nop			@ (mov r8, r8)
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	b004      	add	sp, #16
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	46c0      	nop			@ (mov r8, r8)
 8001f14:	40002000 	.word	0x40002000
 8001f18:	40021000 	.word	0x40021000

08001f1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b089      	sub	sp, #36	@ 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	240c      	movs	r4, #12
 8001f26:	193b      	adds	r3, r7, r4
 8001f28:	0018      	movs	r0, r3
 8001f2a:	2314      	movs	r3, #20
 8001f2c:	001a      	movs	r2, r3
 8001f2e:	2100      	movs	r1, #0
 8001f30:	f003 fe4e 	bl	8005bd0 <memset>
  if(htim->Instance==TIM2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	2380      	movs	r3, #128	@ 0x80
 8001f3a:	05db      	lsls	r3, r3, #23
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d121      	bne.n	8001f84 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f40:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <HAL_TIM_MspPostInit+0x70>)
 8001f42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f44:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <HAL_TIM_MspPostInit+0x70>)
 8001f46:	2104      	movs	r1, #4
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <HAL_TIM_MspPostInit+0x70>)
 8001f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f50:	2204      	movs	r2, #4
 8001f52:	4013      	ands	r3, r2
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 8001f58:	0021      	movs	r1, r4
 8001f5a:	187b      	adds	r3, r7, r1
 8001f5c:	2240      	movs	r2, #64	@ 0x40
 8001f5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	187b      	adds	r3, r7, r1
 8001f62:	2202      	movs	r2, #2
 8001f64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	187b      	adds	r3, r7, r1
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	187b      	adds	r3, r7, r1
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001f72:	187b      	adds	r3, r7, r1
 8001f74:	2202      	movs	r2, #2
 8001f76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 8001f78:	187b      	adds	r3, r7, r1
 8001f7a:	4a05      	ldr	r2, [pc, #20]	@ (8001f90 <HAL_TIM_MspPostInit+0x74>)
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	0010      	movs	r0, r2
 8001f80:	f000 f9e6 	bl	8002350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f84:	46c0      	nop			@ (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b009      	add	sp, #36	@ 0x24
 8001f8a:	bd90      	pop	{r4, r7, pc}
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	50000800 	.word	0x50000800

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f98:	46c0      	nop			@ (mov r8, r8)
 8001f9a:	e7fd      	b.n	8001f98 <NMI_Handler+0x4>

08001f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa0:	46c0      	nop			@ (mov r8, r8)
 8001fa2:	e7fd      	b.n	8001fa0 <HardFault_Handler+0x4>

08001fa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001fa8:	46c0      	nop			@ (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb2:	46c0      	nop			@ (mov r8, r8)
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fbc:	f000 f8ce 	bl	800215c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc0:	46c0      	nop			@ (mov r8, r8)
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001fcc:	4b03      	ldr	r3, [pc, #12]	@ (8001fdc <RTC_TAMP_IRQHandler+0x14>)
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f002 fd70 	bl	8004ab4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8001fd4:	46c0      	nop			@ (mov r8, r8)
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	46c0      	nop			@ (mov r8, r8)
 8001fdc:	200000d0 	.word	0x200000d0

08001fe0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001fe4:	46c0      	nop			@ (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f000 fb68 	bl	80026c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 8001ff4:	2002      	movs	r0, #2
 8001ff6:	f000 fb65 	bl	80026c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001ffa:	46c0      	nop			@ (mov r8, r8)
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 8002004:	2004      	movs	r0, #4
 8002006:	f000 fb5d 	bl	80026c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 800200a:	2008      	movs	r0, #8
 800200c:	f000 fb5a 	bl	80026c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002010:	46c0      	nop			@ (mov r8, r8)
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 800201a:	2380      	movs	r3, #128	@ 0x80
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	0018      	movs	r0, r3
 8002020:	f000 fb50 	bl	80026c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002024:	46c0      	nop			@ (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002034:	480d      	ldr	r0, [pc, #52]	@ (800206c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002036:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002038:	f7ff fff7 	bl	800202a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800203c:	480c      	ldr	r0, [pc, #48]	@ (8002070 <LoopForever+0x6>)
  ldr r1, =_edata
 800203e:	490d      	ldr	r1, [pc, #52]	@ (8002074 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002040:	4a0d      	ldr	r2, [pc, #52]	@ (8002078 <LoopForever+0xe>)
  movs r3, #0
 8002042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002044:	e002      	b.n	800204c <LoopCopyDataInit>

08002046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204a:	3304      	adds	r3, #4

0800204c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800204c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002050:	d3f9      	bcc.n	8002046 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002052:	4a0a      	ldr	r2, [pc, #40]	@ (800207c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002054:	4c0a      	ldr	r4, [pc, #40]	@ (8002080 <LoopForever+0x16>)
  movs r3, #0
 8002056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002058:	e001      	b.n	800205e <LoopFillZerobss>

0800205a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800205c:	3204      	adds	r2, #4

0800205e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002060:	d3fb      	bcc.n	800205a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002062:	f003 fdbd 	bl	8005be0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002066:	f7fe fccb 	bl	8000a00 <main>

0800206a <LoopForever>:

LoopForever:
  b LoopForever
 800206a:	e7fe      	b.n	800206a <LoopForever>
  ldr   r0, =_estack
 800206c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002074:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002078:	08005d24 	.word	0x08005d24
  ldr r2, =_sbss
 800207c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002080:	200001e8 	.word	0x200001e8

08002084 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002084:	e7fe      	b.n	8002084 <ADC1_IRQHandler>
	...

08002088 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800208e:	1dfb      	adds	r3, r7, #7
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002094:	4b0b      	ldr	r3, [pc, #44]	@ (80020c4 <HAL_Init+0x3c>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <HAL_Init+0x3c>)
 800209a:	2180      	movs	r1, #128	@ 0x80
 800209c:	0049      	lsls	r1, r1, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020a2:	2003      	movs	r0, #3
 80020a4:	f000 f810 	bl	80020c8 <HAL_InitTick>
 80020a8:	1e03      	subs	r3, r0, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80020ac:	1dfb      	adds	r3, r7, #7
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
 80020b2:	e001      	b.n	80020b8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80020b4:	f7ff fe22 	bl	8001cfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020b8:	1dfb      	adds	r3, r7, #7
 80020ba:	781b      	ldrb	r3, [r3, #0]
}
 80020bc:	0018      	movs	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	b002      	add	sp, #8
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40022000 	.word	0x40022000

080020c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c8:	b590      	push	{r4, r7, lr}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020d0:	230f      	movs	r3, #15
 80020d2:	18fb      	adds	r3, r7, r3
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80020d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002150 <HAL_InitTick+0x88>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d02b      	beq.n	8002138 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80020e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002154 <HAL_InitTick+0x8c>)
 80020e2:	681c      	ldr	r4, [r3, #0]
 80020e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002150 <HAL_InitTick+0x88>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	0019      	movs	r1, r3
 80020ea:	23fa      	movs	r3, #250	@ 0xfa
 80020ec:	0098      	lsls	r0, r3, #2
 80020ee:	f7fe f809 	bl	8000104 <__udivsi3>
 80020f2:	0003      	movs	r3, r0
 80020f4:	0019      	movs	r1, r3
 80020f6:	0020      	movs	r0, r4
 80020f8:	f7fe f804 	bl	8000104 <__udivsi3>
 80020fc:	0003      	movs	r3, r0
 80020fe:	0018      	movs	r0, r3
 8002100:	f000 f919 	bl	8002336 <HAL_SYSTICK_Config>
 8002104:	1e03      	subs	r3, r0, #0
 8002106:	d112      	bne.n	800212e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d80a      	bhi.n	8002124 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	2301      	movs	r3, #1
 8002112:	425b      	negs	r3, r3
 8002114:	2200      	movs	r2, #0
 8002116:	0018      	movs	r0, r3
 8002118:	f000 f8e8 	bl	80022ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800211c:	4b0e      	ldr	r3, [pc, #56]	@ (8002158 <HAL_InitTick+0x90>)
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	e00d      	b.n	8002140 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002124:	230f      	movs	r3, #15
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
 800212c:	e008      	b.n	8002140 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800212e:	230f      	movs	r3, #15
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	e003      	b.n	8002140 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002138:	230f      	movs	r3, #15
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	2201      	movs	r2, #1
 800213e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002140:	230f      	movs	r3, #15
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	781b      	ldrb	r3, [r3, #0]
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b005      	add	sp, #20
 800214c:	bd90      	pop	{r4, r7, pc}
 800214e:	46c0      	nop			@ (mov r8, r8)
 8002150:	20000058 	.word	0x20000058
 8002154:	20000050 	.word	0x20000050
 8002158:	20000054 	.word	0x20000054

0800215c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002160:	4b05      	ldr	r3, [pc, #20]	@ (8002178 <HAL_IncTick+0x1c>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	001a      	movs	r2, r3
 8002166:	4b05      	ldr	r3, [pc, #20]	@ (800217c <HAL_IncTick+0x20>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	18d2      	adds	r2, r2, r3
 800216c:	4b03      	ldr	r3, [pc, #12]	@ (800217c <HAL_IncTick+0x20>)
 800216e:	601a      	str	r2, [r3, #0]
}
 8002170:	46c0      	nop			@ (mov r8, r8)
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	46c0      	nop			@ (mov r8, r8)
 8002178:	20000058 	.word	0x20000058
 800217c:	200001e4 	.word	0x200001e4

08002180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  return uwTick;
 8002184:	4b02      	ldr	r3, [pc, #8]	@ (8002190 <HAL_GetTick+0x10>)
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			@ (mov r8, r8)
 8002190:	200001e4 	.word	0x200001e4

08002194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	0002      	movs	r2, r0
 800219c:	1dfb      	adds	r3, r7, #7
 800219e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021a0:	1dfb      	adds	r3, r7, #7
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80021a6:	d809      	bhi.n	80021bc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a8:	1dfb      	adds	r3, r7, #7
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	001a      	movs	r2, r3
 80021ae:	231f      	movs	r3, #31
 80021b0:	401a      	ands	r2, r3
 80021b2:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <__NVIC_EnableIRQ+0x30>)
 80021b4:	2101      	movs	r1, #1
 80021b6:	4091      	lsls	r1, r2
 80021b8:	000a      	movs	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80021bc:	46c0      	nop			@ (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	b002      	add	sp, #8
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	e000e100 	.word	0xe000e100

080021c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c8:	b590      	push	{r4, r7, lr}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	0002      	movs	r2, r0
 80021d0:	6039      	str	r1, [r7, #0]
 80021d2:	1dfb      	adds	r3, r7, #7
 80021d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021d6:	1dfb      	adds	r3, r7, #7
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b7f      	cmp	r3, #127	@ 0x7f
 80021dc:	d828      	bhi.n	8002230 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021de:	4a2f      	ldr	r2, [pc, #188]	@ (800229c <__NVIC_SetPriority+0xd4>)
 80021e0:	1dfb      	adds	r3, r7, #7
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	b25b      	sxtb	r3, r3
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	33c0      	adds	r3, #192	@ 0xc0
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	589b      	ldr	r3, [r3, r2]
 80021ee:	1dfa      	adds	r2, r7, #7
 80021f0:	7812      	ldrb	r2, [r2, #0]
 80021f2:	0011      	movs	r1, r2
 80021f4:	2203      	movs	r2, #3
 80021f6:	400a      	ands	r2, r1
 80021f8:	00d2      	lsls	r2, r2, #3
 80021fa:	21ff      	movs	r1, #255	@ 0xff
 80021fc:	4091      	lsls	r1, r2
 80021fe:	000a      	movs	r2, r1
 8002200:	43d2      	mvns	r2, r2
 8002202:	401a      	ands	r2, r3
 8002204:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	019b      	lsls	r3, r3, #6
 800220a:	22ff      	movs	r2, #255	@ 0xff
 800220c:	401a      	ands	r2, r3
 800220e:	1dfb      	adds	r3, r7, #7
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	0018      	movs	r0, r3
 8002214:	2303      	movs	r3, #3
 8002216:	4003      	ands	r3, r0
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800221c:	481f      	ldr	r0, [pc, #124]	@ (800229c <__NVIC_SetPriority+0xd4>)
 800221e:	1dfb      	adds	r3, r7, #7
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	b25b      	sxtb	r3, r3
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	430a      	orrs	r2, r1
 8002228:	33c0      	adds	r3, #192	@ 0xc0
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800222e:	e031      	b.n	8002294 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002230:	4a1b      	ldr	r2, [pc, #108]	@ (80022a0 <__NVIC_SetPriority+0xd8>)
 8002232:	1dfb      	adds	r3, r7, #7
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	0019      	movs	r1, r3
 8002238:	230f      	movs	r3, #15
 800223a:	400b      	ands	r3, r1
 800223c:	3b08      	subs	r3, #8
 800223e:	089b      	lsrs	r3, r3, #2
 8002240:	3306      	adds	r3, #6
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	18d3      	adds	r3, r2, r3
 8002246:	3304      	adds	r3, #4
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	1dfa      	adds	r2, r7, #7
 800224c:	7812      	ldrb	r2, [r2, #0]
 800224e:	0011      	movs	r1, r2
 8002250:	2203      	movs	r2, #3
 8002252:	400a      	ands	r2, r1
 8002254:	00d2      	lsls	r2, r2, #3
 8002256:	21ff      	movs	r1, #255	@ 0xff
 8002258:	4091      	lsls	r1, r2
 800225a:	000a      	movs	r2, r1
 800225c:	43d2      	mvns	r2, r2
 800225e:	401a      	ands	r2, r3
 8002260:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	019b      	lsls	r3, r3, #6
 8002266:	22ff      	movs	r2, #255	@ 0xff
 8002268:	401a      	ands	r2, r3
 800226a:	1dfb      	adds	r3, r7, #7
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	0018      	movs	r0, r3
 8002270:	2303      	movs	r3, #3
 8002272:	4003      	ands	r3, r0
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002278:	4809      	ldr	r0, [pc, #36]	@ (80022a0 <__NVIC_SetPriority+0xd8>)
 800227a:	1dfb      	adds	r3, r7, #7
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	001c      	movs	r4, r3
 8002280:	230f      	movs	r3, #15
 8002282:	4023      	ands	r3, r4
 8002284:	3b08      	subs	r3, #8
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	430a      	orrs	r2, r1
 800228a:	3306      	adds	r3, #6
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	18c3      	adds	r3, r0, r3
 8002290:	3304      	adds	r3, #4
 8002292:	601a      	str	r2, [r3, #0]
}
 8002294:	46c0      	nop			@ (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b003      	add	sp, #12
 800229a:	bd90      	pop	{r4, r7, pc}
 800229c:	e000e100 	.word	0xe000e100
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	1e5a      	subs	r2, r3, #1
 80022b0:	2380      	movs	r3, #128	@ 0x80
 80022b2:	045b      	lsls	r3, r3, #17
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d301      	bcc.n	80022bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b8:	2301      	movs	r3, #1
 80022ba:	e010      	b.n	80022de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022bc:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <SysTick_Config+0x44>)
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	3a01      	subs	r2, #1
 80022c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c4:	2301      	movs	r3, #1
 80022c6:	425b      	negs	r3, r3
 80022c8:	2103      	movs	r1, #3
 80022ca:	0018      	movs	r0, r3
 80022cc:	f7ff ff7c 	bl	80021c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d0:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <SysTick_Config+0x44>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d6:	4b04      	ldr	r3, [pc, #16]	@ (80022e8 <SysTick_Config+0x44>)
 80022d8:	2207      	movs	r2, #7
 80022da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022dc:	2300      	movs	r3, #0
}
 80022de:	0018      	movs	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b002      	add	sp, #8
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	46c0      	nop			@ (mov r8, r8)
 80022e8:	e000e010 	.word	0xe000e010

080022ec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	210f      	movs	r1, #15
 80022f8:	187b      	adds	r3, r7, r1
 80022fa:	1c02      	adds	r2, r0, #0
 80022fc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	187b      	adds	r3, r7, r1
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	b25b      	sxtb	r3, r3
 8002306:	0011      	movs	r1, r2
 8002308:	0018      	movs	r0, r3
 800230a:	f7ff ff5d 	bl	80021c8 <__NVIC_SetPriority>
}
 800230e:	46c0      	nop			@ (mov r8, r8)
 8002310:	46bd      	mov	sp, r7
 8002312:	b004      	add	sp, #16
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	0002      	movs	r2, r0
 800231e:	1dfb      	adds	r3, r7, #7
 8002320:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002322:	1dfb      	adds	r3, r7, #7
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	b25b      	sxtb	r3, r3
 8002328:	0018      	movs	r0, r3
 800232a:	f7ff ff33 	bl	8002194 <__NVIC_EnableIRQ>
}
 800232e:	46c0      	nop			@ (mov r8, r8)
 8002330:	46bd      	mov	sp, r7
 8002332:	b002      	add	sp, #8
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	0018      	movs	r0, r3
 8002342:	f7ff ffaf 	bl	80022a4 <SysTick_Config>
 8002346:	0003      	movs	r3, r0
}
 8002348:	0018      	movs	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	b002      	add	sp, #8
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800235e:	e147      	b.n	80025f0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2101      	movs	r1, #1
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4091      	lsls	r1, r2
 800236a:	000a      	movs	r2, r1
 800236c:	4013      	ands	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d100      	bne.n	8002378 <HAL_GPIO_Init+0x28>
 8002376:	e138      	b.n	80025ea <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2203      	movs	r2, #3
 800237e:	4013      	ands	r3, r2
 8002380:	2b01      	cmp	r3, #1
 8002382:	d005      	beq.n	8002390 <HAL_GPIO_Init+0x40>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2203      	movs	r2, #3
 800238a:	4013      	ands	r3, r2
 800238c:	2b02      	cmp	r3, #2
 800238e:	d130      	bne.n	80023f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	409a      	lsls	r2, r3
 800239e:	0013      	movs	r3, r2
 80023a0:	43da      	mvns	r2, r3
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	409a      	lsls	r2, r3
 80023b2:	0013      	movs	r3, r2
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023c6:	2201      	movs	r2, #1
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	409a      	lsls	r2, r3
 80023cc:	0013      	movs	r3, r2
 80023ce:	43da      	mvns	r2, r3
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	091b      	lsrs	r3, r3, #4
 80023dc:	2201      	movs	r2, #1
 80023de:	401a      	ands	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
 80023e4:	0013      	movs	r3, r2
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2203      	movs	r2, #3
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d017      	beq.n	800242e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	409a      	lsls	r2, r3
 800240c:	0013      	movs	r3, r2
 800240e:	43da      	mvns	r2, r3
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	409a      	lsls	r2, r3
 8002420:	0013      	movs	r3, r2
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2203      	movs	r2, #3
 8002434:	4013      	ands	r3, r2
 8002436:	2b02      	cmp	r3, #2
 8002438:	d123      	bne.n	8002482 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	08da      	lsrs	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3208      	adds	r2, #8
 8002442:	0092      	lsls	r2, r2, #2
 8002444:	58d3      	ldr	r3, [r2, r3]
 8002446:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2207      	movs	r2, #7
 800244c:	4013      	ands	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	220f      	movs	r2, #15
 8002452:	409a      	lsls	r2, r3
 8002454:	0013      	movs	r3, r2
 8002456:	43da      	mvns	r2, r3
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2107      	movs	r1, #7
 8002466:	400b      	ands	r3, r1
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	409a      	lsls	r2, r3
 800246c:	0013      	movs	r3, r2
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	08da      	lsrs	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3208      	adds	r2, #8
 800247c:	0092      	lsls	r2, r2, #2
 800247e:	6939      	ldr	r1, [r7, #16]
 8002480:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	2203      	movs	r2, #3
 800248e:	409a      	lsls	r2, r3
 8002490:	0013      	movs	r3, r2
 8002492:	43da      	mvns	r2, r3
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2203      	movs	r2, #3
 80024a0:	401a      	ands	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	409a      	lsls	r2, r3
 80024a8:	0013      	movs	r3, r2
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	23c0      	movs	r3, #192	@ 0xc0
 80024bc:	029b      	lsls	r3, r3, #10
 80024be:	4013      	ands	r3, r2
 80024c0:	d100      	bne.n	80024c4 <HAL_GPIO_Init+0x174>
 80024c2:	e092      	b.n	80025ea <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80024c4:	4a50      	ldr	r2, [pc, #320]	@ (8002608 <HAL_GPIO_Init+0x2b8>)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3318      	adds	r3, #24
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	589b      	ldr	r3, [r3, r2]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2203      	movs	r2, #3
 80024d6:	4013      	ands	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	220f      	movs	r2, #15
 80024dc:	409a      	lsls	r2, r3
 80024de:	0013      	movs	r3, r2
 80024e0:	43da      	mvns	r2, r3
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	23a0      	movs	r3, #160	@ 0xa0
 80024ec:	05db      	lsls	r3, r3, #23
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d013      	beq.n	800251a <HAL_GPIO_Init+0x1ca>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a45      	ldr	r2, [pc, #276]	@ (800260c <HAL_GPIO_Init+0x2bc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00d      	beq.n	8002516 <HAL_GPIO_Init+0x1c6>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a44      	ldr	r2, [pc, #272]	@ (8002610 <HAL_GPIO_Init+0x2c0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d007      	beq.n	8002512 <HAL_GPIO_Init+0x1c2>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a43      	ldr	r2, [pc, #268]	@ (8002614 <HAL_GPIO_Init+0x2c4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d101      	bne.n	800250e <HAL_GPIO_Init+0x1be>
 800250a:	2303      	movs	r3, #3
 800250c:	e006      	b.n	800251c <HAL_GPIO_Init+0x1cc>
 800250e:	2305      	movs	r3, #5
 8002510:	e004      	b.n	800251c <HAL_GPIO_Init+0x1cc>
 8002512:	2302      	movs	r3, #2
 8002514:	e002      	b.n	800251c <HAL_GPIO_Init+0x1cc>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_GPIO_Init+0x1cc>
 800251a:	2300      	movs	r3, #0
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	2103      	movs	r1, #3
 8002520:	400a      	ands	r2, r1
 8002522:	00d2      	lsls	r2, r2, #3
 8002524:	4093      	lsls	r3, r2
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800252c:	4936      	ldr	r1, [pc, #216]	@ (8002608 <HAL_GPIO_Init+0x2b8>)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	089b      	lsrs	r3, r3, #2
 8002532:	3318      	adds	r3, #24
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800253a:	4b33      	ldr	r3, [pc, #204]	@ (8002608 <HAL_GPIO_Init+0x2b8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	43da      	mvns	r2, r3
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	2380      	movs	r3, #128	@ 0x80
 8002550:	035b      	lsls	r3, r3, #13
 8002552:	4013      	ands	r3, r2
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800255e:	4b2a      	ldr	r3, [pc, #168]	@ (8002608 <HAL_GPIO_Init+0x2b8>)
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002564:	4b28      	ldr	r3, [pc, #160]	@ (8002608 <HAL_GPIO_Init+0x2b8>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	43da      	mvns	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	2380      	movs	r3, #128	@ 0x80
 800257a:	039b      	lsls	r3, r3, #14
 800257c:	4013      	ands	r3, r2
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002588:	4b1f      	ldr	r3, [pc, #124]	@ (8002608 <HAL_GPIO_Init+0x2b8>)
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800258e:	4a1e      	ldr	r2, [pc, #120]	@ (8002608 <HAL_GPIO_Init+0x2b8>)
 8002590:	2384      	movs	r3, #132	@ 0x84
 8002592:	58d3      	ldr	r3, [r2, r3]
 8002594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	43da      	mvns	r2, r3
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	2380      	movs	r3, #128	@ 0x80
 80025a6:	029b      	lsls	r3, r3, #10
 80025a8:	4013      	ands	r3, r2
 80025aa:	d003      	beq.n	80025b4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025b4:	4914      	ldr	r1, [pc, #80]	@ (8002608 <HAL_GPIO_Init+0x2b8>)
 80025b6:	2284      	movs	r2, #132	@ 0x84
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80025bc:	4a12      	ldr	r2, [pc, #72]	@ (8002608 <HAL_GPIO_Init+0x2b8>)
 80025be:	2380      	movs	r3, #128	@ 0x80
 80025c0:	58d3      	ldr	r3, [r2, r3]
 80025c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	43da      	mvns	r2, r3
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	2380      	movs	r3, #128	@ 0x80
 80025d4:	025b      	lsls	r3, r3, #9
 80025d6:	4013      	ands	r3, r2
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025e2:	4909      	ldr	r1, [pc, #36]	@ (8002608 <HAL_GPIO_Init+0x2b8>)
 80025e4:	2280      	movs	r2, #128	@ 0x80
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3301      	adds	r3, #1
 80025ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	40da      	lsrs	r2, r3
 80025f8:	1e13      	subs	r3, r2, #0
 80025fa:	d000      	beq.n	80025fe <HAL_GPIO_Init+0x2ae>
 80025fc:	e6b0      	b.n	8002360 <HAL_GPIO_Init+0x10>
  }
}
 80025fe:	46c0      	nop			@ (mov r8, r8)
 8002600:	46c0      	nop			@ (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	b006      	add	sp, #24
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021800 	.word	0x40021800
 800260c:	50000400 	.word	0x50000400
 8002610:	50000800 	.word	0x50000800
 8002614:	50000c00 	.word	0x50000c00

08002618 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	000a      	movs	r2, r1
 8002622:	1cbb      	adds	r3, r7, #2
 8002624:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	1cba      	adds	r2, r7, #2
 800262c:	8812      	ldrh	r2, [r2, #0]
 800262e:	4013      	ands	r3, r2
 8002630:	d004      	beq.n	800263c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002632:	230f      	movs	r3, #15
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	e003      	b.n	8002644 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800263c:	230f      	movs	r3, #15
 800263e:	18fb      	adds	r3, r7, r3
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002644:	230f      	movs	r3, #15
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	781b      	ldrb	r3, [r3, #0]
}
 800264a:	0018      	movs	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	b004      	add	sp, #16
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	0008      	movs	r0, r1
 800265c:	0011      	movs	r1, r2
 800265e:	1cbb      	adds	r3, r7, #2
 8002660:	1c02      	adds	r2, r0, #0
 8002662:	801a      	strh	r2, [r3, #0]
 8002664:	1c7b      	adds	r3, r7, #1
 8002666:	1c0a      	adds	r2, r1, #0
 8002668:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800266a:	1c7b      	adds	r3, r7, #1
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d004      	beq.n	800267c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002672:	1cbb      	adds	r3, r7, #2
 8002674:	881a      	ldrh	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800267a:	e003      	b.n	8002684 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800267c:	1cbb      	adds	r3, r7, #2
 800267e:	881a      	ldrh	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002684:	46c0      	nop			@ (mov r8, r8)
 8002686:	46bd      	mov	sp, r7
 8002688:	b002      	add	sp, #8
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	000a      	movs	r2, r1
 8002696:	1cbb      	adds	r3, r7, #2
 8002698:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026a0:	1cbb      	adds	r3, r7, #2
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4013      	ands	r3, r2
 80026a8:	041a      	lsls	r2, r3, #16
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	1cb9      	adds	r1, r7, #2
 80026b0:	8809      	ldrh	r1, [r1, #0]
 80026b2:	400b      	ands	r3, r1
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	619a      	str	r2, [r3, #24]
}
 80026ba:	46c0      	nop			@ (mov r8, r8)
 80026bc:	46bd      	mov	sp, r7
 80026be:	b004      	add	sp, #16
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	0002      	movs	r2, r0
 80026cc:	1dbb      	adds	r3, r7, #6
 80026ce:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80026d0:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	1dba      	adds	r2, r7, #6
 80026d6:	8812      	ldrh	r2, [r2, #0]
 80026d8:	4013      	ands	r3, r2
 80026da:	d008      	beq.n	80026ee <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80026dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002714 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80026de:	1dba      	adds	r2, r7, #6
 80026e0:	8812      	ldrh	r2, [r2, #0]
 80026e2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80026e4:	1dbb      	adds	r3, r7, #6
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	0018      	movs	r0, r3
 80026ea:	f000 f815 	bl	8002718 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80026ee:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	1dba      	adds	r2, r7, #6
 80026f4:	8812      	ldrh	r2, [r2, #0]
 80026f6:	4013      	ands	r3, r2
 80026f8:	d008      	beq.n	800270c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80026fa:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80026fc:	1dba      	adds	r2, r7, #6
 80026fe:	8812      	ldrh	r2, [r2, #0]
 8002700:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002702:	1dbb      	adds	r3, r7, #6
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	0018      	movs	r0, r3
 8002708:	f7fe fe18 	bl	800133c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800270c:	46c0      	nop			@ (mov r8, r8)
 800270e:	46bd      	mov	sp, r7
 8002710:	b002      	add	sp, #8
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021800 	.word	0x40021800

08002718 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	0002      	movs	r2, r0
 8002720:	1dbb      	adds	r3, r7, #6
 8002722:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002724:	46c0      	nop			@ (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	b002      	add	sp, #8
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e08f      	b.n	800285e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2241      	movs	r2, #65	@ 0x41
 8002742:	5c9b      	ldrb	r3, [r3, r2]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d107      	bne.n	800275a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2240      	movs	r2, #64	@ 0x40
 800274e:	2100      	movs	r1, #0
 8002750:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	0018      	movs	r0, r3
 8002756:	f7ff fafd 	bl	8001d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2241      	movs	r2, #65	@ 0x41
 800275e:	2124      	movs	r1, #36	@ 0x24
 8002760:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2101      	movs	r1, #1
 800276e:	438a      	bics	r2, r1
 8002770:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	493b      	ldr	r1, [pc, #236]	@ (8002868 <HAL_I2C_Init+0x13c>)
 800277c:	400a      	ands	r2, r1
 800277e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4938      	ldr	r1, [pc, #224]	@ (800286c <HAL_I2C_Init+0x140>)
 800278c:	400a      	ands	r2, r1
 800278e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d108      	bne.n	80027aa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2180      	movs	r1, #128	@ 0x80
 80027a2:	0209      	lsls	r1, r1, #8
 80027a4:	430a      	orrs	r2, r1
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	e007      	b.n	80027ba <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2184      	movs	r1, #132	@ 0x84
 80027b4:	0209      	lsls	r1, r1, #8
 80027b6:	430a      	orrs	r2, r1
 80027b8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d109      	bne.n	80027d6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2180      	movs	r1, #128	@ 0x80
 80027ce:	0109      	lsls	r1, r1, #4
 80027d0:	430a      	orrs	r2, r1
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	e007      	b.n	80027e6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4923      	ldr	r1, [pc, #140]	@ (8002870 <HAL_I2C_Init+0x144>)
 80027e2:	400a      	ands	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4920      	ldr	r1, [pc, #128]	@ (8002874 <HAL_I2C_Init+0x148>)
 80027f2:	430a      	orrs	r2, r1
 80027f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	491a      	ldr	r1, [pc, #104]	@ (800286c <HAL_I2C_Init+0x140>)
 8002802:	400a      	ands	r2, r1
 8002804:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	431a      	orrs	r2, r3
 8002810:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69d9      	ldr	r1, [r3, #28]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1a      	ldr	r2, [r3, #32]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2101      	movs	r1, #1
 800283c:	430a      	orrs	r2, r1
 800283e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2241      	movs	r2, #65	@ 0x41
 800284a:	2120      	movs	r1, #32
 800284c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2242      	movs	r2, #66	@ 0x42
 8002858:	2100      	movs	r1, #0
 800285a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	0018      	movs	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	b002      	add	sp, #8
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	f0ffffff 	.word	0xf0ffffff
 800286c:	ffff7fff 	.word	0xffff7fff
 8002870:	fffff7ff 	.word	0xfffff7ff
 8002874:	02008000 	.word	0x02008000

08002878 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b089      	sub	sp, #36	@ 0x24
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	0008      	movs	r0, r1
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	0019      	movs	r1, r3
 8002886:	230a      	movs	r3, #10
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	1c02      	adds	r2, r0, #0
 800288c:	801a      	strh	r2, [r3, #0]
 800288e:	2308      	movs	r3, #8
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	1c0a      	adds	r2, r1, #0
 8002894:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2241      	movs	r2, #65	@ 0x41
 800289a:	5c9b      	ldrb	r3, [r3, r2]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b20      	cmp	r3, #32
 80028a0:	d000      	beq.n	80028a4 <HAL_I2C_Master_Transmit+0x2c>
 80028a2:	e10a      	b.n	8002aba <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2240      	movs	r2, #64	@ 0x40
 80028a8:	5c9b      	ldrb	r3, [r3, r2]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_I2C_Master_Transmit+0x3a>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e104      	b.n	8002abc <HAL_I2C_Master_Transmit+0x244>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2240      	movs	r2, #64	@ 0x40
 80028b6:	2101      	movs	r1, #1
 80028b8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028ba:	f7ff fc61 	bl	8002180 <HAL_GetTick>
 80028be:	0003      	movs	r3, r0
 80028c0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028c2:	2380      	movs	r3, #128	@ 0x80
 80028c4:	0219      	lsls	r1, r3, #8
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	2319      	movs	r3, #25
 80028ce:	2201      	movs	r2, #1
 80028d0:	f000 fa26 	bl	8002d20 <I2C_WaitOnFlagUntilTimeout>
 80028d4:	1e03      	subs	r3, r0, #0
 80028d6:	d001      	beq.n	80028dc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0ef      	b.n	8002abc <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2241      	movs	r2, #65	@ 0x41
 80028e0:	2121      	movs	r1, #33	@ 0x21
 80028e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2242      	movs	r2, #66	@ 0x42
 80028e8:	2110      	movs	r1, #16
 80028ea:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2208      	movs	r2, #8
 80028fc:	18ba      	adds	r2, r7, r2
 80028fe:	8812      	ldrh	r2, [r2, #0]
 8002900:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290c:	b29b      	uxth	r3, r3
 800290e:	2bff      	cmp	r3, #255	@ 0xff
 8002910:	d906      	bls.n	8002920 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	22ff      	movs	r2, #255	@ 0xff
 8002916:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002918:	2380      	movs	r3, #128	@ 0x80
 800291a:	045b      	lsls	r3, r3, #17
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	e007      	b.n	8002930 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800292a:	2380      	movs	r3, #128	@ 0x80
 800292c:	049b      	lsls	r3, r3, #18
 800292e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002934:	2b00      	cmp	r3, #0
 8002936:	d027      	beq.n	8002988 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	781a      	ldrb	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296c:	b2db      	uxtb	r3, r3
 800296e:	3301      	adds	r3, #1
 8002970:	b2da      	uxtb	r2, r3
 8002972:	697c      	ldr	r4, [r7, #20]
 8002974:	230a      	movs	r3, #10
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	8819      	ldrh	r1, [r3, #0]
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	4b51      	ldr	r3, [pc, #324]	@ (8002ac4 <HAL_I2C_Master_Transmit+0x24c>)
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	0023      	movs	r3, r4
 8002982:	f000 fc45 	bl	8003210 <I2C_TransferConfig>
 8002986:	e06f      	b.n	8002a68 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298c:	b2da      	uxtb	r2, r3
 800298e:	697c      	ldr	r4, [r7, #20]
 8002990:	230a      	movs	r3, #10
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	8819      	ldrh	r1, [r3, #0]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac4 <HAL_I2C_Master_Transmit+0x24c>)
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	0023      	movs	r3, r4
 800299e:	f000 fc37 	bl	8003210 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80029a2:	e061      	b.n	8002a68 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f000 fa10 	bl	8002dd0 <I2C_WaitOnTXISFlagUntilTimeout>
 80029b0:	1e03      	subs	r3, r0, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e081      	b.n	8002abc <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	781a      	ldrb	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d03a      	beq.n	8002a68 <HAL_I2C_Master_Transmit+0x1f0>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d136      	bne.n	8002a68 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	0013      	movs	r3, r2
 8002a04:	2200      	movs	r2, #0
 8002a06:	2180      	movs	r1, #128	@ 0x80
 8002a08:	f000 f98a 	bl	8002d20 <I2C_WaitOnFlagUntilTimeout>
 8002a0c:	1e03      	subs	r3, r0, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e053      	b.n	8002abc <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2bff      	cmp	r3, #255	@ 0xff
 8002a1c:	d911      	bls.n	8002a42 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	22ff      	movs	r2, #255	@ 0xff
 8002a22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	2380      	movs	r3, #128	@ 0x80
 8002a2c:	045c      	lsls	r4, r3, #17
 8002a2e:	230a      	movs	r3, #10
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	8819      	ldrh	r1, [r3, #0]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	2300      	movs	r3, #0
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	0023      	movs	r3, r4
 8002a3c:	f000 fbe8 	bl	8003210 <I2C_TransferConfig>
 8002a40:	e012      	b.n	8002a68 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	2380      	movs	r3, #128	@ 0x80
 8002a54:	049c      	lsls	r4, r3, #18
 8002a56:	230a      	movs	r3, #10
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	8819      	ldrh	r1, [r3, #0]
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	0023      	movs	r3, r4
 8002a64:	f000 fbd4 	bl	8003210 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d198      	bne.n	80029a4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f000 f9ef 	bl	8002e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a7e:	1e03      	subs	r3, r0, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e01a      	b.n	8002abc <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	490b      	ldr	r1, [pc, #44]	@ (8002ac8 <HAL_I2C_Master_Transmit+0x250>)
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2241      	movs	r2, #65	@ 0x41
 8002aa2:	2120      	movs	r1, #32
 8002aa4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2242      	movs	r2, #66	@ 0x42
 8002aaa:	2100      	movs	r1, #0
 8002aac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2240      	movs	r2, #64	@ 0x40
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	e000      	b.n	8002abc <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002aba:	2302      	movs	r3, #2
  }
}
 8002abc:	0018      	movs	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b007      	add	sp, #28
 8002ac2:	bd90      	pop	{r4, r7, pc}
 8002ac4:	80002000 	.word	0x80002000
 8002ac8:	fe00e800 	.word	0xfe00e800

08002acc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b089      	sub	sp, #36	@ 0x24
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	0008      	movs	r0, r1
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	0019      	movs	r1, r3
 8002ada:	230a      	movs	r3, #10
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	1c02      	adds	r2, r0, #0
 8002ae0:	801a      	strh	r2, [r3, #0]
 8002ae2:	2308      	movs	r3, #8
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	1c0a      	adds	r2, r1, #0
 8002ae8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2241      	movs	r2, #65	@ 0x41
 8002aee:	5c9b      	ldrb	r3, [r3, r2]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	d000      	beq.n	8002af8 <HAL_I2C_Master_Receive+0x2c>
 8002af6:	e0e8      	b.n	8002cca <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2240      	movs	r2, #64	@ 0x40
 8002afc:	5c9b      	ldrb	r3, [r3, r2]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_I2C_Master_Receive+0x3a>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e0e2      	b.n	8002ccc <HAL_I2C_Master_Receive+0x200>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2240      	movs	r2, #64	@ 0x40
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b0e:	f7ff fb37 	bl	8002180 <HAL_GetTick>
 8002b12:	0003      	movs	r3, r0
 8002b14:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b16:	2380      	movs	r3, #128	@ 0x80
 8002b18:	0219      	lsls	r1, r3, #8
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	2319      	movs	r3, #25
 8002b22:	2201      	movs	r2, #1
 8002b24:	f000 f8fc 	bl	8002d20 <I2C_WaitOnFlagUntilTimeout>
 8002b28:	1e03      	subs	r3, r0, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0cd      	b.n	8002ccc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2241      	movs	r2, #65	@ 0x41
 8002b34:	2122      	movs	r1, #34	@ 0x22
 8002b36:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2242      	movs	r2, #66	@ 0x42
 8002b3c:	2110      	movs	r1, #16
 8002b3e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2208      	movs	r2, #8
 8002b50:	18ba      	adds	r2, r7, r2
 8002b52:	8812      	ldrh	r2, [r2, #0]
 8002b54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2bff      	cmp	r3, #255	@ 0xff
 8002b64:	d911      	bls.n	8002b8a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	22ff      	movs	r2, #255	@ 0xff
 8002b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	2380      	movs	r3, #128	@ 0x80
 8002b74:	045c      	lsls	r4, r3, #17
 8002b76:	230a      	movs	r3, #10
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	8819      	ldrh	r1, [r3, #0]
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	4b55      	ldr	r3, [pc, #340]	@ (8002cd4 <HAL_I2C_Master_Receive+0x208>)
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	0023      	movs	r3, r4
 8002b84:	f000 fb44 	bl	8003210 <I2C_TransferConfig>
 8002b88:	e076      	b.n	8002c78 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	2380      	movs	r3, #128	@ 0x80
 8002b9c:	049c      	lsls	r4, r3, #18
 8002b9e:	230a      	movs	r3, #10
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	8819      	ldrh	r1, [r3, #0]
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	4b4b      	ldr	r3, [pc, #300]	@ (8002cd4 <HAL_I2C_Master_Receive+0x208>)
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	0023      	movs	r3, r4
 8002bac:	f000 fb30 	bl	8003210 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002bb0:	e062      	b.n	8002c78 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 f993 	bl	8002ee4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bbe:	1e03      	subs	r3, r0, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e082      	b.n	8002ccc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d03a      	beq.n	8002c78 <HAL_I2C_Master_Receive+0x1ac>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d136      	bne.n	8002c78 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	0013      	movs	r3, r2
 8002c14:	2200      	movs	r2, #0
 8002c16:	2180      	movs	r1, #128	@ 0x80
 8002c18:	f000 f882 	bl	8002d20 <I2C_WaitOnFlagUntilTimeout>
 8002c1c:	1e03      	subs	r3, r0, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e053      	b.n	8002ccc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2bff      	cmp	r3, #255	@ 0xff
 8002c2c:	d911      	bls.n	8002c52 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	22ff      	movs	r2, #255	@ 0xff
 8002c32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	2380      	movs	r3, #128	@ 0x80
 8002c3c:	045c      	lsls	r4, r3, #17
 8002c3e:	230a      	movs	r3, #10
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	8819      	ldrh	r1, [r3, #0]
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	2300      	movs	r3, #0
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	0023      	movs	r3, r4
 8002c4c:	f000 fae0 	bl	8003210 <I2C_TransferConfig>
 8002c50:	e012      	b.n	8002c78 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	2380      	movs	r3, #128	@ 0x80
 8002c64:	049c      	lsls	r4, r3, #18
 8002c66:	230a      	movs	r3, #10
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	8819      	ldrh	r1, [r3, #0]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	0023      	movs	r3, r4
 8002c74:	f000 facc 	bl	8003210 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d197      	bne.n	8002bb2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f000 f8e7 	bl	8002e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c8e:	1e03      	subs	r3, r0, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e01a      	b.n	8002ccc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	490b      	ldr	r1, [pc, #44]	@ (8002cd8 <HAL_I2C_Master_Receive+0x20c>)
 8002caa:	400a      	ands	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2241      	movs	r2, #65	@ 0x41
 8002cb2:	2120      	movs	r1, #32
 8002cb4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2242      	movs	r2, #66	@ 0x42
 8002cba:	2100      	movs	r1, #0
 8002cbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2240      	movs	r2, #64	@ 0x40
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e000      	b.n	8002ccc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002cca:	2302      	movs	r3, #2
  }
}
 8002ccc:	0018      	movs	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b007      	add	sp, #28
 8002cd2:	bd90      	pop	{r4, r7, pc}
 8002cd4:	80002400 	.word	0x80002400
 8002cd8:	fe00e800 	.word	0xfe00e800

08002cdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	2202      	movs	r2, #2
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d103      	bne.n	8002cfa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2201      	movs	r2, #1
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d007      	beq.n	8002d18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2101      	movs	r1, #1
 8002d14:	430a      	orrs	r2, r1
 8002d16:	619a      	str	r2, [r3, #24]
  }
}
 8002d18:	46c0      	nop			@ (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b002      	add	sp, #8
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	1dfb      	adds	r3, r7, #7
 8002d2e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d30:	e03a      	b.n	8002da8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	6839      	ldr	r1, [r7, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f000 f971 	bl	8003020 <I2C_IsErrorOccurred>
 8002d3e:	1e03      	subs	r3, r0, #0
 8002d40:	d001      	beq.n	8002d46 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e040      	b.n	8002dc8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	d02d      	beq.n	8002da8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4c:	f7ff fa18 	bl	8002180 <HAL_GetTick>
 8002d50:	0002      	movs	r2, r0
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d302      	bcc.n	8002d62 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d122      	bne.n	8002da8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	425a      	negs	r2, r3
 8002d72:	4153      	adcs	r3, r2
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	001a      	movs	r2, r3
 8002d78:	1dfb      	adds	r3, r7, #7
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d113      	bne.n	8002da8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d84:	2220      	movs	r2, #32
 8002d86:	431a      	orrs	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2241      	movs	r2, #65	@ 0x41
 8002d90:	2120      	movs	r1, #32
 8002d92:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2242      	movs	r2, #66	@ 0x42
 8002d98:	2100      	movs	r1, #0
 8002d9a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2240      	movs	r2, #64	@ 0x40
 8002da0:	2100      	movs	r1, #0
 8002da2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e00f      	b.n	8002dc8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	4013      	ands	r3, r2
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	425a      	negs	r2, r3
 8002db8:	4153      	adcs	r3, r2
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	001a      	movs	r2, r3
 8002dbe:	1dfb      	adds	r3, r7, #7
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d0b5      	beq.n	8002d32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	0018      	movs	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b004      	add	sp, #16
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ddc:	e032      	b.n	8002e44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f000 f91b 	bl	8003020 <I2C_IsErrorOccurred>
 8002dea:	1e03      	subs	r3, r0, #0
 8002dec:	d001      	beq.n	8002df2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e030      	b.n	8002e54 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	3301      	adds	r3, #1
 8002df6:	d025      	beq.n	8002e44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df8:	f7ff f9c2 	bl	8002180 <HAL_GetTick>
 8002dfc:	0002      	movs	r2, r0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d302      	bcc.n	8002e0e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d11a      	bne.n	8002e44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2202      	movs	r2, #2
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d013      	beq.n	8002e44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e20:	2220      	movs	r2, #32
 8002e22:	431a      	orrs	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2241      	movs	r2, #65	@ 0x41
 8002e2c:	2120      	movs	r1, #32
 8002e2e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2242      	movs	r2, #66	@ 0x42
 8002e34:	2100      	movs	r1, #0
 8002e36:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2240      	movs	r2, #64	@ 0x40
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e007      	b.n	8002e54 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d1c5      	bne.n	8002dde <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	0018      	movs	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b004      	add	sp, #16
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e68:	e02f      	b.n	8002eca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	0018      	movs	r0, r3
 8002e72:	f000 f8d5 	bl	8003020 <I2C_IsErrorOccurred>
 8002e76:	1e03      	subs	r3, r0, #0
 8002e78:	d001      	beq.n	8002e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e02d      	b.n	8002eda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7e:	f7ff f97f 	bl	8002180 <HAL_GetTick>
 8002e82:	0002      	movs	r2, r0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d302      	bcc.n	8002e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d11a      	bne.n	8002eca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d013      	beq.n	8002eca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2241      	movs	r2, #65	@ 0x41
 8002eb2:	2120      	movs	r1, #32
 8002eb4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2242      	movs	r2, #66	@ 0x42
 8002eba:	2100      	movs	r1, #0
 8002ebc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2240      	movs	r2, #64	@ 0x40
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e007      	b.n	8002eda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d1c8      	bne.n	8002e6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	0018      	movs	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b004      	add	sp, #16
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef0:	2317      	movs	r3, #23
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002ef8:	e07b      	b.n	8002ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	0018      	movs	r0, r3
 8002f02:	f000 f88d 	bl	8003020 <I2C_IsErrorOccurred>
 8002f06:	1e03      	subs	r3, r0, #0
 8002f08:	d003      	beq.n	8002f12 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8002f0a:	2317      	movs	r3, #23
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b20      	cmp	r3, #32
 8002f1e:	d140      	bne.n	8002fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8002f20:	2117      	movs	r1, #23
 8002f22:	187b      	adds	r3, r7, r1
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d13b      	bne.n	8002fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	2204      	movs	r2, #4
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d106      	bne.n	8002f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002f40:	187b      	adds	r3, r7, r1
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b10      	cmp	r3, #16
 8002f52:	d123      	bne.n	8002f9c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2210      	movs	r2, #16
 8002f5a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2204      	movs	r2, #4
 8002f60:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2220      	movs	r2, #32
 8002f68:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4929      	ldr	r1, [pc, #164]	@ (800301c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8002f76:	400a      	ands	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2241      	movs	r2, #65	@ 0x41
 8002f7e:	2120      	movs	r1, #32
 8002f80:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2242      	movs	r2, #66	@ 0x42
 8002f86:	2100      	movs	r1, #0
 8002f88:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2240      	movs	r2, #64	@ 0x40
 8002f8e:	2100      	movs	r1, #0
 8002f90:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002f92:	2317      	movs	r3, #23
 8002f94:	18fb      	adds	r3, r7, r3
 8002f96:	2201      	movs	r2, #1
 8002f98:	701a      	strb	r2, [r3, #0]
 8002f9a:	e002      	b.n	8002fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002fa2:	f7ff f8ed 	bl	8002180 <HAL_GetTick>
 8002fa6:	0002      	movs	r2, r0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d302      	bcc.n	8002fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d11c      	bne.n	8002ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8002fb8:	2017      	movs	r0, #23
 8002fba:	183b      	adds	r3, r7, r0
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d117      	bne.n	8002ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	2204      	movs	r2, #4
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d010      	beq.n	8002ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2241      	movs	r2, #65	@ 0x41
 8002fe0:	2120      	movs	r1, #32
 8002fe2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2240      	movs	r2, #64	@ 0x40
 8002fe8:	2100      	movs	r1, #0
 8002fea:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002fec:	183b      	adds	r3, r7, r0
 8002fee:	2201      	movs	r2, #1
 8002ff0:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d005      	beq.n	800300c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003000:	2317      	movs	r3, #23
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d100      	bne.n	800300c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800300a:	e776      	b.n	8002efa <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 800300c:	2317      	movs	r3, #23
 800300e:	18fb      	adds	r3, r7, r3
 8003010:	781b      	ldrb	r3, [r3, #0]
}
 8003012:	0018      	movs	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	b006      	add	sp, #24
 8003018:	bd80      	pop	{r7, pc}
 800301a:	46c0      	nop			@ (mov r8, r8)
 800301c:	fe00e800 	.word	0xfe00e800

08003020 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	@ 0x28
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800302c:	2327      	movs	r3, #39	@ 0x27
 800302e:	18fb      	adds	r3, r7, r3
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2210      	movs	r2, #16
 8003048:	4013      	ands	r3, r2
 800304a:	d100      	bne.n	800304e <I2C_IsErrorOccurred+0x2e>
 800304c:	e079      	b.n	8003142 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2210      	movs	r2, #16
 8003054:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003056:	e057      	b.n	8003108 <I2C_IsErrorOccurred+0xe8>
 8003058:	2227      	movs	r2, #39	@ 0x27
 800305a:	18bb      	adds	r3, r7, r2
 800305c:	18ba      	adds	r2, r7, r2
 800305e:	7812      	ldrb	r2, [r2, #0]
 8003060:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	3301      	adds	r3, #1
 8003066:	d04f      	beq.n	8003108 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003068:	f7ff f88a 	bl	8002180 <HAL_GetTick>
 800306c:	0002      	movs	r2, r0
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	429a      	cmp	r2, r3
 8003076:	d302      	bcc.n	800307e <I2C_IsErrorOccurred+0x5e>
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d144      	bne.n	8003108 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	2380      	movs	r3, #128	@ 0x80
 8003086:	01db      	lsls	r3, r3, #7
 8003088:	4013      	ands	r3, r2
 800308a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800308c:	2013      	movs	r0, #19
 800308e:	183b      	adds	r3, r7, r0
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	2142      	movs	r1, #66	@ 0x42
 8003094:	5c52      	ldrb	r2, [r2, r1]
 8003096:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	2380      	movs	r3, #128	@ 0x80
 80030a0:	021b      	lsls	r3, r3, #8
 80030a2:	401a      	ands	r2, r3
 80030a4:	2380      	movs	r3, #128	@ 0x80
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d126      	bne.n	80030fa <I2C_IsErrorOccurred+0xda>
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	2380      	movs	r3, #128	@ 0x80
 80030b0:	01db      	lsls	r3, r3, #7
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d021      	beq.n	80030fa <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80030b6:	183b      	adds	r3, r7, r0
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d01d      	beq.n	80030fa <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2180      	movs	r1, #128	@ 0x80
 80030ca:	01c9      	lsls	r1, r1, #7
 80030cc:	430a      	orrs	r2, r1
 80030ce:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030d0:	f7ff f856 	bl	8002180 <HAL_GetTick>
 80030d4:	0003      	movs	r3, r0
 80030d6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030d8:	e00f      	b.n	80030fa <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030da:	f7ff f851 	bl	8002180 <HAL_GetTick>
 80030de:	0002      	movs	r2, r0
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b19      	cmp	r3, #25
 80030e6:	d908      	bls.n	80030fa <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	2220      	movs	r2, #32
 80030ec:	4313      	orrs	r3, r2
 80030ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030f0:	2327      	movs	r3, #39	@ 0x27
 80030f2:	18fb      	adds	r3, r7, r3
 80030f4:	2201      	movs	r2, #1
 80030f6:	701a      	strb	r2, [r3, #0]

              break;
 80030f8:	e006      	b.n	8003108 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	2220      	movs	r2, #32
 8003102:	4013      	ands	r3, r2
 8003104:	2b20      	cmp	r3, #32
 8003106:	d1e8      	bne.n	80030da <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2220      	movs	r2, #32
 8003110:	4013      	ands	r3, r2
 8003112:	2b20      	cmp	r3, #32
 8003114:	d004      	beq.n	8003120 <I2C_IsErrorOccurred+0x100>
 8003116:	2327      	movs	r3, #39	@ 0x27
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d09b      	beq.n	8003058 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003120:	2327      	movs	r3, #39	@ 0x27
 8003122:	18fb      	adds	r3, r7, r3
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d103      	bne.n	8003132 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2220      	movs	r2, #32
 8003130:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	2204      	movs	r2, #4
 8003136:	4313      	orrs	r3, r2
 8003138:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800313a:	2327      	movs	r3, #39	@ 0x27
 800313c:	18fb      	adds	r3, r7, r3
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	2380      	movs	r3, #128	@ 0x80
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4013      	ands	r3, r2
 8003152:	d00c      	beq.n	800316e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	2201      	movs	r2, #1
 8003158:	4313      	orrs	r3, r2
 800315a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2280      	movs	r2, #128	@ 0x80
 8003162:	0052      	lsls	r2, r2, #1
 8003164:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003166:	2327      	movs	r3, #39	@ 0x27
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	2201      	movs	r2, #1
 800316c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	2380      	movs	r3, #128	@ 0x80
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4013      	ands	r3, r2
 8003176:	d00c      	beq.n	8003192 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	2208      	movs	r2, #8
 800317c:	4313      	orrs	r3, r2
 800317e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2280      	movs	r2, #128	@ 0x80
 8003186:	00d2      	lsls	r2, r2, #3
 8003188:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800318a:	2327      	movs	r3, #39	@ 0x27
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	2380      	movs	r3, #128	@ 0x80
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4013      	ands	r3, r2
 800319a:	d00c      	beq.n	80031b6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	2202      	movs	r2, #2
 80031a0:	4313      	orrs	r3, r2
 80031a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2280      	movs	r2, #128	@ 0x80
 80031aa:	0092      	lsls	r2, r2, #2
 80031ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031ae:	2327      	movs	r3, #39	@ 0x27
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	2201      	movs	r2, #1
 80031b4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80031b6:	2327      	movs	r3, #39	@ 0x27
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d01d      	beq.n	80031fc <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	0018      	movs	r0, r3
 80031c4:	f7ff fd8a 	bl	8002cdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	490e      	ldr	r1, [pc, #56]	@ (800320c <I2C_IsErrorOccurred+0x1ec>)
 80031d4:	400a      	ands	r2, r1
 80031d6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	431a      	orrs	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2241      	movs	r2, #65	@ 0x41
 80031e8:	2120      	movs	r1, #32
 80031ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2242      	movs	r2, #66	@ 0x42
 80031f0:	2100      	movs	r1, #0
 80031f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2240      	movs	r2, #64	@ 0x40
 80031f8:	2100      	movs	r1, #0
 80031fa:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80031fc:	2327      	movs	r3, #39	@ 0x27
 80031fe:	18fb      	adds	r3, r7, r3
 8003200:	781b      	ldrb	r3, [r3, #0]
}
 8003202:	0018      	movs	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	b00a      	add	sp, #40	@ 0x28
 8003208:	bd80      	pop	{r7, pc}
 800320a:	46c0      	nop			@ (mov r8, r8)
 800320c:	fe00e800 	.word	0xfe00e800

08003210 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	0008      	movs	r0, r1
 800321a:	0011      	movs	r1, r2
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	240a      	movs	r4, #10
 8003220:	193b      	adds	r3, r7, r4
 8003222:	1c02      	adds	r2, r0, #0
 8003224:	801a      	strh	r2, [r3, #0]
 8003226:	2009      	movs	r0, #9
 8003228:	183b      	adds	r3, r7, r0
 800322a:	1c0a      	adds	r2, r1, #0
 800322c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800322e:	193b      	adds	r3, r7, r4
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	059b      	lsls	r3, r3, #22
 8003234:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003236:	183b      	adds	r3, r7, r0
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	0419      	lsls	r1, r3, #16
 800323c:	23ff      	movs	r3, #255	@ 0xff
 800323e:	041b      	lsls	r3, r3, #16
 8003240:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003242:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324a:	4313      	orrs	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800325a:	0d51      	lsrs	r1, r2, #21
 800325c:	2280      	movs	r2, #128	@ 0x80
 800325e:	00d2      	lsls	r2, r2, #3
 8003260:	400a      	ands	r2, r1
 8003262:	4907      	ldr	r1, [pc, #28]	@ (8003280 <I2C_TransferConfig+0x70>)
 8003264:	430a      	orrs	r2, r1
 8003266:	43d2      	mvns	r2, r2
 8003268:	401a      	ands	r2, r3
 800326a:	0011      	movs	r1, r2
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003276:	46c0      	nop			@ (mov r8, r8)
 8003278:	46bd      	mov	sp, r7
 800327a:	b007      	add	sp, #28
 800327c:	bd90      	pop	{r4, r7, pc}
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	03ff63ff 	.word	0x03ff63ff

08003284 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2241      	movs	r2, #65	@ 0x41
 8003292:	5c9b      	ldrb	r3, [r3, r2]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b20      	cmp	r3, #32
 8003298:	d138      	bne.n	800330c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2240      	movs	r2, #64	@ 0x40
 800329e:	5c9b      	ldrb	r3, [r3, r2]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e032      	b.n	800330e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2240      	movs	r2, #64	@ 0x40
 80032ac:	2101      	movs	r1, #1
 80032ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2241      	movs	r2, #65	@ 0x41
 80032b4:	2124      	movs	r1, #36	@ 0x24
 80032b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2101      	movs	r1, #1
 80032c4:	438a      	bics	r2, r1
 80032c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4911      	ldr	r1, [pc, #68]	@ (8003318 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80032d4:	400a      	ands	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6819      	ldr	r1, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2101      	movs	r1, #1
 80032f4:	430a      	orrs	r2, r1
 80032f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2241      	movs	r2, #65	@ 0x41
 80032fc:	2120      	movs	r1, #32
 80032fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2240      	movs	r2, #64	@ 0x40
 8003304:	2100      	movs	r1, #0
 8003306:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	e000      	b.n	800330e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800330c:	2302      	movs	r3, #2
  }
}
 800330e:	0018      	movs	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	b002      	add	sp, #8
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	ffffefff 	.word	0xffffefff

0800331c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2241      	movs	r2, #65	@ 0x41
 800332a:	5c9b      	ldrb	r3, [r3, r2]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b20      	cmp	r3, #32
 8003330:	d139      	bne.n	80033a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2240      	movs	r2, #64	@ 0x40
 8003336:	5c9b      	ldrb	r3, [r3, r2]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800333c:	2302      	movs	r3, #2
 800333e:	e033      	b.n	80033a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2240      	movs	r2, #64	@ 0x40
 8003344:	2101      	movs	r1, #1
 8003346:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2241      	movs	r2, #65	@ 0x41
 800334c:	2124      	movs	r1, #36	@ 0x24
 800334e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2101      	movs	r1, #1
 800335c:	438a      	bics	r2, r1
 800335e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4a11      	ldr	r2, [pc, #68]	@ (80033b0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800336c:	4013      	ands	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	021b      	lsls	r3, r3, #8
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2101      	movs	r1, #1
 800338e:	430a      	orrs	r2, r1
 8003390:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2241      	movs	r2, #65	@ 0x41
 8003396:	2120      	movs	r1, #32
 8003398:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2240      	movs	r2, #64	@ 0x40
 800339e:	2100      	movs	r1, #0
 80033a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e000      	b.n	80033a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033a6:	2302      	movs	r3, #2
  }
}
 80033a8:	0018      	movs	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b004      	add	sp, #16
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	fffff0ff 	.word	0xfffff0ff

080033b4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033b8:	4b04      	ldr	r3, [pc, #16]	@ (80033cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b03      	ldr	r3, [pc, #12]	@ (80033cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80033be:	2180      	movs	r1, #128	@ 0x80
 80033c0:	0049      	lsls	r1, r1, #1
 80033c2:	430a      	orrs	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]
}
 80033c6:	46c0      	nop			@ (mov r8, r8)
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40007000 	.word	0x40007000

080033d0 <HAL_PWR_DisableBkUpAccess>:
/**
  * @brief  Disable access to the backup domain
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 80033d4:	4b04      	ldr	r3, [pc, #16]	@ (80033e8 <HAL_PWR_DisableBkUpAccess+0x18>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4b03      	ldr	r3, [pc, #12]	@ (80033e8 <HAL_PWR_DisableBkUpAccess+0x18>)
 80033da:	4904      	ldr	r1, [pc, #16]	@ (80033ec <HAL_PWR_DisableBkUpAccess+0x1c>)
 80033dc:	400a      	ands	r2, r1
 80033de:	601a      	str	r2, [r3, #0]
}
 80033e0:	46c0      	nop			@ (mov r8, r8)
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	40007000 	.word	0x40007000
 80033ec:	fffffeff 	.word	0xfffffeff

080033f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80033f8:	4b19      	ldr	r3, [pc, #100]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a19      	ldr	r2, [pc, #100]	@ (8003464 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80033fe:	4013      	ands	r3, r2
 8003400:	0019      	movs	r1, r3
 8003402:	4b17      	ldr	r3, [pc, #92]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	430a      	orrs	r2, r1
 8003408:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	2380      	movs	r3, #128	@ 0x80
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	429a      	cmp	r2, r3
 8003412:	d11f      	bne.n	8003454 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003414:	4b14      	ldr	r3, [pc, #80]	@ (8003468 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	0013      	movs	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	189b      	adds	r3, r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4912      	ldr	r1, [pc, #72]	@ (800346c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003422:	0018      	movs	r0, r3
 8003424:	f7fc fe6e 	bl	8000104 <__udivsi3>
 8003428:	0003      	movs	r3, r0
 800342a:	3301      	adds	r3, #1
 800342c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800342e:	e008      	b.n	8003442 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3b01      	subs	r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	e001      	b.n	8003442 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e009      	b.n	8003456 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003442:	4b07      	ldr	r3, [pc, #28]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003444:	695a      	ldr	r2, [r3, #20]
 8003446:	2380      	movs	r3, #128	@ 0x80
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	401a      	ands	r2, r3
 800344c:	2380      	movs	r3, #128	@ 0x80
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	429a      	cmp	r2, r3
 8003452:	d0ed      	beq.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	0018      	movs	r0, r3
 8003458:	46bd      	mov	sp, r7
 800345a:	b004      	add	sp, #16
 800345c:	bd80      	pop	{r7, pc}
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	40007000 	.word	0x40007000
 8003464:	fffff9ff 	.word	0xfffff9ff
 8003468:	20000050 	.word	0x20000050
 800346c:	000f4240 	.word	0x000f4240

08003470 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e2fe      	b.n	8003a80 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2201      	movs	r2, #1
 8003488:	4013      	ands	r3, r2
 800348a:	d100      	bne.n	800348e <HAL_RCC_OscConfig+0x1e>
 800348c:	e07c      	b.n	8003588 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800348e:	4bc3      	ldr	r3, [pc, #780]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2238      	movs	r2, #56	@ 0x38
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003498:	4bc0      	ldr	r3, [pc, #768]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2203      	movs	r2, #3
 800349e:	4013      	ands	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d102      	bne.n	80034ae <HAL_RCC_OscConfig+0x3e>
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d002      	beq.n	80034b4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d10b      	bne.n	80034cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b4:	4bb9      	ldr	r3, [pc, #740]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	2380      	movs	r3, #128	@ 0x80
 80034ba:	029b      	lsls	r3, r3, #10
 80034bc:	4013      	ands	r3, r2
 80034be:	d062      	beq.n	8003586 <HAL_RCC_OscConfig+0x116>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d15e      	bne.n	8003586 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e2d9      	b.n	8003a80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	2380      	movs	r3, #128	@ 0x80
 80034d2:	025b      	lsls	r3, r3, #9
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d107      	bne.n	80034e8 <HAL_RCC_OscConfig+0x78>
 80034d8:	4bb0      	ldr	r3, [pc, #704]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4baf      	ldr	r3, [pc, #700]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 80034de:	2180      	movs	r1, #128	@ 0x80
 80034e0:	0249      	lsls	r1, r1, #9
 80034e2:	430a      	orrs	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	e020      	b.n	800352a <HAL_RCC_OscConfig+0xba>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	23a0      	movs	r3, #160	@ 0xa0
 80034ee:	02db      	lsls	r3, r3, #11
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d10e      	bne.n	8003512 <HAL_RCC_OscConfig+0xa2>
 80034f4:	4ba9      	ldr	r3, [pc, #676]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4ba8      	ldr	r3, [pc, #672]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 80034fa:	2180      	movs	r1, #128	@ 0x80
 80034fc:	02c9      	lsls	r1, r1, #11
 80034fe:	430a      	orrs	r2, r1
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	4ba6      	ldr	r3, [pc, #664]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	4ba5      	ldr	r3, [pc, #660]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003508:	2180      	movs	r1, #128	@ 0x80
 800350a:	0249      	lsls	r1, r1, #9
 800350c:	430a      	orrs	r2, r1
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	e00b      	b.n	800352a <HAL_RCC_OscConfig+0xba>
 8003512:	4ba2      	ldr	r3, [pc, #648]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4ba1      	ldr	r3, [pc, #644]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003518:	49a1      	ldr	r1, [pc, #644]	@ (80037a0 <HAL_RCC_OscConfig+0x330>)
 800351a:	400a      	ands	r2, r1
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	4b9f      	ldr	r3, [pc, #636]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4b9e      	ldr	r3, [pc, #632]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003524:	499f      	ldr	r1, [pc, #636]	@ (80037a4 <HAL_RCC_OscConfig+0x334>)
 8003526:	400a      	ands	r2, r1
 8003528:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d014      	beq.n	800355c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003532:	f7fe fe25 	bl	8002180 <HAL_GetTick>
 8003536:	0003      	movs	r3, r0
 8003538:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800353c:	f7fe fe20 	bl	8002180 <HAL_GetTick>
 8003540:	0002      	movs	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	@ 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e298      	b.n	8003a80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800354e:	4b93      	ldr	r3, [pc, #588]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	2380      	movs	r3, #128	@ 0x80
 8003554:	029b      	lsls	r3, r3, #10
 8003556:	4013      	ands	r3, r2
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0xcc>
 800355a:	e015      	b.n	8003588 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355c:	f7fe fe10 	bl	8002180 <HAL_GetTick>
 8003560:	0003      	movs	r3, r0
 8003562:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003566:	f7fe fe0b 	bl	8002180 <HAL_GetTick>
 800356a:	0002      	movs	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b64      	cmp	r3, #100	@ 0x64
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e283      	b.n	8003a80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003578:	4b88      	ldr	r3, [pc, #544]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	2380      	movs	r3, #128	@ 0x80
 800357e:	029b      	lsls	r3, r3, #10
 8003580:	4013      	ands	r3, r2
 8003582:	d1f0      	bne.n	8003566 <HAL_RCC_OscConfig+0xf6>
 8003584:	e000      	b.n	8003588 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003586:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2202      	movs	r2, #2
 800358e:	4013      	ands	r3, r2
 8003590:	d100      	bne.n	8003594 <HAL_RCC_OscConfig+0x124>
 8003592:	e099      	b.n	80036c8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003594:	4b81      	ldr	r3, [pc, #516]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2238      	movs	r2, #56	@ 0x38
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800359e:	4b7f      	ldr	r3, [pc, #508]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	2203      	movs	r2, #3
 80035a4:	4013      	ands	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	2b10      	cmp	r3, #16
 80035ac:	d102      	bne.n	80035b4 <HAL_RCC_OscConfig+0x144>
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d002      	beq.n	80035ba <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d135      	bne.n	8003626 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035ba:	4b78      	ldr	r3, [pc, #480]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	2380      	movs	r3, #128	@ 0x80
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4013      	ands	r3, r2
 80035c4:	d005      	beq.n	80035d2 <HAL_RCC_OscConfig+0x162>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e256      	b.n	8003a80 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d2:	4b72      	ldr	r3, [pc, #456]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4a74      	ldr	r2, [pc, #464]	@ (80037a8 <HAL_RCC_OscConfig+0x338>)
 80035d8:	4013      	ands	r3, r2
 80035da:	0019      	movs	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	021a      	lsls	r2, r3, #8
 80035e2:	4b6e      	ldr	r3, [pc, #440]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 80035e4:	430a      	orrs	r2, r1
 80035e6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d112      	bne.n	8003614 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80035ee:	4b6b      	ldr	r3, [pc, #428]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a6e      	ldr	r2, [pc, #440]	@ (80037ac <HAL_RCC_OscConfig+0x33c>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	0019      	movs	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	4b67      	ldr	r3, [pc, #412]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 80035fe:	430a      	orrs	r2, r1
 8003600:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003602:	4b66      	ldr	r3, [pc, #408]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	0adb      	lsrs	r3, r3, #11
 8003608:	2207      	movs	r2, #7
 800360a:	4013      	ands	r3, r2
 800360c:	4a68      	ldr	r2, [pc, #416]	@ (80037b0 <HAL_RCC_OscConfig+0x340>)
 800360e:	40da      	lsrs	r2, r3
 8003610:	4b68      	ldr	r3, [pc, #416]	@ (80037b4 <HAL_RCC_OscConfig+0x344>)
 8003612:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003614:	4b68      	ldr	r3, [pc, #416]	@ (80037b8 <HAL_RCC_OscConfig+0x348>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	0018      	movs	r0, r3
 800361a:	f7fe fd55 	bl	80020c8 <HAL_InitTick>
 800361e:	1e03      	subs	r3, r0, #0
 8003620:	d051      	beq.n	80036c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e22c      	b.n	8003a80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d030      	beq.n	8003690 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800362e:	4b5b      	ldr	r3, [pc, #364]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a5e      	ldr	r2, [pc, #376]	@ (80037ac <HAL_RCC_OscConfig+0x33c>)
 8003634:	4013      	ands	r3, r2
 8003636:	0019      	movs	r1, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	4b57      	ldr	r3, [pc, #348]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 800363e:	430a      	orrs	r2, r1
 8003640:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003642:	4b56      	ldr	r3, [pc, #344]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	4b55      	ldr	r3, [pc, #340]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003648:	2180      	movs	r1, #128	@ 0x80
 800364a:	0049      	lsls	r1, r1, #1
 800364c:	430a      	orrs	r2, r1
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fe fd96 	bl	8002180 <HAL_GetTick>
 8003654:	0003      	movs	r3, r0
 8003656:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365a:	f7fe fd91 	bl	8002180 <HAL_GetTick>
 800365e:	0002      	movs	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e209      	b.n	8003a80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800366c:	4b4b      	ldr	r3, [pc, #300]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	2380      	movs	r3, #128	@ 0x80
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4013      	ands	r3, r2
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003678:	4b48      	ldr	r3, [pc, #288]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4a4a      	ldr	r2, [pc, #296]	@ (80037a8 <HAL_RCC_OscConfig+0x338>)
 800367e:	4013      	ands	r3, r2
 8003680:	0019      	movs	r1, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	021a      	lsls	r2, r3, #8
 8003688:	4b44      	ldr	r3, [pc, #272]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 800368a:	430a      	orrs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	e01b      	b.n	80036c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003690:	4b42      	ldr	r3, [pc, #264]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b41      	ldr	r3, [pc, #260]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003696:	4949      	ldr	r1, [pc, #292]	@ (80037bc <HAL_RCC_OscConfig+0x34c>)
 8003698:	400a      	ands	r2, r1
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fe fd70 	bl	8002180 <HAL_GetTick>
 80036a0:	0003      	movs	r3, r0
 80036a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a6:	f7fe fd6b 	bl	8002180 <HAL_GetTick>
 80036aa:	0002      	movs	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e1e3      	b.n	8003a80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036b8:	4b38      	ldr	r3, [pc, #224]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	2380      	movs	r3, #128	@ 0x80
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4013      	ands	r3, r2
 80036c2:	d1f0      	bne.n	80036a6 <HAL_RCC_OscConfig+0x236>
 80036c4:	e000      	b.n	80036c8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036c6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2208      	movs	r2, #8
 80036ce:	4013      	ands	r3, r2
 80036d0:	d047      	beq.n	8003762 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80036d2:	4b32      	ldr	r3, [pc, #200]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2238      	movs	r2, #56	@ 0x38
 80036d8:	4013      	ands	r3, r2
 80036da:	2b18      	cmp	r3, #24
 80036dc:	d10a      	bne.n	80036f4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80036de:	4b2f      	ldr	r3, [pc, #188]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 80036e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e2:	2202      	movs	r2, #2
 80036e4:	4013      	ands	r3, r2
 80036e6:	d03c      	beq.n	8003762 <HAL_RCC_OscConfig+0x2f2>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d138      	bne.n	8003762 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e1c5      	b.n	8003a80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d019      	beq.n	8003730 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80036fc:	4b27      	ldr	r3, [pc, #156]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 80036fe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003700:	4b26      	ldr	r3, [pc, #152]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003702:	2101      	movs	r1, #1
 8003704:	430a      	orrs	r2, r1
 8003706:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fe fd3a 	bl	8002180 <HAL_GetTick>
 800370c:	0003      	movs	r3, r0
 800370e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003712:	f7fe fd35 	bl	8002180 <HAL_GetTick>
 8003716:	0002      	movs	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e1ad      	b.n	8003a80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003724:	4b1d      	ldr	r3, [pc, #116]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003728:	2202      	movs	r2, #2
 800372a:	4013      	ands	r3, r2
 800372c:	d0f1      	beq.n	8003712 <HAL_RCC_OscConfig+0x2a2>
 800372e:	e018      	b.n	8003762 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003730:	4b1a      	ldr	r3, [pc, #104]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003732:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003734:	4b19      	ldr	r3, [pc, #100]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003736:	2101      	movs	r1, #1
 8003738:	438a      	bics	r2, r1
 800373a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fe fd20 	bl	8002180 <HAL_GetTick>
 8003740:	0003      	movs	r3, r0
 8003742:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003746:	f7fe fd1b 	bl	8002180 <HAL_GetTick>
 800374a:	0002      	movs	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e193      	b.n	8003a80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003758:	4b10      	ldr	r3, [pc, #64]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 800375a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375c:	2202      	movs	r2, #2
 800375e:	4013      	ands	r3, r2
 8003760:	d1f1      	bne.n	8003746 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2204      	movs	r2, #4
 8003768:	4013      	ands	r3, r2
 800376a:	d100      	bne.n	800376e <HAL_RCC_OscConfig+0x2fe>
 800376c:	e0c6      	b.n	80038fc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800376e:	231f      	movs	r3, #31
 8003770:	18fb      	adds	r3, r7, r3
 8003772:	2200      	movs	r2, #0
 8003774:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003776:	4b09      	ldr	r3, [pc, #36]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2238      	movs	r2, #56	@ 0x38
 800377c:	4013      	ands	r3, r2
 800377e:	2b20      	cmp	r3, #32
 8003780:	d11e      	bne.n	80037c0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003782:	4b06      	ldr	r3, [pc, #24]	@ (800379c <HAL_RCC_OscConfig+0x32c>)
 8003784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003786:	2202      	movs	r2, #2
 8003788:	4013      	ands	r3, r2
 800378a:	d100      	bne.n	800378e <HAL_RCC_OscConfig+0x31e>
 800378c:	e0b6      	b.n	80038fc <HAL_RCC_OscConfig+0x48c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d000      	beq.n	8003798 <HAL_RCC_OscConfig+0x328>
 8003796:	e0b1      	b.n	80038fc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e171      	b.n	8003a80 <HAL_RCC_OscConfig+0x610>
 800379c:	40021000 	.word	0x40021000
 80037a0:	fffeffff 	.word	0xfffeffff
 80037a4:	fffbffff 	.word	0xfffbffff
 80037a8:	ffff80ff 	.word	0xffff80ff
 80037ac:	ffffc7ff 	.word	0xffffc7ff
 80037b0:	00f42400 	.word	0x00f42400
 80037b4:	20000050 	.word	0x20000050
 80037b8:	20000054 	.word	0x20000054
 80037bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037c0:	4bb1      	ldr	r3, [pc, #708]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 80037c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037c4:	2380      	movs	r3, #128	@ 0x80
 80037c6:	055b      	lsls	r3, r3, #21
 80037c8:	4013      	ands	r3, r2
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_OscConfig+0x360>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <HAL_RCC_OscConfig+0x362>
 80037d0:	2300      	movs	r3, #0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d011      	beq.n	80037fa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80037d6:	4bac      	ldr	r3, [pc, #688]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 80037d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037da:	4bab      	ldr	r3, [pc, #684]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 80037dc:	2180      	movs	r1, #128	@ 0x80
 80037de:	0549      	lsls	r1, r1, #21
 80037e0:	430a      	orrs	r2, r1
 80037e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80037e4:	4ba8      	ldr	r3, [pc, #672]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 80037e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037e8:	2380      	movs	r3, #128	@ 0x80
 80037ea:	055b      	lsls	r3, r3, #21
 80037ec:	4013      	ands	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80037f2:	231f      	movs	r3, #31
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	2201      	movs	r2, #1
 80037f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037fa:	4ba4      	ldr	r3, [pc, #656]	@ (8003a8c <HAL_RCC_OscConfig+0x61c>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	2380      	movs	r3, #128	@ 0x80
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	4013      	ands	r3, r2
 8003804:	d11a      	bne.n	800383c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003806:	4ba1      	ldr	r3, [pc, #644]	@ (8003a8c <HAL_RCC_OscConfig+0x61c>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4ba0      	ldr	r3, [pc, #640]	@ (8003a8c <HAL_RCC_OscConfig+0x61c>)
 800380c:	2180      	movs	r1, #128	@ 0x80
 800380e:	0049      	lsls	r1, r1, #1
 8003810:	430a      	orrs	r2, r1
 8003812:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003814:	f7fe fcb4 	bl	8002180 <HAL_GetTick>
 8003818:	0003      	movs	r3, r0
 800381a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800381e:	f7fe fcaf 	bl	8002180 <HAL_GetTick>
 8003822:	0002      	movs	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e127      	b.n	8003a80 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003830:	4b96      	ldr	r3, [pc, #600]	@ (8003a8c <HAL_RCC_OscConfig+0x61c>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	2380      	movs	r3, #128	@ 0x80
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4013      	ands	r3, r2
 800383a:	d0f0      	beq.n	800381e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d106      	bne.n	8003852 <HAL_RCC_OscConfig+0x3e2>
 8003844:	4b90      	ldr	r3, [pc, #576]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 8003846:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003848:	4b8f      	ldr	r3, [pc, #572]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 800384a:	2101      	movs	r1, #1
 800384c:	430a      	orrs	r2, r1
 800384e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003850:	e01c      	b.n	800388c <HAL_RCC_OscConfig+0x41c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b05      	cmp	r3, #5
 8003858:	d10c      	bne.n	8003874 <HAL_RCC_OscConfig+0x404>
 800385a:	4b8b      	ldr	r3, [pc, #556]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 800385c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800385e:	4b8a      	ldr	r3, [pc, #552]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 8003860:	2104      	movs	r1, #4
 8003862:	430a      	orrs	r2, r1
 8003864:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003866:	4b88      	ldr	r3, [pc, #544]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 8003868:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800386a:	4b87      	ldr	r3, [pc, #540]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 800386c:	2101      	movs	r1, #1
 800386e:	430a      	orrs	r2, r1
 8003870:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003872:	e00b      	b.n	800388c <HAL_RCC_OscConfig+0x41c>
 8003874:	4b84      	ldr	r3, [pc, #528]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 8003876:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003878:	4b83      	ldr	r3, [pc, #524]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 800387a:	2101      	movs	r1, #1
 800387c:	438a      	bics	r2, r1
 800387e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003880:	4b81      	ldr	r3, [pc, #516]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 8003882:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003884:	4b80      	ldr	r3, [pc, #512]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 8003886:	2104      	movs	r1, #4
 8003888:	438a      	bics	r2, r1
 800388a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d014      	beq.n	80038be <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fe fc74 	bl	8002180 <HAL_GetTick>
 8003898:	0003      	movs	r3, r0
 800389a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800389c:	e009      	b.n	80038b2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389e:	f7fe fc6f 	bl	8002180 <HAL_GetTick>
 80038a2:	0002      	movs	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	4a79      	ldr	r2, [pc, #484]	@ (8003a90 <HAL_RCC_OscConfig+0x620>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e0e6      	b.n	8003a80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038b2:	4b75      	ldr	r3, [pc, #468]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 80038b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b6:	2202      	movs	r2, #2
 80038b8:	4013      	ands	r3, r2
 80038ba:	d0f0      	beq.n	800389e <HAL_RCC_OscConfig+0x42e>
 80038bc:	e013      	b.n	80038e6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038be:	f7fe fc5f 	bl	8002180 <HAL_GetTick>
 80038c2:	0003      	movs	r3, r0
 80038c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038c6:	e009      	b.n	80038dc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c8:	f7fe fc5a 	bl	8002180 <HAL_GetTick>
 80038cc:	0002      	movs	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	4a6f      	ldr	r2, [pc, #444]	@ (8003a90 <HAL_RCC_OscConfig+0x620>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e0d1      	b.n	8003a80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 80038de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e0:	2202      	movs	r2, #2
 80038e2:	4013      	ands	r3, r2
 80038e4:	d1f0      	bne.n	80038c8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80038e6:	231f      	movs	r3, #31
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d105      	bne.n	80038fc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80038f0:	4b65      	ldr	r3, [pc, #404]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 80038f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038f4:	4b64      	ldr	r3, [pc, #400]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 80038f6:	4967      	ldr	r1, [pc, #412]	@ (8003a94 <HAL_RCC_OscConfig+0x624>)
 80038f8:	400a      	ands	r2, r1
 80038fa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d100      	bne.n	8003906 <HAL_RCC_OscConfig+0x496>
 8003904:	e0bb      	b.n	8003a7e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003906:	4b60      	ldr	r3, [pc, #384]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2238      	movs	r2, #56	@ 0x38
 800390c:	4013      	ands	r3, r2
 800390e:	2b10      	cmp	r3, #16
 8003910:	d100      	bne.n	8003914 <HAL_RCC_OscConfig+0x4a4>
 8003912:	e07b      	b.n	8003a0c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	2b02      	cmp	r3, #2
 800391a:	d156      	bne.n	80039ca <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391c:	4b5a      	ldr	r3, [pc, #360]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	4b59      	ldr	r3, [pc, #356]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 8003922:	495d      	ldr	r1, [pc, #372]	@ (8003a98 <HAL_RCC_OscConfig+0x628>)
 8003924:	400a      	ands	r2, r1
 8003926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fe fc2a 	bl	8002180 <HAL_GetTick>
 800392c:	0003      	movs	r3, r0
 800392e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003932:	f7fe fc25 	bl	8002180 <HAL_GetTick>
 8003936:	0002      	movs	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e09d      	b.n	8003a80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003944:	4b50      	ldr	r3, [pc, #320]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	2380      	movs	r3, #128	@ 0x80
 800394a:	049b      	lsls	r3, r3, #18
 800394c:	4013      	ands	r3, r2
 800394e:	d1f0      	bne.n	8003932 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003950:	4b4d      	ldr	r3, [pc, #308]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4a51      	ldr	r2, [pc, #324]	@ (8003a9c <HAL_RCC_OscConfig+0x62c>)
 8003956:	4013      	ands	r3, r2
 8003958:	0019      	movs	r1, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1a      	ldr	r2, [r3, #32]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800397c:	431a      	orrs	r2, r3
 800397e:	4b42      	ldr	r3, [pc, #264]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 8003980:	430a      	orrs	r2, r1
 8003982:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003984:	4b40      	ldr	r3, [pc, #256]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4b3f      	ldr	r3, [pc, #252]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 800398a:	2180      	movs	r1, #128	@ 0x80
 800398c:	0449      	lsls	r1, r1, #17
 800398e:	430a      	orrs	r2, r1
 8003990:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003992:	4b3d      	ldr	r3, [pc, #244]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	4b3c      	ldr	r3, [pc, #240]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	0549      	lsls	r1, r1, #21
 800399c:	430a      	orrs	r2, r1
 800399e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7fe fbee 	bl	8002180 <HAL_GetTick>
 80039a4:	0003      	movs	r3, r0
 80039a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039aa:	f7fe fbe9 	bl	8002180 <HAL_GetTick>
 80039ae:	0002      	movs	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e061      	b.n	8003a80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039bc:	4b32      	ldr	r3, [pc, #200]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	2380      	movs	r3, #128	@ 0x80
 80039c2:	049b      	lsls	r3, r3, #18
 80039c4:	4013      	ands	r3, r2
 80039c6:	d0f0      	beq.n	80039aa <HAL_RCC_OscConfig+0x53a>
 80039c8:	e059      	b.n	8003a7e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ca:	4b2f      	ldr	r3, [pc, #188]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	4b2e      	ldr	r3, [pc, #184]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 80039d0:	4931      	ldr	r1, [pc, #196]	@ (8003a98 <HAL_RCC_OscConfig+0x628>)
 80039d2:	400a      	ands	r2, r1
 80039d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d6:	f7fe fbd3 	bl	8002180 <HAL_GetTick>
 80039da:	0003      	movs	r3, r0
 80039dc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e0:	f7fe fbce 	bl	8002180 <HAL_GetTick>
 80039e4:	0002      	movs	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e046      	b.n	8003a80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039f2:	4b25      	ldr	r3, [pc, #148]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	2380      	movs	r3, #128	@ 0x80
 80039f8:	049b      	lsls	r3, r3, #18
 80039fa:	4013      	ands	r3, r2
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80039fe:	4b22      	ldr	r3, [pc, #136]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	4b21      	ldr	r3, [pc, #132]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 8003a04:	4926      	ldr	r1, [pc, #152]	@ (8003aa0 <HAL_RCC_OscConfig+0x630>)
 8003a06:	400a      	ands	r2, r1
 8003a08:	60da      	str	r2, [r3, #12]
 8003a0a:	e038      	b.n	8003a7e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e033      	b.n	8003a80 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003a18:	4b1b      	ldr	r3, [pc, #108]	@ (8003a88 <HAL_RCC_OscConfig+0x618>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2203      	movs	r2, #3
 8003a22:	401a      	ands	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d126      	bne.n	8003a7a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2270      	movs	r2, #112	@ 0x70
 8003a30:	401a      	ands	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d11f      	bne.n	8003a7a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	23fe      	movs	r3, #254	@ 0xfe
 8003a3e:	01db      	lsls	r3, r3, #7
 8003a40:	401a      	ands	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a46:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d116      	bne.n	8003a7a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	23f8      	movs	r3, #248	@ 0xf8
 8003a50:	039b      	lsls	r3, r3, #14
 8003a52:	401a      	ands	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d10e      	bne.n	8003a7a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	23e0      	movs	r3, #224	@ 0xe0
 8003a60:	051b      	lsls	r3, r3, #20
 8003a62:	401a      	ands	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d106      	bne.n	8003a7a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	0f5b      	lsrs	r3, r3, #29
 8003a70:	075a      	lsls	r2, r3, #29
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d001      	beq.n	8003a7e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	0018      	movs	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b008      	add	sp, #32
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	40007000 	.word	0x40007000
 8003a90:	00001388 	.word	0x00001388
 8003a94:	efffffff 	.word	0xefffffff
 8003a98:	feffffff 	.word	0xfeffffff
 8003a9c:	11c1808c 	.word	0x11c1808c
 8003aa0:	eefefffc 	.word	0xeefefffc

08003aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0e9      	b.n	8003c8c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab8:	4b76      	ldr	r3, [pc, #472]	@ (8003c94 <HAL_RCC_ClockConfig+0x1f0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2207      	movs	r2, #7
 8003abe:	4013      	ands	r3, r2
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d91e      	bls.n	8003b04 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac6:	4b73      	ldr	r3, [pc, #460]	@ (8003c94 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2207      	movs	r2, #7
 8003acc:	4393      	bics	r3, r2
 8003ace:	0019      	movs	r1, r3
 8003ad0:	4b70      	ldr	r3, [pc, #448]	@ (8003c94 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ad8:	f7fe fb52 	bl	8002180 <HAL_GetTick>
 8003adc:	0003      	movs	r3, r0
 8003ade:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ae0:	e009      	b.n	8003af6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae2:	f7fe fb4d 	bl	8002180 <HAL_GetTick>
 8003ae6:	0002      	movs	r2, r0
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	4a6a      	ldr	r2, [pc, #424]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e0ca      	b.n	8003c8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003af6:	4b67      	ldr	r3, [pc, #412]	@ (8003c94 <HAL_RCC_ClockConfig+0x1f0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2207      	movs	r2, #7
 8003afc:	4013      	ands	r3, r2
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d1ee      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d015      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2204      	movs	r2, #4
 8003b14:	4013      	ands	r3, r2
 8003b16:	d006      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b18:	4b60      	ldr	r3, [pc, #384]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f8>)
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	4b5f      	ldr	r3, [pc, #380]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f8>)
 8003b1e:	21e0      	movs	r1, #224	@ 0xe0
 8003b20:	01c9      	lsls	r1, r1, #7
 8003b22:	430a      	orrs	r2, r1
 8003b24:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b26:	4b5d      	ldr	r3, [pc, #372]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f8>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	4a5d      	ldr	r2, [pc, #372]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1fc>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	0019      	movs	r1, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	4b59      	ldr	r3, [pc, #356]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f8>)
 8003b36:	430a      	orrs	r2, r1
 8003b38:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	4013      	ands	r3, r2
 8003b42:	d057      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d107      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b4c:	4b53      	ldr	r3, [pc, #332]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f8>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	2380      	movs	r3, #128	@ 0x80
 8003b52:	029b      	lsls	r3, r3, #10
 8003b54:	4013      	ands	r3, r2
 8003b56:	d12b      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e097      	b.n	8003c8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d107      	bne.n	8003b74 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b64:	4b4d      	ldr	r3, [pc, #308]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f8>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	2380      	movs	r3, #128	@ 0x80
 8003b6a:	049b      	lsls	r3, r3, #18
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d11f      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e08b      	b.n	8003c8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d107      	bne.n	8003b8c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b7c:	4b47      	ldr	r3, [pc, #284]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f8>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	2380      	movs	r3, #128	@ 0x80
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4013      	ands	r3, r2
 8003b86:	d113      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e07f      	b.n	8003c8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d106      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b94:	4b41      	ldr	r3, [pc, #260]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f8>)
 8003b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b98:	2202      	movs	r2, #2
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d108      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e074      	b.n	8003c8c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba2:	4b3e      	ldr	r3, [pc, #248]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f8>)
 8003ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e06d      	b.n	8003c8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bb0:	4b3a      	ldr	r3, [pc, #232]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f8>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2207      	movs	r2, #7
 8003bb6:	4393      	bics	r3, r2
 8003bb8:	0019      	movs	r1, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	4b37      	ldr	r3, [pc, #220]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f8>)
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc4:	f7fe fadc 	bl	8002180 <HAL_GetTick>
 8003bc8:	0003      	movs	r3, r0
 8003bca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bcc:	e009      	b.n	8003be2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bce:	f7fe fad7 	bl	8002180 <HAL_GetTick>
 8003bd2:	0002      	movs	r2, r0
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	4a2f      	ldr	r2, [pc, #188]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e054      	b.n	8003c8c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be2:	4b2e      	ldr	r3, [pc, #184]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f8>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2238      	movs	r2, #56	@ 0x38
 8003be8:	401a      	ands	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d1ec      	bne.n	8003bce <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf4:	4b27      	ldr	r3, [pc, #156]	@ (8003c94 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2207      	movs	r2, #7
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d21e      	bcs.n	8003c40 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c02:	4b24      	ldr	r3, [pc, #144]	@ (8003c94 <HAL_RCC_ClockConfig+0x1f0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2207      	movs	r2, #7
 8003c08:	4393      	bics	r3, r2
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	4b21      	ldr	r3, [pc, #132]	@ (8003c94 <HAL_RCC_ClockConfig+0x1f0>)
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c14:	f7fe fab4 	bl	8002180 <HAL_GetTick>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c1c:	e009      	b.n	8003c32 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c1e:	f7fe faaf 	bl	8002180 <HAL_GetTick>
 8003c22:	0002      	movs	r2, r0
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	4a1b      	ldr	r2, [pc, #108]	@ (8003c98 <HAL_RCC_ClockConfig+0x1f4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e02c      	b.n	8003c8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c32:	4b18      	ldr	r3, [pc, #96]	@ (8003c94 <HAL_RCC_ClockConfig+0x1f0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2207      	movs	r2, #7
 8003c38:	4013      	ands	r3, r2
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d1ee      	bne.n	8003c1e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2204      	movs	r2, #4
 8003c46:	4013      	ands	r3, r2
 8003c48:	d009      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c4a:	4b14      	ldr	r3, [pc, #80]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f8>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	4a15      	ldr	r2, [pc, #84]	@ (8003ca4 <HAL_RCC_ClockConfig+0x200>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	0019      	movs	r1, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	4b10      	ldr	r3, [pc, #64]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f8>)
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003c5e:	f000 f829 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8003c62:	0001      	movs	r1, r0
 8003c64:	4b0d      	ldr	r3, [pc, #52]	@ (8003c9c <HAL_RCC_ClockConfig+0x1f8>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	0a1b      	lsrs	r3, r3, #8
 8003c6a:	220f      	movs	r2, #15
 8003c6c:	401a      	ands	r2, r3
 8003c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca8 <HAL_RCC_ClockConfig+0x204>)
 8003c70:	0092      	lsls	r2, r2, #2
 8003c72:	58d3      	ldr	r3, [r2, r3]
 8003c74:	221f      	movs	r2, #31
 8003c76:	4013      	ands	r3, r2
 8003c78:	000a      	movs	r2, r1
 8003c7a:	40da      	lsrs	r2, r3
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003cac <HAL_RCC_ClockConfig+0x208>)
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c80:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb0 <HAL_RCC_ClockConfig+0x20c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	0018      	movs	r0, r3
 8003c86:	f7fe fa1f 	bl	80020c8 <HAL_InitTick>
 8003c8a:	0003      	movs	r3, r0
}
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	b004      	add	sp, #16
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40022000 	.word	0x40022000
 8003c98:	00001388 	.word	0x00001388
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	fffff0ff 	.word	0xfffff0ff
 8003ca4:	ffff8fff 	.word	0xffff8fff
 8003ca8:	08005c88 	.word	0x08005c88
 8003cac:	20000050 	.word	0x20000050
 8003cb0:	20000054 	.word	0x20000054

08003cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cba:	4b3c      	ldr	r3, [pc, #240]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2238      	movs	r2, #56	@ 0x38
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d10f      	bne.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003cc4:	4b39      	ldr	r3, [pc, #228]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	0adb      	lsrs	r3, r3, #11
 8003cca:	2207      	movs	r2, #7
 8003ccc:	4013      	ands	r3, r2
 8003cce:	2201      	movs	r2, #1
 8003cd0:	409a      	lsls	r2, r3
 8003cd2:	0013      	movs	r3, r2
 8003cd4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003cd6:	6839      	ldr	r1, [r7, #0]
 8003cd8:	4835      	ldr	r0, [pc, #212]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003cda:	f7fc fa13 	bl	8000104 <__udivsi3>
 8003cde:	0003      	movs	r3, r0
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	e05d      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ce4:	4b31      	ldr	r3, [pc, #196]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2238      	movs	r2, #56	@ 0x38
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d102      	bne.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cf0:	4b30      	ldr	r3, [pc, #192]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003cf2:	613b      	str	r3, [r7, #16]
 8003cf4:	e054      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	2238      	movs	r2, #56	@ 0x38
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b10      	cmp	r3, #16
 8003d00:	d138      	bne.n	8003d74 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003d02:	4b2a      	ldr	r3, [pc, #168]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	2203      	movs	r2, #3
 8003d08:	4013      	ands	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d0c:	4b27      	ldr	r3, [pc, #156]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	091b      	lsrs	r3, r3, #4
 8003d12:	2207      	movs	r2, #7
 8003d14:	4013      	ands	r3, r2
 8003d16:	3301      	adds	r3, #1
 8003d18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d10d      	bne.n	8003d3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	4824      	ldr	r0, [pc, #144]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003d24:	f7fc f9ee 	bl	8000104 <__udivsi3>
 8003d28:	0003      	movs	r3, r0
 8003d2a:	0019      	movs	r1, r3
 8003d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	0a1b      	lsrs	r3, r3, #8
 8003d32:	227f      	movs	r2, #127	@ 0x7f
 8003d34:	4013      	ands	r3, r2
 8003d36:	434b      	muls	r3, r1
 8003d38:	617b      	str	r3, [r7, #20]
        break;
 8003d3a:	e00d      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	481c      	ldr	r0, [pc, #112]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d40:	f7fc f9e0 	bl	8000104 <__udivsi3>
 8003d44:	0003      	movs	r3, r0
 8003d46:	0019      	movs	r1, r3
 8003d48:	4b18      	ldr	r3, [pc, #96]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	0a1b      	lsrs	r3, r3, #8
 8003d4e:	227f      	movs	r2, #127	@ 0x7f
 8003d50:	4013      	ands	r3, r2
 8003d52:	434b      	muls	r3, r1
 8003d54:	617b      	str	r3, [r7, #20]
        break;
 8003d56:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003d58:	4b14      	ldr	r3, [pc, #80]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	0f5b      	lsrs	r3, r3, #29
 8003d5e:	2207      	movs	r2, #7
 8003d60:	4013      	ands	r3, r2
 8003d62:	3301      	adds	r3, #1
 8003d64:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	6978      	ldr	r0, [r7, #20]
 8003d6a:	f7fc f9cb 	bl	8000104 <__udivsi3>
 8003d6e:	0003      	movs	r3, r0
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	e015      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003d74:	4b0d      	ldr	r3, [pc, #52]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2238      	movs	r2, #56	@ 0x38
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d103      	bne.n	8003d88 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003d80:	2380      	movs	r3, #128	@ 0x80
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	e00b      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003d88:	4b08      	ldr	r3, [pc, #32]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2238      	movs	r2, #56	@ 0x38
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b18      	cmp	r3, #24
 8003d92:	d103      	bne.n	8003d9c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003d94:	23fa      	movs	r3, #250	@ 0xfa
 8003d96:	01db      	lsls	r3, r3, #7
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	e001      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003da0:	693b      	ldr	r3, [r7, #16]
}
 8003da2:	0018      	movs	r0, r3
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b006      	add	sp, #24
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	46c0      	nop			@ (mov r8, r8)
 8003dac:	40021000 	.word	0x40021000
 8003db0:	00f42400 	.word	0x00f42400
 8003db4:	007a1200 	.word	0x007a1200

08003db8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003dc0:	2313      	movs	r3, #19
 8003dc2:	18fb      	adds	r3, r7, r3
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dc8:	2312      	movs	r3, #18
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	2200      	movs	r2, #0
 8003dce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	2380      	movs	r3, #128	@ 0x80
 8003dd6:	029b      	lsls	r3, r3, #10
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d100      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003ddc:	e0a3      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dde:	2011      	movs	r0, #17
 8003de0:	183b      	adds	r3, r7, r0
 8003de2:	2200      	movs	r2, #0
 8003de4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de6:	4ba5      	ldr	r3, [pc, #660]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003de8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dea:	2380      	movs	r3, #128	@ 0x80
 8003dec:	055b      	lsls	r3, r3, #21
 8003dee:	4013      	ands	r3, r2
 8003df0:	d110      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df2:	4ba2      	ldr	r3, [pc, #648]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003df4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003df6:	4ba1      	ldr	r3, [pc, #644]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003df8:	2180      	movs	r1, #128	@ 0x80
 8003dfa:	0549      	lsls	r1, r1, #21
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e00:	4b9e      	ldr	r3, [pc, #632]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e04:	2380      	movs	r3, #128	@ 0x80
 8003e06:	055b      	lsls	r3, r3, #21
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0e:	183b      	adds	r3, r7, r0
 8003e10:	2201      	movs	r2, #1
 8003e12:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e14:	4b9a      	ldr	r3, [pc, #616]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4b99      	ldr	r3, [pc, #612]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003e1a:	2180      	movs	r1, #128	@ 0x80
 8003e1c:	0049      	lsls	r1, r1, #1
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e22:	f7fe f9ad 	bl	8002180 <HAL_GetTick>
 8003e26:	0003      	movs	r3, r0
 8003e28:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e2a:	e00b      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2c:	f7fe f9a8 	bl	8002180 <HAL_GetTick>
 8003e30:	0002      	movs	r2, r0
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d904      	bls.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003e3a:	2313      	movs	r3, #19
 8003e3c:	18fb      	adds	r3, r7, r3
 8003e3e:	2203      	movs	r2, #3
 8003e40:	701a      	strb	r2, [r3, #0]
        break;
 8003e42:	e005      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e44:	4b8e      	ldr	r3, [pc, #568]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	2380      	movs	r3, #128	@ 0x80
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d0ed      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003e50:	2313      	movs	r3, #19
 8003e52:	18fb      	adds	r3, r7, r3
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d154      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e5a:	4b88      	ldr	r3, [pc, #544]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e5e:	23c0      	movs	r3, #192	@ 0xc0
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4013      	ands	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d019      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d014      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e76:	4b81      	ldr	r3, [pc, #516]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7a:	4a82      	ldr	r2, [pc, #520]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e80:	4b7e      	ldr	r3, [pc, #504]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e84:	4b7d      	ldr	r3, [pc, #500]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e86:	2180      	movs	r1, #128	@ 0x80
 8003e88:	0249      	lsls	r1, r1, #9
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e8e:	4b7b      	ldr	r3, [pc, #492]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e92:	4b7a      	ldr	r3, [pc, #488]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e94:	497c      	ldr	r1, [pc, #496]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003e96:	400a      	ands	r2, r1
 8003e98:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e9a:	4b78      	ldr	r3, [pc, #480]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d016      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fe f96a 	bl	8002180 <HAL_GetTick>
 8003eac:	0003      	movs	r3, r0
 8003eae:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb0:	e00c      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb2:	f7fe f965 	bl	8002180 <HAL_GetTick>
 8003eb6:	0002      	movs	r2, r0
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	4a73      	ldr	r2, [pc, #460]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d904      	bls.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003ec2:	2313      	movs	r3, #19
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	2203      	movs	r2, #3
 8003ec8:	701a      	strb	r2, [r3, #0]
            break;
 8003eca:	e004      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ecc:	4b6b      	ldr	r3, [pc, #428]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d0ed      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003ed6:	2313      	movs	r3, #19
 8003ed8:	18fb      	adds	r3, r7, r3
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10a      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ee0:	4b66      	ldr	r3, [pc, #408]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee4:	4a67      	ldr	r2, [pc, #412]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	0019      	movs	r1, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eee:	4b63      	ldr	r3, [pc, #396]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ef4:	e00c      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ef6:	2312      	movs	r3, #18
 8003ef8:	18fb      	adds	r3, r7, r3
 8003efa:	2213      	movs	r2, #19
 8003efc:	18ba      	adds	r2, r7, r2
 8003efe:	7812      	ldrb	r2, [r2, #0]
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	e005      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f04:	2312      	movs	r3, #18
 8003f06:	18fb      	adds	r3, r7, r3
 8003f08:	2213      	movs	r2, #19
 8003f0a:	18ba      	adds	r2, r7, r2
 8003f0c:	7812      	ldrb	r2, [r2, #0]
 8003f0e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f10:	2311      	movs	r3, #17
 8003f12:	18fb      	adds	r3, r7, r3
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d105      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f1a:	4b58      	ldr	r3, [pc, #352]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f1e:	4b57      	ldr	r3, [pc, #348]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f20:	495b      	ldr	r1, [pc, #364]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003f22:	400a      	ands	r2, r1
 8003f24:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d009      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f30:	4b52      	ldr	r3, [pc, #328]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f34:	2203      	movs	r2, #3
 8003f36:	4393      	bics	r3, r2
 8003f38:	0019      	movs	r1, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	4b4f      	ldr	r3, [pc, #316]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f40:	430a      	orrs	r2, r1
 8003f42:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2210      	movs	r2, #16
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d009      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f4e:	4b4b      	ldr	r3, [pc, #300]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f52:	4a50      	ldr	r2, [pc, #320]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	0019      	movs	r1, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	4b47      	ldr	r3, [pc, #284]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	2380      	movs	r3, #128	@ 0x80
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d009      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f6e:	4b43      	ldr	r3, [pc, #268]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f72:	4a49      	ldr	r2, [pc, #292]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	0019      	movs	r1, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	695a      	ldr	r2, [r3, #20]
 8003f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	2380      	movs	r3, #128	@ 0x80
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d009      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f92:	4a42      	ldr	r2, [pc, #264]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	0019      	movs	r1, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699a      	ldr	r2, [r3, #24]
 8003f9c:	4b37      	ldr	r3, [pc, #220]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	4013      	ands	r3, r2
 8003faa:	d009      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fac:	4b33      	ldr	r3, [pc, #204]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb0:	4a3b      	ldr	r2, [pc, #236]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	0019      	movs	r1, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	4b30      	ldr	r3, [pc, #192]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	2380      	movs	r3, #128	@ 0x80
 8003fc6:	01db      	lsls	r3, r3, #7
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d015      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	0899      	lsrs	r1, r3, #2
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	4b28      	ldr	r3, [pc, #160]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69da      	ldr	r2, [r3, #28]
 8003fe2:	2380      	movs	r3, #128	@ 0x80
 8003fe4:	05db      	lsls	r3, r3, #23
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d106      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003fea:	4b24      	ldr	r3, [pc, #144]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	4b23      	ldr	r3, [pc, #140]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ff0:	2180      	movs	r1, #128	@ 0x80
 8003ff2:	0249      	lsls	r1, r1, #9
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	2380      	movs	r3, #128	@ 0x80
 8003ffe:	039b      	lsls	r3, r3, #14
 8004000:	4013      	ands	r3, r2
 8004002:	d016      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004004:	4b1d      	ldr	r3, [pc, #116]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004008:	4a26      	ldr	r2, [pc, #152]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800400a:	4013      	ands	r3, r2
 800400c:	0019      	movs	r1, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1a      	ldr	r2, [r3, #32]
 8004012:	4b1a      	ldr	r3, [pc, #104]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004014:	430a      	orrs	r2, r1
 8004016:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1a      	ldr	r2, [r3, #32]
 800401c:	2380      	movs	r3, #128	@ 0x80
 800401e:	03db      	lsls	r3, r3, #15
 8004020:	429a      	cmp	r2, r3
 8004022:	d106      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004024:	4b15      	ldr	r3, [pc, #84]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	4b14      	ldr	r3, [pc, #80]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800402a:	2180      	movs	r1, #128	@ 0x80
 800402c:	0449      	lsls	r1, r1, #17
 800402e:	430a      	orrs	r2, r1
 8004030:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	2380      	movs	r3, #128	@ 0x80
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	4013      	ands	r3, r2
 800403c:	d016      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800403e:	4b0f      	ldr	r3, [pc, #60]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004042:	4a19      	ldr	r2, [pc, #100]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004044:	4013      	ands	r3, r2
 8004046:	0019      	movs	r1, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	4b0b      	ldr	r3, [pc, #44]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800404e:	430a      	orrs	r2, r1
 8004050:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	2380      	movs	r3, #128	@ 0x80
 8004058:	01db      	lsls	r3, r3, #7
 800405a:	429a      	cmp	r2, r3
 800405c:	d106      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800405e:	4b07      	ldr	r3, [pc, #28]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	4b06      	ldr	r3, [pc, #24]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004064:	2180      	movs	r1, #128	@ 0x80
 8004066:	0249      	lsls	r1, r1, #9
 8004068:	430a      	orrs	r2, r1
 800406a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800406c:	2312      	movs	r3, #18
 800406e:	18fb      	adds	r3, r7, r3
 8004070:	781b      	ldrb	r3, [r3, #0]
}
 8004072:	0018      	movs	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	b006      	add	sp, #24
 8004078:	bd80      	pop	{r7, pc}
 800407a:	46c0      	nop			@ (mov r8, r8)
 800407c:	40021000 	.word	0x40021000
 8004080:	40007000 	.word	0x40007000
 8004084:	fffffcff 	.word	0xfffffcff
 8004088:	fffeffff 	.word	0xfffeffff
 800408c:	00001388 	.word	0x00001388
 8004090:	efffffff 	.word	0xefffffff
 8004094:	fffff3ff 	.word	0xfffff3ff
 8004098:	fff3ffff 	.word	0xfff3ffff
 800409c:	ffcfffff 	.word	0xffcfffff
 80040a0:	ffffcfff 	.word	0xffffcfff
 80040a4:	ffbfffff 	.word	0xffbfffff
 80040a8:	ffff3fff 	.word	0xffff3fff

080040ac <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 80040ac:	b590      	push	{r4, r7, lr}
 80040ae:	b08b      	sub	sp, #44	@ 0x2c
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 80040b4:	2427      	movs	r4, #39	@ 0x27
 80040b6:	193b      	adds	r3, r7, r4
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
  FlagStatus       backupchanged = RESET;
 80040bc:	2326      	movs	r3, #38	@ 0x26
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 80040c4:	4b31      	ldr	r3, [pc, #196]	@ (800418c <HAL_RCCEx_EnableLSCO+0xe0>)
 80040c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040c8:	4b30      	ldr	r3, [pc, #192]	@ (800418c <HAL_RCCEx_EnableLSCO+0xe0>)
 80040ca:	2101      	movs	r1, #1
 80040cc:	430a      	orrs	r2, r1
 80040ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80040d0:	4b2e      	ldr	r3, [pc, #184]	@ (800418c <HAL_RCCEx_EnableLSCO+0xe0>)
 80040d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d4:	2201      	movs	r2, #1
 80040d6:	4013      	ands	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 80040dc:	2110      	movs	r1, #16
 80040de:	187b      	adds	r3, r7, r1
 80040e0:	2204      	movs	r2, #4
 80040e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040e4:	187b      	adds	r3, r7, r1
 80040e6:	2203      	movs	r2, #3
 80040e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ea:	187b      	adds	r3, r7, r1
 80040ec:	2203      	movs	r2, #3
 80040ee:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f0:	187b      	adds	r3, r7, r1
 80040f2:	2200      	movs	r2, #0
 80040f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 80040f6:	187a      	adds	r2, r7, r1
 80040f8:	23a0      	movs	r3, #160	@ 0xa0
 80040fa:	05db      	lsls	r3, r3, #23
 80040fc:	0011      	movs	r1, r2
 80040fe:	0018      	movs	r0, r3
 8004100:	f7fe f926 	bl	8002350 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004104:	4b21      	ldr	r3, [pc, #132]	@ (800418c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004106:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004108:	2380      	movs	r3, #128	@ 0x80
 800410a:	055b      	lsls	r3, r3, #21
 800410c:	4013      	ands	r3, r2
 800410e:	d110      	bne.n	8004132 <HAL_RCCEx_EnableLSCO+0x86>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004110:	4b1e      	ldr	r3, [pc, #120]	@ (800418c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004112:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004114:	4b1d      	ldr	r3, [pc, #116]	@ (800418c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004116:	2180      	movs	r1, #128	@ 0x80
 8004118:	0549      	lsls	r1, r1, #21
 800411a:	430a      	orrs	r2, r1
 800411c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800411e:	4b1b      	ldr	r3, [pc, #108]	@ (800418c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004120:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004122:	2380      	movs	r3, #128	@ 0x80
 8004124:	055b      	lsls	r3, r3, #21
 8004126:	4013      	ands	r3, r2
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 800412c:	193b      	adds	r3, r7, r4
 800412e:	2201      	movs	r2, #1
 8004130:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004132:	4b17      	ldr	r3, [pc, #92]	@ (8004190 <HAL_RCCEx_EnableLSCO+0xe4>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	2380      	movs	r3, #128	@ 0x80
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4013      	ands	r3, r2
 800413c:	d105      	bne.n	800414a <HAL_RCCEx_EnableLSCO+0x9e>
  {
    HAL_PWR_EnableBkUpAccess();
 800413e:	f7ff f939 	bl	80033b4 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 8004142:	2326      	movs	r3, #38	@ 0x26
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	2201      	movs	r2, #1
 8004148:	701a      	strb	r2, [r3, #0]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 800414a:	4b10      	ldr	r3, [pc, #64]	@ (800418c <HAL_RCCEx_EnableLSCO+0xe0>)
 800414c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414e:	4a11      	ldr	r2, [pc, #68]	@ (8004194 <HAL_RCCEx_EnableLSCO+0xe8>)
 8004150:	401a      	ands	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	431a      	orrs	r2, r3
 8004156:	4b0d      	ldr	r3, [pc, #52]	@ (800418c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004158:	2180      	movs	r1, #128	@ 0x80
 800415a:	0449      	lsls	r1, r1, #17
 800415c:	430a      	orrs	r2, r1
 800415e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (backupchanged == SET)
 8004160:	2326      	movs	r3, #38	@ 0x26
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_RCCEx_EnableLSCO+0xc2>
  {
    HAL_PWR_DisableBkUpAccess();
 800416a:	f7ff f931 	bl	80033d0 <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 800416e:	2327      	movs	r3, #39	@ 0x27
 8004170:	18fb      	adds	r3, r7, r3
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d105      	bne.n	8004184 <HAL_RCCEx_EnableLSCO+0xd8>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8004178:	4b04      	ldr	r3, [pc, #16]	@ (800418c <HAL_RCCEx_EnableLSCO+0xe0>)
 800417a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800417c:	4b03      	ldr	r3, [pc, #12]	@ (800418c <HAL_RCCEx_EnableLSCO+0xe0>)
 800417e:	4906      	ldr	r1, [pc, #24]	@ (8004198 <HAL_RCCEx_EnableLSCO+0xec>)
 8004180:	400a      	ands	r2, r1
 8004182:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8004184:	46c0      	nop			@ (mov r8, r8)
 8004186:	46bd      	mov	sp, r7
 8004188:	b00b      	add	sp, #44	@ 0x2c
 800418a:	bd90      	pop	{r4, r7, pc}
 800418c:	40021000 	.word	0x40021000
 8004190:	40007000 	.word	0x40007000
 8004194:	fcffffff 	.word	0xfcffffff
 8004198:	efffffff 	.word	0xefffffff

0800419c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800419c:	b5b0      	push	{r4, r5, r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80041a4:	230f      	movs	r3, #15
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	2201      	movs	r2, #1
 80041aa:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d100      	bne.n	80041b4 <HAL_RTC_Init+0x18>
 80041b2:	e08c      	b.n	80042ce <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2229      	movs	r2, #41	@ 0x29
 80041b8:	5c9b      	ldrb	r3, [r3, r2]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10b      	bne.n	80041d8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2228      	movs	r2, #40	@ 0x28
 80041c4:	2100      	movs	r1, #0
 80041c6:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2288      	movs	r2, #136	@ 0x88
 80041cc:	0212      	lsls	r2, r2, #8
 80041ce:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	0018      	movs	r0, r3
 80041d4:	f7fd fe20 	bl	8001e18 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2229      	movs	r2, #41	@ 0x29
 80041dc:	2102      	movs	r1, #2
 80041de:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2210      	movs	r2, #16
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b10      	cmp	r3, #16
 80041ec:	d062      	beq.n	80042b4 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	22ca      	movs	r2, #202	@ 0xca
 80041f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2253      	movs	r2, #83	@ 0x53
 80041fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80041fe:	250f      	movs	r5, #15
 8004200:	197c      	adds	r4, r7, r5
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	0018      	movs	r0, r3
 8004206:	f000 fcb9 	bl	8004b7c <RTC_EnterInitMode>
 800420a:	0003      	movs	r3, r0
 800420c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800420e:	0028      	movs	r0, r5
 8004210:	183b      	adds	r3, r7, r0
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d12c      	bne.n	8004272 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	492e      	ldr	r1, [pc, #184]	@ (80042dc <HAL_RTC_Init+0x140>)
 8004224:	400a      	ands	r2, r1
 8004226:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6999      	ldr	r1, [r3, #24]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6912      	ldr	r2, [r2, #16]
 800424e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6919      	ldr	r1, [r3, #16]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	041a      	lsls	r2, r3, #16
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004264:	183c      	adds	r4, r7, r0
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	0018      	movs	r0, r3
 800426a:	f000 fcc9 	bl	8004c00 <RTC_ExitInitMode>
 800426e:	0003      	movs	r3, r0
 8004270:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004272:	230f      	movs	r3, #15
 8004274:	18fb      	adds	r3, r7, r3
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d116      	bne.n	80042aa <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	00d2      	lsls	r2, r2, #3
 8004288:	08d2      	lsrs	r2, r2, #3
 800428a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6999      	ldr	r1, [r3, #24]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	22ff      	movs	r2, #255	@ 0xff
 80042b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80042b2:	e003      	b.n	80042bc <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80042b4:	230f      	movs	r3, #15
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	2200      	movs	r2, #0
 80042ba:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80042bc:	230f      	movs	r3, #15
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d103      	bne.n	80042ce <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2229      	movs	r2, #41	@ 0x29
 80042ca:	2101      	movs	r1, #1
 80042cc:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80042ce:	230f      	movs	r3, #15
 80042d0:	18fb      	adds	r3, r7, r3
 80042d2:	781b      	ldrb	r3, [r3, #0]
}
 80042d4:	0018      	movs	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b004      	add	sp, #16
 80042da:	bdb0      	pop	{r4, r5, r7, pc}
 80042dc:	fb8fffbf 	.word	0xfb8fffbf

080042e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80042e0:	b5b0      	push	{r4, r5, r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2228      	movs	r2, #40	@ 0x28
 80042f0:	5c9b      	ldrb	r3, [r3, r2]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_RTC_SetTime+0x1a>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e092      	b.n	8004420 <HAL_RTC_SetTime+0x140>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2228      	movs	r2, #40	@ 0x28
 80042fe:	2101      	movs	r1, #1
 8004300:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2229      	movs	r2, #41	@ 0x29
 8004306:	2102      	movs	r1, #2
 8004308:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	22ca      	movs	r2, #202	@ 0xca
 8004310:	625a      	str	r2, [r3, #36]	@ 0x24
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2253      	movs	r2, #83	@ 0x53
 8004318:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800431a:	2513      	movs	r5, #19
 800431c:	197c      	adds	r4, r7, r5
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	0018      	movs	r0, r3
 8004322:	f000 fc2b 	bl	8004b7c <RTC_EnterInitMode>
 8004326:	0003      	movs	r3, r0
 8004328:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800432a:	197b      	adds	r3, r7, r5
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d162      	bne.n	80043f8 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d125      	bne.n	8004384 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	2240      	movs	r2, #64	@ 0x40
 8004340:	4013      	ands	r3, r2
 8004342:	d102      	bne.n	800434a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2200      	movs	r2, #0
 8004348:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	0018      	movs	r0, r3
 8004350:	f000 fc9a 	bl	8004c88 <RTC_ByteToBcd2>
 8004354:	0003      	movs	r3, r0
 8004356:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	785b      	ldrb	r3, [r3, #1]
 800435c:	0018      	movs	r0, r3
 800435e:	f000 fc93 	bl	8004c88 <RTC_ByteToBcd2>
 8004362:	0003      	movs	r3, r0
 8004364:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004366:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	789b      	ldrb	r3, [r3, #2]
 800436c:	0018      	movs	r0, r3
 800436e:	f000 fc8b 	bl	8004c88 <RTC_ByteToBcd2>
 8004372:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004374:	0022      	movs	r2, r4
 8004376:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	78db      	ldrb	r3, [r3, #3]
 800437c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	e017      	b.n	80043b4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	2240      	movs	r2, #64	@ 0x40
 800438c:	4013      	ands	r3, r2
 800438e:	d102      	bne.n	8004396 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2200      	movs	r2, #0
 8004394:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	785b      	ldrb	r3, [r3, #1]
 80043a0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80043a2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80043a8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	78db      	ldrb	r3, [r3, #3]
 80043ae:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	491b      	ldr	r1, [pc, #108]	@ (8004428 <HAL_RTC_SetTime+0x148>)
 80043bc:	400a      	ands	r2, r1
 80043be:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699a      	ldr	r2, [r3, #24]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4918      	ldr	r1, [pc, #96]	@ (800442c <HAL_RTC_SetTime+0x14c>)
 80043cc:	400a      	ands	r2, r1
 80043ce:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6999      	ldr	r1, [r3, #24]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	431a      	orrs	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80043e8:	2313      	movs	r3, #19
 80043ea:	18fc      	adds	r4, r7, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	0018      	movs	r0, r3
 80043f0:	f000 fc06 	bl	8004c00 <RTC_ExitInitMode>
 80043f4:	0003      	movs	r3, r0
 80043f6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	22ff      	movs	r2, #255	@ 0xff
 80043fe:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8004400:	2313      	movs	r3, #19
 8004402:	18fb      	adds	r3, r7, r3
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d103      	bne.n	8004412 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2229      	movs	r2, #41	@ 0x29
 800440e:	2101      	movs	r1, #1
 8004410:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2228      	movs	r2, #40	@ 0x28
 8004416:	2100      	movs	r1, #0
 8004418:	5499      	strb	r1, [r3, r2]

  return status;
 800441a:	2313      	movs	r3, #19
 800441c:	18fb      	adds	r3, r7, r3
 800441e:	781b      	ldrb	r3, [r3, #0]
}
 8004420:	0018      	movs	r0, r3
 8004422:	46bd      	mov	sp, r7
 8004424:	b006      	add	sp, #24
 8004426:	bdb0      	pop	{r4, r5, r7, pc}
 8004428:	007f7f7f 	.word	0x007f7f7f
 800442c:	fffbffff 	.word	0xfffbffff

08004430 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	045b      	lsls	r3, r3, #17
 800444e:	0c5a      	lsrs	r2, r3, #17
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a22      	ldr	r2, [pc, #136]	@ (80044e4 <HAL_RTC_GetTime+0xb4>)
 800445c:	4013      	ands	r3, r2
 800445e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	0c1b      	lsrs	r3, r3, #16
 8004464:	b2db      	uxtb	r3, r3
 8004466:	223f      	movs	r2, #63	@ 0x3f
 8004468:	4013      	ands	r3, r2
 800446a:	b2da      	uxtb	r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	0a1b      	lsrs	r3, r3, #8
 8004474:	b2db      	uxtb	r3, r3
 8004476:	227f      	movs	r2, #127	@ 0x7f
 8004478:	4013      	ands	r3, r2
 800447a:	b2da      	uxtb	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	227f      	movs	r2, #127	@ 0x7f
 8004486:	4013      	ands	r3, r2
 8004488:	b2da      	uxtb	r2, r3
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	0d9b      	lsrs	r3, r3, #22
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2201      	movs	r2, #1
 8004496:	4013      	ands	r3, r2
 8004498:	b2da      	uxtb	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d11a      	bne.n	80044da <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	0018      	movs	r0, r3
 80044aa:	f000 fc15 	bl	8004cd8 <RTC_Bcd2ToByte>
 80044ae:	0003      	movs	r3, r0
 80044b0:	001a      	movs	r2, r3
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	785b      	ldrb	r3, [r3, #1]
 80044ba:	0018      	movs	r0, r3
 80044bc:	f000 fc0c 	bl	8004cd8 <RTC_Bcd2ToByte>
 80044c0:	0003      	movs	r3, r0
 80044c2:	001a      	movs	r2, r3
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	789b      	ldrb	r3, [r3, #2]
 80044cc:	0018      	movs	r0, r3
 80044ce:	f000 fc03 	bl	8004cd8 <RTC_Bcd2ToByte>
 80044d2:	0003      	movs	r3, r0
 80044d4:	001a      	movs	r2, r3
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	0018      	movs	r0, r3
 80044de:	46bd      	mov	sp, r7
 80044e0:	b006      	add	sp, #24
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	007f7f7f 	.word	0x007f7f7f

080044e8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80044e8:	b5b0      	push	{r4, r5, r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2228      	movs	r2, #40	@ 0x28
 80044f8:	5c9b      	ldrb	r3, [r3, r2]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_RTC_SetDate+0x1a>
 80044fe:	2302      	movs	r3, #2
 8004500:	e07e      	b.n	8004600 <HAL_RTC_SetDate+0x118>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2228      	movs	r2, #40	@ 0x28
 8004506:	2101      	movs	r1, #1
 8004508:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2229      	movs	r2, #41	@ 0x29
 800450e:	2102      	movs	r1, #2
 8004510:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10e      	bne.n	8004536 <HAL_RTC_SetDate+0x4e>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	785b      	ldrb	r3, [r3, #1]
 800451c:	001a      	movs	r2, r3
 800451e:	2310      	movs	r3, #16
 8004520:	4013      	ands	r3, r2
 8004522:	d008      	beq.n	8004536 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	785b      	ldrb	r3, [r3, #1]
 8004528:	2210      	movs	r2, #16
 800452a:	4393      	bics	r3, r2
 800452c:	b2db      	uxtb	r3, r3
 800452e:	330a      	adds	r3, #10
 8004530:	b2da      	uxtb	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d11c      	bne.n	8004576 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	78db      	ldrb	r3, [r3, #3]
 8004540:	0018      	movs	r0, r3
 8004542:	f000 fba1 	bl	8004c88 <RTC_ByteToBcd2>
 8004546:	0003      	movs	r3, r0
 8004548:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	785b      	ldrb	r3, [r3, #1]
 800454e:	0018      	movs	r0, r3
 8004550:	f000 fb9a 	bl	8004c88 <RTC_ByteToBcd2>
 8004554:	0003      	movs	r3, r0
 8004556:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004558:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	789b      	ldrb	r3, [r3, #2]
 800455e:	0018      	movs	r0, r3
 8004560:	f000 fb92 	bl	8004c88 <RTC_ByteToBcd2>
 8004564:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004566:	0022      	movs	r2, r4
 8004568:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004570:	4313      	orrs	r3, r2
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	e00e      	b.n	8004594 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	78db      	ldrb	r3, [r3, #3]
 800457a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	785b      	ldrb	r3, [r3, #1]
 8004580:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004582:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004588:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004590:	4313      	orrs	r3, r2
 8004592:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	22ca      	movs	r2, #202	@ 0xca
 800459a:	625a      	str	r2, [r3, #36]	@ 0x24
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2253      	movs	r2, #83	@ 0x53
 80045a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80045a4:	2513      	movs	r5, #19
 80045a6:	197c      	adds	r4, r7, r5
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	0018      	movs	r0, r3
 80045ac:	f000 fae6 	bl	8004b7c <RTC_EnterInitMode>
 80045b0:	0003      	movs	r3, r0
 80045b2:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80045b4:	0028      	movs	r0, r5
 80045b6:	183b      	adds	r3, r7, r0
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10c      	bne.n	80045d8 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	4910      	ldr	r1, [pc, #64]	@ (8004608 <HAL_RTC_SetDate+0x120>)
 80045c6:	400a      	ands	r2, r1
 80045c8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80045ca:	183c      	adds	r4, r7, r0
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	0018      	movs	r0, r3
 80045d0:	f000 fb16 	bl	8004c00 <RTC_ExitInitMode>
 80045d4:	0003      	movs	r3, r0
 80045d6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	22ff      	movs	r2, #255	@ 0xff
 80045de:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80045e0:	2313      	movs	r3, #19
 80045e2:	18fb      	adds	r3, r7, r3
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d103      	bne.n	80045f2 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2229      	movs	r2, #41	@ 0x29
 80045ee:	2101      	movs	r1, #1
 80045f0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2228      	movs	r2, #40	@ 0x28
 80045f6:	2100      	movs	r1, #0
 80045f8:	5499      	strb	r1, [r3, r2]

  return status;
 80045fa:	2313      	movs	r3, #19
 80045fc:	18fb      	adds	r3, r7, r3
 80045fe:	781b      	ldrb	r3, [r3, #0]
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	b006      	add	sp, #24
 8004606:	bdb0      	pop	{r4, r5, r7, pc}
 8004608:	00ffff3f 	.word	0x00ffff3f

0800460c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4a21      	ldr	r2, [pc, #132]	@ (80046a4 <HAL_RTC_GetDate+0x98>)
 8004620:	4013      	ands	r3, r2
 8004622:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	0c1b      	lsrs	r3, r3, #16
 8004628:	b2da      	uxtb	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	0a1b      	lsrs	r3, r3, #8
 8004632:	b2db      	uxtb	r3, r3
 8004634:	221f      	movs	r2, #31
 8004636:	4013      	ands	r3, r2
 8004638:	b2da      	uxtb	r2, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	223f      	movs	r2, #63	@ 0x3f
 8004644:	4013      	ands	r3, r2
 8004646:	b2da      	uxtb	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	0b5b      	lsrs	r3, r3, #13
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2207      	movs	r2, #7
 8004654:	4013      	ands	r3, r2
 8004656:	b2da      	uxtb	r2, r3
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d11a      	bne.n	8004698 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	78db      	ldrb	r3, [r3, #3]
 8004666:	0018      	movs	r0, r3
 8004668:	f000 fb36 	bl	8004cd8 <RTC_Bcd2ToByte>
 800466c:	0003      	movs	r3, r0
 800466e:	001a      	movs	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	0018      	movs	r0, r3
 800467a:	f000 fb2d 	bl	8004cd8 <RTC_Bcd2ToByte>
 800467e:	0003      	movs	r3, r0
 8004680:	001a      	movs	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	789b      	ldrb	r3, [r3, #2]
 800468a:	0018      	movs	r0, r3
 800468c:	f000 fb24 	bl	8004cd8 <RTC_Bcd2ToByte>
 8004690:	0003      	movs	r3, r0
 8004692:	001a      	movs	r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	0018      	movs	r0, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	b006      	add	sp, #24
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	46c0      	nop			@ (mov r8, r8)
 80046a4:	00ffff3f 	.word	0x00ffff3f

080046a8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80046a8:	b590      	push	{r4, r7, lr}
 80046aa:	b089      	sub	sp, #36	@ 0x24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2228      	movs	r2, #40	@ 0x28
 80046b8:	5c9b      	ldrb	r3, [r3, r2]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_RTC_SetAlarm_IT+0x1a>
 80046be:	2302      	movs	r3, #2
 80046c0:	e127      	b.n	8004912 <HAL_RTC_SetAlarm_IT+0x26a>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2228      	movs	r2, #40	@ 0x28
 80046c6:	2101      	movs	r1, #1
 80046c8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2229      	movs	r2, #41	@ 0x29
 80046ce:	2102      	movs	r1, #2
 80046d0:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d136      	bne.n	8004746 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	2240      	movs	r2, #64	@ 0x40
 80046e0:	4013      	ands	r3, r2
 80046e2:	d102      	bne.n	80046ea <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2200      	movs	r2, #0
 80046e8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	0018      	movs	r0, r3
 80046f0:	f000 faca 	bl	8004c88 <RTC_ByteToBcd2>
 80046f4:	0003      	movs	r3, r0
 80046f6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	785b      	ldrb	r3, [r3, #1]
 80046fc:	0018      	movs	r0, r3
 80046fe:	f000 fac3 	bl	8004c88 <RTC_ByteToBcd2>
 8004702:	0003      	movs	r3, r0
 8004704:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004706:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	789b      	ldrb	r3, [r3, #2]
 800470c:	0018      	movs	r0, r3
 800470e:	f000 fabb 	bl	8004c88 <RTC_ByteToBcd2>
 8004712:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004714:	0022      	movs	r2, r4
 8004716:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	78db      	ldrb	r3, [r3, #3]
 800471c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800471e:	431a      	orrs	r2, r3
 8004720:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2220      	movs	r2, #32
 8004726:	5c9b      	ldrb	r3, [r3, r2]
 8004728:	0018      	movs	r0, r3
 800472a:	f000 faad 	bl	8004c88 <RTC_ByteToBcd2>
 800472e:	0003      	movs	r3, r0
 8004730:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004732:	0022      	movs	r2, r4
 8004734:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800473a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004740:	4313      	orrs	r3, r2
 8004742:	61fb      	str	r3, [r7, #28]
 8004744:	e022      	b.n	800478c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	2240      	movs	r2, #64	@ 0x40
 800474e:	4013      	ands	r3, r2
 8004750:	d102      	bne.n	8004758 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2200      	movs	r2, #0
 8004756:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	785b      	ldrb	r3, [r3, #1]
 8004762:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004764:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800476a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	78db      	ldrb	r3, [r3, #3]
 8004770:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004772:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2120      	movs	r1, #32
 8004778:	5c5b      	ldrb	r3, [r3, r1]
 800477a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800477c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004782:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004788:	4313      	orrs	r3, r2
 800478a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	4313      	orrs	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	22ca      	movs	r2, #202	@ 0xca
 800479e:	625a      	str	r2, [r3, #36]	@ 0x24
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2253      	movs	r2, #83	@ 0x53
 80047a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047ac:	2380      	movs	r3, #128	@ 0x80
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d14c      	bne.n	800484e <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4957      	ldr	r1, [pc, #348]	@ (800491c <HAL_RTC_SetAlarm_IT+0x274>)
 80047c0:	400a      	ands	r2, r1
 80047c2:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2101      	movs	r1, #1
 80047d0:	430a      	orrs	r2, r1
 80047d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80047d4:	f7fd fcd4 	bl	8002180 <HAL_GetTick>
 80047d8:	0003      	movs	r3, r0
 80047da:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80047dc:	e016      	b.n	800480c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80047de:	f7fd fccf 	bl	8002180 <HAL_GetTick>
 80047e2:	0002      	movs	r2, r0
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	1ad2      	subs	r2, r2, r3
 80047e8:	23fa      	movs	r3, #250	@ 0xfa
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d90d      	bls.n	800480c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	22ff      	movs	r2, #255	@ 0xff
 80047f6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2229      	movs	r2, #41	@ 0x29
 80047fc:	2103      	movs	r1, #3
 80047fe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2228      	movs	r2, #40	@ 0x28
 8004804:	2100      	movs	r1, #0
 8004806:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e082      	b.n	8004912 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	4013      	ands	r3, r2
 8004816:	d0e2      	beq.n	80047de <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69fa      	ldr	r2, [r7, #28]
 800481e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699a      	ldr	r2, [r3, #24]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2180      	movs	r1, #128	@ 0x80
 8004834:	0049      	lsls	r1, r1, #1
 8004836:	430a      	orrs	r2, r1
 8004838:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699a      	ldr	r2, [r3, #24]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2180      	movs	r1, #128	@ 0x80
 8004846:	0149      	lsls	r1, r1, #5
 8004848:	430a      	orrs	r2, r1
 800484a:	619a      	str	r2, [r3, #24]
 800484c:	e04b      	b.n	80048e6 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	699a      	ldr	r2, [r3, #24]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4931      	ldr	r1, [pc, #196]	@ (8004920 <HAL_RTC_SetAlarm_IT+0x278>)
 800485a:	400a      	ands	r2, r1
 800485c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2102      	movs	r1, #2
 800486a:	430a      	orrs	r2, r1
 800486c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800486e:	f7fd fc87 	bl	8002180 <HAL_GetTick>
 8004872:	0003      	movs	r3, r0
 8004874:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004876:	e016      	b.n	80048a6 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004878:	f7fd fc82 	bl	8002180 <HAL_GetTick>
 800487c:	0002      	movs	r2, r0
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	1ad2      	subs	r2, r2, r3
 8004882:	23fa      	movs	r3, #250	@ 0xfa
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	429a      	cmp	r2, r3
 8004888:	d90d      	bls.n	80048a6 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	22ff      	movs	r2, #255	@ 0xff
 8004890:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2229      	movs	r2, #41	@ 0x29
 8004896:	2103      	movs	r1, #3
 8004898:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2228      	movs	r2, #40	@ 0x28
 800489e:	2100      	movs	r1, #0
 80048a0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e035      	b.n	8004912 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	2202      	movs	r2, #2
 80048ae:	4013      	ands	r3, r2
 80048b0:	d0e2      	beq.n	8004878 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699a      	ldr	r2, [r3, #24]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2180      	movs	r1, #128	@ 0x80
 80048ce:	0089      	lsls	r1, r1, #2
 80048d0:	430a      	orrs	r2, r1
 80048d2:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699a      	ldr	r2, [r3, #24]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2180      	movs	r1, #128	@ 0x80
 80048e0:	0189      	lsls	r1, r1, #6
 80048e2:	430a      	orrs	r2, r1
 80048e4:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80048e6:	4a0f      	ldr	r2, [pc, #60]	@ (8004924 <HAL_RTC_SetAlarm_IT+0x27c>)
 80048e8:	2380      	movs	r3, #128	@ 0x80
 80048ea:	58d3      	ldr	r3, [r2, r3]
 80048ec:	490d      	ldr	r1, [pc, #52]	@ (8004924 <HAL_RTC_SetAlarm_IT+0x27c>)
 80048ee:	2280      	movs	r2, #128	@ 0x80
 80048f0:	0312      	lsls	r2, r2, #12
 80048f2:	4313      	orrs	r3, r2
 80048f4:	2280      	movs	r2, #128	@ 0x80
 80048f6:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	22ff      	movs	r2, #255	@ 0xff
 80048fe:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2229      	movs	r2, #41	@ 0x29
 8004904:	2101      	movs	r1, #1
 8004906:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2228      	movs	r2, #40	@ 0x28
 800490c:	2100      	movs	r1, #0
 800490e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	0018      	movs	r0, r3
 8004914:	46bd      	mov	sp, r7
 8004916:	b009      	add	sp, #36	@ 0x24
 8004918:	bd90      	pop	{r4, r7, pc}
 800491a:	46c0      	nop			@ (mov r8, r8)
 800491c:	fffffeff 	.word	0xfffffeff
 8004920:	fffffdff 	.word	0xfffffdff
 8004924:	40021800 	.word	0x40021800

08004928 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	2380      	movs	r3, #128	@ 0x80
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	429a      	cmp	r2, r3
 800493e:	d144      	bne.n	80049ca <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2280      	movs	r2, #128	@ 0x80
 8004944:	0052      	lsls	r2, r2, #1
 8004946:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494e:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004956:	045b      	lsls	r3, r3, #17
 8004958:	0c5b      	lsrs	r3, r3, #17
 800495a:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	0c1b      	lsrs	r3, r3, #16
 8004960:	b2db      	uxtb	r3, r3
 8004962:	223f      	movs	r2, #63	@ 0x3f
 8004964:	4013      	ands	r3, r2
 8004966:	b2da      	uxtb	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	b2db      	uxtb	r3, r3
 8004972:	227f      	movs	r2, #127	@ 0x7f
 8004974:	4013      	ands	r3, r2
 8004976:	b2da      	uxtb	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	227f      	movs	r2, #127	@ 0x7f
 8004982:	4013      	ands	r3, r2
 8004984:	b2da      	uxtb	r2, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	0d9b      	lsrs	r3, r3, #22
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2201      	movs	r2, #1
 8004992:	4013      	ands	r3, r2
 8004994:	b2da      	uxtb	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	0e1b      	lsrs	r3, r3, #24
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	223f      	movs	r2, #63	@ 0x3f
 80049a8:	4013      	ands	r3, r2
 80049aa:	b2d9      	uxtb	r1, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2220      	movs	r2, #32
 80049b0:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	2380      	movs	r3, #128	@ 0x80
 80049b6:	05db      	lsls	r3, r3, #23
 80049b8:	401a      	ands	r2, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	4a3b      	ldr	r2, [pc, #236]	@ (8004ab0 <HAL_RTC_GetAlarm+0x188>)
 80049c2:	401a      	ands	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	615a      	str	r2, [r3, #20]
 80049c8:	e043      	b.n	8004a52 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2280      	movs	r2, #128	@ 0x80
 80049ce:	0092      	lsls	r2, r2, #2
 80049d0:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049d8:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e0:	045b      	lsls	r3, r3, #17
 80049e2:	0c5b      	lsrs	r3, r3, #17
 80049e4:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	0c1b      	lsrs	r3, r3, #16
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	223f      	movs	r2, #63	@ 0x3f
 80049ee:	4013      	ands	r3, r2
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	0a1b      	lsrs	r3, r3, #8
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	227f      	movs	r2, #127	@ 0x7f
 80049fe:	4013      	ands	r3, r2
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	227f      	movs	r2, #127	@ 0x7f
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	0d9b      	lsrs	r3, r3, #22
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	0e1b      	lsrs	r3, r3, #24
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	223f      	movs	r2, #63	@ 0x3f
 8004a32:	4013      	ands	r3, r2
 8004a34:	b2d9      	uxtb	r1, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	2380      	movs	r3, #128	@ 0x80
 8004a40:	05db      	lsls	r3, r3, #23
 8004a42:	401a      	ands	r2, r3
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	4a19      	ldr	r2, [pc, #100]	@ (8004ab0 <HAL_RTC_GetAlarm+0x188>)
 8004a4c:	401a      	ands	r2, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d125      	bne.n	8004aa4 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f000 f93b 	bl	8004cd8 <RTC_Bcd2ToByte>
 8004a62:	0003      	movs	r3, r0
 8004a64:	001a      	movs	r2, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	785b      	ldrb	r3, [r3, #1]
 8004a6e:	0018      	movs	r0, r3
 8004a70:	f000 f932 	bl	8004cd8 <RTC_Bcd2ToByte>
 8004a74:	0003      	movs	r3, r0
 8004a76:	001a      	movs	r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	789b      	ldrb	r3, [r3, #2]
 8004a80:	0018      	movs	r0, r3
 8004a82:	f000 f929 	bl	8004cd8 <RTC_Bcd2ToByte>
 8004a86:	0003      	movs	r3, r0
 8004a88:	001a      	movs	r2, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2220      	movs	r2, #32
 8004a92:	5c9b      	ldrb	r3, [r3, r2]
 8004a94:	0018      	movs	r0, r3
 8004a96:	f000 f91f 	bl	8004cd8 <RTC_Bcd2ToByte>
 8004a9a:	0003      	movs	r3, r0
 8004a9c:	0019      	movs	r1, r3
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b006      	add	sp, #24
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	46c0      	nop			@ (mov r8, r8)
 8004ab0:	80808080 	.word	0x80808080

08004ab4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	2380      	movs	r3, #128	@ 0x80
 8004ac4:	015b      	lsls	r3, r3, #5
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d011      	beq.n	8004aee <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	d00b      	beq.n	8004aee <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f7fc fb41 	bl	8001170 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	699a      	ldr	r2, [r3, #24]
 8004af4:	2380      	movs	r3, #128	@ 0x80
 8004af6:	019b      	lsls	r3, r3, #6
 8004af8:	4013      	ands	r3, r2
 8004afa:	d011      	beq.n	8004b20 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b02:	2202      	movs	r2, #2
 8004b04:	4013      	ands	r3, r2
 8004b06:	d00b      	beq.n	8004b20 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2102      	movs	r1, #2
 8004b14:	430a      	orrs	r2, r1
 8004b16:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f000 f9a4 	bl	8004e68 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2229      	movs	r2, #41	@ 0x29
 8004b24:	2101      	movs	r1, #1
 8004b26:	5499      	strb	r1, [r3, r2]
}
 8004b28:	46c0      	nop			@ (mov r8, r8)
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	b002      	add	sp, #8
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a0e      	ldr	r2, [pc, #56]	@ (8004b78 <HAL_RTC_WaitForSynchro+0x48>)
 8004b3e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004b40:	f7fd fb1e 	bl	8002180 <HAL_GetTick>
 8004b44:	0003      	movs	r3, r0
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004b48:	e00a      	b.n	8004b60 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004b4a:	f7fd fb19 	bl	8002180 <HAL_GetTick>
 8004b4e:	0002      	movs	r2, r0
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1ad2      	subs	r2, r2, r3
 8004b54:	23fa      	movs	r3, #250	@ 0xfa
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d901      	bls.n	8004b60 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e006      	b.n	8004b6e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	2220      	movs	r2, #32
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d0ee      	beq.n	8004b4a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	0018      	movs	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	b004      	add	sp, #16
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	46c0      	nop			@ (mov r8, r8)
 8004b78:	0001005f 	.word	0x0001005f

08004b7c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004b84:	230f      	movs	r3, #15
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	2240      	movs	r2, #64	@ 0x40
 8004b94:	4013      	ands	r3, r2
 8004b96:	d12c      	bne.n	8004bf2 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2180      	movs	r1, #128	@ 0x80
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004ba8:	f7fd faea 	bl	8002180 <HAL_GetTick>
 8004bac:	0003      	movs	r3, r0
 8004bae:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004bb0:	e014      	b.n	8004bdc <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004bb2:	f7fd fae5 	bl	8002180 <HAL_GetTick>
 8004bb6:	0002      	movs	r2, r0
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	1ad2      	subs	r2, r2, r3
 8004bbc:	200f      	movs	r0, #15
 8004bbe:	183b      	adds	r3, r7, r0
 8004bc0:	1839      	adds	r1, r7, r0
 8004bc2:	7809      	ldrb	r1, [r1, #0]
 8004bc4:	7019      	strb	r1, [r3, #0]
 8004bc6:	23fa      	movs	r3, #250	@ 0xfa
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d906      	bls.n	8004bdc <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004bce:	183b      	adds	r3, r7, r0
 8004bd0:	2203      	movs	r2, #3
 8004bd2:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2229      	movs	r2, #41	@ 0x29
 8004bd8:	2103      	movs	r1, #3
 8004bda:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	2240      	movs	r2, #64	@ 0x40
 8004be4:	4013      	ands	r3, r2
 8004be6:	d104      	bne.n	8004bf2 <RTC_EnterInitMode+0x76>
 8004be8:	230f      	movs	r3, #15
 8004bea:	18fb      	adds	r3, r7, r3
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d1df      	bne.n	8004bb2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004bf2:	230f      	movs	r3, #15
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	781b      	ldrb	r3, [r3, #0]
}
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	b004      	add	sp, #16
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c08:	240f      	movs	r4, #15
 8004c0a:	193b      	adds	r3, r7, r4
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004c10:	4b1c      	ldr	r3, [pc, #112]	@ (8004c84 <RTC_ExitInitMode+0x84>)
 8004c12:	68da      	ldr	r2, [r3, #12]
 8004c14:	4b1b      	ldr	r3, [pc, #108]	@ (8004c84 <RTC_ExitInitMode+0x84>)
 8004c16:	2180      	movs	r1, #128	@ 0x80
 8004c18:	438a      	bics	r2, r1
 8004c1a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004c1c:	4b19      	ldr	r3, [pc, #100]	@ (8004c84 <RTC_ExitInitMode+0x84>)
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	2220      	movs	r2, #32
 8004c22:	4013      	ands	r3, r2
 8004c24:	d10d      	bne.n	8004c42 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7ff ff81 	bl	8004b30 <HAL_RTC_WaitForSynchro>
 8004c2e:	1e03      	subs	r3, r0, #0
 8004c30:	d021      	beq.n	8004c76 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2229      	movs	r2, #41	@ 0x29
 8004c36:	2103      	movs	r1, #3
 8004c38:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004c3a:	193b      	adds	r3, r7, r4
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	701a      	strb	r2, [r3, #0]
 8004c40:	e019      	b.n	8004c76 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004c42:	4b10      	ldr	r3, [pc, #64]	@ (8004c84 <RTC_ExitInitMode+0x84>)
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	4b0f      	ldr	r3, [pc, #60]	@ (8004c84 <RTC_ExitInitMode+0x84>)
 8004c48:	2120      	movs	r1, #32
 8004c4a:	438a      	bics	r2, r1
 8004c4c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	0018      	movs	r0, r3
 8004c52:	f7ff ff6d 	bl	8004b30 <HAL_RTC_WaitForSynchro>
 8004c56:	1e03      	subs	r3, r0, #0
 8004c58:	d007      	beq.n	8004c6a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2229      	movs	r2, #41	@ 0x29
 8004c5e:	2103      	movs	r1, #3
 8004c60:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004c62:	230f      	movs	r3, #15
 8004c64:	18fb      	adds	r3, r7, r3
 8004c66:	2203      	movs	r2, #3
 8004c68:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004c6a:	4b06      	ldr	r3, [pc, #24]	@ (8004c84 <RTC_ExitInitMode+0x84>)
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	4b05      	ldr	r3, [pc, #20]	@ (8004c84 <RTC_ExitInitMode+0x84>)
 8004c70:	2120      	movs	r1, #32
 8004c72:	430a      	orrs	r2, r1
 8004c74:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004c76:	230f      	movs	r3, #15
 8004c78:	18fb      	adds	r3, r7, r3
 8004c7a:	781b      	ldrb	r3, [r3, #0]
}
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b005      	add	sp, #20
 8004c82:	bd90      	pop	{r4, r7, pc}
 8004c84:	40002800 	.word	0x40002800

08004c88 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	0002      	movs	r2, r0
 8004c90:	1dfb      	adds	r3, r7, #7
 8004c92:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004c98:	230b      	movs	r3, #11
 8004c9a:	18fb      	adds	r3, r7, r3
 8004c9c:	1dfa      	adds	r2, r7, #7
 8004c9e:	7812      	ldrb	r2, [r2, #0]
 8004ca0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004ca2:	e008      	b.n	8004cb6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004caa:	220b      	movs	r2, #11
 8004cac:	18bb      	adds	r3, r7, r2
 8004cae:	18ba      	adds	r2, r7, r2
 8004cb0:	7812      	ldrb	r2, [r2, #0]
 8004cb2:	3a0a      	subs	r2, #10
 8004cb4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004cb6:	210b      	movs	r1, #11
 8004cb8:	187b      	adds	r3, r7, r1
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b09      	cmp	r3, #9
 8004cbe:	d8f1      	bhi.n	8004ca4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	187b      	adds	r3, r7, r1
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	b2db      	uxtb	r3, r3
}
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b004      	add	sp, #16
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	0002      	movs	r2, r0
 8004ce0:	1dfb      	adds	r3, r7, #7
 8004ce2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004ce4:	1dfb      	adds	r3, r7, #7
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	091b      	lsrs	r3, r3, #4
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	001a      	movs	r2, r3
 8004cee:	0013      	movs	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	189b      	adds	r3, r3, r2
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	1dfb      	adds	r3, r7, #7
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	210f      	movs	r1, #15
 8004d02:	400b      	ands	r3, r1
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	18d3      	adds	r3, r2, r3
 8004d08:	b2db      	uxtb	r3, r3
}
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	b004      	add	sp, #16
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b086      	sub	sp, #24
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	607a      	str	r2, [r7, #4]
 8004d1e:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2228      	movs	r2, #40	@ 0x28
 8004d24:	5c9b      	ldrb	r3, [r3, r2]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_RTCEx_SetSmoothCalib+0x1c>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e04f      	b.n	8004dce <HAL_RTCEx_SetSmoothCalib+0xbc>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2228      	movs	r2, #40	@ 0x28
 8004d32:	2101      	movs	r1, #1
 8004d34:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2229      	movs	r2, #41	@ 0x29
 8004d3a:	2102      	movs	r1, #2
 8004d3c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	22ca      	movs	r2, #202	@ 0xca
 8004d44:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2253      	movs	r2, #83	@ 0x53
 8004d4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	2380      	movs	r3, #128	@ 0x80
 8004d56:	025b      	lsls	r3, r3, #9
 8004d58:	4013      	ands	r3, r2
 8004d5a:	d022      	beq.n	8004da2 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8004d5c:	f7fd fa10 	bl	8002180 <HAL_GetTick>
 8004d60:	0003      	movs	r3, r0
 8004d62:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8004d64:	e016      	b.n	8004d94 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d66:	f7fd fa0b 	bl	8002180 <HAL_GetTick>
 8004d6a:	0002      	movs	r2, r0
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	1ad2      	subs	r2, r2, r3
 8004d70:	23fa      	movs	r3, #250	@ 0xfa
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d90d      	bls.n	8004d94 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	22ff      	movs	r2, #255	@ 0xff
 8004d7e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2229      	movs	r2, #41	@ 0x29
 8004d84:	2103      	movs	r1, #3
 8004d86:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2228      	movs	r2, #40	@ 0x28
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e01c      	b.n	8004dce <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	2380      	movs	r3, #128	@ 0x80
 8004d9c:	025b      	lsls	r3, r3, #9
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d1e1      	bne.n	8004d66 <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	431a      	orrs	r2, r3
 8004da8:	0011      	movs	r1, r2
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	22ff      	movs	r2, #255	@ 0xff
 8004dba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2229      	movs	r2, #41	@ 0x29
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2228      	movs	r2, #40	@ 0x28
 8004dc8:	2100      	movs	r1, #0
 8004dca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	0018      	movs	r0, r3
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	b006      	add	sp, #24
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2228      	movs	r2, #40	@ 0x28
 8004de6:	5c9b      	ldrb	r3, [r3, r2]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e035      	b.n	8004e5c <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2228      	movs	r2, #40	@ 0x28
 8004df4:	2101      	movs	r1, #1
 8004df6:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2229      	movs	r2, #41	@ 0x29
 8004dfc:	2102      	movs	r1, #2
 8004dfe:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	22ca      	movs	r2, #202	@ 0xca
 8004e06:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2253      	movs	r2, #83	@ 0x53
 8004e0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4912      	ldr	r1, [pc, #72]	@ (8004e64 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8004e1c:	400a      	ands	r2, r1
 8004e1e:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6999      	ldr	r1, [r3, #24]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2180      	movs	r1, #128	@ 0x80
 8004e3c:	0409      	lsls	r1, r1, #16
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	22ff      	movs	r2, #255	@ 0xff
 8004e48:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2229      	movs	r2, #41	@ 0x29
 8004e4e:	2101      	movs	r1, #1
 8004e50:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2228      	movs	r2, #40	@ 0x28
 8004e56:	2100      	movs	r1, #0
 8004e58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	b002      	add	sp, #8
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	fff7ffff 	.word	0xfff7ffff

08004e68 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004e70:	46c0      	nop			@ (mov r8, r8)
 8004e72:	46bd      	mov	sp, r7
 8004e74:	b002      	add	sp, #8
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e04a      	b.n	8004f20 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	223d      	movs	r2, #61	@ 0x3d
 8004e8e:	5c9b      	ldrb	r3, [r3, r2]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d107      	bne.n	8004ea6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	223c      	movs	r2, #60	@ 0x3c
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f7fd f81b 	bl	8001edc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	223d      	movs	r2, #61	@ 0x3d
 8004eaa:	2102      	movs	r1, #2
 8004eac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	0019      	movs	r1, r3
 8004eb8:	0010      	movs	r0, r2
 8004eba:	f000 fadd 	bl	8005478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2248      	movs	r2, #72	@ 0x48
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	223e      	movs	r2, #62	@ 0x3e
 8004eca:	2101      	movs	r1, #1
 8004ecc:	5499      	strb	r1, [r3, r2]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	223f      	movs	r2, #63	@ 0x3f
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	5499      	strb	r1, [r3, r2]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2240      	movs	r2, #64	@ 0x40
 8004eda:	2101      	movs	r1, #1
 8004edc:	5499      	strb	r1, [r3, r2]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2241      	movs	r2, #65	@ 0x41
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	5499      	strb	r1, [r3, r2]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2242      	movs	r2, #66	@ 0x42
 8004eea:	2101      	movs	r1, #1
 8004eec:	5499      	strb	r1, [r3, r2]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2243      	movs	r2, #67	@ 0x43
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2244      	movs	r2, #68	@ 0x44
 8004efa:	2101      	movs	r1, #1
 8004efc:	5499      	strb	r1, [r3, r2]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2245      	movs	r2, #69	@ 0x45
 8004f02:	2101      	movs	r1, #1
 8004f04:	5499      	strb	r1, [r3, r2]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2246      	movs	r2, #70	@ 0x46
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	5499      	strb	r1, [r3, r2]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2247      	movs	r2, #71	@ 0x47
 8004f12:	2101      	movs	r1, #1
 8004f14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	223d      	movs	r2, #61	@ 0x3d
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	0018      	movs	r0, r3
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b002      	add	sp, #8
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	223d      	movs	r2, #61	@ 0x3d
 8004f34:	5c9b      	ldrb	r3, [r3, r2]
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d001      	beq.n	8004f40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e035      	b.n	8004fac <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	223d      	movs	r2, #61	@ 0x3d
 8004f44:	2102      	movs	r1, #2
 8004f46:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a19      	ldr	r2, [pc, #100]	@ (8004fb4 <HAL_TIM_Base_Start+0x8c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00a      	beq.n	8004f68 <HAL_TIM_Base_Start+0x40>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	2380      	movs	r3, #128	@ 0x80
 8004f58:	05db      	lsls	r3, r3, #23
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d004      	beq.n	8004f68 <HAL_TIM_Base_Start+0x40>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a15      	ldr	r2, [pc, #84]	@ (8004fb8 <HAL_TIM_Base_Start+0x90>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d116      	bne.n	8004f96 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	4a13      	ldr	r2, [pc, #76]	@ (8004fbc <HAL_TIM_Base_Start+0x94>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b06      	cmp	r3, #6
 8004f78:	d016      	beq.n	8004fa8 <HAL_TIM_Base_Start+0x80>
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	2380      	movs	r3, #128	@ 0x80
 8004f7e:	025b      	lsls	r3, r3, #9
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d011      	beq.n	8004fa8 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2101      	movs	r1, #1
 8004f90:	430a      	orrs	r2, r1
 8004f92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f94:	e008      	b.n	8004fa8 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	e000      	b.n	8004faa <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	0018      	movs	r0, r3
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b004      	add	sp, #16
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40012c00 	.word	0x40012c00
 8004fb8:	40000400 	.word	0x40000400
 8004fbc:	00010007 	.word	0x00010007

08004fc0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	4a0d      	ldr	r2, [pc, #52]	@ (8005004 <HAL_TIM_Base_Stop+0x44>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	d10d      	bne.n	8004ff0 <HAL_TIM_Base_Stop+0x30>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	4a0b      	ldr	r2, [pc, #44]	@ (8005008 <HAL_TIM_Base_Stop+0x48>)
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d107      	bne.n	8004ff0 <HAL_TIM_Base_Stop+0x30>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2101      	movs	r1, #1
 8004fec:	438a      	bics	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	223d      	movs	r2, #61	@ 0x3d
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	b002      	add	sp, #8
 8005000:	bd80      	pop	{r7, pc}
 8005002:	46c0      	nop			@ (mov r8, r8)
 8005004:	00001111 	.word	0x00001111
 8005008:	00000444 	.word	0x00000444

0800500c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e04a      	b.n	80050b4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	223d      	movs	r2, #61	@ 0x3d
 8005022:	5c9b      	ldrb	r3, [r3, r2]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d107      	bne.n	800503a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	223c      	movs	r2, #60	@ 0x3c
 800502e:	2100      	movs	r1, #0
 8005030:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	0018      	movs	r0, r3
 8005036:	f7fc ff35 	bl	8001ea4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	223d      	movs	r2, #61	@ 0x3d
 800503e:	2102      	movs	r1, #2
 8005040:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3304      	adds	r3, #4
 800504a:	0019      	movs	r1, r3
 800504c:	0010      	movs	r0, r2
 800504e:	f000 fa13 	bl	8005478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2248      	movs	r2, #72	@ 0x48
 8005056:	2101      	movs	r1, #1
 8005058:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	223e      	movs	r2, #62	@ 0x3e
 800505e:	2101      	movs	r1, #1
 8005060:	5499      	strb	r1, [r3, r2]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	223f      	movs	r2, #63	@ 0x3f
 8005066:	2101      	movs	r1, #1
 8005068:	5499      	strb	r1, [r3, r2]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2240      	movs	r2, #64	@ 0x40
 800506e:	2101      	movs	r1, #1
 8005070:	5499      	strb	r1, [r3, r2]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2241      	movs	r2, #65	@ 0x41
 8005076:	2101      	movs	r1, #1
 8005078:	5499      	strb	r1, [r3, r2]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2242      	movs	r2, #66	@ 0x42
 800507e:	2101      	movs	r1, #1
 8005080:	5499      	strb	r1, [r3, r2]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2243      	movs	r2, #67	@ 0x43
 8005086:	2101      	movs	r1, #1
 8005088:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2244      	movs	r2, #68	@ 0x44
 800508e:	2101      	movs	r1, #1
 8005090:	5499      	strb	r1, [r3, r2]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2245      	movs	r2, #69	@ 0x45
 8005096:	2101      	movs	r1, #1
 8005098:	5499      	strb	r1, [r3, r2]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2246      	movs	r2, #70	@ 0x46
 800509e:	2101      	movs	r1, #1
 80050a0:	5499      	strb	r1, [r3, r2]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2247      	movs	r2, #71	@ 0x47
 80050a6:	2101      	movs	r1, #1
 80050a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	223d      	movs	r2, #61	@ 0x3d
 80050ae:	2101      	movs	r1, #1
 80050b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	0018      	movs	r0, r3
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b002      	add	sp, #8
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d108      	bne.n	80050de <HAL_TIM_PWM_Start+0x22>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	223e      	movs	r2, #62	@ 0x3e
 80050d0:	5c9b      	ldrb	r3, [r3, r2]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	3b01      	subs	r3, #1
 80050d6:	1e5a      	subs	r2, r3, #1
 80050d8:	4193      	sbcs	r3, r2
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	e037      	b.n	800514e <HAL_TIM_PWM_Start+0x92>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d108      	bne.n	80050f6 <HAL_TIM_PWM_Start+0x3a>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	223f      	movs	r2, #63	@ 0x3f
 80050e8:	5c9b      	ldrb	r3, [r3, r2]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	1e5a      	subs	r2, r3, #1
 80050f0:	4193      	sbcs	r3, r2
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	e02b      	b.n	800514e <HAL_TIM_PWM_Start+0x92>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d108      	bne.n	800510e <HAL_TIM_PWM_Start+0x52>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2240      	movs	r2, #64	@ 0x40
 8005100:	5c9b      	ldrb	r3, [r3, r2]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	1e5a      	subs	r2, r3, #1
 8005108:	4193      	sbcs	r3, r2
 800510a:	b2db      	uxtb	r3, r3
 800510c:	e01f      	b.n	800514e <HAL_TIM_PWM_Start+0x92>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b0c      	cmp	r3, #12
 8005112:	d108      	bne.n	8005126 <HAL_TIM_PWM_Start+0x6a>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2241      	movs	r2, #65	@ 0x41
 8005118:	5c9b      	ldrb	r3, [r3, r2]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	1e5a      	subs	r2, r3, #1
 8005120:	4193      	sbcs	r3, r2
 8005122:	b2db      	uxtb	r3, r3
 8005124:	e013      	b.n	800514e <HAL_TIM_PWM_Start+0x92>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b10      	cmp	r3, #16
 800512a:	d108      	bne.n	800513e <HAL_TIM_PWM_Start+0x82>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2242      	movs	r2, #66	@ 0x42
 8005130:	5c9b      	ldrb	r3, [r3, r2]
 8005132:	b2db      	uxtb	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	1e5a      	subs	r2, r3, #1
 8005138:	4193      	sbcs	r3, r2
 800513a:	b2db      	uxtb	r3, r3
 800513c:	e007      	b.n	800514e <HAL_TIM_PWM_Start+0x92>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2243      	movs	r2, #67	@ 0x43
 8005142:	5c9b      	ldrb	r3, [r3, r2]
 8005144:	b2db      	uxtb	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	1e5a      	subs	r2, r3, #1
 800514a:	4193      	sbcs	r3, r2
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e081      	b.n	800525a <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d104      	bne.n	8005166 <HAL_TIM_PWM_Start+0xaa>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	223e      	movs	r2, #62	@ 0x3e
 8005160:	2102      	movs	r1, #2
 8005162:	5499      	strb	r1, [r3, r2]
 8005164:	e023      	b.n	80051ae <HAL_TIM_PWM_Start+0xf2>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b04      	cmp	r3, #4
 800516a:	d104      	bne.n	8005176 <HAL_TIM_PWM_Start+0xba>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	223f      	movs	r2, #63	@ 0x3f
 8005170:	2102      	movs	r1, #2
 8005172:	5499      	strb	r1, [r3, r2]
 8005174:	e01b      	b.n	80051ae <HAL_TIM_PWM_Start+0xf2>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b08      	cmp	r3, #8
 800517a:	d104      	bne.n	8005186 <HAL_TIM_PWM_Start+0xca>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2240      	movs	r2, #64	@ 0x40
 8005180:	2102      	movs	r1, #2
 8005182:	5499      	strb	r1, [r3, r2]
 8005184:	e013      	b.n	80051ae <HAL_TIM_PWM_Start+0xf2>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b0c      	cmp	r3, #12
 800518a:	d104      	bne.n	8005196 <HAL_TIM_PWM_Start+0xda>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2241      	movs	r2, #65	@ 0x41
 8005190:	2102      	movs	r1, #2
 8005192:	5499      	strb	r1, [r3, r2]
 8005194:	e00b      	b.n	80051ae <HAL_TIM_PWM_Start+0xf2>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b10      	cmp	r3, #16
 800519a:	d104      	bne.n	80051a6 <HAL_TIM_PWM_Start+0xea>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2242      	movs	r2, #66	@ 0x42
 80051a0:	2102      	movs	r1, #2
 80051a2:	5499      	strb	r1, [r3, r2]
 80051a4:	e003      	b.n	80051ae <HAL_TIM_PWM_Start+0xf2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2243      	movs	r2, #67	@ 0x43
 80051aa:	2102      	movs	r1, #2
 80051ac:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6839      	ldr	r1, [r7, #0]
 80051b4:	2201      	movs	r2, #1
 80051b6:	0018      	movs	r0, r3
 80051b8:	f000 fc7e 	bl	8005ab8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a28      	ldr	r2, [pc, #160]	@ (8005264 <HAL_TIM_PWM_Start+0x1a8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d009      	beq.n	80051da <HAL_TIM_PWM_Start+0x11e>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a27      	ldr	r2, [pc, #156]	@ (8005268 <HAL_TIM_PWM_Start+0x1ac>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d004      	beq.n	80051da <HAL_TIM_PWM_Start+0x11e>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a25      	ldr	r2, [pc, #148]	@ (800526c <HAL_TIM_PWM_Start+0x1b0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d101      	bne.n	80051de <HAL_TIM_PWM_Start+0x122>
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <HAL_TIM_PWM_Start+0x124>
 80051de:	2300      	movs	r3, #0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d008      	beq.n	80051f6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2180      	movs	r1, #128	@ 0x80
 80051f0:	0209      	lsls	r1, r1, #8
 80051f2:	430a      	orrs	r2, r1
 80051f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005264 <HAL_TIM_PWM_Start+0x1a8>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00a      	beq.n	8005216 <HAL_TIM_PWM_Start+0x15a>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	2380      	movs	r3, #128	@ 0x80
 8005206:	05db      	lsls	r3, r3, #23
 8005208:	429a      	cmp	r2, r3
 800520a:	d004      	beq.n	8005216 <HAL_TIM_PWM_Start+0x15a>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a17      	ldr	r2, [pc, #92]	@ (8005270 <HAL_TIM_PWM_Start+0x1b4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d116      	bne.n	8005244 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	4a15      	ldr	r2, [pc, #84]	@ (8005274 <HAL_TIM_PWM_Start+0x1b8>)
 800521e:	4013      	ands	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b06      	cmp	r3, #6
 8005226:	d016      	beq.n	8005256 <HAL_TIM_PWM_Start+0x19a>
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	2380      	movs	r3, #128	@ 0x80
 800522c:	025b      	lsls	r3, r3, #9
 800522e:	429a      	cmp	r2, r3
 8005230:	d011      	beq.n	8005256 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2101      	movs	r1, #1
 800523e:	430a      	orrs	r2, r1
 8005240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005242:	e008      	b.n	8005256 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2101      	movs	r1, #1
 8005250:	430a      	orrs	r2, r1
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	e000      	b.n	8005258 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005256:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	0018      	movs	r0, r3
 800525c:	46bd      	mov	sp, r7
 800525e:	b004      	add	sp, #16
 8005260:	bd80      	pop	{r7, pc}
 8005262:	46c0      	nop			@ (mov r8, r8)
 8005264:	40012c00 	.word	0x40012c00
 8005268:	40014400 	.word	0x40014400
 800526c:	40014800 	.word	0x40014800
 8005270:	40000400 	.word	0x40000400
 8005274:	00010007 	.word	0x00010007

08005278 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005284:	2317      	movs	r3, #23
 8005286:	18fb      	adds	r3, r7, r3
 8005288:	2200      	movs	r2, #0
 800528a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	223c      	movs	r2, #60	@ 0x3c
 8005290:	5c9b      	ldrb	r3, [r3, r2]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d101      	bne.n	800529a <HAL_TIM_PWM_ConfigChannel+0x22>
 8005296:	2302      	movs	r3, #2
 8005298:	e0e5      	b.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	223c      	movs	r2, #60	@ 0x3c
 800529e:	2101      	movs	r1, #1
 80052a0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b14      	cmp	r3, #20
 80052a6:	d900      	bls.n	80052aa <HAL_TIM_PWM_ConfigChannel+0x32>
 80052a8:	e0d1      	b.n	800544e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	009a      	lsls	r2, r3, #2
 80052ae:	4b70      	ldr	r3, [pc, #448]	@ (8005470 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80052b0:	18d3      	adds	r3, r2, r3
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	0011      	movs	r1, r2
 80052be:	0018      	movs	r0, r3
 80052c0:	f000 f95e 	bl	8005580 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699a      	ldr	r2, [r3, #24]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2108      	movs	r1, #8
 80052d0:	430a      	orrs	r2, r1
 80052d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699a      	ldr	r2, [r3, #24]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2104      	movs	r1, #4
 80052e0:	438a      	bics	r2, r1
 80052e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6999      	ldr	r1, [r3, #24]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	691a      	ldr	r2, [r3, #16]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	619a      	str	r2, [r3, #24]
      break;
 80052f6:	e0af      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	0011      	movs	r1, r2
 8005300:	0018      	movs	r0, r3
 8005302:	f000 f9bd 	bl	8005680 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699a      	ldr	r2, [r3, #24]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2180      	movs	r1, #128	@ 0x80
 8005312:	0109      	lsls	r1, r1, #4
 8005314:	430a      	orrs	r2, r1
 8005316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4954      	ldr	r1, [pc, #336]	@ (8005474 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005324:	400a      	ands	r2, r1
 8005326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6999      	ldr	r1, [r3, #24]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	021a      	lsls	r2, r3, #8
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	619a      	str	r2, [r3, #24]
      break;
 800533c:	e08c      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	0011      	movs	r1, r2
 8005346:	0018      	movs	r0, r3
 8005348:	f000 fa18 	bl	800577c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	69da      	ldr	r2, [r3, #28]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2108      	movs	r1, #8
 8005358:	430a      	orrs	r2, r1
 800535a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69da      	ldr	r2, [r3, #28]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2104      	movs	r1, #4
 8005368:	438a      	bics	r2, r1
 800536a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	69d9      	ldr	r1, [r3, #28]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	61da      	str	r2, [r3, #28]
      break;
 800537e:	e06b      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	0011      	movs	r1, r2
 8005388:	0018      	movs	r0, r3
 800538a:	f000 fa79 	bl	8005880 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2180      	movs	r1, #128	@ 0x80
 800539a:	0109      	lsls	r1, r1, #4
 800539c:	430a      	orrs	r2, r1
 800539e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69da      	ldr	r2, [r3, #28]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4932      	ldr	r1, [pc, #200]	@ (8005474 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80053ac:	400a      	ands	r2, r1
 80053ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	69d9      	ldr	r1, [r3, #28]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	021a      	lsls	r2, r3, #8
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	61da      	str	r2, [r3, #28]
      break;
 80053c4:	e048      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	0011      	movs	r1, r2
 80053ce:	0018      	movs	r0, r3
 80053d0:	f000 faba 	bl	8005948 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2108      	movs	r1, #8
 80053e0:	430a      	orrs	r2, r1
 80053e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2104      	movs	r1, #4
 80053f0:	438a      	bics	r2, r1
 80053f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005406:	e027      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	0011      	movs	r1, r2
 8005410:	0018      	movs	r0, r3
 8005412:	f000 faf3 	bl	80059fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2180      	movs	r1, #128	@ 0x80
 8005422:	0109      	lsls	r1, r1, #4
 8005424:	430a      	orrs	r2, r1
 8005426:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4910      	ldr	r1, [pc, #64]	@ (8005474 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005434:	400a      	ands	r2, r1
 8005436:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	021a      	lsls	r2, r3, #8
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800544c:	e004      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800544e:	2317      	movs	r3, #23
 8005450:	18fb      	adds	r3, r7, r3
 8005452:	2201      	movs	r2, #1
 8005454:	701a      	strb	r2, [r3, #0]
      break;
 8005456:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	223c      	movs	r2, #60	@ 0x3c
 800545c:	2100      	movs	r1, #0
 800545e:	5499      	strb	r1, [r3, r2]

  return status;
 8005460:	2317      	movs	r3, #23
 8005462:	18fb      	adds	r3, r7, r3
 8005464:	781b      	ldrb	r3, [r3, #0]
}
 8005466:	0018      	movs	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	b006      	add	sp, #24
 800546c:	bd80      	pop	{r7, pc}
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	08005cc8 	.word	0x08005cc8
 8005474:	fffffbff 	.word	0xfffffbff

08005478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a37      	ldr	r2, [pc, #220]	@ (8005568 <TIM_Base_SetConfig+0xf0>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d008      	beq.n	80054a2 <TIM_Base_SetConfig+0x2a>
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	2380      	movs	r3, #128	@ 0x80
 8005494:	05db      	lsls	r3, r3, #23
 8005496:	429a      	cmp	r2, r3
 8005498:	d003      	beq.n	80054a2 <TIM_Base_SetConfig+0x2a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a33      	ldr	r2, [pc, #204]	@ (800556c <TIM_Base_SetConfig+0xf4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d108      	bne.n	80054b4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2270      	movs	r2, #112	@ 0x70
 80054a6:	4393      	bics	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005568 <TIM_Base_SetConfig+0xf0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d014      	beq.n	80054e6 <TIM_Base_SetConfig+0x6e>
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	2380      	movs	r3, #128	@ 0x80
 80054c0:	05db      	lsls	r3, r3, #23
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d00f      	beq.n	80054e6 <TIM_Base_SetConfig+0x6e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a28      	ldr	r2, [pc, #160]	@ (800556c <TIM_Base_SetConfig+0xf4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00b      	beq.n	80054e6 <TIM_Base_SetConfig+0x6e>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a27      	ldr	r2, [pc, #156]	@ (8005570 <TIM_Base_SetConfig+0xf8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d007      	beq.n	80054e6 <TIM_Base_SetConfig+0x6e>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a26      	ldr	r2, [pc, #152]	@ (8005574 <TIM_Base_SetConfig+0xfc>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d003      	beq.n	80054e6 <TIM_Base_SetConfig+0x6e>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a25      	ldr	r2, [pc, #148]	@ (8005578 <TIM_Base_SetConfig+0x100>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d108      	bne.n	80054f8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4a24      	ldr	r2, [pc, #144]	@ (800557c <TIM_Base_SetConfig+0x104>)
 80054ea:	4013      	ands	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2280      	movs	r2, #128	@ 0x80
 80054fc:	4393      	bics	r3, r2
 80054fe:	001a      	movs	r2, r3
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a11      	ldr	r2, [pc, #68]	@ (8005568 <TIM_Base_SetConfig+0xf0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d007      	beq.n	8005536 <TIM_Base_SetConfig+0xbe>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a12      	ldr	r2, [pc, #72]	@ (8005574 <TIM_Base_SetConfig+0xfc>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d003      	beq.n	8005536 <TIM_Base_SetConfig+0xbe>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a11      	ldr	r2, [pc, #68]	@ (8005578 <TIM_Base_SetConfig+0x100>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d103      	bne.n	800553e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	2201      	movs	r2, #1
 800554a:	4013      	ands	r3, r2
 800554c:	2b01      	cmp	r3, #1
 800554e:	d106      	bne.n	800555e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	2201      	movs	r2, #1
 8005556:	4393      	bics	r3, r2
 8005558:	001a      	movs	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	611a      	str	r2, [r3, #16]
  }
}
 800555e:	46c0      	nop			@ (mov r8, r8)
 8005560:	46bd      	mov	sp, r7
 8005562:	b004      	add	sp, #16
 8005564:	bd80      	pop	{r7, pc}
 8005566:	46c0      	nop			@ (mov r8, r8)
 8005568:	40012c00 	.word	0x40012c00
 800556c:	40000400 	.word	0x40000400
 8005570:	40002000 	.word	0x40002000
 8005574:	40014400 	.word	0x40014400
 8005578:	40014800 	.word	0x40014800
 800557c:	fffffcff 	.word	0xfffffcff

08005580 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	2201      	movs	r2, #1
 8005596:	4393      	bics	r3, r2
 8005598:	001a      	movs	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005668 <TIM_OC1_SetConfig+0xe8>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2203      	movs	r2, #3
 80055b6:	4393      	bics	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2202      	movs	r2, #2
 80055c8:	4393      	bics	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a24      	ldr	r2, [pc, #144]	@ (800566c <TIM_OC1_SetConfig+0xec>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d007      	beq.n	80055ee <TIM_OC1_SetConfig+0x6e>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a23      	ldr	r2, [pc, #140]	@ (8005670 <TIM_OC1_SetConfig+0xf0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d003      	beq.n	80055ee <TIM_OC1_SetConfig+0x6e>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a22      	ldr	r2, [pc, #136]	@ (8005674 <TIM_OC1_SetConfig+0xf4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d10c      	bne.n	8005608 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2208      	movs	r2, #8
 80055f2:	4393      	bics	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2204      	movs	r2, #4
 8005604:	4393      	bics	r3, r2
 8005606:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a18      	ldr	r2, [pc, #96]	@ (800566c <TIM_OC1_SetConfig+0xec>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d007      	beq.n	8005620 <TIM_OC1_SetConfig+0xa0>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a17      	ldr	r2, [pc, #92]	@ (8005670 <TIM_OC1_SetConfig+0xf0>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d003      	beq.n	8005620 <TIM_OC1_SetConfig+0xa0>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a16      	ldr	r2, [pc, #88]	@ (8005674 <TIM_OC1_SetConfig+0xf4>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d111      	bne.n	8005644 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	4a15      	ldr	r2, [pc, #84]	@ (8005678 <TIM_OC1_SetConfig+0xf8>)
 8005624:	4013      	ands	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	4a14      	ldr	r2, [pc, #80]	@ (800567c <TIM_OC1_SetConfig+0xfc>)
 800562c:	4013      	ands	r3, r2
 800562e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	4313      	orrs	r3, r2
 8005642:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	46c0      	nop			@ (mov r8, r8)
 8005660:	46bd      	mov	sp, r7
 8005662:	b006      	add	sp, #24
 8005664:	bd80      	pop	{r7, pc}
 8005666:	46c0      	nop			@ (mov r8, r8)
 8005668:	fffeff8f 	.word	0xfffeff8f
 800566c:	40012c00 	.word	0x40012c00
 8005670:	40014400 	.word	0x40014400
 8005674:	40014800 	.word	0x40014800
 8005678:	fffffeff 	.word	0xfffffeff
 800567c:	fffffdff 	.word	0xfffffdff

08005680 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	2210      	movs	r2, #16
 8005696:	4393      	bics	r3, r2
 8005698:	001a      	movs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4a2c      	ldr	r2, [pc, #176]	@ (8005760 <TIM_OC2_SetConfig+0xe0>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005764 <TIM_OC2_SetConfig+0xe4>)
 80056b6:	4013      	ands	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	021b      	lsls	r3, r3, #8
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2220      	movs	r2, #32
 80056ca:	4393      	bics	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a22      	ldr	r2, [pc, #136]	@ (8005768 <TIM_OC2_SetConfig+0xe8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d10d      	bne.n	80056fe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2280      	movs	r2, #128	@ 0x80
 80056e6:	4393      	bics	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2240      	movs	r2, #64	@ 0x40
 80056fa:	4393      	bics	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a19      	ldr	r2, [pc, #100]	@ (8005768 <TIM_OC2_SetConfig+0xe8>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d007      	beq.n	8005716 <TIM_OC2_SetConfig+0x96>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a18      	ldr	r2, [pc, #96]	@ (800576c <TIM_OC2_SetConfig+0xec>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d003      	beq.n	8005716 <TIM_OC2_SetConfig+0x96>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a17      	ldr	r2, [pc, #92]	@ (8005770 <TIM_OC2_SetConfig+0xf0>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d113      	bne.n	800573e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	4a16      	ldr	r2, [pc, #88]	@ (8005774 <TIM_OC2_SetConfig+0xf4>)
 800571a:	4013      	ands	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	4a15      	ldr	r2, [pc, #84]	@ (8005778 <TIM_OC2_SetConfig+0xf8>)
 8005722:	4013      	ands	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4313      	orrs	r3, r2
 800573c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	621a      	str	r2, [r3, #32]
}
 8005758:	46c0      	nop			@ (mov r8, r8)
 800575a:	46bd      	mov	sp, r7
 800575c:	b006      	add	sp, #24
 800575e:	bd80      	pop	{r7, pc}
 8005760:	feff8fff 	.word	0xfeff8fff
 8005764:	fffffcff 	.word	0xfffffcff
 8005768:	40012c00 	.word	0x40012c00
 800576c:	40014400 	.word	0x40014400
 8005770:	40014800 	.word	0x40014800
 8005774:	fffffbff 	.word	0xfffffbff
 8005778:	fffff7ff 	.word	0xfffff7ff

0800577c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	4a31      	ldr	r2, [pc, #196]	@ (8005858 <TIM_OC3_SetConfig+0xdc>)
 8005792:	401a      	ands	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4a2d      	ldr	r2, [pc, #180]	@ (800585c <TIM_OC3_SetConfig+0xe0>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2203      	movs	r2, #3
 80057b0:	4393      	bics	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	4a27      	ldr	r2, [pc, #156]	@ (8005860 <TIM_OC3_SetConfig+0xe4>)
 80057c2:	4013      	ands	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a23      	ldr	r2, [pc, #140]	@ (8005864 <TIM_OC3_SetConfig+0xe8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d10d      	bne.n	80057f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	4a22      	ldr	r2, [pc, #136]	@ (8005868 <TIM_OC3_SetConfig+0xec>)
 80057de:	4013      	ands	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	021b      	lsls	r3, r3, #8
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	4a1e      	ldr	r2, [pc, #120]	@ (800586c <TIM_OC3_SetConfig+0xf0>)
 80057f2:	4013      	ands	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005864 <TIM_OC3_SetConfig+0xe8>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d007      	beq.n	800580e <TIM_OC3_SetConfig+0x92>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a1b      	ldr	r2, [pc, #108]	@ (8005870 <TIM_OC3_SetConfig+0xf4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d003      	beq.n	800580e <TIM_OC3_SetConfig+0x92>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a1a      	ldr	r2, [pc, #104]	@ (8005874 <TIM_OC3_SetConfig+0xf8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d113      	bne.n	8005836 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	4a19      	ldr	r2, [pc, #100]	@ (8005878 <TIM_OC3_SetConfig+0xfc>)
 8005812:	4013      	ands	r3, r2
 8005814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	4a18      	ldr	r2, [pc, #96]	@ (800587c <TIM_OC3_SetConfig+0x100>)
 800581a:	4013      	ands	r3, r2
 800581c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	621a      	str	r2, [r3, #32]
}
 8005850:	46c0      	nop			@ (mov r8, r8)
 8005852:	46bd      	mov	sp, r7
 8005854:	b006      	add	sp, #24
 8005856:	bd80      	pop	{r7, pc}
 8005858:	fffffeff 	.word	0xfffffeff
 800585c:	fffeff8f 	.word	0xfffeff8f
 8005860:	fffffdff 	.word	0xfffffdff
 8005864:	40012c00 	.word	0x40012c00
 8005868:	fffff7ff 	.word	0xfffff7ff
 800586c:	fffffbff 	.word	0xfffffbff
 8005870:	40014400 	.word	0x40014400
 8005874:	40014800 	.word	0x40014800
 8005878:	ffffefff 	.word	0xffffefff
 800587c:	ffffdfff 	.word	0xffffdfff

08005880 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	4a24      	ldr	r2, [pc, #144]	@ (8005928 <TIM_OC4_SetConfig+0xa8>)
 8005896:	401a      	ands	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4a20      	ldr	r2, [pc, #128]	@ (800592c <TIM_OC4_SetConfig+0xac>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005930 <TIM_OC4_SetConfig+0xb0>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	021b      	lsls	r3, r3, #8
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005934 <TIM_OC4_SetConfig+0xb4>)
 80058c8:	4013      	ands	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	031b      	lsls	r3, r3, #12
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a17      	ldr	r2, [pc, #92]	@ (8005938 <TIM_OC4_SetConfig+0xb8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d007      	beq.n	80058f0 <TIM_OC4_SetConfig+0x70>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a16      	ldr	r2, [pc, #88]	@ (800593c <TIM_OC4_SetConfig+0xbc>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_OC4_SetConfig+0x70>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a15      	ldr	r2, [pc, #84]	@ (8005940 <TIM_OC4_SetConfig+0xc0>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d109      	bne.n	8005904 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	4a14      	ldr	r2, [pc, #80]	@ (8005944 <TIM_OC4_SetConfig+0xc4>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	019b      	lsls	r3, r3, #6
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	621a      	str	r2, [r3, #32]
}
 800591e:	46c0      	nop			@ (mov r8, r8)
 8005920:	46bd      	mov	sp, r7
 8005922:	b006      	add	sp, #24
 8005924:	bd80      	pop	{r7, pc}
 8005926:	46c0      	nop			@ (mov r8, r8)
 8005928:	ffffefff 	.word	0xffffefff
 800592c:	feff8fff 	.word	0xfeff8fff
 8005930:	fffffcff 	.word	0xfffffcff
 8005934:	ffffdfff 	.word	0xffffdfff
 8005938:	40012c00 	.word	0x40012c00
 800593c:	40014400 	.word	0x40014400
 8005940:	40014800 	.word	0x40014800
 8005944:	ffffbfff 	.word	0xffffbfff

08005948 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	4a21      	ldr	r2, [pc, #132]	@ (80059e4 <TIM_OC5_SetConfig+0x9c>)
 800595e:	401a      	ands	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4a1d      	ldr	r2, [pc, #116]	@ (80059e8 <TIM_OC5_SetConfig+0xa0>)
 8005974:	4013      	ands	r3, r2
 8005976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	4a19      	ldr	r2, [pc, #100]	@ (80059ec <TIM_OC5_SetConfig+0xa4>)
 8005986:	4013      	ands	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	041b      	lsls	r3, r3, #16
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4313      	orrs	r3, r2
 8005994:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a15      	ldr	r2, [pc, #84]	@ (80059f0 <TIM_OC5_SetConfig+0xa8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d007      	beq.n	80059ae <TIM_OC5_SetConfig+0x66>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a14      	ldr	r2, [pc, #80]	@ (80059f4 <TIM_OC5_SetConfig+0xac>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d003      	beq.n	80059ae <TIM_OC5_SetConfig+0x66>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a13      	ldr	r2, [pc, #76]	@ (80059f8 <TIM_OC5_SetConfig+0xb0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d109      	bne.n	80059c2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	4a0c      	ldr	r2, [pc, #48]	@ (80059e4 <TIM_OC5_SetConfig+0x9c>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	021b      	lsls	r3, r3, #8
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	621a      	str	r2, [r3, #32]
}
 80059dc:	46c0      	nop			@ (mov r8, r8)
 80059de:	46bd      	mov	sp, r7
 80059e0:	b006      	add	sp, #24
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	fffeffff 	.word	0xfffeffff
 80059e8:	fffeff8f 	.word	0xfffeff8f
 80059ec:	fffdffff 	.word	0xfffdffff
 80059f0:	40012c00 	.word	0x40012c00
 80059f4:	40014400 	.word	0x40014400
 80059f8:	40014800 	.word	0x40014800

080059fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	4a22      	ldr	r2, [pc, #136]	@ (8005a9c <TIM_OC6_SetConfig+0xa0>)
 8005a12:	401a      	ands	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4a1e      	ldr	r2, [pc, #120]	@ (8005aa0 <TIM_OC6_SetConfig+0xa4>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8005aa4 <TIM_OC6_SetConfig+0xa8>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	051b      	lsls	r3, r3, #20
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a16      	ldr	r2, [pc, #88]	@ (8005aa8 <TIM_OC6_SetConfig+0xac>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d007      	beq.n	8005a64 <TIM_OC6_SetConfig+0x68>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a15      	ldr	r2, [pc, #84]	@ (8005aac <TIM_OC6_SetConfig+0xb0>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d003      	beq.n	8005a64 <TIM_OC6_SetConfig+0x68>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a14      	ldr	r2, [pc, #80]	@ (8005ab0 <TIM_OC6_SetConfig+0xb4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d109      	bne.n	8005a78 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	4a13      	ldr	r2, [pc, #76]	@ (8005ab4 <TIM_OC6_SetConfig+0xb8>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	029b      	lsls	r3, r3, #10
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	621a      	str	r2, [r3, #32]
}
 8005a92:	46c0      	nop			@ (mov r8, r8)
 8005a94:	46bd      	mov	sp, r7
 8005a96:	b006      	add	sp, #24
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	46c0      	nop			@ (mov r8, r8)
 8005a9c:	ffefffff 	.word	0xffefffff
 8005aa0:	feff8fff 	.word	0xfeff8fff
 8005aa4:	ffdfffff 	.word	0xffdfffff
 8005aa8:	40012c00 	.word	0x40012c00
 8005aac:	40014400 	.word	0x40014400
 8005ab0:	40014800 	.word	0x40014800
 8005ab4:	fffbffff 	.word	0xfffbffff

08005ab8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	221f      	movs	r2, #31
 8005ac8:	4013      	ands	r3, r2
 8005aca:	2201      	movs	r2, #1
 8005acc:	409a      	lsls	r2, r3
 8005ace:	0013      	movs	r3, r2
 8005ad0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	43d2      	mvns	r2, r2
 8005ada:	401a      	ands	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a1a      	ldr	r2, [r3, #32]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	211f      	movs	r1, #31
 8005ae8:	400b      	ands	r3, r1
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	4099      	lsls	r1, r3
 8005aee:	000b      	movs	r3, r1
 8005af0:	431a      	orrs	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	621a      	str	r2, [r3, #32]
}
 8005af6:	46c0      	nop			@ (mov r8, r8)
 8005af8:	46bd      	mov	sp, r7
 8005afa:	b006      	add	sp, #24
 8005afc:	bd80      	pop	{r7, pc}
	...

08005b00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	223c      	movs	r2, #60	@ 0x3c
 8005b0e:	5c9b      	ldrb	r3, [r3, r2]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e050      	b.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	223c      	movs	r2, #60	@ 0x3c
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	223d      	movs	r2, #61	@ 0x3d
 8005b24:	2102      	movs	r1, #2
 8005b26:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a21      	ldr	r2, [pc, #132]	@ (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d108      	bne.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4a20      	ldr	r2, [pc, #128]	@ (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2270      	movs	r2, #112	@ 0x70
 8005b58:	4393      	bics	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a14      	ldr	r2, [pc, #80]	@ (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00a      	beq.n	8005b8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	2380      	movs	r3, #128	@ 0x80
 8005b7e:	05db      	lsls	r3, r3, #23
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d004      	beq.n	8005b8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a10      	ldr	r2, [pc, #64]	@ (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d10c      	bne.n	8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	2280      	movs	r2, #128	@ 0x80
 8005b92:	4393      	bics	r3, r2
 8005b94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	223d      	movs	r2, #61	@ 0x3d
 8005bac:	2101      	movs	r1, #1
 8005bae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	223c      	movs	r2, #60	@ 0x3c
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	0018      	movs	r0, r3
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	b004      	add	sp, #16
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	46c0      	nop			@ (mov r8, r8)
 8005bc4:	40012c00 	.word	0x40012c00
 8005bc8:	ff0fffff 	.word	0xff0fffff
 8005bcc:	40000400 	.word	0x40000400

08005bd0 <memset>:
 8005bd0:	0003      	movs	r3, r0
 8005bd2:	1882      	adds	r2, r0, r2
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d100      	bne.n	8005bda <memset+0xa>
 8005bd8:	4770      	bx	lr
 8005bda:	7019      	strb	r1, [r3, #0]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	e7f9      	b.n	8005bd4 <memset+0x4>

08005be0 <__libc_init_array>:
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	2600      	movs	r6, #0
 8005be4:	4c0c      	ldr	r4, [pc, #48]	@ (8005c18 <__libc_init_array+0x38>)
 8005be6:	4d0d      	ldr	r5, [pc, #52]	@ (8005c1c <__libc_init_array+0x3c>)
 8005be8:	1b64      	subs	r4, r4, r5
 8005bea:	10a4      	asrs	r4, r4, #2
 8005bec:	42a6      	cmp	r6, r4
 8005bee:	d109      	bne.n	8005c04 <__libc_init_array+0x24>
 8005bf0:	2600      	movs	r6, #0
 8005bf2:	f000 f819 	bl	8005c28 <_init>
 8005bf6:	4c0a      	ldr	r4, [pc, #40]	@ (8005c20 <__libc_init_array+0x40>)
 8005bf8:	4d0a      	ldr	r5, [pc, #40]	@ (8005c24 <__libc_init_array+0x44>)
 8005bfa:	1b64      	subs	r4, r4, r5
 8005bfc:	10a4      	asrs	r4, r4, #2
 8005bfe:	42a6      	cmp	r6, r4
 8005c00:	d105      	bne.n	8005c0e <__libc_init_array+0x2e>
 8005c02:	bd70      	pop	{r4, r5, r6, pc}
 8005c04:	00b3      	lsls	r3, r6, #2
 8005c06:	58eb      	ldr	r3, [r5, r3]
 8005c08:	4798      	blx	r3
 8005c0a:	3601      	adds	r6, #1
 8005c0c:	e7ee      	b.n	8005bec <__libc_init_array+0xc>
 8005c0e:	00b3      	lsls	r3, r6, #2
 8005c10:	58eb      	ldr	r3, [r5, r3]
 8005c12:	4798      	blx	r3
 8005c14:	3601      	adds	r6, #1
 8005c16:	e7f2      	b.n	8005bfe <__libc_init_array+0x1e>
 8005c18:	08005d1c 	.word	0x08005d1c
 8005c1c:	08005d1c 	.word	0x08005d1c
 8005c20:	08005d20 	.word	0x08005d20
 8005c24:	08005d1c 	.word	0x08005d1c

08005c28 <_init>:
 8005c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2a:	46c0      	nop			@ (mov r8, r8)
 8005c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2e:	bc08      	pop	{r3}
 8005c30:	469e      	mov	lr, r3
 8005c32:	4770      	bx	lr

08005c34 <_fini>:
 8005c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c36:	46c0      	nop			@ (mov r8, r8)
 8005c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3a:	bc08      	pop	{r3}
 8005c3c:	469e      	mov	lr, r3
 8005c3e:	4770      	bx	lr
