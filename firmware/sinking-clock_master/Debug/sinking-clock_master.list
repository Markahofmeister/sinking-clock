
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000602c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080060e8  080060e8  000070e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061b4  080061b4  0000806c  2**0
                  CONTENTS
  4 .ARM          00000000  080061b4  080061b4  0000806c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061b4  080061b4  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061b4  080061b4  000071b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061b8  080061b8  000071b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080061bc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000006c  08006228  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08006228  00008298  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c55  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bbf  00000000  00000000  0001ace9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  0001d8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e24  00000000  00000000  0001ead0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018116  00000000  00000000  0001f8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016525  00000000  00000000  00037a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098424  00000000  00000000  0004df2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6353  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041b0  00000000  00000000  000e6398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000ea548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080060d0 	.word	0x080060d0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	080060d0 	.word	0x080060d0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	b089      	sub	sp, #36	@ 0x24
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231f      	movs	r3, #31
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	2108      	movs	r1, #8
 800024a:	185b      	adds	r3, r3, r1
 800024c:	19db      	adds	r3, r3, r7
 800024e:	881b      	ldrh	r3, [r3, #0]
 8000250:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-high hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	6818      	ldr	r0, [r3, #0]
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	899b      	ldrh	r3, [r3, #12]
 800025c:	2201      	movs	r2, #1
 800025e:	0019      	movs	r1, r3
 8000260:	f002 fac1 	bl	80027e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	689b      	ldr	r3, [r3, #8]
 8000268:	6818      	ldr	r0, [r3, #0]
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	899b      	ldrh	r3, [r3, #12]
 800026e:	2200      	movs	r2, #0
 8000270:	0019      	movs	r1, r3
 8000272:	f002 fab8 	bl	80027e6 <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	0018      	movs	r0, r3
 800027c:	f004 ffa2 	bl	80051c4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	0018      	movs	r0, r3
 8000286:	f004 ff51 	bl	800512c <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000292:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000294:	46c0      	nop			@ (mov r8, r8)
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029e:	69bb      	ldr	r3, [r7, #24]
 80002a0:	1ad2      	subs	r2, r2, r3
 80002a2:	2380      	movs	r3, #128	@ 0x80
 80002a4:	021b      	lsls	r3, r3, #8
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d3f5      	bcc.n	8000296 <capTouch_Init+0x7a>

	// Verify device ID
	uint8_t deviceIDRet = 0x00;
 80002aa:	2517      	movs	r5, #23
 80002ac:	197b      	adds	r3, r7, r5
 80002ae:	2200      	movs	r2, #0
 80002b0:	701a      	strb	r2, [r3, #0]
	halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b2:	261f      	movs	r6, #31
 80002b4:	19bc      	adds	r4, r7, r6
 80002b6:	197a      	adds	r2, r7, r5
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	0011      	movs	r1, r2
 80002bc:	0018      	movs	r0, r3
 80002be:	f000 f855 	bl	800036c <capTouch_ReadDeviceID>
 80002c2:	0003      	movs	r3, r0
 80002c4:	7023      	strb	r3, [r4, #0]

	if(deviceIDRet != DEVICE_ID || halRet != HAL_OK) {
 80002c6:	197b      	adds	r3, r7, r5
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80002cc:	d103      	bne.n	80002d6 <capTouch_Init+0xba>
 80002ce:	19bb      	adds	r3, r7, r6
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <capTouch_Init+0xbe>
		return 1;
 80002d6:	2301      	movs	r3, #1
 80002d8:	e043      	b.n	8000362 <capTouch_Init+0x146>
	}

	capTouch->deviceID = deviceIDRet;
 80002da:	2317      	movs	r3, #23
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	781a      	ldrb	r2, [r3, #0]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	739a      	strb	r2, [r3, #14]

	// Force Device Recalibration
	halRet = capTouch_Recalibrate(capTouch);
 80002e4:	251f      	movs	r5, #31
 80002e6:	197c      	adds	r4, r7, r5
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 f880 	bl	80003f0 <capTouch_Recalibrate>
 80002f0:	0003      	movs	r3, r0
 80002f2:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 80002f4:	197b      	adds	r3, r7, r5
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <capTouch_Init+0xe4>
		return 2;
 80002fc:	2302      	movs	r3, #2
 80002fe:	e030      	b.n	8000362 <capTouch_Init+0x146>
	}

	// Wait until calibration sequence completes
	while(capTouch_checkCal(capTouch)) {}
 8000300:	46c0      	nop			@ (mov r8, r8)
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	0018      	movs	r0, r3
 8000306:	f000 f895 	bl	8000434 <capTouch_checkCal>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d1f9      	bne.n	8000302 <capTouch_Init+0xe6>

	// Get initial reading of channels
	halRet = capTouch_readChannels(capTouch);
 800030e:	251f      	movs	r5, #31
 8000310:	197c      	adds	r4, r7, r5
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	0018      	movs	r0, r3
 8000316:	f000 f8d1 	bl	80004bc <capTouch_readChannels>
 800031a:	0003      	movs	r3, r0
 800031c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 800031e:	197b      	adds	r3, r7, r5
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <capTouch_Init+0x10e>
		return 3;
 8000326:	2303      	movs	r3, #3
 8000328:	e01b      	b.n	8000362 <capTouch_Init+0x146>
	}

	halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 800032a:	251f      	movs	r5, #31
 800032c:	197c      	adds	r4, r7, r5
 800032e:	2334      	movs	r3, #52	@ 0x34
 8000330:	2208      	movs	r2, #8
 8000332:	189b      	adds	r3, r3, r2
 8000334:	19db      	adds	r3, r3, r7
 8000336:	781a      	ldrb	r2, [r3, #0]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	0011      	movs	r1, r2
 800033c:	0018      	movs	r0, r3
 800033e:	f000 f901 	bl	8000544 <capTouch_enableKeys>
 8000342:	0003      	movs	r3, r0
 8000344:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000346:	197b      	adds	r3, r7, r5
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <capTouch_Init+0x136>
		return 4;
 800034e:	2304      	movs	r3, #4
 8000350:	e007      	b.n	8000362 <capTouch_Init+0x146>
	}
	capTouch->keys = keyEnFlags;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	2234      	movs	r2, #52	@ 0x34
 8000356:	2108      	movs	r1, #8
 8000358:	1852      	adds	r2, r2, r1
 800035a:	19d2      	adds	r2, r2, r7
 800035c:	7812      	ldrb	r2, [r2, #0]
 800035e:	73da      	strb	r2, [r3, #15]

	return 0;
 8000360:	2300      	movs	r3, #0

}
 8000362:	0018      	movs	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	b009      	add	sp, #36	@ 0x24
 8000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800036c <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 800036c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036e:	b087      	sub	sp, #28
 8000370:	af02      	add	r7, sp, #8
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 8000376:	230e      	movs	r3, #14
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800037e:	250f      	movs	r5, #15
 8000380:	197b      	adds	r3, r7, r5
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 8000386:	210c      	movs	r1, #12
 8000388:	187b      	adds	r3, r7, r1
 800038a:	4a18      	ldr	r2, [pc, #96]	@ (80003ec <capTouch_ReadDeviceID+0x80>)
 800038c:	7812      	ldrb	r2, [r2, #0]
 800038e:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	6818      	ldr	r0, [r3, #0]
 8000394:	197c      	adds	r4, r7, r5
 8000396:	187a      	adds	r2, r7, r1
 8000398:	2301      	movs	r3, #1
 800039a:	425b      	negs	r3, r3
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	2301      	movs	r3, #1
 80003a0:	2136      	movs	r1, #54	@ 0x36
 80003a2:	f002 fb33 	bl	8002a0c <HAL_I2C_Master_Transmit>
 80003a6:	0003      	movs	r3, r0
 80003a8:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80003aa:	197b      	adds	r3, r7, r5
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d002      	beq.n	80003b8 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 80003b2:	197b      	adds	r3, r7, r5
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	e014      	b.n	80003e2 <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6818      	ldr	r0, [r3, #0]
 80003bc:	250f      	movs	r5, #15
 80003be:	197c      	adds	r4, r7, r5
 80003c0:	260e      	movs	r6, #14
 80003c2:	19ba      	adds	r2, r7, r6
 80003c4:	2301      	movs	r3, #1
 80003c6:	425b      	negs	r3, r3
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	2301      	movs	r3, #1
 80003cc:	2136      	movs	r1, #54	@ 0x36
 80003ce:	f002 fc47 	bl	8002c60 <HAL_I2C_Master_Receive>
 80003d2:	0003      	movs	r3, r0
 80003d4:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 80003d6:	19bb      	adds	r3, r7, r6
 80003d8:	781a      	ldrb	r2, [r3, #0]
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	701a      	strb	r2, [r3, #0]

	return halRet;
 80003de:	197b      	adds	r3, r7, r5
 80003e0:	781b      	ldrb	r3, [r3, #0]

}
 80003e2:	0018      	movs	r0, r3
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b005      	add	sp, #20
 80003e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ea:	46c0      	nop			@ (mov r8, r8)
 80003ec:	080060e8 	.word	0x080060e8

080003f0 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80003f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f2:	b087      	sub	sp, #28
 80003f4:	af02      	add	r7, sp, #8
 80003f6:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80003f8:	210f      	movs	r1, #15
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2200      	movs	r2, #0
 80003fe:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 8000400:	260c      	movs	r6, #12
 8000402:	19bb      	adds	r3, r7, r6
 8000404:	22c8      	movs	r2, #200	@ 0xc8
 8000406:	4252      	negs	r2, r2
 8000408:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	6818      	ldr	r0, [r3, #0]
 800040e:	000d      	movs	r5, r1
 8000410:	187c      	adds	r4, r7, r1
 8000412:	19ba      	adds	r2, r7, r6
 8000414:	2301      	movs	r3, #1
 8000416:	425b      	negs	r3, r3
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2302      	movs	r3, #2
 800041c:	2136      	movs	r1, #54	@ 0x36
 800041e:	f002 faf5 	bl	8002a0c <HAL_I2C_Master_Transmit>
 8000422:	0003      	movs	r3, r0
 8000424:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 8000426:	197b      	adds	r3, r7, r5
 8000428:	781b      	ldrb	r3, [r3, #0]

}
 800042a:	0018      	movs	r0, r3
 800042c:	46bd      	mov	sp, r7
 800042e:	b005      	add	sp, #20
 8000430:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000434 <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	b087      	sub	sp, #28
 8000438:	af02      	add	r7, sp, #8
 800043a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800043c:	210f      	movs	r1, #15
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 8000444:	230d      	movs	r3, #13
 8000446:	18fb      	adds	r3, r7, r3
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 800044c:	260c      	movs	r6, #12
 800044e:	19bb      	adds	r3, r7, r6
 8000450:	4a19      	ldr	r2, [pc, #100]	@ (80004b8 <capTouch_checkCal+0x84>)
 8000452:	7812      	ldrb	r2, [r2, #0]
 8000454:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	000d      	movs	r5, r1
 800045c:	187c      	adds	r4, r7, r1
 800045e:	19ba      	adds	r2, r7, r6
 8000460:	2301      	movs	r3, #1
 8000462:	425b      	negs	r3, r3
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	2301      	movs	r3, #1
 8000468:	2136      	movs	r1, #54	@ 0x36
 800046a:	f002 facf 	bl	8002a0c <HAL_I2C_Master_Transmit>
 800046e:	0003      	movs	r3, r0
 8000470:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000472:	197b      	adds	r3, r7, r5
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d002      	beq.n	8000480 <capTouch_checkCal+0x4c>
		return halRet;
 800047a:	197b      	adds	r3, r7, r5
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	e016      	b.n	80004ae <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6818      	ldr	r0, [r3, #0]
 8000484:	230f      	movs	r3, #15
 8000486:	18fc      	adds	r4, r7, r3
 8000488:	250d      	movs	r5, #13
 800048a:	197a      	adds	r2, r7, r5
 800048c:	2301      	movs	r3, #1
 800048e:	425b      	negs	r3, r3
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	2301      	movs	r3, #1
 8000494:	2136      	movs	r1, #54	@ 0x36
 8000496:	f002 fbe3 	bl	8002c60 <HAL_I2C_Master_Receive>
 800049a:	0003      	movs	r3, r0
 800049c:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 800049e:	197b      	adds	r3, r7, r5
 80004a0:	781a      	ldrb	r2, [r3, #0]
 80004a2:	210e      	movs	r1, #14
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	09d2      	lsrs	r2, r2, #7
 80004a8:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	781b      	ldrb	r3, [r3, #0]

}
 80004ae:	0018      	movs	r0, r3
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b005      	add	sp, #20
 80004b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	080060ec 	.word	0x080060ec

080004bc <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	b087      	sub	sp, #28
 80004c0:	af02      	add	r7, sp, #8
 80004c2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004c4:	210f      	movs	r1, #15
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 80004cc:	230e      	movs	r3, #14
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	2200      	movs	r2, #0
 80004d2:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 80004d4:	260c      	movs	r6, #12
 80004d6:	19bb      	adds	r3, r7, r6
 80004d8:	4a19      	ldr	r2, [pc, #100]	@ (8000540 <capTouch_readChannels+0x84>)
 80004da:	7812      	ldrb	r2, [r2, #0]
 80004dc:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6818      	ldr	r0, [r3, #0]
 80004e2:	000d      	movs	r5, r1
 80004e4:	187c      	adds	r4, r7, r1
 80004e6:	19ba      	adds	r2, r7, r6
 80004e8:	2301      	movs	r3, #1
 80004ea:	425b      	negs	r3, r3
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	2136      	movs	r1, #54	@ 0x36
 80004f2:	f002 fa8b 	bl	8002a0c <HAL_I2C_Master_Transmit>
 80004f6:	0003      	movs	r3, r0
 80004f8:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80004fa:	197b      	adds	r3, r7, r5
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d002      	beq.n	8000508 <capTouch_readChannels+0x4c>
		return halRet;
 8000502:	197b      	adds	r3, r7, r5
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	e017      	b.n	8000538 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6818      	ldr	r0, [r3, #0]
 800050c:	250f      	movs	r5, #15
 800050e:	197c      	adds	r4, r7, r5
 8000510:	260e      	movs	r6, #14
 8000512:	19ba      	adds	r2, r7, r6
 8000514:	2301      	movs	r3, #1
 8000516:	425b      	negs	r3, r3
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	2136      	movs	r1, #54	@ 0x36
 800051e:	f002 fb9f 	bl	8002c60 <HAL_I2C_Master_Receive>
 8000522:	0003      	movs	r3, r0
 8000524:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 8000526:	19bb      	adds	r3, r7, r6
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	227f      	movs	r2, #127	@ 0x7f
 800052c:	4013      	ands	r3, r2
 800052e:	b2da      	uxtb	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	741a      	strb	r2, [r3, #16]

	return halRet;
 8000534:	197b      	adds	r3, r7, r5
 8000536:	781b      	ldrb	r3, [r3, #0]

}
 8000538:	0018      	movs	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	b005      	add	sp, #20
 800053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000540:	080060f0 	.word	0x080060f0

08000544 <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	b08b      	sub	sp, #44	@ 0x2c
 8000548:	af02      	add	r7, sp, #8
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	000a      	movs	r2, r1
 800054e:	1cfb      	adds	r3, r7, #3
 8000550:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000552:	241e      	movs	r4, #30
 8000554:	193b      	adds	r3, r7, r4
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800055a:	2314      	movs	r3, #20
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	4a39      	ldr	r2, [pc, #228]	@ (8000644 <capTouch_enableKeys+0x100>)
 8000560:	6811      	ldr	r1, [r2, #0]
 8000562:	6019      	str	r1, [r3, #0]
 8000564:	8891      	ldrh	r1, [r2, #4]
 8000566:	8099      	strh	r1, [r3, #4]
 8000568:	7992      	ldrb	r2, [r2, #6]
 800056a:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 800056c:	260c      	movs	r6, #12
 800056e:	19bb      	adds	r3, r7, r6
 8000570:	4a35      	ldr	r2, [pc, #212]	@ (8000648 <capTouch_enableKeys+0x104>)
 8000572:	6811      	ldr	r1, [r2, #0]
 8000574:	6019      	str	r1, [r3, #0]
 8000576:	8891      	ldrh	r1, [r2, #4]
 8000578:	8099      	strh	r1, [r3, #4]
 800057a:	7992      	ldrb	r2, [r2, #6]
 800057c:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6818      	ldr	r0, [r3, #0]
 8000582:	0025      	movs	r5, r4
 8000584:	193c      	adds	r4, r7, r4
 8000586:	19ba      	adds	r2, r7, r6
 8000588:	2301      	movs	r3, #1
 800058a:	425b      	negs	r3, r3
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	2136      	movs	r1, #54	@ 0x36
 8000592:	f002 fa3b 	bl	8002a0c <HAL_I2C_Master_Transmit>
 8000596:	0003      	movs	r3, r0
 8000598:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800059a:	197b      	adds	r3, r7, r5
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d002      	beq.n	80005a8 <capTouch_enableKeys+0x64>
		return halRet;
 80005a2:	197b      	adds	r3, r7, r5
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	e049      	b.n	800063c <capTouch_enableKeys+0xf8>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6818      	ldr	r0, [r3, #0]
 80005ac:	251e      	movs	r5, #30
 80005ae:	197c      	adds	r4, r7, r5
 80005b0:	2314      	movs	r3, #20
 80005b2:	18fa      	adds	r2, r7, r3
 80005b4:	2301      	movs	r3, #1
 80005b6:	425b      	negs	r3, r3
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2307      	movs	r3, #7
 80005bc:	2136      	movs	r1, #54	@ 0x36
 80005be:	f002 fb4f 	bl	8002c60 <HAL_I2C_Master_Receive>
 80005c2:	0003      	movs	r3, r0
 80005c4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80005c6:	197b      	adds	r3, r7, r5
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <capTouch_enableKeys+0x90>
		return halRet;
 80005ce:	197b      	adds	r3, r7, r5
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	e033      	b.n	800063c <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80005d4:	231f      	movs	r3, #31
 80005d6:	18fb      	adds	r3, r7, r3
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e01c      	b.n	8000618 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 80005de:	201f      	movs	r0, #31
 80005e0:	183b      	adds	r3, r7, r0
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2414      	movs	r4, #20
 80005e6:	193a      	adds	r2, r7, r4
 80005e8:	5cd3      	ldrb	r3, [r2, r3]
 80005ea:	089b      	lsrs	r3, r3, #2
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	1cfb      	adds	r3, r7, #3
 80005f0:	7819      	ldrb	r1, [r3, #0]
 80005f2:	183b      	adds	r3, r7, r0
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	4119      	asrs	r1, r3
 80005f8:	000b      	movs	r3, r1
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2101      	movs	r1, #1
 80005fe:	400b      	ands	r3, r1
 8000600:	b2d9      	uxtb	r1, r3
 8000602:	183b      	adds	r3, r7, r0
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	434a      	muls	r2, r1
 8000608:	b2d1      	uxtb	r1, r2
 800060a:	193a      	adds	r2, r7, r4
 800060c:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 800060e:	183b      	adds	r3, r7, r0
 8000610:	781a      	ldrb	r2, [r3, #0]
 8000612:	183b      	adds	r3, r7, r0
 8000614:	3201      	adds	r2, #1
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	231f      	movs	r3, #31
 800061a:	18fb      	adds	r3, r7, r3
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b06      	cmp	r3, #6
 8000620:	d9dd      	bls.n	80005de <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 8000622:	251e      	movs	r5, #30
 8000624:	197c      	adds	r4, r7, r5
 8000626:	2314      	movs	r3, #20
 8000628:	18fa      	adds	r2, r7, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f000 f80c 	bl	800064c <capTouch_SetAveragingFactor>
 8000634:	0003      	movs	r3, r0
 8000636:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000638:	197b      	adds	r3, r7, r5
 800063a:	781b      	ldrb	r3, [r3, #0]

}
 800063c:	0018      	movs	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	b009      	add	sp, #36	@ 0x24
 8000642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000644:	080060f4 	.word	0x080060f4
 8000648:	080060fc 	.word	0x080060fc

0800064c <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 800064c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064e:	b08b      	sub	sp, #44	@ 0x2c
 8000650:	af02      	add	r7, sp, #8
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000656:	241e      	movs	r4, #30
 8000658:	193b      	adds	r3, r7, r4
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800065e:	2314      	movs	r3, #20
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	4a5d      	ldr	r2, [pc, #372]	@ (80007d8 <capTouch_SetAveragingFactor+0x18c>)
 8000664:	6811      	ldr	r1, [r2, #0]
 8000666:	6019      	str	r1, [r3, #0]
 8000668:	8891      	ldrh	r1, [r2, #4]
 800066a:	8099      	strh	r1, [r3, #4]
 800066c:	7992      	ldrb	r2, [r2, #6]
 800066e:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000670:	260c      	movs	r6, #12
 8000672:	19bb      	adds	r3, r7, r6
 8000674:	4a59      	ldr	r2, [pc, #356]	@ (80007dc <capTouch_SetAveragingFactor+0x190>)
 8000676:	6811      	ldr	r1, [r2, #0]
 8000678:	6019      	str	r1, [r3, #0]
 800067a:	8891      	ldrh	r1, [r2, #4]
 800067c:	8099      	strh	r1, [r3, #4]
 800067e:	7992      	ldrb	r2, [r2, #6]
 8000680:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6818      	ldr	r0, [r3, #0]
 8000686:	0025      	movs	r5, r4
 8000688:	193c      	adds	r4, r7, r4
 800068a:	19ba      	adds	r2, r7, r6
 800068c:	2301      	movs	r3, #1
 800068e:	425b      	negs	r3, r3
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	2136      	movs	r1, #54	@ 0x36
 8000696:	f002 f9b9 	bl	8002a0c <HAL_I2C_Master_Transmit>
 800069a:	0003      	movs	r3, r0
 800069c:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800069e:	197b      	adds	r3, r7, r5
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d002      	beq.n	80006ac <capTouch_SetAveragingFactor+0x60>
		return halRet;
 80006a6:	197b      	adds	r3, r7, r5
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	e090      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6818      	ldr	r0, [r3, #0]
 80006b0:	251e      	movs	r5, #30
 80006b2:	197c      	adds	r4, r7, r5
 80006b4:	2314      	movs	r3, #20
 80006b6:	18fa      	adds	r2, r7, r3
 80006b8:	2301      	movs	r3, #1
 80006ba:	425b      	negs	r3, r3
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2307      	movs	r3, #7
 80006c0:	2136      	movs	r1, #54	@ 0x36
 80006c2:	f002 facd 	bl	8002c60 <HAL_I2C_Master_Receive>
 80006c6:	0003      	movs	r3, r0
 80006c8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80006ca:	197b      	adds	r3, r7, r5
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d002      	beq.n	80006d8 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 80006d2:	197b      	adds	r3, r7, r5
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	e07a      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 80006d8:	2308      	movs	r3, #8
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	2200      	movs	r2, #0
 80006de:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 80006e0:	231d      	movs	r3, #29
 80006e2:	18fb      	adds	r3, r7, r3
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80006e8:	231f      	movs	r3, #31
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
 80006f0:	e041      	b.n	8000776 <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80006f2:	241f      	movs	r4, #31
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2214      	movs	r2, #20
 80006fa:	18ba      	adds	r2, r7, r2
 80006fc:	5cd2      	ldrb	r2, [r2, r3]
 80006fe:	201d      	movs	r0, #29
 8000700:	183b      	adds	r3, r7, r0
 8000702:	2103      	movs	r1, #3
 8000704:	400a      	ands	r2, r1
 8000706:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 8000708:	193b      	adds	r3, r7, r4
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	18d3      	adds	r3, r2, r3
 8000710:	781a      	ldrb	r2, [r3, #0]
 8000712:	251c      	movs	r5, #28
 8000714:	197b      	adds	r3, r7, r5
 8000716:	0092      	lsls	r2, r2, #2
 8000718:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 800071a:	183b      	adds	r3, r7, r0
 800071c:	1839      	adds	r1, r7, r0
 800071e:	197a      	adds	r2, r7, r5
 8000720:	7809      	ldrb	r1, [r1, #0]
 8000722:	7812      	ldrb	r2, [r2, #0]
 8000724:	430a      	orrs	r2, r1
 8000726:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 8000728:	193b      	adds	r3, r7, r4
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	220c      	movs	r2, #12
 800072e:	18ba      	adds	r2, r7, r2
 8000730:	5cd2      	ldrb	r2, [r2, r3]
 8000732:	2108      	movs	r1, #8
 8000734:	187b      	adds	r3, r7, r1
 8000736:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	183a      	adds	r2, r7, r0
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6818      	ldr	r0, [r3, #0]
 8000744:	251e      	movs	r5, #30
 8000746:	197c      	adds	r4, r7, r5
 8000748:	187a      	adds	r2, r7, r1
 800074a:	2301      	movs	r3, #1
 800074c:	425b      	negs	r3, r3
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2302      	movs	r3, #2
 8000752:	2136      	movs	r1, #54	@ 0x36
 8000754:	f002 f95a 	bl	8002a0c <HAL_I2C_Master_Transmit>
 8000758:	0003      	movs	r3, r0
 800075a:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 800075c:	197b      	adds	r3, r7, r5
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 8000764:	197b      	adds	r3, r7, r5
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	e031      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 800076a:	211f      	movs	r1, #31
 800076c:	187b      	adds	r3, r7, r1
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	187b      	adds	r3, r7, r1
 8000772:	3201      	adds	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	231f      	movs	r3, #31
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b06      	cmp	r3, #6
 800077e:	d9b8      	bls.n	80006f2 <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	251e      	movs	r5, #30
 8000786:	197c      	adds	r4, r7, r5
 8000788:	230c      	movs	r3, #12
 800078a:	18fa      	adds	r2, r7, r3
 800078c:	2301      	movs	r3, #1
 800078e:	425b      	negs	r3, r3
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	2136      	movs	r1, #54	@ 0x36
 8000796:	f002 f939 	bl	8002a0c <HAL_I2C_Master_Transmit>
 800079a:	0003      	movs	r3, r0
 800079c:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800079e:	197b      	adds	r3, r7, r5
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <capTouch_SetAveragingFactor+0x160>
		return halRet;
 80007a6:	197b      	adds	r3, r7, r5
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	e010      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	251e      	movs	r5, #30
 80007b2:	197c      	adds	r4, r7, r5
 80007b4:	2314      	movs	r3, #20
 80007b6:	18fa      	adds	r2, r7, r3
 80007b8:	2301      	movs	r3, #1
 80007ba:	425b      	negs	r3, r3
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2307      	movs	r3, #7
 80007c0:	2136      	movs	r1, #54	@ 0x36
 80007c2:	f002 fa4d 	bl	8002c60 <HAL_I2C_Master_Receive>
 80007c6:	0003      	movs	r3, r0
 80007c8:	7023      	strb	r3, [r4, #0]

	return halRet;
 80007ca:	197b      	adds	r3, r7, r5
 80007cc:	781b      	ldrb	r3, [r3, #0]

}
 80007ce:	0018      	movs	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b009      	add	sp, #36	@ 0x24
 80007d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	080060f4 	.word	0x080060f4
 80007dc:	080060fc 	.word	0x080060fc

080007e0 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 80007e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e2:	b08b      	sub	sp, #44	@ 0x2c
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80007ea:	231e      	movs	r3, #30
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80007f2:	2314      	movs	r3, #20
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	4a31      	ldr	r2, [pc, #196]	@ (80008bc <capTouch_SetDetectionIntegrator+0xdc>)
 80007f8:	6811      	ldr	r1, [r2, #0]
 80007fa:	6019      	str	r1, [r3, #0]
 80007fc:	8891      	ldrh	r1, [r2, #4]
 80007fe:	8099      	strh	r1, [r3, #4]
 8000800:	7992      	ldrb	r2, [r2, #6]
 8000802:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 8000804:	2310      	movs	r3, #16
 8000806:	18fb      	adds	r3, r7, r3
 8000808:	2200      	movs	r2, #0
 800080a:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800080c:	231f      	movs	r3, #31
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
 8000814:	e022      	b.n	800085c <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 8000816:	251f      	movs	r5, #31
 8000818:	197b      	adds	r3, r7, r5
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2214      	movs	r2, #20
 800081e:	18ba      	adds	r2, r7, r2
 8000820:	5cd2      	ldrb	r2, [r2, r3]
 8000822:	2110      	movs	r1, #16
 8000824:	187b      	adds	r3, r7, r1
 8000826:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 8000828:	197b      	adds	r3, r7, r5
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	18d3      	adds	r3, r2, r3
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	187b      	adds	r3, r7, r1
 8000834:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6818      	ldr	r0, [r3, #0]
 800083a:	231e      	movs	r3, #30
 800083c:	18fc      	adds	r4, r7, r3
 800083e:	187a      	adds	r2, r7, r1
 8000840:	2301      	movs	r3, #1
 8000842:	425b      	negs	r3, r3
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2302      	movs	r3, #2
 8000848:	2136      	movs	r1, #54	@ 0x36
 800084a:	f002 f8df 	bl	8002a0c <HAL_I2C_Master_Transmit>
 800084e:	0003      	movs	r3, r0
 8000850:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 8000852:	197b      	adds	r3, r7, r5
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	197b      	adds	r3, r7, r5
 8000858:	3201      	adds	r2, #1
 800085a:	701a      	strb	r2, [r3, #0]
 800085c:	231f      	movs	r3, #31
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b06      	cmp	r3, #6
 8000864:	d9d7      	bls.n	8000816 <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000866:	2608      	movs	r6, #8
 8000868:	19bb      	adds	r3, r7, r6
 800086a:	4a15      	ldr	r2, [pc, #84]	@ (80008c0 <capTouch_SetDetectionIntegrator+0xe0>)
 800086c:	6811      	ldr	r1, [r2, #0]
 800086e:	6019      	str	r1, [r3, #0]
 8000870:	8891      	ldrh	r1, [r2, #4]
 8000872:	8099      	strh	r1, [r3, #4]
 8000874:	7992      	ldrb	r2, [r2, #6]
 8000876:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	251e      	movs	r5, #30
 800087e:	197c      	adds	r4, r7, r5
 8000880:	2314      	movs	r3, #20
 8000882:	18fa      	adds	r2, r7, r3
 8000884:	2301      	movs	r3, #1
 8000886:	425b      	negs	r3, r3
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2301      	movs	r3, #1
 800088c:	2136      	movs	r1, #54	@ 0x36
 800088e:	f002 f8bd 	bl	8002a0c <HAL_I2C_Master_Transmit>
 8000892:	0003      	movs	r3, r0
 8000894:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6818      	ldr	r0, [r3, #0]
 800089a:	197c      	adds	r4, r7, r5
 800089c:	19ba      	adds	r2, r7, r6
 800089e:	2301      	movs	r3, #1
 80008a0:	425b      	negs	r3, r3
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2307      	movs	r3, #7
 80008a6:	2136      	movs	r1, #54	@ 0x36
 80008a8:	f002 f9da 	bl	8002c60 <HAL_I2C_Master_Receive>
 80008ac:	0003      	movs	r3, r0
 80008ae:	7023      	strb	r3, [r4, #0]

	return halRet;
 80008b0:	197b      	adds	r3, r7, r5
 80008b2:	781b      	ldrb	r3, [r3, #0]

}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b009      	add	sp, #36	@ 0x24
 80008ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008bc:	08006104 	.word	0x08006104
 80008c0:	080060f4 	.word	0x080060f4

080008c4 <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


void initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b099      	sub	sp, #100	@ 0x64
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 80008d0:	2438      	movs	r4, #56	@ 0x38
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	0018      	movs	r0, r3
 80008d6:	2328      	movs	r3, #40	@ 0x28
 80008d8:	001a      	movs	r2, r3
 80008da:	2100      	movs	r1, #0
 80008dc:	f005 fbc2 	bl	8006064 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	0021      	movs	r1, r4
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	785b      	ldrb	r3, [r3, #1]
 80008ee:	3301      	adds	r3, #1
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	789a      	ldrb	r2, [r3, #2]
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	685a      	ldr	r2, [r3, #4]
 8000902:	187b      	adds	r3, r7, r1
 8000904:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	78da      	ldrb	r2, [r3, #3]
 800090a:	187b      	adds	r3, r7, r1
 800090c:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	78da      	ldrb	r2, [r3, #3]
 8000912:	187b      	adds	r3, r7, r1
 8000914:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000916:	0008      	movs	r0, r1
 8000918:	183b      	adds	r3, r7, r0
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800091e:	183b      	adds	r3, r7, r0
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000924:	183b      	adds	r3, r7, r0
 8000926:	4a11      	ldr	r2, [pc, #68]	@ (800096c <initRTCInternalAlarm+0xa8>)
 8000928:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800092a:	183b      	adds	r3, r7, r0
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000930:	183b      	adds	r3, r7, r0
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 8000936:	183b      	adds	r3, r7, r0
 8000938:	2220      	movs	r2, #32
 800093a:	2101      	movs	r1, #1
 800093c:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 800093e:	0001      	movs	r1, r0
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2280      	movs	r2, #128	@ 0x80
 8000944:	0052      	lsls	r2, r2, #1
 8000946:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8000948:	1879      	adds	r1, r7, r1
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	2200      	movs	r2, #0
 800094e:	0018      	movs	r0, r3
 8000950:	f003 ff74 	bl	800483c <HAL_RTC_SetAlarm_IT>

	RTC_AlarmTypeDef internalAlarm_initTest;
	HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8000954:	2380      	movs	r3, #128	@ 0x80
 8000956:	005a      	lsls	r2, r3, #1
 8000958:	2310      	movs	r3, #16
 800095a:	18f9      	adds	r1, r7, r3
 800095c:	68f8      	ldr	r0, [r7, #12]
 800095e:	2300      	movs	r3, #0
 8000960:	f004 f8ac 	bl	8004abc <HAL_RTC_GetAlarm>


}
 8000964:	46c0      	nop			@ (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b019      	add	sp, #100	@ 0x64
 800096a:	bd90      	pop	{r4, r7, pc}
 800096c:	80800080 	.word	0x80800080

08000970 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2200      	movs	r2, #0
 8000982:	0018      	movs	r0, r3
 8000984:	f003 fe1e 	bl	80045c4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2200      	movs	r2, #0
 800098e:	0018      	movs	r0, r3
 8000990:	f003 ff06 	bl	80047a0 <HAL_RTC_GetDate>

}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b004      	add	sp, #16
 800099a:	bd80      	pop	{r7, pc}

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800099e:	b08d      	sub	sp, #52	@ 0x34
 80009a0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a2:	f001 fc3b 	bl	800221c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a6:	f000 f925 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009aa:	f000 fb1b 	bl	8000fe4 <MX_GPIO_Init>
  MX_RTC_Init();
 80009ae:	f000 f9d5 	bl	8000d5c <MX_RTC_Init>
  MX_I2C1_Init();
 80009b2:	f000 f993 	bl	8000cdc <MX_I2C1_Init>
  MX_TIM14_Init();
 80009b6:	f000 fac5 	bl	8000f44 <MX_TIM14_Init>
  MX_TIM2_Init();
 80009ba:	f000 fa63 	bl	8000e84 <MX_TIM2_Init>
  MX_TIM16_Init();
 80009be:	f000 fae7 	bl	8000f90 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // Set Smooth Calibration Value

  HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 80009c2:	4b78      	ldr	r3, [pc, #480]	@ (8000ba4 <main+0x208>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2280      	movs	r2, #128	@ 0x80
 80009c8:	01d1      	lsls	r1, r2, #7
 80009ca:	4877      	ldr	r0, [pc, #476]	@ (8000ba8 <main+0x20c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	f004 fa6a 	bl	8004ea6 <HAL_RTCEx_SetSmoothCalib>
    							RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);

  uint8_t initRet = 0;
 80009d2:	2317      	movs	r3, #23
 80009d4:	18fb      	adds	r3, r7, r3
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]

  // Init the internal RTC alarm time to track the current time
  initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 80009da:	4a74      	ldr	r2, [pc, #464]	@ (8000bac <main+0x210>)
 80009dc:	4974      	ldr	r1, [pc, #464]	@ (8000bb0 <main+0x214>)
 80009de:	4b72      	ldr	r3, [pc, #456]	@ (8000ba8 <main+0x20c>)
 80009e0:	0018      	movs	r0, r3
 80009e2:	f7ff ff6f 	bl	80008c4 <initRTCInternalAlarm>

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 80009e6:	2380      	movs	r3, #128	@ 0x80
 80009e8:	009c      	lsls	r4, r3, #2
 80009ea:	2380      	movs	r3, #128	@ 0x80
 80009ec:	00dd      	lsls	r5, r3, #3
 80009ee:	2680      	movs	r6, #128	@ 0x80
 80009f0:	2240      	movs	r2, #64	@ 0x40
 80009f2:	4694      	mov	ip, r2
 80009f4:	2380      	movs	r3, #128	@ 0x80
 80009f6:	011a      	lsls	r2, r3, #4
 80009f8:	4b6e      	ldr	r3, [pc, #440]	@ (8000bb4 <main+0x218>)
 80009fa:	6819      	ldr	r1, [r3, #0]
 80009fc:	4b6e      	ldr	r3, [pc, #440]	@ (8000bb8 <main+0x21c>)
 80009fe:	6818      	ldr	r0, [r3, #0]
 8000a00:	4b6e      	ldr	r3, [pc, #440]	@ (8000bbc <main+0x220>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	9304      	str	r3, [sp, #16]
 8000a06:	9003      	str	r0, [sp, #12]
 8000a08:	9102      	str	r1, [sp, #8]
 8000a0a:	4b6d      	ldr	r3, [pc, #436]	@ (8000bc0 <main+0x224>)
 8000a0c:	9301      	str	r3, [sp, #4]
 8000a0e:	9200      	str	r2, [sp, #0]
 8000a10:	4663      	mov	r3, ip
 8000a12:	0032      	movs	r2, r6
 8000a14:	0029      	movs	r1, r5
 8000a16:	0020      	movs	r0, r4
 8000a18:	f000 fff0 	bl	80019fc <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);


	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 8000a1c:	2216      	movs	r2, #22
 8000a1e:	18bc      	adds	r4, r7, r2
 8000a20:	f000 fbc2 	bl	80011a8 <updateAndDisplayTime>
 8000a24:	0003      	movs	r3, r0
 8000a26:	7023      	strb	r3, [r4, #0]

    /*
     * Initialize capacitive touch sensor
     */

    initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 8000a28:	4b62      	ldr	r3, [pc, #392]	@ (8000bb4 <main+0x218>)
 8000a2a:	681d      	ldr	r5, [r3, #0]
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4a64      	ldr	r2, [pc, #400]	@ (8000bc4 <main+0x228>)
 8000a32:	7812      	ldrb	r2, [r2, #0]
 8000a34:	2117      	movs	r1, #23
 8000a36:	187c      	adds	r4, r7, r1
 8000a38:	4e63      	ldr	r6, [pc, #396]	@ (8000bc8 <main+0x22c>)
 8000a3a:	4964      	ldr	r1, [pc, #400]	@ (8000bcc <main+0x230>)
 8000a3c:	4864      	ldr	r0, [pc, #400]	@ (8000bd0 <main+0x234>)
 8000a3e:	9201      	str	r2, [sp, #4]
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	0033      	movs	r3, r6
 8000a44:	002a      	movs	r2, r5
 8000a46:	f7ff fbe9 	bl	800021c <capTouch_Init>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	7023      	strb	r3, [r4, #0]
    						&capTouchResetPort, capTouchResetPin, capTouchChannels);

    if(initRet != 0) {
 8000a4e:	2117      	movs	r1, #23
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <main+0xc0>
    	dispError();
 8000a58:	f000 ff5e 	bl	8001918 <dispError>
    }

    // Max. out averaging factor
    uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 8000a5c:	4b5d      	ldr	r3, [pc, #372]	@ (8000bd4 <main+0x238>)
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	210c      	movs	r1, #12
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	4b5b      	ldr	r3, [pc, #364]	@ (8000bd4 <main+0x238>)
 8000a68:	781a      	ldrb	r2, [r3, #0]
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	705a      	strb	r2, [r3, #1]
 8000a6e:	4b59      	ldr	r3, [pc, #356]	@ (8000bd4 <main+0x238>)
 8000a70:	781a      	ldrb	r2, [r3, #0]
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	709a      	strb	r2, [r3, #2]
 8000a76:	4b57      	ldr	r3, [pc, #348]	@ (8000bd4 <main+0x238>)
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	70da      	strb	r2, [r3, #3]
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2200      	movs	r2, #0
 8000a82:	711a      	strb	r2, [r3, #4]
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2200      	movs	r2, #0
 8000a88:	715a      	strb	r2, [r3, #5]
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000a90:	2516      	movs	r5, #22
 8000a92:	197c      	adds	r4, r7, r5
 8000a94:	187a      	adds	r2, r7, r1
 8000a96:	4b4e      	ldr	r3, [pc, #312]	@ (8000bd0 <main+0x234>)
 8000a98:	0011      	movs	r1, r2
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f7ff fdd6 	bl	800064c <capTouch_SetAveragingFactor>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	7023      	strb	r3, [r4, #0]

    if(halRet != HAL_OK) {
 8000aa4:	197b      	adds	r3, r7, r5
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <main+0x114>
    	dispError();
 8000aac:	f000 ff34 	bl	8001918 <dispError>
    }

    // Set detection integration factors
    uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 8000ab0:	4b49      	ldr	r3, [pc, #292]	@ (8000bd8 <main+0x23c>)
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	701a      	strb	r2, [r3, #0]
 8000ab8:	4b47      	ldr	r3, [pc, #284]	@ (8000bd8 <main+0x23c>)
 8000aba:	781a      	ldrb	r2, [r3, #0]
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	705a      	strb	r2, [r3, #1]
 8000ac0:	4b45      	ldr	r3, [pc, #276]	@ (8000bd8 <main+0x23c>)
 8000ac2:	781a      	ldrb	r2, [r3, #0]
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	709a      	strb	r2, [r3, #2]
 8000ac8:	4b43      	ldr	r3, [pc, #268]	@ (8000bd8 <main+0x23c>)
 8000aca:	781a      	ldrb	r2, [r3, #0]
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	70da      	strb	r2, [r3, #3]
 8000ad0:	4b41      	ldr	r3, [pc, #260]	@ (8000bd8 <main+0x23c>)
 8000ad2:	781a      	ldrb	r2, [r3, #0]
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	711a      	strb	r2, [r3, #4]
 8000ad8:	4b3f      	ldr	r3, [pc, #252]	@ (8000bd8 <main+0x23c>)
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	715a      	strb	r2, [r3, #5]
 8000ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8000bd8 <main+0x23c>)
 8000ae2:	781a      	ldrb	r2, [r3, #0]
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 8000ae8:	2516      	movs	r5, #22
 8000aea:	197c      	adds	r4, r7, r5
 8000aec:	1d3a      	adds	r2, r7, #4
 8000aee:	4b38      	ldr	r3, [pc, #224]	@ (8000bd0 <main+0x234>)
 8000af0:	0011      	movs	r1, r2
 8000af2:	0018      	movs	r0, r3
 8000af4:	f7ff fe74 	bl	80007e0 <capTouch_SetDetectionIntegrator>
 8000af8:	0003      	movs	r3, r0
 8000afa:	7023      	strb	r3, [r4, #0]
    if(halRet != HAL_OK) {
 8000afc:	197b      	adds	r3, r7, r5
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <main+0x16c>
    	dispError();
 8000b04:	f000 ff08 	bl	8001918 <dispError>
    }

    userAlarmToggle = false;			//Default to off
 8000b08:	4b34      	ldr	r3, [pc, #208]	@ (8000bdc <main+0x240>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
     *
     * Else, initialize to whatever is stored in backup registers.
     */
//    j

    if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 8000b0e:	4b34      	ldr	r3, [pc, #208]	@ (8000be0 <main+0x244>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	4b25      	ldr	r3, [pc, #148]	@ (8000ba8 <main+0x20c>)
 8000b14:	0011      	movs	r1, r2
 8000b16:	0018      	movs	r0, r3
 8000b18:	f004 fa95 	bl	8005046 <HAL_RTCEx_BKUPRead>
 8000b1c:	0003      	movs	r3, r0
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d11c      	bne.n	8000b5e <main+0x1c2>

    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 8000b24:	4b2f      	ldr	r3, [pc, #188]	@ (8000be4 <main+0x248>)
 8000b26:	6819      	ldr	r1, [r3, #0]
 8000b28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <main+0x20c>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f004 fa6d 	bl	800500c <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 8000b32:	4b2d      	ldr	r3, [pc, #180]	@ (8000be8 <main+0x24c>)
 8000b34:	6819      	ldr	r1, [r3, #0]
 8000b36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba8 <main+0x20c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f004 fa66 	bl	800500c <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 8000b40:	4b2a      	ldr	r3, [pc, #168]	@ (8000bec <main+0x250>)
 8000b42:	6819      	ldr	r1, [r3, #0]
 8000b44:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <main+0x20c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f004 fa5f 	bl	800500c <HAL_RTCEx_BKUPWrite>

    	// Write backup register with a non-zero value to signify that it has been initialized before
    	HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8000b4e:	4b24      	ldr	r3, [pc, #144]	@ (8000be0 <main+0x244>)
 8000b50:	6819      	ldr	r1, [r3, #0]
 8000b52:	2301      	movs	r3, #1
 8000b54:	425a      	negs	r2, r3
 8000b56:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <main+0x20c>)
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f004 fa57 	bl	800500c <HAL_RTCEx_BKUPWrite>

    }

	userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8000b5e:	4b21      	ldr	r3, [pc, #132]	@ (8000be4 <main+0x248>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <main+0x20c>)
 8000b64:	0011      	movs	r1, r2
 8000b66:	0018      	movs	r0, r3
 8000b68:	f004 fa6d 	bl	8005046 <HAL_RTCEx_BKUPRead>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf0 <main+0x254>)
 8000b72:	701a      	strb	r2, [r3, #0]
	userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 8000b74:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <main+0x24c>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <main+0x20c>)
 8000b7a:	0011      	movs	r1, r2
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f004 fa62 	bl	8005046 <HAL_RTCEx_BKUPRead>
 8000b82:	0003      	movs	r3, r0
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <main+0x254>)
 8000b88:	705a      	strb	r2, [r3, #1]
	userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 8000b8a:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <main+0x250>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <main+0x20c>)
 8000b90:	0011      	movs	r1, r2
 8000b92:	0018      	movs	r0, r3
 8000b94:	f004 fa57 	bl	8005046 <HAL_RTCEx_BKUPRead>
 8000b98:	0003      	movs	r3, r0
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <main+0x254>)
 8000b9e:	70da      	strb	r2, [r3, #3]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ba0:	46c0      	nop			@ (mov r8, r8)
 8000ba2:	e7fd      	b.n	8000ba0 <main+0x204>
 8000ba4:	2000002c 	.word	0x2000002c
 8000ba8:	20000110 	.word	0x20000110
 8000bac:	200000a0 	.word	0x200000a0
 8000bb0:	2000008c 	.word	0x2000008c
 8000bb4:	20000044 	.word	0x20000044
 8000bb8:	20000040 	.word	0x20000040
 8000bbc:	20000030 	.word	0x20000030
 8000bc0:	20000014 	.word	0x20000014
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000004 	.word	0x20000004
 8000bcc:	200000bc 	.word	0x200000bc
 8000bd0:	20000224 	.word	0x20000224
 8000bd4:	20000009 	.word	0x20000009
 8000bd8:	2000000a 	.word	0x2000000a
 8000bdc:	20000089 	.word	0x20000089
 8000be0:	2000003c 	.word	0x2000003c
 8000be4:	200000b8 	.word	0x200000b8
 8000be8:	20000034 	.word	0x20000034
 8000bec:	20000038 	.word	0x20000038
 8000bf0:	200000a4 	.word	0x200000a4

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b093      	sub	sp, #76	@ 0x4c
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	2410      	movs	r4, #16
 8000bfc:	193b      	adds	r3, r7, r4
 8000bfe:	0018      	movs	r0, r3
 8000c00:	2338      	movs	r3, #56	@ 0x38
 8000c02:	001a      	movs	r2, r3
 8000c04:	2100      	movs	r1, #0
 8000c06:	f005 fa2d 	bl	8006064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	2310      	movs	r3, #16
 8000c10:	001a      	movs	r2, r3
 8000c12:	2100      	movs	r1, #0
 8000c14:	f005 fa26 	bl	8006064 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c18:	2380      	movs	r3, #128	@ 0x80
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f002 fcb1 	bl	8003584 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c22:	f002 fc91 	bl	8003548 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 8000c26:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd8 <SystemClock_Config+0xe4>)
 8000c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c2a:	2218      	movs	r2, #24
 8000c2c:	4393      	bics	r3, r2
 8000c2e:	001a      	movs	r2, r3
 8000c30:	4b29      	ldr	r3, [pc, #164]	@ (8000cd8 <SystemClock_Config+0xe4>)
 8000c32:	2108      	movs	r1, #8
 8000c34:	430a      	orrs	r2, r1
 8000c36:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	220e      	movs	r2, #14
 8000c3c:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	2201      	movs	r2, #1
 8000c42:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	2280      	movs	r2, #128	@ 0x80
 8000c48:	0052      	lsls	r2, r2, #1
 8000c4a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000c4c:	0021      	movs	r1, r4
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2240      	movs	r2, #64	@ 0x40
 8000c58:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2202      	movs	r2, #2
 8000c64:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2202      	movs	r2, #2
 8000c6a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	2208      	movs	r2, #8
 8000c76:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	2280      	movs	r2, #128	@ 0x80
 8000c7c:	0292      	lsls	r2, r2, #10
 8000c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2280      	movs	r2, #128	@ 0x80
 8000c84:	0492      	lsls	r2, r2, #18
 8000c86:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	2280      	movs	r2, #128	@ 0x80
 8000c8c:	0592      	lsls	r2, r2, #22
 8000c8e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	0018      	movs	r0, r3
 8000c94:	f002 fcb6 	bl	8003604 <HAL_RCC_OscConfig>
 8000c98:	1e03      	subs	r3, r0, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c9c:	f000 fea8 	bl	80019f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca0:	003b      	movs	r3, r7
 8000ca2:	2207      	movs	r2, #7
 8000ca4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca6:	003b      	movs	r3, r7
 8000ca8:	2202      	movs	r2, #2
 8000caa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cac:	003b      	movs	r3, r7
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cb2:	003b      	movs	r3, r7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cb8:	003b      	movs	r3, r7
 8000cba:	2102      	movs	r1, #2
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f002 ffbb 	bl	8003c38 <HAL_RCC_ClockConfig>
 8000cc2:	1e03      	subs	r3, r0, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000cc6:	f000 fe93 	bl	80019f0 <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f003 fab8 	bl	8004240 <HAL_RCCEx_EnableLSCO>
}
 8000cd0:	46c0      	nop			@ (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b013      	add	sp, #76	@ 0x4c
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	40021000 	.word	0x40021000

08000cdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d54 <MX_I2C1_Init+0x78>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d58 <MX_I2C1_Init+0x7c>)
 8000cea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f001 fdd1 	bl	80028c0 <HAL_I2C_Init>
 8000d1e:	1e03      	subs	r3, r0, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d22:	f000 fe65 	bl	80019f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d26:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f002 fb74 	bl	8003418 <HAL_I2CEx_ConfigAnalogFilter>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d001      	beq.n	8000d38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d34:	f000 fe5c 	bl	80019f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d38:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f002 fbb7 	bl	80034b0 <HAL_I2CEx_ConfigDigitalFilter>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d001      	beq.n	8000d4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d46:	f000 fe53 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200000bc 	.word	0x200000bc
 8000d54:	40005400 	.word	0x40005400
 8000d58:	00602173 	.word	0x00602173

08000d5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	@ 0x30
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_DateTypeDef sDate = {0};
 8000d62:	232c      	movs	r3, #44	@ 0x2c
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	2328      	movs	r3, #40	@ 0x28
 8000d70:	001a      	movs	r2, r3
 8000d72:	2100      	movs	r1, #0
 8000d74:	f005 f976 	bl	8006064 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d78:	4b3e      	ldr	r3, [pc, #248]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d7a:	4a3f      	ldr	r2, [pc, #252]	@ (8000e78 <MX_RTC_Init+0x11c>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d80:	2240      	movs	r2, #64	@ 0x40
 8000d82:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000d84:	4b3b      	ldr	r3, [pc, #236]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d86:	227f      	movs	r2, #127	@ 0x7f
 8000d88:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d8c:	22ff      	movs	r2, #255	@ 0xff
 8000d8e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d90:	4b38      	ldr	r3, [pc, #224]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d96:	4b37      	ldr	r3, [pc, #220]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d9c:	4b35      	ldr	r3, [pc, #212]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000da2:	4b34      	ldr	r3, [pc, #208]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000da4:	2280      	movs	r2, #128	@ 0x80
 8000da6:	05d2      	lsls	r2, r2, #23
 8000da8:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000daa:	4b32      	ldr	r3, [pc, #200]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000db0:	4b30      	ldr	r3, [pc, #192]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000db2:	0018      	movs	r0, r3
 8000db4:	f003 fabc 	bl	8004330 <HAL_RTC_Init>
 8000db8:	1e03      	subs	r3, r0, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 8000dbc:	f000 fe18 	bl	80019f0 <Error_Handler>
//  {
//    Error_Handler();
//  }


  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000dc0:	212c      	movs	r1, #44	@ 0x2c
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2201      	movs	r2, #1
 8000dcc:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000dda:	1879      	adds	r1, r7, r1
 8000ddc:	4b25      	ldr	r3, [pc, #148]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	0018      	movs	r0, r3
 8000de2:	f003 fc4b 	bl	800467c <HAL_RTC_SetDate>
 8000de6:	1e03      	subs	r3, r0, #0
 8000de8:	d001      	beq.n	8000dee <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000dea:	f000 fe01 	bl	80019f0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2201      	movs	r2, #1
 8000df8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	4a18      	ldr	r2, [pc, #96]	@ (8000e7c <MX_RTC_Init+0x120>)
 8000e1c:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2220      	movs	r2, #32
 8000e2e:	2101      	movs	r1, #1
 8000e30:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2280      	movs	r2, #128	@ 0x80
 8000e36:	0052      	lsls	r2, r2, #1
 8000e38:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e3a:	1d39      	adds	r1, r7, #4
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	0018      	movs	r0, r3
 8000e42:	f003 fcfb 	bl	800483c <HAL_RTC_SetAlarm_IT>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d001      	beq.n	8000e4e <MX_RTC_Init+0xf2>
  {
    Error_Handler();
 8000e4a:	f000 fdd1 	bl	80019f0 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000e4e:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000e50:	2100      	movs	r1, #0
 8000e52:	0018      	movs	r0, r3
 8000e54:	f004 f88a 	bl	8004f6c <HAL_RTCEx_SetCalibrationOutPut>
 8000e58:	1e03      	subs	r3, r0, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_RTC_Init+0x104>
  {
    Error_Handler();
 8000e5c:	f000 fdc8 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8000e60:	4907      	ldr	r1, [pc, #28]	@ (8000e80 <MX_RTC_Init+0x124>)
 8000e62:	4b04      	ldr	r3, [pc, #16]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	0018      	movs	r0, r3
 8000e68:	f003 fbac 	bl	80045c4 <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 8000e6c:	46c0      	nop			@ (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b00c      	add	sp, #48	@ 0x30
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000110 	.word	0x20000110
 8000e78:	40002800 	.word	0x40002800
 8000e7c:	80800080 	.word	0x80800080
 8000e80:	2000008c 	.word	0x2000008c

08000e84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	@ 0x28
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8a:	231c      	movs	r3, #28
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	0018      	movs	r0, r3
 8000e90:	230c      	movs	r3, #12
 8000e92:	001a      	movs	r2, r3
 8000e94:	2100      	movs	r1, #0
 8000e96:	f005 f8e5 	bl	8006064 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e9a:	003b      	movs	r3, r7
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	231c      	movs	r3, #28
 8000ea0:	001a      	movs	r2, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	f005 f8de 	bl	8006064 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ea8:	4b24      	ldr	r3, [pc, #144]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000eaa:	2280      	movs	r2, #128	@ 0x80
 8000eac:	05d2      	lsls	r2, r2, #23
 8000eae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8000eb0:	4b22      	ldr	r3, [pc, #136]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000eb2:	4a23      	ldr	r2, [pc, #140]	@ (8000f40 <MX_TIM2_Init+0xbc>)
 8000eb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b21      	ldr	r3, [pc, #132]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000ebe:	2263      	movs	r2, #99	@ 0x63
 8000ec0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ece:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f004 f99d 	bl	8005210 <HAL_TIM_PWM_Init>
 8000ed6:	1e03      	subs	r3, r0, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000eda:	f000 fd89 	bl	80019f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ede:	211c      	movs	r1, #28
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eec:	187a      	adds	r2, r7, r1
 8000eee:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000ef0:	0011      	movs	r1, r2
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f005 f836 	bl	8005f64 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef8:	1e03      	subs	r3, r0, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000efc:	f000 fd78 	bl	80019f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f00:	003b      	movs	r3, r7
 8000f02:	2260      	movs	r2, #96	@ 0x60
 8000f04:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f06:	003b      	movs	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0c:	003b      	movs	r3, r7
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f12:	003b      	movs	r3, r7
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f18:	0039      	movs	r1, r7
 8000f1a:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000f1c:	2208      	movs	r2, #8
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f004 fbb4 	bl	800568c <HAL_TIM_PWM_ConfigChannel>
 8000f24:	1e03      	subs	r3, r0, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000f28:	f000 fd62 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f2c:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f001 f8b0 	bl	8002094 <HAL_TIM_MspPostInit>

}
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b00a      	add	sp, #40	@ 0x28
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	2000013c 	.word	0x2000013c
 8000f40:	0000031f 	.word	0x0000031f

08000f44 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f88 <MX_TIM14_Init+0x44>)
 8000f4c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f50:	22f4      	movs	r2, #244	@ 0xf4
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f8c <MX_TIM14_Init+0x48>)
 8000f60:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f62:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f6e:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f70:	0018      	movs	r0, r3
 8000f72:	f004 f883 	bl	800507c <HAL_TIM_Base_Init>
 8000f76:	1e03      	subs	r3, r0, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000f7a:	f000 fd39 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000188 	.word	0x20000188
 8000f88:	40002000 	.word	0x40002000
 8000f8c:	0000ffff 	.word	0x0000ffff

08000f90 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <MX_TIM16_Init+0x44>)
 8000f96:	4a10      	ldr	r2, [pc, #64]	@ (8000fd8 <MX_TIM16_Init+0x48>)
 8000f98:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 58595;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <MX_TIM16_Init+0x44>)
 8000f9c:	4a0f      	ldr	r2, [pc, #60]	@ (8000fdc <MX_TIM16_Init+0x4c>)
 8000f9e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <MX_TIM16_Init+0x44>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <MX_TIM16_Init+0x44>)
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe0 <MX_TIM16_Init+0x50>)
 8000faa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fac:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_TIM16_Init+0x44>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 10;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <MX_TIM16_Init+0x44>)
 8000fb4:	220a      	movs	r2, #10
 8000fb6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_TIM16_Init+0x44>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000fbe:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <MX_TIM16_Init+0x44>)
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f004 f85b 	bl	800507c <HAL_TIM_Base_Init>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000fca:	f000 fd11 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200001d4 	.word	0x200001d4
 8000fd8:	40014400 	.word	0x40014400
 8000fdc:	0000e4e3 	.word	0x0000e4e3
 8000fe0:	0000ffff 	.word	0x0000ffff

08000fe4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b08b      	sub	sp, #44	@ 0x2c
 8000fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	2414      	movs	r4, #20
 8000fec:	193b      	adds	r3, r7, r4
 8000fee:	0018      	movs	r0, r3
 8000ff0:	2314      	movs	r3, #20
 8000ff2:	001a      	movs	r2, r3
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	f005 f835 	bl	8006064 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffa:	4b66      	ldr	r3, [pc, #408]	@ (8001194 <MX_GPIO_Init+0x1b0>)
 8000ffc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ffe:	4b65      	ldr	r3, [pc, #404]	@ (8001194 <MX_GPIO_Init+0x1b0>)
 8001000:	2104      	movs	r1, #4
 8001002:	430a      	orrs	r2, r1
 8001004:	635a      	str	r2, [r3, #52]	@ 0x34
 8001006:	4b63      	ldr	r3, [pc, #396]	@ (8001194 <MX_GPIO_Init+0x1b0>)
 8001008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800100a:	2204      	movs	r2, #4
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4b60      	ldr	r3, [pc, #384]	@ (8001194 <MX_GPIO_Init+0x1b0>)
 8001014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001016:	4b5f      	ldr	r3, [pc, #380]	@ (8001194 <MX_GPIO_Init+0x1b0>)
 8001018:	2101      	movs	r1, #1
 800101a:	430a      	orrs	r2, r1
 800101c:	635a      	str	r2, [r3, #52]	@ 0x34
 800101e:	4b5d      	ldr	r3, [pc, #372]	@ (8001194 <MX_GPIO_Init+0x1b0>)
 8001020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001022:	2201      	movs	r2, #1
 8001024:	4013      	ands	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102a:	4b5a      	ldr	r3, [pc, #360]	@ (8001194 <MX_GPIO_Init+0x1b0>)
 800102c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800102e:	4b59      	ldr	r3, [pc, #356]	@ (8001194 <MX_GPIO_Init+0x1b0>)
 8001030:	2108      	movs	r1, #8
 8001032:	430a      	orrs	r2, r1
 8001034:	635a      	str	r2, [r3, #52]	@ 0x34
 8001036:	4b57      	ldr	r3, [pc, #348]	@ (8001194 <MX_GPIO_Init+0x1b0>)
 8001038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800103a:	2208      	movs	r2, #8
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	4b54      	ldr	r3, [pc, #336]	@ (8001194 <MX_GPIO_Init+0x1b0>)
 8001044:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001046:	4b53      	ldr	r3, [pc, #332]	@ (8001194 <MX_GPIO_Init+0x1b0>)
 8001048:	2102      	movs	r1, #2
 800104a:	430a      	orrs	r2, r1
 800104c:	635a      	str	r2, [r3, #52]	@ 0x34
 800104e:	4b51      	ldr	r3, [pc, #324]	@ (8001194 <MX_GPIO_Init+0x1b0>)
 8001050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001052:	2202      	movs	r2, #2
 8001054:	4013      	ands	r3, r2
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 800105a:	494f      	ldr	r1, [pc, #316]	@ (8001198 <MX_GPIO_Init+0x1b4>)
 800105c:	23a0      	movs	r3, #160	@ 0xa0
 800105e:	05db      	lsls	r3, r3, #23
 8001060:	2200      	movs	r2, #0
 8001062:	0018      	movs	r0, r3
 8001064:	f001 fbbf 	bl	80027e6 <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8001068:	4b4c      	ldr	r3, [pc, #304]	@ (800119c <MX_GPIO_Init+0x1b8>)
 800106a:	2200      	movs	r2, #0
 800106c:	2180      	movs	r1, #128	@ 0x80
 800106e:	0018      	movs	r0, r3
 8001070:	f001 fbb9 	bl	80027e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_RST_GPIO_Port, CTOUCH_RST_Pin, GPIO_PIN_RESET);
 8001074:	2380      	movs	r3, #128	@ 0x80
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4849      	ldr	r0, [pc, #292]	@ (80011a0 <MX_GPIO_Init+0x1bc>)
 800107a:	2200      	movs	r2, #0
 800107c:	0019      	movs	r1, r3
 800107e:	f001 fbb2 	bl	80027e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin BUZZER_OUT_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin
                           SHIFT_MCLR_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8001082:	193b      	adds	r3, r7, r4
 8001084:	4a44      	ldr	r2, [pc, #272]	@ (8001198 <MX_GPIO_Init+0x1b4>)
 8001086:	601a      	str	r2, [r3, #0]
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	193b      	adds	r3, r7, r4
 800108a:	2201      	movs	r2, #1
 800108c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	193b      	adds	r3, r7, r4
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	193b      	adds	r3, r7, r4
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	193a      	adds	r2, r7, r4
 800109c:	23a0      	movs	r3, #160	@ 0xa0
 800109e:	05db      	lsls	r3, r3, #23
 80010a0:	0011      	movs	r1, r2
 80010a2:	0018      	movs	r0, r3
 80010a4:	f001 fa1e 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010a8:	193b      	adds	r3, r7, r4
 80010aa:	2204      	movs	r2, #4
 80010ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ae:	193b      	adds	r3, r7, r4
 80010b0:	2203      	movs	r2, #3
 80010b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	193b      	adds	r3, r7, r4
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	193a      	adds	r2, r7, r4
 80010bc:	23a0      	movs	r3, #160	@ 0xa0
 80010be:	05db      	lsls	r3, r3, #23
 80010c0:	0011      	movs	r1, r2
 80010c2:	0018      	movs	r0, r3
 80010c4:	f001 fa0e 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	2280      	movs	r2, #128	@ 0x80
 80010cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	193b      	adds	r3, r7, r4
 80010d0:	2201      	movs	r2, #1
 80010d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	193b      	adds	r3, r7, r4
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	193b      	adds	r3, r7, r4
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 80010e0:	193b      	adds	r3, r7, r4
 80010e2:	4a2e      	ldr	r2, [pc, #184]	@ (800119c <MX_GPIO_Init+0x1b8>)
 80010e4:	0019      	movs	r1, r3
 80010e6:	0010      	movs	r0, r2
 80010e8:	f001 f9fc 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 80010ec:	193b      	adds	r3, r7, r4
 80010ee:	2280      	movs	r2, #128	@ 0x80
 80010f0:	0212      	lsls	r2, r2, #8
 80010f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010f4:	193b      	adds	r3, r7, r4
 80010f6:	2284      	movs	r2, #132	@ 0x84
 80010f8:	0392      	lsls	r2, r2, #14
 80010fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010fc:	193b      	adds	r3, r7, r4
 80010fe:	2201      	movs	r2, #1
 8001100:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001102:	193a      	adds	r2, r7, r4
 8001104:	23a0      	movs	r3, #160	@ 0xa0
 8001106:	05db      	lsls	r3, r3, #23
 8001108:	0011      	movs	r1, r2
 800110a:	0018      	movs	r0, r3
 800110c:	f001 f9ea 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 8001110:	0021      	movs	r1, r4
 8001112:	187b      	adds	r3, r7, r1
 8001114:	220f      	movs	r2, #15
 8001116:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001118:	187b      	adds	r3, r7, r1
 800111a:	2284      	movs	r2, #132	@ 0x84
 800111c:	0392      	lsls	r2, r2, #14
 800111e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001120:	187b      	adds	r3, r7, r1
 8001122:	2201      	movs	r2, #1
 8001124:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001126:	000c      	movs	r4, r1
 8001128:	187b      	adds	r3, r7, r1
 800112a:	4a1e      	ldr	r2, [pc, #120]	@ (80011a4 <MX_GPIO_Init+0x1c0>)
 800112c:	0019      	movs	r1, r3
 800112e:	0010      	movs	r0, r2
 8001130:	f001 f9d8 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_RST_Pin */
  GPIO_InitStruct.Pin = CTOUCH_RST_Pin;
 8001134:	0021      	movs	r1, r4
 8001136:	187b      	adds	r3, r7, r1
 8001138:	2280      	movs	r2, #128	@ 0x80
 800113a:	0052      	lsls	r2, r2, #1
 800113c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	187b      	adds	r3, r7, r1
 8001140:	2201      	movs	r2, #1
 8001142:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	187b      	adds	r3, r7, r1
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	187b      	adds	r3, r7, r1
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001150:	187b      	adds	r3, r7, r1
 8001152:	4a13      	ldr	r2, [pc, #76]	@ (80011a0 <MX_GPIO_Init+0x1bc>)
 8001154:	0019      	movs	r1, r3
 8001156:	0010      	movs	r0, r2
 8001158:	f001 f9c4 	bl	80024e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2005      	movs	r0, #5
 8001162:	f001 f98d 	bl	8002480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001166:	2005      	movs	r0, #5
 8001168:	f001 f99f 	bl	80024aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	2006      	movs	r0, #6
 8001172:	f001 f985 	bl	8002480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001176:	2006      	movs	r0, #6
 8001178:	f001 f997 	bl	80024aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2101      	movs	r1, #1
 8001180:	2007      	movs	r0, #7
 8001182:	f001 f97d 	bl	8002480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001186:	2007      	movs	r0, #7
 8001188:	f001 f98f 	bl	80024aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800118c:	46c0      	nop			@ (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b00b      	add	sp, #44	@ 0x2c
 8001192:	bd90      	pop	{r4, r7, pc}
 8001194:	40021000 	.word	0x40021000
 8001198:	00001f01 	.word	0x00001f01
 800119c:	50000800 	.word	0x50000800
 80011a0:	50000400 	.word	0x50000400
 80011a4:	50000c00 	.word	0x50000c00

080011a8 <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 80011b4:	4a07      	ldr	r2, [pc, #28]	@ (80011d4 <updateAndDisplayTime+0x2c>)
 80011b6:	4908      	ldr	r1, [pc, #32]	@ (80011d8 <updateAndDisplayTime+0x30>)
 80011b8:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <updateAndDisplayTime+0x34>)
 80011ba:	0018      	movs	r0, r3
 80011bc:	f7ff fbd8 	bl	8000970 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 80011c0:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <updateAndDisplayTime+0x30>)
 80011c2:	0018      	movs	r0, r3
 80011c4:	f000 fd3a 	bl	8001c3c <sevSeg_updateDigits>

	return halRet;
 80011c8:	1dfb      	adds	r3, r7, #7
 80011ca:	781b      	ldrb	r3, [r3, #0]

}
 80011cc:	0018      	movs	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b002      	add	sp, #8
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200000a0 	.word	0x200000a0
 80011d8:	2000008c 	.word	0x2000008c
 80011dc:	20000110 	.word	0x20000110

080011e0 <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 80011ec:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <updateAndDisplayAlarm+0x20>)
 80011ee:	0018      	movs	r0, r3
 80011f0:	f000 fd24 	bl	8001c3c <sevSeg_updateDigits>

	return halRet;
 80011f4:	1dfb      	adds	r3, r7, #7
 80011f6:	781b      	ldrb	r3, [r3, #0]

}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b002      	add	sp, #8
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200000a4 	.word	0x200000a4

08001204 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b08d      	sub	sp, #52	@ 0x34
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

	  //printf("Enter current time minute increment interrupt\n\r");

	  RTC_AlarmTypeDef sAlarm = {0};
 800120c:	2408      	movs	r4, #8
 800120e:	193b      	adds	r3, r7, r4
 8001210:	0018      	movs	r0, r3
 8001212:	2328      	movs	r3, #40	@ 0x28
 8001214:	001a      	movs	r2, r3
 8001216:	2100      	movs	r1, #0
 8001218:	f004 ff24 	bl	8006064 <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 800121c:	2380      	movs	r3, #128	@ 0x80
 800121e:	005a      	lsls	r2, r3, #1
 8001220:	1939      	adds	r1, r7, r4
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	2300      	movs	r3, #0
 8001226:	f003 fc49 	bl	8004abc <HAL_RTC_GetAlarm>


	  if(sAlarm.AlarmTime.Minutes>58) {
 800122a:	193b      	adds	r3, r7, r4
 800122c:	785b      	ldrb	r3, [r3, #1]
 800122e:	2b3a      	cmp	r3, #58	@ 0x3a
 8001230:	d903      	bls.n	800123a <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 8001232:	193b      	adds	r3, r7, r4
 8001234:	2200      	movs	r2, #0
 8001236:	705a      	strb	r2, [r3, #1]
 8001238:	e00e      	b.n	8001258 <HAL_RTC_AlarmAEventCallback+0x54>
		//printf("Reset alarm time\n\r");
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 800123a:	2108      	movs	r1, #8
 800123c:	187b      	adds	r3, r7, r1
 800123e:	785b      	ldrb	r3, [r3, #1]
 8001240:	3301      	adds	r3, #1
 8001242:	b2da      	uxtb	r2, r3
 8001244:	187b      	adds	r3, r7, r1
 8001246:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001248:	e006      	b.n	8001258 <HAL_RTC_AlarmAEventCallback+0x54>
			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 800124a:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <HAL_RTC_AlarmAEventCallback+0xa4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2201      	movs	r2, #1
 8001250:	0011      	movs	r1, r2
 8001252:	0018      	movs	r0, r3
 8001254:	f001 fae4 	bl	8002820 <HAL_GPIO_TogglePin>
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001258:	2308      	movs	r3, #8
 800125a:	18f9      	adds	r1, r7, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	0018      	movs	r0, r3
 8001262:	f003 faeb 	bl	800483c <HAL_RTC_SetAlarm_IT>
 8001266:	1e03      	subs	r3, r0, #0
 8001268:	d1ef      	bne.n	800124a <HAL_RTC_AlarmAEventCallback+0x46>
		}

	  updateAndDisplayTime();
 800126a:	f7ff ff9d 	bl	80011a8 <updateAndDisplayTime>

	  //printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 800126e:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <HAL_RTC_AlarmAEventCallback+0xa8>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d013      	beq.n	800129e <HAL_RTC_AlarmAEventCallback+0x9a>
 8001276:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <HAL_RTC_AlarmAEventCallback+0xac>)
 8001278:	781a      	ldrb	r2, [r3, #0]
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <HAL_RTC_AlarmAEventCallback+0xb0>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d10d      	bne.n	800129e <HAL_RTC_AlarmAEventCallback+0x9a>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <HAL_RTC_AlarmAEventCallback+0xac>)
 8001284:	785a      	ldrb	r2, [r3, #1]
 8001286:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8001288:	785b      	ldrb	r3, [r3, #1]
 800128a:	429a      	cmp	r2, r3
 800128c:	d107      	bne.n	800129e <HAL_RTC_AlarmAEventCallback+0x9a>
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <HAL_RTC_AlarmAEventCallback+0xac>)
 8001290:	78da      	ldrb	r2, [r3, #3]
 8001292:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8001294:	78db      	ldrb	r3, [r3, #3]
 8001296:	429a      	cmp	r2, r3
 8001298:	d101      	bne.n	800129e <HAL_RTC_AlarmAEventCallback+0x9a>
		  userAlarmBeep();
 800129a:	f000 f80d 	bl	80012b8 <userAlarmBeep>
	  }


}
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b00d      	add	sp, #52	@ 0x34
 80012a4:	bd90      	pop	{r4, r7, pc}
 80012a6:	46c0      	nop			@ (mov r8, r8)
 80012a8:	20000028 	.word	0x20000028
 80012ac:	20000089 	.word	0x20000089
 80012b0:	200000a4 	.word	0x200000a4
 80012b4:	2000008c 	.word	0x2000008c

080012b8 <userAlarmBeep>:

void userAlarmBeep() {
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 80012be:	4b34      	ldr	r3, [pc, #208]	@ (8001390 <userAlarmBeep+0xd8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	0018      	movs	r0, r3
 80012c4:	f003 ff7e 	bl	80051c4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 80012c8:	4b31      	ldr	r3, [pc, #196]	@ (8001390 <userAlarmBeep+0xd8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	0018      	movs	r0, r3
 80012ce:	f003 ff2d 	bl	800512c <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80012d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001390 <userAlarmBeep+0xd8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012da:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 80012dc:	1cfb      	adds	r3, r7, #3
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 80012e2:	f7ff ff61 	bl	80011a8 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 80012e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001390 <userAlarmBeep+0xd8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	4a28      	ldr	r2, [pc, #160]	@ (8001394 <userAlarmBeep+0xdc>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d922      	bls.n	800133e <userAlarmBeep+0x86>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 80012f8:	1cfb      	adds	r3, r7, #3
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4a26      	ldr	r2, [pc, #152]	@ (8001398 <userAlarmBeep+0xe0>)
 80012fe:	5cd3      	ldrb	r3, [r2, r3]
 8001300:	0018      	movs	r0, r3
 8001302:	f000 fd4d 	bl	8001da0 <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(buzzerPort, buzzerPin);					// Toggle Buzzer
 8001306:	4b25      	ldr	r3, [pc, #148]	@ (800139c <userAlarmBeep+0xe4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2280      	movs	r2, #128	@ 0x80
 800130c:	0052      	lsls	r2, r2, #1
 800130e:	0011      	movs	r1, r2
 8001310:	0018      	movs	r0, r3
 8001312:	f001 fa85 	bl	8002820 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001316:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <userAlarmBeep+0xd8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131e:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001320:	1cfb      	adds	r3, r7, #3
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	1e5a      	subs	r2, r3, #1
 8001326:	4193      	sbcs	r3, r2
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2201      	movs	r2, #1
 800132c:	4053      	eors	r3, r2
 800132e:	b2db      	uxtb	r3, r3
 8001330:	001a      	movs	r2, r3
 8001332:	1cfb      	adds	r3, r7, #3
 8001334:	701a      	strb	r2, [r3, #0]
 8001336:	781a      	ldrb	r2, [r3, #0]
 8001338:	2101      	movs	r1, #1
 800133a:	400a      	ands	r2, r1
 800133c:	701a      	strb	r2, [r3, #0]

		}


		HAL_StatusTypeDef halRet = capTouch_readChannels(&capTouch);
 800133e:	1cbc      	adds	r4, r7, #2
 8001340:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <userAlarmBeep+0xe8>)
 8001342:	0018      	movs	r0, r3
 8001344:	f7ff f8ba 	bl	80004bc <capTouch_readChannels>
 8001348:	0003      	movs	r3, r0
 800134a:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK)
 800134c:	1cbb      	adds	r3, r7, #2
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <userAlarmBeep+0xa0>
			dispError();
 8001354:	f000 fae0 	bl	8001918 <dispError>

	} while(capTouch.keyStat == 0x00);
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <userAlarmBeep+0xe8>)
 800135a:	7c1b      	ldrb	r3, [r3, #16]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0c0      	beq.n	80012e2 <userAlarmBeep+0x2a>

	HAL_TIM_Base_Stop(timerDelay);
 8001360:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <userAlarmBeep+0xd8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	0018      	movs	r0, r3
 8001366:	f003 ff2d 	bl	80051c4 <HAL_TIM_Base_Stop>
	HAL_GPIO_WritePin(buzzerPort, buzzerPin, GPIO_PIN_RESET);
 800136a:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <userAlarmBeep+0xe4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2280      	movs	r2, #128	@ 0x80
 8001370:	0051      	lsls	r1, r2, #1
 8001372:	2200      	movs	r2, #0
 8001374:	0018      	movs	r0, r3
 8001376:	f001 fa36 	bl	80027e6 <HAL_GPIO_WritePin>
	updateAndDisplayTime();				// Update to current time and display
 800137a:	f7ff ff15 	bl	80011a8 <updateAndDisplayTime>
	sevSeg_setIntensity(sevSeg_intensityDuty[1]);	// Toggle 0% to 50% duty cycle
 800137e:	235a      	movs	r3, #90	@ 0x5a
 8001380:	0018      	movs	r0, r3
 8001382:	f000 fd0d 	bl	8001da0 <sevSeg_setIntensity>



}
 8001386:	46c0      	nop			@ (mov r8, r8)
 8001388:	46bd      	mov	sp, r7
 800138a:	b003      	add	sp, #12
 800138c:	bd90      	pop	{r4, r7, pc}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	20000044 	.word	0x20000044
 8001394:	00007ffe 	.word	0x00007ffe
 8001398:	0800610c 	.word	0x0800610c
 800139c:	20000010 	.word	0x20000010
 80013a0:	20000224 	.word	0x20000224

080013a4 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	0002      	movs	r2, r0
 80013ac:	1dbb      	adds	r3, r7, #6
 80013ae:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 80013b0:	2208      	movs	r2, #8
 80013b2:	1dbb      	adds	r3, r7, #6
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d106      	bne.n	80013c8 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 80013ba:	230f      	movs	r3, #15
 80013bc:	18fc      	adds	r4, r7, r3
 80013be:	f000 f839 	bl	8001434 <displayButtonISR>
 80013c2:	0003      	movs	r3, r0
 80013c4:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 80013c6:	e031      	b.n	800142c <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 80013c8:	2204      	movs	r2, #4
 80013ca:	1dbb      	adds	r3, r7, #6
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d106      	bne.n	80013e0 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 80013d2:	230f      	movs	r3, #15
 80013d4:	18fc      	adds	r4, r7, r3
 80013d6:	f000 f855 	bl	8001484 <alarmEnableISR>
 80013da:	0003      	movs	r3, r0
 80013dc:	7023      	strb	r3, [r4, #0]
}
 80013de:	e025      	b.n	800142c <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 80013e0:	2380      	movs	r3, #128	@ 0x80
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	1dba      	adds	r2, r7, #6
 80013e6:	8812      	ldrh	r2, [r2, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d106      	bne.n	80013fa <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 80013ec:	230f      	movs	r3, #15
 80013ee:	18fc      	adds	r4, r7, r3
 80013f0:	f000 f87c 	bl	80014ec <alarmSetISR>
 80013f4:	0003      	movs	r3, r0
 80013f6:	7023      	strb	r3, [r4, #0]
}
 80013f8:	e018      	b.n	800142c <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 80013fa:	2201      	movs	r2, #1
 80013fc:	1dbb      	adds	r3, r7, #6
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	4293      	cmp	r3, r2
 8001402:	d106      	bne.n	8001412 <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 8001404:	230f      	movs	r3, #15
 8001406:	18fc      	adds	r4, r7, r3
 8001408:	f000 f940 	bl	800168c <hourSetISR>
 800140c:	0003      	movs	r3, r0
 800140e:	7023      	strb	r3, [r4, #0]
}
 8001410:	e00c      	b.n	800142c <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8001412:	2202      	movs	r2, #2
 8001414:	1dbb      	adds	r3, r7, #6
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	4293      	cmp	r3, r2
 800141a:	d106      	bne.n	800142a <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 800141c:	230f      	movs	r3, #15
 800141e:	18fc      	adds	r4, r7, r3
 8001420:	f000 f960 	bl	80016e4 <minuteSetISR>
 8001424:	0003      	movs	r3, r0
 8001426:	7023      	strb	r3, [r4, #0]
}
 8001428:	e000      	b.n	800142c <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 800142a:	46c0      	nop			@ (mov r8, r8)
}
 800142c:	46c0      	nop			@ (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	b005      	add	sp, #20
 8001432:	bd90      	pop	{r4, r7, pc}

08001434 <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 800143a:	1dfb      	adds	r3, r7, #7
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 8001440:	f7ff feb2 	bl	80011a8 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8001444:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <displayButtonISR+0x48>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	001a      	movs	r2, r3
 800144a:	4b0d      	ldr	r3, [pc, #52]	@ (8001480 <displayButtonISR+0x4c>)
 800144c:	5c9b      	ldrb	r3, [r3, r2]
 800144e:	0018      	movs	r0, r3
 8001450:	f000 fca6 	bl	8001da0 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8001454:	4b09      	ldr	r3, [pc, #36]	@ (800147c <displayButtonISR+0x48>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d903      	bls.n	8001464 <displayButtonISR+0x30>
		displayToggle = 0;
 800145c:	4b07      	ldr	r3, [pc, #28]	@ (800147c <displayButtonISR+0x48>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
 8001462:	e005      	b.n	8001470 <displayButtonISR+0x3c>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 8001464:	4b05      	ldr	r3, [pc, #20]	@ (800147c <displayButtonISR+0x48>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b03      	ldr	r3, [pc, #12]	@ (800147c <displayButtonISR+0x48>)
 800146e:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8001470:	1dfb      	adds	r3, r7, #7
 8001472:	781b      	ldrb	r3, [r3, #0]

}
 8001474:	0018      	movs	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	b002      	add	sp, #8
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000088 	.word	0x20000088
 8001480:	0800610c 	.word	0x0800610c

08001484 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 800148a:	1dfb      	adds	r3, r7, #7
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8001490:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <alarmEnableISR+0x60>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2201      	movs	r2, #1
 8001496:	4053      	eors	r3, r2
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00b      	beq.n	80014b6 <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 800149e:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <alarmEnableISR+0x64>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2280      	movs	r2, #128	@ 0x80
 80014a4:	0151      	lsls	r1, r2, #5
 80014a6:	2201      	movs	r2, #1
 80014a8:	0018      	movs	r0, r3
 80014aa:	f001 f99c 	bl	80027e6 <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 80014ae:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <alarmEnableISR+0x60>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]
 80014b4:	e010      	b.n	80014d8 <alarmEnableISR+0x54>

		//printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
								//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 80014b6:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <alarmEnableISR+0x60>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 80014be:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <alarmEnableISR+0x64>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2280      	movs	r2, #128	@ 0x80
 80014c4:	0151      	lsls	r1, r2, #5
 80014c6:	2200      	movs	r2, #0
 80014c8:	0018      	movs	r0, r3
 80014ca:	f001 f98c 	bl	80027e6 <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 80014ce:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <alarmEnableISR+0x60>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
 80014d4:	e000      	b.n	80014d8 <alarmEnableISR+0x54>

		//printf("User alarm disabled.\n\r");
	}
	else {
		__NOP();							//Code should never reach here.
 80014d6:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 80014d8:	1dfb      	adds	r3, r7, #7
 80014da:	781b      	ldrb	r3, [r3, #0]

}
 80014dc:	0018      	movs	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	b002      	add	sp, #8
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000089 	.word	0x20000089
 80014e8:	2000000c 	.word	0x2000000c

080014ec <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
	//printf("Enter user alarm set ISR.\n\r");

	//printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
			//userAlarmTime.Minutes, userAlarmTime.Seconds);

	HAL_StatusTypeDef halRet = HAL_OK;
 80014f2:	1cbb      	adds	r3, r7, #2
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for switch debounce
	 */

	// First wait for button to deactivate again
	while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_SET);
 80014f8:	46c0      	nop			@ (mov r8, r8)
 80014fa:	4b60      	ldr	r3, [pc, #384]	@ (800167c <alarmSetISR+0x190>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2280      	movs	r2, #128	@ 0x80
 8001500:	0212      	lsls	r2, r2, #8
 8001502:	0011      	movs	r1, r2
 8001504:	0018      	movs	r0, r3
 8001506:	f001 f951 	bl	80027ac <HAL_GPIO_ReadPin>
 800150a:	0003      	movs	r3, r0
 800150c:	2b01      	cmp	r3, #1
 800150e:	d1f4      	bne.n	80014fa <alarmSetISR+0xe>

	// Go through debounce
	HAL_TIM_Base_Stop(timerDelay);
 8001510:	4b5b      	ldr	r3, [pc, #364]	@ (8001680 <alarmSetISR+0x194>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	0018      	movs	r0, r3
 8001516:	f003 fe55 	bl	80051c4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 800151a:	4b59      	ldr	r3, [pc, #356]	@ (8001680 <alarmSetISR+0x194>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	0018      	movs	r0, r3
 8001520:	f003 fe04 	bl	800512c <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001524:	4b56      	ldr	r3, [pc, #344]	@ (8001680 <alarmSetISR+0x194>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152c:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 8));
 800152e:	4b54      	ldr	r3, [pc, #336]	@ (8001680 <alarmSetISR+0x194>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	1ad2      	subs	r2, r2, r3
 800153a:	2380      	movs	r3, #128	@ 0x80
 800153c:	019b      	lsls	r3, r3, #6
 800153e:	429a      	cmp	r2, r3
 8001540:	d9f5      	bls.n	800152e <alarmSetISR+0x42>


	/*
	 *  Poll for 1 second to see if the alarm set button is pressed again
	 */
	HAL_TIM_Base_Stop(timerDelay);
 8001542:	4b4f      	ldr	r3, [pc, #316]	@ (8001680 <alarmSetISR+0x194>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	0018      	movs	r0, r3
 8001548:	f003 fe3c 	bl	80051c4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 800154c:	4b4c      	ldr	r3, [pc, #304]	@ (8001680 <alarmSetISR+0x194>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	0018      	movs	r0, r3
 8001552:	f003 fdeb 	bl	800512c <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001556:	4b4a      	ldr	r3, [pc, #296]	@ (8001680 <alarmSetISR+0x194>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	607b      	str	r3, [r7, #4]

	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 8001560:	e00d      	b.n	800157e <alarmSetISR+0x92>

		if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 8001562:	4b46      	ldr	r3, [pc, #280]	@ (800167c <alarmSetISR+0x190>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2280      	movs	r2, #128	@ 0x80
 8001568:	0212      	lsls	r2, r2, #8
 800156a:	0011      	movs	r1, r2
 800156c:	0018      	movs	r0, r3
 800156e:	f001 f91d 	bl	80027ac <HAL_GPIO_ReadPin>
 8001572:	1e03      	subs	r3, r0, #0
 8001574:	d103      	bne.n	800157e <alarmSetISR+0x92>
			alarmSetMode = true;
 8001576:	4b43      	ldr	r3, [pc, #268]	@ (8001684 <alarmSetISR+0x198>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
//			HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
			break;
 800157c:	e009      	b.n	8001592 <alarmSetISR+0xa6>
	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 800157e:	4b40      	ldr	r3, [pc, #256]	@ (8001680 <alarmSetISR+0x194>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	1ad2      	subs	r2, r2, r3
 800158a:	2380      	movs	r3, #128	@ 0x80
 800158c:	025b      	lsls	r3, r3, #9
 800158e:	429a      	cmp	r2, r3
 8001590:	d9e7      	bls.n	8001562 <alarmSetISR+0x76>
		}

	}

	// Go through debounce once again
	HAL_TIM_Base_Stop(timerDelay);
 8001592:	4b3b      	ldr	r3, [pc, #236]	@ (8001680 <alarmSetISR+0x194>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	0018      	movs	r0, r3
 8001598:	f003 fe14 	bl	80051c4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 800159c:	4b38      	ldr	r3, [pc, #224]	@ (8001680 <alarmSetISR+0x194>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	0018      	movs	r0, r3
 80015a2:	f003 fdc3 	bl	800512c <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80015a6:	4b36      	ldr	r3, [pc, #216]	@ (8001680 <alarmSetISR+0x194>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ae:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 4));
 80015b0:	4b33      	ldr	r3, [pc, #204]	@ (8001680 <alarmSetISR+0x194>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	1ad2      	subs	r2, r2, r3
 80015bc:	2380      	movs	r3, #128	@ 0x80
 80015be:	01db      	lsls	r3, r3, #7
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d9f5      	bls.n	80015b0 <alarmSetISR+0xc4>
	/*
	 * Then, if we are in alarm set mode, go through the
	 * alarm set process until the button is pressed again
	 */

	HAL_TIM_Base_Stop(timerDelay);
 80015c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001680 <alarmSetISR+0x194>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	0018      	movs	r0, r3
 80015ca:	f003 fdfb 	bl	80051c4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80015ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001680 <alarmSetISR+0x194>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	0018      	movs	r0, r3
 80015d4:	f003 fdaa 	bl	800512c <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80015d8:	4b29      	ldr	r3, [pc, #164]	@ (8001680 <alarmSetISR+0x194>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e0:	607b      	str	r3, [r7, #4]

	if(alarmSetMode) {
 80015e2:	4b28      	ldr	r3, [pc, #160]	@ (8001684 <alarmSetISR+0x198>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d03e      	beq.n	8001668 <alarmSetISR+0x17c>

		bool displayBlink = false;
 80015ea:	1cfb      	adds	r3, r7, #3
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			updateAndDisplayAlarm();
 80015f0:	f7ff fdf6 	bl	80011e0 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 80015f4:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <alarmSetISR+0x194>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	1ad2      	subs	r2, r2, r3
 8001600:	2380      	movs	r3, #128	@ 0x80
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	429a      	cmp	r2, r3
 8001606:	d31a      	bcc.n	800163e <alarmSetISR+0x152>

//				HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 8001608:	1cfb      	adds	r3, r7, #3
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4a1e      	ldr	r2, [pc, #120]	@ (8001688 <alarmSetISR+0x19c>)
 800160e:	5cd3      	ldrb	r3, [r2, r3]
 8001610:	0018      	movs	r0, r3
 8001612:	f000 fbc5 	bl	8001da0 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 8001616:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <alarmSetISR+0x194>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161e:	607b      	str	r3, [r7, #4]
				displayBlink = !displayBlink;
 8001620:	1cfb      	adds	r3, r7, #3
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	1e5a      	subs	r2, r3, #1
 8001626:	4193      	sbcs	r3, r2
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2201      	movs	r2, #1
 800162c:	4053      	eors	r3, r2
 800162e:	b2db      	uxtb	r3, r3
 8001630:	001a      	movs	r2, r3
 8001632:	1cfb      	adds	r3, r7, #3
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	781a      	ldrb	r2, [r3, #0]
 8001638:	2101      	movs	r1, #1
 800163a:	400a      	ands	r2, r1
 800163c:	701a      	strb	r2, [r3, #0]

			}

		}while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET);
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <alarmSetISR+0x190>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2280      	movs	r2, #128	@ 0x80
 8001644:	0212      	lsls	r2, r2, #8
 8001646:	0011      	movs	r1, r2
 8001648:	0018      	movs	r0, r3
 800164a:	f001 f8af 	bl	80027ac <HAL_GPIO_ReadPin>
 800164e:	1e03      	subs	r3, r0, #0
 8001650:	d1ce      	bne.n	80015f0 <alarmSetISR+0x104>

//		HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_RESET);

		sevSeg_setIntensity(sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 8001652:	235a      	movs	r3, #90	@ 0x5a
 8001654:	0018      	movs	r0, r3
 8001656:	f000 fba3 	bl	8001da0 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 800165a:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <alarmSetISR+0x194>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	0018      	movs	r0, r3
 8001660:	f003 fdb0 	bl	80051c4 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8001664:	f7ff fda0 	bl	80011a8 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <alarmSetISR+0x198>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 800166e:	1cbb      	adds	r3, r7, #2
 8001670:	781b      	ldrb	r3, [r3, #0]

}
 8001672:	0018      	movs	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	b002      	add	sp, #8
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			@ (mov r8, r8)
 800167c:	20000000 	.word	0x20000000
 8001680:	20000044 	.word	0x20000044
 8001684:	20000220 	.word	0x20000220
 8001688:	0800610c 	.word	0x0800610c

0800168c <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0

//	printf("Entered hour set ISR.\n\r");
//	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);


	HAL_StatusTypeDef halRet = HAL_OK;
 8001692:	1dfb      	adds	r3, r7, #7
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001698:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <hourSetISR+0x48>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <hourSetISR+0x1a>

		alarmHourInc();
 80016a0:	f000 f87c 	bl	800179c <alarmHourInc>
 80016a4:	e00f      	b.n	80016c6 <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 80016a6:	f000 f8a9 	bl	80017fc <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80016aa:	490b      	ldr	r1, [pc, #44]	@ (80016d8 <hourSetISR+0x4c>)
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <hourSetISR+0x50>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	0018      	movs	r0, r3
 80016b2:	f002 fedf 	bl	8004474 <HAL_RTC_SetTime>


		updateAndDisplayTime();
 80016b6:	f7ff fd77 	bl	80011a8 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80016ba:	4a09      	ldr	r2, [pc, #36]	@ (80016e0 <hourSetISR+0x54>)
 80016bc:	4906      	ldr	r1, [pc, #24]	@ (80016d8 <hourSetISR+0x4c>)
 80016be:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <hourSetISR+0x50>)
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7ff f955 	bl	8000970 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 80016c6:	1dfb      	adds	r3, r7, #7
 80016c8:	781b      	ldrb	r3, [r3, #0]

}
 80016ca:	0018      	movs	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b002      	add	sp, #8
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	20000220 	.word	0x20000220
 80016d8:	2000008c 	.word	0x2000008c
 80016dc:	20000110 	.word	0x20000110
 80016e0:	200000a0 	.word	0x200000a0

080016e4 <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08c      	sub	sp, #48	@ 0x30
 80016e8:	af00      	add	r7, sp, #0


	HAL_StatusTypeDef halRet = HAL_OK;
 80016ea:	232f      	movs	r3, #47	@ 0x2f
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80016f2:	4b25      	ldr	r3, [pc, #148]	@ (8001788 <minuteSetISR+0xa4>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <minuteSetISR+0x1c>

		alarmMinuteInc();
 80016fa:	f000 f8bf 	bl	800187c <alarmMinuteInc>
 80016fe:	e03b      	b.n	8001778 <minuteSetISR+0x94>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 8001700:	f000 f8dc 	bl	80018bc <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001704:	4921      	ldr	r1, [pc, #132]	@ (800178c <minuteSetISR+0xa8>)
 8001706:	4b22      	ldr	r3, [pc, #136]	@ (8001790 <minuteSetISR+0xac>)
 8001708:	2200      	movs	r2, #0
 800170a:	0018      	movs	r0, r3
 800170c:	f002 feb2 	bl	8004474 <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	0018      	movs	r0, r3
 8001714:	2328      	movs	r3, #40	@ 0x28
 8001716:	001a      	movs	r2, r3
 8001718:	2100      	movs	r1, #0
 800171a:	f004 fca3 	bl	8006064 <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 800171e:	2380      	movs	r3, #128	@ 0x80
 8001720:	005a      	lsls	r2, r3, #1
 8001722:	1d39      	adds	r1, r7, #4
 8001724:	481a      	ldr	r0, [pc, #104]	@ (8001790 <minuteSetISR+0xac>)
 8001726:	2300      	movs	r3, #0
 8001728:	f003 f9c8 	bl	8004abc <HAL_RTC_GetAlarm>

		if(sAlarm.AlarmTime.Minutes>58) {
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	785b      	ldrb	r3, [r3, #1]
 8001730:	2b3a      	cmp	r3, #58	@ 0x3a
 8001732:	d903      	bls.n	800173c <minuteSetISR+0x58>
			sAlarm.AlarmTime.Minutes=0;
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	2200      	movs	r2, #0
 8001738:	705a      	strb	r2, [r3, #1]
 800173a:	e00d      	b.n	8001758 <minuteSetISR+0x74>
			//printf("Reset alarm time\n\r");
		} else {
			sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	785b      	ldrb	r3, [r3, #1]
 8001740:	3301      	adds	r3, #1
 8001742:	b2da      	uxtb	r2, r3
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001748:	e006      	b.n	8001758 <minuteSetISR+0x74>
			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 800174a:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <minuteSetISR+0xb0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2201      	movs	r2, #1
 8001750:	0011      	movs	r1, r2
 8001752:	0018      	movs	r0, r3
 8001754:	f001 f864 	bl	8002820 <HAL_GPIO_TogglePin>
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001758:	1d39      	adds	r1, r7, #4
 800175a:	4b0d      	ldr	r3, [pc, #52]	@ (8001790 <minuteSetISR+0xac>)
 800175c:	2200      	movs	r2, #0
 800175e:	0018      	movs	r0, r3
 8001760:	f003 f86c 	bl	800483c <HAL_RTC_SetAlarm_IT>
 8001764:	1e03      	subs	r3, r0, #0
 8001766:	d1f0      	bne.n	800174a <minuteSetISR+0x66>
		}


		updateAndDisplayTime();
 8001768:	f7ff fd1e 	bl	80011a8 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 800176c:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <minuteSetISR+0xb4>)
 800176e:	4907      	ldr	r1, [pc, #28]	@ (800178c <minuteSetISR+0xa8>)
 8001770:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <minuteSetISR+0xac>)
 8001772:	0018      	movs	r0, r3
 8001774:	f7ff f8fc 	bl	8000970 <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 8001778:	232f      	movs	r3, #47	@ 0x2f
 800177a:	18fb      	adds	r3, r7, r3
 800177c:	781b      	ldrb	r3, [r3, #0]
}
 800177e:	0018      	movs	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	b00c      	add	sp, #48	@ 0x30
 8001784:	bd80      	pop	{r7, pc}
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	20000220 	.word	0x20000220
 800178c:	2000008c 	.word	0x2000008c
 8001790:	20000110 	.word	0x20000110
 8001794:	20000028 	.word	0x20000028
 8001798:	200000a0 	.word	0x200000a0

0800179c <alarmHourInc>:

void alarmHourInc(void) {
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 80017a0:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <alarmHourInc+0x5c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b0b      	cmp	r3, #11
 80017a6:	d903      	bls.n	80017b0 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 80017a8:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <alarmHourInc+0x5c>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]
 80017ae:	e01e      	b.n	80017ee <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 80017b0:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <alarmHourInc+0x5c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b0b      	cmp	r3, #11
 80017b6:	d10e      	bne.n	80017d6 <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80017b8:	4b0f      	ldr	r3, [pc, #60]	@ (80017f8 <alarmHourInc+0x5c>)
 80017ba:	78db      	ldrb	r3, [r3, #3]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d103      	bne.n	80017c8 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80017c0:	4b0d      	ldr	r3, [pc, #52]	@ (80017f8 <alarmHourInc+0x5c>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	70da      	strb	r2, [r3, #3]
 80017c6:	e002      	b.n	80017ce <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <alarmHourInc+0x5c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 80017ce:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <alarmHourInc+0x5c>)
 80017d0:	220c      	movs	r2, #12
 80017d2:	701a      	strb	r2, [r3, #0]
 80017d4:	e00b      	b.n	80017ee <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 80017d6:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <alarmHourInc+0x5c>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b0a      	cmp	r3, #10
 80017dc:	d806      	bhi.n	80017ec <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <alarmHourInc+0x5c>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4b04      	ldr	r3, [pc, #16]	@ (80017f8 <alarmHourInc+0x5c>)
 80017e8:	701a      	strb	r2, [r3, #0]
 80017ea:	e000      	b.n	80017ee <alarmHourInc+0x52>
	}
	else {
		__NOP();
 80017ec:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 80017ee:	f000 f8d5 	bl	800199c <updateRTCBackupReg>

}
 80017f2:	46c0      	nop			@ (mov r8, r8)
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200000a4 	.word	0x200000a4

080017fc <currHourInc>:

void currHourInc(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001800:	4a1a      	ldr	r2, [pc, #104]	@ (800186c <currHourInc+0x70>)
 8001802:	491b      	ldr	r1, [pc, #108]	@ (8001870 <currHourInc+0x74>)
 8001804:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <currHourInc+0x78>)
 8001806:	0018      	movs	r0, r3
 8001808:	f7ff f8b2 	bl	8000970 <getRTCTime>

	if(currTime.Hours >= 12) {
 800180c:	4b18      	ldr	r3, [pc, #96]	@ (8001870 <currHourInc+0x74>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b0b      	cmp	r3, #11
 8001812:	d903      	bls.n	800181c <currHourInc+0x20>
		currTime.Hours = 1;
 8001814:	4b16      	ldr	r3, [pc, #88]	@ (8001870 <currHourInc+0x74>)
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
 800181a:	e01e      	b.n	800185a <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 800181c:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <currHourInc+0x74>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b0b      	cmp	r3, #11
 8001822:	d10e      	bne.n	8001842 <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001824:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <currHourInc+0x74>)
 8001826:	78db      	ldrb	r3, [r3, #3]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d103      	bne.n	8001834 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800182c:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <currHourInc+0x74>)
 800182e:	2201      	movs	r2, #1
 8001830:	70da      	strb	r2, [r3, #3]
 8001832:	e002      	b.n	800183a <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001834:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <currHourInc+0x74>)
 8001836:	2200      	movs	r2, #0
 8001838:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 800183a:	4b0d      	ldr	r3, [pc, #52]	@ (8001870 <currHourInc+0x74>)
 800183c:	220c      	movs	r2, #12
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	e00b      	b.n	800185a <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 8001842:	4b0d      	ldr	r3, [pc, #52]	@ (8001878 <currHourInc+0x7c>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b0a      	cmp	r3, #10
 8001848:	d806      	bhi.n	8001858 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 800184a:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <currHourInc+0x74>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	3301      	adds	r3, #1
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <currHourInc+0x74>)
 8001854:	701a      	strb	r2, [r3, #0]
 8001856:	e000      	b.n	800185a <currHourInc+0x5e>
	}
	else {
		__NOP();
 8001858:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 800185a:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <currHourInc+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001860:	4b03      	ldr	r3, [pc, #12]	@ (8001870 <currHourInc+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]

}
 8001866:	46c0      	nop			@ (mov r8, r8)
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200000a0 	.word	0x200000a0
 8001870:	2000008c 	.word	0x2000008c
 8001874:	20000110 	.word	0x20000110
 8001878:	200000a4 	.word	0x200000a4

0800187c <alarmMinuteInc>:

void alarmMinuteInc(void) {
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 8001880:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <alarmMinuteInc+0x3c>)
 8001882:	785b      	ldrb	r3, [r3, #1]
 8001884:	2b3a      	cmp	r3, #58	@ 0x3a
 8001886:	d905      	bls.n	8001894 <alarmMinuteInc+0x18>
		alarmHourInc();
 8001888:	f7ff ff88 	bl	800179c <alarmHourInc>
		userAlarmTime.Minutes = 0;
 800188c:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <alarmMinuteInc+0x3c>)
 800188e:	2200      	movs	r2, #0
 8001890:	705a      	strb	r2, [r3, #1]
 8001892:	e00b      	b.n	80018ac <alarmMinuteInc+0x30>
	}
	else if(userAlarmTime.Minutes < 59) {
 8001894:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <alarmMinuteInc+0x3c>)
 8001896:	785b      	ldrb	r3, [r3, #1]
 8001898:	2b3a      	cmp	r3, #58	@ 0x3a
 800189a:	d806      	bhi.n	80018aa <alarmMinuteInc+0x2e>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <alarmMinuteInc+0x3c>)
 800189e:	785b      	ldrb	r3, [r3, #1]
 80018a0:	3301      	adds	r3, #1
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <alarmMinuteInc+0x3c>)
 80018a6:	705a      	strb	r2, [r3, #1]
 80018a8:	e000      	b.n	80018ac <alarmMinuteInc+0x30>
	}
	else {
		__NOP();
 80018aa:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 80018ac:	f000 f876 	bl	800199c <updateRTCBackupReg>

}
 80018b0:	46c0      	nop			@ (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	200000a4 	.word	0x200000a4

080018bc <currMinuteInc>:

void currMinuteInc(void) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 80018c0:	4a12      	ldr	r2, [pc, #72]	@ (800190c <currMinuteInc+0x50>)
 80018c2:	4913      	ldr	r1, [pc, #76]	@ (8001910 <currMinuteInc+0x54>)
 80018c4:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <currMinuteInc+0x58>)
 80018c6:	0018      	movs	r0, r3
 80018c8:	f7ff f852 	bl	8000970 <getRTCTime>

	// If current time is going to rollover,
	// increment the hour and reset the minute.
	if(currTime.Minutes >= 59) {
 80018cc:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <currMinuteInc+0x54>)
 80018ce:	785b      	ldrb	r3, [r3, #1]
 80018d0:	2b3a      	cmp	r3, #58	@ 0x3a
 80018d2:	d905      	bls.n	80018e0 <currMinuteInc+0x24>
		currHourInc();
 80018d4:	f7ff ff92 	bl	80017fc <currHourInc>
		currTime.Minutes = 0;
 80018d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001910 <currMinuteInc+0x54>)
 80018da:	2200      	movs	r2, #0
 80018dc:	705a      	strb	r2, [r3, #1]
 80018de:	e00b      	b.n	80018f8 <currMinuteInc+0x3c>
	}
	else if(currTime.Minutes < 59) {
 80018e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <currMinuteInc+0x54>)
 80018e2:	785b      	ldrb	r3, [r3, #1]
 80018e4:	2b3a      	cmp	r3, #58	@ 0x3a
 80018e6:	d806      	bhi.n	80018f6 <currMinuteInc+0x3a>
		currTime.Minutes = currTime.Minutes + 1;
 80018e8:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <currMinuteInc+0x54>)
 80018ea:	785b      	ldrb	r3, [r3, #1]
 80018ec:	3301      	adds	r3, #1
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <currMinuteInc+0x54>)
 80018f2:	705a      	strb	r2, [r3, #1]
 80018f4:	e000      	b.n	80018f8 <currMinuteInc+0x3c>
	}
	else {
		__NOP();
 80018f6:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <currMinuteInc+0x54>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 80018fe:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <currMinuteInc+0x54>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]

}
 8001904:	46c0      	nop			@ (mov r8, r8)
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	46c0      	nop			@ (mov r8, r8)
 800190c:	200000a0 	.word	0x200000a0
 8001910:	2000008c 	.word	0x2000008c
 8001914:	20000110 	.word	0x20000110

08001918 <dispError>:

void dispError(void) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 800191e:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <dispError+0x78>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	0018      	movs	r0, r3
 8001924:	f003 fc4e 	bl	80051c4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001928:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <dispError+0x78>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	0018      	movs	r0, r3
 800192e:	f003 fbfd 	bl	800512c <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001932:	4b17      	ldr	r3, [pc, #92]	@ (8001990 <dispError+0x78>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 800193c:	1cfb      	adds	r3, r7, #3
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001942:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <dispError+0x78>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	4a11      	ldr	r2, [pc, #68]	@ (8001994 <dispError+0x7c>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d9f6      	bls.n	8001942 <dispError+0x2a>

			HAL_GPIO_TogglePin(alarmLEDPort, alarmLEDPin);
 8001954:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <dispError+0x80>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2280      	movs	r2, #128	@ 0x80
 800195a:	0152      	lsls	r2, r2, #5
 800195c:	0011      	movs	r1, r2
 800195e:	0018      	movs	r0, r3
 8001960:	f000 ff5e 	bl	8002820 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001964:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <dispError+0x78>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196c:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 800196e:	1cfb      	adds	r3, r7, #3
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	1e5a      	subs	r2, r3, #1
 8001974:	4193      	sbcs	r3, r2
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2201      	movs	r2, #1
 800197a:	4053      	eors	r3, r2
 800197c:	b2db      	uxtb	r3, r3
 800197e:	001a      	movs	r2, r3
 8001980:	1cfb      	adds	r3, r7, #3
 8001982:	701a      	strb	r2, [r3, #0]
 8001984:	781a      	ldrb	r2, [r3, #0]
 8001986:	2101      	movs	r1, #1
 8001988:	400a      	ands	r2, r1
 800198a:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 800198c:	e7d9      	b.n	8001942 <dispError+0x2a>
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	20000044 	.word	0x20000044
 8001994:	00003ffe 	.word	0x00003ffe
 8001998:	2000000c 	.word	0x2000000c

0800199c <updateRTCBackupReg>:

	} while(1);

}

void updateRTCBackupReg(void) {
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 80019a0:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <updateRTCBackupReg+0x40>)
 80019a2:	6819      	ldr	r1, [r3, #0]
 80019a4:	4b0e      	ldr	r3, [pc, #56]	@ (80019e0 <updateRTCBackupReg+0x44>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	001a      	movs	r2, r3
 80019aa:	4b0e      	ldr	r3, [pc, #56]	@ (80019e4 <updateRTCBackupReg+0x48>)
 80019ac:	0018      	movs	r0, r3
 80019ae:	f003 fb2d 	bl	800500c <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 80019b2:	4b0d      	ldr	r3, [pc, #52]	@ (80019e8 <updateRTCBackupReg+0x4c>)
 80019b4:	6819      	ldr	r1, [r3, #0]
 80019b6:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <updateRTCBackupReg+0x44>)
 80019b8:	785b      	ldrb	r3, [r3, #1]
 80019ba:	001a      	movs	r2, r3
 80019bc:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <updateRTCBackupReg+0x48>)
 80019be:	0018      	movs	r0, r3
 80019c0:	f003 fb24 	bl	800500c <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 80019c4:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <updateRTCBackupReg+0x50>)
 80019c6:	6819      	ldr	r1, [r3, #0]
 80019c8:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <updateRTCBackupReg+0x44>)
 80019ca:	78db      	ldrb	r3, [r3, #3]
 80019cc:	001a      	movs	r2, r3
 80019ce:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <updateRTCBackupReg+0x48>)
 80019d0:	0018      	movs	r0, r3
 80019d2:	f003 fb1b 	bl	800500c <HAL_RTCEx_BKUPWrite>

}
 80019d6:	46c0      	nop			@ (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	200000b8 	.word	0x200000b8
 80019e0:	200000a4 	.word	0x200000a4
 80019e4:	20000110 	.word	0x20000110
 80019e8:	20000034 	.word	0x20000034
 80019ec:	20000038 	.word	0x20000038

080019f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f4:	b672      	cpsid	i
}
 80019f6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f8:	46c0      	nop			@ (mov r8, r8)
 80019fa:	e7fd      	b.n	80019f8 <Error_Handler+0x8>

080019fc <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 80019fc:	b5b0      	push	{r4, r5, r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	0005      	movs	r5, r0
 8001a04:	000c      	movs	r4, r1
 8001a06:	0010      	movs	r0, r2
 8001a08:	0019      	movs	r1, r3
 8001a0a:	1dbb      	adds	r3, r7, #6
 8001a0c:	1c2a      	adds	r2, r5, #0
 8001a0e:	801a      	strh	r2, [r3, #0]
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	1c22      	adds	r2, r4, #0
 8001a14:	801a      	strh	r2, [r3, #0]
 8001a16:	1cbb      	adds	r3, r7, #2
 8001a18:	1c02      	adds	r2, r0, #0
 8001a1a:	801a      	strh	r2, [r3, #0]
 8001a1c:	003b      	movs	r3, r7
 8001a1e:	1c0a      	adds	r2, r1, #0
 8001a20:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001a22:	4b7c      	ldr	r3, [pc, #496]	@ (8001c14 <sevSeg_Init+0x218>)
 8001a24:	1dba      	adds	r2, r7, #6
 8001a26:	8812      	ldrh	r2, [r2, #0]
 8001a28:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8001a2a:	4b7b      	ldr	r3, [pc, #492]	@ (8001c18 <sevSeg_Init+0x21c>)
 8001a2c:	1d3a      	adds	r2, r7, #4
 8001a2e:	8812      	ldrh	r2, [r2, #0]
 8001a30:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001a32:	4b7a      	ldr	r3, [pc, #488]	@ (8001c1c <sevSeg_Init+0x220>)
 8001a34:	1cba      	adds	r2, r7, #2
 8001a36:	8812      	ldrh	r2, [r2, #0]
 8001a38:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8001a3a:	4b79      	ldr	r3, [pc, #484]	@ (8001c20 <sevSeg_Init+0x224>)
 8001a3c:	003a      	movs	r2, r7
 8001a3e:	8812      	ldrh	r2, [r2, #0]
 8001a40:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001a42:	4a78      	ldr	r2, [pc, #480]	@ (8001c24 <sevSeg_Init+0x228>)
 8001a44:	2330      	movs	r3, #48	@ 0x30
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8001a4c:	4a76      	ldr	r2, [pc, #472]	@ (8001c28 <sevSeg_Init+0x22c>)
 8001a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a50:	0010      	movs	r0, r2
 8001a52:	0019      	movs	r1, r3
 8001a54:	234c      	movs	r3, #76	@ 0x4c
 8001a56:	001a      	movs	r2, r3
 8001a58:	f004 fb30 	bl	80060bc <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8001a5c:	4b73      	ldr	r3, [pc, #460]	@ (8001c2c <sevSeg_Init+0x230>)
 8001a5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a60:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	e00b      	b.n	8001a80 <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a6e:	18d3      	adds	r3, r2, r3
 8001a70:	6819      	ldr	r1, [r3, #0]
 8001a72:	4b6f      	ldr	r3, [pc, #444]	@ (8001c30 <sevSeg_Init+0x234>)
 8001a74:	69fa      	ldr	r2, [r7, #28]
 8001a76:	0092      	lsls	r2, r2, #2
 8001a78:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	ddf0      	ble.n	8001a68 <sevSeg_Init+0x6c>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001a86:	4b6a      	ldr	r3, [pc, #424]	@ (8001c30 <sevSeg_Init+0x234>)
 8001a88:	6918      	ldr	r0, [r3, #16]
 8001a8a:	4b66      	ldr	r3, [pc, #408]	@ (8001c24 <sevSeg_Init+0x228>)
 8001a8c:	8819      	ldrh	r1, [r3, #0]
 8001a8e:	4b69      	ldr	r3, [pc, #420]	@ (8001c34 <sevSeg_Init+0x238>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	001a      	movs	r2, r3
 8001a94:	f000 fea7 	bl	80027e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001a98:	4b65      	ldr	r3, [pc, #404]	@ (8001c30 <sevSeg_Init+0x234>)
 8001a9a:	6918      	ldr	r0, [r3, #16]
 8001a9c:	4b61      	ldr	r3, [pc, #388]	@ (8001c24 <sevSeg_Init+0x228>)
 8001a9e:	8819      	ldrh	r1, [r3, #0]
 8001aa0:	4b64      	ldr	r3, [pc, #400]	@ (8001c34 <sevSeg_Init+0x238>)
 8001aa2:	785b      	ldrb	r3, [r3, #1]
 8001aa4:	001a      	movs	r2, r3
 8001aa6:	f000 fe9e 	bl	80027e6 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001aaa:	4b61      	ldr	r3, [pc, #388]	@ (8001c30 <sevSeg_Init+0x234>)
 8001aac:	6898      	ldr	r0, [r3, #8]
 8001aae:	4b5b      	ldr	r3, [pc, #364]	@ (8001c1c <sevSeg_Init+0x220>)
 8001ab0:	8819      	ldrh	r1, [r3, #0]
 8001ab2:	4b60      	ldr	r3, [pc, #384]	@ (8001c34 <sevSeg_Init+0x238>)
 8001ab4:	785b      	ldrb	r3, [r3, #1]
 8001ab6:	001a      	movs	r2, r3
 8001ab8:	f000 fe95 	bl	80027e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001abc:	4b5c      	ldr	r3, [pc, #368]	@ (8001c30 <sevSeg_Init+0x234>)
 8001abe:	6898      	ldr	r0, [r3, #8]
 8001ac0:	4b56      	ldr	r3, [pc, #344]	@ (8001c1c <sevSeg_Init+0x220>)
 8001ac2:	8819      	ldrh	r1, [r3, #0]
 8001ac4:	4b5b      	ldr	r3, [pc, #364]	@ (8001c34 <sevSeg_Init+0x238>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	001a      	movs	r2, r3
 8001aca:	f000 fe8c 	bl	80027e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8001ace:	4b58      	ldr	r3, [pc, #352]	@ (8001c30 <sevSeg_Init+0x234>)
 8001ad0:	68d8      	ldr	r0, [r3, #12]
 8001ad2:	4b53      	ldr	r3, [pc, #332]	@ (8001c20 <sevSeg_Init+0x224>)
 8001ad4:	8819      	ldrh	r1, [r3, #0]
 8001ad6:	4b57      	ldr	r3, [pc, #348]	@ (8001c34 <sevSeg_Init+0x238>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	001a      	movs	r2, r3
 8001adc:	f000 fe83 	bl	80027e6 <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(50);
 8001ae0:	2032      	movs	r0, #50	@ 0x32
 8001ae2:	f000 f95d 	bl	8001da0 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8001ae6:	2308      	movs	r3, #8
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	4a53      	ldr	r2, [pc, #332]	@ (8001c38 <sevSeg_Init+0x23c>)
 8001aec:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e038      	b.n	8001b66 <sevSeg_Init+0x16a>

		sendByte = hofSymb[i];
 8001af4:	231b      	movs	r3, #27
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	2208      	movs	r2, #8
 8001afa:	18b9      	adds	r1, r7, r2
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	188a      	adds	r2, r1, r2
 8001b00:	7812      	ldrb	r2, [r2, #0]
 8001b02:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	e027      	b.n	8001b5a <sevSeg_Init+0x15e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001b0a:	4b49      	ldr	r3, [pc, #292]	@ (8001c30 <sevSeg_Init+0x234>)
 8001b0c:	6818      	ldr	r0, [r3, #0]
 8001b0e:	4b41      	ldr	r3, [pc, #260]	@ (8001c14 <sevSeg_Init+0x218>)
 8001b10:	8819      	ldrh	r1, [r3, #0]
 8001b12:	241b      	movs	r4, #27
 8001b14:	193b      	adds	r3, r7, r4
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	4a45      	ldr	r2, [pc, #276]	@ (8001c34 <sevSeg_Init+0x238>)
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	001a      	movs	r2, r3
 8001b22:	f000 fe60 	bl	80027e6 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001b26:	4b42      	ldr	r3, [pc, #264]	@ (8001c30 <sevSeg_Init+0x234>)
 8001b28:	6858      	ldr	r0, [r3, #4]
 8001b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c18 <sevSeg_Init+0x21c>)
 8001b2c:	8819      	ldrh	r1, [r3, #0]
 8001b2e:	4b41      	ldr	r3, [pc, #260]	@ (8001c34 <sevSeg_Init+0x238>)
 8001b30:	785b      	ldrb	r3, [r3, #1]
 8001b32:	001a      	movs	r2, r3
 8001b34:	f000 fe57 	bl	80027e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001b38:	4b3d      	ldr	r3, [pc, #244]	@ (8001c30 <sevSeg_Init+0x234>)
 8001b3a:	6858      	ldr	r0, [r3, #4]
 8001b3c:	4b36      	ldr	r3, [pc, #216]	@ (8001c18 <sevSeg_Init+0x21c>)
 8001b3e:	8819      	ldrh	r1, [r3, #0]
 8001b40:	4b3c      	ldr	r3, [pc, #240]	@ (8001c34 <sevSeg_Init+0x238>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	001a      	movs	r2, r3
 8001b46:	f000 fe4e 	bl	80027e6 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001b4a:	193b      	adds	r3, r7, r4
 8001b4c:	193a      	adds	r2, r7, r4
 8001b4e:	7812      	ldrb	r2, [r2, #0]
 8001b50:	0852      	lsrs	r2, r2, #1
 8001b52:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	3301      	adds	r3, #1
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	2b07      	cmp	r3, #7
 8001b5e:	ddd4      	ble.n	8001b0a <sevSeg_Init+0x10e>
	for(int i = 0; i <= 3; i++) {
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3301      	adds	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	ddc3      	ble.n	8001af4 <sevSeg_Init+0xf8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001b6c:	4b30      	ldr	r3, [pc, #192]	@ (8001c30 <sevSeg_Init+0x234>)
 8001b6e:	6898      	ldr	r0, [r3, #8]
 8001b70:	4b2a      	ldr	r3, [pc, #168]	@ (8001c1c <sevSeg_Init+0x220>)
 8001b72:	8819      	ldrh	r1, [r3, #0]
 8001b74:	4b2f      	ldr	r3, [pc, #188]	@ (8001c34 <sevSeg_Init+0x238>)
 8001b76:	785b      	ldrb	r3, [r3, #1]
 8001b78:	001a      	movs	r2, r3
 8001b7a:	f000 fe34 	bl	80027e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c30 <sevSeg_Init+0x234>)
 8001b80:	6898      	ldr	r0, [r3, #8]
 8001b82:	4b26      	ldr	r3, [pc, #152]	@ (8001c1c <sevSeg_Init+0x220>)
 8001b84:	8819      	ldrh	r1, [r3, #0]
 8001b86:	4b2b      	ldr	r3, [pc, #172]	@ (8001c34 <sevSeg_Init+0x238>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	001a      	movs	r2, r3
 8001b8c:	f000 fe2b 	bl	80027e6 <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8001b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b92:	0018      	movs	r0, r3
 8001b94:	f003 fb16 	bl	80051c4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8001b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f003 fac6 	bl	800512c <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8001ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba6:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8001ba8:	46c0      	nop			@ (mov r8, r8)
 8001baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1ad2      	subs	r2, r2, r3
 8001bb4:	2380      	movs	r3, #128	@ 0x80
 8001bb6:	01db      	lsls	r3, r3, #7
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d3f6      	bcc.n	8001baa <sevSeg_Init+0x1ae>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8001bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f003 fb00 	bl	80051c4 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c30 <sevSeg_Init+0x234>)
 8001bc6:	6918      	ldr	r0, [r3, #16]
 8001bc8:	4b16      	ldr	r3, [pc, #88]	@ (8001c24 <sevSeg_Init+0x228>)
 8001bca:	8819      	ldrh	r1, [r3, #0]
 8001bcc:	4b19      	ldr	r3, [pc, #100]	@ (8001c34 <sevSeg_Init+0x238>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	f000 fe08 	bl	80027e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001bd6:	4b16      	ldr	r3, [pc, #88]	@ (8001c30 <sevSeg_Init+0x234>)
 8001bd8:	6918      	ldr	r0, [r3, #16]
 8001bda:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <sevSeg_Init+0x228>)
 8001bdc:	8819      	ldrh	r1, [r3, #0]
 8001bde:	4b15      	ldr	r3, [pc, #84]	@ (8001c34 <sevSeg_Init+0x238>)
 8001be0:	785b      	ldrb	r3, [r3, #1]
 8001be2:	001a      	movs	r2, r3
 8001be4:	f000 fdff 	bl	80027e6 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001be8:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <sevSeg_Init+0x234>)
 8001bea:	6898      	ldr	r0, [r3, #8]
 8001bec:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <sevSeg_Init+0x220>)
 8001bee:	8819      	ldrh	r1, [r3, #0]
 8001bf0:	4b10      	ldr	r3, [pc, #64]	@ (8001c34 <sevSeg_Init+0x238>)
 8001bf2:	785b      	ldrb	r3, [r3, #1]
 8001bf4:	001a      	movs	r2, r3
 8001bf6:	f000 fdf6 	bl	80027e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001c30 <sevSeg_Init+0x234>)
 8001bfc:	6898      	ldr	r0, [r3, #8]
 8001bfe:	4b07      	ldr	r3, [pc, #28]	@ (8001c1c <sevSeg_Init+0x220>)
 8001c00:	8819      	ldrh	r1, [r3, #0]
 8001c02:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <sevSeg_Init+0x238>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	001a      	movs	r2, r3
 8001c08:	f000 fded 	bl	80027e6 <HAL_GPIO_WritePin>

}
 8001c0c:	46c0      	nop			@ (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b008      	add	sp, #32
 8001c12:	bdb0      	pop	{r4, r5, r7, pc}
 8001c14:	20000238 	.word	0x20000238
 8001c18:	2000023a 	.word	0x2000023a
 8001c1c:	2000023c 	.word	0x2000023c
 8001c20:	2000023e 	.word	0x2000023e
 8001c24:	20000240 	.word	0x20000240
 8001c28:	20000244 	.word	0x20000244
 8001c2c:	20000290 	.word	0x20000290
 8001c30:	20000048 	.word	0x20000048
 8001c34:	2000005c 	.word	0x2000005c
 8001c38:	471d3700 	.word	0x471d3700

08001c3c <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	210a      	movs	r1, #10
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f7fe fa5a 	bl	8000104 <__udivsi3>
 8001c50:	0003      	movs	r3, r0
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	2408      	movs	r4, #8
 8001c56:	193b      	adds	r3, r7, r4
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	210a      	movs	r1, #10
 8001c60:	0018      	movs	r0, r3
 8001c62:	f7fe fad5 	bl	8000210 <__aeabi_uidivmod>
 8001c66:	000b      	movs	r3, r1
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	193b      	adds	r3, r7, r4
 8001c6c:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001c72:	210a      	movs	r1, #10
 8001c74:	0018      	movs	r0, r3
 8001c76:	f7fe fa45 	bl	8000104 <__udivsi3>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	193b      	adds	r3, r7, r4
 8001c80:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001c86:	210a      	movs	r1, #10
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7fe fac1 	bl	8000210 <__aeabi_uidivmod>
 8001c8e:	000b      	movs	r3, r1
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	193b      	adds	r3, r7, r4
 8001c94:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 8001c96:	2116      	movs	r1, #22
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	78db      	ldrb	r3, [r3, #3]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d102      	bne.n	8001cac <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 8001ca6:	187b      	adds	r3, r7, r1
 8001ca8:	2202      	movs	r2, #2
 8001caa:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	e04f      	b.n	8001d52 <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 8001cb2:	2308      	movs	r3, #8
 8001cb4:	18fa      	adds	r2, r7, r3
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	18d3      	adds	r3, r2, r3
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	2417      	movs	r4, #23
 8001cc0:	193b      	adds	r3, r7, r4
 8001cc2:	4a30      	ldr	r2, [pc, #192]	@ (8001d84 <sevSeg_updateDigits+0x148>)
 8001cc4:	5c52      	ldrb	r2, [r2, r1]
 8001cc6:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d110      	bne.n	8001cf0 <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	210a      	movs	r1, #10
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f7fe fa15 	bl	8000104 <__udivsi3>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	001a      	movs	r2, r3
 8001ce0:	2316      	movs	r3, #22
 8001ce2:	18fb      	adds	r3, r7, r3
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	18d2      	adds	r2, r2, r3
 8001ce8:	193b      	adds	r3, r7, r4
 8001cea:	4927      	ldr	r1, [pc, #156]	@ (8001d88 <sevSeg_updateDigits+0x14c>)
 8001cec:	5c8a      	ldrb	r2, [r1, r2]
 8001cee:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	e027      	b.n	8001d46 <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001cf6:	4b25      	ldr	r3, [pc, #148]	@ (8001d8c <sevSeg_updateDigits+0x150>)
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	4b25      	ldr	r3, [pc, #148]	@ (8001d90 <sevSeg_updateDigits+0x154>)
 8001cfc:	8819      	ldrh	r1, [r3, #0]
 8001cfe:	2417      	movs	r4, #23
 8001d00:	193b      	adds	r3, r7, r4
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2201      	movs	r2, #1
 8001d06:	4013      	ands	r3, r2
 8001d08:	4a22      	ldr	r2, [pc, #136]	@ (8001d94 <sevSeg_updateDigits+0x158>)
 8001d0a:	5cd3      	ldrb	r3, [r2, r3]
 8001d0c:	001a      	movs	r2, r3
 8001d0e:	f000 fd6a 	bl	80027e6 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001d12:	4b1e      	ldr	r3, [pc, #120]	@ (8001d8c <sevSeg_updateDigits+0x150>)
 8001d14:	6858      	ldr	r0, [r3, #4]
 8001d16:	4b20      	ldr	r3, [pc, #128]	@ (8001d98 <sevSeg_updateDigits+0x15c>)
 8001d18:	8819      	ldrh	r1, [r3, #0]
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d94 <sevSeg_updateDigits+0x158>)
 8001d1c:	785b      	ldrb	r3, [r3, #1]
 8001d1e:	001a      	movs	r2, r3
 8001d20:	f000 fd61 	bl	80027e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001d24:	4b19      	ldr	r3, [pc, #100]	@ (8001d8c <sevSeg_updateDigits+0x150>)
 8001d26:	6858      	ldr	r0, [r3, #4]
 8001d28:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <sevSeg_updateDigits+0x15c>)
 8001d2a:	8819      	ldrh	r1, [r3, #0]
 8001d2c:	4b19      	ldr	r3, [pc, #100]	@ (8001d94 <sevSeg_updateDigits+0x158>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	001a      	movs	r2, r3
 8001d32:	f000 fd58 	bl	80027e6 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001d36:	193b      	adds	r3, r7, r4
 8001d38:	193a      	adds	r2, r7, r4
 8001d3a:	7812      	ldrb	r2, [r2, #0]
 8001d3c:	0852      	lsrs	r2, r2, #1
 8001d3e:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	3301      	adds	r3, #1
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b07      	cmp	r3, #7
 8001d4a:	ddd4      	ble.n	8001cf6 <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	ddac      	ble.n	8001cb2 <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001d58:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <sevSeg_updateDigits+0x150>)
 8001d5a:	6898      	ldr	r0, [r3, #8]
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d9c <sevSeg_updateDigits+0x160>)
 8001d5e:	8819      	ldrh	r1, [r3, #0]
 8001d60:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <sevSeg_updateDigits+0x158>)
 8001d62:	785b      	ldrb	r3, [r3, #1]
 8001d64:	001a      	movs	r2, r3
 8001d66:	f000 fd3e 	bl	80027e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001d6a:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <sevSeg_updateDigits+0x150>)
 8001d6c:	6898      	ldr	r0, [r3, #8]
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <sevSeg_updateDigits+0x160>)
 8001d70:	8819      	ldrh	r1, [r3, #0]
 8001d72:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <sevSeg_updateDigits+0x158>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	001a      	movs	r2, r3
 8001d78:	f000 fd35 	bl	80027e6 <HAL_GPIO_WritePin>

	return;
 8001d7c:	46c0      	nop			@ (mov r8, r8)

}
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b007      	add	sp, #28
 8001d82:	bd90      	pop	{r4, r7, pc}
 8001d84:	08006110 	.word	0x08006110
 8001d88:	0800611c 	.word	0x0800611c
 8001d8c:	20000048 	.word	0x20000048
 8001d90:	20000238 	.word	0x20000238
 8001d94:	2000005c 	.word	0x2000005c
 8001d98:	2000023a 	.word	0x2000023a
 8001d9c:	2000023c 	.word	0x2000023c

08001da0 <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	0002      	movs	r2, r0
 8001da8:	1dbb      	adds	r3, r7, #6
 8001daa:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 8001dac:	4b20      	ldr	r3, [pc, #128]	@ (8001e30 <sevSeg_setIntensity+0x90>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <sevSeg_setIntensity+0x20>
 8001db4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e34 <sevSeg_setIntensity+0x94>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	1dba      	adds	r2, r7, #6
 8001dba:	8812      	ldrh	r2, [r2, #0]
 8001dbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dbe:	e02c      	b.n	8001e1a <sevSeg_setIntensity+0x7a>
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e30 <sevSeg_setIntensity+0x90>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d105      	bne.n	8001dd4 <sevSeg_setIntensity+0x34>
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e34 <sevSeg_setIntensity+0x94>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	1dbb      	adds	r3, r7, #6
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	6393      	str	r3, [r2, #56]	@ 0x38
 8001dd2:	e022      	b.n	8001e1a <sevSeg_setIntensity+0x7a>
 8001dd4:	4b16      	ldr	r3, [pc, #88]	@ (8001e30 <sevSeg_setIntensity+0x90>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d105      	bne.n	8001de8 <sevSeg_setIntensity+0x48>
 8001ddc:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <sevSeg_setIntensity+0x94>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	1dbb      	adds	r3, r7, #6
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001de6:	e018      	b.n	8001e1a <sevSeg_setIntensity+0x7a>
 8001de8:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <sevSeg_setIntensity+0x90>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b0c      	cmp	r3, #12
 8001dee:	d105      	bne.n	8001dfc <sevSeg_setIntensity+0x5c>
 8001df0:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <sevSeg_setIntensity+0x94>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	1dbb      	adds	r3, r7, #6
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dfa:	e00e      	b.n	8001e1a <sevSeg_setIntensity+0x7a>
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <sevSeg_setIntensity+0x90>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b10      	cmp	r3, #16
 8001e02:	d105      	bne.n	8001e10 <sevSeg_setIntensity+0x70>
 8001e04:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <sevSeg_setIntensity+0x94>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	1dbb      	adds	r3, r7, #6
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e0e:	e004      	b.n	8001e1a <sevSeg_setIntensity+0x7a>
 8001e10:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <sevSeg_setIntensity+0x94>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	1dbb      	adds	r3, r7, #6
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 8001e1a:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <sevSeg_setIntensity+0x90>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <sevSeg_setIntensity+0x94>)
 8001e20:	0011      	movs	r1, r2
 8001e22:	0018      	movs	r0, r3
 8001e24:	f003 fa4c 	bl	80052c0 <HAL_TIM_PWM_Start>

}
 8001e28:	46c0      	nop			@ (mov r8, r8)
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b002      	add	sp, #8
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000290 	.word	0x20000290
 8001e34:	20000244 	.word	0x20000244

08001e38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	4b13      	ldr	r3, [pc, #76]	@ (8001e8c <HAL_MspInit+0x54>)
 8001e40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e42:	4b12      	ldr	r3, [pc, #72]	@ (8001e8c <HAL_MspInit+0x54>)
 8001e44:	2101      	movs	r1, #1
 8001e46:	430a      	orrs	r2, r1
 8001e48:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e4a:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <HAL_MspInit+0x54>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4013      	ands	r3, r2
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <HAL_MspInit+0x54>)
 8001e58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <HAL_MspInit+0x54>)
 8001e5c:	2180      	movs	r1, #128	@ 0x80
 8001e5e:	0549      	lsls	r1, r1, #21
 8001e60:	430a      	orrs	r2, r1
 8001e62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e64:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <HAL_MspInit+0x54>)
 8001e66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e68:	2380      	movs	r3, #128	@ 0x80
 8001e6a:	055b      	lsls	r3, r3, #21
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	2004      	movs	r0, #4
 8001e78:	f000 fb02 	bl	8002480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001e7c:	2004      	movs	r0, #4
 8001e7e:	f000 fb14 	bl	80024aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e82:	46c0      	nop			@ (mov r8, r8)
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b002      	add	sp, #8
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			@ (mov r8, r8)
 8001e8c:	40021000 	.word	0x40021000

08001e90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b095      	sub	sp, #84	@ 0x54
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	233c      	movs	r3, #60	@ 0x3c
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	2314      	movs	r3, #20
 8001ea0:	001a      	movs	r2, r3
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	f004 f8de 	bl	8006064 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ea8:	2414      	movs	r4, #20
 8001eaa:	193b      	adds	r3, r7, r4
 8001eac:	0018      	movs	r0, r3
 8001eae:	2328      	movs	r3, #40	@ 0x28
 8001eb0:	001a      	movs	r2, r3
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	f004 f8d6 	bl	8006064 <memset>
  if(hi2c->Instance==I2C1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a22      	ldr	r2, [pc, #136]	@ (8001f48 <HAL_I2C_MspInit+0xb8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d13d      	bne.n	8001f3e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ec2:	193b      	adds	r3, r7, r4
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ec8:	193b      	adds	r3, r7, r4
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ece:	193b      	adds	r3, r7, r4
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f002 f83b 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 8001ed6:	1e03      	subs	r3, r0, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001eda:	f7ff fd89 	bl	80019f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	4b1b      	ldr	r3, [pc, #108]	@ (8001f4c <HAL_I2C_MspInit+0xbc>)
 8001ee0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <HAL_I2C_MspInit+0xbc>)
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001eea:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <HAL_I2C_MspInit+0xbc>)
 8001eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eee:	2202      	movs	r2, #2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ef6:	213c      	movs	r1, #60	@ 0x3c
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	22c0      	movs	r2, #192	@ 0xc0
 8001efc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001efe:	187b      	adds	r3, r7, r1
 8001f00:	2212      	movs	r2, #18
 8001f02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	187b      	adds	r3, r7, r1
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001f10:	187b      	adds	r3, r7, r1
 8001f12:	2206      	movs	r2, #6
 8001f14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f16:	187b      	adds	r3, r7, r1
 8001f18:	4a0d      	ldr	r2, [pc, #52]	@ (8001f50 <HAL_I2C_MspInit+0xc0>)
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	0010      	movs	r0, r2
 8001f1e:	f000 fae1 	bl	80024e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f22:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_I2C_MspInit+0xbc>)
 8001f24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f26:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <HAL_I2C_MspInit+0xbc>)
 8001f28:	2180      	movs	r1, #128	@ 0x80
 8001f2a:	0389      	lsls	r1, r1, #14
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f30:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_I2C_MspInit+0xbc>)
 8001f32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f34:	2380      	movs	r3, #128	@ 0x80
 8001f36:	039b      	lsls	r3, r3, #14
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b015      	add	sp, #84	@ 0x54
 8001f44:	bd90      	pop	{r4, r7, pc}
 8001f46:	46c0      	nop			@ (mov r8, r8)
 8001f48:	40005400 	.word	0x40005400
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	50000400 	.word	0x50000400

08001f54 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b08f      	sub	sp, #60	@ 0x3c
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f5c:	2410      	movs	r4, #16
 8001f5e:	193b      	adds	r3, r7, r4
 8001f60:	0018      	movs	r0, r3
 8001f62:	2328      	movs	r3, #40	@ 0x28
 8001f64:	001a      	movs	r2, r3
 8001f66:	2100      	movs	r1, #0
 8001f68:	f004 f87c 	bl	8006064 <memset>
  if(hrtc->Instance==RTC)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a19      	ldr	r2, [pc, #100]	@ (8001fd8 <HAL_RTC_MspInit+0x84>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d12c      	bne.n	8001fd0 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f76:	193b      	adds	r3, r7, r4
 8001f78:	2280      	movs	r2, #128	@ 0x80
 8001f7a:	0292      	lsls	r2, r2, #10
 8001f7c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f7e:	193b      	adds	r3, r7, r4
 8001f80:	2280      	movs	r2, #128	@ 0x80
 8001f82:	0052      	lsls	r2, r2, #1
 8001f84:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f86:	193b      	adds	r3, r7, r4
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f001 ffdf 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 8001f8e:	1e03      	subs	r3, r0, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001f92:	f7ff fd2d 	bl	80019f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <HAL_RTC_MspInit+0x88>)
 8001f98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f9a:	4b10      	ldr	r3, [pc, #64]	@ (8001fdc <HAL_RTC_MspInit+0x88>)
 8001f9c:	2180      	movs	r1, #128	@ 0x80
 8001f9e:	0209      	lsls	r1, r1, #8
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8001fdc <HAL_RTC_MspInit+0x88>)
 8001fa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <HAL_RTC_MspInit+0x88>)
 8001faa:	2180      	movs	r1, #128	@ 0x80
 8001fac:	00c9      	lsls	r1, r1, #3
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fdc <HAL_RTC_MspInit+0x88>)
 8001fb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fb6:	2380      	movs	r3, #128	@ 0x80
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4013      	ands	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	f000 fa5b 	bl	8002480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001fca:	2002      	movs	r0, #2
 8001fcc:	f000 fa6d 	bl	80024aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001fd0:	46c0      	nop			@ (mov r8, r8)
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b00f      	add	sp, #60	@ 0x3c
 8001fd6:	bd90      	pop	{r4, r7, pc}
 8001fd8:	40002800 	.word	0x40002800
 8001fdc:	40021000 	.word	0x40021000

08001fe0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	2380      	movs	r3, #128	@ 0x80
 8001fee:	05db      	lsls	r3, r3, #23
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d10b      	bne.n	800200c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ff4:	4b07      	ldr	r3, [pc, #28]	@ (8002014 <HAL_TIM_PWM_MspInit+0x34>)
 8001ff6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ff8:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <HAL_TIM_PWM_MspInit+0x34>)
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002000:	4b04      	ldr	r3, [pc, #16]	@ (8002014 <HAL_TIM_PWM_MspInit+0x34>)
 8002002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002004:	2201      	movs	r2, #1
 8002006:	4013      	ands	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800200c:	46c0      	nop			@ (mov r8, r8)
 800200e:	46bd      	mov	sp, r7
 8002010:	b004      	add	sp, #16
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000

08002018 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a18      	ldr	r2, [pc, #96]	@ (8002088 <HAL_TIM_Base_MspInit+0x70>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d10e      	bne.n	8002048 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800202a:	4b18      	ldr	r3, [pc, #96]	@ (800208c <HAL_TIM_Base_MspInit+0x74>)
 800202c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800202e:	4b17      	ldr	r3, [pc, #92]	@ (800208c <HAL_TIM_Base_MspInit+0x74>)
 8002030:	2180      	movs	r1, #128	@ 0x80
 8002032:	0209      	lsls	r1, r1, #8
 8002034:	430a      	orrs	r2, r1
 8002036:	641a      	str	r2, [r3, #64]	@ 0x40
 8002038:	4b14      	ldr	r3, [pc, #80]	@ (800208c <HAL_TIM_Base_MspInit+0x74>)
 800203a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800203c:	2380      	movs	r3, #128	@ 0x80
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	4013      	ands	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002046:	e01a      	b.n	800207e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a10      	ldr	r2, [pc, #64]	@ (8002090 <HAL_TIM_Base_MspInit+0x78>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d115      	bne.n	800207e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002052:	4b0e      	ldr	r3, [pc, #56]	@ (800208c <HAL_TIM_Base_MspInit+0x74>)
 8002054:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002056:	4b0d      	ldr	r3, [pc, #52]	@ (800208c <HAL_TIM_Base_MspInit+0x74>)
 8002058:	2180      	movs	r1, #128	@ 0x80
 800205a:	0289      	lsls	r1, r1, #10
 800205c:	430a      	orrs	r2, r1
 800205e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002060:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <HAL_TIM_Base_MspInit+0x74>)
 8002062:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002064:	2380      	movs	r3, #128	@ 0x80
 8002066:	029b      	lsls	r3, r3, #10
 8002068:	4013      	ands	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	2015      	movs	r0, #21
 8002074:	f000 fa04 	bl	8002480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002078:	2015      	movs	r0, #21
 800207a:	f000 fa16 	bl	80024aa <HAL_NVIC_EnableIRQ>
}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	b004      	add	sp, #16
 8002084:	bd80      	pop	{r7, pc}
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	40002000 	.word	0x40002000
 800208c:	40021000 	.word	0x40021000
 8002090:	40014400 	.word	0x40014400

08002094 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b089      	sub	sp, #36	@ 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	240c      	movs	r4, #12
 800209e:	193b      	adds	r3, r7, r4
 80020a0:	0018      	movs	r0, r3
 80020a2:	2314      	movs	r3, #20
 80020a4:	001a      	movs	r2, r3
 80020a6:	2100      	movs	r1, #0
 80020a8:	f003 ffdc 	bl	8006064 <memset>
  if(htim->Instance==TIM2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	2380      	movs	r3, #128	@ 0x80
 80020b2:	05db      	lsls	r3, r3, #23
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d121      	bne.n	80020fc <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b8:	4b12      	ldr	r3, [pc, #72]	@ (8002104 <HAL_TIM_MspPostInit+0x70>)
 80020ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020bc:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <HAL_TIM_MspPostInit+0x70>)
 80020be:	2104      	movs	r1, #4
 80020c0:	430a      	orrs	r2, r1
 80020c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80020c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002104 <HAL_TIM_MspPostInit+0x70>)
 80020c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c8:	2204      	movs	r2, #4
 80020ca:	4013      	ands	r3, r2
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 80020d0:	0021      	movs	r1, r4
 80020d2:	187b      	adds	r3, r7, r1
 80020d4:	2240      	movs	r2, #64	@ 0x40
 80020d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	187b      	adds	r3, r7, r1
 80020da:	2202      	movs	r2, #2
 80020dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	187b      	adds	r3, r7, r1
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	187b      	adds	r3, r7, r1
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80020ea:	187b      	adds	r3, r7, r1
 80020ec:	2202      	movs	r2, #2
 80020ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 80020f0:	187b      	adds	r3, r7, r1
 80020f2:	4a05      	ldr	r2, [pc, #20]	@ (8002108 <HAL_TIM_MspPostInit+0x74>)
 80020f4:	0019      	movs	r1, r3
 80020f6:	0010      	movs	r0, r2
 80020f8:	f000 f9f4 	bl	80024e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020fc:	46c0      	nop			@ (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	b009      	add	sp, #36	@ 0x24
 8002102:	bd90      	pop	{r4, r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	50000800 	.word	0x50000800

0800210c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002110:	46c0      	nop			@ (mov r8, r8)
 8002112:	e7fd      	b.n	8002110 <NMI_Handler+0x4>

08002114 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002118:	46c0      	nop			@ (mov r8, r8)
 800211a:	e7fd      	b.n	8002118 <HardFault_Handler+0x4>

0800211c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002120:	46c0      	nop			@ (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800212a:	46c0      	nop			@ (mov r8, r8)
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002134:	f000 f8dc 	bl	80022f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002138:	46c0      	nop			@ (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002144:	4b03      	ldr	r3, [pc, #12]	@ (8002154 <RTC_TAMP_IRQHandler+0x14>)
 8002146:	0018      	movs	r0, r3
 8002148:	f002 fd7e 	bl	8004c48 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800214c:	46c0      	nop			@ (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			@ (mov r8, r8)
 8002154:	20000110 	.word	0x20000110

08002158 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800215c:	46c0      	nop			@ (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 8002166:	2001      	movs	r0, #1
 8002168:	f000 fb76 	bl	8002858 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 800216c:	2002      	movs	r0, #2
 800216e:	f000 fb73 	bl	8002858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 800217c:	2004      	movs	r0, #4
 800217e:	f000 fb6b 	bl	8002858 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 8002182:	2008      	movs	r0, #8
 8002184:	f000 fb68 	bl	8002858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002188:	46c0      	nop			@ (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 8002192:	2380      	movs	r3, #128	@ 0x80
 8002194:	021b      	lsls	r3, r3, #8
 8002196:	0018      	movs	r0, r3
 8002198:	f000 fb5e 	bl	8002858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800219c:	46c0      	nop			@ (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80021a8:	4b03      	ldr	r3, [pc, #12]	@ (80021b8 <TIM16_IRQHandler+0x14>)
 80021aa:	0018      	movs	r0, r3
 80021ac:	f003 f966 	bl	800547c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80021b0:	46c0      	nop			@ (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			@ (mov r8, r8)
 80021b8:	200001d4 	.word	0x200001d4

080021bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021c0:	46c0      	nop			@ (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021c8:	480d      	ldr	r0, [pc, #52]	@ (8002200 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021cc:	f7ff fff6 	bl	80021bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d0:	480c      	ldr	r0, [pc, #48]	@ (8002204 <LoopForever+0x6>)
  ldr r1, =_edata
 80021d2:	490d      	ldr	r1, [pc, #52]	@ (8002208 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021d4:	4a0d      	ldr	r2, [pc, #52]	@ (800220c <LoopForever+0xe>)
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d8:	e002      	b.n	80021e0 <LoopCopyDataInit>

080021da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021de:	3304      	adds	r3, #4

080021e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e4:	d3f9      	bcc.n	80021da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002210 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002214 <LoopForever+0x16>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ec:	e001      	b.n	80021f2 <LoopFillZerobss>

080021ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f0:	3204      	adds	r2, #4

080021f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f4:	d3fb      	bcc.n	80021ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021f6:	f003 ff3d 	bl	8006074 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80021fa:	f7fe fbcf 	bl	800099c <main>

080021fe <LoopForever>:

LoopForever:
  b LoopForever
 80021fe:	e7fe      	b.n	80021fe <LoopForever>
  ldr   r0, =_estack
 8002200:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002208:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800220c:	080061bc 	.word	0x080061bc
  ldr r2, =_sbss
 8002210:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002214:	20000298 	.word	0x20000298

08002218 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002218:	e7fe      	b.n	8002218 <ADC1_IRQHandler>
	...

0800221c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002222:	1dfb      	adds	r3, r7, #7
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002228:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <HAL_Init+0x3c>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <HAL_Init+0x3c>)
 800222e:	2180      	movs	r1, #128	@ 0x80
 8002230:	0049      	lsls	r1, r1, #1
 8002232:	430a      	orrs	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002236:	2003      	movs	r0, #3
 8002238:	f000 f810 	bl	800225c <HAL_InitTick>
 800223c:	1e03      	subs	r3, r0, #0
 800223e:	d003      	beq.n	8002248 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002240:	1dfb      	adds	r3, r7, #7
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	e001      	b.n	800224c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002248:	f7ff fdf6 	bl	8001e38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800224c:	1dfb      	adds	r3, r7, #7
 800224e:	781b      	ldrb	r3, [r3, #0]
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	b002      	add	sp, #8
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40022000 	.word	0x40022000

0800225c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800225c:	b590      	push	{r4, r7, lr}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002264:	230f      	movs	r3, #15
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800226c:	4b1d      	ldr	r3, [pc, #116]	@ (80022e4 <HAL_InitTick+0x88>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d02b      	beq.n	80022cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002274:	4b1c      	ldr	r3, [pc, #112]	@ (80022e8 <HAL_InitTick+0x8c>)
 8002276:	681c      	ldr	r4, [r3, #0]
 8002278:	4b1a      	ldr	r3, [pc, #104]	@ (80022e4 <HAL_InitTick+0x88>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	0019      	movs	r1, r3
 800227e:	23fa      	movs	r3, #250	@ 0xfa
 8002280:	0098      	lsls	r0, r3, #2
 8002282:	f7fd ff3f 	bl	8000104 <__udivsi3>
 8002286:	0003      	movs	r3, r0
 8002288:	0019      	movs	r1, r3
 800228a:	0020      	movs	r0, r4
 800228c:	f7fd ff3a 	bl	8000104 <__udivsi3>
 8002290:	0003      	movs	r3, r0
 8002292:	0018      	movs	r0, r3
 8002294:	f000 f919 	bl	80024ca <HAL_SYSTICK_Config>
 8002298:	1e03      	subs	r3, r0, #0
 800229a:	d112      	bne.n	80022c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d80a      	bhi.n	80022b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	2301      	movs	r3, #1
 80022a6:	425b      	negs	r3, r3
 80022a8:	2200      	movs	r2, #0
 80022aa:	0018      	movs	r0, r3
 80022ac:	f000 f8e8 	bl	8002480 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022b0:	4b0e      	ldr	r3, [pc, #56]	@ (80022ec <HAL_InitTick+0x90>)
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	e00d      	b.n	80022d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80022b8:	230f      	movs	r3, #15
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
 80022c0:	e008      	b.n	80022d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022c2:	230f      	movs	r3, #15
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
 80022ca:	e003      	b.n	80022d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022cc:	230f      	movs	r3, #15
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	2201      	movs	r2, #1
 80022d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80022d4:	230f      	movs	r3, #15
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	781b      	ldrb	r3, [r3, #0]
}
 80022da:	0018      	movs	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	b005      	add	sp, #20
 80022e0:	bd90      	pop	{r4, r7, pc}
 80022e2:	46c0      	nop			@ (mov r8, r8)
 80022e4:	20000068 	.word	0x20000068
 80022e8:	20000060 	.word	0x20000060
 80022ec:	20000064 	.word	0x20000064

080022f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022f4:	4b05      	ldr	r3, [pc, #20]	@ (800230c <HAL_IncTick+0x1c>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	001a      	movs	r2, r3
 80022fa:	4b05      	ldr	r3, [pc, #20]	@ (8002310 <HAL_IncTick+0x20>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	18d2      	adds	r2, r2, r3
 8002300:	4b03      	ldr	r3, [pc, #12]	@ (8002310 <HAL_IncTick+0x20>)
 8002302:	601a      	str	r2, [r3, #0]
}
 8002304:	46c0      	nop			@ (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	46c0      	nop			@ (mov r8, r8)
 800230c:	20000068 	.word	0x20000068
 8002310:	20000294 	.word	0x20000294

08002314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  return uwTick;
 8002318:	4b02      	ldr	r3, [pc, #8]	@ (8002324 <HAL_GetTick+0x10>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			@ (mov r8, r8)
 8002324:	20000294 	.word	0x20000294

08002328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	0002      	movs	r2, r0
 8002330:	1dfb      	adds	r3, r7, #7
 8002332:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002334:	1dfb      	adds	r3, r7, #7
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b7f      	cmp	r3, #127	@ 0x7f
 800233a:	d809      	bhi.n	8002350 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233c:	1dfb      	adds	r3, r7, #7
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	001a      	movs	r2, r3
 8002342:	231f      	movs	r3, #31
 8002344:	401a      	ands	r2, r3
 8002346:	4b04      	ldr	r3, [pc, #16]	@ (8002358 <__NVIC_EnableIRQ+0x30>)
 8002348:	2101      	movs	r1, #1
 800234a:	4091      	lsls	r1, r2
 800234c:	000a      	movs	r2, r1
 800234e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002350:	46c0      	nop			@ (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	b002      	add	sp, #8
 8002356:	bd80      	pop	{r7, pc}
 8002358:	e000e100 	.word	0xe000e100

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	0002      	movs	r2, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	1dfb      	adds	r3, r7, #7
 8002368:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800236a:	1dfb      	adds	r3, r7, #7
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002370:	d828      	bhi.n	80023c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002372:	4a2f      	ldr	r2, [pc, #188]	@ (8002430 <__NVIC_SetPriority+0xd4>)
 8002374:	1dfb      	adds	r3, r7, #7
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	b25b      	sxtb	r3, r3
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	33c0      	adds	r3, #192	@ 0xc0
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	589b      	ldr	r3, [r3, r2]
 8002382:	1dfa      	adds	r2, r7, #7
 8002384:	7812      	ldrb	r2, [r2, #0]
 8002386:	0011      	movs	r1, r2
 8002388:	2203      	movs	r2, #3
 800238a:	400a      	ands	r2, r1
 800238c:	00d2      	lsls	r2, r2, #3
 800238e:	21ff      	movs	r1, #255	@ 0xff
 8002390:	4091      	lsls	r1, r2
 8002392:	000a      	movs	r2, r1
 8002394:	43d2      	mvns	r2, r2
 8002396:	401a      	ands	r2, r3
 8002398:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	019b      	lsls	r3, r3, #6
 800239e:	22ff      	movs	r2, #255	@ 0xff
 80023a0:	401a      	ands	r2, r3
 80023a2:	1dfb      	adds	r3, r7, #7
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	0018      	movs	r0, r3
 80023a8:	2303      	movs	r3, #3
 80023aa:	4003      	ands	r3, r0
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023b0:	481f      	ldr	r0, [pc, #124]	@ (8002430 <__NVIC_SetPriority+0xd4>)
 80023b2:	1dfb      	adds	r3, r7, #7
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	b25b      	sxtb	r3, r3
 80023b8:	089b      	lsrs	r3, r3, #2
 80023ba:	430a      	orrs	r2, r1
 80023bc:	33c0      	adds	r3, #192	@ 0xc0
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023c2:	e031      	b.n	8002428 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002434 <__NVIC_SetPriority+0xd8>)
 80023c6:	1dfb      	adds	r3, r7, #7
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	0019      	movs	r1, r3
 80023cc:	230f      	movs	r3, #15
 80023ce:	400b      	ands	r3, r1
 80023d0:	3b08      	subs	r3, #8
 80023d2:	089b      	lsrs	r3, r3, #2
 80023d4:	3306      	adds	r3, #6
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	18d3      	adds	r3, r2, r3
 80023da:	3304      	adds	r3, #4
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	1dfa      	adds	r2, r7, #7
 80023e0:	7812      	ldrb	r2, [r2, #0]
 80023e2:	0011      	movs	r1, r2
 80023e4:	2203      	movs	r2, #3
 80023e6:	400a      	ands	r2, r1
 80023e8:	00d2      	lsls	r2, r2, #3
 80023ea:	21ff      	movs	r1, #255	@ 0xff
 80023ec:	4091      	lsls	r1, r2
 80023ee:	000a      	movs	r2, r1
 80023f0:	43d2      	mvns	r2, r2
 80023f2:	401a      	ands	r2, r3
 80023f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	019b      	lsls	r3, r3, #6
 80023fa:	22ff      	movs	r2, #255	@ 0xff
 80023fc:	401a      	ands	r2, r3
 80023fe:	1dfb      	adds	r3, r7, #7
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	0018      	movs	r0, r3
 8002404:	2303      	movs	r3, #3
 8002406:	4003      	ands	r3, r0
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800240c:	4809      	ldr	r0, [pc, #36]	@ (8002434 <__NVIC_SetPriority+0xd8>)
 800240e:	1dfb      	adds	r3, r7, #7
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	001c      	movs	r4, r3
 8002414:	230f      	movs	r3, #15
 8002416:	4023      	ands	r3, r4
 8002418:	3b08      	subs	r3, #8
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	430a      	orrs	r2, r1
 800241e:	3306      	adds	r3, #6
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	18c3      	adds	r3, r0, r3
 8002424:	3304      	adds	r3, #4
 8002426:	601a      	str	r2, [r3, #0]
}
 8002428:	46c0      	nop			@ (mov r8, r8)
 800242a:	46bd      	mov	sp, r7
 800242c:	b003      	add	sp, #12
 800242e:	bd90      	pop	{r4, r7, pc}
 8002430:	e000e100 	.word	0xe000e100
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	1e5a      	subs	r2, r3, #1
 8002444:	2380      	movs	r3, #128	@ 0x80
 8002446:	045b      	lsls	r3, r3, #17
 8002448:	429a      	cmp	r2, r3
 800244a:	d301      	bcc.n	8002450 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800244c:	2301      	movs	r3, #1
 800244e:	e010      	b.n	8002472 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002450:	4b0a      	ldr	r3, [pc, #40]	@ (800247c <SysTick_Config+0x44>)
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	3a01      	subs	r2, #1
 8002456:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002458:	2301      	movs	r3, #1
 800245a:	425b      	negs	r3, r3
 800245c:	2103      	movs	r1, #3
 800245e:	0018      	movs	r0, r3
 8002460:	f7ff ff7c 	bl	800235c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002464:	4b05      	ldr	r3, [pc, #20]	@ (800247c <SysTick_Config+0x44>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800246a:	4b04      	ldr	r3, [pc, #16]	@ (800247c <SysTick_Config+0x44>)
 800246c:	2207      	movs	r2, #7
 800246e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002470:	2300      	movs	r3, #0
}
 8002472:	0018      	movs	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	b002      	add	sp, #8
 8002478:	bd80      	pop	{r7, pc}
 800247a:	46c0      	nop			@ (mov r8, r8)
 800247c:	e000e010 	.word	0xe000e010

08002480 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	210f      	movs	r1, #15
 800248c:	187b      	adds	r3, r7, r1
 800248e:	1c02      	adds	r2, r0, #0
 8002490:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	187b      	adds	r3, r7, r1
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	b25b      	sxtb	r3, r3
 800249a:	0011      	movs	r1, r2
 800249c:	0018      	movs	r0, r3
 800249e:	f7ff ff5d 	bl	800235c <__NVIC_SetPriority>
}
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b004      	add	sp, #16
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	0002      	movs	r2, r0
 80024b2:	1dfb      	adds	r3, r7, #7
 80024b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b6:	1dfb      	adds	r3, r7, #7
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	b25b      	sxtb	r3, r3
 80024bc:	0018      	movs	r0, r3
 80024be:	f7ff ff33 	bl	8002328 <__NVIC_EnableIRQ>
}
 80024c2:	46c0      	nop			@ (mov r8, r8)
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b002      	add	sp, #8
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7ff ffaf 	bl	8002438 <SysTick_Config>
 80024da:	0003      	movs	r3, r0
}
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f2:	e147      	b.n	8002784 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2101      	movs	r1, #1
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4091      	lsls	r1, r2
 80024fe:	000a      	movs	r2, r1
 8002500:	4013      	ands	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d100      	bne.n	800250c <HAL_GPIO_Init+0x28>
 800250a:	e138      	b.n	800277e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2203      	movs	r2, #3
 8002512:	4013      	ands	r3, r2
 8002514:	2b01      	cmp	r3, #1
 8002516:	d005      	beq.n	8002524 <HAL_GPIO_Init+0x40>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2203      	movs	r2, #3
 800251e:	4013      	ands	r3, r2
 8002520:	2b02      	cmp	r3, #2
 8002522:	d130      	bne.n	8002586 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	409a      	lsls	r2, r3
 8002532:	0013      	movs	r3, r2
 8002534:	43da      	mvns	r2, r3
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	409a      	lsls	r2, r3
 8002546:	0013      	movs	r3, r2
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800255a:	2201      	movs	r2, #1
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	409a      	lsls	r2, r3
 8002560:	0013      	movs	r3, r2
 8002562:	43da      	mvns	r2, r3
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	2201      	movs	r2, #1
 8002572:	401a      	ands	r2, r3
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	409a      	lsls	r2, r3
 8002578:	0013      	movs	r3, r2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2203      	movs	r2, #3
 800258c:	4013      	ands	r3, r2
 800258e:	2b03      	cmp	r3, #3
 8002590:	d017      	beq.n	80025c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	2203      	movs	r2, #3
 800259e:	409a      	lsls	r2, r3
 80025a0:	0013      	movs	r3, r2
 80025a2:	43da      	mvns	r2, r3
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	409a      	lsls	r2, r3
 80025b4:	0013      	movs	r3, r2
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2203      	movs	r2, #3
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d123      	bne.n	8002616 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	08da      	lsrs	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3208      	adds	r2, #8
 80025d6:	0092      	lsls	r2, r2, #2
 80025d8:	58d3      	ldr	r3, [r2, r3]
 80025da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2207      	movs	r2, #7
 80025e0:	4013      	ands	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	220f      	movs	r2, #15
 80025e6:	409a      	lsls	r2, r3
 80025e8:	0013      	movs	r3, r2
 80025ea:	43da      	mvns	r2, r3
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4013      	ands	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2107      	movs	r1, #7
 80025fa:	400b      	ands	r3, r1
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	409a      	lsls	r2, r3
 8002600:	0013      	movs	r3, r2
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	08da      	lsrs	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3208      	adds	r2, #8
 8002610:	0092      	lsls	r2, r2, #2
 8002612:	6939      	ldr	r1, [r7, #16]
 8002614:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	409a      	lsls	r2, r3
 8002624:	0013      	movs	r3, r2
 8002626:	43da      	mvns	r2, r3
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2203      	movs	r2, #3
 8002634:	401a      	ands	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	409a      	lsls	r2, r3
 800263c:	0013      	movs	r3, r2
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	23c0      	movs	r3, #192	@ 0xc0
 8002650:	029b      	lsls	r3, r3, #10
 8002652:	4013      	ands	r3, r2
 8002654:	d100      	bne.n	8002658 <HAL_GPIO_Init+0x174>
 8002656:	e092      	b.n	800277e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002658:	4a50      	ldr	r2, [pc, #320]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	089b      	lsrs	r3, r3, #2
 800265e:	3318      	adds	r3, #24
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	589b      	ldr	r3, [r3, r2]
 8002664:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2203      	movs	r2, #3
 800266a:	4013      	ands	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	220f      	movs	r2, #15
 8002670:	409a      	lsls	r2, r3
 8002672:	0013      	movs	r3, r2
 8002674:	43da      	mvns	r2, r3
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	23a0      	movs	r3, #160	@ 0xa0
 8002680:	05db      	lsls	r3, r3, #23
 8002682:	429a      	cmp	r2, r3
 8002684:	d013      	beq.n	80026ae <HAL_GPIO_Init+0x1ca>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a45      	ldr	r2, [pc, #276]	@ (80027a0 <HAL_GPIO_Init+0x2bc>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00d      	beq.n	80026aa <HAL_GPIO_Init+0x1c6>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a44      	ldr	r2, [pc, #272]	@ (80027a4 <HAL_GPIO_Init+0x2c0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d007      	beq.n	80026a6 <HAL_GPIO_Init+0x1c2>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a43      	ldr	r2, [pc, #268]	@ (80027a8 <HAL_GPIO_Init+0x2c4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d101      	bne.n	80026a2 <HAL_GPIO_Init+0x1be>
 800269e:	2303      	movs	r3, #3
 80026a0:	e006      	b.n	80026b0 <HAL_GPIO_Init+0x1cc>
 80026a2:	2305      	movs	r3, #5
 80026a4:	e004      	b.n	80026b0 <HAL_GPIO_Init+0x1cc>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e002      	b.n	80026b0 <HAL_GPIO_Init+0x1cc>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <HAL_GPIO_Init+0x1cc>
 80026ae:	2300      	movs	r3, #0
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	2103      	movs	r1, #3
 80026b4:	400a      	ands	r2, r1
 80026b6:	00d2      	lsls	r2, r2, #3
 80026b8:	4093      	lsls	r3, r2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80026c0:	4936      	ldr	r1, [pc, #216]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	3318      	adds	r3, #24
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ce:	4b33      	ldr	r3, [pc, #204]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	43da      	mvns	r2, r3
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4013      	ands	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	2380      	movs	r3, #128	@ 0x80
 80026e4:	035b      	lsls	r3, r3, #13
 80026e6:	4013      	ands	r3, r2
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026f2:	4b2a      	ldr	r3, [pc, #168]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80026f8:	4b28      	ldr	r3, [pc, #160]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	43da      	mvns	r2, r3
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4013      	ands	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	2380      	movs	r3, #128	@ 0x80
 800270e:	039b      	lsls	r3, r3, #14
 8002710:	4013      	ands	r3, r2
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800271c:	4b1f      	ldr	r3, [pc, #124]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002722:	4a1e      	ldr	r2, [pc, #120]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 8002724:	2384      	movs	r3, #132	@ 0x84
 8002726:	58d3      	ldr	r3, [r2, r3]
 8002728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	43da      	mvns	r2, r3
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4013      	ands	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	2380      	movs	r3, #128	@ 0x80
 800273a:	029b      	lsls	r3, r3, #10
 800273c:	4013      	ands	r3, r2
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002748:	4914      	ldr	r1, [pc, #80]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 800274a:	2284      	movs	r2, #132	@ 0x84
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002750:	4a12      	ldr	r2, [pc, #72]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 8002752:	2380      	movs	r3, #128	@ 0x80
 8002754:	58d3      	ldr	r3, [r2, r3]
 8002756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	43da      	mvns	r2, r3
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	2380      	movs	r3, #128	@ 0x80
 8002768:	025b      	lsls	r3, r3, #9
 800276a:	4013      	ands	r3, r2
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002776:	4909      	ldr	r1, [pc, #36]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 8002778:	2280      	movs	r2, #128	@ 0x80
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	3301      	adds	r3, #1
 8002782:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	40da      	lsrs	r2, r3
 800278c:	1e13      	subs	r3, r2, #0
 800278e:	d000      	beq.n	8002792 <HAL_GPIO_Init+0x2ae>
 8002790:	e6b0      	b.n	80024f4 <HAL_GPIO_Init+0x10>
  }
}
 8002792:	46c0      	nop			@ (mov r8, r8)
 8002794:	46c0      	nop			@ (mov r8, r8)
 8002796:	46bd      	mov	sp, r7
 8002798:	b006      	add	sp, #24
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021800 	.word	0x40021800
 80027a0:	50000400 	.word	0x50000400
 80027a4:	50000800 	.word	0x50000800
 80027a8:	50000c00 	.word	0x50000c00

080027ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	000a      	movs	r2, r1
 80027b6:	1cbb      	adds	r3, r7, #2
 80027b8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	1cba      	adds	r2, r7, #2
 80027c0:	8812      	ldrh	r2, [r2, #0]
 80027c2:	4013      	ands	r3, r2
 80027c4:	d004      	beq.n	80027d0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80027c6:	230f      	movs	r3, #15
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	2201      	movs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]
 80027ce:	e003      	b.n	80027d8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027d0:	230f      	movs	r3, #15
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80027d8:	230f      	movs	r3, #15
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	781b      	ldrb	r3, [r3, #0]
}
 80027de:	0018      	movs	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b004      	add	sp, #16
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	0008      	movs	r0, r1
 80027f0:	0011      	movs	r1, r2
 80027f2:	1cbb      	adds	r3, r7, #2
 80027f4:	1c02      	adds	r2, r0, #0
 80027f6:	801a      	strh	r2, [r3, #0]
 80027f8:	1c7b      	adds	r3, r7, #1
 80027fa:	1c0a      	adds	r2, r1, #0
 80027fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027fe:	1c7b      	adds	r3, r7, #1
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d004      	beq.n	8002810 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002806:	1cbb      	adds	r3, r7, #2
 8002808:	881a      	ldrh	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800280e:	e003      	b.n	8002818 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002810:	1cbb      	adds	r3, r7, #2
 8002812:	881a      	ldrh	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002818:	46c0      	nop			@ (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	b002      	add	sp, #8
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	000a      	movs	r2, r1
 800282a:	1cbb      	adds	r3, r7, #2
 800282c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002834:	1cbb      	adds	r3, r7, #2
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4013      	ands	r3, r2
 800283c:	041a      	lsls	r2, r3, #16
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	43db      	mvns	r3, r3
 8002842:	1cb9      	adds	r1, r7, #2
 8002844:	8809      	ldrh	r1, [r1, #0]
 8002846:	400b      	ands	r3, r1
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	619a      	str	r2, [r3, #24]
}
 800284e:	46c0      	nop			@ (mov r8, r8)
 8002850:	46bd      	mov	sp, r7
 8002852:	b004      	add	sp, #16
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	0002      	movs	r2, r0
 8002860:	1dbb      	adds	r3, r7, #6
 8002862:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002864:	4b10      	ldr	r3, [pc, #64]	@ (80028a8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	1dba      	adds	r2, r7, #6
 800286a:	8812      	ldrh	r2, [r2, #0]
 800286c:	4013      	ands	r3, r2
 800286e:	d008      	beq.n	8002882 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002870:	4b0d      	ldr	r3, [pc, #52]	@ (80028a8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002872:	1dba      	adds	r2, r7, #6
 8002874:	8812      	ldrh	r2, [r2, #0]
 8002876:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002878:	1dbb      	adds	r3, r7, #6
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	0018      	movs	r0, r3
 800287e:	f000 f815 	bl	80028ac <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	1dba      	adds	r2, r7, #6
 8002888:	8812      	ldrh	r2, [r2, #0]
 800288a:	4013      	ands	r3, r2
 800288c:	d008      	beq.n	80028a0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002890:	1dba      	adds	r2, r7, #6
 8002892:	8812      	ldrh	r2, [r2, #0]
 8002894:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002896:	1dbb      	adds	r3, r7, #6
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	0018      	movs	r0, r3
 800289c:	f7fe fd82 	bl	80013a4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80028a0:	46c0      	nop			@ (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b002      	add	sp, #8
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40021800 	.word	0x40021800

080028ac <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	0002      	movs	r2, r0
 80028b4:	1dbb      	adds	r3, r7, #6
 80028b6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80028b8:	46c0      	nop			@ (mov r8, r8)
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b002      	add	sp, #8
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e08f      	b.n	80029f2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2241      	movs	r2, #65	@ 0x41
 80028d6:	5c9b      	ldrb	r3, [r3, r2]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d107      	bne.n	80028ee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2240      	movs	r2, #64	@ 0x40
 80028e2:	2100      	movs	r1, #0
 80028e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	0018      	movs	r0, r3
 80028ea:	f7ff fad1 	bl	8001e90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2241      	movs	r2, #65	@ 0x41
 80028f2:	2124      	movs	r1, #36	@ 0x24
 80028f4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2101      	movs	r1, #1
 8002902:	438a      	bics	r2, r1
 8002904:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	493b      	ldr	r1, [pc, #236]	@ (80029fc <HAL_I2C_Init+0x13c>)
 8002910:	400a      	ands	r2, r1
 8002912:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4938      	ldr	r1, [pc, #224]	@ (8002a00 <HAL_I2C_Init+0x140>)
 8002920:	400a      	ands	r2, r1
 8002922:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d108      	bne.n	800293e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2180      	movs	r1, #128	@ 0x80
 8002936:	0209      	lsls	r1, r1, #8
 8002938:	430a      	orrs	r2, r1
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	e007      	b.n	800294e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2184      	movs	r1, #132	@ 0x84
 8002948:	0209      	lsls	r1, r1, #8
 800294a:	430a      	orrs	r2, r1
 800294c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d109      	bne.n	800296a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2180      	movs	r1, #128	@ 0x80
 8002962:	0109      	lsls	r1, r1, #4
 8002964:	430a      	orrs	r2, r1
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	e007      	b.n	800297a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4923      	ldr	r1, [pc, #140]	@ (8002a04 <HAL_I2C_Init+0x144>)
 8002976:	400a      	ands	r2, r1
 8002978:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4920      	ldr	r1, [pc, #128]	@ (8002a08 <HAL_I2C_Init+0x148>)
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	491a      	ldr	r1, [pc, #104]	@ (8002a00 <HAL_I2C_Init+0x140>)
 8002996:	400a      	ands	r2, r1
 8002998:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691a      	ldr	r2, [r3, #16]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69d9      	ldr	r1, [r3, #28]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1a      	ldr	r2, [r3, #32]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2101      	movs	r1, #1
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2241      	movs	r2, #65	@ 0x41
 80029de:	2120      	movs	r1, #32
 80029e0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2242      	movs	r2, #66	@ 0x42
 80029ec:	2100      	movs	r1, #0
 80029ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	0018      	movs	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b002      	add	sp, #8
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			@ (mov r8, r8)
 80029fc:	f0ffffff 	.word	0xf0ffffff
 8002a00:	ffff7fff 	.word	0xffff7fff
 8002a04:	fffff7ff 	.word	0xfffff7ff
 8002a08:	02008000 	.word	0x02008000

08002a0c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a0c:	b590      	push	{r4, r7, lr}
 8002a0e:	b089      	sub	sp, #36	@ 0x24
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	0008      	movs	r0, r1
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	0019      	movs	r1, r3
 8002a1a:	230a      	movs	r3, #10
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	1c02      	adds	r2, r0, #0
 8002a20:	801a      	strh	r2, [r3, #0]
 8002a22:	2308      	movs	r3, #8
 8002a24:	18fb      	adds	r3, r7, r3
 8002a26:	1c0a      	adds	r2, r1, #0
 8002a28:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2241      	movs	r2, #65	@ 0x41
 8002a2e:	5c9b      	ldrb	r3, [r3, r2]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d000      	beq.n	8002a38 <HAL_I2C_Master_Transmit+0x2c>
 8002a36:	e10a      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2240      	movs	r2, #64	@ 0x40
 8002a3c:	5c9b      	ldrb	r3, [r3, r2]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_I2C_Master_Transmit+0x3a>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e104      	b.n	8002c50 <HAL_I2C_Master_Transmit+0x244>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2240      	movs	r2, #64	@ 0x40
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a4e:	f7ff fc61 	bl	8002314 <HAL_GetTick>
 8002a52:	0003      	movs	r3, r0
 8002a54:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a56:	2380      	movs	r3, #128	@ 0x80
 8002a58:	0219      	lsls	r1, r3, #8
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	2319      	movs	r3, #25
 8002a62:	2201      	movs	r2, #1
 8002a64:	f000 fa26 	bl	8002eb4 <I2C_WaitOnFlagUntilTimeout>
 8002a68:	1e03      	subs	r3, r0, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0ef      	b.n	8002c50 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2241      	movs	r2, #65	@ 0x41
 8002a74:	2121      	movs	r1, #33	@ 0x21
 8002a76:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2242      	movs	r2, #66	@ 0x42
 8002a7c:	2110      	movs	r1, #16
 8002a7e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2208      	movs	r2, #8
 8002a90:	18ba      	adds	r2, r7, r2
 8002a92:	8812      	ldrh	r2, [r2, #0]
 8002a94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2bff      	cmp	r3, #255	@ 0xff
 8002aa4:	d906      	bls.n	8002ab4 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	22ff      	movs	r2, #255	@ 0xff
 8002aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002aac:	2380      	movs	r3, #128	@ 0x80
 8002aae:	045b      	lsls	r3, r3, #17
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	e007      	b.n	8002ac4 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002abe:	2380      	movs	r3, #128	@ 0x80
 8002ac0:	049b      	lsls	r3, r3, #18
 8002ac2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d027      	beq.n	8002b1c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	3301      	adds	r3, #1
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	697c      	ldr	r4, [r7, #20]
 8002b08:	230a      	movs	r3, #10
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	8819      	ldrh	r1, [r3, #0]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	4b51      	ldr	r3, [pc, #324]	@ (8002c58 <HAL_I2C_Master_Transmit+0x24c>)
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	0023      	movs	r3, r4
 8002b16:	f000 fc45 	bl	80033a4 <I2C_TransferConfig>
 8002b1a:	e06f      	b.n	8002bfc <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	697c      	ldr	r4, [r7, #20]
 8002b24:	230a      	movs	r3, #10
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	8819      	ldrh	r1, [r3, #0]
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	4b4a      	ldr	r3, [pc, #296]	@ (8002c58 <HAL_I2C_Master_Transmit+0x24c>)
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	0023      	movs	r3, r4
 8002b32:	f000 fc37 	bl	80033a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002b36:	e061      	b.n	8002bfc <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f000 fa10 	bl	8002f64 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b44:	1e03      	subs	r3, r0, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e081      	b.n	8002c50 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b50:	781a      	ldrb	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d03a      	beq.n	8002bfc <HAL_I2C_Master_Transmit+0x1f0>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d136      	bne.n	8002bfc <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	0013      	movs	r3, r2
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2180      	movs	r1, #128	@ 0x80
 8002b9c:	f000 f98a 	bl	8002eb4 <I2C_WaitOnFlagUntilTimeout>
 8002ba0:	1e03      	subs	r3, r0, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e053      	b.n	8002c50 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2bff      	cmp	r3, #255	@ 0xff
 8002bb0:	d911      	bls.n	8002bd6 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	22ff      	movs	r2, #255	@ 0xff
 8002bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	2380      	movs	r3, #128	@ 0x80
 8002bc0:	045c      	lsls	r4, r3, #17
 8002bc2:	230a      	movs	r3, #10
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	8819      	ldrh	r1, [r3, #0]
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	0023      	movs	r3, r4
 8002bd0:	f000 fbe8 	bl	80033a4 <I2C_TransferConfig>
 8002bd4:	e012      	b.n	8002bfc <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	2380      	movs	r3, #128	@ 0x80
 8002be8:	049c      	lsls	r4, r3, #18
 8002bea:	230a      	movs	r3, #10
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	8819      	ldrh	r1, [r3, #0]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	0023      	movs	r3, r4
 8002bf8:	f000 fbd4 	bl	80033a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d198      	bne.n	8002b38 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f000 f9ef 	bl	8002ff0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c12:	1e03      	subs	r3, r0, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e01a      	b.n	8002c50 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	490b      	ldr	r1, [pc, #44]	@ (8002c5c <HAL_I2C_Master_Transmit+0x250>)
 8002c2e:	400a      	ands	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2241      	movs	r2, #65	@ 0x41
 8002c36:	2120      	movs	r1, #32
 8002c38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2242      	movs	r2, #66	@ 0x42
 8002c3e:	2100      	movs	r1, #0
 8002c40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2240      	movs	r2, #64	@ 0x40
 8002c46:	2100      	movs	r1, #0
 8002c48:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	e000      	b.n	8002c50 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002c4e:	2302      	movs	r3, #2
  }
}
 8002c50:	0018      	movs	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b007      	add	sp, #28
 8002c56:	bd90      	pop	{r4, r7, pc}
 8002c58:	80002000 	.word	0x80002000
 8002c5c:	fe00e800 	.word	0xfe00e800

08002c60 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b089      	sub	sp, #36	@ 0x24
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	0008      	movs	r0, r1
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	0019      	movs	r1, r3
 8002c6e:	230a      	movs	r3, #10
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	1c02      	adds	r2, r0, #0
 8002c74:	801a      	strh	r2, [r3, #0]
 8002c76:	2308      	movs	r3, #8
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	1c0a      	adds	r2, r1, #0
 8002c7c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2241      	movs	r2, #65	@ 0x41
 8002c82:	5c9b      	ldrb	r3, [r3, r2]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	d000      	beq.n	8002c8c <HAL_I2C_Master_Receive+0x2c>
 8002c8a:	e0e8      	b.n	8002e5e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2240      	movs	r2, #64	@ 0x40
 8002c90:	5c9b      	ldrb	r3, [r3, r2]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_I2C_Master_Receive+0x3a>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e0e2      	b.n	8002e60 <HAL_I2C_Master_Receive+0x200>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2240      	movs	r2, #64	@ 0x40
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ca2:	f7ff fb37 	bl	8002314 <HAL_GetTick>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002caa:	2380      	movs	r3, #128	@ 0x80
 8002cac:	0219      	lsls	r1, r3, #8
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	2319      	movs	r3, #25
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f000 f8fc 	bl	8002eb4 <I2C_WaitOnFlagUntilTimeout>
 8002cbc:	1e03      	subs	r3, r0, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0cd      	b.n	8002e60 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2241      	movs	r2, #65	@ 0x41
 8002cc8:	2122      	movs	r1, #34	@ 0x22
 8002cca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2242      	movs	r2, #66	@ 0x42
 8002cd0:	2110      	movs	r1, #16
 8002cd2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2208      	movs	r2, #8
 8002ce4:	18ba      	adds	r2, r7, r2
 8002ce6:	8812      	ldrh	r2, [r2, #0]
 8002ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2bff      	cmp	r3, #255	@ 0xff
 8002cf8:	d911      	bls.n	8002d1e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	22ff      	movs	r2, #255	@ 0xff
 8002cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	2380      	movs	r3, #128	@ 0x80
 8002d08:	045c      	lsls	r4, r3, #17
 8002d0a:	230a      	movs	r3, #10
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	8819      	ldrh	r1, [r3, #0]
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	4b55      	ldr	r3, [pc, #340]	@ (8002e68 <HAL_I2C_Master_Receive+0x208>)
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	0023      	movs	r3, r4
 8002d18:	f000 fb44 	bl	80033a4 <I2C_TransferConfig>
 8002d1c:	e076      	b.n	8002e0c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	2380      	movs	r3, #128	@ 0x80
 8002d30:	049c      	lsls	r4, r3, #18
 8002d32:	230a      	movs	r3, #10
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	8819      	ldrh	r1, [r3, #0]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8002e68 <HAL_I2C_Master_Receive+0x208>)
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	0023      	movs	r3, r4
 8002d40:	f000 fb30 	bl	80033a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002d44:	e062      	b.n	8002e0c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f000 f993 	bl	8003078 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d52:	1e03      	subs	r3, r0, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e082      	b.n	8002e60 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d03a      	beq.n	8002e0c <HAL_I2C_Master_Receive+0x1ac>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d136      	bne.n	8002e0c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	0013      	movs	r3, r2
 8002da8:	2200      	movs	r2, #0
 8002daa:	2180      	movs	r1, #128	@ 0x80
 8002dac:	f000 f882 	bl	8002eb4 <I2C_WaitOnFlagUntilTimeout>
 8002db0:	1e03      	subs	r3, r0, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e053      	b.n	8002e60 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2bff      	cmp	r3, #255	@ 0xff
 8002dc0:	d911      	bls.n	8002de6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	22ff      	movs	r2, #255	@ 0xff
 8002dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	2380      	movs	r3, #128	@ 0x80
 8002dd0:	045c      	lsls	r4, r3, #17
 8002dd2:	230a      	movs	r3, #10
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	8819      	ldrh	r1, [r3, #0]
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	0023      	movs	r3, r4
 8002de0:	f000 fae0 	bl	80033a4 <I2C_TransferConfig>
 8002de4:	e012      	b.n	8002e0c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	2380      	movs	r3, #128	@ 0x80
 8002df8:	049c      	lsls	r4, r3, #18
 8002dfa:	230a      	movs	r3, #10
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	8819      	ldrh	r1, [r3, #0]
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	2300      	movs	r3, #0
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	0023      	movs	r3, r4
 8002e08:	f000 facc 	bl	80033a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d197      	bne.n	8002d46 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f000 f8e7 	bl	8002ff0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e22:	1e03      	subs	r3, r0, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e01a      	b.n	8002e60 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	490b      	ldr	r1, [pc, #44]	@ (8002e6c <HAL_I2C_Master_Receive+0x20c>)
 8002e3e:	400a      	ands	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2241      	movs	r2, #65	@ 0x41
 8002e46:	2120      	movs	r1, #32
 8002e48:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2242      	movs	r2, #66	@ 0x42
 8002e4e:	2100      	movs	r1, #0
 8002e50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2240      	movs	r2, #64	@ 0x40
 8002e56:	2100      	movs	r1, #0
 8002e58:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e000      	b.n	8002e60 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002e5e:	2302      	movs	r3, #2
  }
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b007      	add	sp, #28
 8002e66:	bd90      	pop	{r4, r7, pc}
 8002e68:	80002400 	.word	0x80002400
 8002e6c:	fe00e800 	.word	0xfe00e800

08002e70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d103      	bne.n	8002e8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	2201      	movs	r2, #1
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d007      	beq.n	8002eac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	619a      	str	r2, [r3, #24]
  }
}
 8002eac:	46c0      	nop			@ (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b002      	add	sp, #8
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	1dfb      	adds	r3, r7, #7
 8002ec2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ec4:	e03a      	b.n	8002f3c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	6839      	ldr	r1, [r7, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f000 f971 	bl	80031b4 <I2C_IsErrorOccurred>
 8002ed2:	1e03      	subs	r3, r0, #0
 8002ed4:	d001      	beq.n	8002eda <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e040      	b.n	8002f5c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	3301      	adds	r3, #1
 8002ede:	d02d      	beq.n	8002f3c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee0:	f7ff fa18 	bl	8002314 <HAL_GetTick>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d302      	bcc.n	8002ef6 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d122      	bne.n	8002f3c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	4013      	ands	r3, r2
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	425a      	negs	r2, r3
 8002f06:	4153      	adcs	r3, r2
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	001a      	movs	r2, r3
 8002f0c:	1dfb      	adds	r3, r7, #7
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d113      	bne.n	8002f3c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f18:	2220      	movs	r2, #32
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2241      	movs	r2, #65	@ 0x41
 8002f24:	2120      	movs	r1, #32
 8002f26:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2242      	movs	r2, #66	@ 0x42
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2240      	movs	r2, #64	@ 0x40
 8002f34:	2100      	movs	r1, #0
 8002f36:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e00f      	b.n	8002f5c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	4013      	ands	r3, r2
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	425a      	negs	r2, r3
 8002f4c:	4153      	adcs	r3, r2
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	001a      	movs	r2, r3
 8002f52:	1dfb      	adds	r3, r7, #7
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d0b5      	beq.n	8002ec6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b004      	add	sp, #16
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f70:	e032      	b.n	8002fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f000 f91b 	bl	80031b4 <I2C_IsErrorOccurred>
 8002f7e:	1e03      	subs	r3, r0, #0
 8002f80:	d001      	beq.n	8002f86 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e030      	b.n	8002fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	d025      	beq.n	8002fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8c:	f7ff f9c2 	bl	8002314 <HAL_GetTick>
 8002f90:	0002      	movs	r2, r0
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d302      	bcc.n	8002fa2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d11a      	bne.n	8002fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d013      	beq.n	8002fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2241      	movs	r2, #65	@ 0x41
 8002fc0:	2120      	movs	r1, #32
 8002fc2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2242      	movs	r2, #66	@ 0x42
 8002fc8:	2100      	movs	r1, #0
 8002fca:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2240      	movs	r2, #64	@ 0x40
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e007      	b.n	8002fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d1c5      	bne.n	8002f72 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	0018      	movs	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	b004      	add	sp, #16
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ffc:	e02f      	b.n	800305e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	68b9      	ldr	r1, [r7, #8]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	0018      	movs	r0, r3
 8003006:	f000 f8d5 	bl	80031b4 <I2C_IsErrorOccurred>
 800300a:	1e03      	subs	r3, r0, #0
 800300c:	d001      	beq.n	8003012 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e02d      	b.n	800306e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003012:	f7ff f97f 	bl	8002314 <HAL_GetTick>
 8003016:	0002      	movs	r2, r0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	429a      	cmp	r2, r3
 8003020:	d302      	bcc.n	8003028 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d11a      	bne.n	800305e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2220      	movs	r2, #32
 8003030:	4013      	ands	r3, r2
 8003032:	2b20      	cmp	r3, #32
 8003034:	d013      	beq.n	800305e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303a:	2220      	movs	r2, #32
 800303c:	431a      	orrs	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2241      	movs	r2, #65	@ 0x41
 8003046:	2120      	movs	r1, #32
 8003048:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2242      	movs	r2, #66	@ 0x42
 800304e:	2100      	movs	r1, #0
 8003050:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2240      	movs	r2, #64	@ 0x40
 8003056:	2100      	movs	r1, #0
 8003058:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e007      	b.n	800306e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	2220      	movs	r2, #32
 8003066:	4013      	ands	r3, r2
 8003068:	2b20      	cmp	r3, #32
 800306a:	d1c8      	bne.n	8002ffe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	0018      	movs	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	b004      	add	sp, #16
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003084:	2317      	movs	r3, #23
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800308c:	e07b      	b.n	8003186 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	0018      	movs	r0, r3
 8003096:	f000 f88d 	bl	80031b4 <I2C_IsErrorOccurred>
 800309a:	1e03      	subs	r3, r0, #0
 800309c:	d003      	beq.n	80030a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800309e:	2317      	movs	r3, #23
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	2201      	movs	r2, #1
 80030a4:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	2220      	movs	r2, #32
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	d140      	bne.n	8003136 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80030b4:	2117      	movs	r1, #23
 80030b6:	187b      	adds	r3, r7, r1
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d13b      	bne.n	8003136 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2204      	movs	r2, #4
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d106      	bne.n	80030da <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80030d4:	187b      	adds	r3, r7, r1
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	2210      	movs	r2, #16
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b10      	cmp	r3, #16
 80030e6:	d123      	bne.n	8003130 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2210      	movs	r2, #16
 80030ee:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2204      	movs	r2, #4
 80030f4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2220      	movs	r2, #32
 80030fc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4929      	ldr	r1, [pc, #164]	@ (80031b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800310a:	400a      	ands	r2, r1
 800310c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2241      	movs	r2, #65	@ 0x41
 8003112:	2120      	movs	r1, #32
 8003114:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2242      	movs	r2, #66	@ 0x42
 800311a:	2100      	movs	r1, #0
 800311c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2240      	movs	r2, #64	@ 0x40
 8003122:	2100      	movs	r1, #0
 8003124:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003126:	2317      	movs	r3, #23
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	2201      	movs	r2, #1
 800312c:	701a      	strb	r2, [r3, #0]
 800312e:	e002      	b.n	8003136 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003136:	f7ff f8ed 	bl	8002314 <HAL_GetTick>
 800313a:	0002      	movs	r2, r0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	429a      	cmp	r2, r3
 8003144:	d302      	bcc.n	800314c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d11c      	bne.n	8003186 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 800314c:	2017      	movs	r0, #23
 800314e:	183b      	adds	r3, r7, r0
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d117      	bne.n	8003186 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	2204      	movs	r2, #4
 800315e:	4013      	ands	r3, r2
 8003160:	2b04      	cmp	r3, #4
 8003162:	d010      	beq.n	8003186 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003168:	2220      	movs	r2, #32
 800316a:	431a      	orrs	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2241      	movs	r2, #65	@ 0x41
 8003174:	2120      	movs	r1, #32
 8003176:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2240      	movs	r2, #64	@ 0x40
 800317c:	2100      	movs	r1, #0
 800317e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003180:	183b      	adds	r3, r7, r0
 8003182:	2201      	movs	r2, #1
 8003184:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	2204      	movs	r2, #4
 800318e:	4013      	ands	r3, r2
 8003190:	2b04      	cmp	r3, #4
 8003192:	d005      	beq.n	80031a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003194:	2317      	movs	r3, #23
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d100      	bne.n	80031a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800319e:	e776      	b.n	800308e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80031a0:	2317      	movs	r3, #23
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	781b      	ldrb	r3, [r3, #0]
}
 80031a6:	0018      	movs	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	b006      	add	sp, #24
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	46c0      	nop			@ (mov r8, r8)
 80031b0:	fe00e800 	.word	0xfe00e800

080031b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08a      	sub	sp, #40	@ 0x28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c0:	2327      	movs	r3, #39	@ 0x27
 80031c2:	18fb      	adds	r3, r7, r3
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2210      	movs	r2, #16
 80031dc:	4013      	ands	r3, r2
 80031de:	d100      	bne.n	80031e2 <I2C_IsErrorOccurred+0x2e>
 80031e0:	e079      	b.n	80032d6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2210      	movs	r2, #16
 80031e8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031ea:	e057      	b.n	800329c <I2C_IsErrorOccurred+0xe8>
 80031ec:	2227      	movs	r2, #39	@ 0x27
 80031ee:	18bb      	adds	r3, r7, r2
 80031f0:	18ba      	adds	r2, r7, r2
 80031f2:	7812      	ldrb	r2, [r2, #0]
 80031f4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	3301      	adds	r3, #1
 80031fa:	d04f      	beq.n	800329c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031fc:	f7ff f88a 	bl	8002314 <HAL_GetTick>
 8003200:	0002      	movs	r2, r0
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	429a      	cmp	r2, r3
 800320a:	d302      	bcc.n	8003212 <I2C_IsErrorOccurred+0x5e>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d144      	bne.n	800329c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	2380      	movs	r3, #128	@ 0x80
 800321a:	01db      	lsls	r3, r3, #7
 800321c:	4013      	ands	r3, r2
 800321e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003220:	2013      	movs	r0, #19
 8003222:	183b      	adds	r3, r7, r0
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	2142      	movs	r1, #66	@ 0x42
 8003228:	5c52      	ldrb	r2, [r2, r1]
 800322a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	2380      	movs	r3, #128	@ 0x80
 8003234:	021b      	lsls	r3, r3, #8
 8003236:	401a      	ands	r2, r3
 8003238:	2380      	movs	r3, #128	@ 0x80
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	429a      	cmp	r2, r3
 800323e:	d126      	bne.n	800328e <I2C_IsErrorOccurred+0xda>
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	2380      	movs	r3, #128	@ 0x80
 8003244:	01db      	lsls	r3, r3, #7
 8003246:	429a      	cmp	r2, r3
 8003248:	d021      	beq.n	800328e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800324a:	183b      	adds	r3, r7, r0
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b20      	cmp	r3, #32
 8003250:	d01d      	beq.n	800328e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2180      	movs	r1, #128	@ 0x80
 800325e:	01c9      	lsls	r1, r1, #7
 8003260:	430a      	orrs	r2, r1
 8003262:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003264:	f7ff f856 	bl	8002314 <HAL_GetTick>
 8003268:	0003      	movs	r3, r0
 800326a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800326c:	e00f      	b.n	800328e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800326e:	f7ff f851 	bl	8002314 <HAL_GetTick>
 8003272:	0002      	movs	r2, r0
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b19      	cmp	r3, #25
 800327a:	d908      	bls.n	800328e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	2220      	movs	r2, #32
 8003280:	4313      	orrs	r3, r2
 8003282:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003284:	2327      	movs	r3, #39	@ 0x27
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	2201      	movs	r2, #1
 800328a:	701a      	strb	r2, [r3, #0]

              break;
 800328c:	e006      	b.n	800329c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2220      	movs	r2, #32
 8003296:	4013      	ands	r3, r2
 8003298:	2b20      	cmp	r3, #32
 800329a:	d1e8      	bne.n	800326e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2220      	movs	r2, #32
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	d004      	beq.n	80032b4 <I2C_IsErrorOccurred+0x100>
 80032aa:	2327      	movs	r3, #39	@ 0x27
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d09b      	beq.n	80031ec <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032b4:	2327      	movs	r3, #39	@ 0x27
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d103      	bne.n	80032c6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2220      	movs	r2, #32
 80032c4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	2204      	movs	r2, #4
 80032ca:	4313      	orrs	r3, r2
 80032cc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80032ce:	2327      	movs	r3, #39	@ 0x27
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	2380      	movs	r3, #128	@ 0x80
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	4013      	ands	r3, r2
 80032e6:	d00c      	beq.n	8003302 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	2201      	movs	r2, #1
 80032ec:	4313      	orrs	r3, r2
 80032ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2280      	movs	r2, #128	@ 0x80
 80032f6:	0052      	lsls	r2, r2, #1
 80032f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032fa:	2327      	movs	r3, #39	@ 0x27
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	2201      	movs	r2, #1
 8003300:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	2380      	movs	r3, #128	@ 0x80
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4013      	ands	r3, r2
 800330a:	d00c      	beq.n	8003326 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	2208      	movs	r2, #8
 8003310:	4313      	orrs	r3, r2
 8003312:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2280      	movs	r2, #128	@ 0x80
 800331a:	00d2      	lsls	r2, r2, #3
 800331c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800331e:	2327      	movs	r3, #39	@ 0x27
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	2201      	movs	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	2380      	movs	r3, #128	@ 0x80
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4013      	ands	r3, r2
 800332e:	d00c      	beq.n	800334a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	2202      	movs	r2, #2
 8003334:	4313      	orrs	r3, r2
 8003336:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2280      	movs	r2, #128	@ 0x80
 800333e:	0092      	lsls	r2, r2, #2
 8003340:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003342:	2327      	movs	r3, #39	@ 0x27
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800334a:	2327      	movs	r3, #39	@ 0x27
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01d      	beq.n	8003390 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	0018      	movs	r0, r3
 8003358:	f7ff fd8a 	bl	8002e70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	490e      	ldr	r1, [pc, #56]	@ (80033a0 <I2C_IsErrorOccurred+0x1ec>)
 8003368:	400a      	ands	r2, r1
 800336a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	431a      	orrs	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2241      	movs	r2, #65	@ 0x41
 800337c:	2120      	movs	r1, #32
 800337e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2242      	movs	r2, #66	@ 0x42
 8003384:	2100      	movs	r1, #0
 8003386:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2240      	movs	r2, #64	@ 0x40
 800338c:	2100      	movs	r1, #0
 800338e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003390:	2327      	movs	r3, #39	@ 0x27
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	781b      	ldrb	r3, [r3, #0]
}
 8003396:	0018      	movs	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	b00a      	add	sp, #40	@ 0x28
 800339c:	bd80      	pop	{r7, pc}
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	fe00e800 	.word	0xfe00e800

080033a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	0008      	movs	r0, r1
 80033ae:	0011      	movs	r1, r2
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	240a      	movs	r4, #10
 80033b4:	193b      	adds	r3, r7, r4
 80033b6:	1c02      	adds	r2, r0, #0
 80033b8:	801a      	strh	r2, [r3, #0]
 80033ba:	2009      	movs	r0, #9
 80033bc:	183b      	adds	r3, r7, r0
 80033be:	1c0a      	adds	r2, r1, #0
 80033c0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033c2:	193b      	adds	r3, r7, r4
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	059b      	lsls	r3, r3, #22
 80033c8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033ca:	183b      	adds	r3, r7, r0
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	0419      	lsls	r1, r3, #16
 80033d0:	23ff      	movs	r3, #255	@ 0xff
 80033d2:	041b      	lsls	r3, r3, #16
 80033d4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033d6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033de:	4313      	orrs	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033ee:	0d51      	lsrs	r1, r2, #21
 80033f0:	2280      	movs	r2, #128	@ 0x80
 80033f2:	00d2      	lsls	r2, r2, #3
 80033f4:	400a      	ands	r2, r1
 80033f6:	4907      	ldr	r1, [pc, #28]	@ (8003414 <I2C_TransferConfig+0x70>)
 80033f8:	430a      	orrs	r2, r1
 80033fa:	43d2      	mvns	r2, r2
 80033fc:	401a      	ands	r2, r3
 80033fe:	0011      	movs	r1, r2
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	46bd      	mov	sp, r7
 800340e:	b007      	add	sp, #28
 8003410:	bd90      	pop	{r4, r7, pc}
 8003412:	46c0      	nop			@ (mov r8, r8)
 8003414:	03ff63ff 	.word	0x03ff63ff

08003418 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2241      	movs	r2, #65	@ 0x41
 8003426:	5c9b      	ldrb	r3, [r3, r2]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b20      	cmp	r3, #32
 800342c:	d138      	bne.n	80034a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2240      	movs	r2, #64	@ 0x40
 8003432:	5c9b      	ldrb	r3, [r3, r2]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003438:	2302      	movs	r3, #2
 800343a:	e032      	b.n	80034a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2240      	movs	r2, #64	@ 0x40
 8003440:	2101      	movs	r1, #1
 8003442:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2241      	movs	r2, #65	@ 0x41
 8003448:	2124      	movs	r1, #36	@ 0x24
 800344a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2101      	movs	r1, #1
 8003458:	438a      	bics	r2, r1
 800345a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4911      	ldr	r1, [pc, #68]	@ (80034ac <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003468:	400a      	ands	r2, r1
 800346a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6819      	ldr	r1, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2101      	movs	r1, #1
 8003488:	430a      	orrs	r2, r1
 800348a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2241      	movs	r2, #65	@ 0x41
 8003490:	2120      	movs	r1, #32
 8003492:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2240      	movs	r2, #64	@ 0x40
 8003498:	2100      	movs	r1, #0
 800349a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	e000      	b.n	80034a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034a0:	2302      	movs	r3, #2
  }
}
 80034a2:	0018      	movs	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	b002      	add	sp, #8
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	ffffefff 	.word	0xffffefff

080034b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2241      	movs	r2, #65	@ 0x41
 80034be:	5c9b      	ldrb	r3, [r3, r2]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d139      	bne.n	800353a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2240      	movs	r2, #64	@ 0x40
 80034ca:	5c9b      	ldrb	r3, [r3, r2]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e033      	b.n	800353c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2240      	movs	r2, #64	@ 0x40
 80034d8:	2101      	movs	r1, #1
 80034da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2241      	movs	r2, #65	@ 0x41
 80034e0:	2124      	movs	r1, #36	@ 0x24
 80034e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2101      	movs	r1, #1
 80034f0:	438a      	bics	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4a11      	ldr	r2, [pc, #68]	@ (8003544 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003500:	4013      	ands	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2101      	movs	r1, #1
 8003522:	430a      	orrs	r2, r1
 8003524:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2241      	movs	r2, #65	@ 0x41
 800352a:	2120      	movs	r1, #32
 800352c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2240      	movs	r2, #64	@ 0x40
 8003532:	2100      	movs	r1, #0
 8003534:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	e000      	b.n	800353c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800353a:	2302      	movs	r3, #2
  }
}
 800353c:	0018      	movs	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	b004      	add	sp, #16
 8003542:	bd80      	pop	{r7, pc}
 8003544:	fffff0ff 	.word	0xfffff0ff

08003548 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800354c:	4b04      	ldr	r3, [pc, #16]	@ (8003560 <HAL_PWR_EnableBkUpAccess+0x18>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b03      	ldr	r3, [pc, #12]	@ (8003560 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003552:	2180      	movs	r1, #128	@ 0x80
 8003554:	0049      	lsls	r1, r1, #1
 8003556:	430a      	orrs	r2, r1
 8003558:	601a      	str	r2, [r3, #0]
}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40007000 	.word	0x40007000

08003564 <HAL_PWR_DisableBkUpAccess>:
/**
  * @brief  Disable access to the backup domain
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8003568:	4b04      	ldr	r3, [pc, #16]	@ (800357c <HAL_PWR_DisableBkUpAccess+0x18>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4b03      	ldr	r3, [pc, #12]	@ (800357c <HAL_PWR_DisableBkUpAccess+0x18>)
 800356e:	4904      	ldr	r1, [pc, #16]	@ (8003580 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8003570:	400a      	ands	r2, r1
 8003572:	601a      	str	r2, [r3, #0]
}
 8003574:	46c0      	nop			@ (mov r8, r8)
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	46c0      	nop			@ (mov r8, r8)
 800357c:	40007000 	.word	0x40007000
 8003580:	fffffeff 	.word	0xfffffeff

08003584 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800358c:	4b19      	ldr	r3, [pc, #100]	@ (80035f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a19      	ldr	r2, [pc, #100]	@ (80035f8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003592:	4013      	ands	r3, r2
 8003594:	0019      	movs	r1, r3
 8003596:	4b17      	ldr	r3, [pc, #92]	@ (80035f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	430a      	orrs	r2, r1
 800359c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	2380      	movs	r3, #128	@ 0x80
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d11f      	bne.n	80035e8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80035a8:	4b14      	ldr	r3, [pc, #80]	@ (80035fc <HAL_PWREx_ControlVoltageScaling+0x78>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	0013      	movs	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	189b      	adds	r3, r3, r2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4912      	ldr	r1, [pc, #72]	@ (8003600 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80035b6:	0018      	movs	r0, r3
 80035b8:	f7fc fda4 	bl	8000104 <__udivsi3>
 80035bc:	0003      	movs	r3, r0
 80035be:	3301      	adds	r3, #1
 80035c0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035c2:	e008      	b.n	80035d6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	e001      	b.n	80035d6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e009      	b.n	80035ea <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035d6:	4b07      	ldr	r3, [pc, #28]	@ (80035f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	2380      	movs	r3, #128	@ 0x80
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	401a      	ands	r2, r3
 80035e0:	2380      	movs	r3, #128	@ 0x80
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d0ed      	beq.n	80035c4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	0018      	movs	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b004      	add	sp, #16
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	46c0      	nop			@ (mov r8, r8)
 80035f4:	40007000 	.word	0x40007000
 80035f8:	fffff9ff 	.word	0xfffff9ff
 80035fc:	20000060 	.word	0x20000060
 8003600:	000f4240 	.word	0x000f4240

08003604 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e2fe      	b.n	8003c14 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2201      	movs	r2, #1
 800361c:	4013      	ands	r3, r2
 800361e:	d100      	bne.n	8003622 <HAL_RCC_OscConfig+0x1e>
 8003620:	e07c      	b.n	800371c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003622:	4bc3      	ldr	r3, [pc, #780]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2238      	movs	r2, #56	@ 0x38
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800362c:	4bc0      	ldr	r3, [pc, #768]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2203      	movs	r2, #3
 8003632:	4013      	ands	r3, r2
 8003634:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	2b10      	cmp	r3, #16
 800363a:	d102      	bne.n	8003642 <HAL_RCC_OscConfig+0x3e>
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	2b03      	cmp	r3, #3
 8003640:	d002      	beq.n	8003648 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d10b      	bne.n	8003660 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003648:	4bb9      	ldr	r3, [pc, #740]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	2380      	movs	r3, #128	@ 0x80
 800364e:	029b      	lsls	r3, r3, #10
 8003650:	4013      	ands	r3, r2
 8003652:	d062      	beq.n	800371a <HAL_RCC_OscConfig+0x116>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d15e      	bne.n	800371a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e2d9      	b.n	8003c14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	2380      	movs	r3, #128	@ 0x80
 8003666:	025b      	lsls	r3, r3, #9
 8003668:	429a      	cmp	r2, r3
 800366a:	d107      	bne.n	800367c <HAL_RCC_OscConfig+0x78>
 800366c:	4bb0      	ldr	r3, [pc, #704]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4baf      	ldr	r3, [pc, #700]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 8003672:	2180      	movs	r1, #128	@ 0x80
 8003674:	0249      	lsls	r1, r1, #9
 8003676:	430a      	orrs	r2, r1
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	e020      	b.n	80036be <HAL_RCC_OscConfig+0xba>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	23a0      	movs	r3, #160	@ 0xa0
 8003682:	02db      	lsls	r3, r3, #11
 8003684:	429a      	cmp	r2, r3
 8003686:	d10e      	bne.n	80036a6 <HAL_RCC_OscConfig+0xa2>
 8003688:	4ba9      	ldr	r3, [pc, #676]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4ba8      	ldr	r3, [pc, #672]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 800368e:	2180      	movs	r1, #128	@ 0x80
 8003690:	02c9      	lsls	r1, r1, #11
 8003692:	430a      	orrs	r2, r1
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	4ba6      	ldr	r3, [pc, #664]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4ba5      	ldr	r3, [pc, #660]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 800369c:	2180      	movs	r1, #128	@ 0x80
 800369e:	0249      	lsls	r1, r1, #9
 80036a0:	430a      	orrs	r2, r1
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e00b      	b.n	80036be <HAL_RCC_OscConfig+0xba>
 80036a6:	4ba2      	ldr	r3, [pc, #648]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	4ba1      	ldr	r3, [pc, #644]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 80036ac:	49a1      	ldr	r1, [pc, #644]	@ (8003934 <HAL_RCC_OscConfig+0x330>)
 80036ae:	400a      	ands	r2, r1
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	4b9f      	ldr	r3, [pc, #636]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4b9e      	ldr	r3, [pc, #632]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 80036b8:	499f      	ldr	r1, [pc, #636]	@ (8003938 <HAL_RCC_OscConfig+0x334>)
 80036ba:	400a      	ands	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d014      	beq.n	80036f0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c6:	f7fe fe25 	bl	8002314 <HAL_GetTick>
 80036ca:	0003      	movs	r3, r0
 80036cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d0:	f7fe fe20 	bl	8002314 <HAL_GetTick>
 80036d4:	0002      	movs	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	@ 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e298      	b.n	8003c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036e2:	4b93      	ldr	r3, [pc, #588]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	2380      	movs	r3, #128	@ 0x80
 80036e8:	029b      	lsls	r3, r3, #10
 80036ea:	4013      	ands	r3, r2
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0xcc>
 80036ee:	e015      	b.n	800371c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fe fe10 	bl	8002314 <HAL_GetTick>
 80036f4:	0003      	movs	r3, r0
 80036f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036fa:	f7fe fe0b 	bl	8002314 <HAL_GetTick>
 80036fe:	0002      	movs	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b64      	cmp	r3, #100	@ 0x64
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e283      	b.n	8003c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800370c:	4b88      	ldr	r3, [pc, #544]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	2380      	movs	r3, #128	@ 0x80
 8003712:	029b      	lsls	r3, r3, #10
 8003714:	4013      	ands	r3, r2
 8003716:	d1f0      	bne.n	80036fa <HAL_RCC_OscConfig+0xf6>
 8003718:	e000      	b.n	800371c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2202      	movs	r2, #2
 8003722:	4013      	ands	r3, r2
 8003724:	d100      	bne.n	8003728 <HAL_RCC_OscConfig+0x124>
 8003726:	e099      	b.n	800385c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003728:	4b81      	ldr	r3, [pc, #516]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2238      	movs	r2, #56	@ 0x38
 800372e:	4013      	ands	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003732:	4b7f      	ldr	r3, [pc, #508]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	2203      	movs	r2, #3
 8003738:	4013      	ands	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2b10      	cmp	r3, #16
 8003740:	d102      	bne.n	8003748 <HAL_RCC_OscConfig+0x144>
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d002      	beq.n	800374e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d135      	bne.n	80037ba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800374e:	4b78      	ldr	r3, [pc, #480]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	2380      	movs	r3, #128	@ 0x80
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	4013      	ands	r3, r2
 8003758:	d005      	beq.n	8003766 <HAL_RCC_OscConfig+0x162>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e256      	b.n	8003c14 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003766:	4b72      	ldr	r3, [pc, #456]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4a74      	ldr	r2, [pc, #464]	@ (800393c <HAL_RCC_OscConfig+0x338>)
 800376c:	4013      	ands	r3, r2
 800376e:	0019      	movs	r1, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	021a      	lsls	r2, r3, #8
 8003776:	4b6e      	ldr	r3, [pc, #440]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 8003778:	430a      	orrs	r2, r1
 800377a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d112      	bne.n	80037a8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003782:	4b6b      	ldr	r3, [pc, #428]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a6e      	ldr	r2, [pc, #440]	@ (8003940 <HAL_RCC_OscConfig+0x33c>)
 8003788:	4013      	ands	r3, r2
 800378a:	0019      	movs	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	4b67      	ldr	r3, [pc, #412]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 8003792:	430a      	orrs	r2, r1
 8003794:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003796:	4b66      	ldr	r3, [pc, #408]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	0adb      	lsrs	r3, r3, #11
 800379c:	2207      	movs	r2, #7
 800379e:	4013      	ands	r3, r2
 80037a0:	4a68      	ldr	r2, [pc, #416]	@ (8003944 <HAL_RCC_OscConfig+0x340>)
 80037a2:	40da      	lsrs	r2, r3
 80037a4:	4b68      	ldr	r3, [pc, #416]	@ (8003948 <HAL_RCC_OscConfig+0x344>)
 80037a6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037a8:	4b68      	ldr	r3, [pc, #416]	@ (800394c <HAL_RCC_OscConfig+0x348>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	0018      	movs	r0, r3
 80037ae:	f7fe fd55 	bl	800225c <HAL_InitTick>
 80037b2:	1e03      	subs	r3, r0, #0
 80037b4:	d051      	beq.n	800385a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e22c      	b.n	8003c14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d030      	beq.n	8003824 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80037c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003940 <HAL_RCC_OscConfig+0x33c>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	0019      	movs	r1, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	4b57      	ldr	r3, [pc, #348]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 80037d2:	430a      	orrs	r2, r1
 80037d4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80037d6:	4b56      	ldr	r3, [pc, #344]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	4b55      	ldr	r3, [pc, #340]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 80037dc:	2180      	movs	r1, #128	@ 0x80
 80037de:	0049      	lsls	r1, r1, #1
 80037e0:	430a      	orrs	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7fe fd96 	bl	8002314 <HAL_GetTick>
 80037e8:	0003      	movs	r3, r0
 80037ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ee:	f7fe fd91 	bl	8002314 <HAL_GetTick>
 80037f2:	0002      	movs	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e209      	b.n	8003c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003800:	4b4b      	ldr	r3, [pc, #300]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	2380      	movs	r3, #128	@ 0x80
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4013      	ands	r3, r2
 800380a:	d0f0      	beq.n	80037ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380c:	4b48      	ldr	r3, [pc, #288]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	4a4a      	ldr	r2, [pc, #296]	@ (800393c <HAL_RCC_OscConfig+0x338>)
 8003812:	4013      	ands	r3, r2
 8003814:	0019      	movs	r1, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	021a      	lsls	r2, r3, #8
 800381c:	4b44      	ldr	r3, [pc, #272]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	e01b      	b.n	800385c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003824:	4b42      	ldr	r3, [pc, #264]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	4b41      	ldr	r3, [pc, #260]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 800382a:	4949      	ldr	r1, [pc, #292]	@ (8003950 <HAL_RCC_OscConfig+0x34c>)
 800382c:	400a      	ands	r2, r1
 800382e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7fe fd70 	bl	8002314 <HAL_GetTick>
 8003834:	0003      	movs	r3, r0
 8003836:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800383a:	f7fe fd6b 	bl	8002314 <HAL_GetTick>
 800383e:	0002      	movs	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e1e3      	b.n	8003c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800384c:	4b38      	ldr	r3, [pc, #224]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	2380      	movs	r3, #128	@ 0x80
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4013      	ands	r3, r2
 8003856:	d1f0      	bne.n	800383a <HAL_RCC_OscConfig+0x236>
 8003858:	e000      	b.n	800385c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800385a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2208      	movs	r2, #8
 8003862:	4013      	ands	r3, r2
 8003864:	d047      	beq.n	80038f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003866:	4b32      	ldr	r3, [pc, #200]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2238      	movs	r2, #56	@ 0x38
 800386c:	4013      	ands	r3, r2
 800386e:	2b18      	cmp	r3, #24
 8003870:	d10a      	bne.n	8003888 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003872:	4b2f      	ldr	r3, [pc, #188]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 8003874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003876:	2202      	movs	r2, #2
 8003878:	4013      	ands	r3, r2
 800387a:	d03c      	beq.n	80038f6 <HAL_RCC_OscConfig+0x2f2>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d138      	bne.n	80038f6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e1c5      	b.n	8003c14 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d019      	beq.n	80038c4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003890:	4b27      	ldr	r3, [pc, #156]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 8003892:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003894:	4b26      	ldr	r3, [pc, #152]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 8003896:	2101      	movs	r1, #1
 8003898:	430a      	orrs	r2, r1
 800389a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fe fd3a 	bl	8002314 <HAL_GetTick>
 80038a0:	0003      	movs	r3, r0
 80038a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a6:	f7fe fd35 	bl	8002314 <HAL_GetTick>
 80038aa:	0002      	movs	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e1ad      	b.n	8003c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 80038ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038bc:	2202      	movs	r2, #2
 80038be:	4013      	ands	r3, r2
 80038c0:	d0f1      	beq.n	80038a6 <HAL_RCC_OscConfig+0x2a2>
 80038c2:	e018      	b.n	80038f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80038c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 80038c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038c8:	4b19      	ldr	r3, [pc, #100]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 80038ca:	2101      	movs	r1, #1
 80038cc:	438a      	bics	r2, r1
 80038ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d0:	f7fe fd20 	bl	8002314 <HAL_GetTick>
 80038d4:	0003      	movs	r3, r0
 80038d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038da:	f7fe fd1b 	bl	8002314 <HAL_GetTick>
 80038de:	0002      	movs	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e193      	b.n	8003c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038ec:	4b10      	ldr	r3, [pc, #64]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 80038ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f0:	2202      	movs	r2, #2
 80038f2:	4013      	ands	r3, r2
 80038f4:	d1f1      	bne.n	80038da <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2204      	movs	r2, #4
 80038fc:	4013      	ands	r3, r2
 80038fe:	d100      	bne.n	8003902 <HAL_RCC_OscConfig+0x2fe>
 8003900:	e0c6      	b.n	8003a90 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003902:	231f      	movs	r3, #31
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800390a:	4b09      	ldr	r3, [pc, #36]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2238      	movs	r2, #56	@ 0x38
 8003910:	4013      	ands	r3, r2
 8003912:	2b20      	cmp	r3, #32
 8003914:	d11e      	bne.n	8003954 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003916:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <HAL_RCC_OscConfig+0x32c>)
 8003918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391a:	2202      	movs	r2, #2
 800391c:	4013      	ands	r3, r2
 800391e:	d100      	bne.n	8003922 <HAL_RCC_OscConfig+0x31e>
 8003920:	e0b6      	b.n	8003a90 <HAL_RCC_OscConfig+0x48c>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d000      	beq.n	800392c <HAL_RCC_OscConfig+0x328>
 800392a:	e0b1      	b.n	8003a90 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e171      	b.n	8003c14 <HAL_RCC_OscConfig+0x610>
 8003930:	40021000 	.word	0x40021000
 8003934:	fffeffff 	.word	0xfffeffff
 8003938:	fffbffff 	.word	0xfffbffff
 800393c:	ffff80ff 	.word	0xffff80ff
 8003940:	ffffc7ff 	.word	0xffffc7ff
 8003944:	00f42400 	.word	0x00f42400
 8003948:	20000060 	.word	0x20000060
 800394c:	20000064 	.word	0x20000064
 8003950:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003954:	4bb1      	ldr	r3, [pc, #708]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003956:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003958:	2380      	movs	r3, #128	@ 0x80
 800395a:	055b      	lsls	r3, r3, #21
 800395c:	4013      	ands	r3, r2
 800395e:	d101      	bne.n	8003964 <HAL_RCC_OscConfig+0x360>
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <HAL_RCC_OscConfig+0x362>
 8003964:	2300      	movs	r3, #0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d011      	beq.n	800398e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800396a:	4bac      	ldr	r3, [pc, #688]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 800396c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800396e:	4bab      	ldr	r3, [pc, #684]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003970:	2180      	movs	r1, #128	@ 0x80
 8003972:	0549      	lsls	r1, r1, #21
 8003974:	430a      	orrs	r2, r1
 8003976:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003978:	4ba8      	ldr	r3, [pc, #672]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 800397a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800397c:	2380      	movs	r3, #128	@ 0x80
 800397e:	055b      	lsls	r3, r3, #21
 8003980:	4013      	ands	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003986:	231f      	movs	r3, #31
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	2201      	movs	r2, #1
 800398c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800398e:	4ba4      	ldr	r3, [pc, #656]	@ (8003c20 <HAL_RCC_OscConfig+0x61c>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	2380      	movs	r3, #128	@ 0x80
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	4013      	ands	r3, r2
 8003998:	d11a      	bne.n	80039d0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800399a:	4ba1      	ldr	r3, [pc, #644]	@ (8003c20 <HAL_RCC_OscConfig+0x61c>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	4ba0      	ldr	r3, [pc, #640]	@ (8003c20 <HAL_RCC_OscConfig+0x61c>)
 80039a0:	2180      	movs	r1, #128	@ 0x80
 80039a2:	0049      	lsls	r1, r1, #1
 80039a4:	430a      	orrs	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80039a8:	f7fe fcb4 	bl	8002314 <HAL_GetTick>
 80039ac:	0003      	movs	r3, r0
 80039ae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b2:	f7fe fcaf 	bl	8002314 <HAL_GetTick>
 80039b6:	0002      	movs	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e127      	b.n	8003c14 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c4:	4b96      	ldr	r3, [pc, #600]	@ (8003c20 <HAL_RCC_OscConfig+0x61c>)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	2380      	movs	r3, #128	@ 0x80
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	4013      	ands	r3, r2
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d106      	bne.n	80039e6 <HAL_RCC_OscConfig+0x3e2>
 80039d8:	4b90      	ldr	r3, [pc, #576]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 80039da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80039dc:	4b8f      	ldr	r3, [pc, #572]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 80039de:	2101      	movs	r1, #1
 80039e0:	430a      	orrs	r2, r1
 80039e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039e4:	e01c      	b.n	8003a20 <HAL_RCC_OscConfig+0x41c>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b05      	cmp	r3, #5
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x404>
 80039ee:	4b8b      	ldr	r3, [pc, #556]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 80039f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80039f2:	4b8a      	ldr	r3, [pc, #552]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 80039f4:	2104      	movs	r1, #4
 80039f6:	430a      	orrs	r2, r1
 80039f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039fa:	4b88      	ldr	r3, [pc, #544]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 80039fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80039fe:	4b87      	ldr	r3, [pc, #540]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003a00:	2101      	movs	r1, #1
 8003a02:	430a      	orrs	r2, r1
 8003a04:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a06:	e00b      	b.n	8003a20 <HAL_RCC_OscConfig+0x41c>
 8003a08:	4b84      	ldr	r3, [pc, #528]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003a0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a0c:	4b83      	ldr	r3, [pc, #524]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003a0e:	2101      	movs	r1, #1
 8003a10:	438a      	bics	r2, r1
 8003a12:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a14:	4b81      	ldr	r3, [pc, #516]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003a16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a18:	4b80      	ldr	r3, [pc, #512]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003a1a:	2104      	movs	r1, #4
 8003a1c:	438a      	bics	r2, r1
 8003a1e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d014      	beq.n	8003a52 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7fe fc74 	bl	8002314 <HAL_GetTick>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a30:	e009      	b.n	8003a46 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a32:	f7fe fc6f 	bl	8002314 <HAL_GetTick>
 8003a36:	0002      	movs	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	4a79      	ldr	r2, [pc, #484]	@ (8003c24 <HAL_RCC_OscConfig+0x620>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e0e6      	b.n	8003c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a46:	4b75      	ldr	r3, [pc, #468]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x42e>
 8003a50:	e013      	b.n	8003a7a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a52:	f7fe fc5f 	bl	8002314 <HAL_GetTick>
 8003a56:	0003      	movs	r3, r0
 8003a58:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a5a:	e009      	b.n	8003a70 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5c:	f7fe fc5a 	bl	8002314 <HAL_GetTick>
 8003a60:	0002      	movs	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	4a6f      	ldr	r2, [pc, #444]	@ (8003c24 <HAL_RCC_OscConfig+0x620>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e0d1      	b.n	8003c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a70:	4b6a      	ldr	r3, [pc, #424]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a74:	2202      	movs	r2, #2
 8003a76:	4013      	ands	r3, r2
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003a7a:	231f      	movs	r3, #31
 8003a7c:	18fb      	adds	r3, r7, r3
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d105      	bne.n	8003a90 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003a84:	4b65      	ldr	r3, [pc, #404]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003a86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a88:	4b64      	ldr	r3, [pc, #400]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003a8a:	4967      	ldr	r1, [pc, #412]	@ (8003c28 <HAL_RCC_OscConfig+0x624>)
 8003a8c:	400a      	ands	r2, r1
 8003a8e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d100      	bne.n	8003a9a <HAL_RCC_OscConfig+0x496>
 8003a98:	e0bb      	b.n	8003c12 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a9a:	4b60      	ldr	r3, [pc, #384]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2238      	movs	r2, #56	@ 0x38
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2b10      	cmp	r3, #16
 8003aa4:	d100      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x4a4>
 8003aa6:	e07b      	b.n	8003ba0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d156      	bne.n	8003b5e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab0:	4b5a      	ldr	r3, [pc, #360]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	4b59      	ldr	r3, [pc, #356]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003ab6:	495d      	ldr	r1, [pc, #372]	@ (8003c2c <HAL_RCC_OscConfig+0x628>)
 8003ab8:	400a      	ands	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fe fc2a 	bl	8002314 <HAL_GetTick>
 8003ac0:	0003      	movs	r3, r0
 8003ac2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac6:	f7fe fc25 	bl	8002314 <HAL_GetTick>
 8003aca:	0002      	movs	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e09d      	b.n	8003c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad8:	4b50      	ldr	r3, [pc, #320]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	2380      	movs	r3, #128	@ 0x80
 8003ade:	049b      	lsls	r3, r3, #18
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d1f0      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ae4:	4b4d      	ldr	r3, [pc, #308]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4a51      	ldr	r2, [pc, #324]	@ (8003c30 <HAL_RCC_OscConfig+0x62c>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	0019      	movs	r1, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1a      	ldr	r2, [r3, #32]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003afc:	021b      	lsls	r3, r3, #8
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b10:	431a      	orrs	r2, r3
 8003b12:	4b42      	ldr	r3, [pc, #264]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003b14:	430a      	orrs	r2, r1
 8003b16:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b18:	4b40      	ldr	r3, [pc, #256]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	4b3f      	ldr	r3, [pc, #252]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003b1e:	2180      	movs	r1, #128	@ 0x80
 8003b20:	0449      	lsls	r1, r1, #17
 8003b22:	430a      	orrs	r2, r1
 8003b24:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003b26:	4b3d      	ldr	r3, [pc, #244]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	4b3c      	ldr	r3, [pc, #240]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003b2c:	2180      	movs	r1, #128	@ 0x80
 8003b2e:	0549      	lsls	r1, r1, #21
 8003b30:	430a      	orrs	r2, r1
 8003b32:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b34:	f7fe fbee 	bl	8002314 <HAL_GetTick>
 8003b38:	0003      	movs	r3, r0
 8003b3a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b3e:	f7fe fbe9 	bl	8002314 <HAL_GetTick>
 8003b42:	0002      	movs	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e061      	b.n	8003c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b50:	4b32      	ldr	r3, [pc, #200]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	2380      	movs	r3, #128	@ 0x80
 8003b56:	049b      	lsls	r3, r3, #18
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x53a>
 8003b5c:	e059      	b.n	8003c12 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4b2e      	ldr	r3, [pc, #184]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003b64:	4931      	ldr	r1, [pc, #196]	@ (8003c2c <HAL_RCC_OscConfig+0x628>)
 8003b66:	400a      	ands	r2, r1
 8003b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6a:	f7fe fbd3 	bl	8002314 <HAL_GetTick>
 8003b6e:	0003      	movs	r3, r0
 8003b70:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b74:	f7fe fbce 	bl	8002314 <HAL_GetTick>
 8003b78:	0002      	movs	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e046      	b.n	8003c14 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b86:	4b25      	ldr	r3, [pc, #148]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	2380      	movs	r3, #128	@ 0x80
 8003b8c:	049b      	lsls	r3, r3, #18
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003b92:	4b22      	ldr	r3, [pc, #136]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	4b21      	ldr	r3, [pc, #132]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003b98:	4926      	ldr	r1, [pc, #152]	@ (8003c34 <HAL_RCC_OscConfig+0x630>)
 8003b9a:	400a      	ands	r2, r1
 8003b9c:	60da      	str	r2, [r3, #12]
 8003b9e:	e038      	b.n	8003c12 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e033      	b.n	8003c14 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003bac:	4b1b      	ldr	r3, [pc, #108]	@ (8003c1c <HAL_RCC_OscConfig+0x618>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	401a      	ands	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d126      	bne.n	8003c0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2270      	movs	r2, #112	@ 0x70
 8003bc4:	401a      	ands	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d11f      	bne.n	8003c0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	23fe      	movs	r3, #254	@ 0xfe
 8003bd2:	01db      	lsls	r3, r3, #7
 8003bd4:	401a      	ands	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bda:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d116      	bne.n	8003c0e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	23f8      	movs	r3, #248	@ 0xf8
 8003be4:	039b      	lsls	r3, r3, #14
 8003be6:	401a      	ands	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d10e      	bne.n	8003c0e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	23e0      	movs	r3, #224	@ 0xe0
 8003bf4:	051b      	lsls	r3, r3, #20
 8003bf6:	401a      	ands	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d106      	bne.n	8003c0e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	0f5b      	lsrs	r3, r3, #29
 8003c04:	075a      	lsls	r2, r3, #29
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d001      	beq.n	8003c12 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	0018      	movs	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b008      	add	sp, #32
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	40007000 	.word	0x40007000
 8003c24:	00001388 	.word	0x00001388
 8003c28:	efffffff 	.word	0xefffffff
 8003c2c:	feffffff 	.word	0xfeffffff
 8003c30:	11c1808c 	.word	0x11c1808c
 8003c34:	eefefffc 	.word	0xeefefffc

08003c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0e9      	b.n	8003e20 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c4c:	4b76      	ldr	r3, [pc, #472]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2207      	movs	r2, #7
 8003c52:	4013      	ands	r3, r2
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d91e      	bls.n	8003c98 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	4b73      	ldr	r3, [pc, #460]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2207      	movs	r2, #7
 8003c60:	4393      	bics	r3, r2
 8003c62:	0019      	movs	r1, r3
 8003c64:	4b70      	ldr	r3, [pc, #448]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c6c:	f7fe fb52 	bl	8002314 <HAL_GetTick>
 8003c70:	0003      	movs	r3, r0
 8003c72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c74:	e009      	b.n	8003c8a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c76:	f7fe fb4d 	bl	8002314 <HAL_GetTick>
 8003c7a:	0002      	movs	r2, r0
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	4a6a      	ldr	r2, [pc, #424]	@ (8003e2c <HAL_RCC_ClockConfig+0x1f4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e0ca      	b.n	8003e20 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c8a:	4b67      	ldr	r3, [pc, #412]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2207      	movs	r2, #7
 8003c90:	4013      	ands	r3, r2
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d1ee      	bne.n	8003c76 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d015      	beq.n	8003cce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2204      	movs	r2, #4
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d006      	beq.n	8003cba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003cac:	4b60      	ldr	r3, [pc, #384]	@ (8003e30 <HAL_RCC_ClockConfig+0x1f8>)
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	4b5f      	ldr	r3, [pc, #380]	@ (8003e30 <HAL_RCC_ClockConfig+0x1f8>)
 8003cb2:	21e0      	movs	r1, #224	@ 0xe0
 8003cb4:	01c9      	lsls	r1, r1, #7
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cba:	4b5d      	ldr	r3, [pc, #372]	@ (8003e30 <HAL_RCC_ClockConfig+0x1f8>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	4a5d      	ldr	r2, [pc, #372]	@ (8003e34 <HAL_RCC_ClockConfig+0x1fc>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	4b59      	ldr	r3, [pc, #356]	@ (8003e30 <HAL_RCC_ClockConfig+0x1f8>)
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d057      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d107      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ce0:	4b53      	ldr	r3, [pc, #332]	@ (8003e30 <HAL_RCC_ClockConfig+0x1f8>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	2380      	movs	r3, #128	@ 0x80
 8003ce6:	029b      	lsls	r3, r3, #10
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d12b      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e097      	b.n	8003e20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d107      	bne.n	8003d08 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf8:	4b4d      	ldr	r3, [pc, #308]	@ (8003e30 <HAL_RCC_ClockConfig+0x1f8>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	2380      	movs	r3, #128	@ 0x80
 8003cfe:	049b      	lsls	r3, r3, #18
 8003d00:	4013      	ands	r3, r2
 8003d02:	d11f      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e08b      	b.n	8003e20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d107      	bne.n	8003d20 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d10:	4b47      	ldr	r3, [pc, #284]	@ (8003e30 <HAL_RCC_ClockConfig+0x1f8>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	2380      	movs	r3, #128	@ 0x80
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d113      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e07f      	b.n	8003e20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d106      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d28:	4b41      	ldr	r3, [pc, #260]	@ (8003e30 <HAL_RCC_ClockConfig+0x1f8>)
 8003d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d108      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e074      	b.n	8003e20 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d36:	4b3e      	ldr	r3, [pc, #248]	@ (8003e30 <HAL_RCC_ClockConfig+0x1f8>)
 8003d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e06d      	b.n	8003e20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d44:	4b3a      	ldr	r3, [pc, #232]	@ (8003e30 <HAL_RCC_ClockConfig+0x1f8>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2207      	movs	r2, #7
 8003d4a:	4393      	bics	r3, r2
 8003d4c:	0019      	movs	r1, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	4b37      	ldr	r3, [pc, #220]	@ (8003e30 <HAL_RCC_ClockConfig+0x1f8>)
 8003d54:	430a      	orrs	r2, r1
 8003d56:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d58:	f7fe fadc 	bl	8002314 <HAL_GetTick>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d60:	e009      	b.n	8003d76 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d62:	f7fe fad7 	bl	8002314 <HAL_GetTick>
 8003d66:	0002      	movs	r2, r0
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	4a2f      	ldr	r2, [pc, #188]	@ (8003e2c <HAL_RCC_ClockConfig+0x1f4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e054      	b.n	8003e20 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	4b2e      	ldr	r3, [pc, #184]	@ (8003e30 <HAL_RCC_ClockConfig+0x1f8>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2238      	movs	r2, #56	@ 0x38
 8003d7c:	401a      	ands	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d1ec      	bne.n	8003d62 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d88:	4b27      	ldr	r3, [pc, #156]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	4013      	ands	r3, r2
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d21e      	bcs.n	8003dd4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d96:	4b24      	ldr	r3, [pc, #144]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2207      	movs	r2, #7
 8003d9c:	4393      	bics	r3, r2
 8003d9e:	0019      	movs	r1, r3
 8003da0:	4b21      	ldr	r3, [pc, #132]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003da8:	f7fe fab4 	bl	8002314 <HAL_GetTick>
 8003dac:	0003      	movs	r3, r0
 8003dae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003db0:	e009      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db2:	f7fe faaf 	bl	8002314 <HAL_GetTick>
 8003db6:	0002      	movs	r2, r0
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8003e2c <HAL_RCC_ClockConfig+0x1f4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e02c      	b.n	8003e20 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003dc6:	4b18      	ldr	r3, [pc, #96]	@ (8003e28 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2207      	movs	r2, #7
 8003dcc:	4013      	ands	r3, r2
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d1ee      	bne.n	8003db2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2204      	movs	r2, #4
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d009      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003dde:	4b14      	ldr	r3, [pc, #80]	@ (8003e30 <HAL_RCC_ClockConfig+0x1f8>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	4a15      	ldr	r2, [pc, #84]	@ (8003e38 <HAL_RCC_ClockConfig+0x200>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	0019      	movs	r1, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	4b10      	ldr	r3, [pc, #64]	@ (8003e30 <HAL_RCC_ClockConfig+0x1f8>)
 8003dee:	430a      	orrs	r2, r1
 8003df0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003df2:	f000 f829 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 8003df6:	0001      	movs	r1, r0
 8003df8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e30 <HAL_RCC_ClockConfig+0x1f8>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	0a1b      	lsrs	r3, r3, #8
 8003dfe:	220f      	movs	r2, #15
 8003e00:	401a      	ands	r2, r3
 8003e02:	4b0e      	ldr	r3, [pc, #56]	@ (8003e3c <HAL_RCC_ClockConfig+0x204>)
 8003e04:	0092      	lsls	r2, r2, #2
 8003e06:	58d3      	ldr	r3, [r2, r3]
 8003e08:	221f      	movs	r2, #31
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	000a      	movs	r2, r1
 8003e0e:	40da      	lsrs	r2, r3
 8003e10:	4b0b      	ldr	r3, [pc, #44]	@ (8003e40 <HAL_RCC_ClockConfig+0x208>)
 8003e12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e14:	4b0b      	ldr	r3, [pc, #44]	@ (8003e44 <HAL_RCC_ClockConfig+0x20c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f7fe fa1f 	bl	800225c <HAL_InitTick>
 8003e1e:	0003      	movs	r3, r0
}
 8003e20:	0018      	movs	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b004      	add	sp, #16
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40022000 	.word	0x40022000
 8003e2c:	00001388 	.word	0x00001388
 8003e30:	40021000 	.word	0x40021000
 8003e34:	fffff0ff 	.word	0xfffff0ff
 8003e38:	ffff8fff 	.word	0xffff8fff
 8003e3c:	08006120 	.word	0x08006120
 8003e40:	20000060 	.word	0x20000060
 8003e44:	20000064 	.word	0x20000064

08003e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e4e:	4b3c      	ldr	r3, [pc, #240]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2238      	movs	r2, #56	@ 0x38
 8003e54:	4013      	ands	r3, r2
 8003e56:	d10f      	bne.n	8003e78 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003e58:	4b39      	ldr	r3, [pc, #228]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	0adb      	lsrs	r3, r3, #11
 8003e5e:	2207      	movs	r2, #7
 8003e60:	4013      	ands	r3, r2
 8003e62:	2201      	movs	r2, #1
 8003e64:	409a      	lsls	r2, r3
 8003e66:	0013      	movs	r3, r2
 8003e68:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003e6a:	6839      	ldr	r1, [r7, #0]
 8003e6c:	4835      	ldr	r0, [pc, #212]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003e6e:	f7fc f949 	bl	8000104 <__udivsi3>
 8003e72:	0003      	movs	r3, r0
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	e05d      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e78:	4b31      	ldr	r3, [pc, #196]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2238      	movs	r2, #56	@ 0x38
 8003e7e:	4013      	ands	r3, r2
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d102      	bne.n	8003e8a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e84:	4b30      	ldr	r3, [pc, #192]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x100>)
 8003e86:	613b      	str	r3, [r7, #16]
 8003e88:	e054      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2238      	movs	r2, #56	@ 0x38
 8003e90:	4013      	ands	r3, r2
 8003e92:	2b10      	cmp	r3, #16
 8003e94:	d138      	bne.n	8003f08 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003e96:	4b2a      	ldr	r3, [pc, #168]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	2203      	movs	r2, #3
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ea0:	4b27      	ldr	r3, [pc, #156]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	2207      	movs	r2, #7
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	3301      	adds	r3, #1
 8003eac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	d10d      	bne.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	4824      	ldr	r0, [pc, #144]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x100>)
 8003eb8:	f7fc f924 	bl	8000104 <__udivsi3>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	0019      	movs	r1, r3
 8003ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	0a1b      	lsrs	r3, r3, #8
 8003ec6:	227f      	movs	r2, #127	@ 0x7f
 8003ec8:	4013      	ands	r3, r2
 8003eca:	434b      	muls	r3, r1
 8003ecc:	617b      	str	r3, [r7, #20]
        break;
 8003ece:	e00d      	b.n	8003eec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	481c      	ldr	r0, [pc, #112]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003ed4:	f7fc f916 	bl	8000104 <__udivsi3>
 8003ed8:	0003      	movs	r3, r0
 8003eda:	0019      	movs	r1, r3
 8003edc:	4b18      	ldr	r3, [pc, #96]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	0a1b      	lsrs	r3, r3, #8
 8003ee2:	227f      	movs	r2, #127	@ 0x7f
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	434b      	muls	r3, r1
 8003ee8:	617b      	str	r3, [r7, #20]
        break;
 8003eea:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003eec:	4b14      	ldr	r3, [pc, #80]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	0f5b      	lsrs	r3, r3, #29
 8003ef2:	2207      	movs	r2, #7
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	6978      	ldr	r0, [r7, #20]
 8003efe:	f7fc f901 	bl	8000104 <__udivsi3>
 8003f02:	0003      	movs	r3, r0
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	e015      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f08:	4b0d      	ldr	r3, [pc, #52]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2238      	movs	r2, #56	@ 0x38
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	d103      	bne.n	8003f1c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003f14:	2380      	movs	r3, #128	@ 0x80
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	e00b      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003f1c:	4b08      	ldr	r3, [pc, #32]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2238      	movs	r2, #56	@ 0x38
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b18      	cmp	r3, #24
 8003f26:	d103      	bne.n	8003f30 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003f28:	23fa      	movs	r3, #250	@ 0xfa
 8003f2a:	01db      	lsls	r3, r3, #7
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	e001      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f34:	693b      	ldr	r3, [r7, #16]
}
 8003f36:	0018      	movs	r0, r3
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b006      	add	sp, #24
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	46c0      	nop			@ (mov r8, r8)
 8003f40:	40021000 	.word	0x40021000
 8003f44:	00f42400 	.word	0x00f42400
 8003f48:	007a1200 	.word	0x007a1200

08003f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003f54:	2313      	movs	r3, #19
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f5c:	2312      	movs	r3, #18
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	2200      	movs	r2, #0
 8003f62:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	2380      	movs	r3, #128	@ 0x80
 8003f6a:	029b      	lsls	r3, r3, #10
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d100      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003f70:	e0a3      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f72:	2011      	movs	r0, #17
 8003f74:	183b      	adds	r3, r7, r0
 8003f76:	2200      	movs	r2, #0
 8003f78:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7a:	4ba5      	ldr	r3, [pc, #660]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f7e:	2380      	movs	r3, #128	@ 0x80
 8003f80:	055b      	lsls	r3, r3, #21
 8003f82:	4013      	ands	r3, r2
 8003f84:	d110      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f86:	4ba2      	ldr	r3, [pc, #648]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f8a:	4ba1      	ldr	r3, [pc, #644]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f8c:	2180      	movs	r1, #128	@ 0x80
 8003f8e:	0549      	lsls	r1, r1, #21
 8003f90:	430a      	orrs	r2, r1
 8003f92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f94:	4b9e      	ldr	r3, [pc, #632]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f98:	2380      	movs	r3, #128	@ 0x80
 8003f9a:	055b      	lsls	r3, r3, #21
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa2:	183b      	adds	r3, r7, r0
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fa8:	4b9a      	ldr	r3, [pc, #616]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	4b99      	ldr	r3, [pc, #612]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003fae:	2180      	movs	r1, #128	@ 0x80
 8003fb0:	0049      	lsls	r1, r1, #1
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fb6:	f7fe f9ad 	bl	8002314 <HAL_GetTick>
 8003fba:	0003      	movs	r3, r0
 8003fbc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fbe:	e00b      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc0:	f7fe f9a8 	bl	8002314 <HAL_GetTick>
 8003fc4:	0002      	movs	r2, r0
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d904      	bls.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003fce:	2313      	movs	r3, #19
 8003fd0:	18fb      	adds	r3, r7, r3
 8003fd2:	2203      	movs	r2, #3
 8003fd4:	701a      	strb	r2, [r3, #0]
        break;
 8003fd6:	e005      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fd8:	4b8e      	ldr	r3, [pc, #568]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	2380      	movs	r3, #128	@ 0x80
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d0ed      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003fe4:	2313      	movs	r3, #19
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d154      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fee:	4b88      	ldr	r3, [pc, #544]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ff0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ff2:	23c0      	movs	r3, #192	@ 0xc0
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d019      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	429a      	cmp	r2, r3
 8004008:	d014      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800400a:	4b81      	ldr	r3, [pc, #516]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800400c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400e:	4a82      	ldr	r2, [pc, #520]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004010:	4013      	ands	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004014:	4b7e      	ldr	r3, [pc, #504]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004016:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004018:	4b7d      	ldr	r3, [pc, #500]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800401a:	2180      	movs	r1, #128	@ 0x80
 800401c:	0249      	lsls	r1, r1, #9
 800401e:	430a      	orrs	r2, r1
 8004020:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004022:	4b7b      	ldr	r3, [pc, #492]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004024:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004026:	4b7a      	ldr	r3, [pc, #488]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004028:	497c      	ldr	r1, [pc, #496]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800402a:	400a      	ands	r2, r1
 800402c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800402e:	4b78      	ldr	r3, [pc, #480]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2201      	movs	r2, #1
 8004038:	4013      	ands	r3, r2
 800403a:	d016      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fe f96a 	bl	8002314 <HAL_GetTick>
 8004040:	0003      	movs	r3, r0
 8004042:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004044:	e00c      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004046:	f7fe f965 	bl	8002314 <HAL_GetTick>
 800404a:	0002      	movs	r2, r0
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	4a73      	ldr	r2, [pc, #460]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d904      	bls.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004056:	2313      	movs	r3, #19
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	2203      	movs	r2, #3
 800405c:	701a      	strb	r2, [r3, #0]
            break;
 800405e:	e004      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004060:	4b6b      	ldr	r3, [pc, #428]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004064:	2202      	movs	r2, #2
 8004066:	4013      	ands	r3, r2
 8004068:	d0ed      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800406a:	2313      	movs	r3, #19
 800406c:	18fb      	adds	r3, r7, r3
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10a      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004074:	4b66      	ldr	r3, [pc, #408]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004078:	4a67      	ldr	r2, [pc, #412]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800407a:	4013      	ands	r3, r2
 800407c:	0019      	movs	r1, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004082:	4b63      	ldr	r3, [pc, #396]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004084:	430a      	orrs	r2, r1
 8004086:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004088:	e00c      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800408a:	2312      	movs	r3, #18
 800408c:	18fb      	adds	r3, r7, r3
 800408e:	2213      	movs	r2, #19
 8004090:	18ba      	adds	r2, r7, r2
 8004092:	7812      	ldrb	r2, [r2, #0]
 8004094:	701a      	strb	r2, [r3, #0]
 8004096:	e005      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004098:	2312      	movs	r3, #18
 800409a:	18fb      	adds	r3, r7, r3
 800409c:	2213      	movs	r2, #19
 800409e:	18ba      	adds	r2, r7, r2
 80040a0:	7812      	ldrb	r2, [r2, #0]
 80040a2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040a4:	2311      	movs	r3, #17
 80040a6:	18fb      	adds	r3, r7, r3
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d105      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ae:	4b58      	ldr	r3, [pc, #352]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040b2:	4b57      	ldr	r3, [pc, #348]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040b4:	495b      	ldr	r1, [pc, #364]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80040b6:	400a      	ands	r2, r1
 80040b8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2201      	movs	r2, #1
 80040c0:	4013      	ands	r3, r2
 80040c2:	d009      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040c4:	4b52      	ldr	r3, [pc, #328]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c8:	2203      	movs	r2, #3
 80040ca:	4393      	bics	r3, r2
 80040cc:	0019      	movs	r1, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	4b4f      	ldr	r3, [pc, #316]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040d4:	430a      	orrs	r2, r1
 80040d6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2210      	movs	r2, #16
 80040de:	4013      	ands	r3, r2
 80040e0:	d009      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040e2:	4b4b      	ldr	r3, [pc, #300]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e6:	4a50      	ldr	r2, [pc, #320]	@ (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	0019      	movs	r1, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	4b47      	ldr	r3, [pc, #284]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040f2:	430a      	orrs	r2, r1
 80040f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	2380      	movs	r3, #128	@ 0x80
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4013      	ands	r3, r2
 8004100:	d009      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004102:	4b43      	ldr	r3, [pc, #268]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004106:	4a49      	ldr	r2, [pc, #292]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004108:	4013      	ands	r3, r2
 800410a:	0019      	movs	r1, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	4b3f      	ldr	r3, [pc, #252]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004112:	430a      	orrs	r2, r1
 8004114:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	2380      	movs	r3, #128	@ 0x80
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	4013      	ands	r3, r2
 8004120:	d009      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004122:	4b3b      	ldr	r3, [pc, #236]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004126:	4a42      	ldr	r2, [pc, #264]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004128:	4013      	ands	r3, r2
 800412a:	0019      	movs	r1, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699a      	ldr	r2, [r3, #24]
 8004130:	4b37      	ldr	r3, [pc, #220]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004132:	430a      	orrs	r2, r1
 8004134:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2220      	movs	r2, #32
 800413c:	4013      	ands	r3, r2
 800413e:	d009      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004140:	4b33      	ldr	r3, [pc, #204]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004144:	4a3b      	ldr	r2, [pc, #236]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004146:	4013      	ands	r3, r2
 8004148:	0019      	movs	r1, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	4b30      	ldr	r3, [pc, #192]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004150:	430a      	orrs	r2, r1
 8004152:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	2380      	movs	r3, #128	@ 0x80
 800415a:	01db      	lsls	r3, r3, #7
 800415c:	4013      	ands	r3, r2
 800415e:	d015      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004160:	4b2b      	ldr	r3, [pc, #172]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	0899      	lsrs	r1, r3, #2
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	69da      	ldr	r2, [r3, #28]
 800416c:	4b28      	ldr	r3, [pc, #160]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800416e:	430a      	orrs	r2, r1
 8004170:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69da      	ldr	r2, [r3, #28]
 8004176:	2380      	movs	r3, #128	@ 0x80
 8004178:	05db      	lsls	r3, r3, #23
 800417a:	429a      	cmp	r2, r3
 800417c:	d106      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800417e:	4b24      	ldr	r3, [pc, #144]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	4b23      	ldr	r3, [pc, #140]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004184:	2180      	movs	r1, #128	@ 0x80
 8004186:	0249      	lsls	r1, r1, #9
 8004188:	430a      	orrs	r2, r1
 800418a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	2380      	movs	r3, #128	@ 0x80
 8004192:	039b      	lsls	r3, r3, #14
 8004194:	4013      	ands	r3, r2
 8004196:	d016      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004198:	4b1d      	ldr	r3, [pc, #116]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800419a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800419c:	4a26      	ldr	r2, [pc, #152]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800419e:	4013      	ands	r3, r2
 80041a0:	0019      	movs	r1, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1a      	ldr	r2, [r3, #32]
 80041a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041a8:	430a      	orrs	r2, r1
 80041aa:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a1a      	ldr	r2, [r3, #32]
 80041b0:	2380      	movs	r3, #128	@ 0x80
 80041b2:	03db      	lsls	r3, r3, #15
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d106      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80041b8:	4b15      	ldr	r3, [pc, #84]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	4b14      	ldr	r3, [pc, #80]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041be:	2180      	movs	r1, #128	@ 0x80
 80041c0:	0449      	lsls	r1, r1, #17
 80041c2:	430a      	orrs	r2, r1
 80041c4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	2380      	movs	r3, #128	@ 0x80
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	4013      	ands	r3, r2
 80041d0:	d016      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80041d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d6:	4a19      	ldr	r2, [pc, #100]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041d8:	4013      	ands	r3, r2
 80041da:	0019      	movs	r1, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041e2:	430a      	orrs	r2, r1
 80041e4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	2380      	movs	r3, #128	@ 0x80
 80041ec:	01db      	lsls	r3, r3, #7
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d106      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80041f2:	4b07      	ldr	r3, [pc, #28]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041f8:	2180      	movs	r1, #128	@ 0x80
 80041fa:	0249      	lsls	r1, r1, #9
 80041fc:	430a      	orrs	r2, r1
 80041fe:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004200:	2312      	movs	r3, #18
 8004202:	18fb      	adds	r3, r7, r3
 8004204:	781b      	ldrb	r3, [r3, #0]
}
 8004206:	0018      	movs	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	b006      	add	sp, #24
 800420c:	bd80      	pop	{r7, pc}
 800420e:	46c0      	nop			@ (mov r8, r8)
 8004210:	40021000 	.word	0x40021000
 8004214:	40007000 	.word	0x40007000
 8004218:	fffffcff 	.word	0xfffffcff
 800421c:	fffeffff 	.word	0xfffeffff
 8004220:	00001388 	.word	0x00001388
 8004224:	efffffff 	.word	0xefffffff
 8004228:	fffff3ff 	.word	0xfffff3ff
 800422c:	fff3ffff 	.word	0xfff3ffff
 8004230:	ffcfffff 	.word	0xffcfffff
 8004234:	ffffcfff 	.word	0xffffcfff
 8004238:	ffbfffff 	.word	0xffbfffff
 800423c:	ffff3fff 	.word	0xffff3fff

08004240 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8004240:	b590      	push	{r4, r7, lr}
 8004242:	b08b      	sub	sp, #44	@ 0x2c
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8004248:	2427      	movs	r4, #39	@ 0x27
 800424a:	193b      	adds	r3, r7, r4
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]
  FlagStatus       backupchanged = RESET;
 8004250:	2326      	movs	r3, #38	@ 0x26
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	2200      	movs	r2, #0
 8004256:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 8004258:	4b31      	ldr	r3, [pc, #196]	@ (8004320 <HAL_RCCEx_EnableLSCO+0xe0>)
 800425a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800425c:	4b30      	ldr	r3, [pc, #192]	@ (8004320 <HAL_RCCEx_EnableLSCO+0xe0>)
 800425e:	2101      	movs	r1, #1
 8004260:	430a      	orrs	r2, r1
 8004262:	635a      	str	r2, [r3, #52]	@ 0x34
 8004264:	4b2e      	ldr	r3, [pc, #184]	@ (8004320 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004268:	2201      	movs	r2, #1
 800426a:	4013      	ands	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 8004270:	2110      	movs	r1, #16
 8004272:	187b      	adds	r3, r7, r1
 8004274:	2204      	movs	r2, #4
 8004276:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004278:	187b      	adds	r3, r7, r1
 800427a:	2203      	movs	r2, #3
 800427c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800427e:	187b      	adds	r3, r7, r1
 8004280:	2203      	movs	r2, #3
 8004282:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004284:	187b      	adds	r3, r7, r1
 8004286:	2200      	movs	r2, #0
 8004288:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 800428a:	187a      	adds	r2, r7, r1
 800428c:	23a0      	movs	r3, #160	@ 0xa0
 800428e:	05db      	lsls	r3, r3, #23
 8004290:	0011      	movs	r1, r2
 8004292:	0018      	movs	r0, r3
 8004294:	f7fe f926 	bl	80024e4 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004298:	4b21      	ldr	r3, [pc, #132]	@ (8004320 <HAL_RCCEx_EnableLSCO+0xe0>)
 800429a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800429c:	2380      	movs	r3, #128	@ 0x80
 800429e:	055b      	lsls	r3, r3, #21
 80042a0:	4013      	ands	r3, r2
 80042a2:	d110      	bne.n	80042c6 <HAL_RCCEx_EnableLSCO+0x86>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004320 <HAL_RCCEx_EnableLSCO+0xe0>)
 80042a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004320 <HAL_RCCEx_EnableLSCO+0xe0>)
 80042aa:	2180      	movs	r1, #128	@ 0x80
 80042ac:	0549      	lsls	r1, r1, #21
 80042ae:	430a      	orrs	r2, r1
 80042b0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80042b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004320 <HAL_RCCEx_EnableLSCO+0xe0>)
 80042b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042b6:	2380      	movs	r3, #128	@ 0x80
 80042b8:	055b      	lsls	r3, r3, #21
 80042ba:	4013      	ands	r3, r2
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	2201      	movs	r2, #1
 80042c4:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042c6:	4b17      	ldr	r3, [pc, #92]	@ (8004324 <HAL_RCCEx_EnableLSCO+0xe4>)
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	2380      	movs	r3, #128	@ 0x80
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	4013      	ands	r3, r2
 80042d0:	d105      	bne.n	80042de <HAL_RCCEx_EnableLSCO+0x9e>
  {
    HAL_PWR_EnableBkUpAccess();
 80042d2:	f7ff f939 	bl	8003548 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 80042d6:	2326      	movs	r3, #38	@ 0x26
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	2201      	movs	r2, #1
 80042dc:	701a      	strb	r2, [r3, #0]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 80042de:	4b10      	ldr	r3, [pc, #64]	@ (8004320 <HAL_RCCEx_EnableLSCO+0xe0>)
 80042e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e2:	4a11      	ldr	r2, [pc, #68]	@ (8004328 <HAL_RCCEx_EnableLSCO+0xe8>)
 80042e4:	401a      	ands	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	431a      	orrs	r2, r3
 80042ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004320 <HAL_RCCEx_EnableLSCO+0xe0>)
 80042ec:	2180      	movs	r1, #128	@ 0x80
 80042ee:	0449      	lsls	r1, r1, #17
 80042f0:	430a      	orrs	r2, r1
 80042f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (backupchanged == SET)
 80042f4:	2326      	movs	r3, #38	@ 0x26
 80042f6:	18fb      	adds	r3, r7, r3
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_RCCEx_EnableLSCO+0xc2>
  {
    HAL_PWR_DisableBkUpAccess();
 80042fe:	f7ff f931 	bl	8003564 <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 8004302:	2327      	movs	r3, #39	@ 0x27
 8004304:	18fb      	adds	r3, r7, r3
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d105      	bne.n	8004318 <HAL_RCCEx_EnableLSCO+0xd8>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 800430c:	4b04      	ldr	r3, [pc, #16]	@ (8004320 <HAL_RCCEx_EnableLSCO+0xe0>)
 800430e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004310:	4b03      	ldr	r3, [pc, #12]	@ (8004320 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004312:	4906      	ldr	r1, [pc, #24]	@ (800432c <HAL_RCCEx_EnableLSCO+0xec>)
 8004314:	400a      	ands	r2, r1
 8004316:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8004318:	46c0      	nop			@ (mov r8, r8)
 800431a:	46bd      	mov	sp, r7
 800431c:	b00b      	add	sp, #44	@ 0x2c
 800431e:	bd90      	pop	{r4, r7, pc}
 8004320:	40021000 	.word	0x40021000
 8004324:	40007000 	.word	0x40007000
 8004328:	fcffffff 	.word	0xfcffffff
 800432c:	efffffff 	.word	0xefffffff

08004330 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004330:	b5b0      	push	{r4, r5, r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004338:	230f      	movs	r3, #15
 800433a:	18fb      	adds	r3, r7, r3
 800433c:	2201      	movs	r2, #1
 800433e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d100      	bne.n	8004348 <HAL_RTC_Init+0x18>
 8004346:	e08c      	b.n	8004462 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2229      	movs	r2, #41	@ 0x29
 800434c:	5c9b      	ldrb	r3, [r3, r2]
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10b      	bne.n	800436c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2228      	movs	r2, #40	@ 0x28
 8004358:	2100      	movs	r1, #0
 800435a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2288      	movs	r2, #136	@ 0x88
 8004360:	0212      	lsls	r2, r2, #8
 8004362:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	0018      	movs	r0, r3
 8004368:	f7fd fdf4 	bl	8001f54 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2229      	movs	r2, #41	@ 0x29
 8004370:	2102      	movs	r1, #2
 8004372:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2210      	movs	r2, #16
 800437c:	4013      	ands	r3, r2
 800437e:	2b10      	cmp	r3, #16
 8004380:	d062      	beq.n	8004448 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	22ca      	movs	r2, #202	@ 0xca
 8004388:	625a      	str	r2, [r3, #36]	@ 0x24
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2253      	movs	r2, #83	@ 0x53
 8004390:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004392:	250f      	movs	r5, #15
 8004394:	197c      	adds	r4, r7, r5
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	0018      	movs	r0, r3
 800439a:	f000 fcb9 	bl	8004d10 <RTC_EnterInitMode>
 800439e:	0003      	movs	r3, r0
 80043a0:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80043a2:	0028      	movs	r0, r5
 80043a4:	183b      	adds	r3, r7, r0
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d12c      	bne.n	8004406 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699a      	ldr	r2, [r3, #24]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	492e      	ldr	r1, [pc, #184]	@ (8004470 <HAL_RTC_Init+0x140>)
 80043b8:	400a      	ands	r2, r1
 80043ba:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6999      	ldr	r1, [r3, #24]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6912      	ldr	r2, [r2, #16]
 80043e2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6919      	ldr	r1, [r3, #16]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	041a      	lsls	r2, r3, #16
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80043f8:	183c      	adds	r4, r7, r0
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	0018      	movs	r0, r3
 80043fe:	f000 fcc9 	bl	8004d94 <RTC_ExitInitMode>
 8004402:	0003      	movs	r3, r0
 8004404:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004406:	230f      	movs	r3, #15
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d116      	bne.n	800443e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	00d2      	lsls	r2, r2, #3
 800441c:	08d2      	lsrs	r2, r2, #3
 800441e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6999      	ldr	r1, [r3, #24]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	22ff      	movs	r2, #255	@ 0xff
 8004444:	625a      	str	r2, [r3, #36]	@ 0x24
 8004446:	e003      	b.n	8004450 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004448:	230f      	movs	r3, #15
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	2200      	movs	r2, #0
 800444e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004450:	230f      	movs	r3, #15
 8004452:	18fb      	adds	r3, r7, r3
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d103      	bne.n	8004462 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2229      	movs	r2, #41	@ 0x29
 800445e:	2101      	movs	r1, #1
 8004460:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004462:	230f      	movs	r3, #15
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	781b      	ldrb	r3, [r3, #0]
}
 8004468:	0018      	movs	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	b004      	add	sp, #16
 800446e:	bdb0      	pop	{r4, r5, r7, pc}
 8004470:	fb8fffbf 	.word	0xfb8fffbf

08004474 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004474:	b5b0      	push	{r4, r5, r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2228      	movs	r2, #40	@ 0x28
 8004484:	5c9b      	ldrb	r3, [r3, r2]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_RTC_SetTime+0x1a>
 800448a:	2302      	movs	r3, #2
 800448c:	e092      	b.n	80045b4 <HAL_RTC_SetTime+0x140>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2228      	movs	r2, #40	@ 0x28
 8004492:	2101      	movs	r1, #1
 8004494:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2229      	movs	r2, #41	@ 0x29
 800449a:	2102      	movs	r1, #2
 800449c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	22ca      	movs	r2, #202	@ 0xca
 80044a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2253      	movs	r2, #83	@ 0x53
 80044ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80044ae:	2513      	movs	r5, #19
 80044b0:	197c      	adds	r4, r7, r5
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	0018      	movs	r0, r3
 80044b6:	f000 fc2b 	bl	8004d10 <RTC_EnterInitMode>
 80044ba:	0003      	movs	r3, r0
 80044bc:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80044be:	197b      	adds	r3, r7, r5
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d162      	bne.n	800458c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d125      	bne.n	8004518 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	2240      	movs	r2, #64	@ 0x40
 80044d4:	4013      	ands	r3, r2
 80044d6:	d102      	bne.n	80044de <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2200      	movs	r2, #0
 80044dc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	0018      	movs	r0, r3
 80044e4:	f000 fc9a 	bl	8004e1c <RTC_ByteToBcd2>
 80044e8:	0003      	movs	r3, r0
 80044ea:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	785b      	ldrb	r3, [r3, #1]
 80044f0:	0018      	movs	r0, r3
 80044f2:	f000 fc93 	bl	8004e1c <RTC_ByteToBcd2>
 80044f6:	0003      	movs	r3, r0
 80044f8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044fa:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	789b      	ldrb	r3, [r3, #2]
 8004500:	0018      	movs	r0, r3
 8004502:	f000 fc8b 	bl	8004e1c <RTC_ByteToBcd2>
 8004506:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004508:	0022      	movs	r2, r4
 800450a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	78db      	ldrb	r3, [r3, #3]
 8004510:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	e017      	b.n	8004548 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	2240      	movs	r2, #64	@ 0x40
 8004520:	4013      	ands	r3, r2
 8004522:	d102      	bne.n	800452a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2200      	movs	r2, #0
 8004528:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	785b      	ldrb	r3, [r3, #1]
 8004534:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004536:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800453c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	78db      	ldrb	r3, [r3, #3]
 8004542:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	491b      	ldr	r1, [pc, #108]	@ (80045bc <HAL_RTC_SetTime+0x148>)
 8004550:	400a      	ands	r2, r1
 8004552:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4918      	ldr	r1, [pc, #96]	@ (80045c0 <HAL_RTC_SetTime+0x14c>)
 8004560:	400a      	ands	r2, r1
 8004562:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6999      	ldr	r1, [r3, #24]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	431a      	orrs	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800457c:	2313      	movs	r3, #19
 800457e:	18fc      	adds	r4, r7, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	0018      	movs	r0, r3
 8004584:	f000 fc06 	bl	8004d94 <RTC_ExitInitMode>
 8004588:	0003      	movs	r3, r0
 800458a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	22ff      	movs	r2, #255	@ 0xff
 8004592:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8004594:	2313      	movs	r3, #19
 8004596:	18fb      	adds	r3, r7, r3
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d103      	bne.n	80045a6 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2229      	movs	r2, #41	@ 0x29
 80045a2:	2101      	movs	r1, #1
 80045a4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2228      	movs	r2, #40	@ 0x28
 80045aa:	2100      	movs	r1, #0
 80045ac:	5499      	strb	r1, [r3, r2]

  return status;
 80045ae:	2313      	movs	r3, #19
 80045b0:	18fb      	adds	r3, r7, r3
 80045b2:	781b      	ldrb	r3, [r3, #0]
}
 80045b4:	0018      	movs	r0, r3
 80045b6:	46bd      	mov	sp, r7
 80045b8:	b006      	add	sp, #24
 80045ba:	bdb0      	pop	{r4, r5, r7, pc}
 80045bc:	007f7f7f 	.word	0x007f7f7f
 80045c0:	fffbffff 	.word	0xfffbffff

080045c4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	045b      	lsls	r3, r3, #17
 80045e2:	0c5a      	lsrs	r2, r3, #17
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a22      	ldr	r2, [pc, #136]	@ (8004678 <HAL_RTC_GetTime+0xb4>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	0c1b      	lsrs	r3, r3, #16
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	223f      	movs	r2, #63	@ 0x3f
 80045fc:	4013      	ands	r3, r2
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	0a1b      	lsrs	r3, r3, #8
 8004608:	b2db      	uxtb	r3, r3
 800460a:	227f      	movs	r2, #127	@ 0x7f
 800460c:	4013      	ands	r3, r2
 800460e:	b2da      	uxtb	r2, r3
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	227f      	movs	r2, #127	@ 0x7f
 800461a:	4013      	ands	r3, r2
 800461c:	b2da      	uxtb	r2, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	0d9b      	lsrs	r3, r3, #22
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2201      	movs	r2, #1
 800462a:	4013      	ands	r3, r2
 800462c:	b2da      	uxtb	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d11a      	bne.n	800466e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	0018      	movs	r0, r3
 800463e:	f000 fc15 	bl	8004e6c <RTC_Bcd2ToByte>
 8004642:	0003      	movs	r3, r0
 8004644:	001a      	movs	r2, r3
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	785b      	ldrb	r3, [r3, #1]
 800464e:	0018      	movs	r0, r3
 8004650:	f000 fc0c 	bl	8004e6c <RTC_Bcd2ToByte>
 8004654:	0003      	movs	r3, r0
 8004656:	001a      	movs	r2, r3
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	789b      	ldrb	r3, [r3, #2]
 8004660:	0018      	movs	r0, r3
 8004662:	f000 fc03 	bl	8004e6c <RTC_Bcd2ToByte>
 8004666:	0003      	movs	r3, r0
 8004668:	001a      	movs	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	0018      	movs	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	b006      	add	sp, #24
 8004676:	bd80      	pop	{r7, pc}
 8004678:	007f7f7f 	.word	0x007f7f7f

0800467c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800467c:	b5b0      	push	{r4, r5, r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2228      	movs	r2, #40	@ 0x28
 800468c:	5c9b      	ldrb	r3, [r3, r2]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_RTC_SetDate+0x1a>
 8004692:	2302      	movs	r3, #2
 8004694:	e07e      	b.n	8004794 <HAL_RTC_SetDate+0x118>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2228      	movs	r2, #40	@ 0x28
 800469a:	2101      	movs	r1, #1
 800469c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2229      	movs	r2, #41	@ 0x29
 80046a2:	2102      	movs	r1, #2
 80046a4:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10e      	bne.n	80046ca <HAL_RTC_SetDate+0x4e>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	785b      	ldrb	r3, [r3, #1]
 80046b0:	001a      	movs	r2, r3
 80046b2:	2310      	movs	r3, #16
 80046b4:	4013      	ands	r3, r2
 80046b6:	d008      	beq.n	80046ca <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	785b      	ldrb	r3, [r3, #1]
 80046bc:	2210      	movs	r2, #16
 80046be:	4393      	bics	r3, r2
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	330a      	adds	r3, #10
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d11c      	bne.n	800470a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	78db      	ldrb	r3, [r3, #3]
 80046d4:	0018      	movs	r0, r3
 80046d6:	f000 fba1 	bl	8004e1c <RTC_ByteToBcd2>
 80046da:	0003      	movs	r3, r0
 80046dc:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	785b      	ldrb	r3, [r3, #1]
 80046e2:	0018      	movs	r0, r3
 80046e4:	f000 fb9a 	bl	8004e1c <RTC_ByteToBcd2>
 80046e8:	0003      	movs	r3, r0
 80046ea:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80046ec:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	789b      	ldrb	r3, [r3, #2]
 80046f2:	0018      	movs	r0, r3
 80046f4:	f000 fb92 	bl	8004e1c <RTC_ByteToBcd2>
 80046f8:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80046fa:	0022      	movs	r2, r4
 80046fc:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	e00e      	b.n	8004728 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	78db      	ldrb	r3, [r3, #3]
 800470e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	785b      	ldrb	r3, [r3, #1]
 8004714:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004716:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800471c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	22ca      	movs	r2, #202	@ 0xca
 800472e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2253      	movs	r2, #83	@ 0x53
 8004736:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004738:	2513      	movs	r5, #19
 800473a:	197c      	adds	r4, r7, r5
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	0018      	movs	r0, r3
 8004740:	f000 fae6 	bl	8004d10 <RTC_EnterInitMode>
 8004744:	0003      	movs	r3, r0
 8004746:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004748:	0028      	movs	r0, r5
 800474a:	183b      	adds	r3, r7, r0
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10c      	bne.n	800476c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4910      	ldr	r1, [pc, #64]	@ (800479c <HAL_RTC_SetDate+0x120>)
 800475a:	400a      	ands	r2, r1
 800475c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800475e:	183c      	adds	r4, r7, r0
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	0018      	movs	r0, r3
 8004764:	f000 fb16 	bl	8004d94 <RTC_ExitInitMode>
 8004768:	0003      	movs	r3, r0
 800476a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	22ff      	movs	r2, #255	@ 0xff
 8004772:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004774:	2313      	movs	r3, #19
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d103      	bne.n	8004786 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2229      	movs	r2, #41	@ 0x29
 8004782:	2101      	movs	r1, #1
 8004784:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2228      	movs	r2, #40	@ 0x28
 800478a:	2100      	movs	r1, #0
 800478c:	5499      	strb	r1, [r3, r2]

  return status;
 800478e:	2313      	movs	r3, #19
 8004790:	18fb      	adds	r3, r7, r3
 8004792:	781b      	ldrb	r3, [r3, #0]
}
 8004794:	0018      	movs	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	b006      	add	sp, #24
 800479a:	bdb0      	pop	{r4, r5, r7, pc}
 800479c:	00ffff3f 	.word	0x00ffff3f

080047a0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	4a21      	ldr	r2, [pc, #132]	@ (8004838 <HAL_RTC_GetDate+0x98>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	0c1b      	lsrs	r3, r3, #16
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	0a1b      	lsrs	r3, r3, #8
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	221f      	movs	r2, #31
 80047ca:	4013      	ands	r3, r2
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	223f      	movs	r2, #63	@ 0x3f
 80047d8:	4013      	ands	r3, r2
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	0b5b      	lsrs	r3, r3, #13
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2207      	movs	r2, #7
 80047e8:	4013      	ands	r3, r2
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d11a      	bne.n	800482c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	78db      	ldrb	r3, [r3, #3]
 80047fa:	0018      	movs	r0, r3
 80047fc:	f000 fb36 	bl	8004e6c <RTC_Bcd2ToByte>
 8004800:	0003      	movs	r3, r0
 8004802:	001a      	movs	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	785b      	ldrb	r3, [r3, #1]
 800480c:	0018      	movs	r0, r3
 800480e:	f000 fb2d 	bl	8004e6c <RTC_Bcd2ToByte>
 8004812:	0003      	movs	r3, r0
 8004814:	001a      	movs	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	789b      	ldrb	r3, [r3, #2]
 800481e:	0018      	movs	r0, r3
 8004820:	f000 fb24 	bl	8004e6c <RTC_Bcd2ToByte>
 8004824:	0003      	movs	r3, r0
 8004826:	001a      	movs	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	0018      	movs	r0, r3
 8004830:	46bd      	mov	sp, r7
 8004832:	b006      	add	sp, #24
 8004834:	bd80      	pop	{r7, pc}
 8004836:	46c0      	nop			@ (mov r8, r8)
 8004838:	00ffff3f 	.word	0x00ffff3f

0800483c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800483c:	b590      	push	{r4, r7, lr}
 800483e:	b089      	sub	sp, #36	@ 0x24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2228      	movs	r2, #40	@ 0x28
 800484c:	5c9b      	ldrb	r3, [r3, r2]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d101      	bne.n	8004856 <HAL_RTC_SetAlarm_IT+0x1a>
 8004852:	2302      	movs	r3, #2
 8004854:	e127      	b.n	8004aa6 <HAL_RTC_SetAlarm_IT+0x26a>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2228      	movs	r2, #40	@ 0x28
 800485a:	2101      	movs	r1, #1
 800485c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2229      	movs	r2, #41	@ 0x29
 8004862:	2102      	movs	r1, #2
 8004864:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d136      	bne.n	80048da <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	2240      	movs	r2, #64	@ 0x40
 8004874:	4013      	ands	r3, r2
 8004876:	d102      	bne.n	800487e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2200      	movs	r2, #0
 800487c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	0018      	movs	r0, r3
 8004884:	f000 faca 	bl	8004e1c <RTC_ByteToBcd2>
 8004888:	0003      	movs	r3, r0
 800488a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	785b      	ldrb	r3, [r3, #1]
 8004890:	0018      	movs	r0, r3
 8004892:	f000 fac3 	bl	8004e1c <RTC_ByteToBcd2>
 8004896:	0003      	movs	r3, r0
 8004898:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800489a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	789b      	ldrb	r3, [r3, #2]
 80048a0:	0018      	movs	r0, r3
 80048a2:	f000 fabb 	bl	8004e1c <RTC_ByteToBcd2>
 80048a6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80048a8:	0022      	movs	r2, r4
 80048aa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	78db      	ldrb	r3, [r3, #3]
 80048b0:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80048b2:	431a      	orrs	r2, r3
 80048b4:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2220      	movs	r2, #32
 80048ba:	5c9b      	ldrb	r3, [r3, r2]
 80048bc:	0018      	movs	r0, r3
 80048be:	f000 faad 	bl	8004e1c <RTC_ByteToBcd2>
 80048c2:	0003      	movs	r3, r0
 80048c4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80048c6:	0022      	movs	r2, r4
 80048c8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80048ce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80048d4:	4313      	orrs	r3, r2
 80048d6:	61fb      	str	r3, [r7, #28]
 80048d8:	e022      	b.n	8004920 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	2240      	movs	r2, #64	@ 0x40
 80048e2:	4013      	ands	r3, r2
 80048e4:	d102      	bne.n	80048ec <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2200      	movs	r2, #0
 80048ea:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	785b      	ldrb	r3, [r3, #1]
 80048f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80048f8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80048fe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	78db      	ldrb	r3, [r3, #3]
 8004904:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004906:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2120      	movs	r1, #32
 800490c:	5c5b      	ldrb	r3, [r3, r1]
 800490e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004910:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004916:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800491c:	4313      	orrs	r3, r2
 800491e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	22ca      	movs	r2, #202	@ 0xca
 8004932:	625a      	str	r2, [r3, #36]	@ 0x24
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2253      	movs	r2, #83	@ 0x53
 800493a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004940:	2380      	movs	r3, #128	@ 0x80
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	429a      	cmp	r2, r3
 8004946:	d14c      	bne.n	80049e2 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699a      	ldr	r2, [r3, #24]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4957      	ldr	r1, [pc, #348]	@ (8004ab0 <HAL_RTC_SetAlarm_IT+0x274>)
 8004954:	400a      	ands	r2, r1
 8004956:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2101      	movs	r1, #1
 8004964:	430a      	orrs	r2, r1
 8004966:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004968:	f7fd fcd4 	bl	8002314 <HAL_GetTick>
 800496c:	0003      	movs	r3, r0
 800496e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004970:	e016      	b.n	80049a0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004972:	f7fd fccf 	bl	8002314 <HAL_GetTick>
 8004976:	0002      	movs	r2, r0
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	1ad2      	subs	r2, r2, r3
 800497c:	23fa      	movs	r3, #250	@ 0xfa
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	429a      	cmp	r2, r3
 8004982:	d90d      	bls.n	80049a0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	22ff      	movs	r2, #255	@ 0xff
 800498a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2229      	movs	r2, #41	@ 0x29
 8004990:	2103      	movs	r1, #3
 8004992:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2228      	movs	r2, #40	@ 0x28
 8004998:	2100      	movs	r1, #0
 800499a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e082      	b.n	8004aa6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	2201      	movs	r2, #1
 80049a8:	4013      	ands	r3, r2
 80049aa:	d0e2      	beq.n	8004972 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699a      	ldr	r2, [r3, #24]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2180      	movs	r1, #128	@ 0x80
 80049c8:	0049      	lsls	r1, r1, #1
 80049ca:	430a      	orrs	r2, r1
 80049cc:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	699a      	ldr	r2, [r3, #24]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2180      	movs	r1, #128	@ 0x80
 80049da:	0149      	lsls	r1, r1, #5
 80049dc:	430a      	orrs	r2, r1
 80049de:	619a      	str	r2, [r3, #24]
 80049e0:	e04b      	b.n	8004a7a <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699a      	ldr	r2, [r3, #24]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4931      	ldr	r1, [pc, #196]	@ (8004ab4 <HAL_RTC_SetAlarm_IT+0x278>)
 80049ee:	400a      	ands	r2, r1
 80049f0:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2102      	movs	r1, #2
 80049fe:	430a      	orrs	r2, r1
 8004a00:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004a02:	f7fd fc87 	bl	8002314 <HAL_GetTick>
 8004a06:	0003      	movs	r3, r0
 8004a08:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004a0a:	e016      	b.n	8004a3a <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a0c:	f7fd fc82 	bl	8002314 <HAL_GetTick>
 8004a10:	0002      	movs	r2, r0
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	1ad2      	subs	r2, r2, r3
 8004a16:	23fa      	movs	r3, #250	@ 0xfa
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d90d      	bls.n	8004a3a <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	22ff      	movs	r2, #255	@ 0xff
 8004a24:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2229      	movs	r2, #41	@ 0x29
 8004a2a:	2103      	movs	r1, #3
 8004a2c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2228      	movs	r2, #40	@ 0x28
 8004a32:	2100      	movs	r1, #0
 8004a34:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e035      	b.n	8004aa6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	2202      	movs	r2, #2
 8004a42:	4013      	ands	r3, r2
 8004a44:	d0e2      	beq.n	8004a0c <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	699a      	ldr	r2, [r3, #24]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2180      	movs	r1, #128	@ 0x80
 8004a62:	0089      	lsls	r1, r1, #2
 8004a64:	430a      	orrs	r2, r1
 8004a66:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2180      	movs	r1, #128	@ 0x80
 8004a74:	0189      	lsls	r1, r1, #6
 8004a76:	430a      	orrs	r2, r1
 8004a78:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004a7a:	4a0f      	ldr	r2, [pc, #60]	@ (8004ab8 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004a7c:	2380      	movs	r3, #128	@ 0x80
 8004a7e:	58d3      	ldr	r3, [r2, r3]
 8004a80:	490d      	ldr	r1, [pc, #52]	@ (8004ab8 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004a82:	2280      	movs	r2, #128	@ 0x80
 8004a84:	0312      	lsls	r2, r2, #12
 8004a86:	4313      	orrs	r3, r2
 8004a88:	2280      	movs	r2, #128	@ 0x80
 8004a8a:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	22ff      	movs	r2, #255	@ 0xff
 8004a92:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2229      	movs	r2, #41	@ 0x29
 8004a98:	2101      	movs	r1, #1
 8004a9a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2228      	movs	r2, #40	@ 0x28
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b009      	add	sp, #36	@ 0x24
 8004aac:	bd90      	pop	{r4, r7, pc}
 8004aae:	46c0      	nop			@ (mov r8, r8)
 8004ab0:	fffffeff 	.word	0xfffffeff
 8004ab4:	fffffdff 	.word	0xfffffdff
 8004ab8:	40021800 	.word	0x40021800

08004abc <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	2380      	movs	r3, #128	@ 0x80
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d144      	bne.n	8004b5e <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2280      	movs	r2, #128	@ 0x80
 8004ad8:	0052      	lsls	r2, r2, #1
 8004ada:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae2:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aea:	045b      	lsls	r3, r3, #17
 8004aec:	0c5b      	lsrs	r3, r3, #17
 8004aee:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	0c1b      	lsrs	r3, r3, #16
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	223f      	movs	r2, #63	@ 0x3f
 8004af8:	4013      	ands	r3, r2
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	0a1b      	lsrs	r3, r3, #8
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	227f      	movs	r2, #127	@ 0x7f
 8004b08:	4013      	ands	r3, r2
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	227f      	movs	r2, #127	@ 0x7f
 8004b16:	4013      	ands	r3, r2
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	0d9b      	lsrs	r3, r3, #22
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2201      	movs	r2, #1
 8004b26:	4013      	ands	r3, r2
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	0e1b      	lsrs	r3, r3, #24
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	223f      	movs	r2, #63	@ 0x3f
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	b2d9      	uxtb	r1, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2220      	movs	r2, #32
 8004b44:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	2380      	movs	r3, #128	@ 0x80
 8004b4a:	05db      	lsls	r3, r3, #23
 8004b4c:	401a      	ands	r2, r3
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	4a3b      	ldr	r2, [pc, #236]	@ (8004c44 <HAL_RTC_GetAlarm+0x188>)
 8004b56:	401a      	ands	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	615a      	str	r2, [r3, #20]
 8004b5c:	e043      	b.n	8004be6 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2280      	movs	r2, #128	@ 0x80
 8004b62:	0092      	lsls	r2, r2, #2
 8004b64:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b6c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b74:	045b      	lsls	r3, r3, #17
 8004b76:	0c5b      	lsrs	r3, r3, #17
 8004b78:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	0c1b      	lsrs	r3, r3, #16
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	223f      	movs	r2, #63	@ 0x3f
 8004b82:	4013      	ands	r3, r2
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	0a1b      	lsrs	r3, r3, #8
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	227f      	movs	r2, #127	@ 0x7f
 8004b92:	4013      	ands	r3, r2
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	227f      	movs	r2, #127	@ 0x7f
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	0d9b      	lsrs	r3, r3, #22
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2201      	movs	r2, #1
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	0e1b      	lsrs	r3, r3, #24
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	223f      	movs	r2, #63	@ 0x3f
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	b2d9      	uxtb	r1, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	2380      	movs	r3, #128	@ 0x80
 8004bd4:	05db      	lsls	r3, r3, #23
 8004bd6:	401a      	ands	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	4a19      	ldr	r2, [pc, #100]	@ (8004c44 <HAL_RTC_GetAlarm+0x188>)
 8004be0:	401a      	ands	r2, r3
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d125      	bne.n	8004c38 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f000 f93b 	bl	8004e6c <RTC_Bcd2ToByte>
 8004bf6:	0003      	movs	r3, r0
 8004bf8:	001a      	movs	r2, r3
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	785b      	ldrb	r3, [r3, #1]
 8004c02:	0018      	movs	r0, r3
 8004c04:	f000 f932 	bl	8004e6c <RTC_Bcd2ToByte>
 8004c08:	0003      	movs	r3, r0
 8004c0a:	001a      	movs	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	789b      	ldrb	r3, [r3, #2]
 8004c14:	0018      	movs	r0, r3
 8004c16:	f000 f929 	bl	8004e6c <RTC_Bcd2ToByte>
 8004c1a:	0003      	movs	r3, r0
 8004c1c:	001a      	movs	r2, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2220      	movs	r2, #32
 8004c26:	5c9b      	ldrb	r3, [r3, r2]
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f000 f91f 	bl	8004e6c <RTC_Bcd2ToByte>
 8004c2e:	0003      	movs	r3, r0
 8004c30:	0019      	movs	r1, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2220      	movs	r2, #32
 8004c36:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	b006      	add	sp, #24
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	46c0      	nop			@ (mov r8, r8)
 8004c44:	80808080 	.word	0x80808080

08004c48 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699a      	ldr	r2, [r3, #24]
 8004c56:	2380      	movs	r3, #128	@ 0x80
 8004c58:	015b      	lsls	r3, r3, #5
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	d011      	beq.n	8004c82 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c64:	2201      	movs	r2, #1
 8004c66:	4013      	ands	r3, r2
 8004c68:	d00b      	beq.n	8004c82 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2101      	movs	r1, #1
 8004c76:	430a      	orrs	r2, r1
 8004c78:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f7fc fac1 	bl	8001204 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699a      	ldr	r2, [r3, #24]
 8004c88:	2380      	movs	r3, #128	@ 0x80
 8004c8a:	019b      	lsls	r3, r3, #6
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d011      	beq.n	8004cb4 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c96:	2202      	movs	r2, #2
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d00b      	beq.n	8004cb4 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2102      	movs	r1, #2
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	0018      	movs	r0, r3
 8004cb0:	f000 f9a4 	bl	8004ffc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2229      	movs	r2, #41	@ 0x29
 8004cb8:	2101      	movs	r1, #1
 8004cba:	5499      	strb	r1, [r3, r2]
}
 8004cbc:	46c0      	nop			@ (mov r8, r8)
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	b002      	add	sp, #8
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a0e      	ldr	r2, [pc, #56]	@ (8004d0c <HAL_RTC_WaitForSynchro+0x48>)
 8004cd2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004cd4:	f7fd fb1e 	bl	8002314 <HAL_GetTick>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004cdc:	e00a      	b.n	8004cf4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004cde:	f7fd fb19 	bl	8002314 <HAL_GetTick>
 8004ce2:	0002      	movs	r2, r0
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	1ad2      	subs	r2, r2, r3
 8004ce8:	23fa      	movs	r3, #250	@ 0xfa
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d901      	bls.n	8004cf4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e006      	b.n	8004d02 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d0ee      	beq.n	8004cde <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	0018      	movs	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b004      	add	sp, #16
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	46c0      	nop			@ (mov r8, r8)
 8004d0c:	0001005f 	.word	0x0001005f

08004d10 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004d18:	230f      	movs	r3, #15
 8004d1a:	18fb      	adds	r3, r7, r3
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	2240      	movs	r2, #64	@ 0x40
 8004d28:	4013      	ands	r3, r2
 8004d2a:	d12c      	bne.n	8004d86 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2180      	movs	r1, #128	@ 0x80
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004d3c:	f7fd faea 	bl	8002314 <HAL_GetTick>
 8004d40:	0003      	movs	r3, r0
 8004d42:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004d44:	e014      	b.n	8004d70 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d46:	f7fd fae5 	bl	8002314 <HAL_GetTick>
 8004d4a:	0002      	movs	r2, r0
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	1ad2      	subs	r2, r2, r3
 8004d50:	200f      	movs	r0, #15
 8004d52:	183b      	adds	r3, r7, r0
 8004d54:	1839      	adds	r1, r7, r0
 8004d56:	7809      	ldrb	r1, [r1, #0]
 8004d58:	7019      	strb	r1, [r3, #0]
 8004d5a:	23fa      	movs	r3, #250	@ 0xfa
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d906      	bls.n	8004d70 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004d62:	183b      	adds	r3, r7, r0
 8004d64:	2203      	movs	r2, #3
 8004d66:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2229      	movs	r2, #41	@ 0x29
 8004d6c:	2103      	movs	r1, #3
 8004d6e:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2240      	movs	r2, #64	@ 0x40
 8004d78:	4013      	ands	r3, r2
 8004d7a:	d104      	bne.n	8004d86 <RTC_EnterInitMode+0x76>
 8004d7c:	230f      	movs	r3, #15
 8004d7e:	18fb      	adds	r3, r7, r3
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d1df      	bne.n	8004d46 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004d86:	230f      	movs	r3, #15
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	781b      	ldrb	r3, [r3, #0]
}
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	b004      	add	sp, #16
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d94:	b590      	push	{r4, r7, lr}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9c:	240f      	movs	r4, #15
 8004d9e:	193b      	adds	r3, r7, r4
 8004da0:	2200      	movs	r2, #0
 8004da2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004da4:	4b1c      	ldr	r3, [pc, #112]	@ (8004e18 <RTC_ExitInitMode+0x84>)
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	4b1b      	ldr	r3, [pc, #108]	@ (8004e18 <RTC_ExitInitMode+0x84>)
 8004daa:	2180      	movs	r1, #128	@ 0x80
 8004dac:	438a      	bics	r2, r1
 8004dae:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004db0:	4b19      	ldr	r3, [pc, #100]	@ (8004e18 <RTC_ExitInitMode+0x84>)
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	2220      	movs	r2, #32
 8004db6:	4013      	ands	r3, r2
 8004db8:	d10d      	bne.n	8004dd6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f7ff ff81 	bl	8004cc4 <HAL_RTC_WaitForSynchro>
 8004dc2:	1e03      	subs	r3, r0, #0
 8004dc4:	d021      	beq.n	8004e0a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2229      	movs	r2, #41	@ 0x29
 8004dca:	2103      	movs	r1, #3
 8004dcc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004dce:	193b      	adds	r3, r7, r4
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	e019      	b.n	8004e0a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004dd6:	4b10      	ldr	r3, [pc, #64]	@ (8004e18 <RTC_ExitInitMode+0x84>)
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	4b0f      	ldr	r3, [pc, #60]	@ (8004e18 <RTC_ExitInitMode+0x84>)
 8004ddc:	2120      	movs	r1, #32
 8004dde:	438a      	bics	r2, r1
 8004de0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	0018      	movs	r0, r3
 8004de6:	f7ff ff6d 	bl	8004cc4 <HAL_RTC_WaitForSynchro>
 8004dea:	1e03      	subs	r3, r0, #0
 8004dec:	d007      	beq.n	8004dfe <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2229      	movs	r2, #41	@ 0x29
 8004df2:	2103      	movs	r1, #3
 8004df4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004df6:	230f      	movs	r3, #15
 8004df8:	18fb      	adds	r3, r7, r3
 8004dfa:	2203      	movs	r2, #3
 8004dfc:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004dfe:	4b06      	ldr	r3, [pc, #24]	@ (8004e18 <RTC_ExitInitMode+0x84>)
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	4b05      	ldr	r3, [pc, #20]	@ (8004e18 <RTC_ExitInitMode+0x84>)
 8004e04:	2120      	movs	r1, #32
 8004e06:	430a      	orrs	r2, r1
 8004e08:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004e0a:	230f      	movs	r3, #15
 8004e0c:	18fb      	adds	r3, r7, r3
 8004e0e:	781b      	ldrb	r3, [r3, #0]
}
 8004e10:	0018      	movs	r0, r3
 8004e12:	46bd      	mov	sp, r7
 8004e14:	b005      	add	sp, #20
 8004e16:	bd90      	pop	{r4, r7, pc}
 8004e18:	40002800 	.word	0x40002800

08004e1c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	0002      	movs	r2, r0
 8004e24:	1dfb      	adds	r3, r7, #7
 8004e26:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004e2c:	230b      	movs	r3, #11
 8004e2e:	18fb      	adds	r3, r7, r3
 8004e30:	1dfa      	adds	r2, r7, #7
 8004e32:	7812      	ldrb	r2, [r2, #0]
 8004e34:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004e36:	e008      	b.n	8004e4a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004e3e:	220b      	movs	r2, #11
 8004e40:	18bb      	adds	r3, r7, r2
 8004e42:	18ba      	adds	r2, r7, r2
 8004e44:	7812      	ldrb	r2, [r2, #0]
 8004e46:	3a0a      	subs	r2, #10
 8004e48:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004e4a:	210b      	movs	r1, #11
 8004e4c:	187b      	adds	r3, r7, r1
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b09      	cmp	r3, #9
 8004e52:	d8f1      	bhi.n	8004e38 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	187b      	adds	r3, r7, r1
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	b2db      	uxtb	r3, r3
}
 8004e64:	0018      	movs	r0, r3
 8004e66:	46bd      	mov	sp, r7
 8004e68:	b004      	add	sp, #16
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	0002      	movs	r2, r0
 8004e74:	1dfb      	adds	r3, r7, #7
 8004e76:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004e78:	1dfb      	adds	r3, r7, #7
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	091b      	lsrs	r3, r3, #4
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	001a      	movs	r2, r3
 8004e82:	0013      	movs	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	189b      	adds	r3, r3, r2
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	1dfb      	adds	r3, r7, #7
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	210f      	movs	r1, #15
 8004e96:	400b      	ands	r3, r1
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	18d3      	adds	r3, r2, r3
 8004e9c:	b2db      	uxtb	r3, r3
}
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	b004      	add	sp, #16
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b086      	sub	sp, #24
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	607a      	str	r2, [r7, #4]
 8004eb2:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2228      	movs	r2, #40	@ 0x28
 8004eb8:	5c9b      	ldrb	r3, [r3, r2]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_RTCEx_SetSmoothCalib+0x1c>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e04f      	b.n	8004f62 <HAL_RTCEx_SetSmoothCalib+0xbc>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2228      	movs	r2, #40	@ 0x28
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2229      	movs	r2, #41	@ 0x29
 8004ece:	2102      	movs	r1, #2
 8004ed0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	22ca      	movs	r2, #202	@ 0xca
 8004ed8:	625a      	str	r2, [r3, #36]	@ 0x24
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2253      	movs	r2, #83	@ 0x53
 8004ee0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	2380      	movs	r3, #128	@ 0x80
 8004eea:	025b      	lsls	r3, r3, #9
 8004eec:	4013      	ands	r3, r2
 8004eee:	d022      	beq.n	8004f36 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8004ef0:	f7fd fa10 	bl	8002314 <HAL_GetTick>
 8004ef4:	0003      	movs	r3, r0
 8004ef6:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8004ef8:	e016      	b.n	8004f28 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004efa:	f7fd fa0b 	bl	8002314 <HAL_GetTick>
 8004efe:	0002      	movs	r2, r0
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	1ad2      	subs	r2, r2, r3
 8004f04:	23fa      	movs	r3, #250	@ 0xfa
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d90d      	bls.n	8004f28 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	22ff      	movs	r2, #255	@ 0xff
 8004f12:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2229      	movs	r2, #41	@ 0x29
 8004f18:	2103      	movs	r1, #3
 8004f1a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2228      	movs	r2, #40	@ 0x28
 8004f20:	2100      	movs	r1, #0
 8004f22:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e01c      	b.n	8004f62 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	2380      	movs	r3, #128	@ 0x80
 8004f30:	025b      	lsls	r3, r3, #9
 8004f32:	4013      	ands	r3, r2
 8004f34:	d1e1      	bne.n	8004efa <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	0011      	movs	r1, r2
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	22ff      	movs	r2, #255	@ 0xff
 8004f4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2229      	movs	r2, #41	@ 0x29
 8004f54:	2101      	movs	r1, #1
 8004f56:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2228      	movs	r2, #40	@ 0x28
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	0018      	movs	r0, r3
 8004f64:	46bd      	mov	sp, r7
 8004f66:	b006      	add	sp, #24
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2228      	movs	r2, #40	@ 0x28
 8004f7a:	5c9b      	ldrb	r3, [r3, r2]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d101      	bne.n	8004f84 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8004f80:	2302      	movs	r3, #2
 8004f82:	e035      	b.n	8004ff0 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2228      	movs	r2, #40	@ 0x28
 8004f88:	2101      	movs	r1, #1
 8004f8a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2229      	movs	r2, #41	@ 0x29
 8004f90:	2102      	movs	r1, #2
 8004f92:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	22ca      	movs	r2, #202	@ 0xca
 8004f9a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2253      	movs	r2, #83	@ 0x53
 8004fa2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4912      	ldr	r1, [pc, #72]	@ (8004ff8 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8004fb0:	400a      	ands	r2, r1
 8004fb2:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6999      	ldr	r1, [r3, #24]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2180      	movs	r1, #128	@ 0x80
 8004fd0:	0409      	lsls	r1, r1, #16
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	22ff      	movs	r2, #255	@ 0xff
 8004fdc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2229      	movs	r2, #41	@ 0x29
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2228      	movs	r2, #40	@ 0x28
 8004fea:	2100      	movs	r1, #0
 8004fec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	b002      	add	sp, #8
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	fff7ffff 	.word	0xfff7ffff

08004ffc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005004:	46c0      	nop			@ (mov r8, r8)
 8005006:	46bd      	mov	sp, r7
 8005008:	b002      	add	sp, #8
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	001a      	movs	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	18d3      	adds	r3, r2, r3
 8005024:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	3301      	adds	r3, #1
 800502a:	33ff      	adds	r3, #255	@ 0xff
 800502c:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	18d3      	adds	r3, r2, r3
 8005036:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	601a      	str	r2, [r3, #0]
}
 800503e:	46c0      	nop			@ (mov r8, r8)
 8005040:	46bd      	mov	sp, r7
 8005042:	b006      	add	sp, #24
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	001a      	movs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	18d3      	adds	r3, r2, r3
 800505c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	3301      	adds	r3, #1
 8005062:	33ff      	adds	r3, #255	@ 0xff
 8005064:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	18d3      	adds	r3, r2, r3
 800506e:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	681b      	ldr	r3, [r3, #0]
}
 8005074:	0018      	movs	r0, r3
 8005076:	46bd      	mov	sp, r7
 8005078:	b004      	add	sp, #16
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e04a      	b.n	8005124 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	223d      	movs	r2, #61	@ 0x3d
 8005092:	5c9b      	ldrb	r3, [r3, r2]
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d107      	bne.n	80050aa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	223c      	movs	r2, #60	@ 0x3c
 800509e:	2100      	movs	r1, #0
 80050a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	0018      	movs	r0, r3
 80050a6:	f7fc ffb7 	bl	8002018 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	223d      	movs	r2, #61	@ 0x3d
 80050ae:	2102      	movs	r1, #2
 80050b0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	3304      	adds	r3, #4
 80050ba:	0019      	movs	r1, r3
 80050bc:	0010      	movs	r0, r2
 80050be:	f000 fc0d 	bl	80058dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2248      	movs	r2, #72	@ 0x48
 80050c6:	2101      	movs	r1, #1
 80050c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	223e      	movs	r2, #62	@ 0x3e
 80050ce:	2101      	movs	r1, #1
 80050d0:	5499      	strb	r1, [r3, r2]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	223f      	movs	r2, #63	@ 0x3f
 80050d6:	2101      	movs	r1, #1
 80050d8:	5499      	strb	r1, [r3, r2]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2240      	movs	r2, #64	@ 0x40
 80050de:	2101      	movs	r1, #1
 80050e0:	5499      	strb	r1, [r3, r2]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2241      	movs	r2, #65	@ 0x41
 80050e6:	2101      	movs	r1, #1
 80050e8:	5499      	strb	r1, [r3, r2]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2242      	movs	r2, #66	@ 0x42
 80050ee:	2101      	movs	r1, #1
 80050f0:	5499      	strb	r1, [r3, r2]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2243      	movs	r2, #67	@ 0x43
 80050f6:	2101      	movs	r1, #1
 80050f8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2244      	movs	r2, #68	@ 0x44
 80050fe:	2101      	movs	r1, #1
 8005100:	5499      	strb	r1, [r3, r2]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2245      	movs	r2, #69	@ 0x45
 8005106:	2101      	movs	r1, #1
 8005108:	5499      	strb	r1, [r3, r2]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2246      	movs	r2, #70	@ 0x46
 800510e:	2101      	movs	r1, #1
 8005110:	5499      	strb	r1, [r3, r2]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2247      	movs	r2, #71	@ 0x47
 8005116:	2101      	movs	r1, #1
 8005118:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	223d      	movs	r2, #61	@ 0x3d
 800511e:	2101      	movs	r1, #1
 8005120:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	0018      	movs	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	b002      	add	sp, #8
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	223d      	movs	r2, #61	@ 0x3d
 8005138:	5c9b      	ldrb	r3, [r3, r2]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	d001      	beq.n	8005144 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e035      	b.n	80051b0 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	223d      	movs	r2, #61	@ 0x3d
 8005148:	2102      	movs	r1, #2
 800514a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a19      	ldr	r2, [pc, #100]	@ (80051b8 <HAL_TIM_Base_Start+0x8c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00a      	beq.n	800516c <HAL_TIM_Base_Start+0x40>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	2380      	movs	r3, #128	@ 0x80
 800515c:	05db      	lsls	r3, r3, #23
 800515e:	429a      	cmp	r2, r3
 8005160:	d004      	beq.n	800516c <HAL_TIM_Base_Start+0x40>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a15      	ldr	r2, [pc, #84]	@ (80051bc <HAL_TIM_Base_Start+0x90>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d116      	bne.n	800519a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	4a13      	ldr	r2, [pc, #76]	@ (80051c0 <HAL_TIM_Base_Start+0x94>)
 8005174:	4013      	ands	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b06      	cmp	r3, #6
 800517c:	d016      	beq.n	80051ac <HAL_TIM_Base_Start+0x80>
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	2380      	movs	r3, #128	@ 0x80
 8005182:	025b      	lsls	r3, r3, #9
 8005184:	429a      	cmp	r2, r3
 8005186:	d011      	beq.n	80051ac <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2101      	movs	r1, #1
 8005194:	430a      	orrs	r2, r1
 8005196:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005198:	e008      	b.n	80051ac <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2101      	movs	r1, #1
 80051a6:	430a      	orrs	r2, r1
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	e000      	b.n	80051ae <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ac:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	0018      	movs	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	b004      	add	sp, #16
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40012c00 	.word	0x40012c00
 80051bc:	40000400 	.word	0x40000400
 80051c0:	00010007 	.word	0x00010007

080051c4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005208 <HAL_TIM_Base_Stop+0x44>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	d10d      	bne.n	80051f4 <HAL_TIM_Base_Stop+0x30>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	4a0b      	ldr	r2, [pc, #44]	@ (800520c <HAL_TIM_Base_Stop+0x48>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	d107      	bne.n	80051f4 <HAL_TIM_Base_Stop+0x30>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2101      	movs	r1, #1
 80051f0:	438a      	bics	r2, r1
 80051f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	223d      	movs	r2, #61	@ 0x3d
 80051f8:	2101      	movs	r1, #1
 80051fa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	0018      	movs	r0, r3
 8005200:	46bd      	mov	sp, r7
 8005202:	b002      	add	sp, #8
 8005204:	bd80      	pop	{r7, pc}
 8005206:	46c0      	nop			@ (mov r8, r8)
 8005208:	00001111 	.word	0x00001111
 800520c:	00000444 	.word	0x00000444

08005210 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e04a      	b.n	80052b8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	223d      	movs	r2, #61	@ 0x3d
 8005226:	5c9b      	ldrb	r3, [r3, r2]
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d107      	bne.n	800523e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	223c      	movs	r2, #60	@ 0x3c
 8005232:	2100      	movs	r1, #0
 8005234:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	0018      	movs	r0, r3
 800523a:	f7fc fed1 	bl	8001fe0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	223d      	movs	r2, #61	@ 0x3d
 8005242:	2102      	movs	r1, #2
 8005244:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3304      	adds	r3, #4
 800524e:	0019      	movs	r1, r3
 8005250:	0010      	movs	r0, r2
 8005252:	f000 fb43 	bl	80058dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2248      	movs	r2, #72	@ 0x48
 800525a:	2101      	movs	r1, #1
 800525c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	223e      	movs	r2, #62	@ 0x3e
 8005262:	2101      	movs	r1, #1
 8005264:	5499      	strb	r1, [r3, r2]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	223f      	movs	r2, #63	@ 0x3f
 800526a:	2101      	movs	r1, #1
 800526c:	5499      	strb	r1, [r3, r2]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2240      	movs	r2, #64	@ 0x40
 8005272:	2101      	movs	r1, #1
 8005274:	5499      	strb	r1, [r3, r2]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2241      	movs	r2, #65	@ 0x41
 800527a:	2101      	movs	r1, #1
 800527c:	5499      	strb	r1, [r3, r2]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2242      	movs	r2, #66	@ 0x42
 8005282:	2101      	movs	r1, #1
 8005284:	5499      	strb	r1, [r3, r2]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2243      	movs	r2, #67	@ 0x43
 800528a:	2101      	movs	r1, #1
 800528c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2244      	movs	r2, #68	@ 0x44
 8005292:	2101      	movs	r1, #1
 8005294:	5499      	strb	r1, [r3, r2]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2245      	movs	r2, #69	@ 0x45
 800529a:	2101      	movs	r1, #1
 800529c:	5499      	strb	r1, [r3, r2]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2246      	movs	r2, #70	@ 0x46
 80052a2:	2101      	movs	r1, #1
 80052a4:	5499      	strb	r1, [r3, r2]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2247      	movs	r2, #71	@ 0x47
 80052aa:	2101      	movs	r1, #1
 80052ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	223d      	movs	r2, #61	@ 0x3d
 80052b2:	2101      	movs	r1, #1
 80052b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	0018      	movs	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b002      	add	sp, #8
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d108      	bne.n	80052e2 <HAL_TIM_PWM_Start+0x22>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	223e      	movs	r2, #62	@ 0x3e
 80052d4:	5c9b      	ldrb	r3, [r3, r2]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	3b01      	subs	r3, #1
 80052da:	1e5a      	subs	r2, r3, #1
 80052dc:	4193      	sbcs	r3, r2
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	e037      	b.n	8005352 <HAL_TIM_PWM_Start+0x92>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d108      	bne.n	80052fa <HAL_TIM_PWM_Start+0x3a>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	223f      	movs	r2, #63	@ 0x3f
 80052ec:	5c9b      	ldrb	r3, [r3, r2]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	1e5a      	subs	r2, r3, #1
 80052f4:	4193      	sbcs	r3, r2
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	e02b      	b.n	8005352 <HAL_TIM_PWM_Start+0x92>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d108      	bne.n	8005312 <HAL_TIM_PWM_Start+0x52>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2240      	movs	r2, #64	@ 0x40
 8005304:	5c9b      	ldrb	r3, [r3, r2]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	1e5a      	subs	r2, r3, #1
 800530c:	4193      	sbcs	r3, r2
 800530e:	b2db      	uxtb	r3, r3
 8005310:	e01f      	b.n	8005352 <HAL_TIM_PWM_Start+0x92>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b0c      	cmp	r3, #12
 8005316:	d108      	bne.n	800532a <HAL_TIM_PWM_Start+0x6a>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2241      	movs	r2, #65	@ 0x41
 800531c:	5c9b      	ldrb	r3, [r3, r2]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	1e5a      	subs	r2, r3, #1
 8005324:	4193      	sbcs	r3, r2
 8005326:	b2db      	uxtb	r3, r3
 8005328:	e013      	b.n	8005352 <HAL_TIM_PWM_Start+0x92>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b10      	cmp	r3, #16
 800532e:	d108      	bne.n	8005342 <HAL_TIM_PWM_Start+0x82>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2242      	movs	r2, #66	@ 0x42
 8005334:	5c9b      	ldrb	r3, [r3, r2]
 8005336:	b2db      	uxtb	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	1e5a      	subs	r2, r3, #1
 800533c:	4193      	sbcs	r3, r2
 800533e:	b2db      	uxtb	r3, r3
 8005340:	e007      	b.n	8005352 <HAL_TIM_PWM_Start+0x92>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2243      	movs	r2, #67	@ 0x43
 8005346:	5c9b      	ldrb	r3, [r3, r2]
 8005348:	b2db      	uxtb	r3, r3
 800534a:	3b01      	subs	r3, #1
 800534c:	1e5a      	subs	r2, r3, #1
 800534e:	4193      	sbcs	r3, r2
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e081      	b.n	800545e <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d104      	bne.n	800536a <HAL_TIM_PWM_Start+0xaa>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	223e      	movs	r2, #62	@ 0x3e
 8005364:	2102      	movs	r1, #2
 8005366:	5499      	strb	r1, [r3, r2]
 8005368:	e023      	b.n	80053b2 <HAL_TIM_PWM_Start+0xf2>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b04      	cmp	r3, #4
 800536e:	d104      	bne.n	800537a <HAL_TIM_PWM_Start+0xba>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	223f      	movs	r2, #63	@ 0x3f
 8005374:	2102      	movs	r1, #2
 8005376:	5499      	strb	r1, [r3, r2]
 8005378:	e01b      	b.n	80053b2 <HAL_TIM_PWM_Start+0xf2>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b08      	cmp	r3, #8
 800537e:	d104      	bne.n	800538a <HAL_TIM_PWM_Start+0xca>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2240      	movs	r2, #64	@ 0x40
 8005384:	2102      	movs	r1, #2
 8005386:	5499      	strb	r1, [r3, r2]
 8005388:	e013      	b.n	80053b2 <HAL_TIM_PWM_Start+0xf2>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b0c      	cmp	r3, #12
 800538e:	d104      	bne.n	800539a <HAL_TIM_PWM_Start+0xda>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2241      	movs	r2, #65	@ 0x41
 8005394:	2102      	movs	r1, #2
 8005396:	5499      	strb	r1, [r3, r2]
 8005398:	e00b      	b.n	80053b2 <HAL_TIM_PWM_Start+0xf2>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b10      	cmp	r3, #16
 800539e:	d104      	bne.n	80053aa <HAL_TIM_PWM_Start+0xea>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2242      	movs	r2, #66	@ 0x42
 80053a4:	2102      	movs	r1, #2
 80053a6:	5499      	strb	r1, [r3, r2]
 80053a8:	e003      	b.n	80053b2 <HAL_TIM_PWM_Start+0xf2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2243      	movs	r2, #67	@ 0x43
 80053ae:	2102      	movs	r1, #2
 80053b0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6839      	ldr	r1, [r7, #0]
 80053b8:	2201      	movs	r2, #1
 80053ba:	0018      	movs	r0, r3
 80053bc:	f000 fdae 	bl	8005f1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a28      	ldr	r2, [pc, #160]	@ (8005468 <HAL_TIM_PWM_Start+0x1a8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d009      	beq.n	80053de <HAL_TIM_PWM_Start+0x11e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a27      	ldr	r2, [pc, #156]	@ (800546c <HAL_TIM_PWM_Start+0x1ac>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d004      	beq.n	80053de <HAL_TIM_PWM_Start+0x11e>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a25      	ldr	r2, [pc, #148]	@ (8005470 <HAL_TIM_PWM_Start+0x1b0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d101      	bne.n	80053e2 <HAL_TIM_PWM_Start+0x122>
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <HAL_TIM_PWM_Start+0x124>
 80053e2:	2300      	movs	r3, #0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2180      	movs	r1, #128	@ 0x80
 80053f4:	0209      	lsls	r1, r1, #8
 80053f6:	430a      	orrs	r2, r1
 80053f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005468 <HAL_TIM_PWM_Start+0x1a8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00a      	beq.n	800541a <HAL_TIM_PWM_Start+0x15a>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	2380      	movs	r3, #128	@ 0x80
 800540a:	05db      	lsls	r3, r3, #23
 800540c:	429a      	cmp	r2, r3
 800540e:	d004      	beq.n	800541a <HAL_TIM_PWM_Start+0x15a>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a17      	ldr	r2, [pc, #92]	@ (8005474 <HAL_TIM_PWM_Start+0x1b4>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d116      	bne.n	8005448 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	4a15      	ldr	r2, [pc, #84]	@ (8005478 <HAL_TIM_PWM_Start+0x1b8>)
 8005422:	4013      	ands	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b06      	cmp	r3, #6
 800542a:	d016      	beq.n	800545a <HAL_TIM_PWM_Start+0x19a>
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	2380      	movs	r3, #128	@ 0x80
 8005430:	025b      	lsls	r3, r3, #9
 8005432:	429a      	cmp	r2, r3
 8005434:	d011      	beq.n	800545a <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2101      	movs	r1, #1
 8005442:	430a      	orrs	r2, r1
 8005444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005446:	e008      	b.n	800545a <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2101      	movs	r1, #1
 8005454:	430a      	orrs	r2, r1
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	e000      	b.n	800545c <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	0018      	movs	r0, r3
 8005460:	46bd      	mov	sp, r7
 8005462:	b004      	add	sp, #16
 8005464:	bd80      	pop	{r7, pc}
 8005466:	46c0      	nop			@ (mov r8, r8)
 8005468:	40012c00 	.word	0x40012c00
 800546c:	40014400 	.word	0x40014400
 8005470:	40014800 	.word	0x40014800
 8005474:	40000400 	.word	0x40000400
 8005478:	00010007 	.word	0x00010007

0800547c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2202      	movs	r2, #2
 8005498:	4013      	ands	r3, r2
 800549a:	d021      	beq.n	80054e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2202      	movs	r2, #2
 80054a0:	4013      	ands	r3, r2
 80054a2:	d01d      	beq.n	80054e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2203      	movs	r2, #3
 80054aa:	4252      	negs	r2, r2
 80054ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	2203      	movs	r2, #3
 80054bc:	4013      	ands	r3, r2
 80054be:	d004      	beq.n	80054ca <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	0018      	movs	r0, r3
 80054c4:	f000 f9f2 	bl	80058ac <HAL_TIM_IC_CaptureCallback>
 80054c8:	e007      	b.n	80054da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	0018      	movs	r0, r3
 80054ce:	f000 f9e5 	bl	800589c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	0018      	movs	r0, r3
 80054d6:	f000 f9f1 	bl	80058bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2204      	movs	r2, #4
 80054e4:	4013      	ands	r3, r2
 80054e6:	d022      	beq.n	800552e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2204      	movs	r2, #4
 80054ec:	4013      	ands	r3, r2
 80054ee:	d01e      	beq.n	800552e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2205      	movs	r2, #5
 80054f6:	4252      	negs	r2, r2
 80054f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2202      	movs	r2, #2
 80054fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	23c0      	movs	r3, #192	@ 0xc0
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4013      	ands	r3, r2
 800550c:	d004      	beq.n	8005518 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	0018      	movs	r0, r3
 8005512:	f000 f9cb 	bl	80058ac <HAL_TIM_IC_CaptureCallback>
 8005516:	e007      	b.n	8005528 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	0018      	movs	r0, r3
 800551c:	f000 f9be 	bl	800589c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	0018      	movs	r0, r3
 8005524:	f000 f9ca 	bl	80058bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2208      	movs	r2, #8
 8005532:	4013      	ands	r3, r2
 8005534:	d021      	beq.n	800557a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2208      	movs	r2, #8
 800553a:	4013      	ands	r3, r2
 800553c:	d01d      	beq.n	800557a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2209      	movs	r2, #9
 8005544:	4252      	negs	r2, r2
 8005546:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2204      	movs	r2, #4
 800554c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	2203      	movs	r2, #3
 8005556:	4013      	ands	r3, r2
 8005558:	d004      	beq.n	8005564 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	0018      	movs	r0, r3
 800555e:	f000 f9a5 	bl	80058ac <HAL_TIM_IC_CaptureCallback>
 8005562:	e007      	b.n	8005574 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	0018      	movs	r0, r3
 8005568:	f000 f998 	bl	800589c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	0018      	movs	r0, r3
 8005570:	f000 f9a4 	bl	80058bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2210      	movs	r2, #16
 800557e:	4013      	ands	r3, r2
 8005580:	d022      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2210      	movs	r2, #16
 8005586:	4013      	ands	r3, r2
 8005588:	d01e      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2211      	movs	r2, #17
 8005590:	4252      	negs	r2, r2
 8005592:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2208      	movs	r2, #8
 8005598:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69da      	ldr	r2, [r3, #28]
 80055a0:	23c0      	movs	r3, #192	@ 0xc0
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4013      	ands	r3, r2
 80055a6:	d004      	beq.n	80055b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	0018      	movs	r0, r3
 80055ac:	f000 f97e 	bl	80058ac <HAL_TIM_IC_CaptureCallback>
 80055b0:	e007      	b.n	80055c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	0018      	movs	r0, r3
 80055b6:	f000 f971 	bl	800589c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	0018      	movs	r0, r3
 80055be:	f000 f97d 	bl	80058bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2201      	movs	r2, #1
 80055cc:	4013      	ands	r3, r2
 80055ce:	d00c      	beq.n	80055ea <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2201      	movs	r2, #1
 80055d4:	4013      	ands	r3, r2
 80055d6:	d008      	beq.n	80055ea <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2202      	movs	r2, #2
 80055de:	4252      	negs	r2, r2
 80055e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	0018      	movs	r0, r3
 80055e6:	f000 f951 	bl	800588c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2280      	movs	r2, #128	@ 0x80
 80055ee:	4013      	ands	r3, r2
 80055f0:	d104      	bne.n	80055fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	2380      	movs	r3, #128	@ 0x80
 80055f6:	019b      	lsls	r3, r3, #6
 80055f8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055fa:	d00b      	beq.n	8005614 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2280      	movs	r2, #128	@ 0x80
 8005600:	4013      	ands	r3, r2
 8005602:	d007      	beq.n	8005614 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1e      	ldr	r2, [pc, #120]	@ (8005684 <HAL_TIM_IRQHandler+0x208>)
 800560a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	0018      	movs	r0, r3
 8005610:	f000 fd18 	bl	8006044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	2380      	movs	r3, #128	@ 0x80
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	4013      	ands	r3, r2
 800561c:	d00b      	beq.n	8005636 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2280      	movs	r2, #128	@ 0x80
 8005622:	4013      	ands	r3, r2
 8005624:	d007      	beq.n	8005636 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a17      	ldr	r2, [pc, #92]	@ (8005688 <HAL_TIM_IRQHandler+0x20c>)
 800562c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	0018      	movs	r0, r3
 8005632:	f000 fd0f 	bl	8006054 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2240      	movs	r2, #64	@ 0x40
 800563a:	4013      	ands	r3, r2
 800563c:	d00c      	beq.n	8005658 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2240      	movs	r2, #64	@ 0x40
 8005642:	4013      	ands	r3, r2
 8005644:	d008      	beq.n	8005658 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2241      	movs	r2, #65	@ 0x41
 800564c:	4252      	negs	r2, r2
 800564e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	0018      	movs	r0, r3
 8005654:	f000 f93a 	bl	80058cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2220      	movs	r2, #32
 800565c:	4013      	ands	r3, r2
 800565e:	d00c      	beq.n	800567a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2220      	movs	r2, #32
 8005664:	4013      	ands	r3, r2
 8005666:	d008      	beq.n	800567a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2221      	movs	r2, #33	@ 0x21
 800566e:	4252      	negs	r2, r2
 8005670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	0018      	movs	r0, r3
 8005676:	f000 fcdd 	bl	8006034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800567a:	46c0      	nop			@ (mov r8, r8)
 800567c:	46bd      	mov	sp, r7
 800567e:	b004      	add	sp, #16
 8005680:	bd80      	pop	{r7, pc}
 8005682:	46c0      	nop			@ (mov r8, r8)
 8005684:	ffffdf7f 	.word	0xffffdf7f
 8005688:	fffffeff 	.word	0xfffffeff

0800568c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005698:	2317      	movs	r3, #23
 800569a:	18fb      	adds	r3, r7, r3
 800569c:	2200      	movs	r2, #0
 800569e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	223c      	movs	r2, #60	@ 0x3c
 80056a4:	5c9b      	ldrb	r3, [r3, r2]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x22>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e0e5      	b.n	800587a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	223c      	movs	r2, #60	@ 0x3c
 80056b2:	2101      	movs	r1, #1
 80056b4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b14      	cmp	r3, #20
 80056ba:	d900      	bls.n	80056be <HAL_TIM_PWM_ConfigChannel+0x32>
 80056bc:	e0d1      	b.n	8005862 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	009a      	lsls	r2, r3, #2
 80056c2:	4b70      	ldr	r3, [pc, #448]	@ (8005884 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80056c4:	18d3      	adds	r3, r2, r3
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	0011      	movs	r1, r2
 80056d2:	0018      	movs	r0, r3
 80056d4:	f000 f986 	bl	80059e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2108      	movs	r1, #8
 80056e4:	430a      	orrs	r2, r1
 80056e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2104      	movs	r1, #4
 80056f4:	438a      	bics	r2, r1
 80056f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6999      	ldr	r1, [r3, #24]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	691a      	ldr	r2, [r3, #16]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	619a      	str	r2, [r3, #24]
      break;
 800570a:	e0af      	b.n	800586c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	0011      	movs	r1, r2
 8005714:	0018      	movs	r0, r3
 8005716:	f000 f9e5 	bl	8005ae4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699a      	ldr	r2, [r3, #24]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2180      	movs	r1, #128	@ 0x80
 8005726:	0109      	lsls	r1, r1, #4
 8005728:	430a      	orrs	r2, r1
 800572a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4954      	ldr	r1, [pc, #336]	@ (8005888 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005738:	400a      	ands	r2, r1
 800573a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6999      	ldr	r1, [r3, #24]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	021a      	lsls	r2, r3, #8
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	619a      	str	r2, [r3, #24]
      break;
 8005750:	e08c      	b.n	800586c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	0011      	movs	r1, r2
 800575a:	0018      	movs	r0, r3
 800575c:	f000 fa40 	bl	8005be0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	69da      	ldr	r2, [r3, #28]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2108      	movs	r1, #8
 800576c:	430a      	orrs	r2, r1
 800576e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	69da      	ldr	r2, [r3, #28]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2104      	movs	r1, #4
 800577c:	438a      	bics	r2, r1
 800577e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	69d9      	ldr	r1, [r3, #28]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	691a      	ldr	r2, [r3, #16]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	61da      	str	r2, [r3, #28]
      break;
 8005792:	e06b      	b.n	800586c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	0011      	movs	r1, r2
 800579c:	0018      	movs	r0, r3
 800579e:	f000 faa1 	bl	8005ce4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69da      	ldr	r2, [r3, #28]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2180      	movs	r1, #128	@ 0x80
 80057ae:	0109      	lsls	r1, r1, #4
 80057b0:	430a      	orrs	r2, r1
 80057b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69da      	ldr	r2, [r3, #28]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4932      	ldr	r1, [pc, #200]	@ (8005888 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80057c0:	400a      	ands	r2, r1
 80057c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	69d9      	ldr	r1, [r3, #28]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	021a      	lsls	r2, r3, #8
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	61da      	str	r2, [r3, #28]
      break;
 80057d8:	e048      	b.n	800586c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	0011      	movs	r1, r2
 80057e2:	0018      	movs	r0, r3
 80057e4:	f000 fae2 	bl	8005dac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2108      	movs	r1, #8
 80057f4:	430a      	orrs	r2, r1
 80057f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2104      	movs	r1, #4
 8005804:	438a      	bics	r2, r1
 8005806:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	691a      	ldr	r2, [r3, #16]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800581a:	e027      	b.n	800586c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	0011      	movs	r1, r2
 8005824:	0018      	movs	r0, r3
 8005826:	f000 fb1b 	bl	8005e60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2180      	movs	r1, #128	@ 0x80
 8005836:	0109      	lsls	r1, r1, #4
 8005838:	430a      	orrs	r2, r1
 800583a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4910      	ldr	r1, [pc, #64]	@ (8005888 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005848:	400a      	ands	r2, r1
 800584a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	021a      	lsls	r2, r3, #8
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005860:	e004      	b.n	800586c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005862:	2317      	movs	r3, #23
 8005864:	18fb      	adds	r3, r7, r3
 8005866:	2201      	movs	r2, #1
 8005868:	701a      	strb	r2, [r3, #0]
      break;
 800586a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	223c      	movs	r2, #60	@ 0x3c
 8005870:	2100      	movs	r1, #0
 8005872:	5499      	strb	r1, [r3, r2]

  return status;
 8005874:	2317      	movs	r3, #23
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	781b      	ldrb	r3, [r3, #0]
}
 800587a:	0018      	movs	r0, r3
 800587c:	46bd      	mov	sp, r7
 800587e:	b006      	add	sp, #24
 8005880:	bd80      	pop	{r7, pc}
 8005882:	46c0      	nop			@ (mov r8, r8)
 8005884:	08006160 	.word	0x08006160
 8005888:	fffffbff 	.word	0xfffffbff

0800588c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005894:	46c0      	nop			@ (mov r8, r8)
 8005896:	46bd      	mov	sp, r7
 8005898:	b002      	add	sp, #8
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058a4:	46c0      	nop			@ (mov r8, r8)
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b002      	add	sp, #8
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058b4:	46c0      	nop			@ (mov r8, r8)
 80058b6:	46bd      	mov	sp, r7
 80058b8:	b002      	add	sp, #8
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058c4:	46c0      	nop			@ (mov r8, r8)
 80058c6:	46bd      	mov	sp, r7
 80058c8:	b002      	add	sp, #8
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058d4:	46c0      	nop			@ (mov r8, r8)
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b002      	add	sp, #8
 80058da:	bd80      	pop	{r7, pc}

080058dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a37      	ldr	r2, [pc, #220]	@ (80059cc <TIM_Base_SetConfig+0xf0>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d008      	beq.n	8005906 <TIM_Base_SetConfig+0x2a>
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	2380      	movs	r3, #128	@ 0x80
 80058f8:	05db      	lsls	r3, r3, #23
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d003      	beq.n	8005906 <TIM_Base_SetConfig+0x2a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a33      	ldr	r2, [pc, #204]	@ (80059d0 <TIM_Base_SetConfig+0xf4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d108      	bne.n	8005918 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2270      	movs	r2, #112	@ 0x70
 800590a:	4393      	bics	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a2c      	ldr	r2, [pc, #176]	@ (80059cc <TIM_Base_SetConfig+0xf0>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d014      	beq.n	800594a <TIM_Base_SetConfig+0x6e>
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	2380      	movs	r3, #128	@ 0x80
 8005924:	05db      	lsls	r3, r3, #23
 8005926:	429a      	cmp	r2, r3
 8005928:	d00f      	beq.n	800594a <TIM_Base_SetConfig+0x6e>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a28      	ldr	r2, [pc, #160]	@ (80059d0 <TIM_Base_SetConfig+0xf4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00b      	beq.n	800594a <TIM_Base_SetConfig+0x6e>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a27      	ldr	r2, [pc, #156]	@ (80059d4 <TIM_Base_SetConfig+0xf8>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d007      	beq.n	800594a <TIM_Base_SetConfig+0x6e>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a26      	ldr	r2, [pc, #152]	@ (80059d8 <TIM_Base_SetConfig+0xfc>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d003      	beq.n	800594a <TIM_Base_SetConfig+0x6e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a25      	ldr	r2, [pc, #148]	@ (80059dc <TIM_Base_SetConfig+0x100>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d108      	bne.n	800595c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4a24      	ldr	r2, [pc, #144]	@ (80059e0 <TIM_Base_SetConfig+0x104>)
 800594e:	4013      	ands	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2280      	movs	r2, #128	@ 0x80
 8005960:	4393      	bics	r3, r2
 8005962:	001a      	movs	r2, r3
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a11      	ldr	r2, [pc, #68]	@ (80059cc <TIM_Base_SetConfig+0xf0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d007      	beq.n	800599a <TIM_Base_SetConfig+0xbe>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a12      	ldr	r2, [pc, #72]	@ (80059d8 <TIM_Base_SetConfig+0xfc>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d003      	beq.n	800599a <TIM_Base_SetConfig+0xbe>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a11      	ldr	r2, [pc, #68]	@ (80059dc <TIM_Base_SetConfig+0x100>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d103      	bne.n	80059a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	691a      	ldr	r2, [r3, #16]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	2201      	movs	r2, #1
 80059ae:	4013      	ands	r3, r2
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d106      	bne.n	80059c2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2201      	movs	r2, #1
 80059ba:	4393      	bics	r3, r2
 80059bc:	001a      	movs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	611a      	str	r2, [r3, #16]
  }
}
 80059c2:	46c0      	nop			@ (mov r8, r8)
 80059c4:	46bd      	mov	sp, r7
 80059c6:	b004      	add	sp, #16
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	46c0      	nop			@ (mov r8, r8)
 80059cc:	40012c00 	.word	0x40012c00
 80059d0:	40000400 	.word	0x40000400
 80059d4:	40002000 	.word	0x40002000
 80059d8:	40014400 	.word	0x40014400
 80059dc:	40014800 	.word	0x40014800
 80059e0:	fffffcff 	.word	0xfffffcff

080059e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	2201      	movs	r2, #1
 80059fa:	4393      	bics	r3, r2
 80059fc:	001a      	movs	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4a2e      	ldr	r2, [pc, #184]	@ (8005acc <TIM_OC1_SetConfig+0xe8>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2203      	movs	r2, #3
 8005a1a:	4393      	bics	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	4393      	bics	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a24      	ldr	r2, [pc, #144]	@ (8005ad0 <TIM_OC1_SetConfig+0xec>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d007      	beq.n	8005a52 <TIM_OC1_SetConfig+0x6e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a23      	ldr	r2, [pc, #140]	@ (8005ad4 <TIM_OC1_SetConfig+0xf0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d003      	beq.n	8005a52 <TIM_OC1_SetConfig+0x6e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a22      	ldr	r2, [pc, #136]	@ (8005ad8 <TIM_OC1_SetConfig+0xf4>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d10c      	bne.n	8005a6c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2208      	movs	r2, #8
 8005a56:	4393      	bics	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	2204      	movs	r2, #4
 8005a68:	4393      	bics	r3, r2
 8005a6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a18      	ldr	r2, [pc, #96]	@ (8005ad0 <TIM_OC1_SetConfig+0xec>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d007      	beq.n	8005a84 <TIM_OC1_SetConfig+0xa0>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a17      	ldr	r2, [pc, #92]	@ (8005ad4 <TIM_OC1_SetConfig+0xf0>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d003      	beq.n	8005a84 <TIM_OC1_SetConfig+0xa0>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a16      	ldr	r2, [pc, #88]	@ (8005ad8 <TIM_OC1_SetConfig+0xf4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d111      	bne.n	8005aa8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	4a15      	ldr	r2, [pc, #84]	@ (8005adc <TIM_OC1_SetConfig+0xf8>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	4a14      	ldr	r2, [pc, #80]	@ (8005ae0 <TIM_OC1_SetConfig+0xfc>)
 8005a90:	4013      	ands	r3, r2
 8005a92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	621a      	str	r2, [r3, #32]
}
 8005ac2:	46c0      	nop			@ (mov r8, r8)
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	b006      	add	sp, #24
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	46c0      	nop			@ (mov r8, r8)
 8005acc:	fffeff8f 	.word	0xfffeff8f
 8005ad0:	40012c00 	.word	0x40012c00
 8005ad4:	40014400 	.word	0x40014400
 8005ad8:	40014800 	.word	0x40014800
 8005adc:	fffffeff 	.word	0xfffffeff
 8005ae0:	fffffdff 	.word	0xfffffdff

08005ae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	2210      	movs	r2, #16
 8005afa:	4393      	bics	r3, r2
 8005afc:	001a      	movs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4a2c      	ldr	r2, [pc, #176]	@ (8005bc4 <TIM_OC2_SetConfig+0xe0>)
 8005b12:	4013      	ands	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4a2b      	ldr	r2, [pc, #172]	@ (8005bc8 <TIM_OC2_SetConfig+0xe4>)
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	021b      	lsls	r3, r3, #8
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	4393      	bics	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a22      	ldr	r2, [pc, #136]	@ (8005bcc <TIM_OC2_SetConfig+0xe8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d10d      	bne.n	8005b62 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2280      	movs	r2, #128	@ 0x80
 8005b4a:	4393      	bics	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	011b      	lsls	r3, r3, #4
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2240      	movs	r2, #64	@ 0x40
 8005b5e:	4393      	bics	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a19      	ldr	r2, [pc, #100]	@ (8005bcc <TIM_OC2_SetConfig+0xe8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d007      	beq.n	8005b7a <TIM_OC2_SetConfig+0x96>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a18      	ldr	r2, [pc, #96]	@ (8005bd0 <TIM_OC2_SetConfig+0xec>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d003      	beq.n	8005b7a <TIM_OC2_SetConfig+0x96>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a17      	ldr	r2, [pc, #92]	@ (8005bd4 <TIM_OC2_SetConfig+0xf0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d113      	bne.n	8005ba2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	4a16      	ldr	r2, [pc, #88]	@ (8005bd8 <TIM_OC2_SetConfig+0xf4>)
 8005b7e:	4013      	ands	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	4a15      	ldr	r2, [pc, #84]	@ (8005bdc <TIM_OC2_SetConfig+0xf8>)
 8005b86:	4013      	ands	r3, r2
 8005b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	621a      	str	r2, [r3, #32]
}
 8005bbc:	46c0      	nop			@ (mov r8, r8)
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	b006      	add	sp, #24
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	feff8fff 	.word	0xfeff8fff
 8005bc8:	fffffcff 	.word	0xfffffcff
 8005bcc:	40012c00 	.word	0x40012c00
 8005bd0:	40014400 	.word	0x40014400
 8005bd4:	40014800 	.word	0x40014800
 8005bd8:	fffffbff 	.word	0xfffffbff
 8005bdc:	fffff7ff 	.word	0xfffff7ff

08005be0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	4a31      	ldr	r2, [pc, #196]	@ (8005cbc <TIM_OC3_SetConfig+0xdc>)
 8005bf6:	401a      	ands	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4a2d      	ldr	r2, [pc, #180]	@ (8005cc0 <TIM_OC3_SetConfig+0xe0>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2203      	movs	r2, #3
 8005c14:	4393      	bics	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	4a27      	ldr	r2, [pc, #156]	@ (8005cc4 <TIM_OC3_SetConfig+0xe4>)
 8005c26:	4013      	ands	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	021b      	lsls	r3, r3, #8
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a23      	ldr	r2, [pc, #140]	@ (8005cc8 <TIM_OC3_SetConfig+0xe8>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d10d      	bne.n	8005c5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	4a22      	ldr	r2, [pc, #136]	@ (8005ccc <TIM_OC3_SetConfig+0xec>)
 8005c42:	4013      	ands	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	021b      	lsls	r3, r3, #8
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	4a1e      	ldr	r2, [pc, #120]	@ (8005cd0 <TIM_OC3_SetConfig+0xf0>)
 8005c56:	4013      	ands	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a1a      	ldr	r2, [pc, #104]	@ (8005cc8 <TIM_OC3_SetConfig+0xe8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d007      	beq.n	8005c72 <TIM_OC3_SetConfig+0x92>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a1b      	ldr	r2, [pc, #108]	@ (8005cd4 <TIM_OC3_SetConfig+0xf4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d003      	beq.n	8005c72 <TIM_OC3_SetConfig+0x92>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8005cd8 <TIM_OC3_SetConfig+0xf8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d113      	bne.n	8005c9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	4a19      	ldr	r2, [pc, #100]	@ (8005cdc <TIM_OC3_SetConfig+0xfc>)
 8005c76:	4013      	ands	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	4a18      	ldr	r2, [pc, #96]	@ (8005ce0 <TIM_OC3_SetConfig+0x100>)
 8005c7e:	4013      	ands	r3, r2
 8005c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	621a      	str	r2, [r3, #32]
}
 8005cb4:	46c0      	nop			@ (mov r8, r8)
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	b006      	add	sp, #24
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	fffffeff 	.word	0xfffffeff
 8005cc0:	fffeff8f 	.word	0xfffeff8f
 8005cc4:	fffffdff 	.word	0xfffffdff
 8005cc8:	40012c00 	.word	0x40012c00
 8005ccc:	fffff7ff 	.word	0xfffff7ff
 8005cd0:	fffffbff 	.word	0xfffffbff
 8005cd4:	40014400 	.word	0x40014400
 8005cd8:	40014800 	.word	0x40014800
 8005cdc:	ffffefff 	.word	0xffffefff
 8005ce0:	ffffdfff 	.word	0xffffdfff

08005ce4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	4a24      	ldr	r2, [pc, #144]	@ (8005d8c <TIM_OC4_SetConfig+0xa8>)
 8005cfa:	401a      	ands	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4a20      	ldr	r2, [pc, #128]	@ (8005d90 <TIM_OC4_SetConfig+0xac>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4a1f      	ldr	r2, [pc, #124]	@ (8005d94 <TIM_OC4_SetConfig+0xb0>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	021b      	lsls	r3, r3, #8
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8005d98 <TIM_OC4_SetConfig+0xb4>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	031b      	lsls	r3, r3, #12
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a17      	ldr	r2, [pc, #92]	@ (8005d9c <TIM_OC4_SetConfig+0xb8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d007      	beq.n	8005d54 <TIM_OC4_SetConfig+0x70>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a16      	ldr	r2, [pc, #88]	@ (8005da0 <TIM_OC4_SetConfig+0xbc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d003      	beq.n	8005d54 <TIM_OC4_SetConfig+0x70>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a15      	ldr	r2, [pc, #84]	@ (8005da4 <TIM_OC4_SetConfig+0xc0>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d109      	bne.n	8005d68 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	4a14      	ldr	r2, [pc, #80]	@ (8005da8 <TIM_OC4_SetConfig+0xc4>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	019b      	lsls	r3, r3, #6
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	621a      	str	r2, [r3, #32]
}
 8005d82:	46c0      	nop			@ (mov r8, r8)
 8005d84:	46bd      	mov	sp, r7
 8005d86:	b006      	add	sp, #24
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	46c0      	nop			@ (mov r8, r8)
 8005d8c:	ffffefff 	.word	0xffffefff
 8005d90:	feff8fff 	.word	0xfeff8fff
 8005d94:	fffffcff 	.word	0xfffffcff
 8005d98:	ffffdfff 	.word	0xffffdfff
 8005d9c:	40012c00 	.word	0x40012c00
 8005da0:	40014400 	.word	0x40014400
 8005da4:	40014800 	.word	0x40014800
 8005da8:	ffffbfff 	.word	0xffffbfff

08005dac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	4a21      	ldr	r2, [pc, #132]	@ (8005e48 <TIM_OC5_SetConfig+0x9c>)
 8005dc2:	401a      	ands	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8005e4c <TIM_OC5_SetConfig+0xa0>)
 8005dd8:	4013      	ands	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	4a19      	ldr	r2, [pc, #100]	@ (8005e50 <TIM_OC5_SetConfig+0xa4>)
 8005dea:	4013      	ands	r3, r2
 8005dec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	041b      	lsls	r3, r3, #16
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a15      	ldr	r2, [pc, #84]	@ (8005e54 <TIM_OC5_SetConfig+0xa8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d007      	beq.n	8005e12 <TIM_OC5_SetConfig+0x66>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a14      	ldr	r2, [pc, #80]	@ (8005e58 <TIM_OC5_SetConfig+0xac>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d003      	beq.n	8005e12 <TIM_OC5_SetConfig+0x66>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a13      	ldr	r2, [pc, #76]	@ (8005e5c <TIM_OC5_SetConfig+0xb0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d109      	bne.n	8005e26 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	4a0c      	ldr	r2, [pc, #48]	@ (8005e48 <TIM_OC5_SetConfig+0x9c>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	621a      	str	r2, [r3, #32]
}
 8005e40:	46c0      	nop			@ (mov r8, r8)
 8005e42:	46bd      	mov	sp, r7
 8005e44:	b006      	add	sp, #24
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	fffeffff 	.word	0xfffeffff
 8005e4c:	fffeff8f 	.word	0xfffeff8f
 8005e50:	fffdffff 	.word	0xfffdffff
 8005e54:	40012c00 	.word	0x40012c00
 8005e58:	40014400 	.word	0x40014400
 8005e5c:	40014800 	.word	0x40014800

08005e60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	4a22      	ldr	r2, [pc, #136]	@ (8005f00 <TIM_OC6_SetConfig+0xa0>)
 8005e76:	401a      	ands	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8005f04 <TIM_OC6_SetConfig+0xa4>)
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	021b      	lsls	r3, r3, #8
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005f08 <TIM_OC6_SetConfig+0xa8>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	051b      	lsls	r3, r3, #20
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a16      	ldr	r2, [pc, #88]	@ (8005f0c <TIM_OC6_SetConfig+0xac>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d007      	beq.n	8005ec8 <TIM_OC6_SetConfig+0x68>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a15      	ldr	r2, [pc, #84]	@ (8005f10 <TIM_OC6_SetConfig+0xb0>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d003      	beq.n	8005ec8 <TIM_OC6_SetConfig+0x68>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a14      	ldr	r2, [pc, #80]	@ (8005f14 <TIM_OC6_SetConfig+0xb4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d109      	bne.n	8005edc <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	4a13      	ldr	r2, [pc, #76]	@ (8005f18 <TIM_OC6_SetConfig+0xb8>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	029b      	lsls	r3, r3, #10
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	621a      	str	r2, [r3, #32]
}
 8005ef6:	46c0      	nop			@ (mov r8, r8)
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	b006      	add	sp, #24
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	46c0      	nop			@ (mov r8, r8)
 8005f00:	ffefffff 	.word	0xffefffff
 8005f04:	feff8fff 	.word	0xfeff8fff
 8005f08:	ffdfffff 	.word	0xffdfffff
 8005f0c:	40012c00 	.word	0x40012c00
 8005f10:	40014400 	.word	0x40014400
 8005f14:	40014800 	.word	0x40014800
 8005f18:	fffbffff 	.word	0xfffbffff

08005f1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	221f      	movs	r2, #31
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	2201      	movs	r2, #1
 8005f30:	409a      	lsls	r2, r3
 8005f32:	0013      	movs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	43d2      	mvns	r2, r2
 8005f3e:	401a      	ands	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a1a      	ldr	r2, [r3, #32]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	211f      	movs	r1, #31
 8005f4c:	400b      	ands	r3, r1
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	4099      	lsls	r1, r3
 8005f52:	000b      	movs	r3, r1
 8005f54:	431a      	orrs	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	621a      	str	r2, [r3, #32]
}
 8005f5a:	46c0      	nop			@ (mov r8, r8)
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	b006      	add	sp, #24
 8005f60:	bd80      	pop	{r7, pc}
	...

08005f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	223c      	movs	r2, #60	@ 0x3c
 8005f72:	5c9b      	ldrb	r3, [r3, r2]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d101      	bne.n	8005f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e050      	b.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	223c      	movs	r2, #60	@ 0x3c
 8005f80:	2101      	movs	r1, #1
 8005f82:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	223d      	movs	r2, #61	@ 0x3d
 8005f88:	2102      	movs	r1, #2
 8005f8a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a21      	ldr	r2, [pc, #132]	@ (8006028 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d108      	bne.n	8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4a20      	ldr	r2, [pc, #128]	@ (800602c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005faa:	4013      	ands	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2270      	movs	r2, #112	@ 0x70
 8005fbc:	4393      	bics	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a14      	ldr	r2, [pc, #80]	@ (8006028 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00a      	beq.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	2380      	movs	r3, #128	@ 0x80
 8005fe2:	05db      	lsls	r3, r3, #23
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d004      	beq.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a10      	ldr	r2, [pc, #64]	@ (8006030 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d10c      	bne.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	2280      	movs	r2, #128	@ 0x80
 8005ff6:	4393      	bics	r3, r2
 8005ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	4313      	orrs	r3, r2
 8006002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	223d      	movs	r2, #61	@ 0x3d
 8006010:	2101      	movs	r1, #1
 8006012:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	223c      	movs	r2, #60	@ 0x3c
 8006018:	2100      	movs	r1, #0
 800601a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	0018      	movs	r0, r3
 8006020:	46bd      	mov	sp, r7
 8006022:	b004      	add	sp, #16
 8006024:	bd80      	pop	{r7, pc}
 8006026:	46c0      	nop			@ (mov r8, r8)
 8006028:	40012c00 	.word	0x40012c00
 800602c:	ff0fffff 	.word	0xff0fffff
 8006030:	40000400 	.word	0x40000400

08006034 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800603c:	46c0      	nop			@ (mov r8, r8)
 800603e:	46bd      	mov	sp, r7
 8006040:	b002      	add	sp, #8
 8006042:	bd80      	pop	{r7, pc}

08006044 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800604c:	46c0      	nop			@ (mov r8, r8)
 800604e:	46bd      	mov	sp, r7
 8006050:	b002      	add	sp, #8
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800605c:	46c0      	nop			@ (mov r8, r8)
 800605e:	46bd      	mov	sp, r7
 8006060:	b002      	add	sp, #8
 8006062:	bd80      	pop	{r7, pc}

08006064 <memset>:
 8006064:	0003      	movs	r3, r0
 8006066:	1882      	adds	r2, r0, r2
 8006068:	4293      	cmp	r3, r2
 800606a:	d100      	bne.n	800606e <memset+0xa>
 800606c:	4770      	bx	lr
 800606e:	7019      	strb	r1, [r3, #0]
 8006070:	3301      	adds	r3, #1
 8006072:	e7f9      	b.n	8006068 <memset+0x4>

08006074 <__libc_init_array>:
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	2600      	movs	r6, #0
 8006078:	4c0c      	ldr	r4, [pc, #48]	@ (80060ac <__libc_init_array+0x38>)
 800607a:	4d0d      	ldr	r5, [pc, #52]	@ (80060b0 <__libc_init_array+0x3c>)
 800607c:	1b64      	subs	r4, r4, r5
 800607e:	10a4      	asrs	r4, r4, #2
 8006080:	42a6      	cmp	r6, r4
 8006082:	d109      	bne.n	8006098 <__libc_init_array+0x24>
 8006084:	2600      	movs	r6, #0
 8006086:	f000 f823 	bl	80060d0 <_init>
 800608a:	4c0a      	ldr	r4, [pc, #40]	@ (80060b4 <__libc_init_array+0x40>)
 800608c:	4d0a      	ldr	r5, [pc, #40]	@ (80060b8 <__libc_init_array+0x44>)
 800608e:	1b64      	subs	r4, r4, r5
 8006090:	10a4      	asrs	r4, r4, #2
 8006092:	42a6      	cmp	r6, r4
 8006094:	d105      	bne.n	80060a2 <__libc_init_array+0x2e>
 8006096:	bd70      	pop	{r4, r5, r6, pc}
 8006098:	00b3      	lsls	r3, r6, #2
 800609a:	58eb      	ldr	r3, [r5, r3]
 800609c:	4798      	blx	r3
 800609e:	3601      	adds	r6, #1
 80060a0:	e7ee      	b.n	8006080 <__libc_init_array+0xc>
 80060a2:	00b3      	lsls	r3, r6, #2
 80060a4:	58eb      	ldr	r3, [r5, r3]
 80060a6:	4798      	blx	r3
 80060a8:	3601      	adds	r6, #1
 80060aa:	e7f2      	b.n	8006092 <__libc_init_array+0x1e>
 80060ac:	080061b4 	.word	0x080061b4
 80060b0:	080061b4 	.word	0x080061b4
 80060b4:	080061b8 	.word	0x080061b8
 80060b8:	080061b4 	.word	0x080061b4

080060bc <memcpy>:
 80060bc:	2300      	movs	r3, #0
 80060be:	b510      	push	{r4, lr}
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d100      	bne.n	80060c6 <memcpy+0xa>
 80060c4:	bd10      	pop	{r4, pc}
 80060c6:	5ccc      	ldrb	r4, [r1, r3]
 80060c8:	54c4      	strb	r4, [r0, r3]
 80060ca:	3301      	adds	r3, #1
 80060cc:	e7f8      	b.n	80060c0 <memcpy+0x4>
	...

080060d0 <_init>:
 80060d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d2:	46c0      	nop			@ (mov r8, r8)
 80060d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060d6:	bc08      	pop	{r3}
 80060d8:	469e      	mov	lr, r3
 80060da:	4770      	bx	lr

080060dc <_fini>:
 80060dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060de:	46c0      	nop			@ (mov r8, r8)
 80060e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e2:	bc08      	pop	{r3}
 80060e4:	469e      	mov	lr, r3
 80060e6:	4770      	bx	lr
