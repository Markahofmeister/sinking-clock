
sinking-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006228  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080062e4  080062e4  000072e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063b0  080063b0  00008070  2**0
                  CONTENTS
  4 .ARM          00000000  080063b0  080063b0  00008070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063b0  080063b0  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063b0  080063b0  000073b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063b4  080063b4  000073b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080063b8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000070  08006428  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08006428  0000829c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ccf  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bbf  00000000  00000000  0001ad67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0001d928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2b  00000000  00000000  0001eb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018116  00000000  00000000  0001f983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165c8  00000000  00000000  00037a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098441  00000000  00000000  0004e061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e64a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041d0  00000000  00000000  000e64e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000ea6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080062cc 	.word	0x080062cc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080062cc 	.word	0x080062cc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	b089      	sub	sp, #36	@ 0x24
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231f      	movs	r3, #31
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	2108      	movs	r1, #8
 800024a:	185b      	adds	r3, r3, r1
 800024c:	19db      	adds	r3, r3, r7
 800024e:	881b      	ldrh	r3, [r3, #0]
 8000250:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-high hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	6818      	ldr	r0, [r3, #0]
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	899b      	ldrh	r3, [r3, #12]
 800025c:	2201      	movs	r2, #1
 800025e:	0019      	movs	r1, r3
 8000260:	f002 fb45 	bl	80028ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	689b      	ldr	r3, [r3, #8]
 8000268:	6818      	ldr	r0, [r3, #0]
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	899b      	ldrh	r3, [r3, #12]
 800026e:	2200      	movs	r2, #0
 8000270:	0019      	movs	r1, r3
 8000272:	f002 fb3c 	bl	80028ee <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	0018      	movs	r0, r3
 800027c:	f005 f826 	bl	80052cc <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	0018      	movs	r0, r3
 8000286:	f004 ffd5 	bl	8005234 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000292:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000294:	46c0      	nop			@ (mov r8, r8)
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029e:	69bb      	ldr	r3, [r7, #24]
 80002a0:	1ad2      	subs	r2, r2, r3
 80002a2:	2380      	movs	r3, #128	@ 0x80
 80002a4:	021b      	lsls	r3, r3, #8
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d3f5      	bcc.n	8000296 <capTouch_Init+0x7a>

	// Verify device ID
	uint8_t deviceIDRet = 0x00;
 80002aa:	2517      	movs	r5, #23
 80002ac:	197b      	adds	r3, r7, r5
 80002ae:	2200      	movs	r2, #0
 80002b0:	701a      	strb	r2, [r3, #0]
	halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b2:	261f      	movs	r6, #31
 80002b4:	19bc      	adds	r4, r7, r6
 80002b6:	197a      	adds	r2, r7, r5
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	0011      	movs	r1, r2
 80002bc:	0018      	movs	r0, r3
 80002be:	f000 f855 	bl	800036c <capTouch_ReadDeviceID>
 80002c2:	0003      	movs	r3, r0
 80002c4:	7023      	strb	r3, [r4, #0]

	if(deviceIDRet != DEVICE_ID || halRet != HAL_OK) {
 80002c6:	197b      	adds	r3, r7, r5
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80002cc:	d103      	bne.n	80002d6 <capTouch_Init+0xba>
 80002ce:	19bb      	adds	r3, r7, r6
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <capTouch_Init+0xbe>
		return 1;
 80002d6:	2301      	movs	r3, #1
 80002d8:	e043      	b.n	8000362 <capTouch_Init+0x146>
	}

	capTouch->deviceID = deviceIDRet;
 80002da:	2317      	movs	r3, #23
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	781a      	ldrb	r2, [r3, #0]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	739a      	strb	r2, [r3, #14]

	// Force Device Recalibration
	halRet = capTouch_Recalibrate(capTouch);
 80002e4:	251f      	movs	r5, #31
 80002e6:	197c      	adds	r4, r7, r5
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 f880 	bl	80003f0 <capTouch_Recalibrate>
 80002f0:	0003      	movs	r3, r0
 80002f2:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 80002f4:	197b      	adds	r3, r7, r5
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <capTouch_Init+0xe4>
		return 2;
 80002fc:	2302      	movs	r3, #2
 80002fe:	e030      	b.n	8000362 <capTouch_Init+0x146>
	}

	// Wait until calibration sequence completes
	while(capTouch_checkCal(capTouch)) {}
 8000300:	46c0      	nop			@ (mov r8, r8)
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	0018      	movs	r0, r3
 8000306:	f000 f895 	bl	8000434 <capTouch_checkCal>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d1f9      	bne.n	8000302 <capTouch_Init+0xe6>

	// Get initial reading of channels
	halRet = capTouch_readChannels(capTouch);
 800030e:	251f      	movs	r5, #31
 8000310:	197c      	adds	r4, r7, r5
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	0018      	movs	r0, r3
 8000316:	f000 f8d1 	bl	80004bc <capTouch_readChannels>
 800031a:	0003      	movs	r3, r0
 800031c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 800031e:	197b      	adds	r3, r7, r5
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <capTouch_Init+0x10e>
		return 3;
 8000326:	2303      	movs	r3, #3
 8000328:	e01b      	b.n	8000362 <capTouch_Init+0x146>
	}

	halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 800032a:	251f      	movs	r5, #31
 800032c:	197c      	adds	r4, r7, r5
 800032e:	2334      	movs	r3, #52	@ 0x34
 8000330:	2208      	movs	r2, #8
 8000332:	189b      	adds	r3, r3, r2
 8000334:	19db      	adds	r3, r3, r7
 8000336:	781a      	ldrb	r2, [r3, #0]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	0011      	movs	r1, r2
 800033c:	0018      	movs	r0, r3
 800033e:	f000 f901 	bl	8000544 <capTouch_enableKeys>
 8000342:	0003      	movs	r3, r0
 8000344:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000346:	197b      	adds	r3, r7, r5
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <capTouch_Init+0x136>
		return 4;
 800034e:	2304      	movs	r3, #4
 8000350:	e007      	b.n	8000362 <capTouch_Init+0x146>
	}
	capTouch->keys = keyEnFlags;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	2234      	movs	r2, #52	@ 0x34
 8000356:	2108      	movs	r1, #8
 8000358:	1852      	adds	r2, r2, r1
 800035a:	19d2      	adds	r2, r2, r7
 800035c:	7812      	ldrb	r2, [r2, #0]
 800035e:	73da      	strb	r2, [r3, #15]

	return 0;
 8000360:	2300      	movs	r3, #0

}
 8000362:	0018      	movs	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	b009      	add	sp, #36	@ 0x24
 8000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800036c <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 800036c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036e:	b087      	sub	sp, #28
 8000370:	af02      	add	r7, sp, #8
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 8000376:	230e      	movs	r3, #14
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800037e:	250f      	movs	r5, #15
 8000380:	197b      	adds	r3, r7, r5
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 8000386:	210c      	movs	r1, #12
 8000388:	187b      	adds	r3, r7, r1
 800038a:	4a18      	ldr	r2, [pc, #96]	@ (80003ec <capTouch_ReadDeviceID+0x80>)
 800038c:	7812      	ldrb	r2, [r2, #0]
 800038e:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	6818      	ldr	r0, [r3, #0]
 8000394:	197c      	adds	r4, r7, r5
 8000396:	187a      	adds	r2, r7, r1
 8000398:	2301      	movs	r3, #1
 800039a:	425b      	negs	r3, r3
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	2301      	movs	r3, #1
 80003a0:	2136      	movs	r1, #54	@ 0x36
 80003a2:	f002 fbb7 	bl	8002b14 <HAL_I2C_Master_Transmit>
 80003a6:	0003      	movs	r3, r0
 80003a8:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80003aa:	197b      	adds	r3, r7, r5
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d002      	beq.n	80003b8 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 80003b2:	197b      	adds	r3, r7, r5
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	e014      	b.n	80003e2 <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6818      	ldr	r0, [r3, #0]
 80003bc:	250f      	movs	r5, #15
 80003be:	197c      	adds	r4, r7, r5
 80003c0:	260e      	movs	r6, #14
 80003c2:	19ba      	adds	r2, r7, r6
 80003c4:	2301      	movs	r3, #1
 80003c6:	425b      	negs	r3, r3
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	2301      	movs	r3, #1
 80003cc:	2136      	movs	r1, #54	@ 0x36
 80003ce:	f002 fccb 	bl	8002d68 <HAL_I2C_Master_Receive>
 80003d2:	0003      	movs	r3, r0
 80003d4:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 80003d6:	19bb      	adds	r3, r7, r6
 80003d8:	781a      	ldrb	r2, [r3, #0]
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	701a      	strb	r2, [r3, #0]

	return halRet;
 80003de:	197b      	adds	r3, r7, r5
 80003e0:	781b      	ldrb	r3, [r3, #0]

}
 80003e2:	0018      	movs	r0, r3
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b005      	add	sp, #20
 80003e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ea:	46c0      	nop			@ (mov r8, r8)
 80003ec:	080062e4 	.word	0x080062e4

080003f0 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80003f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f2:	b087      	sub	sp, #28
 80003f4:	af02      	add	r7, sp, #8
 80003f6:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80003f8:	210f      	movs	r1, #15
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2200      	movs	r2, #0
 80003fe:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 8000400:	260c      	movs	r6, #12
 8000402:	19bb      	adds	r3, r7, r6
 8000404:	22c8      	movs	r2, #200	@ 0xc8
 8000406:	4252      	negs	r2, r2
 8000408:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	6818      	ldr	r0, [r3, #0]
 800040e:	000d      	movs	r5, r1
 8000410:	187c      	adds	r4, r7, r1
 8000412:	19ba      	adds	r2, r7, r6
 8000414:	2301      	movs	r3, #1
 8000416:	425b      	negs	r3, r3
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2302      	movs	r3, #2
 800041c:	2136      	movs	r1, #54	@ 0x36
 800041e:	f002 fb79 	bl	8002b14 <HAL_I2C_Master_Transmit>
 8000422:	0003      	movs	r3, r0
 8000424:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 8000426:	197b      	adds	r3, r7, r5
 8000428:	781b      	ldrb	r3, [r3, #0]

}
 800042a:	0018      	movs	r0, r3
 800042c:	46bd      	mov	sp, r7
 800042e:	b005      	add	sp, #20
 8000430:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000434 <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	b087      	sub	sp, #28
 8000438:	af02      	add	r7, sp, #8
 800043a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800043c:	210f      	movs	r1, #15
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 8000444:	230d      	movs	r3, #13
 8000446:	18fb      	adds	r3, r7, r3
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 800044c:	260c      	movs	r6, #12
 800044e:	19bb      	adds	r3, r7, r6
 8000450:	4a19      	ldr	r2, [pc, #100]	@ (80004b8 <capTouch_checkCal+0x84>)
 8000452:	7812      	ldrb	r2, [r2, #0]
 8000454:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	000d      	movs	r5, r1
 800045c:	187c      	adds	r4, r7, r1
 800045e:	19ba      	adds	r2, r7, r6
 8000460:	2301      	movs	r3, #1
 8000462:	425b      	negs	r3, r3
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	2301      	movs	r3, #1
 8000468:	2136      	movs	r1, #54	@ 0x36
 800046a:	f002 fb53 	bl	8002b14 <HAL_I2C_Master_Transmit>
 800046e:	0003      	movs	r3, r0
 8000470:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000472:	197b      	adds	r3, r7, r5
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d002      	beq.n	8000480 <capTouch_checkCal+0x4c>
		return halRet;
 800047a:	197b      	adds	r3, r7, r5
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	e016      	b.n	80004ae <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6818      	ldr	r0, [r3, #0]
 8000484:	230f      	movs	r3, #15
 8000486:	18fc      	adds	r4, r7, r3
 8000488:	250d      	movs	r5, #13
 800048a:	197a      	adds	r2, r7, r5
 800048c:	2301      	movs	r3, #1
 800048e:	425b      	negs	r3, r3
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	2301      	movs	r3, #1
 8000494:	2136      	movs	r1, #54	@ 0x36
 8000496:	f002 fc67 	bl	8002d68 <HAL_I2C_Master_Receive>
 800049a:	0003      	movs	r3, r0
 800049c:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 800049e:	197b      	adds	r3, r7, r5
 80004a0:	781a      	ldrb	r2, [r3, #0]
 80004a2:	210e      	movs	r1, #14
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	09d2      	lsrs	r2, r2, #7
 80004a8:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	781b      	ldrb	r3, [r3, #0]

}
 80004ae:	0018      	movs	r0, r3
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b005      	add	sp, #20
 80004b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	080062e8 	.word	0x080062e8

080004bc <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	b087      	sub	sp, #28
 80004c0:	af02      	add	r7, sp, #8
 80004c2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004c4:	210f      	movs	r1, #15
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 80004cc:	230e      	movs	r3, #14
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	2200      	movs	r2, #0
 80004d2:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 80004d4:	260c      	movs	r6, #12
 80004d6:	19bb      	adds	r3, r7, r6
 80004d8:	4a19      	ldr	r2, [pc, #100]	@ (8000540 <capTouch_readChannels+0x84>)
 80004da:	7812      	ldrb	r2, [r2, #0]
 80004dc:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6818      	ldr	r0, [r3, #0]
 80004e2:	000d      	movs	r5, r1
 80004e4:	187c      	adds	r4, r7, r1
 80004e6:	19ba      	adds	r2, r7, r6
 80004e8:	2301      	movs	r3, #1
 80004ea:	425b      	negs	r3, r3
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	2136      	movs	r1, #54	@ 0x36
 80004f2:	f002 fb0f 	bl	8002b14 <HAL_I2C_Master_Transmit>
 80004f6:	0003      	movs	r3, r0
 80004f8:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80004fa:	197b      	adds	r3, r7, r5
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d002      	beq.n	8000508 <capTouch_readChannels+0x4c>
		return halRet;
 8000502:	197b      	adds	r3, r7, r5
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	e017      	b.n	8000538 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6818      	ldr	r0, [r3, #0]
 800050c:	250f      	movs	r5, #15
 800050e:	197c      	adds	r4, r7, r5
 8000510:	260e      	movs	r6, #14
 8000512:	19ba      	adds	r2, r7, r6
 8000514:	2301      	movs	r3, #1
 8000516:	425b      	negs	r3, r3
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	2136      	movs	r1, #54	@ 0x36
 800051e:	f002 fc23 	bl	8002d68 <HAL_I2C_Master_Receive>
 8000522:	0003      	movs	r3, r0
 8000524:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 8000526:	19bb      	adds	r3, r7, r6
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	227f      	movs	r2, #127	@ 0x7f
 800052c:	4013      	ands	r3, r2
 800052e:	b2da      	uxtb	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	741a      	strb	r2, [r3, #16]

	return halRet;
 8000534:	197b      	adds	r3, r7, r5
 8000536:	781b      	ldrb	r3, [r3, #0]

}
 8000538:	0018      	movs	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	b005      	add	sp, #20
 800053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000540:	080062ec 	.word	0x080062ec

08000544 <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	b08b      	sub	sp, #44	@ 0x2c
 8000548:	af02      	add	r7, sp, #8
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	000a      	movs	r2, r1
 800054e:	1cfb      	adds	r3, r7, #3
 8000550:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000552:	241e      	movs	r4, #30
 8000554:	193b      	adds	r3, r7, r4
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800055a:	2314      	movs	r3, #20
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	4a39      	ldr	r2, [pc, #228]	@ (8000644 <capTouch_enableKeys+0x100>)
 8000560:	6811      	ldr	r1, [r2, #0]
 8000562:	6019      	str	r1, [r3, #0]
 8000564:	8891      	ldrh	r1, [r2, #4]
 8000566:	8099      	strh	r1, [r3, #4]
 8000568:	7992      	ldrb	r2, [r2, #6]
 800056a:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 800056c:	260c      	movs	r6, #12
 800056e:	19bb      	adds	r3, r7, r6
 8000570:	4a35      	ldr	r2, [pc, #212]	@ (8000648 <capTouch_enableKeys+0x104>)
 8000572:	6811      	ldr	r1, [r2, #0]
 8000574:	6019      	str	r1, [r3, #0]
 8000576:	8891      	ldrh	r1, [r2, #4]
 8000578:	8099      	strh	r1, [r3, #4]
 800057a:	7992      	ldrb	r2, [r2, #6]
 800057c:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6818      	ldr	r0, [r3, #0]
 8000582:	0025      	movs	r5, r4
 8000584:	193c      	adds	r4, r7, r4
 8000586:	19ba      	adds	r2, r7, r6
 8000588:	2301      	movs	r3, #1
 800058a:	425b      	negs	r3, r3
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	2136      	movs	r1, #54	@ 0x36
 8000592:	f002 fabf 	bl	8002b14 <HAL_I2C_Master_Transmit>
 8000596:	0003      	movs	r3, r0
 8000598:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800059a:	197b      	adds	r3, r7, r5
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d002      	beq.n	80005a8 <capTouch_enableKeys+0x64>
		return halRet;
 80005a2:	197b      	adds	r3, r7, r5
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	e049      	b.n	800063c <capTouch_enableKeys+0xf8>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6818      	ldr	r0, [r3, #0]
 80005ac:	251e      	movs	r5, #30
 80005ae:	197c      	adds	r4, r7, r5
 80005b0:	2314      	movs	r3, #20
 80005b2:	18fa      	adds	r2, r7, r3
 80005b4:	2301      	movs	r3, #1
 80005b6:	425b      	negs	r3, r3
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2307      	movs	r3, #7
 80005bc:	2136      	movs	r1, #54	@ 0x36
 80005be:	f002 fbd3 	bl	8002d68 <HAL_I2C_Master_Receive>
 80005c2:	0003      	movs	r3, r0
 80005c4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80005c6:	197b      	adds	r3, r7, r5
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <capTouch_enableKeys+0x90>
		return halRet;
 80005ce:	197b      	adds	r3, r7, r5
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	e033      	b.n	800063c <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80005d4:	231f      	movs	r3, #31
 80005d6:	18fb      	adds	r3, r7, r3
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e01c      	b.n	8000618 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 80005de:	201f      	movs	r0, #31
 80005e0:	183b      	adds	r3, r7, r0
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2414      	movs	r4, #20
 80005e6:	193a      	adds	r2, r7, r4
 80005e8:	5cd3      	ldrb	r3, [r2, r3]
 80005ea:	089b      	lsrs	r3, r3, #2
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	1cfb      	adds	r3, r7, #3
 80005f0:	7819      	ldrb	r1, [r3, #0]
 80005f2:	183b      	adds	r3, r7, r0
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	4119      	asrs	r1, r3
 80005f8:	000b      	movs	r3, r1
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2101      	movs	r1, #1
 80005fe:	400b      	ands	r3, r1
 8000600:	b2d9      	uxtb	r1, r3
 8000602:	183b      	adds	r3, r7, r0
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	434a      	muls	r2, r1
 8000608:	b2d1      	uxtb	r1, r2
 800060a:	193a      	adds	r2, r7, r4
 800060c:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 800060e:	183b      	adds	r3, r7, r0
 8000610:	781a      	ldrb	r2, [r3, #0]
 8000612:	183b      	adds	r3, r7, r0
 8000614:	3201      	adds	r2, #1
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	231f      	movs	r3, #31
 800061a:	18fb      	adds	r3, r7, r3
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b06      	cmp	r3, #6
 8000620:	d9dd      	bls.n	80005de <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 8000622:	251e      	movs	r5, #30
 8000624:	197c      	adds	r4, r7, r5
 8000626:	2314      	movs	r3, #20
 8000628:	18fa      	adds	r2, r7, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f000 f80c 	bl	800064c <capTouch_SetAveragingFactor>
 8000634:	0003      	movs	r3, r0
 8000636:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000638:	197b      	adds	r3, r7, r5
 800063a:	781b      	ldrb	r3, [r3, #0]

}
 800063c:	0018      	movs	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	b009      	add	sp, #36	@ 0x24
 8000642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000644:	080062f0 	.word	0x080062f0
 8000648:	080062f8 	.word	0x080062f8

0800064c <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 800064c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064e:	b08b      	sub	sp, #44	@ 0x2c
 8000650:	af02      	add	r7, sp, #8
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000656:	241e      	movs	r4, #30
 8000658:	193b      	adds	r3, r7, r4
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800065e:	2314      	movs	r3, #20
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	4a5d      	ldr	r2, [pc, #372]	@ (80007d8 <capTouch_SetAveragingFactor+0x18c>)
 8000664:	6811      	ldr	r1, [r2, #0]
 8000666:	6019      	str	r1, [r3, #0]
 8000668:	8891      	ldrh	r1, [r2, #4]
 800066a:	8099      	strh	r1, [r3, #4]
 800066c:	7992      	ldrb	r2, [r2, #6]
 800066e:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000670:	260c      	movs	r6, #12
 8000672:	19bb      	adds	r3, r7, r6
 8000674:	4a59      	ldr	r2, [pc, #356]	@ (80007dc <capTouch_SetAveragingFactor+0x190>)
 8000676:	6811      	ldr	r1, [r2, #0]
 8000678:	6019      	str	r1, [r3, #0]
 800067a:	8891      	ldrh	r1, [r2, #4]
 800067c:	8099      	strh	r1, [r3, #4]
 800067e:	7992      	ldrb	r2, [r2, #6]
 8000680:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6818      	ldr	r0, [r3, #0]
 8000686:	0025      	movs	r5, r4
 8000688:	193c      	adds	r4, r7, r4
 800068a:	19ba      	adds	r2, r7, r6
 800068c:	2301      	movs	r3, #1
 800068e:	425b      	negs	r3, r3
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	2136      	movs	r1, #54	@ 0x36
 8000696:	f002 fa3d 	bl	8002b14 <HAL_I2C_Master_Transmit>
 800069a:	0003      	movs	r3, r0
 800069c:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800069e:	197b      	adds	r3, r7, r5
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d002      	beq.n	80006ac <capTouch_SetAveragingFactor+0x60>
		return halRet;
 80006a6:	197b      	adds	r3, r7, r5
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	e090      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6818      	ldr	r0, [r3, #0]
 80006b0:	251e      	movs	r5, #30
 80006b2:	197c      	adds	r4, r7, r5
 80006b4:	2314      	movs	r3, #20
 80006b6:	18fa      	adds	r2, r7, r3
 80006b8:	2301      	movs	r3, #1
 80006ba:	425b      	negs	r3, r3
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2307      	movs	r3, #7
 80006c0:	2136      	movs	r1, #54	@ 0x36
 80006c2:	f002 fb51 	bl	8002d68 <HAL_I2C_Master_Receive>
 80006c6:	0003      	movs	r3, r0
 80006c8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80006ca:	197b      	adds	r3, r7, r5
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d002      	beq.n	80006d8 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 80006d2:	197b      	adds	r3, r7, r5
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	e07a      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 80006d8:	2308      	movs	r3, #8
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	2200      	movs	r2, #0
 80006de:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 80006e0:	231d      	movs	r3, #29
 80006e2:	18fb      	adds	r3, r7, r3
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80006e8:	231f      	movs	r3, #31
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
 80006f0:	e041      	b.n	8000776 <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80006f2:	241f      	movs	r4, #31
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2214      	movs	r2, #20
 80006fa:	18ba      	adds	r2, r7, r2
 80006fc:	5cd2      	ldrb	r2, [r2, r3]
 80006fe:	201d      	movs	r0, #29
 8000700:	183b      	adds	r3, r7, r0
 8000702:	2103      	movs	r1, #3
 8000704:	400a      	ands	r2, r1
 8000706:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 8000708:	193b      	adds	r3, r7, r4
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	18d3      	adds	r3, r2, r3
 8000710:	781a      	ldrb	r2, [r3, #0]
 8000712:	251c      	movs	r5, #28
 8000714:	197b      	adds	r3, r7, r5
 8000716:	0092      	lsls	r2, r2, #2
 8000718:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 800071a:	183b      	adds	r3, r7, r0
 800071c:	1839      	adds	r1, r7, r0
 800071e:	197a      	adds	r2, r7, r5
 8000720:	7809      	ldrb	r1, [r1, #0]
 8000722:	7812      	ldrb	r2, [r2, #0]
 8000724:	430a      	orrs	r2, r1
 8000726:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 8000728:	193b      	adds	r3, r7, r4
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	220c      	movs	r2, #12
 800072e:	18ba      	adds	r2, r7, r2
 8000730:	5cd2      	ldrb	r2, [r2, r3]
 8000732:	2108      	movs	r1, #8
 8000734:	187b      	adds	r3, r7, r1
 8000736:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	183a      	adds	r2, r7, r0
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6818      	ldr	r0, [r3, #0]
 8000744:	251e      	movs	r5, #30
 8000746:	197c      	adds	r4, r7, r5
 8000748:	187a      	adds	r2, r7, r1
 800074a:	2301      	movs	r3, #1
 800074c:	425b      	negs	r3, r3
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2302      	movs	r3, #2
 8000752:	2136      	movs	r1, #54	@ 0x36
 8000754:	f002 f9de 	bl	8002b14 <HAL_I2C_Master_Transmit>
 8000758:	0003      	movs	r3, r0
 800075a:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 800075c:	197b      	adds	r3, r7, r5
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 8000764:	197b      	adds	r3, r7, r5
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	e031      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 800076a:	211f      	movs	r1, #31
 800076c:	187b      	adds	r3, r7, r1
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	187b      	adds	r3, r7, r1
 8000772:	3201      	adds	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	231f      	movs	r3, #31
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b06      	cmp	r3, #6
 800077e:	d9b8      	bls.n	80006f2 <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	251e      	movs	r5, #30
 8000786:	197c      	adds	r4, r7, r5
 8000788:	230c      	movs	r3, #12
 800078a:	18fa      	adds	r2, r7, r3
 800078c:	2301      	movs	r3, #1
 800078e:	425b      	negs	r3, r3
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	2136      	movs	r1, #54	@ 0x36
 8000796:	f002 f9bd 	bl	8002b14 <HAL_I2C_Master_Transmit>
 800079a:	0003      	movs	r3, r0
 800079c:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800079e:	197b      	adds	r3, r7, r5
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <capTouch_SetAveragingFactor+0x160>
		return halRet;
 80007a6:	197b      	adds	r3, r7, r5
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	e010      	b.n	80007ce <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	251e      	movs	r5, #30
 80007b2:	197c      	adds	r4, r7, r5
 80007b4:	2314      	movs	r3, #20
 80007b6:	18fa      	adds	r2, r7, r3
 80007b8:	2301      	movs	r3, #1
 80007ba:	425b      	negs	r3, r3
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2307      	movs	r3, #7
 80007c0:	2136      	movs	r1, #54	@ 0x36
 80007c2:	f002 fad1 	bl	8002d68 <HAL_I2C_Master_Receive>
 80007c6:	0003      	movs	r3, r0
 80007c8:	7023      	strb	r3, [r4, #0]

	return halRet;
 80007ca:	197b      	adds	r3, r7, r5
 80007cc:	781b      	ldrb	r3, [r3, #0]

}
 80007ce:	0018      	movs	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b009      	add	sp, #36	@ 0x24
 80007d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	080062f0 	.word	0x080062f0
 80007dc:	080062f8 	.word	0x080062f8

080007e0 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 80007e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e2:	b08b      	sub	sp, #44	@ 0x2c
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80007ea:	231e      	movs	r3, #30
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80007f2:	2314      	movs	r3, #20
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	4a31      	ldr	r2, [pc, #196]	@ (80008bc <capTouch_SetDetectionIntegrator+0xdc>)
 80007f8:	6811      	ldr	r1, [r2, #0]
 80007fa:	6019      	str	r1, [r3, #0]
 80007fc:	8891      	ldrh	r1, [r2, #4]
 80007fe:	8099      	strh	r1, [r3, #4]
 8000800:	7992      	ldrb	r2, [r2, #6]
 8000802:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 8000804:	2310      	movs	r3, #16
 8000806:	18fb      	adds	r3, r7, r3
 8000808:	2200      	movs	r2, #0
 800080a:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800080c:	231f      	movs	r3, #31
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
 8000814:	e022      	b.n	800085c <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 8000816:	251f      	movs	r5, #31
 8000818:	197b      	adds	r3, r7, r5
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2214      	movs	r2, #20
 800081e:	18ba      	adds	r2, r7, r2
 8000820:	5cd2      	ldrb	r2, [r2, r3]
 8000822:	2110      	movs	r1, #16
 8000824:	187b      	adds	r3, r7, r1
 8000826:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 8000828:	197b      	adds	r3, r7, r5
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	18d3      	adds	r3, r2, r3
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	187b      	adds	r3, r7, r1
 8000834:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6818      	ldr	r0, [r3, #0]
 800083a:	231e      	movs	r3, #30
 800083c:	18fc      	adds	r4, r7, r3
 800083e:	187a      	adds	r2, r7, r1
 8000840:	2301      	movs	r3, #1
 8000842:	425b      	negs	r3, r3
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2302      	movs	r3, #2
 8000848:	2136      	movs	r1, #54	@ 0x36
 800084a:	f002 f963 	bl	8002b14 <HAL_I2C_Master_Transmit>
 800084e:	0003      	movs	r3, r0
 8000850:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 8000852:	197b      	adds	r3, r7, r5
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	197b      	adds	r3, r7, r5
 8000858:	3201      	adds	r2, #1
 800085a:	701a      	strb	r2, [r3, #0]
 800085c:	231f      	movs	r3, #31
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b06      	cmp	r3, #6
 8000864:	d9d7      	bls.n	8000816 <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000866:	2608      	movs	r6, #8
 8000868:	19bb      	adds	r3, r7, r6
 800086a:	4a15      	ldr	r2, [pc, #84]	@ (80008c0 <capTouch_SetDetectionIntegrator+0xe0>)
 800086c:	6811      	ldr	r1, [r2, #0]
 800086e:	6019      	str	r1, [r3, #0]
 8000870:	8891      	ldrh	r1, [r2, #4]
 8000872:	8099      	strh	r1, [r3, #4]
 8000874:	7992      	ldrb	r2, [r2, #6]
 8000876:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	251e      	movs	r5, #30
 800087e:	197c      	adds	r4, r7, r5
 8000880:	2314      	movs	r3, #20
 8000882:	18fa      	adds	r2, r7, r3
 8000884:	2301      	movs	r3, #1
 8000886:	425b      	negs	r3, r3
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2301      	movs	r3, #1
 800088c:	2136      	movs	r1, #54	@ 0x36
 800088e:	f002 f941 	bl	8002b14 <HAL_I2C_Master_Transmit>
 8000892:	0003      	movs	r3, r0
 8000894:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6818      	ldr	r0, [r3, #0]
 800089a:	197c      	adds	r4, r7, r5
 800089c:	19ba      	adds	r2, r7, r6
 800089e:	2301      	movs	r3, #1
 80008a0:	425b      	negs	r3, r3
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2307      	movs	r3, #7
 80008a6:	2136      	movs	r1, #54	@ 0x36
 80008a8:	f002 fa5e 	bl	8002d68 <HAL_I2C_Master_Receive>
 80008ac:	0003      	movs	r3, r0
 80008ae:	7023      	strb	r3, [r4, #0]

	return halRet;
 80008b0:	197b      	adds	r3, r7, r5
 80008b2:	781b      	ldrb	r3, [r3, #0]

}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b009      	add	sp, #36	@ 0x24
 80008ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008bc:	08006300 	.word	0x08006300
 80008c0:	080062f0 	.word	0x080062f0

080008c4 <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


void initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b099      	sub	sp, #100	@ 0x64
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 80008d0:	2438      	movs	r4, #56	@ 0x38
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	0018      	movs	r0, r3
 80008d6:	2328      	movs	r3, #40	@ 0x28
 80008d8:	001a      	movs	r2, r3
 80008da:	2100      	movs	r1, #0
 80008dc:	f005 fcc0 	bl	8006260 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	0021      	movs	r1, r4
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	785b      	ldrb	r3, [r3, #1]
 80008ee:	3301      	adds	r3, #1
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	789a      	ldrb	r2, [r3, #2]
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	685a      	ldr	r2, [r3, #4]
 8000902:	187b      	adds	r3, r7, r1
 8000904:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	78da      	ldrb	r2, [r3, #3]
 800090a:	187b      	adds	r3, r7, r1
 800090c:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	78da      	ldrb	r2, [r3, #3]
 8000912:	187b      	adds	r3, r7, r1
 8000914:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000916:	0008      	movs	r0, r1
 8000918:	183b      	adds	r3, r7, r0
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800091e:	183b      	adds	r3, r7, r0
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000924:	183b      	adds	r3, r7, r0
 8000926:	4a11      	ldr	r2, [pc, #68]	@ (800096c <initRTCInternalAlarm+0xa8>)
 8000928:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800092a:	183b      	adds	r3, r7, r0
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000930:	183b      	adds	r3, r7, r0
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 8000936:	183b      	adds	r3, r7, r0
 8000938:	2220      	movs	r2, #32
 800093a:	2101      	movs	r1, #1
 800093c:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 800093e:	0001      	movs	r1, r0
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2280      	movs	r2, #128	@ 0x80
 8000944:	0052      	lsls	r2, r2, #1
 8000946:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8000948:	1879      	adds	r1, r7, r1
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	2200      	movs	r2, #0
 800094e:	0018      	movs	r0, r3
 8000950:	f003 fff8 	bl	8004944 <HAL_RTC_SetAlarm_IT>

	RTC_AlarmTypeDef internalAlarm_initTest;
	HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8000954:	2380      	movs	r3, #128	@ 0x80
 8000956:	005a      	lsls	r2, r3, #1
 8000958:	2310      	movs	r3, #16
 800095a:	18f9      	adds	r1, r7, r3
 800095c:	68f8      	ldr	r0, [r7, #12]
 800095e:	2300      	movs	r3, #0
 8000960:	f004 f930 	bl	8004bc4 <HAL_RTC_GetAlarm>


}
 8000964:	46c0      	nop			@ (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b019      	add	sp, #100	@ 0x64
 800096a:	bd90      	pop	{r4, r7, pc}
 800096c:	80800080 	.word	0x80800080

08000970 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2200      	movs	r2, #0
 8000982:	0018      	movs	r0, r3
 8000984:	f003 fea2 	bl	80046cc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2200      	movs	r2, #0
 800098e:	0018      	movs	r0, r3
 8000990:	f003 ff8a 	bl	80048a8 <HAL_RTC_GetDate>

}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b004      	add	sp, #16
 800099a:	bd80      	pop	{r7, pc}

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800099e:	b08d      	sub	sp, #52	@ 0x34
 80009a0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a2:	f001 fcbf 	bl	8002324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a6:	f000 f925 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009aa:	f000 fb39 	bl	8001020 <MX_GPIO_Init>
  MX_RTC_Init();
 80009ae:	f000 f9d5 	bl	8000d5c <MX_RTC_Init>
  MX_I2C1_Init();
 80009b2:	f000 f993 	bl	8000cdc <MX_I2C1_Init>
  MX_TIM14_Init();
 80009b6:	f000 fac5 	bl	8000f44 <MX_TIM14_Init>
  MX_TIM2_Init();
 80009ba:	f000 fa63 	bl	8000e84 <MX_TIM2_Init>
  MX_TIM16_Init();
 80009be:	f000 fae7 	bl	8000f90 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // Set Smooth Calibration Value

  HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 80009c2:	4b78      	ldr	r3, [pc, #480]	@ (8000ba4 <main+0x208>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2280      	movs	r2, #128	@ 0x80
 80009c8:	01d1      	lsls	r1, r2, #7
 80009ca:	4877      	ldr	r0, [pc, #476]	@ (8000ba8 <main+0x20c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	f004 faee 	bl	8004fae <HAL_RTCEx_SetSmoothCalib>
    							RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);

  uint8_t initRet = 0;
 80009d2:	2317      	movs	r3, #23
 80009d4:	18fb      	adds	r3, r7, r3
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]

  // Init the internal RTC alarm time to track the current time
  initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 80009da:	4a74      	ldr	r2, [pc, #464]	@ (8000bac <main+0x210>)
 80009dc:	4974      	ldr	r1, [pc, #464]	@ (8000bb0 <main+0x214>)
 80009de:	4b72      	ldr	r3, [pc, #456]	@ (8000ba8 <main+0x20c>)
 80009e0:	0018      	movs	r0, r3
 80009e2:	f7ff ff6f 	bl	80008c4 <initRTCInternalAlarm>

  // Initialize all GPIOs to be used with 7 segment display
    sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 80009e6:	2380      	movs	r3, #128	@ 0x80
 80009e8:	009c      	lsls	r4, r3, #2
 80009ea:	2380      	movs	r3, #128	@ 0x80
 80009ec:	00dd      	lsls	r5, r3, #3
 80009ee:	2680      	movs	r6, #128	@ 0x80
 80009f0:	2240      	movs	r2, #64	@ 0x40
 80009f2:	4694      	mov	ip, r2
 80009f4:	2380      	movs	r3, #128	@ 0x80
 80009f6:	011a      	lsls	r2, r3, #4
 80009f8:	4b6e      	ldr	r3, [pc, #440]	@ (8000bb4 <main+0x218>)
 80009fa:	6819      	ldr	r1, [r3, #0]
 80009fc:	4b6e      	ldr	r3, [pc, #440]	@ (8000bb8 <main+0x21c>)
 80009fe:	6818      	ldr	r0, [r3, #0]
 8000a00:	4b6e      	ldr	r3, [pc, #440]	@ (8000bbc <main+0x220>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	9304      	str	r3, [sp, #16]
 8000a06:	9003      	str	r0, [sp, #12]
 8000a08:	9102      	str	r1, [sp, #8]
 8000a0a:	4b6d      	ldr	r3, [pc, #436]	@ (8000bc0 <main+0x224>)
 8000a0c:	9301      	str	r3, [sp, #4]
 8000a0e:	9200      	str	r2, [sp, #0]
 8000a10:	4663      	mov	r3, ip
 8000a12:	0032      	movs	r2, r6
 8000a14:	0029      	movs	r1, r5
 8000a16:	0020      	movs	r0, r4
 8000a18:	f001 f874 	bl	8001b04 <sevSeg_Init>
				shiftOutputEnablePin, shiftMCLRPin,
				GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);


	HAL_StatusTypeDef halRet = updateAndDisplayTime();
 8000a1c:	2216      	movs	r2, #22
 8000a1e:	18bc      	adds	r4, r7, r2
 8000a20:	f000 fbe0 	bl	80011e4 <updateAndDisplayTime>
 8000a24:	0003      	movs	r3, r0
 8000a26:	7023      	strb	r3, [r4, #0]

    /*
     * Initialize capacitive touch sensor
     */

    initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 8000a28:	4b62      	ldr	r3, [pc, #392]	@ (8000bb4 <main+0x218>)
 8000a2a:	681d      	ldr	r5, [r3, #0]
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4a64      	ldr	r2, [pc, #400]	@ (8000bc4 <main+0x228>)
 8000a32:	7812      	ldrb	r2, [r2, #0]
 8000a34:	2117      	movs	r1, #23
 8000a36:	187c      	adds	r4, r7, r1
 8000a38:	4e63      	ldr	r6, [pc, #396]	@ (8000bc8 <main+0x22c>)
 8000a3a:	4964      	ldr	r1, [pc, #400]	@ (8000bcc <main+0x230>)
 8000a3c:	4864      	ldr	r0, [pc, #400]	@ (8000bd0 <main+0x234>)
 8000a3e:	9201      	str	r2, [sp, #4]
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	0033      	movs	r3, r6
 8000a44:	002a      	movs	r2, r5
 8000a46:	f7ff fbe9 	bl	800021c <capTouch_Init>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	7023      	strb	r3, [r4, #0]
    						&capTouchResetPort, capTouchResetPin, capTouchChannels);

    if(initRet != 0) {
 8000a4e:	2117      	movs	r1, #23
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <main+0xc0>
    	dispError();
 8000a58:	f000 ffe2 	bl	8001a20 <dispError>
    }

    // Max. out averaging factor
    uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 8000a5c:	4b5d      	ldr	r3, [pc, #372]	@ (8000bd4 <main+0x238>)
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	210c      	movs	r1, #12
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	4b5b      	ldr	r3, [pc, #364]	@ (8000bd4 <main+0x238>)
 8000a68:	781a      	ldrb	r2, [r3, #0]
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	705a      	strb	r2, [r3, #1]
 8000a6e:	4b59      	ldr	r3, [pc, #356]	@ (8000bd4 <main+0x238>)
 8000a70:	781a      	ldrb	r2, [r3, #0]
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	709a      	strb	r2, [r3, #2]
 8000a76:	4b57      	ldr	r3, [pc, #348]	@ (8000bd4 <main+0x238>)
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	70da      	strb	r2, [r3, #3]
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2200      	movs	r2, #0
 8000a82:	711a      	strb	r2, [r3, #4]
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2200      	movs	r2, #0
 8000a88:	715a      	strb	r2, [r3, #5]
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000a90:	2516      	movs	r5, #22
 8000a92:	197c      	adds	r4, r7, r5
 8000a94:	187a      	adds	r2, r7, r1
 8000a96:	4b4e      	ldr	r3, [pc, #312]	@ (8000bd0 <main+0x234>)
 8000a98:	0011      	movs	r1, r2
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f7ff fdd6 	bl	800064c <capTouch_SetAveragingFactor>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	7023      	strb	r3, [r4, #0]

    if(halRet != HAL_OK) {
 8000aa4:	197b      	adds	r3, r7, r5
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <main+0x114>
    	dispError();
 8000aac:	f000 ffb8 	bl	8001a20 <dispError>
    }

    // Set detection integration factors
    uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 8000ab0:	4b49      	ldr	r3, [pc, #292]	@ (8000bd8 <main+0x23c>)
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	701a      	strb	r2, [r3, #0]
 8000ab8:	4b47      	ldr	r3, [pc, #284]	@ (8000bd8 <main+0x23c>)
 8000aba:	781a      	ldrb	r2, [r3, #0]
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	705a      	strb	r2, [r3, #1]
 8000ac0:	4b45      	ldr	r3, [pc, #276]	@ (8000bd8 <main+0x23c>)
 8000ac2:	781a      	ldrb	r2, [r3, #0]
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	709a      	strb	r2, [r3, #2]
 8000ac8:	4b43      	ldr	r3, [pc, #268]	@ (8000bd8 <main+0x23c>)
 8000aca:	781a      	ldrb	r2, [r3, #0]
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	70da      	strb	r2, [r3, #3]
 8000ad0:	4b41      	ldr	r3, [pc, #260]	@ (8000bd8 <main+0x23c>)
 8000ad2:	781a      	ldrb	r2, [r3, #0]
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	711a      	strb	r2, [r3, #4]
 8000ad8:	4b3f      	ldr	r3, [pc, #252]	@ (8000bd8 <main+0x23c>)
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	715a      	strb	r2, [r3, #5]
 8000ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8000bd8 <main+0x23c>)
 8000ae2:	781a      	ldrb	r2, [r3, #0]
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	719a      	strb	r2, [r3, #6]
    halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 8000ae8:	2516      	movs	r5, #22
 8000aea:	197c      	adds	r4, r7, r5
 8000aec:	1d3a      	adds	r2, r7, #4
 8000aee:	4b38      	ldr	r3, [pc, #224]	@ (8000bd0 <main+0x234>)
 8000af0:	0011      	movs	r1, r2
 8000af2:	0018      	movs	r0, r3
 8000af4:	f7ff fe74 	bl	80007e0 <capTouch_SetDetectionIntegrator>
 8000af8:	0003      	movs	r3, r0
 8000afa:	7023      	strb	r3, [r4, #0]
    if(halRet != HAL_OK) {
 8000afc:	197b      	adds	r3, r7, r5
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <main+0x16c>
    	dispError();
 8000b04:	f000 ff8c 	bl	8001a20 <dispError>
    }

    userAlarmToggle = false;			//Default to off
 8000b08:	4b34      	ldr	r3, [pc, #208]	@ (8000bdc <main+0x240>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
     *
     * Else, initialize to whatever is stored in backup registers.
     */
//    j

    if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 8000b0e:	4b34      	ldr	r3, [pc, #208]	@ (8000be0 <main+0x244>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	4b25      	ldr	r3, [pc, #148]	@ (8000ba8 <main+0x20c>)
 8000b14:	0011      	movs	r1, r2
 8000b16:	0018      	movs	r0, r3
 8000b18:	f004 fb19 	bl	800514e <HAL_RTCEx_BKUPRead>
 8000b1c:	0003      	movs	r3, r0
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d11c      	bne.n	8000b5e <main+0x1c2>

    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 8000b24:	4b2f      	ldr	r3, [pc, #188]	@ (8000be4 <main+0x248>)
 8000b26:	6819      	ldr	r1, [r3, #0]
 8000b28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <main+0x20c>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f004 faf1 	bl	8005114 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 8000b32:	4b2d      	ldr	r3, [pc, #180]	@ (8000be8 <main+0x24c>)
 8000b34:	6819      	ldr	r1, [r3, #0]
 8000b36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba8 <main+0x20c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f004 faea 	bl	8005114 <HAL_RTCEx_BKUPWrite>
    	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 8000b40:	4b2a      	ldr	r3, [pc, #168]	@ (8000bec <main+0x250>)
 8000b42:	6819      	ldr	r1, [r3, #0]
 8000b44:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <main+0x20c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f004 fae3 	bl	8005114 <HAL_RTCEx_BKUPWrite>

    	// Write backup register with a non-zero value to signify that it has been initialized before
    	HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8000b4e:	4b24      	ldr	r3, [pc, #144]	@ (8000be0 <main+0x244>)
 8000b50:	6819      	ldr	r1, [r3, #0]
 8000b52:	2301      	movs	r3, #1
 8000b54:	425a      	negs	r2, r3
 8000b56:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <main+0x20c>)
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f004 fadb 	bl	8005114 <HAL_RTCEx_BKUPWrite>

    }

	userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8000b5e:	4b21      	ldr	r3, [pc, #132]	@ (8000be4 <main+0x248>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <main+0x20c>)
 8000b64:	0011      	movs	r1, r2
 8000b66:	0018      	movs	r0, r3
 8000b68:	f004 faf1 	bl	800514e <HAL_RTCEx_BKUPRead>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf0 <main+0x254>)
 8000b72:	701a      	strb	r2, [r3, #0]
	userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 8000b74:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <main+0x24c>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <main+0x20c>)
 8000b7a:	0011      	movs	r1, r2
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f004 fae6 	bl	800514e <HAL_RTCEx_BKUPRead>
 8000b82:	0003      	movs	r3, r0
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <main+0x254>)
 8000b88:	705a      	strb	r2, [r3, #1]
	userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 8000b8a:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <main+0x250>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <main+0x20c>)
 8000b90:	0011      	movs	r1, r2
 8000b92:	0018      	movs	r0, r3
 8000b94:	f004 fadb 	bl	800514e <HAL_RTCEx_BKUPRead>
 8000b98:	0003      	movs	r3, r0
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <main+0x254>)
 8000b9e:	70da      	strb	r2, [r3, #3]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ba0:	46c0      	nop			@ (mov r8, r8)
 8000ba2:	e7fd      	b.n	8000ba0 <main+0x204>
 8000ba4:	2000002c 	.word	0x2000002c
 8000ba8:	20000114 	.word	0x20000114
 8000bac:	200000a4 	.word	0x200000a4
 8000bb0:	20000090 	.word	0x20000090
 8000bb4:	20000044 	.word	0x20000044
 8000bb8:	20000040 	.word	0x20000040
 8000bbc:	20000030 	.word	0x20000030
 8000bc0:	20000014 	.word	0x20000014
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000004 	.word	0x20000004
 8000bcc:	200000c0 	.word	0x200000c0
 8000bd0:	20000228 	.word	0x20000228
 8000bd4:	20000009 	.word	0x20000009
 8000bd8:	2000000a 	.word	0x2000000a
 8000bdc:	2000008d 	.word	0x2000008d
 8000be0:	2000003c 	.word	0x2000003c
 8000be4:	200000bc 	.word	0x200000bc
 8000be8:	20000034 	.word	0x20000034
 8000bec:	20000038 	.word	0x20000038
 8000bf0:	200000a8 	.word	0x200000a8

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b093      	sub	sp, #76	@ 0x4c
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	2410      	movs	r4, #16
 8000bfc:	193b      	adds	r3, r7, r4
 8000bfe:	0018      	movs	r0, r3
 8000c00:	2338      	movs	r3, #56	@ 0x38
 8000c02:	001a      	movs	r2, r3
 8000c04:	2100      	movs	r1, #0
 8000c06:	f005 fb2b 	bl	8006260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	2310      	movs	r3, #16
 8000c10:	001a      	movs	r2, r3
 8000c12:	2100      	movs	r1, #0
 8000c14:	f005 fb24 	bl	8006260 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c18:	2380      	movs	r3, #128	@ 0x80
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f002 fd35 	bl	800368c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c22:	f002 fd15 	bl	8003650 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 8000c26:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd8 <SystemClock_Config+0xe4>)
 8000c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c2a:	2218      	movs	r2, #24
 8000c2c:	4393      	bics	r3, r2
 8000c2e:	001a      	movs	r2, r3
 8000c30:	4b29      	ldr	r3, [pc, #164]	@ (8000cd8 <SystemClock_Config+0xe4>)
 8000c32:	2108      	movs	r1, #8
 8000c34:	430a      	orrs	r2, r1
 8000c36:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	220e      	movs	r2, #14
 8000c3c:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	2201      	movs	r2, #1
 8000c42:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	2280      	movs	r2, #128	@ 0x80
 8000c48:	0052      	lsls	r2, r2, #1
 8000c4a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000c4c:	0021      	movs	r1, r4
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2240      	movs	r2, #64	@ 0x40
 8000c58:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2202      	movs	r2, #2
 8000c64:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2202      	movs	r2, #2
 8000c6a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	2208      	movs	r2, #8
 8000c76:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	2280      	movs	r2, #128	@ 0x80
 8000c7c:	0292      	lsls	r2, r2, #10
 8000c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2280      	movs	r2, #128	@ 0x80
 8000c84:	0492      	lsls	r2, r2, #18
 8000c86:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	2280      	movs	r2, #128	@ 0x80
 8000c8c:	0592      	lsls	r2, r2, #22
 8000c8e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	0018      	movs	r0, r3
 8000c94:	f002 fd3a 	bl	800370c <HAL_RCC_OscConfig>
 8000c98:	1e03      	subs	r3, r0, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c9c:	f000 ff2c 	bl	8001af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca0:	003b      	movs	r3, r7
 8000ca2:	2207      	movs	r2, #7
 8000ca4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca6:	003b      	movs	r3, r7
 8000ca8:	2202      	movs	r2, #2
 8000caa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cac:	003b      	movs	r3, r7
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cb2:	003b      	movs	r3, r7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cb8:	003b      	movs	r3, r7
 8000cba:	2102      	movs	r1, #2
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f003 f83f 	bl	8003d40 <HAL_RCC_ClockConfig>
 8000cc2:	1e03      	subs	r3, r0, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000cc6:	f000 ff17 	bl	8001af8 <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f003 fb3c 	bl	8004348 <HAL_RCCEx_EnableLSCO>
}
 8000cd0:	46c0      	nop			@ (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b013      	add	sp, #76	@ 0x4c
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	40021000 	.word	0x40021000

08000cdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d54 <MX_I2C1_Init+0x78>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d58 <MX_I2C1_Init+0x7c>)
 8000cea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f001 fe55 	bl	80029c8 <HAL_I2C_Init>
 8000d1e:	1e03      	subs	r3, r0, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d22:	f000 fee9 	bl	8001af8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d26:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f002 fbf8 	bl	8003520 <HAL_I2CEx_ConfigAnalogFilter>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d001      	beq.n	8000d38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d34:	f000 fee0 	bl	8001af8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d38:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f002 fc3b 	bl	80035b8 <HAL_I2CEx_ConfigDigitalFilter>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d001      	beq.n	8000d4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d46:	f000 fed7 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200000c0 	.word	0x200000c0
 8000d54:	40005400 	.word	0x40005400
 8000d58:	00602173 	.word	0x00602173

08000d5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	@ 0x30
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_DateTypeDef sDate = {0};
 8000d62:	232c      	movs	r3, #44	@ 0x2c
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	2328      	movs	r3, #40	@ 0x28
 8000d70:	001a      	movs	r2, r3
 8000d72:	2100      	movs	r1, #0
 8000d74:	f005 fa74 	bl	8006260 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d78:	4b3e      	ldr	r3, [pc, #248]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d7a:	4a3f      	ldr	r2, [pc, #252]	@ (8000e78 <MX_RTC_Init+0x11c>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d80:	2240      	movs	r2, #64	@ 0x40
 8000d82:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000d84:	4b3b      	ldr	r3, [pc, #236]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d86:	227f      	movs	r2, #127	@ 0x7f
 8000d88:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d8c:	22ff      	movs	r2, #255	@ 0xff
 8000d8e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d90:	4b38      	ldr	r3, [pc, #224]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d96:	4b37      	ldr	r3, [pc, #220]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d9c:	4b35      	ldr	r3, [pc, #212]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000da2:	4b34      	ldr	r3, [pc, #208]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000da4:	2280      	movs	r2, #128	@ 0x80
 8000da6:	05d2      	lsls	r2, r2, #23
 8000da8:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000daa:	4b32      	ldr	r3, [pc, #200]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000db0:	4b30      	ldr	r3, [pc, #192]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000db2:	0018      	movs	r0, r3
 8000db4:	f003 fb40 	bl	8004438 <HAL_RTC_Init>
 8000db8:	1e03      	subs	r3, r0, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 8000dbc:	f000 fe9c 	bl	8001af8 <Error_Handler>
//  {
//    Error_Handler();
//  }


  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000dc0:	212c      	movs	r1, #44	@ 0x2c
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2201      	movs	r2, #1
 8000dcc:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000dda:	1879      	adds	r1, r7, r1
 8000ddc:	4b25      	ldr	r3, [pc, #148]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	0018      	movs	r0, r3
 8000de2:	f003 fccf 	bl	8004784 <HAL_RTC_SetDate>
 8000de6:	1e03      	subs	r3, r0, #0
 8000de8:	d001      	beq.n	8000dee <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000dea:	f000 fe85 	bl	8001af8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2201      	movs	r2, #1
 8000df8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	4a18      	ldr	r2, [pc, #96]	@ (8000e7c <MX_RTC_Init+0x120>)
 8000e1c:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2220      	movs	r2, #32
 8000e2e:	2101      	movs	r1, #1
 8000e30:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2280      	movs	r2, #128	@ 0x80
 8000e36:	0052      	lsls	r2, r2, #1
 8000e38:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e3a:	1d39      	adds	r1, r7, #4
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	0018      	movs	r0, r3
 8000e42:	f003 fd7f 	bl	8004944 <HAL_RTC_SetAlarm_IT>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d001      	beq.n	8000e4e <MX_RTC_Init+0xf2>
  {
    Error_Handler();
 8000e4a:	f000 fe55 	bl	8001af8 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000e4e:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000e50:	2100      	movs	r1, #0
 8000e52:	0018      	movs	r0, r3
 8000e54:	f004 f90e 	bl	8005074 <HAL_RTCEx_SetCalibrationOutPut>
 8000e58:	1e03      	subs	r3, r0, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_RTC_Init+0x104>
  {
    Error_Handler();
 8000e5c:	f000 fe4c 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8000e60:	4907      	ldr	r1, [pc, #28]	@ (8000e80 <MX_RTC_Init+0x124>)
 8000e62:	4b04      	ldr	r3, [pc, #16]	@ (8000e74 <MX_RTC_Init+0x118>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	0018      	movs	r0, r3
 8000e68:	f003 fc30 	bl	80046cc <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 8000e6c:	46c0      	nop			@ (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b00c      	add	sp, #48	@ 0x30
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000114 	.word	0x20000114
 8000e78:	40002800 	.word	0x40002800
 8000e7c:	80800080 	.word	0x80800080
 8000e80:	20000090 	.word	0x20000090

08000e84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	@ 0x28
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8a:	231c      	movs	r3, #28
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	0018      	movs	r0, r3
 8000e90:	230c      	movs	r3, #12
 8000e92:	001a      	movs	r2, r3
 8000e94:	2100      	movs	r1, #0
 8000e96:	f005 f9e3 	bl	8006260 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e9a:	003b      	movs	r3, r7
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	231c      	movs	r3, #28
 8000ea0:	001a      	movs	r2, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	f005 f9dc 	bl	8006260 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ea8:	4b24      	ldr	r3, [pc, #144]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000eaa:	2280      	movs	r2, #128	@ 0x80
 8000eac:	05d2      	lsls	r2, r2, #23
 8000eae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8000eb0:	4b22      	ldr	r3, [pc, #136]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000eb2:	4a23      	ldr	r2, [pc, #140]	@ (8000f40 <MX_TIM2_Init+0xbc>)
 8000eb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b21      	ldr	r3, [pc, #132]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000ebe:	2263      	movs	r2, #99	@ 0x63
 8000ec0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ece:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f004 faa3 	bl	800541c <HAL_TIM_PWM_Init>
 8000ed6:	1e03      	subs	r3, r0, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000eda:	f000 fe0d 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ede:	211c      	movs	r1, #28
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eec:	187a      	adds	r2, r7, r1
 8000eee:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000ef0:	0011      	movs	r1, r2
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f005 f934 	bl	8006160 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef8:	1e03      	subs	r3, r0, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000efc:	f000 fdfc 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f00:	003b      	movs	r3, r7
 8000f02:	2260      	movs	r2, #96	@ 0x60
 8000f04:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f06:	003b      	movs	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0c:	003b      	movs	r3, r7
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f12:	003b      	movs	r3, r7
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f18:	0039      	movs	r1, r7
 8000f1a:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000f1c:	2208      	movs	r2, #8
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f004 fcba 	bl	8005898 <HAL_TIM_PWM_ConfigChannel>
 8000f24:	1e03      	subs	r3, r0, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000f28:	f000 fde6 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f2c:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <MX_TIM2_Init+0xb8>)
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f001 f934 	bl	800219c <HAL_TIM_MspPostInit>

}
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b00a      	add	sp, #40	@ 0x28
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000140 	.word	0x20000140
 8000f40:	0000031f 	.word	0x0000031f

08000f44 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f88 <MX_TIM14_Init+0x44>)
 8000f4c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f50:	22f4      	movs	r2, #244	@ 0xf4
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f8c <MX_TIM14_Init+0x48>)
 8000f60:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f62:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f6e:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <MX_TIM14_Init+0x40>)
 8000f70:	0018      	movs	r0, r3
 8000f72:	f004 f907 	bl	8005184 <HAL_TIM_Base_Init>
 8000f76:	1e03      	subs	r3, r0, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000f7a:	f000 fdbd 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	2000018c 	.word	0x2000018c
 8000f88:	40002000 	.word	0x40002000
 8000f8c:	0000ffff 	.word	0x0000ffff

08000f90 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000f94:	4b1d      	ldr	r3, [pc, #116]	@ (800100c <MX_TIM16_Init+0x7c>)
 8000f96:	4a1e      	ldr	r2, [pc, #120]	@ (8001010 <MX_TIM16_Init+0x80>)
 8000f98:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = (58595 / 10) - 1;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <MX_TIM16_Init+0x7c>)
 8000f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001014 <MX_TIM16_Init+0x84>)
 8000f9e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <MX_TIM16_Init+0x7c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000fa6:	4b19      	ldr	r3, [pc, #100]	@ (800100c <MX_TIM16_Init+0x7c>)
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8001018 <MX_TIM16_Init+0x88>)
 8000faa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fac:	4b17      	ldr	r3, [pc, #92]	@ (800100c <MX_TIM16_Init+0x7c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = timerSnooze_RCR;
 8000fb2:	2264      	movs	r2, #100	@ 0x64
 8000fb4:	4b15      	ldr	r3, [pc, #84]	@ (800100c <MX_TIM16_Init+0x7c>)
 8000fb6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	@ (800100c <MX_TIM16_Init+0x7c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000fbe:	4b13      	ldr	r3, [pc, #76]	@ (800100c <MX_TIM16_Init+0x7c>)
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f004 f8df 	bl	8005184 <HAL_TIM_Base_Init>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000fca:	f000 fd95 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  // Clear SR interrupts
  __HAL_TIM_CLEAR_IT(timerSnooze, TIM_IT_UPDATE);
 8000fce:	4b13      	ldr	r3, [pc, #76]	@ (800101c <MX_TIM16_Init+0x8c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	4252      	negs	r2, r2
 8000fd8:	611a      	str	r2, [r3, #16]

  // Re-write RCR with 10
	timerSnooze->Instance->RCR &= 0xFF00;
 8000fda:	4b10      	ldr	r3, [pc, #64]	@ (800101c <MX_TIM16_Init+0x8c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <MX_TIM16_Init+0x8c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	22ff      	movs	r2, #255	@ 0xff
 8000fea:	0212      	lsls	r2, r2, #8
 8000fec:	400a      	ands	r2, r1
 8000fee:	631a      	str	r2, [r3, #48]	@ 0x30
	timerSnooze->Instance->RCR |= timerSnooze_RCR;
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <MX_TIM16_Init+0x8c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ff8:	2164      	movs	r1, #100	@ 0x64
 8000ffa:	4b08      	ldr	r3, [pc, #32]	@ (800101c <MX_TIM16_Init+0x8c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	430a      	orrs	r2, r1
 8001002:	631a      	str	r2, [r3, #48]	@ 0x30


  /* USER CODE END TIM16_Init 2 */

}
 8001004:	46c0      	nop			@ (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	200001d8 	.word	0x200001d8
 8001010:	40014400 	.word	0x40014400
 8001014:	000016e2 	.word	0x000016e2
 8001018:	0000ffff 	.word	0x0000ffff
 800101c:	20000048 	.word	0x20000048

08001020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b08b      	sub	sp, #44	@ 0x2c
 8001024:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	2414      	movs	r4, #20
 8001028:	193b      	adds	r3, r7, r4
 800102a:	0018      	movs	r0, r3
 800102c:	2314      	movs	r3, #20
 800102e:	001a      	movs	r2, r3
 8001030:	2100      	movs	r1, #0
 8001032:	f005 f915 	bl	8006260 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	4b66      	ldr	r3, [pc, #408]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 8001038:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800103a:	4b65      	ldr	r3, [pc, #404]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 800103c:	2104      	movs	r1, #4
 800103e:	430a      	orrs	r2, r1
 8001040:	635a      	str	r2, [r3, #52]	@ 0x34
 8001042:	4b63      	ldr	r3, [pc, #396]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 8001044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001046:	2204      	movs	r2, #4
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	4b60      	ldr	r3, [pc, #384]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 8001050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001052:	4b5f      	ldr	r3, [pc, #380]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 8001054:	2101      	movs	r1, #1
 8001056:	430a      	orrs	r2, r1
 8001058:	635a      	str	r2, [r3, #52]	@ 0x34
 800105a:	4b5d      	ldr	r3, [pc, #372]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 800105c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800105e:	2201      	movs	r2, #1
 8001060:	4013      	ands	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001066:	4b5a      	ldr	r3, [pc, #360]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 8001068:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800106a:	4b59      	ldr	r3, [pc, #356]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 800106c:	2108      	movs	r1, #8
 800106e:	430a      	orrs	r2, r1
 8001070:	635a      	str	r2, [r3, #52]	@ 0x34
 8001072:	4b57      	ldr	r3, [pc, #348]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 8001074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001076:	2208      	movs	r2, #8
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	4b54      	ldr	r3, [pc, #336]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 8001080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001082:	4b53      	ldr	r3, [pc, #332]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 8001084:	2102      	movs	r1, #2
 8001086:	430a      	orrs	r2, r1
 8001088:	635a      	str	r2, [r3, #52]	@ 0x34
 800108a:	4b51      	ldr	r3, [pc, #324]	@ (80011d0 <MX_GPIO_Init+0x1b0>)
 800108c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800108e:	2202      	movs	r2, #2
 8001090:	4013      	ands	r3, r2
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 8001096:	494f      	ldr	r1, [pc, #316]	@ (80011d4 <MX_GPIO_Init+0x1b4>)
 8001098:	23a0      	movs	r3, #160	@ 0xa0
 800109a:	05db      	lsls	r3, r3, #23
 800109c:	2200      	movs	r2, #0
 800109e:	0018      	movs	r0, r3
 80010a0:	f001 fc25 	bl	80028ee <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 80010a4:	4b4c      	ldr	r3, [pc, #304]	@ (80011d8 <MX_GPIO_Init+0x1b8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0018      	movs	r0, r3
 80010ac:	f001 fc1f 	bl	80028ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTOUCH_RST_GPIO_Port, CTOUCH_RST_Pin, GPIO_PIN_RESET);
 80010b0:	2380      	movs	r3, #128	@ 0x80
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4849      	ldr	r0, [pc, #292]	@ (80011dc <MX_GPIO_Init+0x1bc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	0019      	movs	r1, r3
 80010ba:	f001 fc18 	bl	80028ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin BUZZER_OUT_Pin SHIFT_DATA_IN_Pin SHIFT_DATA_CLK_Pin
                           SHIFT_MCLR_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|BUZZER_OUT_Pin|SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin
 80010be:	193b      	adds	r3, r7, r4
 80010c0:	4a44      	ldr	r2, [pc, #272]	@ (80011d4 <MX_GPIO_Init+0x1b4>)
 80010c2:	601a      	str	r2, [r3, #0]
                          |SHIFT_MCLR_Pin|ALARM_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	193b      	adds	r3, r7, r4
 80010c6:	2201      	movs	r2, #1
 80010c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	193b      	adds	r3, r7, r4
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	193b      	adds	r3, r7, r4
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	193a      	adds	r2, r7, r4
 80010d8:	23a0      	movs	r3, #160	@ 0xa0
 80010da:	05db      	lsls	r3, r3, #23
 80010dc:	0011      	movs	r1, r2
 80010de:	0018      	movs	r0, r3
 80010e0:	f001 fa84 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	2204      	movs	r2, #4
 80010e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ea:	193b      	adds	r3, r7, r4
 80010ec:	2203      	movs	r2, #3
 80010ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	193b      	adds	r3, r7, r4
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	193a      	adds	r2, r7, r4
 80010f8:	23a0      	movs	r3, #160	@ 0xa0
 80010fa:	05db      	lsls	r3, r3, #23
 80010fc:	0011      	movs	r1, r2
 80010fe:	0018      	movs	r0, r3
 8001100:	f001 fa74 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8001104:	193b      	adds	r3, r7, r4
 8001106:	2280      	movs	r2, #128	@ 0x80
 8001108:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	193b      	adds	r3, r7, r4
 800110c:	2201      	movs	r2, #1
 800110e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	193b      	adds	r3, r7, r4
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	193b      	adds	r3, r7, r4
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 800111c:	193b      	adds	r3, r7, r4
 800111e:	4a2e      	ldr	r2, [pc, #184]	@ (80011d8 <MX_GPIO_Init+0x1b8>)
 8001120:	0019      	movs	r1, r3
 8001122:	0010      	movs	r0, r2
 8001124:	f001 fa62 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pin : MINUTE_SET_BUTTON_Pin */
  GPIO_InitStruct.Pin = MINUTE_SET_BUTTON_Pin;
 8001128:	193b      	adds	r3, r7, r4
 800112a:	2280      	movs	r2, #128	@ 0x80
 800112c:	0212      	lsls	r2, r2, #8
 800112e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001130:	193b      	adds	r3, r7, r4
 8001132:	2284      	movs	r2, #132	@ 0x84
 8001134:	0392      	lsls	r2, r2, #14
 8001136:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001138:	193b      	adds	r3, r7, r4
 800113a:	2201      	movs	r2, #1
 800113c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MINUTE_SET_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800113e:	193a      	adds	r2, r7, r4
 8001140:	23a0      	movs	r3, #160	@ 0xa0
 8001142:	05db      	lsls	r3, r3, #23
 8001144:	0011      	movs	r1, r2
 8001146:	0018      	movs	r0, r3
 8001148:	f001 fa50 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_Pin ALARM_SET_BUTTON_Pin ALARM_EN_BUTTON_Pin DISPLAY_BUTTON_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_Pin|ALARM_SET_BUTTON_Pin|ALARM_EN_BUTTON_Pin|DISPLAY_BUTTON_Pin;
 800114c:	0021      	movs	r1, r4
 800114e:	187b      	adds	r3, r7, r1
 8001150:	220f      	movs	r2, #15
 8001152:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001154:	187b      	adds	r3, r7, r1
 8001156:	2284      	movs	r2, #132	@ 0x84
 8001158:	0392      	lsls	r2, r2, #14
 800115a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115c:	187b      	adds	r3, r7, r1
 800115e:	2201      	movs	r2, #1
 8001160:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001162:	000c      	movs	r4, r1
 8001164:	187b      	adds	r3, r7, r1
 8001166:	4a1e      	ldr	r2, [pc, #120]	@ (80011e0 <MX_GPIO_Init+0x1c0>)
 8001168:	0019      	movs	r1, r3
 800116a:	0010      	movs	r0, r2
 800116c:	f001 fa3e 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pin : CTOUCH_RST_Pin */
  GPIO_InitStruct.Pin = CTOUCH_RST_Pin;
 8001170:	0021      	movs	r1, r4
 8001172:	187b      	adds	r3, r7, r1
 8001174:	2280      	movs	r2, #128	@ 0x80
 8001176:	0052      	lsls	r2, r2, #1
 8001178:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	187b      	adds	r3, r7, r1
 800117c:	2201      	movs	r2, #1
 800117e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	187b      	adds	r3, r7, r1
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CTOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 800118c:	187b      	adds	r3, r7, r1
 800118e:	4a13      	ldr	r2, [pc, #76]	@ (80011dc <MX_GPIO_Init+0x1bc>)
 8001190:	0019      	movs	r1, r3
 8001192:	0010      	movs	r0, r2
 8001194:	f001 fa2a 	bl	80025ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	2005      	movs	r0, #5
 800119e:	f001 f9f3 	bl	8002588 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80011a2:	2005      	movs	r0, #5
 80011a4:	f001 fa05 	bl	80025b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	2006      	movs	r0, #6
 80011ae:	f001 f9eb 	bl	8002588 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80011b2:	2006      	movs	r0, #6
 80011b4:	f001 f9fd 	bl	80025b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2101      	movs	r1, #1
 80011bc:	2007      	movs	r0, #7
 80011be:	f001 f9e3 	bl	8002588 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80011c2:	2007      	movs	r0, #7
 80011c4:	f001 f9f5 	bl	80025b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011c8:	46c0      	nop			@ (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b00b      	add	sp, #44	@ 0x2c
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	40021000 	.word	0x40021000
 80011d4:	00001f01 	.word	0x00001f01
 80011d8:	50000800 	.word	0x50000800
 80011dc:	50000400 	.word	0x50000400
 80011e0:	50000c00 	.word	0x50000c00

080011e4 <updateAndDisplayTime>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef updateAndDisplayTime(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 80011f0:	4a07      	ldr	r2, [pc, #28]	@ (8001210 <updateAndDisplayTime+0x2c>)
 80011f2:	4908      	ldr	r1, [pc, #32]	@ (8001214 <updateAndDisplayTime+0x30>)
 80011f4:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <updateAndDisplayTime+0x34>)
 80011f6:	0018      	movs	r0, r3
 80011f8:	f7ff fbba 	bl	8000970 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <updateAndDisplayTime+0x30>)
 80011fe:	0018      	movs	r0, r3
 8001200:	f000 fda0 	bl	8001d44 <sevSeg_updateDigits>

	return halRet;
 8001204:	1dfb      	adds	r3, r7, #7
 8001206:	781b      	ldrb	r3, [r3, #0]

}
 8001208:	0018      	movs	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	b002      	add	sp, #8
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200000a4 	.word	0x200000a4
 8001214:	20000090 	.word	0x20000090
 8001218:	20000114 	.word	0x20000114

0800121c <updateAndDisplayAlarm>:

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 8001228:	4b04      	ldr	r3, [pc, #16]	@ (800123c <updateAndDisplayAlarm+0x20>)
 800122a:	0018      	movs	r0, r3
 800122c:	f000 fd8a 	bl	8001d44 <sevSeg_updateDigits>

	return halRet;
 8001230:	1dfb      	adds	r3, r7, #7
 8001232:	781b      	ldrb	r3, [r3, #0]

}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	b002      	add	sp, #8
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200000a8 	.word	0x200000a8

08001240 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b08d      	sub	sp, #52	@ 0x34
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

	  //printf("Enter current time minute increment interrupt\n\r");

	  RTC_AlarmTypeDef sAlarm = {0};
 8001248:	2408      	movs	r4, #8
 800124a:	193b      	adds	r3, r7, r4
 800124c:	0018      	movs	r0, r3
 800124e:	2328      	movs	r3, #40	@ 0x28
 8001250:	001a      	movs	r2, r3
 8001252:	2100      	movs	r1, #0
 8001254:	f005 f804 	bl	8006260 <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8001258:	2380      	movs	r3, #128	@ 0x80
 800125a:	005a      	lsls	r2, r3, #1
 800125c:	1939      	adds	r1, r7, r4
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	2300      	movs	r3, #0
 8001262:	f003 fcaf 	bl	8004bc4 <HAL_RTC_GetAlarm>


	  if(sAlarm.AlarmTime.Minutes>58) {
 8001266:	193b      	adds	r3, r7, r4
 8001268:	785b      	ldrb	r3, [r3, #1]
 800126a:	2b3a      	cmp	r3, #58	@ 0x3a
 800126c:	d903      	bls.n	8001276 <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 800126e:	193b      	adds	r3, r7, r4
 8001270:	2200      	movs	r2, #0
 8001272:	705a      	strb	r2, [r3, #1]
 8001274:	e006      	b.n	8001284 <HAL_RTC_AlarmAEventCallback+0x44>
		//printf("Reset alarm time\n\r");
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8001276:	2108      	movs	r1, #8
 8001278:	187b      	adds	r3, r7, r1
 800127a:	785b      	ldrb	r3, [r3, #1]
 800127c:	3301      	adds	r3, #1
 800127e:	b2da      	uxtb	r2, r3
 8001280:	187b      	adds	r3, r7, r1
 8001282:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001284:	46c0      	nop			@ (mov r8, r8)
 8001286:	2308      	movs	r3, #8
 8001288:	18f9      	adds	r1, r7, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	0018      	movs	r0, r3
 8001290:	f003 fb58 	bl	8004944 <HAL_RTC_SetAlarm_IT>
 8001294:	1e03      	subs	r3, r0, #0
 8001296:	d1f6      	bne.n	8001286 <HAL_RTC_AlarmAEventCallback+0x46>
//			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
		}

	  updateAndDisplayTime();
 8001298:	f7ff ffa4 	bl	80011e4 <updateAndDisplayTime>

	  //printf("Current time: %u : %u : %u\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 800129c:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <HAL_RTC_AlarmAEventCallback+0x94>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d013      	beq.n	80012cc <HAL_RTC_AlarmAEventCallback+0x8c>
 80012a4:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <HAL_RTC_AlarmAEventCallback+0x98>)
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <HAL_RTC_AlarmAEventCallback+0x9c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d10d      	bne.n	80012cc <HAL_RTC_AlarmAEventCallback+0x8c>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <HAL_RTC_AlarmAEventCallback+0x98>)
 80012b2:	785a      	ldrb	r2, [r3, #1]
 80012b4:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <HAL_RTC_AlarmAEventCallback+0x9c>)
 80012b6:	785b      	ldrb	r3, [r3, #1]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d107      	bne.n	80012cc <HAL_RTC_AlarmAEventCallback+0x8c>
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <HAL_RTC_AlarmAEventCallback+0x98>)
 80012be:	78da      	ldrb	r2, [r3, #3]
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_RTC_AlarmAEventCallback+0x9c>)
 80012c2:	78db      	ldrb	r3, [r3, #3]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d101      	bne.n	80012cc <HAL_RTC_AlarmAEventCallback+0x8c>
		  userAlarmBeep();
 80012c8:	f000 f80a 	bl	80012e0 <userAlarmBeep>
	  }


}
 80012cc:	46c0      	nop			@ (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b00d      	add	sp, #52	@ 0x34
 80012d2:	bd90      	pop	{r4, r7, pc}
 80012d4:	2000008d 	.word	0x2000008d
 80012d8:	200000a8 	.word	0x200000a8
 80012dc:	20000090 	.word	0x20000090

080012e0 <userAlarmBeep>:

void userAlarmBeep() {
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 80012e6:	4b56      	ldr	r3, [pc, #344]	@ (8001440 <userAlarmBeep+0x160>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d02d      	beq.n	800134a <userAlarmBeep+0x6a>

			// Stop the timer and
			HAL_TIM_Base_Stop_IT(timerSnooze);
 80012ee:	4b55      	ldr	r3, [pc, #340]	@ (8001444 <userAlarmBeep+0x164>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	0018      	movs	r0, r3
 80012f4:	f004 f864 	bl	80053c0 <HAL_TIM_Base_Stop_IT>

			// Reset count to 0
			// only bits 0 - 15 should be changed.
			timerSnooze->Instance->CNT &= 0xFFFF0000;
 80012f8:	4b52      	ldr	r3, [pc, #328]	@ (8001444 <userAlarmBeep+0x164>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001300:	4b50      	ldr	r3, [pc, #320]	@ (8001444 <userAlarmBeep+0x164>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	0c12      	lsrs	r2, r2, #16
 8001308:	0412      	lsls	r2, r2, #16
 800130a:	625a      	str	r2, [r3, #36]	@ 0x24

			// Reset interrupt status register
			timerSnooze->Instance->SR &= 0xFFFC;
 800130c:	4b4d      	ldr	r3, [pc, #308]	@ (8001444 <userAlarmBeep+0x164>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	4b4b      	ldr	r3, [pc, #300]	@ (8001444 <userAlarmBeep+0x164>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	494b      	ldr	r1, [pc, #300]	@ (8001448 <userAlarmBeep+0x168>)
 800131c:	400a      	ands	r2, r1
 800131e:	611a      	str	r2, [r3, #16]

			// Re-write RCR with 10
			timerSnooze->Instance->RCR &= 0xFF00;
 8001320:	4b48      	ldr	r3, [pc, #288]	@ (8001444 <userAlarmBeep+0x164>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001328:	4b46      	ldr	r3, [pc, #280]	@ (8001444 <userAlarmBeep+0x164>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	22ff      	movs	r2, #255	@ 0xff
 8001330:	0212      	lsls	r2, r2, #8
 8001332:	400a      	ands	r2, r1
 8001334:	631a      	str	r2, [r3, #48]	@ 0x30
			timerSnooze->Instance->RCR |= timerSnooze_RCR;
 8001336:	4b43      	ldr	r3, [pc, #268]	@ (8001444 <userAlarmBeep+0x164>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800133e:	2164      	movs	r1, #100	@ 0x64
 8001340:	4b40      	ldr	r3, [pc, #256]	@ (8001444 <userAlarmBeep+0x164>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	631a      	str	r2, [r3, #48]	@ 0x30

		}

	HAL_TIM_Base_Stop(timerDelay);
 800134a:	4b40      	ldr	r3, [pc, #256]	@ (800144c <userAlarmBeep+0x16c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	0018      	movs	r0, r3
 8001350:	f003 ffbc 	bl	80052cc <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001354:	4b3d      	ldr	r3, [pc, #244]	@ (800144c <userAlarmBeep+0x16c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	0018      	movs	r0, r3
 800135a:	f003 ff6b 	bl	8005234 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 800135e:	4b3b      	ldr	r3, [pc, #236]	@ (800144c <userAlarmBeep+0x16c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001366:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001368:	1cfb      	adds	r3, r7, #3
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 800136e:	f7ff ff39 	bl	80011e4 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 8001372:	4b36      	ldr	r3, [pc, #216]	@ (800144c <userAlarmBeep+0x16c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	4a34      	ldr	r2, [pc, #208]	@ (8001450 <userAlarmBeep+0x170>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d922      	bls.n	80013ca <userAlarmBeep+0xea>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 8001384:	1cfb      	adds	r3, r7, #3
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4a32      	ldr	r2, [pc, #200]	@ (8001454 <userAlarmBeep+0x174>)
 800138a:	5cd3      	ldrb	r3, [r2, r3]
 800138c:	0018      	movs	r0, r3
 800138e:	f000 fd8b 	bl	8001ea8 <sevSeg_setIntensity>

			HAL_GPIO_TogglePin(buzzerPort, buzzerPin);					// Toggle Buzzer
 8001392:	4b31      	ldr	r3, [pc, #196]	@ (8001458 <userAlarmBeep+0x178>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2280      	movs	r2, #128	@ 0x80
 8001398:	0052      	lsls	r2, r2, #1
 800139a:	0011      	movs	r1, r2
 800139c:	0018      	movs	r0, r3
 800139e:	f001 fac3 	bl	8002928 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80013a2:	4b2a      	ldr	r3, [pc, #168]	@ (800144c <userAlarmBeep+0x16c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013aa:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80013ac:	1cfb      	adds	r3, r7, #3
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	1e5a      	subs	r2, r3, #1
 80013b2:	4193      	sbcs	r3, r2
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2201      	movs	r2, #1
 80013b8:	4053      	eors	r3, r2
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	001a      	movs	r2, r3
 80013be:	1cfb      	adds	r3, r7, #3
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	781a      	ldrb	r2, [r3, #0]
 80013c4:	2101      	movs	r1, #1
 80013c6:	400a      	ands	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]

		}


		HAL_StatusTypeDef halRet = capTouch_readChannels(&capTouch);
 80013ca:	1cbc      	adds	r4, r7, #2
 80013cc:	4b23      	ldr	r3, [pc, #140]	@ (800145c <userAlarmBeep+0x17c>)
 80013ce:	0018      	movs	r0, r3
 80013d0:	f7ff f874 	bl	80004bc <capTouch_readChannels>
 80013d4:	0003      	movs	r3, r0
 80013d6:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK)
 80013d8:	1cbb      	adds	r3, r7, #2
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <userAlarmBeep+0x104>
			dispError();
 80013e0:	f000 fb1e 	bl	8001a20 <dispError>

	} while(capTouch.keyStat == 0x00);
 80013e4:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <userAlarmBeep+0x17c>)
 80013e6:	7c1b      	ldrb	r3, [r3, #16]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0c0      	beq.n	800136e <userAlarmBeep+0x8e>

	/*
	 * Stop blinking, turn off buzzer, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 80013ec:	4b17      	ldr	r3, [pc, #92]	@ (800144c <userAlarmBeep+0x16c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	0018      	movs	r0, r3
 80013f2:	f003 ff6b 	bl	80052cc <HAL_TIM_Base_Stop>
	HAL_GPIO_WritePin(buzzerPort, buzzerPin, GPIO_PIN_RESET);
 80013f6:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <userAlarmBeep+0x178>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	0051      	lsls	r1, r2, #1
 80013fe:	2200      	movs	r2, #0
 8001400:	0018      	movs	r0, r3
 8001402:	f001 fa74 	bl	80028ee <HAL_GPIO_WritePin>
	updateAndDisplayTime();				// Update to current time and display
 8001406:	f7ff feed 	bl	80011e4 <updateAndDisplayTime>
	sevSeg_setIntensity(sevSeg_intensityDuty[1]);	// Toggle 0% to 50% duty cycle
 800140a:	235a      	movs	r3, #90	@ 0x5a
 800140c:	0018      	movs	r0, r3
 800140e:	f000 fd4b 	bl	8001ea8 <sevSeg_setIntensity>

	// If this is the first snooze,
	if(!secondSnooze) {
 8001412:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <userAlarmBeep+0x160>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2201      	movs	r2, #1
 8001418:	4053      	eors	r3, r2
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d008      	beq.n	8001432 <userAlarmBeep+0x152>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <userAlarmBeep+0x164>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	0018      	movs	r0, r3
 8001426:	f003 ff77 	bl	8005318 <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 800142a:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <userAlarmBeep+0x160>)
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
		 * in the top conditional, the secondSnooze is always true;
		 */
		secondSnooze = false;

	}
}
 8001430:	e002      	b.n	8001438 <userAlarmBeep+0x158>
		secondSnooze = false;
 8001432:	4b03      	ldr	r3, [pc, #12]	@ (8001440 <userAlarmBeep+0x160>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
}
 8001438:	46c0      	nop			@ (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	b003      	add	sp, #12
 800143e:	bd90      	pop	{r4, r7, pc}
 8001440:	20000225 	.word	0x20000225
 8001444:	20000048 	.word	0x20000048
 8001448:	0000fffc 	.word	0x0000fffc
 800144c:	20000044 	.word	0x20000044
 8001450:	00007ffe 	.word	0x00007ffe
 8001454:	08006308 	.word	0x08006308
 8001458:	20000010 	.word	0x20000010
 800145c:	20000228 	.word	0x20000228

08001460 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	0002      	movs	r2, r0
 8001468:	1dbb      	adds	r3, r7, #6
 800146a:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 800146c:	2208      	movs	r2, #8
 800146e:	1dbb      	adds	r3, r7, #6
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	4293      	cmp	r3, r2
 8001474:	d106      	bne.n	8001484 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 8001476:	230f      	movs	r3, #15
 8001478:	18fc      	adds	r4, r7, r3
 800147a:	f000 f859 	bl	8001530 <displayButtonISR>
 800147e:	0003      	movs	r3, r0
 8001480:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8001482:	e031      	b.n	80014e8 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8001484:	2204      	movs	r2, #4
 8001486:	1dbb      	adds	r3, r7, #6
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	4293      	cmp	r3, r2
 800148c:	d106      	bne.n	800149c <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 800148e:	230f      	movs	r3, #15
 8001490:	18fc      	adds	r4, r7, r3
 8001492:	f000 f875 	bl	8001580 <alarmEnableISR>
 8001496:	0003      	movs	r3, r0
 8001498:	7023      	strb	r3, [r4, #0]
}
 800149a:	e025      	b.n	80014e8 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	1dba      	adds	r2, r7, #6
 80014a2:	8812      	ldrh	r2, [r2, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d106      	bne.n	80014b6 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 80014a8:	230f      	movs	r3, #15
 80014aa:	18fc      	adds	r4, r7, r3
 80014ac:	f000 f8a2 	bl	80015f4 <alarmSetISR>
 80014b0:	0003      	movs	r3, r0
 80014b2:	7023      	strb	r3, [r4, #0]
}
 80014b4:	e018      	b.n	80014e8 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 80014b6:	2201      	movs	r2, #1
 80014b8:	1dbb      	adds	r3, r7, #6
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	4293      	cmp	r3, r2
 80014be:	d106      	bne.n	80014ce <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 80014c0:	230f      	movs	r3, #15
 80014c2:	18fc      	adds	r4, r7, r3
 80014c4:	f000 f966 	bl	8001794 <hourSetISR>
 80014c8:	0003      	movs	r3, r0
 80014ca:	7023      	strb	r3, [r4, #0]
}
 80014cc:	e00c      	b.n	80014e8 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 80014ce:	2202      	movs	r2, #2
 80014d0:	1dbb      	adds	r3, r7, #6
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d106      	bne.n	80014e6 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 80014d8:	230f      	movs	r3, #15
 80014da:	18fc      	adds	r4, r7, r3
 80014dc:	f000 f986 	bl	80017ec <minuteSetISR>
 80014e0:	0003      	movs	r3, r0
 80014e2:	7023      	strb	r3, [r4, #0]
}
 80014e4:	e000      	b.n	80014e8 <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 80014e6:	46c0      	nop			@ (mov r8, r8)
}
 80014e8:	46c0      	nop			@ (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b005      	add	sp, #20
 80014ee:	bd90      	pop	{r4, r7, pc}

080014f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

	if((htim == timerSnooze) && (secondSnooze == true)) {
 80014f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d10c      	bne.n	800151c <HAL_TIM_PeriodElapsedCallback+0x2c>
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d008      	beq.n	800151c <HAL_TIM_PeriodElapsedCallback+0x2c>

		HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 800150a:	4b08      	ldr	r3, [pc, #32]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2201      	movs	r2, #1
 8001510:	0011      	movs	r1, r2
 8001512:	0018      	movs	r0, r3
 8001514:	f001 fa08 	bl	8002928 <HAL_GPIO_TogglePin>

		userAlarmBeep();
 8001518:	f7ff fee2 	bl	80012e0 <userAlarmBeep>

	}

}
 800151c:	46c0      	nop			@ (mov r8, r8)
 800151e:	46bd      	mov	sp, r7
 8001520:	b002      	add	sp, #8
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000048 	.word	0x20000048
 8001528:	20000225 	.word	0x20000225
 800152c:	20000028 	.word	0x20000028

08001530 <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001536:	1dfb      	adds	r3, r7, #7
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 800153c:	f7ff fe52 	bl	80011e4 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8001540:	4b0d      	ldr	r3, [pc, #52]	@ (8001578 <displayButtonISR+0x48>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	001a      	movs	r2, r3
 8001546:	4b0d      	ldr	r3, [pc, #52]	@ (800157c <displayButtonISR+0x4c>)
 8001548:	5c9b      	ldrb	r3, [r3, r2]
 800154a:	0018      	movs	r0, r3
 800154c:	f000 fcac 	bl	8001ea8 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8001550:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <displayButtonISR+0x48>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d903      	bls.n	8001560 <displayButtonISR+0x30>
		displayToggle = 0;
 8001558:	4b07      	ldr	r3, [pc, #28]	@ (8001578 <displayButtonISR+0x48>)
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
 800155e:	e005      	b.n	800156c <displayButtonISR+0x3c>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 8001560:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <displayButtonISR+0x48>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b03      	ldr	r3, [pc, #12]	@ (8001578 <displayButtonISR+0x48>)
 800156a:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 800156c:	1dfb      	adds	r3, r7, #7
 800156e:	781b      	ldrb	r3, [r3, #0]

}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	b002      	add	sp, #8
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2000008c 	.word	0x2000008c
 800157c:	08006308 	.word	0x08006308

08001580 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001586:	1dfb      	adds	r3, r7, #7
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 800158c:	4b16      	ldr	r3, [pc, #88]	@ (80015e8 <alarmEnableISR+0x68>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2201      	movs	r2, #1
 8001592:	4053      	eors	r3, r2
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00b      	beq.n	80015b2 <alarmEnableISR+0x32>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
 800159a:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <alarmEnableISR+0x6c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2280      	movs	r2, #128	@ 0x80
 80015a0:	0151      	lsls	r1, r2, #5
 80015a2:	2201      	movs	r2, #1
 80015a4:	0018      	movs	r0, r3
 80015a6:	f001 f9a2 	bl	80028ee <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 80015aa:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <alarmEnableISR+0x68>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	701a      	strb	r2, [r3, #0]
 80015b0:	e010      	b.n	80015d4 <alarmEnableISR+0x54>

		//printf("User alarm set to: %u:%u:%u.\n\r", userAlarmTime.Hours,
								//userAlarmTime.Minutes, userAlarmTime.Seconds);

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 80015b2:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <alarmEnableISR+0x68>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00b      	beq.n	80015d2 <alarmEnableISR+0x52>

		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
 80015ba:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <alarmEnableISR+0x6c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2280      	movs	r2, #128	@ 0x80
 80015c0:	0151      	lsls	r1, r2, #5
 80015c2:	2200      	movs	r2, #0
 80015c4:	0018      	movs	r0, r3
 80015c6:	f001 f992 	bl	80028ee <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 80015ca:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <alarmEnableISR+0x68>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	e000      	b.n	80015d4 <alarmEnableISR+0x54>

		//printf("User alarm disabled.\n\r");
	}
	else {
		__NOP();							//Code should never reach here.
 80015d2:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset snooze time
	secondSnooze = false;
 80015d4:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <alarmEnableISR+0x70>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]

	return halRet;
 80015da:	1dfb      	adds	r3, r7, #7
 80015dc:	781b      	ldrb	r3, [r3, #0]

}
 80015de:	0018      	movs	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b002      	add	sp, #8
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			@ (mov r8, r8)
 80015e8:	2000008d 	.word	0x2000008d
 80015ec:	2000000c 	.word	0x2000000c
 80015f0:	20000225 	.word	0x20000225

080015f4 <alarmSetISR>:

HAL_StatusTypeDef alarmSetISR(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
	//printf("Enter user alarm set ISR.\n\r");

	//printf("User alarm currently set to %u:%u:%u.\n\r", userAlarmTime.Hours,
			//userAlarmTime.Minutes, userAlarmTime.Seconds);

	HAL_StatusTypeDef halRet = HAL_OK;
 80015fa:	1cbb      	adds	r3, r7, #2
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for switch debounce
	 */

	// First wait for button to deactivate again
	while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_SET);
 8001600:	46c0      	nop			@ (mov r8, r8)
 8001602:	4b60      	ldr	r3, [pc, #384]	@ (8001784 <alarmSetISR+0x190>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2280      	movs	r2, #128	@ 0x80
 8001608:	0212      	lsls	r2, r2, #8
 800160a:	0011      	movs	r1, r2
 800160c:	0018      	movs	r0, r3
 800160e:	f001 f951 	bl	80028b4 <HAL_GPIO_ReadPin>
 8001612:	0003      	movs	r3, r0
 8001614:	2b01      	cmp	r3, #1
 8001616:	d1f4      	bne.n	8001602 <alarmSetISR+0xe>

	// Go through debounce
	HAL_TIM_Base_Stop(timerDelay);
 8001618:	4b5b      	ldr	r3, [pc, #364]	@ (8001788 <alarmSetISR+0x194>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	0018      	movs	r0, r3
 800161e:	f003 fe55 	bl	80052cc <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001622:	4b59      	ldr	r3, [pc, #356]	@ (8001788 <alarmSetISR+0x194>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	0018      	movs	r0, r3
 8001628:	f003 fe04 	bl	8005234 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 800162c:	4b56      	ldr	r3, [pc, #344]	@ (8001788 <alarmSetISR+0x194>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001634:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 8));
 8001636:	4b54      	ldr	r3, [pc, #336]	@ (8001788 <alarmSetISR+0x194>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	1ad2      	subs	r2, r2, r3
 8001642:	2380      	movs	r3, #128	@ 0x80
 8001644:	019b      	lsls	r3, r3, #6
 8001646:	429a      	cmp	r2, r3
 8001648:	d9f5      	bls.n	8001636 <alarmSetISR+0x42>


	/*
	 *  Poll for 1 second to see if the alarm set button is pressed again
	 */
	HAL_TIM_Base_Stop(timerDelay);
 800164a:	4b4f      	ldr	r3, [pc, #316]	@ (8001788 <alarmSetISR+0x194>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	0018      	movs	r0, r3
 8001650:	f003 fe3c 	bl	80052cc <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001654:	4b4c      	ldr	r3, [pc, #304]	@ (8001788 <alarmSetISR+0x194>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	0018      	movs	r0, r3
 800165a:	f003 fdeb 	bl	8005234 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 800165e:	4b4a      	ldr	r3, [pc, #296]	@ (8001788 <alarmSetISR+0x194>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001666:	607b      	str	r3, [r7, #4]

	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 8001668:	e00d      	b.n	8001686 <alarmSetISR+0x92>

		if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 800166a:	4b46      	ldr	r3, [pc, #280]	@ (8001784 <alarmSetISR+0x190>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2280      	movs	r2, #128	@ 0x80
 8001670:	0212      	lsls	r2, r2, #8
 8001672:	0011      	movs	r1, r2
 8001674:	0018      	movs	r0, r3
 8001676:	f001 f91d 	bl	80028b4 <HAL_GPIO_ReadPin>
 800167a:	1e03      	subs	r3, r0, #0
 800167c:	d103      	bne.n	8001686 <alarmSetISR+0x92>
			alarmSetMode = true;
 800167e:	4b43      	ldr	r3, [pc, #268]	@ (800178c <alarmSetISR+0x198>)
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
//			HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
			break;
 8001684:	e009      	b.n	800169a <alarmSetISR+0xa6>
	while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536)) {
 8001686:	4b40      	ldr	r3, [pc, #256]	@ (8001788 <alarmSetISR+0x194>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	1ad2      	subs	r2, r2, r3
 8001692:	2380      	movs	r3, #128	@ 0x80
 8001694:	025b      	lsls	r3, r3, #9
 8001696:	429a      	cmp	r2, r3
 8001698:	d9e7      	bls.n	800166a <alarmSetISR+0x76>
		}

	}

	// Go through debounce once again
	HAL_TIM_Base_Stop(timerDelay);
 800169a:	4b3b      	ldr	r3, [pc, #236]	@ (8001788 <alarmSetISR+0x194>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	0018      	movs	r0, r3
 80016a0:	f003 fe14 	bl	80052cc <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80016a4:	4b38      	ldr	r3, [pc, #224]	@ (8001788 <alarmSetISR+0x194>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	0018      	movs	r0, r3
 80016aa:	f003 fdc3 	bl	8005234 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80016ae:	4b36      	ldr	r3, [pc, #216]	@ (8001788 <alarmSetISR+0x194>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b6:	607b      	str	r3, [r7, #4]

	do {

	}while(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal <= (65536 / 4));
 80016b8:	4b33      	ldr	r3, [pc, #204]	@ (8001788 <alarmSetISR+0x194>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	1ad2      	subs	r2, r2, r3
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	01db      	lsls	r3, r3, #7
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d9f5      	bls.n	80016b8 <alarmSetISR+0xc4>
	/*
	 * Then, if we are in alarm set mode, go through the
	 * alarm set process until the button is pressed again
	 */

	HAL_TIM_Base_Stop(timerDelay);
 80016cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001788 <alarmSetISR+0x194>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	0018      	movs	r0, r3
 80016d2:	f003 fdfb 	bl	80052cc <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80016d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001788 <alarmSetISR+0x194>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	0018      	movs	r0, r3
 80016dc:	f003 fdaa 	bl	8005234 <HAL_TIM_Base_Start>
	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80016e0:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <alarmSetISR+0x194>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e8:	607b      	str	r3, [r7, #4]

	if(alarmSetMode) {
 80016ea:	4b28      	ldr	r3, [pc, #160]	@ (800178c <alarmSetISR+0x198>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d03e      	beq.n	8001770 <alarmSetISR+0x17c>

		bool displayBlink = false;
 80016f2:	1cfb      	adds	r3, r7, #3
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			updateAndDisplayAlarm();
 80016f8:	f7ff fd90 	bl	800121c <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 80016fc:	4b22      	ldr	r3, [pc, #136]	@ (8001788 <alarmSetISR+0x194>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	1ad2      	subs	r2, r2, r3
 8001708:	2380      	movs	r3, #128	@ 0x80
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	429a      	cmp	r2, r3
 800170e:	d31a      	bcc.n	8001746 <alarmSetISR+0x152>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 8001710:	1cfb      	adds	r3, r7, #3
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4a1e      	ldr	r2, [pc, #120]	@ (8001790 <alarmSetISR+0x19c>)
 8001716:	5cd3      	ldrb	r3, [r2, r3]
 8001718:	0018      	movs	r0, r3
 800171a:	f000 fbc5 	bl	8001ea8 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 800171e:	4b1a      	ldr	r3, [pc, #104]	@ (8001788 <alarmSetISR+0x194>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001726:	607b      	str	r3, [r7, #4]
				displayBlink = !displayBlink;
 8001728:	1cfb      	adds	r3, r7, #3
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	1e5a      	subs	r2, r3, #1
 800172e:	4193      	sbcs	r3, r2
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2201      	movs	r2, #1
 8001734:	4053      	eors	r3, r2
 8001736:	b2db      	uxtb	r3, r3
 8001738:	001a      	movs	r2, r3
 800173a:	1cfb      	adds	r3, r7, #3
 800173c:	701a      	strb	r2, [r3, #0]
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	2101      	movs	r1, #1
 8001742:	400a      	ands	r2, r1
 8001744:	701a      	strb	r2, [r3, #0]

			}

		}while(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET);
 8001746:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <alarmSetISR+0x190>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2280      	movs	r2, #128	@ 0x80
 800174c:	0212      	lsls	r2, r2, #8
 800174e:	0011      	movs	r1, r2
 8001750:	0018      	movs	r0, r3
 8001752:	f001 f8af 	bl	80028b4 <HAL_GPIO_ReadPin>
 8001756:	1e03      	subs	r3, r0, #0
 8001758:	d1ce      	bne.n	80016f8 <alarmSetISR+0x104>

//		HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_RESET);

		sevSeg_setIntensity(sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 800175a:	235a      	movs	r3, #90	@ 0x5a
 800175c:	0018      	movs	r0, r3
 800175e:	f000 fba3 	bl	8001ea8 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 8001762:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <alarmSetISR+0x194>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	0018      	movs	r0, r3
 8001768:	f003 fdb0 	bl	80052cc <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 800176c:	f7ff fd3a 	bl	80011e4 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <alarmSetISR+0x198>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 8001776:	1cbb      	adds	r3, r7, #2
 8001778:	781b      	ldrb	r3, [r3, #0]

}
 800177a:	0018      	movs	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	b002      	add	sp, #8
 8001780:	bd80      	pop	{r7, pc}
 8001782:	46c0      	nop			@ (mov r8, r8)
 8001784:	20000000 	.word	0x20000000
 8001788:	20000044 	.word	0x20000044
 800178c:	20000224 	.word	0x20000224
 8001790:	08006308 	.word	0x08006308

08001794 <hourSetISR>:

HAL_StatusTypeDef hourSetISR(void) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0


	HAL_StatusTypeDef halRet = HAL_OK;
 800179a:	1dfb      	adds	r3, r7, #7
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80017a0:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <hourSetISR+0x48>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <hourSetISR+0x1a>

		alarmHourInc();
 80017a8:	f000 f87c 	bl	80018a4 <alarmHourInc>
 80017ac:	e00f      	b.n	80017ce <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 80017ae:	f000 f8a9 	bl	8001904 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80017b2:	490b      	ldr	r1, [pc, #44]	@ (80017e0 <hourSetISR+0x4c>)
 80017b4:	4b0b      	ldr	r3, [pc, #44]	@ (80017e4 <hourSetISR+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	0018      	movs	r0, r3
 80017ba:	f002 fedf 	bl	800457c <HAL_RTC_SetTime>


		updateAndDisplayTime();
 80017be:	f7ff fd11 	bl	80011e4 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80017c2:	4a09      	ldr	r2, [pc, #36]	@ (80017e8 <hourSetISR+0x54>)
 80017c4:	4906      	ldr	r1, [pc, #24]	@ (80017e0 <hourSetISR+0x4c>)
 80017c6:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <hourSetISR+0x50>)
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7ff f8d1 	bl	8000970 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 80017ce:	1dfb      	adds	r3, r7, #7
 80017d0:	781b      	ldrb	r3, [r3, #0]

}
 80017d2:	0018      	movs	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b002      	add	sp, #8
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			@ (mov r8, r8)
 80017dc:	20000224 	.word	0x20000224
 80017e0:	20000090 	.word	0x20000090
 80017e4:	20000114 	.word	0x20000114
 80017e8:	200000a4 	.word	0x200000a4

080017ec <minuteSetISR>:

HAL_StatusTypeDef minuteSetISR(void) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08c      	sub	sp, #48	@ 0x30
 80017f0:	af00      	add	r7, sp, #0


	HAL_StatusTypeDef halRet = HAL_OK;
 80017f2:	232f      	movs	r3, #47	@ 0x2f
 80017f4:	18fb      	adds	r3, r7, r3
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80017fa:	4b25      	ldr	r3, [pc, #148]	@ (8001890 <minuteSetISR+0xa4>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d002      	beq.n	8001808 <minuteSetISR+0x1c>

		alarmMinuteInc();
 8001802:	f000 f8bf 	bl	8001984 <alarmMinuteInc>
 8001806:	e03b      	b.n	8001880 <minuteSetISR+0x94>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 8001808:	f000 f8dc 	bl	80019c4 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 800180c:	4921      	ldr	r1, [pc, #132]	@ (8001894 <minuteSetISR+0xa8>)
 800180e:	4b22      	ldr	r3, [pc, #136]	@ (8001898 <minuteSetISR+0xac>)
 8001810:	2200      	movs	r2, #0
 8001812:	0018      	movs	r0, r3
 8001814:	f002 feb2 	bl	800457c <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	0018      	movs	r0, r3
 800181c:	2328      	movs	r3, #40	@ 0x28
 800181e:	001a      	movs	r2, r3
 8001820:	2100      	movs	r1, #0
 8001822:	f004 fd1d 	bl	8006260 <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8001826:	2380      	movs	r3, #128	@ 0x80
 8001828:	005a      	lsls	r2, r3, #1
 800182a:	1d39      	adds	r1, r7, #4
 800182c:	481a      	ldr	r0, [pc, #104]	@ (8001898 <minuteSetISR+0xac>)
 800182e:	2300      	movs	r3, #0
 8001830:	f003 f9c8 	bl	8004bc4 <HAL_RTC_GetAlarm>

		if(sAlarm.AlarmTime.Minutes>58) {
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	785b      	ldrb	r3, [r3, #1]
 8001838:	2b3a      	cmp	r3, #58	@ 0x3a
 800183a:	d903      	bls.n	8001844 <minuteSetISR+0x58>
			sAlarm.AlarmTime.Minutes=0;
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	2200      	movs	r2, #0
 8001840:	705a      	strb	r2, [r3, #1]
 8001842:	e00d      	b.n	8001860 <minuteSetISR+0x74>
			//printf("Reset alarm time\n\r");
		} else {
			sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	785b      	ldrb	r3, [r3, #1]
 8001848:	3301      	adds	r3, #1
 800184a:	b2da      	uxtb	r2, r3
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001850:	e006      	b.n	8001860 <minuteSetISR+0x74>
			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 8001852:	4b12      	ldr	r3, [pc, #72]	@ (800189c <minuteSetISR+0xb0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2201      	movs	r2, #1
 8001858:	0011      	movs	r1, r2
 800185a:	0018      	movs	r0, r3
 800185c:	f001 f864 	bl	8002928 <HAL_GPIO_TogglePin>
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){
 8001860:	1d39      	adds	r1, r7, #4
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <minuteSetISR+0xac>)
 8001864:	2200      	movs	r2, #0
 8001866:	0018      	movs	r0, r3
 8001868:	f003 f86c 	bl	8004944 <HAL_RTC_SetAlarm_IT>
 800186c:	1e03      	subs	r3, r0, #0
 800186e:	d1f0      	bne.n	8001852 <minuteSetISR+0x66>
		}


		updateAndDisplayTime();
 8001870:	f7ff fcb8 	bl	80011e4 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001874:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <minuteSetISR+0xb4>)
 8001876:	4907      	ldr	r1, [pc, #28]	@ (8001894 <minuteSetISR+0xa8>)
 8001878:	4b07      	ldr	r3, [pc, #28]	@ (8001898 <minuteSetISR+0xac>)
 800187a:	0018      	movs	r0, r3
 800187c:	f7ff f878 	bl	8000970 <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 8001880:	232f      	movs	r3, #47	@ 0x2f
 8001882:	18fb      	adds	r3, r7, r3
 8001884:	781b      	ldrb	r3, [r3, #0]
}
 8001886:	0018      	movs	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	b00c      	add	sp, #48	@ 0x30
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			@ (mov r8, r8)
 8001890:	20000224 	.word	0x20000224
 8001894:	20000090 	.word	0x20000090
 8001898:	20000114 	.word	0x20000114
 800189c:	20000028 	.word	0x20000028
 80018a0:	200000a4 	.word	0x200000a4

080018a4 <alarmHourInc>:

void alarmHourInc(void) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 80018a8:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <alarmHourInc+0x5c>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b0b      	cmp	r3, #11
 80018ae:	d903      	bls.n	80018b8 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 80018b0:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <alarmHourInc+0x5c>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	701a      	strb	r2, [r3, #0]
 80018b6:	e01e      	b.n	80018f6 <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 80018b8:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <alarmHourInc+0x5c>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b0b      	cmp	r3, #11
 80018be:	d10e      	bne.n	80018de <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80018c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <alarmHourInc+0x5c>)
 80018c2:	78db      	ldrb	r3, [r3, #3]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d103      	bne.n	80018d0 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80018c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001900 <alarmHourInc+0x5c>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	70da      	strb	r2, [r3, #3]
 80018ce:	e002      	b.n	80018d6 <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80018d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <alarmHourInc+0x5c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 80018d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001900 <alarmHourInc+0x5c>)
 80018d8:	220c      	movs	r2, #12
 80018da:	701a      	strb	r2, [r3, #0]
 80018dc:	e00b      	b.n	80018f6 <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 80018de:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <alarmHourInc+0x5c>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b0a      	cmp	r3, #10
 80018e4:	d806      	bhi.n	80018f4 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 80018e6:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <alarmHourInc+0x5c>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	3301      	adds	r3, #1
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b04      	ldr	r3, [pc, #16]	@ (8001900 <alarmHourInc+0x5c>)
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	e000      	b.n	80018f6 <alarmHourInc+0x52>
	}
	else {
		__NOP();
 80018f4:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 80018f6:	f000 f8d5 	bl	8001aa4 <updateRTCBackupReg>

}
 80018fa:	46c0      	nop			@ (mov r8, r8)
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200000a8 	.word	0x200000a8

08001904 <currHourInc>:

void currHourInc(void) {
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001908:	4a1a      	ldr	r2, [pc, #104]	@ (8001974 <currHourInc+0x70>)
 800190a:	491b      	ldr	r1, [pc, #108]	@ (8001978 <currHourInc+0x74>)
 800190c:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <currHourInc+0x78>)
 800190e:	0018      	movs	r0, r3
 8001910:	f7ff f82e 	bl	8000970 <getRTCTime>

	if(currTime.Hours >= 12) {
 8001914:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <currHourInc+0x74>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b0b      	cmp	r3, #11
 800191a:	d903      	bls.n	8001924 <currHourInc+0x20>
		currTime.Hours = 1;
 800191c:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <currHourInc+0x74>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	e01e      	b.n	8001962 <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 8001924:	4b14      	ldr	r3, [pc, #80]	@ (8001978 <currHourInc+0x74>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b0b      	cmp	r3, #11
 800192a:	d10e      	bne.n	800194a <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <currHourInc+0x74>)
 800192e:	78db      	ldrb	r3, [r3, #3]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d103      	bne.n	800193c <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001934:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <currHourInc+0x74>)
 8001936:	2201      	movs	r2, #1
 8001938:	70da      	strb	r2, [r3, #3]
 800193a:	e002      	b.n	8001942 <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800193c:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <currHourInc+0x74>)
 800193e:	2200      	movs	r2, #0
 8001940:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 8001942:	4b0d      	ldr	r3, [pc, #52]	@ (8001978 <currHourInc+0x74>)
 8001944:	220c      	movs	r2, #12
 8001946:	701a      	strb	r2, [r3, #0]
 8001948:	e00b      	b.n	8001962 <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 800194a:	4b0d      	ldr	r3, [pc, #52]	@ (8001980 <currHourInc+0x7c>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b0a      	cmp	r3, #10
 8001950:	d806      	bhi.n	8001960 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <currHourInc+0x74>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	3301      	adds	r3, #1
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4b07      	ldr	r3, [pc, #28]	@ (8001978 <currHourInc+0x74>)
 800195c:	701a      	strb	r2, [r3, #0]
 800195e:	e000      	b.n	8001962 <currHourInc+0x5e>
	}
	else {
		__NOP();
 8001960:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001962:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <currHourInc+0x74>)
 8001964:	2200      	movs	r2, #0
 8001966:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001968:	4b03      	ldr	r3, [pc, #12]	@ (8001978 <currHourInc+0x74>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]

}
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	200000a4 	.word	0x200000a4
 8001978:	20000090 	.word	0x20000090
 800197c:	20000114 	.word	0x20000114
 8001980:	200000a8 	.word	0x200000a8

08001984 <alarmMinuteInc>:

void alarmMinuteInc(void) {
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 8001988:	4b0d      	ldr	r3, [pc, #52]	@ (80019c0 <alarmMinuteInc+0x3c>)
 800198a:	785b      	ldrb	r3, [r3, #1]
 800198c:	2b3a      	cmp	r3, #58	@ 0x3a
 800198e:	d905      	bls.n	800199c <alarmMinuteInc+0x18>
		alarmHourInc();
 8001990:	f7ff ff88 	bl	80018a4 <alarmHourInc>
		userAlarmTime.Minutes = 0;
 8001994:	4b0a      	ldr	r3, [pc, #40]	@ (80019c0 <alarmMinuteInc+0x3c>)
 8001996:	2200      	movs	r2, #0
 8001998:	705a      	strb	r2, [r3, #1]
 800199a:	e00b      	b.n	80019b4 <alarmMinuteInc+0x30>
	}
	else if(userAlarmTime.Minutes < 59) {
 800199c:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <alarmMinuteInc+0x3c>)
 800199e:	785b      	ldrb	r3, [r3, #1]
 80019a0:	2b3a      	cmp	r3, #58	@ 0x3a
 80019a2:	d806      	bhi.n	80019b2 <alarmMinuteInc+0x2e>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <alarmMinuteInc+0x3c>)
 80019a6:	785b      	ldrb	r3, [r3, #1]
 80019a8:	3301      	adds	r3, #1
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	4b04      	ldr	r3, [pc, #16]	@ (80019c0 <alarmMinuteInc+0x3c>)
 80019ae:	705a      	strb	r2, [r3, #1]
 80019b0:	e000      	b.n	80019b4 <alarmMinuteInc+0x30>
	}
	else {
		__NOP();
 80019b2:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 80019b4:	f000 f876 	bl	8001aa4 <updateRTCBackupReg>

}
 80019b8:	46c0      	nop			@ (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	200000a8 	.word	0x200000a8

080019c4 <currMinuteInc>:

void currMinuteInc(void) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 80019c8:	4a12      	ldr	r2, [pc, #72]	@ (8001a14 <currMinuteInc+0x50>)
 80019ca:	4913      	ldr	r1, [pc, #76]	@ (8001a18 <currMinuteInc+0x54>)
 80019cc:	4b13      	ldr	r3, [pc, #76]	@ (8001a1c <currMinuteInc+0x58>)
 80019ce:	0018      	movs	r0, r3
 80019d0:	f7fe ffce 	bl	8000970 <getRTCTime>

	// If current time is going to rollover,
	// increment the hour and reset the minute.
	if(currTime.Minutes >= 59) {
 80019d4:	4b10      	ldr	r3, [pc, #64]	@ (8001a18 <currMinuteInc+0x54>)
 80019d6:	785b      	ldrb	r3, [r3, #1]
 80019d8:	2b3a      	cmp	r3, #58	@ 0x3a
 80019da:	d905      	bls.n	80019e8 <currMinuteInc+0x24>
		currHourInc();
 80019dc:	f7ff ff92 	bl	8001904 <currHourInc>
		currTime.Minutes = 0;
 80019e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a18 <currMinuteInc+0x54>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	705a      	strb	r2, [r3, #1]
 80019e6:	e00b      	b.n	8001a00 <currMinuteInc+0x3c>
	}
	else if(currTime.Minutes < 59) {
 80019e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <currMinuteInc+0x54>)
 80019ea:	785b      	ldrb	r3, [r3, #1]
 80019ec:	2b3a      	cmp	r3, #58	@ 0x3a
 80019ee:	d806      	bhi.n	80019fe <currMinuteInc+0x3a>
		currTime.Minutes = currTime.Minutes + 1;
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <currMinuteInc+0x54>)
 80019f2:	785b      	ldrb	r3, [r3, #1]
 80019f4:	3301      	adds	r3, #1
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4b07      	ldr	r3, [pc, #28]	@ (8001a18 <currMinuteInc+0x54>)
 80019fa:	705a      	strb	r2, [r3, #1]
 80019fc:	e000      	b.n	8001a00 <currMinuteInc+0x3c>
	}
	else {
		__NOP();
 80019fe:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <currMinuteInc+0x54>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001a06:	4b04      	ldr	r3, [pc, #16]	@ (8001a18 <currMinuteInc+0x54>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]

}
 8001a0c:	46c0      	nop			@ (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			@ (mov r8, r8)
 8001a14:	200000a4 	.word	0x200000a4
 8001a18:	20000090 	.word	0x20000090
 8001a1c:	20000114 	.word	0x20000114

08001a20 <dispError>:

void dispError(void) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8001a26:	4b1c      	ldr	r3, [pc, #112]	@ (8001a98 <dispError+0x78>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f003 fc4e 	bl	80052cc <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001a30:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <dispError+0x78>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0018      	movs	r0, r3
 8001a36:	f003 fbfd 	bl	8005234 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001a3a:	4b17      	ldr	r3, [pc, #92]	@ (8001a98 <dispError+0x78>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a42:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001a44:	1cfb      	adds	r3, r7, #3
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001a4a:	4b13      	ldr	r3, [pc, #76]	@ (8001a98 <dispError+0x78>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	4a11      	ldr	r2, [pc, #68]	@ (8001a9c <dispError+0x7c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d9f6      	bls.n	8001a4a <dispError+0x2a>

			HAL_GPIO_TogglePin(alarmLEDPort, alarmLEDPin);
 8001a5c:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <dispError+0x80>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2280      	movs	r2, #128	@ 0x80
 8001a62:	0152      	lsls	r2, r2, #5
 8001a64:	0011      	movs	r1, r2
 8001a66:	0018      	movs	r0, r3
 8001a68:	f000 ff5e 	bl	8002928 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <dispError+0x78>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a74:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001a76:	1cfb      	adds	r3, r7, #3
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	1e5a      	subs	r2, r3, #1
 8001a7c:	4193      	sbcs	r3, r2
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2201      	movs	r2, #1
 8001a82:	4053      	eors	r3, r2
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	001a      	movs	r2, r3
 8001a88:	1cfb      	adds	r3, r7, #3
 8001a8a:	701a      	strb	r2, [r3, #0]
 8001a8c:	781a      	ldrb	r2, [r3, #0]
 8001a8e:	2101      	movs	r1, #1
 8001a90:	400a      	ands	r2, r1
 8001a92:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001a94:	e7d9      	b.n	8001a4a <dispError+0x2a>
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	20000044 	.word	0x20000044
 8001a9c:	00003ffe 	.word	0x00003ffe
 8001aa0:	2000000c 	.word	0x2000000c

08001aa4 <updateRTCBackupReg>:

	} while(1);

}

void updateRTCBackupReg(void) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <updateRTCBackupReg+0x40>)
 8001aaa:	6819      	ldr	r1, [r3, #0]
 8001aac:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <updateRTCBackupReg+0x44>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	001a      	movs	r2, r3
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <updateRTCBackupReg+0x48>)
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f003 fb2d 	bl	8005114 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 8001aba:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <updateRTCBackupReg+0x4c>)
 8001abc:	6819      	ldr	r1, [r3, #0]
 8001abe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <updateRTCBackupReg+0x44>)
 8001ac0:	785b      	ldrb	r3, [r3, #1]
 8001ac2:	001a      	movs	r2, r3
 8001ac4:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <updateRTCBackupReg+0x48>)
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f003 fb24 	bl	8005114 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 8001acc:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <updateRTCBackupReg+0x50>)
 8001ace:	6819      	ldr	r1, [r3, #0]
 8001ad0:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <updateRTCBackupReg+0x44>)
 8001ad2:	78db      	ldrb	r3, [r3, #3]
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <updateRTCBackupReg+0x48>)
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f003 fb1b 	bl	8005114 <HAL_RTCEx_BKUPWrite>

}
 8001ade:	46c0      	nop			@ (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200000bc 	.word	0x200000bc
 8001ae8:	200000a8 	.word	0x200000a8
 8001aec:	20000114 	.word	0x20000114
 8001af0:	20000034 	.word	0x20000034
 8001af4:	20000038 	.word	0x20000038

08001af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001afc:	b672      	cpsid	i
}
 8001afe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b00:	46c0      	nop			@ (mov r8, r8)
 8001b02:	e7fd      	b.n	8001b00 <Error_Handler+0x8>

08001b04 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8001b04:	b5b0      	push	{r4, r5, r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	0005      	movs	r5, r0
 8001b0c:	000c      	movs	r4, r1
 8001b0e:	0010      	movs	r0, r2
 8001b10:	0019      	movs	r1, r3
 8001b12:	1dbb      	adds	r3, r7, #6
 8001b14:	1c2a      	adds	r2, r5, #0
 8001b16:	801a      	strh	r2, [r3, #0]
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	1c22      	adds	r2, r4, #0
 8001b1c:	801a      	strh	r2, [r3, #0]
 8001b1e:	1cbb      	adds	r3, r7, #2
 8001b20:	1c02      	adds	r2, r0, #0
 8001b22:	801a      	strh	r2, [r3, #0]
 8001b24:	003b      	movs	r3, r7
 8001b26:	1c0a      	adds	r2, r1, #0
 8001b28:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001b2a:	4b7c      	ldr	r3, [pc, #496]	@ (8001d1c <sevSeg_Init+0x218>)
 8001b2c:	1dba      	adds	r2, r7, #6
 8001b2e:	8812      	ldrh	r2, [r2, #0]
 8001b30:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8001b32:	4b7b      	ldr	r3, [pc, #492]	@ (8001d20 <sevSeg_Init+0x21c>)
 8001b34:	1d3a      	adds	r2, r7, #4
 8001b36:	8812      	ldrh	r2, [r2, #0]
 8001b38:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001b3a:	4b7a      	ldr	r3, [pc, #488]	@ (8001d24 <sevSeg_Init+0x220>)
 8001b3c:	1cba      	adds	r2, r7, #2
 8001b3e:	8812      	ldrh	r2, [r2, #0]
 8001b40:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8001b42:	4b79      	ldr	r3, [pc, #484]	@ (8001d28 <sevSeg_Init+0x224>)
 8001b44:	003a      	movs	r2, r7
 8001b46:	8812      	ldrh	r2, [r2, #0]
 8001b48:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001b4a:	4a78      	ldr	r2, [pc, #480]	@ (8001d2c <sevSeg_Init+0x228>)
 8001b4c:	2330      	movs	r3, #48	@ 0x30
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8001b54:	4a76      	ldr	r2, [pc, #472]	@ (8001d30 <sevSeg_Init+0x22c>)
 8001b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b58:	0010      	movs	r0, r2
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	234c      	movs	r3, #76	@ 0x4c
 8001b5e:	001a      	movs	r2, r3
 8001b60:	f004 fbaa 	bl	80062b8 <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8001b64:	4b73      	ldr	r3, [pc, #460]	@ (8001d34 <sevSeg_Init+0x230>)
 8001b66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001b68:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
 8001b6e:	e00b      	b.n	8001b88 <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b76:	18d3      	adds	r3, r2, r3
 8001b78:	6819      	ldr	r1, [r3, #0]
 8001b7a:	4b6f      	ldr	r3, [pc, #444]	@ (8001d38 <sevSeg_Init+0x234>)
 8001b7c:	69fa      	ldr	r2, [r7, #28]
 8001b7e:	0092      	lsls	r2, r2, #2
 8001b80:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3301      	adds	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	ddf0      	ble.n	8001b70 <sevSeg_Init+0x6c>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001b8e:	4b6a      	ldr	r3, [pc, #424]	@ (8001d38 <sevSeg_Init+0x234>)
 8001b90:	6918      	ldr	r0, [r3, #16]
 8001b92:	4b66      	ldr	r3, [pc, #408]	@ (8001d2c <sevSeg_Init+0x228>)
 8001b94:	8819      	ldrh	r1, [r3, #0]
 8001b96:	4b69      	ldr	r3, [pc, #420]	@ (8001d3c <sevSeg_Init+0x238>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	001a      	movs	r2, r3
 8001b9c:	f000 fea7 	bl	80028ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001ba0:	4b65      	ldr	r3, [pc, #404]	@ (8001d38 <sevSeg_Init+0x234>)
 8001ba2:	6918      	ldr	r0, [r3, #16]
 8001ba4:	4b61      	ldr	r3, [pc, #388]	@ (8001d2c <sevSeg_Init+0x228>)
 8001ba6:	8819      	ldrh	r1, [r3, #0]
 8001ba8:	4b64      	ldr	r3, [pc, #400]	@ (8001d3c <sevSeg_Init+0x238>)
 8001baa:	785b      	ldrb	r3, [r3, #1]
 8001bac:	001a      	movs	r2, r3
 8001bae:	f000 fe9e 	bl	80028ee <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001bb2:	4b61      	ldr	r3, [pc, #388]	@ (8001d38 <sevSeg_Init+0x234>)
 8001bb4:	6898      	ldr	r0, [r3, #8]
 8001bb6:	4b5b      	ldr	r3, [pc, #364]	@ (8001d24 <sevSeg_Init+0x220>)
 8001bb8:	8819      	ldrh	r1, [r3, #0]
 8001bba:	4b60      	ldr	r3, [pc, #384]	@ (8001d3c <sevSeg_Init+0x238>)
 8001bbc:	785b      	ldrb	r3, [r3, #1]
 8001bbe:	001a      	movs	r2, r3
 8001bc0:	f000 fe95 	bl	80028ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001bc4:	4b5c      	ldr	r3, [pc, #368]	@ (8001d38 <sevSeg_Init+0x234>)
 8001bc6:	6898      	ldr	r0, [r3, #8]
 8001bc8:	4b56      	ldr	r3, [pc, #344]	@ (8001d24 <sevSeg_Init+0x220>)
 8001bca:	8819      	ldrh	r1, [r3, #0]
 8001bcc:	4b5b      	ldr	r3, [pc, #364]	@ (8001d3c <sevSeg_Init+0x238>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	f000 fe8c 	bl	80028ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8001bd6:	4b58      	ldr	r3, [pc, #352]	@ (8001d38 <sevSeg_Init+0x234>)
 8001bd8:	68d8      	ldr	r0, [r3, #12]
 8001bda:	4b53      	ldr	r3, [pc, #332]	@ (8001d28 <sevSeg_Init+0x224>)
 8001bdc:	8819      	ldrh	r1, [r3, #0]
 8001bde:	4b57      	ldr	r3, [pc, #348]	@ (8001d3c <sevSeg_Init+0x238>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	001a      	movs	r2, r3
 8001be4:	f000 fe83 	bl	80028ee <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(50);
 8001be8:	2032      	movs	r0, #50	@ 0x32
 8001bea:	f000 f95d 	bl	8001ea8 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8001bee:	2308      	movs	r3, #8
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	4a53      	ldr	r2, [pc, #332]	@ (8001d40 <sevSeg_Init+0x23c>)
 8001bf4:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	e038      	b.n	8001c6e <sevSeg_Init+0x16a>

		sendByte = hofSymb[i];
 8001bfc:	231b      	movs	r3, #27
 8001bfe:	18fb      	adds	r3, r7, r3
 8001c00:	2208      	movs	r2, #8
 8001c02:	18b9      	adds	r1, r7, r2
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	188a      	adds	r2, r1, r2
 8001c08:	7812      	ldrb	r2, [r2, #0]
 8001c0a:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	e027      	b.n	8001c62 <sevSeg_Init+0x15e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001c12:	4b49      	ldr	r3, [pc, #292]	@ (8001d38 <sevSeg_Init+0x234>)
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	4b41      	ldr	r3, [pc, #260]	@ (8001d1c <sevSeg_Init+0x218>)
 8001c18:	8819      	ldrh	r1, [r3, #0]
 8001c1a:	241b      	movs	r4, #27
 8001c1c:	193b      	adds	r3, r7, r4
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2201      	movs	r2, #1
 8001c22:	4013      	ands	r3, r2
 8001c24:	4a45      	ldr	r2, [pc, #276]	@ (8001d3c <sevSeg_Init+0x238>)
 8001c26:	5cd3      	ldrb	r3, [r2, r3]
 8001c28:	001a      	movs	r2, r3
 8001c2a:	f000 fe60 	bl	80028ee <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001c2e:	4b42      	ldr	r3, [pc, #264]	@ (8001d38 <sevSeg_Init+0x234>)
 8001c30:	6858      	ldr	r0, [r3, #4]
 8001c32:	4b3b      	ldr	r3, [pc, #236]	@ (8001d20 <sevSeg_Init+0x21c>)
 8001c34:	8819      	ldrh	r1, [r3, #0]
 8001c36:	4b41      	ldr	r3, [pc, #260]	@ (8001d3c <sevSeg_Init+0x238>)
 8001c38:	785b      	ldrb	r3, [r3, #1]
 8001c3a:	001a      	movs	r2, r3
 8001c3c:	f000 fe57 	bl	80028ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001c40:	4b3d      	ldr	r3, [pc, #244]	@ (8001d38 <sevSeg_Init+0x234>)
 8001c42:	6858      	ldr	r0, [r3, #4]
 8001c44:	4b36      	ldr	r3, [pc, #216]	@ (8001d20 <sevSeg_Init+0x21c>)
 8001c46:	8819      	ldrh	r1, [r3, #0]
 8001c48:	4b3c      	ldr	r3, [pc, #240]	@ (8001d3c <sevSeg_Init+0x238>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	001a      	movs	r2, r3
 8001c4e:	f000 fe4e 	bl	80028ee <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001c52:	193b      	adds	r3, r7, r4
 8001c54:	193a      	adds	r2, r7, r4
 8001c56:	7812      	ldrb	r2, [r2, #0]
 8001c58:	0852      	lsrs	r2, r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	2b07      	cmp	r3, #7
 8001c66:	ddd4      	ble.n	8001c12 <sevSeg_Init+0x10e>
	for(int i = 0; i <= 3; i++) {
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	ddc3      	ble.n	8001bfc <sevSeg_Init+0xf8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001c74:	4b30      	ldr	r3, [pc, #192]	@ (8001d38 <sevSeg_Init+0x234>)
 8001c76:	6898      	ldr	r0, [r3, #8]
 8001c78:	4b2a      	ldr	r3, [pc, #168]	@ (8001d24 <sevSeg_Init+0x220>)
 8001c7a:	8819      	ldrh	r1, [r3, #0]
 8001c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d3c <sevSeg_Init+0x238>)
 8001c7e:	785b      	ldrb	r3, [r3, #1]
 8001c80:	001a      	movs	r2, r3
 8001c82:	f000 fe34 	bl	80028ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001c86:	4b2c      	ldr	r3, [pc, #176]	@ (8001d38 <sevSeg_Init+0x234>)
 8001c88:	6898      	ldr	r0, [r3, #8]
 8001c8a:	4b26      	ldr	r3, [pc, #152]	@ (8001d24 <sevSeg_Init+0x220>)
 8001c8c:	8819      	ldrh	r1, [r3, #0]
 8001c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d3c <sevSeg_Init+0x238>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	001a      	movs	r2, r3
 8001c94:	f000 fe2b 	bl	80028ee <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8001c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f003 fb16 	bl	80052cc <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8001ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f003 fac6 	bl	8005234 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8001ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cae:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8001cb0:	46c0      	nop			@ (mov r8, r8)
 8001cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1ad2      	subs	r2, r2, r3
 8001cbc:	2380      	movs	r3, #128	@ 0x80
 8001cbe:	01db      	lsls	r3, r3, #7
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d3f6      	bcc.n	8001cb2 <sevSeg_Init+0x1ae>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8001cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f003 fb00 	bl	80052cc <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d38 <sevSeg_Init+0x234>)
 8001cce:	6918      	ldr	r0, [r3, #16]
 8001cd0:	4b16      	ldr	r3, [pc, #88]	@ (8001d2c <sevSeg_Init+0x228>)
 8001cd2:	8819      	ldrh	r1, [r3, #0]
 8001cd4:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <sevSeg_Init+0x238>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	001a      	movs	r2, r3
 8001cda:	f000 fe08 	bl	80028ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001cde:	4b16      	ldr	r3, [pc, #88]	@ (8001d38 <sevSeg_Init+0x234>)
 8001ce0:	6918      	ldr	r0, [r3, #16]
 8001ce2:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <sevSeg_Init+0x228>)
 8001ce4:	8819      	ldrh	r1, [r3, #0]
 8001ce6:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <sevSeg_Init+0x238>)
 8001ce8:	785b      	ldrb	r3, [r3, #1]
 8001cea:	001a      	movs	r2, r3
 8001cec:	f000 fdff 	bl	80028ee <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001cf0:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <sevSeg_Init+0x234>)
 8001cf2:	6898      	ldr	r0, [r3, #8]
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <sevSeg_Init+0x220>)
 8001cf6:	8819      	ldrh	r1, [r3, #0]
 8001cf8:	4b10      	ldr	r3, [pc, #64]	@ (8001d3c <sevSeg_Init+0x238>)
 8001cfa:	785b      	ldrb	r3, [r3, #1]
 8001cfc:	001a      	movs	r2, r3
 8001cfe:	f000 fdf6 	bl	80028ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001d02:	4b0d      	ldr	r3, [pc, #52]	@ (8001d38 <sevSeg_Init+0x234>)
 8001d04:	6898      	ldr	r0, [r3, #8]
 8001d06:	4b07      	ldr	r3, [pc, #28]	@ (8001d24 <sevSeg_Init+0x220>)
 8001d08:	8819      	ldrh	r1, [r3, #0]
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <sevSeg_Init+0x238>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	001a      	movs	r2, r3
 8001d10:	f000 fded 	bl	80028ee <HAL_GPIO_WritePin>

}
 8001d14:	46c0      	nop			@ (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b008      	add	sp, #32
 8001d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d1c:	2000023c 	.word	0x2000023c
 8001d20:	2000023e 	.word	0x2000023e
 8001d24:	20000240 	.word	0x20000240
 8001d28:	20000242 	.word	0x20000242
 8001d2c:	20000244 	.word	0x20000244
 8001d30:	20000248 	.word	0x20000248
 8001d34:	20000294 	.word	0x20000294
 8001d38:	2000004c 	.word	0x2000004c
 8001d3c:	20000060 	.word	0x20000060
 8001d40:	471d3700 	.word	0x471d3700

08001d44 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 8001d44:	b590      	push	{r4, r7, lr}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	210a      	movs	r1, #10
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7fe f9d6 	bl	8000104 <__udivsi3>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	2408      	movs	r4, #8
 8001d5e:	193b      	adds	r3, r7, r4
 8001d60:	701a      	strb	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	210a      	movs	r1, #10
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7fe fa51 	bl	8000210 <__aeabi_uidivmod>
 8001d6e:	000b      	movs	r3, r1
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	193b      	adds	r3, r7, r4
 8001d74:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001d7a:	210a      	movs	r1, #10
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f7fe f9c1 	bl	8000104 <__udivsi3>
 8001d82:	0003      	movs	r3, r0
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	193b      	adds	r3, r7, r4
 8001d88:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001d8e:	210a      	movs	r1, #10
 8001d90:	0018      	movs	r0, r3
 8001d92:	f7fe fa3d 	bl	8000210 <__aeabi_uidivmod>
 8001d96:	000b      	movs	r3, r1
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	193b      	adds	r3, r7, r4
 8001d9c:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 8001d9e:	2116      	movs	r1, #22
 8001da0:	187b      	adds	r3, r7, r1
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	78db      	ldrb	r3, [r3, #3]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d102      	bne.n	8001db4 <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 8001dae:	187b      	adds	r3, r7, r1
 8001db0:	2202      	movs	r2, #2
 8001db2:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 4; i++) {
 8001db4:	2300      	movs	r3, #0
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	e04f      	b.n	8001e5a <sevSeg_updateDigits+0x116>

		sendByte = dispDigits[sendTime[i]];
 8001dba:	2308      	movs	r3, #8
 8001dbc:	18fa      	adds	r2, r7, r3
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	18d3      	adds	r3, r2, r3
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	2417      	movs	r4, #23
 8001dc8:	193b      	adds	r3, r7, r4
 8001dca:	4a30      	ldr	r2, [pc, #192]	@ (8001e8c <sevSeg_updateDigits+0x148>)
 8001dcc:	5c52      	ldrb	r2, [r2, r1]
 8001dce:	701a      	strb	r2, [r3, #0]

		if(i == 0) {		// If tenth's place of hour, use special values
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d110      	bne.n	8001df8 <sevSeg_updateDigits+0xb4>
			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	210a      	movs	r1, #10
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f7fe f991 	bl	8000104 <__udivsi3>
 8001de2:	0003      	movs	r3, r0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	001a      	movs	r2, r3
 8001de8:	2316      	movs	r3, #22
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	18d2      	adds	r2, r2, r3
 8001df0:	193b      	adds	r3, r7, r4
 8001df2:	4927      	ldr	r1, [pc, #156]	@ (8001e90 <sevSeg_updateDigits+0x14c>)
 8001df4:	5c8a      	ldrb	r2, [r1, r2]
 8001df6:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	e027      	b.n	8001e4e <sevSeg_updateDigits+0x10a>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001dfe:	4b25      	ldr	r3, [pc, #148]	@ (8001e94 <sevSeg_updateDigits+0x150>)
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	4b25      	ldr	r3, [pc, #148]	@ (8001e98 <sevSeg_updateDigits+0x154>)
 8001e04:	8819      	ldrh	r1, [r3, #0]
 8001e06:	2417      	movs	r4, #23
 8001e08:	193b      	adds	r3, r7, r4
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	4013      	ands	r3, r2
 8001e10:	4a22      	ldr	r2, [pc, #136]	@ (8001e9c <sevSeg_updateDigits+0x158>)
 8001e12:	5cd3      	ldrb	r3, [r2, r3]
 8001e14:	001a      	movs	r2, r3
 8001e16:	f000 fd6a 	bl	80028ee <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e94 <sevSeg_updateDigits+0x150>)
 8001e1c:	6858      	ldr	r0, [r3, #4]
 8001e1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ea0 <sevSeg_updateDigits+0x15c>)
 8001e20:	8819      	ldrh	r1, [r3, #0]
 8001e22:	4b1e      	ldr	r3, [pc, #120]	@ (8001e9c <sevSeg_updateDigits+0x158>)
 8001e24:	785b      	ldrb	r3, [r3, #1]
 8001e26:	001a      	movs	r2, r3
 8001e28:	f000 fd61 	bl	80028ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001e2c:	4b19      	ldr	r3, [pc, #100]	@ (8001e94 <sevSeg_updateDigits+0x150>)
 8001e2e:	6858      	ldr	r0, [r3, #4]
 8001e30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea0 <sevSeg_updateDigits+0x15c>)
 8001e32:	8819      	ldrh	r1, [r3, #0]
 8001e34:	4b19      	ldr	r3, [pc, #100]	@ (8001e9c <sevSeg_updateDigits+0x158>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	001a      	movs	r2, r3
 8001e3a:	f000 fd58 	bl	80028ee <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001e3e:	193b      	adds	r3, r7, r4
 8001e40:	193a      	adds	r2, r7, r4
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	0852      	lsrs	r2, r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b07      	cmp	r3, #7
 8001e52:	ddd4      	ble.n	8001dfe <sevSeg_updateDigits+0xba>
	for(int i = 0; i < 4; i++) {
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	3301      	adds	r3, #1
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	ddac      	ble.n	8001dba <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001e60:	4b0c      	ldr	r3, [pc, #48]	@ (8001e94 <sevSeg_updateDigits+0x150>)
 8001e62:	6898      	ldr	r0, [r3, #8]
 8001e64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea4 <sevSeg_updateDigits+0x160>)
 8001e66:	8819      	ldrh	r1, [r3, #0]
 8001e68:	4b0c      	ldr	r3, [pc, #48]	@ (8001e9c <sevSeg_updateDigits+0x158>)
 8001e6a:	785b      	ldrb	r3, [r3, #1]
 8001e6c:	001a      	movs	r2, r3
 8001e6e:	f000 fd3e 	bl	80028ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001e72:	4b08      	ldr	r3, [pc, #32]	@ (8001e94 <sevSeg_updateDigits+0x150>)
 8001e74:	6898      	ldr	r0, [r3, #8]
 8001e76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <sevSeg_updateDigits+0x160>)
 8001e78:	8819      	ldrh	r1, [r3, #0]
 8001e7a:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <sevSeg_updateDigits+0x158>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	001a      	movs	r2, r3
 8001e80:	f000 fd35 	bl	80028ee <HAL_GPIO_WritePin>

	return;
 8001e84:	46c0      	nop			@ (mov r8, r8)

}
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b007      	add	sp, #28
 8001e8a:	bd90      	pop	{r4, r7, pc}
 8001e8c:	0800630c 	.word	0x0800630c
 8001e90:	08006318 	.word	0x08006318
 8001e94:	2000004c 	.word	0x2000004c
 8001e98:	2000023c 	.word	0x2000023c
 8001e9c:	20000060 	.word	0x20000060
 8001ea0:	2000023e 	.word	0x2000023e
 8001ea4:	20000240 	.word	0x20000240

08001ea8 <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	0002      	movs	r2, r0
 8001eb0:	1dbb      	adds	r3, r7, #6
 8001eb2:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 8001eb4:	4b20      	ldr	r3, [pc, #128]	@ (8001f38 <sevSeg_setIntensity+0x90>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d105      	bne.n	8001ec8 <sevSeg_setIntensity+0x20>
 8001ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f3c <sevSeg_setIntensity+0x94>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	1dba      	adds	r2, r7, #6
 8001ec2:	8812      	ldrh	r2, [r2, #0]
 8001ec4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ec6:	e02c      	b.n	8001f22 <sevSeg_setIntensity+0x7a>
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <sevSeg_setIntensity+0x90>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d105      	bne.n	8001edc <sevSeg_setIntensity+0x34>
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f3c <sevSeg_setIntensity+0x94>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	1dbb      	adds	r3, r7, #6
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	6393      	str	r3, [r2, #56]	@ 0x38
 8001eda:	e022      	b.n	8001f22 <sevSeg_setIntensity+0x7a>
 8001edc:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <sevSeg_setIntensity+0x90>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d105      	bne.n	8001ef0 <sevSeg_setIntensity+0x48>
 8001ee4:	4b15      	ldr	r3, [pc, #84]	@ (8001f3c <sevSeg_setIntensity+0x94>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	1dbb      	adds	r3, r7, #6
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001eee:	e018      	b.n	8001f22 <sevSeg_setIntensity+0x7a>
 8001ef0:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <sevSeg_setIntensity+0x90>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b0c      	cmp	r3, #12
 8001ef6:	d105      	bne.n	8001f04 <sevSeg_setIntensity+0x5c>
 8001ef8:	4b10      	ldr	r3, [pc, #64]	@ (8001f3c <sevSeg_setIntensity+0x94>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	1dbb      	adds	r3, r7, #6
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f02:	e00e      	b.n	8001f22 <sevSeg_setIntensity+0x7a>
 8001f04:	4b0c      	ldr	r3, [pc, #48]	@ (8001f38 <sevSeg_setIntensity+0x90>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b10      	cmp	r3, #16
 8001f0a:	d105      	bne.n	8001f18 <sevSeg_setIntensity+0x70>
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f3c <sevSeg_setIntensity+0x94>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	1dbb      	adds	r3, r7, #6
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f16:	e004      	b.n	8001f22 <sevSeg_setIntensity+0x7a>
 8001f18:	4b08      	ldr	r3, [pc, #32]	@ (8001f3c <sevSeg_setIntensity+0x94>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	1dbb      	adds	r3, r7, #6
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 8001f22:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <sevSeg_setIntensity+0x90>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <sevSeg_setIntensity+0x94>)
 8001f28:	0011      	movs	r1, r2
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f003 face 	bl	80054cc <HAL_TIM_PWM_Start>

}
 8001f30:	46c0      	nop			@ (mov r8, r8)
 8001f32:	46bd      	mov	sp, r7
 8001f34:	b002      	add	sp, #8
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000294 	.word	0x20000294
 8001f3c:	20000248 	.word	0x20000248

08001f40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f46:	4b13      	ldr	r3, [pc, #76]	@ (8001f94 <HAL_MspInit+0x54>)
 8001f48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f4a:	4b12      	ldr	r3, [pc, #72]	@ (8001f94 <HAL_MspInit+0x54>)
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f52:	4b10      	ldr	r3, [pc, #64]	@ (8001f94 <HAL_MspInit+0x54>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	2201      	movs	r2, #1
 8001f58:	4013      	ands	r3, r2
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f94 <HAL_MspInit+0x54>)
 8001f60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f62:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <HAL_MspInit+0x54>)
 8001f64:	2180      	movs	r1, #128	@ 0x80
 8001f66:	0549      	lsls	r1, r1, #21
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f6c:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <HAL_MspInit+0x54>)
 8001f6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f70:	2380      	movs	r3, #128	@ 0x80
 8001f72:	055b      	lsls	r3, r3, #21
 8001f74:	4013      	ands	r3, r2
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2004      	movs	r0, #4
 8001f80:	f000 fb02 	bl	8002588 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001f84:	2004      	movs	r0, #4
 8001f86:	f000 fb14 	bl	80025b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f8a:	46c0      	nop			@ (mov r8, r8)
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b002      	add	sp, #8
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	40021000 	.word	0x40021000

08001f98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b095      	sub	sp, #84	@ 0x54
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	233c      	movs	r3, #60	@ 0x3c
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	2314      	movs	r3, #20
 8001fa8:	001a      	movs	r2, r3
 8001faa:	2100      	movs	r1, #0
 8001fac:	f004 f958 	bl	8006260 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fb0:	2414      	movs	r4, #20
 8001fb2:	193b      	adds	r3, r7, r4
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	2328      	movs	r3, #40	@ 0x28
 8001fb8:	001a      	movs	r2, r3
 8001fba:	2100      	movs	r1, #0
 8001fbc:	f004 f950 	bl	8006260 <memset>
  if(hi2c->Instance==I2C1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a22      	ldr	r2, [pc, #136]	@ (8002050 <HAL_I2C_MspInit+0xb8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d13d      	bne.n	8002046 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fca:	193b      	adds	r3, r7, r4
 8001fcc:	2220      	movs	r2, #32
 8001fce:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fd0:	193b      	adds	r3, r7, r4
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd6:	193b      	adds	r3, r7, r4
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f002 f83b 	bl	8004054 <HAL_RCCEx_PeriphCLKConfig>
 8001fde:	1e03      	subs	r3, r0, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001fe2:	f7ff fd89 	bl	8001af8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <HAL_I2C_MspInit+0xbc>)
 8001fe8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fea:	4b1a      	ldr	r3, [pc, #104]	@ (8002054 <HAL_I2C_MspInit+0xbc>)
 8001fec:	2102      	movs	r1, #2
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ff2:	4b18      	ldr	r3, [pc, #96]	@ (8002054 <HAL_I2C_MspInit+0xbc>)
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ffe:	213c      	movs	r1, #60	@ 0x3c
 8002000:	187b      	adds	r3, r7, r1
 8002002:	22c0      	movs	r2, #192	@ 0xc0
 8002004:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002006:	187b      	adds	r3, r7, r1
 8002008:	2212      	movs	r2, #18
 800200a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	187b      	adds	r3, r7, r1
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	187b      	adds	r3, r7, r1
 8002014:	2200      	movs	r2, #0
 8002016:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002018:	187b      	adds	r3, r7, r1
 800201a:	2206      	movs	r2, #6
 800201c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201e:	187b      	adds	r3, r7, r1
 8002020:	4a0d      	ldr	r2, [pc, #52]	@ (8002058 <HAL_I2C_MspInit+0xc0>)
 8002022:	0019      	movs	r1, r3
 8002024:	0010      	movs	r0, r2
 8002026:	f000 fae1 	bl	80025ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800202a:	4b0a      	ldr	r3, [pc, #40]	@ (8002054 <HAL_I2C_MspInit+0xbc>)
 800202c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800202e:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <HAL_I2C_MspInit+0xbc>)
 8002030:	2180      	movs	r1, #128	@ 0x80
 8002032:	0389      	lsls	r1, r1, #14
 8002034:	430a      	orrs	r2, r1
 8002036:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <HAL_I2C_MspInit+0xbc>)
 800203a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800203c:	2380      	movs	r3, #128	@ 0x80
 800203e:	039b      	lsls	r3, r3, #14
 8002040:	4013      	ands	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	46bd      	mov	sp, r7
 800204a:	b015      	add	sp, #84	@ 0x54
 800204c:	bd90      	pop	{r4, r7, pc}
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	40005400 	.word	0x40005400
 8002054:	40021000 	.word	0x40021000
 8002058:	50000400 	.word	0x50000400

0800205c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800205c:	b590      	push	{r4, r7, lr}
 800205e:	b08f      	sub	sp, #60	@ 0x3c
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002064:	2410      	movs	r4, #16
 8002066:	193b      	adds	r3, r7, r4
 8002068:	0018      	movs	r0, r3
 800206a:	2328      	movs	r3, #40	@ 0x28
 800206c:	001a      	movs	r2, r3
 800206e:	2100      	movs	r1, #0
 8002070:	f004 f8f6 	bl	8006260 <memset>
  if(hrtc->Instance==RTC)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a19      	ldr	r2, [pc, #100]	@ (80020e0 <HAL_RTC_MspInit+0x84>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d12c      	bne.n	80020d8 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800207e:	193b      	adds	r3, r7, r4
 8002080:	2280      	movs	r2, #128	@ 0x80
 8002082:	0292      	lsls	r2, r2, #10
 8002084:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002086:	193b      	adds	r3, r7, r4
 8002088:	2280      	movs	r2, #128	@ 0x80
 800208a:	0052      	lsls	r2, r2, #1
 800208c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800208e:	193b      	adds	r3, r7, r4
 8002090:	0018      	movs	r0, r3
 8002092:	f001 ffdf 	bl	8004054 <HAL_RCCEx_PeriphCLKConfig>
 8002096:	1e03      	subs	r3, r0, #0
 8002098:	d001      	beq.n	800209e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800209a:	f7ff fd2d 	bl	8001af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800209e:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <HAL_RTC_MspInit+0x88>)
 80020a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020a2:	4b10      	ldr	r3, [pc, #64]	@ (80020e4 <HAL_RTC_MspInit+0x88>)
 80020a4:	2180      	movs	r1, #128	@ 0x80
 80020a6:	0209      	lsls	r1, r1, #8
 80020a8:	430a      	orrs	r2, r1
 80020aa:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80020ac:	4b0d      	ldr	r3, [pc, #52]	@ (80020e4 <HAL_RTC_MspInit+0x88>)
 80020ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020b0:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <HAL_RTC_MspInit+0x88>)
 80020b2:	2180      	movs	r1, #128	@ 0x80
 80020b4:	00c9      	lsls	r1, r1, #3
 80020b6:	430a      	orrs	r2, r1
 80020b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020ba:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <HAL_RTC_MspInit+0x88>)
 80020bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020be:	2380      	movs	r3, #128	@ 0x80
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4013      	ands	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2100      	movs	r1, #0
 80020cc:	2002      	movs	r0, #2
 80020ce:	f000 fa5b 	bl	8002588 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80020d2:	2002      	movs	r0, #2
 80020d4:	f000 fa6d 	bl	80025b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80020d8:	46c0      	nop			@ (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	b00f      	add	sp, #60	@ 0x3c
 80020de:	bd90      	pop	{r4, r7, pc}
 80020e0:	40002800 	.word	0x40002800
 80020e4:	40021000 	.word	0x40021000

080020e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2380      	movs	r3, #128	@ 0x80
 80020f6:	05db      	lsls	r3, r3, #23
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d10b      	bne.n	8002114 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020fc:	4b07      	ldr	r3, [pc, #28]	@ (800211c <HAL_TIM_PWM_MspInit+0x34>)
 80020fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_TIM_PWM_MspInit+0x34>)
 8002102:	2101      	movs	r1, #1
 8002104:	430a      	orrs	r2, r1
 8002106:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002108:	4b04      	ldr	r3, [pc, #16]	@ (800211c <HAL_TIM_PWM_MspInit+0x34>)
 800210a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800210c:	2201      	movs	r2, #1
 800210e:	4013      	ands	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002114:	46c0      	nop			@ (mov r8, r8)
 8002116:	46bd      	mov	sp, r7
 8002118:	b004      	add	sp, #16
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000

08002120 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a18      	ldr	r2, [pc, #96]	@ (8002190 <HAL_TIM_Base_MspInit+0x70>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d10e      	bne.n	8002150 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002132:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <HAL_TIM_Base_MspInit+0x74>)
 8002134:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002136:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <HAL_TIM_Base_MspInit+0x74>)
 8002138:	2180      	movs	r1, #128	@ 0x80
 800213a:	0209      	lsls	r1, r1, #8
 800213c:	430a      	orrs	r2, r1
 800213e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002140:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <HAL_TIM_Base_MspInit+0x74>)
 8002142:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002144:	2380      	movs	r3, #128	@ 0x80
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	4013      	ands	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800214e:	e01a      	b.n	8002186 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a10      	ldr	r2, [pc, #64]	@ (8002198 <HAL_TIM_Base_MspInit+0x78>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d115      	bne.n	8002186 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800215a:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <HAL_TIM_Base_MspInit+0x74>)
 800215c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800215e:	4b0d      	ldr	r3, [pc, #52]	@ (8002194 <HAL_TIM_Base_MspInit+0x74>)
 8002160:	2180      	movs	r1, #128	@ 0x80
 8002162:	0289      	lsls	r1, r1, #10
 8002164:	430a      	orrs	r2, r1
 8002166:	641a      	str	r2, [r3, #64]	@ 0x40
 8002168:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <HAL_TIM_Base_MspInit+0x74>)
 800216a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800216c:	2380      	movs	r3, #128	@ 0x80
 800216e:	029b      	lsls	r3, r3, #10
 8002170:	4013      	ands	r3, r2
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	2015      	movs	r0, #21
 800217c:	f000 fa04 	bl	8002588 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002180:	2015      	movs	r0, #21
 8002182:	f000 fa16 	bl	80025b2 <HAL_NVIC_EnableIRQ>
}
 8002186:	46c0      	nop			@ (mov r8, r8)
 8002188:	46bd      	mov	sp, r7
 800218a:	b004      	add	sp, #16
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			@ (mov r8, r8)
 8002190:	40002000 	.word	0x40002000
 8002194:	40021000 	.word	0x40021000
 8002198:	40014400 	.word	0x40014400

0800219c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b089      	sub	sp, #36	@ 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	240c      	movs	r4, #12
 80021a6:	193b      	adds	r3, r7, r4
 80021a8:	0018      	movs	r0, r3
 80021aa:	2314      	movs	r3, #20
 80021ac:	001a      	movs	r2, r3
 80021ae:	2100      	movs	r1, #0
 80021b0:	f004 f856 	bl	8006260 <memset>
  if(htim->Instance==TIM2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2380      	movs	r3, #128	@ 0x80
 80021ba:	05db      	lsls	r3, r3, #23
 80021bc:	429a      	cmp	r2, r3
 80021be:	d121      	bne.n	8002204 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c0:	4b12      	ldr	r3, [pc, #72]	@ (800220c <HAL_TIM_MspPostInit+0x70>)
 80021c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021c4:	4b11      	ldr	r3, [pc, #68]	@ (800220c <HAL_TIM_MspPostInit+0x70>)
 80021c6:	2104      	movs	r1, #4
 80021c8:	430a      	orrs	r2, r1
 80021ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80021cc:	4b0f      	ldr	r3, [pc, #60]	@ (800220c <HAL_TIM_MspPostInit+0x70>)
 80021ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d0:	2204      	movs	r2, #4
 80021d2:	4013      	ands	r3, r2
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SHIFT_OUTPUT_EN_PWM_Pin;
 80021d8:	0021      	movs	r1, r4
 80021da:	187b      	adds	r3, r7, r1
 80021dc:	2240      	movs	r2, #64	@ 0x40
 80021de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	187b      	adds	r3, r7, r1
 80021e2:	2202      	movs	r2, #2
 80021e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	187b      	adds	r3, r7, r1
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	187b      	adds	r3, r7, r1
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80021f2:	187b      	adds	r3, r7, r1
 80021f4:	2202      	movs	r2, #2
 80021f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SHIFT_OUTPUT_EN_PWM_GPIO_Port, &GPIO_InitStruct);
 80021f8:	187b      	adds	r3, r7, r1
 80021fa:	4a05      	ldr	r2, [pc, #20]	@ (8002210 <HAL_TIM_MspPostInit+0x74>)
 80021fc:	0019      	movs	r1, r3
 80021fe:	0010      	movs	r0, r2
 8002200:	f000 f9f4 	bl	80025ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002204:	46c0      	nop			@ (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	b009      	add	sp, #36	@ 0x24
 800220a:	bd90      	pop	{r4, r7, pc}
 800220c:	40021000 	.word	0x40021000
 8002210:	50000800 	.word	0x50000800

08002214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002218:	46c0      	nop			@ (mov r8, r8)
 800221a:	e7fd      	b.n	8002218 <NMI_Handler+0x4>

0800221c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002220:	46c0      	nop			@ (mov r8, r8)
 8002222:	e7fd      	b.n	8002220 <HardFault_Handler+0x4>

08002224 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002228:	46c0      	nop			@ (mov r8, r8)
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002232:	46c0      	nop			@ (mov r8, r8)
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800223c:	f000 f8dc 	bl	80023f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002240:	46c0      	nop			@ (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800224c:	4b03      	ldr	r3, [pc, #12]	@ (800225c <RTC_TAMP_IRQHandler+0x14>)
 800224e:	0018      	movs	r0, r3
 8002250:	f002 fd7e 	bl	8004d50 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8002254:	46c0      	nop			@ (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			@ (mov r8, r8)
 800225c:	20000114 	.word	0x20000114

08002260 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002264:	46c0      	nop			@ (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_Pin);
 800226e:	2001      	movs	r0, #1
 8002270:	f000 fb76 	bl	8002960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_Pin);
 8002274:	2002      	movs	r0, #2
 8002276:	f000 fb73 	bl	8002960 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_Pin);
 8002284:	2004      	movs	r0, #4
 8002286:	f000 fb6b 	bl	8002960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_Pin);
 800228a:	2008      	movs	r0, #8
 800228c:	f000 fb68 	bl	8002960 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002290:	46c0      	nop			@ (mov r8, r8)
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_Pin);
 800229a:	2380      	movs	r3, #128	@ 0x80
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	0018      	movs	r0, r3
 80022a0:	f000 fb5e 	bl	8002960 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80022a4:	46c0      	nop			@ (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80022b0:	4b03      	ldr	r3, [pc, #12]	@ (80022c0 <TIM16_IRQHandler+0x14>)
 80022b2:	0018      	movs	r0, r3
 80022b4:	f003 f9e8 	bl	8005688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80022b8:	46c0      	nop			@ (mov r8, r8)
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	200001d8 	.word	0x200001d8

080022c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c8:	46c0      	nop			@ (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022d0:	480d      	ldr	r0, [pc, #52]	@ (8002308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80022d4:	f7ff fff6 	bl	80022c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d8:	480c      	ldr	r0, [pc, #48]	@ (800230c <LoopForever+0x6>)
  ldr r1, =_edata
 80022da:	490d      	ldr	r1, [pc, #52]	@ (8002310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002314 <LoopForever+0xe>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e0:	e002      	b.n	80022e8 <LoopCopyDataInit>

080022e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e6:	3304      	adds	r3, #4

080022e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ec:	d3f9      	bcc.n	80022e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022f0:	4c0a      	ldr	r4, [pc, #40]	@ (800231c <LoopForever+0x16>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f4:	e001      	b.n	80022fa <LoopFillZerobss>

080022f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f8:	3204      	adds	r2, #4

080022fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022fc:	d3fb      	bcc.n	80022f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80022fe:	f003 ffb7 	bl	8006270 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002302:	f7fe fb4b 	bl	800099c <main>

08002306 <LoopForever>:

LoopForever:
  b LoopForever
 8002306:	e7fe      	b.n	8002306 <LoopForever>
  ldr   r0, =_estack
 8002308:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800230c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002310:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002314:	080063b8 	.word	0x080063b8
  ldr r2, =_sbss
 8002318:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800231c:	2000029c 	.word	0x2000029c

08002320 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002320:	e7fe      	b.n	8002320 <ADC1_IRQHandler>
	...

08002324 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800232a:	1dfb      	adds	r3, r7, #7
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002330:	4b0b      	ldr	r3, [pc, #44]	@ (8002360 <HAL_Init+0x3c>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <HAL_Init+0x3c>)
 8002336:	2180      	movs	r1, #128	@ 0x80
 8002338:	0049      	lsls	r1, r1, #1
 800233a:	430a      	orrs	r2, r1
 800233c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800233e:	2003      	movs	r0, #3
 8002340:	f000 f810 	bl	8002364 <HAL_InitTick>
 8002344:	1e03      	subs	r3, r0, #0
 8002346:	d003      	beq.n	8002350 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002348:	1dfb      	adds	r3, r7, #7
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
 800234e:	e001      	b.n	8002354 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002350:	f7ff fdf6 	bl	8001f40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002354:	1dfb      	adds	r3, r7, #7
 8002356:	781b      	ldrb	r3, [r3, #0]
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b002      	add	sp, #8
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40022000 	.word	0x40022000

08002364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800236c:	230f      	movs	r3, #15
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002374:	4b1d      	ldr	r3, [pc, #116]	@ (80023ec <HAL_InitTick+0x88>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d02b      	beq.n	80023d4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800237c:	4b1c      	ldr	r3, [pc, #112]	@ (80023f0 <HAL_InitTick+0x8c>)
 800237e:	681c      	ldr	r4, [r3, #0]
 8002380:	4b1a      	ldr	r3, [pc, #104]	@ (80023ec <HAL_InitTick+0x88>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	0019      	movs	r1, r3
 8002386:	23fa      	movs	r3, #250	@ 0xfa
 8002388:	0098      	lsls	r0, r3, #2
 800238a:	f7fd febb 	bl	8000104 <__udivsi3>
 800238e:	0003      	movs	r3, r0
 8002390:	0019      	movs	r1, r3
 8002392:	0020      	movs	r0, r4
 8002394:	f7fd feb6 	bl	8000104 <__udivsi3>
 8002398:	0003      	movs	r3, r0
 800239a:	0018      	movs	r0, r3
 800239c:	f000 f919 	bl	80025d2 <HAL_SYSTICK_Config>
 80023a0:	1e03      	subs	r3, r0, #0
 80023a2:	d112      	bne.n	80023ca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d80a      	bhi.n	80023c0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	2301      	movs	r3, #1
 80023ae:	425b      	negs	r3, r3
 80023b0:	2200      	movs	r2, #0
 80023b2:	0018      	movs	r0, r3
 80023b4:	f000 f8e8 	bl	8002588 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023b8:	4b0e      	ldr	r3, [pc, #56]	@ (80023f4 <HAL_InitTick+0x90>)
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	e00d      	b.n	80023dc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80023c0:	230f      	movs	r3, #15
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	2201      	movs	r2, #1
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e008      	b.n	80023dc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023ca:	230f      	movs	r3, #15
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]
 80023d2:	e003      	b.n	80023dc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023d4:	230f      	movs	r3, #15
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80023dc:	230f      	movs	r3, #15
 80023de:	18fb      	adds	r3, r7, r3
 80023e0:	781b      	ldrb	r3, [r3, #0]
}
 80023e2:	0018      	movs	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b005      	add	sp, #20
 80023e8:	bd90      	pop	{r4, r7, pc}
 80023ea:	46c0      	nop			@ (mov r8, r8)
 80023ec:	2000006c 	.word	0x2000006c
 80023f0:	20000064 	.word	0x20000064
 80023f4:	20000068 	.word	0x20000068

080023f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023fc:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <HAL_IncTick+0x1c>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	001a      	movs	r2, r3
 8002402:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <HAL_IncTick+0x20>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	18d2      	adds	r2, r2, r3
 8002408:	4b03      	ldr	r3, [pc, #12]	@ (8002418 <HAL_IncTick+0x20>)
 800240a:	601a      	str	r2, [r3, #0]
}
 800240c:	46c0      	nop			@ (mov r8, r8)
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	46c0      	nop			@ (mov r8, r8)
 8002414:	2000006c 	.word	0x2000006c
 8002418:	20000298 	.word	0x20000298

0800241c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  return uwTick;
 8002420:	4b02      	ldr	r3, [pc, #8]	@ (800242c <HAL_GetTick+0x10>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	0018      	movs	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	46c0      	nop			@ (mov r8, r8)
 800242c:	20000298 	.word	0x20000298

08002430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	0002      	movs	r2, r0
 8002438:	1dfb      	adds	r3, r7, #7
 800243a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800243c:	1dfb      	adds	r3, r7, #7
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b7f      	cmp	r3, #127	@ 0x7f
 8002442:	d809      	bhi.n	8002458 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002444:	1dfb      	adds	r3, r7, #7
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	001a      	movs	r2, r3
 800244a:	231f      	movs	r3, #31
 800244c:	401a      	ands	r2, r3
 800244e:	4b04      	ldr	r3, [pc, #16]	@ (8002460 <__NVIC_EnableIRQ+0x30>)
 8002450:	2101      	movs	r1, #1
 8002452:	4091      	lsls	r1, r2
 8002454:	000a      	movs	r2, r1
 8002456:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002458:	46c0      	nop			@ (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	b002      	add	sp, #8
 800245e:	bd80      	pop	{r7, pc}
 8002460:	e000e100 	.word	0xe000e100

08002464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	0002      	movs	r2, r0
 800246c:	6039      	str	r1, [r7, #0]
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002472:	1dfb      	adds	r3, r7, #7
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b7f      	cmp	r3, #127	@ 0x7f
 8002478:	d828      	bhi.n	80024cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800247a:	4a2f      	ldr	r2, [pc, #188]	@ (8002538 <__NVIC_SetPriority+0xd4>)
 800247c:	1dfb      	adds	r3, r7, #7
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	b25b      	sxtb	r3, r3
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	33c0      	adds	r3, #192	@ 0xc0
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	589b      	ldr	r3, [r3, r2]
 800248a:	1dfa      	adds	r2, r7, #7
 800248c:	7812      	ldrb	r2, [r2, #0]
 800248e:	0011      	movs	r1, r2
 8002490:	2203      	movs	r2, #3
 8002492:	400a      	ands	r2, r1
 8002494:	00d2      	lsls	r2, r2, #3
 8002496:	21ff      	movs	r1, #255	@ 0xff
 8002498:	4091      	lsls	r1, r2
 800249a:	000a      	movs	r2, r1
 800249c:	43d2      	mvns	r2, r2
 800249e:	401a      	ands	r2, r3
 80024a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	019b      	lsls	r3, r3, #6
 80024a6:	22ff      	movs	r2, #255	@ 0xff
 80024a8:	401a      	ands	r2, r3
 80024aa:	1dfb      	adds	r3, r7, #7
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	0018      	movs	r0, r3
 80024b0:	2303      	movs	r3, #3
 80024b2:	4003      	ands	r3, r0
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024b8:	481f      	ldr	r0, [pc, #124]	@ (8002538 <__NVIC_SetPriority+0xd4>)
 80024ba:	1dfb      	adds	r3, r7, #7
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	b25b      	sxtb	r3, r3
 80024c0:	089b      	lsrs	r3, r3, #2
 80024c2:	430a      	orrs	r2, r1
 80024c4:	33c0      	adds	r3, #192	@ 0xc0
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80024ca:	e031      	b.n	8002530 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024cc:	4a1b      	ldr	r2, [pc, #108]	@ (800253c <__NVIC_SetPriority+0xd8>)
 80024ce:	1dfb      	adds	r3, r7, #7
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	0019      	movs	r1, r3
 80024d4:	230f      	movs	r3, #15
 80024d6:	400b      	ands	r3, r1
 80024d8:	3b08      	subs	r3, #8
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	3306      	adds	r3, #6
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	18d3      	adds	r3, r2, r3
 80024e2:	3304      	adds	r3, #4
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	1dfa      	adds	r2, r7, #7
 80024e8:	7812      	ldrb	r2, [r2, #0]
 80024ea:	0011      	movs	r1, r2
 80024ec:	2203      	movs	r2, #3
 80024ee:	400a      	ands	r2, r1
 80024f0:	00d2      	lsls	r2, r2, #3
 80024f2:	21ff      	movs	r1, #255	@ 0xff
 80024f4:	4091      	lsls	r1, r2
 80024f6:	000a      	movs	r2, r1
 80024f8:	43d2      	mvns	r2, r2
 80024fa:	401a      	ands	r2, r3
 80024fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	019b      	lsls	r3, r3, #6
 8002502:	22ff      	movs	r2, #255	@ 0xff
 8002504:	401a      	ands	r2, r3
 8002506:	1dfb      	adds	r3, r7, #7
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	0018      	movs	r0, r3
 800250c:	2303      	movs	r3, #3
 800250e:	4003      	ands	r3, r0
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002514:	4809      	ldr	r0, [pc, #36]	@ (800253c <__NVIC_SetPriority+0xd8>)
 8002516:	1dfb      	adds	r3, r7, #7
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	001c      	movs	r4, r3
 800251c:	230f      	movs	r3, #15
 800251e:	4023      	ands	r3, r4
 8002520:	3b08      	subs	r3, #8
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	430a      	orrs	r2, r1
 8002526:	3306      	adds	r3, #6
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	18c3      	adds	r3, r0, r3
 800252c:	3304      	adds	r3, #4
 800252e:	601a      	str	r2, [r3, #0]
}
 8002530:	46c0      	nop			@ (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	b003      	add	sp, #12
 8002536:	bd90      	pop	{r4, r7, pc}
 8002538:	e000e100 	.word	0xe000e100
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	1e5a      	subs	r2, r3, #1
 800254c:	2380      	movs	r3, #128	@ 0x80
 800254e:	045b      	lsls	r3, r3, #17
 8002550:	429a      	cmp	r2, r3
 8002552:	d301      	bcc.n	8002558 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002554:	2301      	movs	r3, #1
 8002556:	e010      	b.n	800257a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002558:	4b0a      	ldr	r3, [pc, #40]	@ (8002584 <SysTick_Config+0x44>)
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	3a01      	subs	r2, #1
 800255e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002560:	2301      	movs	r3, #1
 8002562:	425b      	negs	r3, r3
 8002564:	2103      	movs	r1, #3
 8002566:	0018      	movs	r0, r3
 8002568:	f7ff ff7c 	bl	8002464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800256c:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <SysTick_Config+0x44>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002572:	4b04      	ldr	r3, [pc, #16]	@ (8002584 <SysTick_Config+0x44>)
 8002574:	2207      	movs	r2, #7
 8002576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002578:	2300      	movs	r3, #0
}
 800257a:	0018      	movs	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	b002      	add	sp, #8
 8002580:	bd80      	pop	{r7, pc}
 8002582:	46c0      	nop			@ (mov r8, r8)
 8002584:	e000e010 	.word	0xe000e010

08002588 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	210f      	movs	r1, #15
 8002594:	187b      	adds	r3, r7, r1
 8002596:	1c02      	adds	r2, r0, #0
 8002598:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	187b      	adds	r3, r7, r1
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	b25b      	sxtb	r3, r3
 80025a2:	0011      	movs	r1, r2
 80025a4:	0018      	movs	r0, r3
 80025a6:	f7ff ff5d 	bl	8002464 <__NVIC_SetPriority>
}
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b004      	add	sp, #16
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	0002      	movs	r2, r0
 80025ba:	1dfb      	adds	r3, r7, #7
 80025bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025be:	1dfb      	adds	r3, r7, #7
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7ff ff33 	bl	8002430 <__NVIC_EnableIRQ>
}
 80025ca:	46c0      	nop			@ (mov r8, r8)
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b002      	add	sp, #8
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	0018      	movs	r0, r3
 80025de:	f7ff ffaf 	bl	8002540 <SysTick_Config>
 80025e2:	0003      	movs	r3, r0
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b002      	add	sp, #8
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025fa:	e147      	b.n	800288c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2101      	movs	r1, #1
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4091      	lsls	r1, r2
 8002606:	000a      	movs	r2, r1
 8002608:	4013      	ands	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d100      	bne.n	8002614 <HAL_GPIO_Init+0x28>
 8002612:	e138      	b.n	8002886 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2203      	movs	r2, #3
 800261a:	4013      	ands	r3, r2
 800261c:	2b01      	cmp	r3, #1
 800261e:	d005      	beq.n	800262c <HAL_GPIO_Init+0x40>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2203      	movs	r2, #3
 8002626:	4013      	ands	r3, r2
 8002628:	2b02      	cmp	r3, #2
 800262a:	d130      	bne.n	800268e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	409a      	lsls	r2, r3
 800263a:	0013      	movs	r3, r2
 800263c:	43da      	mvns	r2, r3
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	409a      	lsls	r2, r3
 800264e:	0013      	movs	r3, r2
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002662:	2201      	movs	r2, #1
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	409a      	lsls	r2, r3
 8002668:	0013      	movs	r3, r2
 800266a:	43da      	mvns	r2, r3
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	2201      	movs	r2, #1
 800267a:	401a      	ands	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	409a      	lsls	r2, r3
 8002680:	0013      	movs	r3, r2
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2203      	movs	r2, #3
 8002694:	4013      	ands	r3, r2
 8002696:	2b03      	cmp	r3, #3
 8002698:	d017      	beq.n	80026ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	2203      	movs	r2, #3
 80026a6:	409a      	lsls	r2, r3
 80026a8:	0013      	movs	r3, r2
 80026aa:	43da      	mvns	r2, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	409a      	lsls	r2, r3
 80026bc:	0013      	movs	r3, r2
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2203      	movs	r2, #3
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d123      	bne.n	800271e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	08da      	lsrs	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3208      	adds	r2, #8
 80026de:	0092      	lsls	r2, r2, #2
 80026e0:	58d3      	ldr	r3, [r2, r3]
 80026e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2207      	movs	r2, #7
 80026e8:	4013      	ands	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	220f      	movs	r2, #15
 80026ee:	409a      	lsls	r2, r3
 80026f0:	0013      	movs	r3, r2
 80026f2:	43da      	mvns	r2, r3
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2107      	movs	r1, #7
 8002702:	400b      	ands	r3, r1
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	409a      	lsls	r2, r3
 8002708:	0013      	movs	r3, r2
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	08da      	lsrs	r2, r3, #3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3208      	adds	r2, #8
 8002718:	0092      	lsls	r2, r2, #2
 800271a:	6939      	ldr	r1, [r7, #16]
 800271c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	2203      	movs	r2, #3
 800272a:	409a      	lsls	r2, r3
 800272c:	0013      	movs	r3, r2
 800272e:	43da      	mvns	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4013      	ands	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2203      	movs	r2, #3
 800273c:	401a      	ands	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	409a      	lsls	r2, r3
 8002744:	0013      	movs	r3, r2
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	23c0      	movs	r3, #192	@ 0xc0
 8002758:	029b      	lsls	r3, r3, #10
 800275a:	4013      	ands	r3, r2
 800275c:	d100      	bne.n	8002760 <HAL_GPIO_Init+0x174>
 800275e:	e092      	b.n	8002886 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002760:	4a50      	ldr	r2, [pc, #320]	@ (80028a4 <HAL_GPIO_Init+0x2b8>)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	089b      	lsrs	r3, r3, #2
 8002766:	3318      	adds	r3, #24
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	589b      	ldr	r3, [r3, r2]
 800276c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2203      	movs	r2, #3
 8002772:	4013      	ands	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	220f      	movs	r2, #15
 8002778:	409a      	lsls	r2, r3
 800277a:	0013      	movs	r3, r2
 800277c:	43da      	mvns	r2, r3
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	23a0      	movs	r3, #160	@ 0xa0
 8002788:	05db      	lsls	r3, r3, #23
 800278a:	429a      	cmp	r2, r3
 800278c:	d013      	beq.n	80027b6 <HAL_GPIO_Init+0x1ca>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a45      	ldr	r2, [pc, #276]	@ (80028a8 <HAL_GPIO_Init+0x2bc>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00d      	beq.n	80027b2 <HAL_GPIO_Init+0x1c6>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a44      	ldr	r2, [pc, #272]	@ (80028ac <HAL_GPIO_Init+0x2c0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d007      	beq.n	80027ae <HAL_GPIO_Init+0x1c2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a43      	ldr	r2, [pc, #268]	@ (80028b0 <HAL_GPIO_Init+0x2c4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d101      	bne.n	80027aa <HAL_GPIO_Init+0x1be>
 80027a6:	2303      	movs	r3, #3
 80027a8:	e006      	b.n	80027b8 <HAL_GPIO_Init+0x1cc>
 80027aa:	2305      	movs	r3, #5
 80027ac:	e004      	b.n	80027b8 <HAL_GPIO_Init+0x1cc>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e002      	b.n	80027b8 <HAL_GPIO_Init+0x1cc>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <HAL_GPIO_Init+0x1cc>
 80027b6:	2300      	movs	r3, #0
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	2103      	movs	r1, #3
 80027bc:	400a      	ands	r2, r1
 80027be:	00d2      	lsls	r2, r2, #3
 80027c0:	4093      	lsls	r3, r2
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80027c8:	4936      	ldr	r1, [pc, #216]	@ (80028a4 <HAL_GPIO_Init+0x2b8>)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	089b      	lsrs	r3, r3, #2
 80027ce:	3318      	adds	r3, #24
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027d6:	4b33      	ldr	r3, [pc, #204]	@ (80028a4 <HAL_GPIO_Init+0x2b8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	43da      	mvns	r2, r3
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	2380      	movs	r3, #128	@ 0x80
 80027ec:	035b      	lsls	r3, r3, #13
 80027ee:	4013      	ands	r3, r2
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027fa:	4b2a      	ldr	r3, [pc, #168]	@ (80028a4 <HAL_GPIO_Init+0x2b8>)
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002800:	4b28      	ldr	r3, [pc, #160]	@ (80028a4 <HAL_GPIO_Init+0x2b8>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	43da      	mvns	r2, r3
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	2380      	movs	r3, #128	@ 0x80
 8002816:	039b      	lsls	r3, r3, #14
 8002818:	4013      	ands	r3, r2
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002824:	4b1f      	ldr	r3, [pc, #124]	@ (80028a4 <HAL_GPIO_Init+0x2b8>)
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800282a:	4a1e      	ldr	r2, [pc, #120]	@ (80028a4 <HAL_GPIO_Init+0x2b8>)
 800282c:	2384      	movs	r3, #132	@ 0x84
 800282e:	58d3      	ldr	r3, [r2, r3]
 8002830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	43da      	mvns	r2, r3
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	2380      	movs	r3, #128	@ 0x80
 8002842:	029b      	lsls	r3, r3, #10
 8002844:	4013      	ands	r3, r2
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002850:	4914      	ldr	r1, [pc, #80]	@ (80028a4 <HAL_GPIO_Init+0x2b8>)
 8002852:	2284      	movs	r2, #132	@ 0x84
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002858:	4a12      	ldr	r2, [pc, #72]	@ (80028a4 <HAL_GPIO_Init+0x2b8>)
 800285a:	2380      	movs	r3, #128	@ 0x80
 800285c:	58d3      	ldr	r3, [r2, r3]
 800285e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	43da      	mvns	r2, r3
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	2380      	movs	r3, #128	@ 0x80
 8002870:	025b      	lsls	r3, r3, #9
 8002872:	4013      	ands	r3, r2
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800287e:	4909      	ldr	r1, [pc, #36]	@ (80028a4 <HAL_GPIO_Init+0x2b8>)
 8002880:	2280      	movs	r2, #128	@ 0x80
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3301      	adds	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	40da      	lsrs	r2, r3
 8002894:	1e13      	subs	r3, r2, #0
 8002896:	d000      	beq.n	800289a <HAL_GPIO_Init+0x2ae>
 8002898:	e6b0      	b.n	80025fc <HAL_GPIO_Init+0x10>
  }
}
 800289a:	46c0      	nop			@ (mov r8, r8)
 800289c:	46c0      	nop			@ (mov r8, r8)
 800289e:	46bd      	mov	sp, r7
 80028a0:	b006      	add	sp, #24
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021800 	.word	0x40021800
 80028a8:	50000400 	.word	0x50000400
 80028ac:	50000800 	.word	0x50000800
 80028b0:	50000c00 	.word	0x50000c00

080028b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	000a      	movs	r2, r1
 80028be:	1cbb      	adds	r3, r7, #2
 80028c0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	1cba      	adds	r2, r7, #2
 80028c8:	8812      	ldrh	r2, [r2, #0]
 80028ca:	4013      	ands	r3, r2
 80028cc:	d004      	beq.n	80028d8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80028ce:	230f      	movs	r3, #15
 80028d0:	18fb      	adds	r3, r7, r3
 80028d2:	2201      	movs	r2, #1
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	e003      	b.n	80028e0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028d8:	230f      	movs	r3, #15
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80028e0:	230f      	movs	r3, #15
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	781b      	ldrb	r3, [r3, #0]
}
 80028e6:	0018      	movs	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b004      	add	sp, #16
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	0008      	movs	r0, r1
 80028f8:	0011      	movs	r1, r2
 80028fa:	1cbb      	adds	r3, r7, #2
 80028fc:	1c02      	adds	r2, r0, #0
 80028fe:	801a      	strh	r2, [r3, #0]
 8002900:	1c7b      	adds	r3, r7, #1
 8002902:	1c0a      	adds	r2, r1, #0
 8002904:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002906:	1c7b      	adds	r3, r7, #1
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d004      	beq.n	8002918 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800290e:	1cbb      	adds	r3, r7, #2
 8002910:	881a      	ldrh	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002916:	e003      	b.n	8002920 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002918:	1cbb      	adds	r3, r7, #2
 800291a:	881a      	ldrh	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002920:	46c0      	nop			@ (mov r8, r8)
 8002922:	46bd      	mov	sp, r7
 8002924:	b002      	add	sp, #8
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	000a      	movs	r2, r1
 8002932:	1cbb      	adds	r3, r7, #2
 8002934:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800293c:	1cbb      	adds	r3, r7, #2
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4013      	ands	r3, r2
 8002944:	041a      	lsls	r2, r3, #16
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	43db      	mvns	r3, r3
 800294a:	1cb9      	adds	r1, r7, #2
 800294c:	8809      	ldrh	r1, [r1, #0]
 800294e:	400b      	ands	r3, r1
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	619a      	str	r2, [r3, #24]
}
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	46bd      	mov	sp, r7
 800295a:	b004      	add	sp, #16
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	0002      	movs	r2, r0
 8002968:	1dbb      	adds	r3, r7, #6
 800296a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800296c:	4b10      	ldr	r3, [pc, #64]	@ (80029b0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	1dba      	adds	r2, r7, #6
 8002972:	8812      	ldrh	r2, [r2, #0]
 8002974:	4013      	ands	r3, r2
 8002976:	d008      	beq.n	800298a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002978:	4b0d      	ldr	r3, [pc, #52]	@ (80029b0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800297a:	1dba      	adds	r2, r7, #6
 800297c:	8812      	ldrh	r2, [r2, #0]
 800297e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002980:	1dbb      	adds	r3, r7, #6
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	0018      	movs	r0, r3
 8002986:	f000 f815 	bl	80029b4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800298a:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	1dba      	adds	r2, r7, #6
 8002990:	8812      	ldrh	r2, [r2, #0]
 8002992:	4013      	ands	r3, r2
 8002994:	d008      	beq.n	80029a8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002996:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002998:	1dba      	adds	r2, r7, #6
 800299a:	8812      	ldrh	r2, [r2, #0]
 800299c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800299e:	1dbb      	adds	r3, r7, #6
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	0018      	movs	r0, r3
 80029a4:	f7fe fd5c 	bl	8001460 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80029a8:	46c0      	nop			@ (mov r8, r8)
 80029aa:	46bd      	mov	sp, r7
 80029ac:	b002      	add	sp, #8
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40021800 	.word	0x40021800

080029b4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	0002      	movs	r2, r0
 80029bc:	1dbb      	adds	r3, r7, #6
 80029be:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80029c0:	46c0      	nop			@ (mov r8, r8)
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b002      	add	sp, #8
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e08f      	b.n	8002afa <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2241      	movs	r2, #65	@ 0x41
 80029de:	5c9b      	ldrb	r3, [r3, r2]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d107      	bne.n	80029f6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2240      	movs	r2, #64	@ 0x40
 80029ea:	2100      	movs	r1, #0
 80029ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	0018      	movs	r0, r3
 80029f2:	f7ff fad1 	bl	8001f98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2241      	movs	r2, #65	@ 0x41
 80029fa:	2124      	movs	r1, #36	@ 0x24
 80029fc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2101      	movs	r1, #1
 8002a0a:	438a      	bics	r2, r1
 8002a0c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	493b      	ldr	r1, [pc, #236]	@ (8002b04 <HAL_I2C_Init+0x13c>)
 8002a18:	400a      	ands	r2, r1
 8002a1a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4938      	ldr	r1, [pc, #224]	@ (8002b08 <HAL_I2C_Init+0x140>)
 8002a28:	400a      	ands	r2, r1
 8002a2a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d108      	bne.n	8002a46 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2180      	movs	r1, #128	@ 0x80
 8002a3e:	0209      	lsls	r1, r1, #8
 8002a40:	430a      	orrs	r2, r1
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	e007      	b.n	8002a56 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2184      	movs	r1, #132	@ 0x84
 8002a50:	0209      	lsls	r1, r1, #8
 8002a52:	430a      	orrs	r2, r1
 8002a54:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d109      	bne.n	8002a72 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2180      	movs	r1, #128	@ 0x80
 8002a6a:	0109      	lsls	r1, r1, #4
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	e007      	b.n	8002a82 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4923      	ldr	r1, [pc, #140]	@ (8002b0c <HAL_I2C_Init+0x144>)
 8002a7e:	400a      	ands	r2, r1
 8002a80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4920      	ldr	r1, [pc, #128]	@ (8002b10 <HAL_I2C_Init+0x148>)
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	491a      	ldr	r1, [pc, #104]	@ (8002b08 <HAL_I2C_Init+0x140>)
 8002a9e:	400a      	ands	r2, r1
 8002aa0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691a      	ldr	r2, [r3, #16]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69d9      	ldr	r1, [r3, #28]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1a      	ldr	r2, [r3, #32]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2241      	movs	r2, #65	@ 0x41
 8002ae6:	2120      	movs	r1, #32
 8002ae8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2242      	movs	r2, #66	@ 0x42
 8002af4:	2100      	movs	r1, #0
 8002af6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	0018      	movs	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	b002      	add	sp, #8
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	46c0      	nop			@ (mov r8, r8)
 8002b04:	f0ffffff 	.word	0xf0ffffff
 8002b08:	ffff7fff 	.word	0xffff7fff
 8002b0c:	fffff7ff 	.word	0xfffff7ff
 8002b10:	02008000 	.word	0x02008000

08002b14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b089      	sub	sp, #36	@ 0x24
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	0008      	movs	r0, r1
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	0019      	movs	r1, r3
 8002b22:	230a      	movs	r3, #10
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	1c02      	adds	r2, r0, #0
 8002b28:	801a      	strh	r2, [r3, #0]
 8002b2a:	2308      	movs	r3, #8
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	1c0a      	adds	r2, r1, #0
 8002b30:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2241      	movs	r2, #65	@ 0x41
 8002b36:	5c9b      	ldrb	r3, [r3, r2]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d000      	beq.n	8002b40 <HAL_I2C_Master_Transmit+0x2c>
 8002b3e:	e10a      	b.n	8002d56 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2240      	movs	r2, #64	@ 0x40
 8002b44:	5c9b      	ldrb	r3, [r3, r2]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_I2C_Master_Transmit+0x3a>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e104      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x244>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2240      	movs	r2, #64	@ 0x40
 8002b52:	2101      	movs	r1, #1
 8002b54:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b56:	f7ff fc61 	bl	800241c <HAL_GetTick>
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b5e:	2380      	movs	r3, #128	@ 0x80
 8002b60:	0219      	lsls	r1, r3, #8
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2319      	movs	r3, #25
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f000 fa26 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 8002b70:	1e03      	subs	r3, r0, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0ef      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2241      	movs	r2, #65	@ 0x41
 8002b7c:	2121      	movs	r1, #33	@ 0x21
 8002b7e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2242      	movs	r2, #66	@ 0x42
 8002b84:	2110      	movs	r1, #16
 8002b86:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2208      	movs	r2, #8
 8002b98:	18ba      	adds	r2, r7, r2
 8002b9a:	8812      	ldrh	r2, [r2, #0]
 8002b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2bff      	cmp	r3, #255	@ 0xff
 8002bac:	d906      	bls.n	8002bbc <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	22ff      	movs	r2, #255	@ 0xff
 8002bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002bb4:	2380      	movs	r3, #128	@ 0x80
 8002bb6:	045b      	lsls	r3, r3, #17
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	e007      	b.n	8002bcc <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002bc6:	2380      	movs	r3, #128	@ 0x80
 8002bc8:	049b      	lsls	r3, r3, #18
 8002bca:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d027      	beq.n	8002c24 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	781a      	ldrb	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	697c      	ldr	r4, [r7, #20]
 8002c10:	230a      	movs	r3, #10
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	8819      	ldrh	r1, [r3, #0]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	4b51      	ldr	r3, [pc, #324]	@ (8002d60 <HAL_I2C_Master_Transmit+0x24c>)
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	0023      	movs	r3, r4
 8002c1e:	f000 fc45 	bl	80034ac <I2C_TransferConfig>
 8002c22:	e06f      	b.n	8002d04 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	697c      	ldr	r4, [r7, #20]
 8002c2c:	230a      	movs	r3, #10
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	8819      	ldrh	r1, [r3, #0]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	4b4a      	ldr	r3, [pc, #296]	@ (8002d60 <HAL_I2C_Master_Transmit+0x24c>)
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	0023      	movs	r3, r4
 8002c3a:	f000 fc37 	bl	80034ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002c3e:	e061      	b.n	8002d04 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	0018      	movs	r0, r3
 8002c48:	f000 fa10 	bl	800306c <I2C_WaitOnTXISFlagUntilTimeout>
 8002c4c:	1e03      	subs	r3, r0, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e081      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d03a      	beq.n	8002d04 <HAL_I2C_Master_Transmit+0x1f0>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d136      	bne.n	8002d04 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	0013      	movs	r3, r2
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2180      	movs	r1, #128	@ 0x80
 8002ca4:	f000 f98a 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 8002ca8:	1e03      	subs	r3, r0, #0
 8002caa:	d001      	beq.n	8002cb0 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e053      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2bff      	cmp	r3, #255	@ 0xff
 8002cb8:	d911      	bls.n	8002cde <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	22ff      	movs	r2, #255	@ 0xff
 8002cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	2380      	movs	r3, #128	@ 0x80
 8002cc8:	045c      	lsls	r4, r3, #17
 8002cca:	230a      	movs	r3, #10
 8002ccc:	18fb      	adds	r3, r7, r3
 8002cce:	8819      	ldrh	r1, [r3, #0]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	0023      	movs	r3, r4
 8002cd8:	f000 fbe8 	bl	80034ac <I2C_TransferConfig>
 8002cdc:	e012      	b.n	8002d04 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	2380      	movs	r3, #128	@ 0x80
 8002cf0:	049c      	lsls	r4, r3, #18
 8002cf2:	230a      	movs	r3, #10
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	8819      	ldrh	r1, [r3, #0]
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	0023      	movs	r3, r4
 8002d00:	f000 fbd4 	bl	80034ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d198      	bne.n	8002c40 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	0018      	movs	r0, r3
 8002d16:	f000 f9ef 	bl	80030f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d1a:	1e03      	subs	r3, r0, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e01a      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2220      	movs	r2, #32
 8002d28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	490b      	ldr	r1, [pc, #44]	@ (8002d64 <HAL_I2C_Master_Transmit+0x250>)
 8002d36:	400a      	ands	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2241      	movs	r2, #65	@ 0x41
 8002d3e:	2120      	movs	r1, #32
 8002d40:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2242      	movs	r2, #66	@ 0x42
 8002d46:	2100      	movs	r1, #0
 8002d48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2240      	movs	r2, #64	@ 0x40
 8002d4e:	2100      	movs	r1, #0
 8002d50:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e000      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002d56:	2302      	movs	r3, #2
  }
}
 8002d58:	0018      	movs	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b007      	add	sp, #28
 8002d5e:	bd90      	pop	{r4, r7, pc}
 8002d60:	80002000 	.word	0x80002000
 8002d64:	fe00e800 	.word	0xfe00e800

08002d68 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b089      	sub	sp, #36	@ 0x24
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	0008      	movs	r0, r1
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	0019      	movs	r1, r3
 8002d76:	230a      	movs	r3, #10
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	1c02      	adds	r2, r0, #0
 8002d7c:	801a      	strh	r2, [r3, #0]
 8002d7e:	2308      	movs	r3, #8
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	1c0a      	adds	r2, r1, #0
 8002d84:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2241      	movs	r2, #65	@ 0x41
 8002d8a:	5c9b      	ldrb	r3, [r3, r2]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b20      	cmp	r3, #32
 8002d90:	d000      	beq.n	8002d94 <HAL_I2C_Master_Receive+0x2c>
 8002d92:	e0e8      	b.n	8002f66 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2240      	movs	r2, #64	@ 0x40
 8002d98:	5c9b      	ldrb	r3, [r3, r2]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_I2C_Master_Receive+0x3a>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e0e2      	b.n	8002f68 <HAL_I2C_Master_Receive+0x200>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2240      	movs	r2, #64	@ 0x40
 8002da6:	2101      	movs	r1, #1
 8002da8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002daa:	f7ff fb37 	bl	800241c <HAL_GetTick>
 8002dae:	0003      	movs	r3, r0
 8002db0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002db2:	2380      	movs	r3, #128	@ 0x80
 8002db4:	0219      	lsls	r1, r3, #8
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	2319      	movs	r3, #25
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f000 f8fc 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 8002dc4:	1e03      	subs	r3, r0, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0cd      	b.n	8002f68 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2241      	movs	r2, #65	@ 0x41
 8002dd0:	2122      	movs	r1, #34	@ 0x22
 8002dd2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2242      	movs	r2, #66	@ 0x42
 8002dd8:	2110      	movs	r1, #16
 8002dda:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2208      	movs	r2, #8
 8002dec:	18ba      	adds	r2, r7, r2
 8002dee:	8812      	ldrh	r2, [r2, #0]
 8002df0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2bff      	cmp	r3, #255	@ 0xff
 8002e00:	d911      	bls.n	8002e26 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	22ff      	movs	r2, #255	@ 0xff
 8002e06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	2380      	movs	r3, #128	@ 0x80
 8002e10:	045c      	lsls	r4, r3, #17
 8002e12:	230a      	movs	r3, #10
 8002e14:	18fb      	adds	r3, r7, r3
 8002e16:	8819      	ldrh	r1, [r3, #0]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	4b55      	ldr	r3, [pc, #340]	@ (8002f70 <HAL_I2C_Master_Receive+0x208>)
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	0023      	movs	r3, r4
 8002e20:	f000 fb44 	bl	80034ac <I2C_TransferConfig>
 8002e24:	e076      	b.n	8002f14 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	2380      	movs	r3, #128	@ 0x80
 8002e38:	049c      	lsls	r4, r3, #18
 8002e3a:	230a      	movs	r3, #10
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	8819      	ldrh	r1, [r3, #0]
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	4b4b      	ldr	r3, [pc, #300]	@ (8002f70 <HAL_I2C_Master_Receive+0x208>)
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	0023      	movs	r3, r4
 8002e48:	f000 fb30 	bl	80034ac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002e4c:	e062      	b.n	8002f14 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	0018      	movs	r0, r3
 8002e56:	f000 f993 	bl	8003180 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e5a:	1e03      	subs	r3, r0, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e082      	b.n	8002f68 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d03a      	beq.n	8002f14 <HAL_I2C_Master_Receive+0x1ac>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d136      	bne.n	8002f14 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ea6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	0013      	movs	r3, r2
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2180      	movs	r1, #128	@ 0x80
 8002eb4:	f000 f882 	bl	8002fbc <I2C_WaitOnFlagUntilTimeout>
 8002eb8:	1e03      	subs	r3, r0, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e053      	b.n	8002f68 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2bff      	cmp	r3, #255	@ 0xff
 8002ec8:	d911      	bls.n	8002eee <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	22ff      	movs	r2, #255	@ 0xff
 8002ece:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	2380      	movs	r3, #128	@ 0x80
 8002ed8:	045c      	lsls	r4, r3, #17
 8002eda:	230a      	movs	r3, #10
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	8819      	ldrh	r1, [r3, #0]
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	0023      	movs	r3, r4
 8002ee8:	f000 fae0 	bl	80034ac <I2C_TransferConfig>
 8002eec:	e012      	b.n	8002f14 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	2380      	movs	r3, #128	@ 0x80
 8002f00:	049c      	lsls	r4, r3, #18
 8002f02:	230a      	movs	r3, #10
 8002f04:	18fb      	adds	r3, r7, r3
 8002f06:	8819      	ldrh	r1, [r3, #0]
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	0023      	movs	r3, r4
 8002f10:	f000 facc 	bl	80034ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d197      	bne.n	8002e4e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f000 f8e7 	bl	80030f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f2a:	1e03      	subs	r3, r0, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e01a      	b.n	8002f68 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2220      	movs	r2, #32
 8002f38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	490b      	ldr	r1, [pc, #44]	@ (8002f74 <HAL_I2C_Master_Receive+0x20c>)
 8002f46:	400a      	ands	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2241      	movs	r2, #65	@ 0x41
 8002f4e:	2120      	movs	r1, #32
 8002f50:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2242      	movs	r2, #66	@ 0x42
 8002f56:	2100      	movs	r1, #0
 8002f58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2240      	movs	r2, #64	@ 0x40
 8002f5e:	2100      	movs	r1, #0
 8002f60:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	e000      	b.n	8002f68 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002f66:	2302      	movs	r3, #2
  }
}
 8002f68:	0018      	movs	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b007      	add	sp, #28
 8002f6e:	bd90      	pop	{r4, r7, pc}
 8002f70:	80002400 	.word	0x80002400
 8002f74:	fe00e800 	.word	0xfe00e800

08002f78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2202      	movs	r2, #2
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d103      	bne.n	8002f96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2200      	movs	r2, #0
 8002f94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d007      	beq.n	8002fb4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2101      	movs	r1, #1
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	619a      	str	r2, [r3, #24]
  }
}
 8002fb4:	46c0      	nop			@ (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b002      	add	sp, #8
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	1dfb      	adds	r3, r7, #7
 8002fca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fcc:	e03a      	b.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	6839      	ldr	r1, [r7, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f000 f971 	bl	80032bc <I2C_IsErrorOccurred>
 8002fda:	1e03      	subs	r3, r0, #0
 8002fdc:	d001      	beq.n	8002fe2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e040      	b.n	8003064 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	d02d      	beq.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe8:	f7ff fa18 	bl	800241c <HAL_GetTick>
 8002fec:	0002      	movs	r2, r0
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d302      	bcc.n	8002ffe <I2C_WaitOnFlagUntilTimeout+0x42>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d122      	bne.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	4013      	ands	r3, r2
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	425a      	negs	r2, r3
 800300e:	4153      	adcs	r3, r2
 8003010:	b2db      	uxtb	r3, r3
 8003012:	001a      	movs	r2, r3
 8003014:	1dfb      	adds	r3, r7, #7
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d113      	bne.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003020:	2220      	movs	r2, #32
 8003022:	431a      	orrs	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2241      	movs	r2, #65	@ 0x41
 800302c:	2120      	movs	r1, #32
 800302e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2242      	movs	r2, #66	@ 0x42
 8003034:	2100      	movs	r1, #0
 8003036:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	2100      	movs	r1, #0
 800303e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e00f      	b.n	8003064 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	4013      	ands	r3, r2
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	425a      	negs	r2, r3
 8003054:	4153      	adcs	r3, r2
 8003056:	b2db      	uxtb	r3, r3
 8003058:	001a      	movs	r2, r3
 800305a:	1dfb      	adds	r3, r7, #7
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d0b5      	beq.n	8002fce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	b004      	add	sp, #16
 800306a:	bd80      	pop	{r7, pc}

0800306c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003078:	e032      	b.n	80030e0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	0018      	movs	r0, r3
 8003082:	f000 f91b 	bl	80032bc <I2C_IsErrorOccurred>
 8003086:	1e03      	subs	r3, r0, #0
 8003088:	d001      	beq.n	800308e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e030      	b.n	80030f0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	3301      	adds	r3, #1
 8003092:	d025      	beq.n	80030e0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003094:	f7ff f9c2 	bl	800241c <HAL_GetTick>
 8003098:	0002      	movs	r2, r0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d302      	bcc.n	80030aa <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d11a      	bne.n	80030e0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	2202      	movs	r2, #2
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d013      	beq.n	80030e0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030bc:	2220      	movs	r2, #32
 80030be:	431a      	orrs	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2241      	movs	r2, #65	@ 0x41
 80030c8:	2120      	movs	r1, #32
 80030ca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2242      	movs	r2, #66	@ 0x42
 80030d0:	2100      	movs	r1, #0
 80030d2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2240      	movs	r2, #64	@ 0x40
 80030d8:	2100      	movs	r1, #0
 80030da:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e007      	b.n	80030f0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2202      	movs	r2, #2
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d1c5      	bne.n	800307a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	0018      	movs	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b004      	add	sp, #16
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003104:	e02f      	b.n	8003166 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	0018      	movs	r0, r3
 800310e:	f000 f8d5 	bl	80032bc <I2C_IsErrorOccurred>
 8003112:	1e03      	subs	r3, r0, #0
 8003114:	d001      	beq.n	800311a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e02d      	b.n	8003176 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311a:	f7ff f97f 	bl	800241c <HAL_GetTick>
 800311e:	0002      	movs	r2, r0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	429a      	cmp	r2, r3
 8003128:	d302      	bcc.n	8003130 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d11a      	bne.n	8003166 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2220      	movs	r2, #32
 8003138:	4013      	ands	r3, r2
 800313a:	2b20      	cmp	r3, #32
 800313c:	d013      	beq.n	8003166 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003142:	2220      	movs	r2, #32
 8003144:	431a      	orrs	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2241      	movs	r2, #65	@ 0x41
 800314e:	2120      	movs	r1, #32
 8003150:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2242      	movs	r2, #66	@ 0x42
 8003156:	2100      	movs	r1, #0
 8003158:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2240      	movs	r2, #64	@ 0x40
 800315e:	2100      	movs	r1, #0
 8003160:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e007      	b.n	8003176 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2220      	movs	r2, #32
 800316e:	4013      	ands	r3, r2
 8003170:	2b20      	cmp	r3, #32
 8003172:	d1c8      	bne.n	8003106 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	0018      	movs	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	b004      	add	sp, #16
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800318c:	2317      	movs	r3, #23
 800318e:	18fb      	adds	r3, r7, r3
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003194:	e07b      	b.n	800328e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	0018      	movs	r0, r3
 800319e:	f000 f88d 	bl	80032bc <I2C_IsErrorOccurred>
 80031a2:	1e03      	subs	r3, r0, #0
 80031a4:	d003      	beq.n	80031ae <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80031a6:	2317      	movs	r3, #23
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	2220      	movs	r2, #32
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d140      	bne.n	800323e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80031bc:	2117      	movs	r1, #23
 80031be:	187b      	adds	r3, r7, r1
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d13b      	bne.n	800323e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2204      	movs	r2, #4
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d106      	bne.n	80031e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80031dc:	187b      	adds	r3, r7, r1
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	2210      	movs	r2, #16
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d123      	bne.n	8003238 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2210      	movs	r2, #16
 80031f6:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2204      	movs	r2, #4
 80031fc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2220      	movs	r2, #32
 8003204:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4929      	ldr	r1, [pc, #164]	@ (80032b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8003212:	400a      	ands	r2, r1
 8003214:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2241      	movs	r2, #65	@ 0x41
 800321a:	2120      	movs	r1, #32
 800321c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2242      	movs	r2, #66	@ 0x42
 8003222:	2100      	movs	r1, #0
 8003224:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2240      	movs	r2, #64	@ 0x40
 800322a:	2100      	movs	r1, #0
 800322c:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800322e:	2317      	movs	r3, #23
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	2201      	movs	r2, #1
 8003234:	701a      	strb	r2, [r3, #0]
 8003236:	e002      	b.n	800323e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800323e:	f7ff f8ed 	bl	800241c <HAL_GetTick>
 8003242:	0002      	movs	r2, r0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	429a      	cmp	r2, r3
 800324c:	d302      	bcc.n	8003254 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d11c      	bne.n	800328e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003254:	2017      	movs	r0, #23
 8003256:	183b      	adds	r3, r7, r0
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d117      	bne.n	800328e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	2204      	movs	r2, #4
 8003266:	4013      	ands	r3, r2
 8003268:	2b04      	cmp	r3, #4
 800326a:	d010      	beq.n	800328e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003270:	2220      	movs	r2, #32
 8003272:	431a      	orrs	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2241      	movs	r2, #65	@ 0x41
 800327c:	2120      	movs	r1, #32
 800327e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2240      	movs	r2, #64	@ 0x40
 8003284:	2100      	movs	r1, #0
 8003286:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003288:	183b      	adds	r3, r7, r0
 800328a:	2201      	movs	r2, #1
 800328c:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2204      	movs	r2, #4
 8003296:	4013      	ands	r3, r2
 8003298:	2b04      	cmp	r3, #4
 800329a:	d005      	beq.n	80032a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800329c:	2317      	movs	r3, #23
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d100      	bne.n	80032a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80032a6:	e776      	b.n	8003196 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80032a8:	2317      	movs	r3, #23
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	781b      	ldrb	r3, [r3, #0]
}
 80032ae:	0018      	movs	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b006      	add	sp, #24
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	fe00e800 	.word	0xfe00e800

080032bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08a      	sub	sp, #40	@ 0x28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c8:	2327      	movs	r3, #39	@ 0x27
 80032ca:	18fb      	adds	r3, r7, r3
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	2210      	movs	r2, #16
 80032e4:	4013      	ands	r3, r2
 80032e6:	d100      	bne.n	80032ea <I2C_IsErrorOccurred+0x2e>
 80032e8:	e079      	b.n	80033de <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2210      	movs	r2, #16
 80032f0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032f2:	e057      	b.n	80033a4 <I2C_IsErrorOccurred+0xe8>
 80032f4:	2227      	movs	r2, #39	@ 0x27
 80032f6:	18bb      	adds	r3, r7, r2
 80032f8:	18ba      	adds	r2, r7, r2
 80032fa:	7812      	ldrb	r2, [r2, #0]
 80032fc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	3301      	adds	r3, #1
 8003302:	d04f      	beq.n	80033a4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003304:	f7ff f88a 	bl	800241c <HAL_GetTick>
 8003308:	0002      	movs	r2, r0
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	429a      	cmp	r2, r3
 8003312:	d302      	bcc.n	800331a <I2C_IsErrorOccurred+0x5e>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d144      	bne.n	80033a4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	2380      	movs	r3, #128	@ 0x80
 8003322:	01db      	lsls	r3, r3, #7
 8003324:	4013      	ands	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003328:	2013      	movs	r0, #19
 800332a:	183b      	adds	r3, r7, r0
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	2142      	movs	r1, #66	@ 0x42
 8003330:	5c52      	ldrb	r2, [r2, r1]
 8003332:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	2380      	movs	r3, #128	@ 0x80
 800333c:	021b      	lsls	r3, r3, #8
 800333e:	401a      	ands	r2, r3
 8003340:	2380      	movs	r3, #128	@ 0x80
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	429a      	cmp	r2, r3
 8003346:	d126      	bne.n	8003396 <I2C_IsErrorOccurred+0xda>
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	2380      	movs	r3, #128	@ 0x80
 800334c:	01db      	lsls	r3, r3, #7
 800334e:	429a      	cmp	r2, r3
 8003350:	d021      	beq.n	8003396 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003352:	183b      	adds	r3, r7, r0
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b20      	cmp	r3, #32
 8003358:	d01d      	beq.n	8003396 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2180      	movs	r1, #128	@ 0x80
 8003366:	01c9      	lsls	r1, r1, #7
 8003368:	430a      	orrs	r2, r1
 800336a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800336c:	f7ff f856 	bl	800241c <HAL_GetTick>
 8003370:	0003      	movs	r3, r0
 8003372:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003374:	e00f      	b.n	8003396 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003376:	f7ff f851 	bl	800241c <HAL_GetTick>
 800337a:	0002      	movs	r2, r0
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b19      	cmp	r3, #25
 8003382:	d908      	bls.n	8003396 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	2220      	movs	r2, #32
 8003388:	4313      	orrs	r3, r2
 800338a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800338c:	2327      	movs	r3, #39	@ 0x27
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	2201      	movs	r2, #1
 8003392:	701a      	strb	r2, [r3, #0]

              break;
 8003394:	e006      	b.n	80033a4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	2220      	movs	r2, #32
 800339e:	4013      	ands	r3, r2
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d1e8      	bne.n	8003376 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2220      	movs	r2, #32
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b20      	cmp	r3, #32
 80033b0:	d004      	beq.n	80033bc <I2C_IsErrorOccurred+0x100>
 80033b2:	2327      	movs	r3, #39	@ 0x27
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d09b      	beq.n	80032f4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80033bc:	2327      	movs	r3, #39	@ 0x27
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d103      	bne.n	80033ce <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2220      	movs	r2, #32
 80033cc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	2204      	movs	r2, #4
 80033d2:	4313      	orrs	r3, r2
 80033d4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80033d6:	2327      	movs	r3, #39	@ 0x27
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	2201      	movs	r2, #1
 80033dc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	2380      	movs	r3, #128	@ 0x80
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4013      	ands	r3, r2
 80033ee:	d00c      	beq.n	800340a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	2201      	movs	r2, #1
 80033f4:	4313      	orrs	r3, r2
 80033f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2280      	movs	r2, #128	@ 0x80
 80033fe:	0052      	lsls	r2, r2, #1
 8003400:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003402:	2327      	movs	r3, #39	@ 0x27
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	2201      	movs	r2, #1
 8003408:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	2380      	movs	r3, #128	@ 0x80
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4013      	ands	r3, r2
 8003412:	d00c      	beq.n	800342e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	2208      	movs	r2, #8
 8003418:	4313      	orrs	r3, r2
 800341a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2280      	movs	r2, #128	@ 0x80
 8003422:	00d2      	lsls	r2, r2, #3
 8003424:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003426:	2327      	movs	r3, #39	@ 0x27
 8003428:	18fb      	adds	r3, r7, r3
 800342a:	2201      	movs	r2, #1
 800342c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	2380      	movs	r3, #128	@ 0x80
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4013      	ands	r3, r2
 8003436:	d00c      	beq.n	8003452 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	2202      	movs	r2, #2
 800343c:	4313      	orrs	r3, r2
 800343e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2280      	movs	r2, #128	@ 0x80
 8003446:	0092      	lsls	r2, r2, #2
 8003448:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800344a:	2327      	movs	r3, #39	@ 0x27
 800344c:	18fb      	adds	r3, r7, r3
 800344e:	2201      	movs	r2, #1
 8003450:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003452:	2327      	movs	r3, #39	@ 0x27
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01d      	beq.n	8003498 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	0018      	movs	r0, r3
 8003460:	f7ff fd8a 	bl	8002f78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	490e      	ldr	r1, [pc, #56]	@ (80034a8 <I2C_IsErrorOccurred+0x1ec>)
 8003470:	400a      	ands	r2, r1
 8003472:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	431a      	orrs	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2241      	movs	r2, #65	@ 0x41
 8003484:	2120      	movs	r1, #32
 8003486:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2242      	movs	r2, #66	@ 0x42
 800348c:	2100      	movs	r1, #0
 800348e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2240      	movs	r2, #64	@ 0x40
 8003494:	2100      	movs	r1, #0
 8003496:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003498:	2327      	movs	r3, #39	@ 0x27
 800349a:	18fb      	adds	r3, r7, r3
 800349c:	781b      	ldrb	r3, [r3, #0]
}
 800349e:	0018      	movs	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b00a      	add	sp, #40	@ 0x28
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	46c0      	nop			@ (mov r8, r8)
 80034a8:	fe00e800 	.word	0xfe00e800

080034ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034ac:	b590      	push	{r4, r7, lr}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	0008      	movs	r0, r1
 80034b6:	0011      	movs	r1, r2
 80034b8:	607b      	str	r3, [r7, #4]
 80034ba:	240a      	movs	r4, #10
 80034bc:	193b      	adds	r3, r7, r4
 80034be:	1c02      	adds	r2, r0, #0
 80034c0:	801a      	strh	r2, [r3, #0]
 80034c2:	2009      	movs	r0, #9
 80034c4:	183b      	adds	r3, r7, r0
 80034c6:	1c0a      	adds	r2, r1, #0
 80034c8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034ca:	193b      	adds	r3, r7, r4
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	059b      	lsls	r3, r3, #22
 80034d0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034d2:	183b      	adds	r3, r7, r0
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	0419      	lsls	r1, r3, #16
 80034d8:	23ff      	movs	r3, #255	@ 0xff
 80034da:	041b      	lsls	r3, r3, #16
 80034dc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034de:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e6:	4313      	orrs	r3, r2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	085b      	lsrs	r3, r3, #1
 80034ec:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034f6:	0d51      	lsrs	r1, r2, #21
 80034f8:	2280      	movs	r2, #128	@ 0x80
 80034fa:	00d2      	lsls	r2, r2, #3
 80034fc:	400a      	ands	r2, r1
 80034fe:	4907      	ldr	r1, [pc, #28]	@ (800351c <I2C_TransferConfig+0x70>)
 8003500:	430a      	orrs	r2, r1
 8003502:	43d2      	mvns	r2, r2
 8003504:	401a      	ands	r2, r3
 8003506:	0011      	movs	r1, r2
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003512:	46c0      	nop			@ (mov r8, r8)
 8003514:	46bd      	mov	sp, r7
 8003516:	b007      	add	sp, #28
 8003518:	bd90      	pop	{r4, r7, pc}
 800351a:	46c0      	nop			@ (mov r8, r8)
 800351c:	03ff63ff 	.word	0x03ff63ff

08003520 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2241      	movs	r2, #65	@ 0x41
 800352e:	5c9b      	ldrb	r3, [r3, r2]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b20      	cmp	r3, #32
 8003534:	d138      	bne.n	80035a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2240      	movs	r2, #64	@ 0x40
 800353a:	5c9b      	ldrb	r3, [r3, r2]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003540:	2302      	movs	r3, #2
 8003542:	e032      	b.n	80035aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2240      	movs	r2, #64	@ 0x40
 8003548:	2101      	movs	r1, #1
 800354a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2241      	movs	r2, #65	@ 0x41
 8003550:	2124      	movs	r1, #36	@ 0x24
 8003552:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2101      	movs	r1, #1
 8003560:	438a      	bics	r2, r1
 8003562:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4911      	ldr	r1, [pc, #68]	@ (80035b4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003570:	400a      	ands	r2, r1
 8003572:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6819      	ldr	r1, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2101      	movs	r1, #1
 8003590:	430a      	orrs	r2, r1
 8003592:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2241      	movs	r2, #65	@ 0x41
 8003598:	2120      	movs	r1, #32
 800359a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2240      	movs	r2, #64	@ 0x40
 80035a0:	2100      	movs	r1, #0
 80035a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	e000      	b.n	80035aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035a8:	2302      	movs	r3, #2
  }
}
 80035aa:	0018      	movs	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b002      	add	sp, #8
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	46c0      	nop			@ (mov r8, r8)
 80035b4:	ffffefff 	.word	0xffffefff

080035b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2241      	movs	r2, #65	@ 0x41
 80035c6:	5c9b      	ldrb	r3, [r3, r2]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	d139      	bne.n	8003642 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2240      	movs	r2, #64	@ 0x40
 80035d2:	5c9b      	ldrb	r3, [r3, r2]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035d8:	2302      	movs	r3, #2
 80035da:	e033      	b.n	8003644 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2240      	movs	r2, #64	@ 0x40
 80035e0:	2101      	movs	r1, #1
 80035e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2241      	movs	r2, #65	@ 0x41
 80035e8:	2124      	movs	r1, #36	@ 0x24
 80035ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2101      	movs	r1, #1
 80035f8:	438a      	bics	r2, r1
 80035fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4a11      	ldr	r2, [pc, #68]	@ (800364c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003608:	4013      	ands	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	021b      	lsls	r3, r3, #8
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2101      	movs	r1, #1
 800362a:	430a      	orrs	r2, r1
 800362c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2241      	movs	r2, #65	@ 0x41
 8003632:	2120      	movs	r1, #32
 8003634:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2240      	movs	r2, #64	@ 0x40
 800363a:	2100      	movs	r1, #0
 800363c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003642:	2302      	movs	r3, #2
  }
}
 8003644:	0018      	movs	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	b004      	add	sp, #16
 800364a:	bd80      	pop	{r7, pc}
 800364c:	fffff0ff 	.word	0xfffff0ff

08003650 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003654:	4b04      	ldr	r3, [pc, #16]	@ (8003668 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4b03      	ldr	r3, [pc, #12]	@ (8003668 <HAL_PWR_EnableBkUpAccess+0x18>)
 800365a:	2180      	movs	r1, #128	@ 0x80
 800365c:	0049      	lsls	r1, r1, #1
 800365e:	430a      	orrs	r2, r1
 8003660:	601a      	str	r2, [r3, #0]
}
 8003662:	46c0      	nop			@ (mov r8, r8)
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40007000 	.word	0x40007000

0800366c <HAL_PWR_DisableBkUpAccess>:
/**
  * @brief  Disable access to the backup domain
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8003670:	4b04      	ldr	r3, [pc, #16]	@ (8003684 <HAL_PWR_DisableBkUpAccess+0x18>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <HAL_PWR_DisableBkUpAccess+0x18>)
 8003676:	4904      	ldr	r1, [pc, #16]	@ (8003688 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8003678:	400a      	ands	r2, r1
 800367a:	601a      	str	r2, [r3, #0]
}
 800367c:	46c0      	nop			@ (mov r8, r8)
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	40007000 	.word	0x40007000
 8003688:	fffffeff 	.word	0xfffffeff

0800368c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003694:	4b19      	ldr	r3, [pc, #100]	@ (80036fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a19      	ldr	r2, [pc, #100]	@ (8003700 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800369a:	4013      	ands	r3, r2
 800369c:	0019      	movs	r1, r3
 800369e:	4b17      	ldr	r3, [pc, #92]	@ (80036fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	2380      	movs	r3, #128	@ 0x80
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d11f      	bne.n	80036f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80036b0:	4b14      	ldr	r3, [pc, #80]	@ (8003704 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	0013      	movs	r3, r2
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	189b      	adds	r3, r3, r2
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4912      	ldr	r1, [pc, #72]	@ (8003708 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80036be:	0018      	movs	r0, r3
 80036c0:	f7fc fd20 	bl	8000104 <__udivsi3>
 80036c4:	0003      	movs	r3, r0
 80036c6:	3301      	adds	r3, #1
 80036c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036ca:	e008      	b.n	80036de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	e001      	b.n	80036de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e009      	b.n	80036f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036de:	4b07      	ldr	r3, [pc, #28]	@ (80036fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	2380      	movs	r3, #128	@ 0x80
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	401a      	ands	r2, r3
 80036e8:	2380      	movs	r3, #128	@ 0x80
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d0ed      	beq.n	80036cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	0018      	movs	r0, r3
 80036f4:	46bd      	mov	sp, r7
 80036f6:	b004      	add	sp, #16
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	40007000 	.word	0x40007000
 8003700:	fffff9ff 	.word	0xfffff9ff
 8003704:	20000064 	.word	0x20000064
 8003708:	000f4240 	.word	0x000f4240

0800370c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e2fe      	b.n	8003d1c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2201      	movs	r2, #1
 8003724:	4013      	ands	r3, r2
 8003726:	d100      	bne.n	800372a <HAL_RCC_OscConfig+0x1e>
 8003728:	e07c      	b.n	8003824 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800372a:	4bc3      	ldr	r3, [pc, #780]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2238      	movs	r2, #56	@ 0x38
 8003730:	4013      	ands	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003734:	4bc0      	ldr	r3, [pc, #768]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	2203      	movs	r2, #3
 800373a:	4013      	ands	r3, r2
 800373c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	2b10      	cmp	r3, #16
 8003742:	d102      	bne.n	800374a <HAL_RCC_OscConfig+0x3e>
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2b03      	cmp	r3, #3
 8003748:	d002      	beq.n	8003750 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b08      	cmp	r3, #8
 800374e:	d10b      	bne.n	8003768 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003750:	4bb9      	ldr	r3, [pc, #740]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	2380      	movs	r3, #128	@ 0x80
 8003756:	029b      	lsls	r3, r3, #10
 8003758:	4013      	ands	r3, r2
 800375a:	d062      	beq.n	8003822 <HAL_RCC_OscConfig+0x116>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d15e      	bne.n	8003822 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e2d9      	b.n	8003d1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	2380      	movs	r3, #128	@ 0x80
 800376e:	025b      	lsls	r3, r3, #9
 8003770:	429a      	cmp	r2, r3
 8003772:	d107      	bne.n	8003784 <HAL_RCC_OscConfig+0x78>
 8003774:	4bb0      	ldr	r3, [pc, #704]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4baf      	ldr	r3, [pc, #700]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 800377a:	2180      	movs	r1, #128	@ 0x80
 800377c:	0249      	lsls	r1, r1, #9
 800377e:	430a      	orrs	r2, r1
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e020      	b.n	80037c6 <HAL_RCC_OscConfig+0xba>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	23a0      	movs	r3, #160	@ 0xa0
 800378a:	02db      	lsls	r3, r3, #11
 800378c:	429a      	cmp	r2, r3
 800378e:	d10e      	bne.n	80037ae <HAL_RCC_OscConfig+0xa2>
 8003790:	4ba9      	ldr	r3, [pc, #676]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	4ba8      	ldr	r3, [pc, #672]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 8003796:	2180      	movs	r1, #128	@ 0x80
 8003798:	02c9      	lsls	r1, r1, #11
 800379a:	430a      	orrs	r2, r1
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	4ba6      	ldr	r3, [pc, #664]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	4ba5      	ldr	r3, [pc, #660]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 80037a4:	2180      	movs	r1, #128	@ 0x80
 80037a6:	0249      	lsls	r1, r1, #9
 80037a8:	430a      	orrs	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e00b      	b.n	80037c6 <HAL_RCC_OscConfig+0xba>
 80037ae:	4ba2      	ldr	r3, [pc, #648]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	4ba1      	ldr	r3, [pc, #644]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 80037b4:	49a1      	ldr	r1, [pc, #644]	@ (8003a3c <HAL_RCC_OscConfig+0x330>)
 80037b6:	400a      	ands	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	4b9f      	ldr	r3, [pc, #636]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	4b9e      	ldr	r3, [pc, #632]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 80037c0:	499f      	ldr	r1, [pc, #636]	@ (8003a40 <HAL_RCC_OscConfig+0x334>)
 80037c2:	400a      	ands	r2, r1
 80037c4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d014      	beq.n	80037f8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ce:	f7fe fe25 	bl	800241c <HAL_GetTick>
 80037d2:	0003      	movs	r3, r0
 80037d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d8:	f7fe fe20 	bl	800241c <HAL_GetTick>
 80037dc:	0002      	movs	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	@ 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e298      	b.n	8003d1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ea:	4b93      	ldr	r3, [pc, #588]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	2380      	movs	r3, #128	@ 0x80
 80037f0:	029b      	lsls	r3, r3, #10
 80037f2:	4013      	ands	r3, r2
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0xcc>
 80037f6:	e015      	b.n	8003824 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7fe fe10 	bl	800241c <HAL_GetTick>
 80037fc:	0003      	movs	r3, r0
 80037fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003802:	f7fe fe0b 	bl	800241c <HAL_GetTick>
 8003806:	0002      	movs	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b64      	cmp	r3, #100	@ 0x64
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e283      	b.n	8003d1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003814:	4b88      	ldr	r3, [pc, #544]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	2380      	movs	r3, #128	@ 0x80
 800381a:	029b      	lsls	r3, r3, #10
 800381c:	4013      	ands	r3, r2
 800381e:	d1f0      	bne.n	8003802 <HAL_RCC_OscConfig+0xf6>
 8003820:	e000      	b.n	8003824 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003822:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2202      	movs	r2, #2
 800382a:	4013      	ands	r3, r2
 800382c:	d100      	bne.n	8003830 <HAL_RCC_OscConfig+0x124>
 800382e:	e099      	b.n	8003964 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003830:	4b81      	ldr	r3, [pc, #516]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2238      	movs	r2, #56	@ 0x38
 8003836:	4013      	ands	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800383a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2203      	movs	r2, #3
 8003840:	4013      	ands	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	2b10      	cmp	r3, #16
 8003848:	d102      	bne.n	8003850 <HAL_RCC_OscConfig+0x144>
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d002      	beq.n	8003856 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d135      	bne.n	80038c2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003856:	4b78      	ldr	r3, [pc, #480]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	2380      	movs	r3, #128	@ 0x80
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4013      	ands	r3, r2
 8003860:	d005      	beq.n	800386e <HAL_RCC_OscConfig+0x162>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e256      	b.n	8003d1c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386e:	4b72      	ldr	r3, [pc, #456]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4a74      	ldr	r2, [pc, #464]	@ (8003a44 <HAL_RCC_OscConfig+0x338>)
 8003874:	4013      	ands	r3, r2
 8003876:	0019      	movs	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	021a      	lsls	r2, r3, #8
 800387e:	4b6e      	ldr	r3, [pc, #440]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 8003880:	430a      	orrs	r2, r1
 8003882:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d112      	bne.n	80038b0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800388a:	4b6b      	ldr	r3, [pc, #428]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a6e      	ldr	r2, [pc, #440]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 8003890:	4013      	ands	r3, r2
 8003892:	0019      	movs	r1, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	4b67      	ldr	r3, [pc, #412]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 800389a:	430a      	orrs	r2, r1
 800389c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800389e:	4b66      	ldr	r3, [pc, #408]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	0adb      	lsrs	r3, r3, #11
 80038a4:	2207      	movs	r2, #7
 80038a6:	4013      	ands	r3, r2
 80038a8:	4a68      	ldr	r2, [pc, #416]	@ (8003a4c <HAL_RCC_OscConfig+0x340>)
 80038aa:	40da      	lsrs	r2, r3
 80038ac:	4b68      	ldr	r3, [pc, #416]	@ (8003a50 <HAL_RCC_OscConfig+0x344>)
 80038ae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038b0:	4b68      	ldr	r3, [pc, #416]	@ (8003a54 <HAL_RCC_OscConfig+0x348>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	0018      	movs	r0, r3
 80038b6:	f7fe fd55 	bl	8002364 <HAL_InitTick>
 80038ba:	1e03      	subs	r3, r0, #0
 80038bc:	d051      	beq.n	8003962 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e22c      	b.n	8003d1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d030      	beq.n	800392c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80038ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a5e      	ldr	r2, [pc, #376]	@ (8003a48 <HAL_RCC_OscConfig+0x33c>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	0019      	movs	r1, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	4b57      	ldr	r3, [pc, #348]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 80038da:	430a      	orrs	r2, r1
 80038dc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80038de:	4b56      	ldr	r3, [pc, #344]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	4b55      	ldr	r3, [pc, #340]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 80038e4:	2180      	movs	r1, #128	@ 0x80
 80038e6:	0049      	lsls	r1, r1, #1
 80038e8:	430a      	orrs	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fe fd96 	bl	800241c <HAL_GetTick>
 80038f0:	0003      	movs	r3, r0
 80038f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f6:	f7fe fd91 	bl	800241c <HAL_GetTick>
 80038fa:	0002      	movs	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e209      	b.n	8003d1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003908:	4b4b      	ldr	r3, [pc, #300]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	2380      	movs	r3, #128	@ 0x80
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4013      	ands	r3, r2
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003914:	4b48      	ldr	r3, [pc, #288]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	4a4a      	ldr	r2, [pc, #296]	@ (8003a44 <HAL_RCC_OscConfig+0x338>)
 800391a:	4013      	ands	r3, r2
 800391c:	0019      	movs	r1, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	021a      	lsls	r2, r3, #8
 8003924:	4b44      	ldr	r3, [pc, #272]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	e01b      	b.n	8003964 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800392c:	4b42      	ldr	r3, [pc, #264]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b41      	ldr	r3, [pc, #260]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 8003932:	4949      	ldr	r1, [pc, #292]	@ (8003a58 <HAL_RCC_OscConfig+0x34c>)
 8003934:	400a      	ands	r2, r1
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fe fd70 	bl	800241c <HAL_GetTick>
 800393c:	0003      	movs	r3, r0
 800393e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003942:	f7fe fd6b 	bl	800241c <HAL_GetTick>
 8003946:	0002      	movs	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e1e3      	b.n	8003d1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003954:	4b38      	ldr	r3, [pc, #224]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	2380      	movs	r3, #128	@ 0x80
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	4013      	ands	r3, r2
 800395e:	d1f0      	bne.n	8003942 <HAL_RCC_OscConfig+0x236>
 8003960:	e000      	b.n	8003964 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003962:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2208      	movs	r2, #8
 800396a:	4013      	ands	r3, r2
 800396c:	d047      	beq.n	80039fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800396e:	4b32      	ldr	r3, [pc, #200]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2238      	movs	r2, #56	@ 0x38
 8003974:	4013      	ands	r3, r2
 8003976:	2b18      	cmp	r3, #24
 8003978:	d10a      	bne.n	8003990 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800397a:	4b2f      	ldr	r3, [pc, #188]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 800397c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800397e:	2202      	movs	r2, #2
 8003980:	4013      	ands	r3, r2
 8003982:	d03c      	beq.n	80039fe <HAL_RCC_OscConfig+0x2f2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d138      	bne.n	80039fe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e1c5      	b.n	8003d1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d019      	beq.n	80039cc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003998:	4b27      	ldr	r3, [pc, #156]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 800399a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800399c:	4b26      	ldr	r3, [pc, #152]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 800399e:	2101      	movs	r1, #1
 80039a0:	430a      	orrs	r2, r1
 80039a2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a4:	f7fe fd3a 	bl	800241c <HAL_GetTick>
 80039a8:	0003      	movs	r3, r0
 80039aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ae:	f7fe fd35 	bl	800241c <HAL_GetTick>
 80039b2:	0002      	movs	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e1ad      	b.n	8003d1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 80039c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c4:	2202      	movs	r2, #2
 80039c6:	4013      	ands	r3, r2
 80039c8:	d0f1      	beq.n	80039ae <HAL_RCC_OscConfig+0x2a2>
 80039ca:	e018      	b.n	80039fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80039cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 80039ce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80039d0:	4b19      	ldr	r3, [pc, #100]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 80039d2:	2101      	movs	r1, #1
 80039d4:	438a      	bics	r2, r1
 80039d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fe fd20 	bl	800241c <HAL_GetTick>
 80039dc:	0003      	movs	r3, r0
 80039de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e2:	f7fe fd1b 	bl	800241c <HAL_GetTick>
 80039e6:	0002      	movs	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e193      	b.n	8003d1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039f4:	4b10      	ldr	r3, [pc, #64]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 80039f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f8:	2202      	movs	r2, #2
 80039fa:	4013      	ands	r3, r2
 80039fc:	d1f1      	bne.n	80039e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2204      	movs	r2, #4
 8003a04:	4013      	ands	r3, r2
 8003a06:	d100      	bne.n	8003a0a <HAL_RCC_OscConfig+0x2fe>
 8003a08:	e0c6      	b.n	8003b98 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0a:	231f      	movs	r3, #31
 8003a0c:	18fb      	adds	r3, r7, r3
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003a12:	4b09      	ldr	r3, [pc, #36]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2238      	movs	r2, #56	@ 0x38
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d11e      	bne.n	8003a5c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003a1e:	4b06      	ldr	r3, [pc, #24]	@ (8003a38 <HAL_RCC_OscConfig+0x32c>)
 8003a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a22:	2202      	movs	r2, #2
 8003a24:	4013      	ands	r3, r2
 8003a26:	d100      	bne.n	8003a2a <HAL_RCC_OscConfig+0x31e>
 8003a28:	e0b6      	b.n	8003b98 <HAL_RCC_OscConfig+0x48c>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d000      	beq.n	8003a34 <HAL_RCC_OscConfig+0x328>
 8003a32:	e0b1      	b.n	8003b98 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e171      	b.n	8003d1c <HAL_RCC_OscConfig+0x610>
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	fffeffff 	.word	0xfffeffff
 8003a40:	fffbffff 	.word	0xfffbffff
 8003a44:	ffff80ff 	.word	0xffff80ff
 8003a48:	ffffc7ff 	.word	0xffffc7ff
 8003a4c:	00f42400 	.word	0x00f42400
 8003a50:	20000064 	.word	0x20000064
 8003a54:	20000068 	.word	0x20000068
 8003a58:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a5c:	4bb1      	ldr	r3, [pc, #708]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003a5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a60:	2380      	movs	r3, #128	@ 0x80
 8003a62:	055b      	lsls	r3, r3, #21
 8003a64:	4013      	ands	r3, r2
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_OscConfig+0x360>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e000      	b.n	8003a6e <HAL_RCC_OscConfig+0x362>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d011      	beq.n	8003a96 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003a72:	4bac      	ldr	r3, [pc, #688]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003a74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a76:	4bab      	ldr	r3, [pc, #684]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003a78:	2180      	movs	r1, #128	@ 0x80
 8003a7a:	0549      	lsls	r1, r1, #21
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003a80:	4ba8      	ldr	r3, [pc, #672]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003a82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a84:	2380      	movs	r3, #128	@ 0x80
 8003a86:	055b      	lsls	r3, r3, #21
 8003a88:	4013      	ands	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003a8e:	231f      	movs	r3, #31
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	2201      	movs	r2, #1
 8003a94:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a96:	4ba4      	ldr	r3, [pc, #656]	@ (8003d28 <HAL_RCC_OscConfig+0x61c>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	2380      	movs	r3, #128	@ 0x80
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d11a      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aa2:	4ba1      	ldr	r3, [pc, #644]	@ (8003d28 <HAL_RCC_OscConfig+0x61c>)
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	4ba0      	ldr	r3, [pc, #640]	@ (8003d28 <HAL_RCC_OscConfig+0x61c>)
 8003aa8:	2180      	movs	r1, #128	@ 0x80
 8003aaa:	0049      	lsls	r1, r1, #1
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003ab0:	f7fe fcb4 	bl	800241c <HAL_GetTick>
 8003ab4:	0003      	movs	r3, r0
 8003ab6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aba:	f7fe fcaf 	bl	800241c <HAL_GetTick>
 8003abe:	0002      	movs	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e127      	b.n	8003d1c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003acc:	4b96      	ldr	r3, [pc, #600]	@ (8003d28 <HAL_RCC_OscConfig+0x61c>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	2380      	movs	r3, #128	@ 0x80
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d106      	bne.n	8003aee <HAL_RCC_OscConfig+0x3e2>
 8003ae0:	4b90      	ldr	r3, [pc, #576]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003ae2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ae4:	4b8f      	ldr	r3, [pc, #572]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003aec:	e01c      	b.n	8003b28 <HAL_RCC_OscConfig+0x41c>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b05      	cmp	r3, #5
 8003af4:	d10c      	bne.n	8003b10 <HAL_RCC_OscConfig+0x404>
 8003af6:	4b8b      	ldr	r3, [pc, #556]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003af8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003afa:	4b8a      	ldr	r3, [pc, #552]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003afc:	2104      	movs	r1, #4
 8003afe:	430a      	orrs	r2, r1
 8003b00:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b02:	4b88      	ldr	r3, [pc, #544]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003b04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b06:	4b87      	ldr	r3, [pc, #540]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003b08:	2101      	movs	r1, #1
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b0e:	e00b      	b.n	8003b28 <HAL_RCC_OscConfig+0x41c>
 8003b10:	4b84      	ldr	r3, [pc, #528]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003b12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b14:	4b83      	ldr	r3, [pc, #524]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003b16:	2101      	movs	r1, #1
 8003b18:	438a      	bics	r2, r1
 8003b1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b1c:	4b81      	ldr	r3, [pc, #516]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003b1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b20:	4b80      	ldr	r3, [pc, #512]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003b22:	2104      	movs	r1, #4
 8003b24:	438a      	bics	r2, r1
 8003b26:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d014      	beq.n	8003b5a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fe fc74 	bl	800241c <HAL_GetTick>
 8003b34:	0003      	movs	r3, r0
 8003b36:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b38:	e009      	b.n	8003b4e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3a:	f7fe fc6f 	bl	800241c <HAL_GetTick>
 8003b3e:	0002      	movs	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	4a79      	ldr	r2, [pc, #484]	@ (8003d2c <HAL_RCC_OscConfig+0x620>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e0e6      	b.n	8003d1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b4e:	4b75      	ldr	r3, [pc, #468]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b52:	2202      	movs	r2, #2
 8003b54:	4013      	ands	r3, r2
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCC_OscConfig+0x42e>
 8003b58:	e013      	b.n	8003b82 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5a:	f7fe fc5f 	bl	800241c <HAL_GetTick>
 8003b5e:	0003      	movs	r3, r0
 8003b60:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b62:	e009      	b.n	8003b78 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b64:	f7fe fc5a 	bl	800241c <HAL_GetTick>
 8003b68:	0002      	movs	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	4a6f      	ldr	r2, [pc, #444]	@ (8003d2c <HAL_RCC_OscConfig+0x620>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e0d1      	b.n	8003d1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b78:	4b6a      	ldr	r3, [pc, #424]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003b82:	231f      	movs	r3, #31
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d105      	bne.n	8003b98 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003b8c:	4b65      	ldr	r3, [pc, #404]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003b8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b90:	4b64      	ldr	r3, [pc, #400]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003b92:	4967      	ldr	r1, [pc, #412]	@ (8003d30 <HAL_RCC_OscConfig+0x624>)
 8003b94:	400a      	ands	r2, r1
 8003b96:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d100      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x496>
 8003ba0:	e0bb      	b.n	8003d1a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ba2:	4b60      	ldr	r3, [pc, #384]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2238      	movs	r2, #56	@ 0x38
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b10      	cmp	r3, #16
 8003bac:	d100      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x4a4>
 8003bae:	e07b      	b.n	8003ca8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d156      	bne.n	8003c66 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb8:	4b5a      	ldr	r3, [pc, #360]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4b59      	ldr	r3, [pc, #356]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003bbe:	495d      	ldr	r1, [pc, #372]	@ (8003d34 <HAL_RCC_OscConfig+0x628>)
 8003bc0:	400a      	ands	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fe fc2a 	bl	800241c <HAL_GetTick>
 8003bc8:	0003      	movs	r3, r0
 8003bca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bce:	f7fe fc25 	bl	800241c <HAL_GetTick>
 8003bd2:	0002      	movs	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e09d      	b.n	8003d1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003be0:	4b50      	ldr	r3, [pc, #320]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	2380      	movs	r3, #128	@ 0x80
 8003be6:	049b      	lsls	r3, r3, #18
 8003be8:	4013      	ands	r3, r2
 8003bea:	d1f0      	bne.n	8003bce <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bec:	4b4d      	ldr	r3, [pc, #308]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4a51      	ldr	r2, [pc, #324]	@ (8003d38 <HAL_RCC_OscConfig+0x62c>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1a      	ldr	r2, [r3, #32]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c04:	021b      	lsls	r3, r3, #8
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	4b42      	ldr	r3, [pc, #264]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c20:	4b40      	ldr	r3, [pc, #256]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	4b3f      	ldr	r3, [pc, #252]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003c26:	2180      	movs	r1, #128	@ 0x80
 8003c28:	0449      	lsls	r1, r1, #17
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	4b3c      	ldr	r3, [pc, #240]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003c34:	2180      	movs	r1, #128	@ 0x80
 8003c36:	0549      	lsls	r1, r1, #21
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fe fbee 	bl	800241c <HAL_GetTick>
 8003c40:	0003      	movs	r3, r0
 8003c42:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c46:	f7fe fbe9 	bl	800241c <HAL_GetTick>
 8003c4a:	0002      	movs	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e061      	b.n	8003d1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c58:	4b32      	ldr	r3, [pc, #200]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	2380      	movs	r3, #128	@ 0x80
 8003c5e:	049b      	lsls	r3, r3, #18
 8003c60:	4013      	ands	r3, r2
 8003c62:	d0f0      	beq.n	8003c46 <HAL_RCC_OscConfig+0x53a>
 8003c64:	e059      	b.n	8003d1a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c66:	4b2f      	ldr	r3, [pc, #188]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003c6c:	4931      	ldr	r1, [pc, #196]	@ (8003d34 <HAL_RCC_OscConfig+0x628>)
 8003c6e:	400a      	ands	r2, r1
 8003c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c72:	f7fe fbd3 	bl	800241c <HAL_GetTick>
 8003c76:	0003      	movs	r3, r0
 8003c78:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fe fbce 	bl	800241c <HAL_GetTick>
 8003c80:	0002      	movs	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e046      	b.n	8003d1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c8e:	4b25      	ldr	r3, [pc, #148]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	2380      	movs	r3, #128	@ 0x80
 8003c94:	049b      	lsls	r3, r3, #18
 8003c96:	4013      	ands	r3, r2
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003c9a:	4b22      	ldr	r3, [pc, #136]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	4b21      	ldr	r3, [pc, #132]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003ca0:	4926      	ldr	r1, [pc, #152]	@ (8003d3c <HAL_RCC_OscConfig+0x630>)
 8003ca2:	400a      	ands	r2, r1
 8003ca4:	60da      	str	r2, [r3, #12]
 8003ca6:	e038      	b.n	8003d1a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e033      	b.n	8003d1c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d24 <HAL_RCC_OscConfig+0x618>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	401a      	ands	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d126      	bne.n	8003d16 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2270      	movs	r2, #112	@ 0x70
 8003ccc:	401a      	ands	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d11f      	bne.n	8003d16 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	23fe      	movs	r3, #254	@ 0xfe
 8003cda:	01db      	lsls	r3, r3, #7
 8003cdc:	401a      	ands	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d116      	bne.n	8003d16 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	23f8      	movs	r3, #248	@ 0xf8
 8003cec:	039b      	lsls	r3, r3, #14
 8003cee:	401a      	ands	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d10e      	bne.n	8003d16 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	23e0      	movs	r3, #224	@ 0xe0
 8003cfc:	051b      	lsls	r3, r3, #20
 8003cfe:	401a      	ands	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d106      	bne.n	8003d16 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	0f5b      	lsrs	r3, r3, #29
 8003d0c:	075a      	lsls	r2, r3, #29
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d001      	beq.n	8003d1a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b008      	add	sp, #32
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	00001388 	.word	0x00001388
 8003d30:	efffffff 	.word	0xefffffff
 8003d34:	feffffff 	.word	0xfeffffff
 8003d38:	11c1808c 	.word	0x11c1808c
 8003d3c:	eefefffc 	.word	0xeefefffc

08003d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0e9      	b.n	8003f28 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d54:	4b76      	ldr	r3, [pc, #472]	@ (8003f30 <HAL_RCC_ClockConfig+0x1f0>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2207      	movs	r2, #7
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d91e      	bls.n	8003da0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d62:	4b73      	ldr	r3, [pc, #460]	@ (8003f30 <HAL_RCC_ClockConfig+0x1f0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2207      	movs	r2, #7
 8003d68:	4393      	bics	r3, r2
 8003d6a:	0019      	movs	r1, r3
 8003d6c:	4b70      	ldr	r3, [pc, #448]	@ (8003f30 <HAL_RCC_ClockConfig+0x1f0>)
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d74:	f7fe fb52 	bl	800241c <HAL_GetTick>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d7c:	e009      	b.n	8003d92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d7e:	f7fe fb4d 	bl	800241c <HAL_GetTick>
 8003d82:	0002      	movs	r2, r0
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	4a6a      	ldr	r2, [pc, #424]	@ (8003f34 <HAL_RCC_ClockConfig+0x1f4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e0ca      	b.n	8003f28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d92:	4b67      	ldr	r3, [pc, #412]	@ (8003f30 <HAL_RCC_ClockConfig+0x1f0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2207      	movs	r2, #7
 8003d98:	4013      	ands	r3, r2
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d1ee      	bne.n	8003d7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2202      	movs	r2, #2
 8003da6:	4013      	ands	r3, r2
 8003da8:	d015      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2204      	movs	r2, #4
 8003db0:	4013      	ands	r3, r2
 8003db2:	d006      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003db4:	4b60      	ldr	r3, [pc, #384]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f8>)
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	4b5f      	ldr	r3, [pc, #380]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f8>)
 8003dba:	21e0      	movs	r1, #224	@ 0xe0
 8003dbc:	01c9      	lsls	r1, r1, #7
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc2:	4b5d      	ldr	r3, [pc, #372]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f8>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	4a5d      	ldr	r2, [pc, #372]	@ (8003f3c <HAL_RCC_ClockConfig+0x1fc>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	0019      	movs	r1, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	4b59      	ldr	r3, [pc, #356]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f8>)
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d057      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d107      	bne.n	8003df8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de8:	4b53      	ldr	r3, [pc, #332]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f8>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	2380      	movs	r3, #128	@ 0x80
 8003dee:	029b      	lsls	r3, r3, #10
 8003df0:	4013      	ands	r3, r2
 8003df2:	d12b      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e097      	b.n	8003f28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e00:	4b4d      	ldr	r3, [pc, #308]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f8>)
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	2380      	movs	r3, #128	@ 0x80
 8003e06:	049b      	lsls	r3, r3, #18
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d11f      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e08b      	b.n	8003f28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d107      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e18:	4b47      	ldr	r3, [pc, #284]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f8>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	2380      	movs	r3, #128	@ 0x80
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4013      	ands	r3, r2
 8003e22:	d113      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e07f      	b.n	8003f28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d106      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e30:	4b41      	ldr	r3, [pc, #260]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f8>)
 8003e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e34:	2202      	movs	r2, #2
 8003e36:	4013      	ands	r3, r2
 8003e38:	d108      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e074      	b.n	8003f28 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f8>)
 8003e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e42:	2202      	movs	r2, #2
 8003e44:	4013      	ands	r3, r2
 8003e46:	d101      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e06d      	b.n	8003f28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e4c:	4b3a      	ldr	r3, [pc, #232]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f8>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2207      	movs	r2, #7
 8003e52:	4393      	bics	r3, r2
 8003e54:	0019      	movs	r1, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	4b37      	ldr	r3, [pc, #220]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f8>)
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e60:	f7fe fadc 	bl	800241c <HAL_GetTick>
 8003e64:	0003      	movs	r3, r0
 8003e66:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e68:	e009      	b.n	8003e7e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e6a:	f7fe fad7 	bl	800241c <HAL_GetTick>
 8003e6e:	0002      	movs	r2, r0
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	4a2f      	ldr	r2, [pc, #188]	@ (8003f34 <HAL_RCC_ClockConfig+0x1f4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e054      	b.n	8003f28 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7e:	4b2e      	ldr	r3, [pc, #184]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f8>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2238      	movs	r2, #56	@ 0x38
 8003e84:	401a      	ands	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d1ec      	bne.n	8003e6a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e90:	4b27      	ldr	r3, [pc, #156]	@ (8003f30 <HAL_RCC_ClockConfig+0x1f0>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2207      	movs	r2, #7
 8003e96:	4013      	ands	r3, r2
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d21e      	bcs.n	8003edc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9e:	4b24      	ldr	r3, [pc, #144]	@ (8003f30 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2207      	movs	r2, #7
 8003ea4:	4393      	bics	r3, r2
 8003ea6:	0019      	movs	r1, r3
 8003ea8:	4b21      	ldr	r3, [pc, #132]	@ (8003f30 <HAL_RCC_ClockConfig+0x1f0>)
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003eb0:	f7fe fab4 	bl	800241c <HAL_GetTick>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003eb8:	e009      	b.n	8003ece <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eba:	f7fe faaf 	bl	800241c <HAL_GetTick>
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8003f34 <HAL_RCC_ClockConfig+0x1f4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e02c      	b.n	8003f28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ece:	4b18      	ldr	r3, [pc, #96]	@ (8003f30 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2207      	movs	r2, #7
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d1ee      	bne.n	8003eba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d009      	beq.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003ee6:	4b14      	ldr	r3, [pc, #80]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f8>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	4a15      	ldr	r2, [pc, #84]	@ (8003f40 <HAL_RCC_ClockConfig+0x200>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	0019      	movs	r1, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	4b10      	ldr	r3, [pc, #64]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f8>)
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003efa:	f000 f829 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 8003efe:	0001      	movs	r1, r0
 8003f00:	4b0d      	ldr	r3, [pc, #52]	@ (8003f38 <HAL_RCC_ClockConfig+0x1f8>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	0a1b      	lsrs	r3, r3, #8
 8003f06:	220f      	movs	r2, #15
 8003f08:	401a      	ands	r2, r3
 8003f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f44 <HAL_RCC_ClockConfig+0x204>)
 8003f0c:	0092      	lsls	r2, r2, #2
 8003f0e:	58d3      	ldr	r3, [r2, r3]
 8003f10:	221f      	movs	r2, #31
 8003f12:	4013      	ands	r3, r2
 8003f14:	000a      	movs	r2, r1
 8003f16:	40da      	lsrs	r2, r3
 8003f18:	4b0b      	ldr	r3, [pc, #44]	@ (8003f48 <HAL_RCC_ClockConfig+0x208>)
 8003f1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f4c <HAL_RCC_ClockConfig+0x20c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	0018      	movs	r0, r3
 8003f22:	f7fe fa1f 	bl	8002364 <HAL_InitTick>
 8003f26:	0003      	movs	r3, r0
}
 8003f28:	0018      	movs	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b004      	add	sp, #16
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40022000 	.word	0x40022000
 8003f34:	00001388 	.word	0x00001388
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	fffff0ff 	.word	0xfffff0ff
 8003f40:	ffff8fff 	.word	0xffff8fff
 8003f44:	0800631c 	.word	0x0800631c
 8003f48:	20000064 	.word	0x20000064
 8003f4c:	20000068 	.word	0x20000068

08003f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f56:	4b3c      	ldr	r3, [pc, #240]	@ (8004048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2238      	movs	r2, #56	@ 0x38
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	d10f      	bne.n	8003f80 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003f60:	4b39      	ldr	r3, [pc, #228]	@ (8004048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	0adb      	lsrs	r3, r3, #11
 8003f66:	2207      	movs	r2, #7
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	409a      	lsls	r2, r3
 8003f6e:	0013      	movs	r3, r2
 8003f70:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003f72:	6839      	ldr	r1, [r7, #0]
 8003f74:	4835      	ldr	r0, [pc, #212]	@ (800404c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003f76:	f7fc f8c5 	bl	8000104 <__udivsi3>
 8003f7a:	0003      	movs	r3, r0
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	e05d      	b.n	800403c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f80:	4b31      	ldr	r3, [pc, #196]	@ (8004048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	2238      	movs	r2, #56	@ 0x38
 8003f86:	4013      	ands	r3, r2
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d102      	bne.n	8003f92 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f8c:	4b30      	ldr	r3, [pc, #192]	@ (8004050 <HAL_RCC_GetSysClockFreq+0x100>)
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	e054      	b.n	800403c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f92:	4b2d      	ldr	r3, [pc, #180]	@ (8004048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2238      	movs	r2, #56	@ 0x38
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b10      	cmp	r3, #16
 8003f9c:	d138      	bne.n	8004010 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8004048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fa8:	4b27      	ldr	r3, [pc, #156]	@ (8004048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	2207      	movs	r2, #7
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d10d      	bne.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fbc:	68b9      	ldr	r1, [r7, #8]
 8003fbe:	4824      	ldr	r0, [pc, #144]	@ (8004050 <HAL_RCC_GetSysClockFreq+0x100>)
 8003fc0:	f7fc f8a0 	bl	8000104 <__udivsi3>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	0019      	movs	r1, r3
 8003fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8004048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	0a1b      	lsrs	r3, r3, #8
 8003fce:	227f      	movs	r2, #127	@ 0x7f
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	434b      	muls	r3, r1
 8003fd4:	617b      	str	r3, [r7, #20]
        break;
 8003fd6:	e00d      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	481c      	ldr	r0, [pc, #112]	@ (800404c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003fdc:	f7fc f892 	bl	8000104 <__udivsi3>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	0019      	movs	r1, r3
 8003fe4:	4b18      	ldr	r3, [pc, #96]	@ (8004048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	0a1b      	lsrs	r3, r3, #8
 8003fea:	227f      	movs	r2, #127	@ 0x7f
 8003fec:	4013      	ands	r3, r2
 8003fee:	434b      	muls	r3, r1
 8003ff0:	617b      	str	r3, [r7, #20]
        break;
 8003ff2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003ff4:	4b14      	ldr	r3, [pc, #80]	@ (8004048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	0f5b      	lsrs	r3, r3, #29
 8003ffa:	2207      	movs	r2, #7
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	3301      	adds	r3, #1
 8004000:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	6978      	ldr	r0, [r7, #20]
 8004006:	f7fc f87d 	bl	8000104 <__udivsi3>
 800400a:	0003      	movs	r3, r0
 800400c:	613b      	str	r3, [r7, #16]
 800400e:	e015      	b.n	800403c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004010:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2238      	movs	r2, #56	@ 0x38
 8004016:	4013      	ands	r3, r2
 8004018:	2b20      	cmp	r3, #32
 800401a:	d103      	bne.n	8004024 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800401c:	2380      	movs	r3, #128	@ 0x80
 800401e:	021b      	lsls	r3, r3, #8
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	e00b      	b.n	800403c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004024:	4b08      	ldr	r3, [pc, #32]	@ (8004048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2238      	movs	r2, #56	@ 0x38
 800402a:	4013      	ands	r3, r2
 800402c:	2b18      	cmp	r3, #24
 800402e:	d103      	bne.n	8004038 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004030:	23fa      	movs	r3, #250	@ 0xfa
 8004032:	01db      	lsls	r3, r3, #7
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	e001      	b.n	800403c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800403c:	693b      	ldr	r3, [r7, #16]
}
 800403e:	0018      	movs	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	b006      	add	sp, #24
 8004044:	bd80      	pop	{r7, pc}
 8004046:	46c0      	nop			@ (mov r8, r8)
 8004048:	40021000 	.word	0x40021000
 800404c:	00f42400 	.word	0x00f42400
 8004050:	007a1200 	.word	0x007a1200

08004054 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800405c:	2313      	movs	r3, #19
 800405e:	18fb      	adds	r3, r7, r3
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004064:	2312      	movs	r3, #18
 8004066:	18fb      	adds	r3, r7, r3
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	2380      	movs	r3, #128	@ 0x80
 8004072:	029b      	lsls	r3, r3, #10
 8004074:	4013      	ands	r3, r2
 8004076:	d100      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004078:	e0a3      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800407a:	2011      	movs	r0, #17
 800407c:	183b      	adds	r3, r7, r0
 800407e:	2200      	movs	r2, #0
 8004080:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004082:	4ba5      	ldr	r3, [pc, #660]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004084:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004086:	2380      	movs	r3, #128	@ 0x80
 8004088:	055b      	lsls	r3, r3, #21
 800408a:	4013      	ands	r3, r2
 800408c:	d110      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800408e:	4ba2      	ldr	r3, [pc, #648]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004090:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004092:	4ba1      	ldr	r3, [pc, #644]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004094:	2180      	movs	r1, #128	@ 0x80
 8004096:	0549      	lsls	r1, r1, #21
 8004098:	430a      	orrs	r2, r1
 800409a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800409c:	4b9e      	ldr	r3, [pc, #632]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800409e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040a0:	2380      	movs	r3, #128	@ 0x80
 80040a2:	055b      	lsls	r3, r3, #21
 80040a4:	4013      	ands	r3, r2
 80040a6:	60bb      	str	r3, [r7, #8]
 80040a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040aa:	183b      	adds	r3, r7, r0
 80040ac:	2201      	movs	r2, #1
 80040ae:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040b0:	4b9a      	ldr	r3, [pc, #616]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4b99      	ldr	r3, [pc, #612]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80040b6:	2180      	movs	r1, #128	@ 0x80
 80040b8:	0049      	lsls	r1, r1, #1
 80040ba:	430a      	orrs	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040be:	f7fe f9ad 	bl	800241c <HAL_GetTick>
 80040c2:	0003      	movs	r3, r0
 80040c4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040c6:	e00b      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c8:	f7fe f9a8 	bl	800241c <HAL_GetTick>
 80040cc:	0002      	movs	r2, r0
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d904      	bls.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80040d6:	2313      	movs	r3, #19
 80040d8:	18fb      	adds	r3, r7, r3
 80040da:	2203      	movs	r2, #3
 80040dc:	701a      	strb	r2, [r3, #0]
        break;
 80040de:	e005      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040e0:	4b8e      	ldr	r3, [pc, #568]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	2380      	movs	r3, #128	@ 0x80
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	4013      	ands	r3, r2
 80040ea:	d0ed      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80040ec:	2313      	movs	r3, #19
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d154      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040f6:	4b88      	ldr	r3, [pc, #544]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80040fa:	23c0      	movs	r3, #192	@ 0xc0
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4013      	ands	r3, r2
 8004100:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d019      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	429a      	cmp	r2, r3
 8004110:	d014      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004112:	4b81      	ldr	r3, [pc, #516]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004116:	4a82      	ldr	r2, [pc, #520]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004118:	4013      	ands	r3, r2
 800411a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800411c:	4b7e      	ldr	r3, [pc, #504]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800411e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004120:	4b7d      	ldr	r3, [pc, #500]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004122:	2180      	movs	r1, #128	@ 0x80
 8004124:	0249      	lsls	r1, r1, #9
 8004126:	430a      	orrs	r2, r1
 8004128:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800412a:	4b7b      	ldr	r3, [pc, #492]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800412c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800412e:	4b7a      	ldr	r3, [pc, #488]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004130:	497c      	ldr	r1, [pc, #496]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004132:	400a      	ands	r2, r1
 8004134:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004136:	4b78      	ldr	r3, [pc, #480]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2201      	movs	r2, #1
 8004140:	4013      	ands	r3, r2
 8004142:	d016      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7fe f96a 	bl	800241c <HAL_GetTick>
 8004148:	0003      	movs	r3, r0
 800414a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800414c:	e00c      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414e:	f7fe f965 	bl	800241c <HAL_GetTick>
 8004152:	0002      	movs	r2, r0
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	4a73      	ldr	r2, [pc, #460]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d904      	bls.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800415e:	2313      	movs	r3, #19
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	2203      	movs	r2, #3
 8004164:	701a      	strb	r2, [r3, #0]
            break;
 8004166:	e004      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004168:	4b6b      	ldr	r3, [pc, #428]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800416a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416c:	2202      	movs	r2, #2
 800416e:	4013      	ands	r3, r2
 8004170:	d0ed      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004172:	2313      	movs	r3, #19
 8004174:	18fb      	adds	r3, r7, r3
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800417c:	4b66      	ldr	r3, [pc, #408]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800417e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004180:	4a67      	ldr	r2, [pc, #412]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004182:	4013      	ands	r3, r2
 8004184:	0019      	movs	r1, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800418a:	4b63      	ldr	r3, [pc, #396]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800418c:	430a      	orrs	r2, r1
 800418e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004190:	e00c      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004192:	2312      	movs	r3, #18
 8004194:	18fb      	adds	r3, r7, r3
 8004196:	2213      	movs	r2, #19
 8004198:	18ba      	adds	r2, r7, r2
 800419a:	7812      	ldrb	r2, [r2, #0]
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	e005      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a0:	2312      	movs	r3, #18
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	2213      	movs	r2, #19
 80041a6:	18ba      	adds	r2, r7, r2
 80041a8:	7812      	ldrb	r2, [r2, #0]
 80041aa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041ac:	2311      	movs	r3, #17
 80041ae:	18fb      	adds	r3, r7, r3
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d105      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b6:	4b58      	ldr	r3, [pc, #352]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041ba:	4b57      	ldr	r3, [pc, #348]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041bc:	495b      	ldr	r1, [pc, #364]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80041be:	400a      	ands	r2, r1
 80041c0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2201      	movs	r2, #1
 80041c8:	4013      	ands	r3, r2
 80041ca:	d009      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041cc:	4b52      	ldr	r3, [pc, #328]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d0:	2203      	movs	r2, #3
 80041d2:	4393      	bics	r3, r2
 80041d4:	0019      	movs	r1, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	4b4f      	ldr	r3, [pc, #316]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041dc:	430a      	orrs	r2, r1
 80041de:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2210      	movs	r2, #16
 80041e6:	4013      	ands	r3, r2
 80041e8:	d009      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041ea:	4b4b      	ldr	r3, [pc, #300]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ee:	4a50      	ldr	r2, [pc, #320]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	0019      	movs	r1, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	4b47      	ldr	r3, [pc, #284]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041fa:	430a      	orrs	r2, r1
 80041fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	2380      	movs	r3, #128	@ 0x80
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4013      	ands	r3, r2
 8004208:	d009      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800420a:	4b43      	ldr	r3, [pc, #268]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800420c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420e:	4a49      	ldr	r2, [pc, #292]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004210:	4013      	ands	r3, r2
 8004212:	0019      	movs	r1, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	4b3f      	ldr	r3, [pc, #252]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800421a:	430a      	orrs	r2, r1
 800421c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	2380      	movs	r3, #128	@ 0x80
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	4013      	ands	r3, r2
 8004228:	d009      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800422a:	4b3b      	ldr	r3, [pc, #236]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800422c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422e:	4a42      	ldr	r2, [pc, #264]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004230:	4013      	ands	r3, r2
 8004232:	0019      	movs	r1, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699a      	ldr	r2, [r3, #24]
 8004238:	4b37      	ldr	r3, [pc, #220]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800423a:	430a      	orrs	r2, r1
 800423c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2220      	movs	r2, #32
 8004244:	4013      	ands	r3, r2
 8004246:	d009      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004248:	4b33      	ldr	r3, [pc, #204]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800424a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800424c:	4a3b      	ldr	r2, [pc, #236]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800424e:	4013      	ands	r3, r2
 8004250:	0019      	movs	r1, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	4b30      	ldr	r3, [pc, #192]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004258:	430a      	orrs	r2, r1
 800425a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	2380      	movs	r3, #128	@ 0x80
 8004262:	01db      	lsls	r3, r3, #7
 8004264:	4013      	ands	r3, r2
 8004266:	d015      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004268:	4b2b      	ldr	r3, [pc, #172]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800426a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	0899      	lsrs	r1, r3, #2
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69da      	ldr	r2, [r3, #28]
 8004274:	4b28      	ldr	r3, [pc, #160]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004276:	430a      	orrs	r2, r1
 8004278:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69da      	ldr	r2, [r3, #28]
 800427e:	2380      	movs	r3, #128	@ 0x80
 8004280:	05db      	lsls	r3, r3, #23
 8004282:	429a      	cmp	r2, r3
 8004284:	d106      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004286:	4b24      	ldr	r3, [pc, #144]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	4b23      	ldr	r3, [pc, #140]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800428c:	2180      	movs	r1, #128	@ 0x80
 800428e:	0249      	lsls	r1, r1, #9
 8004290:	430a      	orrs	r2, r1
 8004292:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	2380      	movs	r3, #128	@ 0x80
 800429a:	039b      	lsls	r3, r3, #14
 800429c:	4013      	ands	r3, r2
 800429e:	d016      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80042a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a4:	4a26      	ldr	r2, [pc, #152]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	0019      	movs	r1, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1a      	ldr	r2, [r3, #32]
 80042ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042b0:	430a      	orrs	r2, r1
 80042b2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1a      	ldr	r2, [r3, #32]
 80042b8:	2380      	movs	r3, #128	@ 0x80
 80042ba:	03db      	lsls	r3, r3, #15
 80042bc:	429a      	cmp	r2, r3
 80042be:	d106      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80042c0:	4b15      	ldr	r3, [pc, #84]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	4b14      	ldr	r3, [pc, #80]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042c6:	2180      	movs	r1, #128	@ 0x80
 80042c8:	0449      	lsls	r1, r1, #17
 80042ca:	430a      	orrs	r2, r1
 80042cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	2380      	movs	r3, #128	@ 0x80
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	4013      	ands	r3, r2
 80042d8:	d016      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80042da:	4b0f      	ldr	r3, [pc, #60]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042de:	4a19      	ldr	r2, [pc, #100]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042e0:	4013      	ands	r3, r2
 80042e2:	0019      	movs	r1, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042ea:	430a      	orrs	r2, r1
 80042ec:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	2380      	movs	r3, #128	@ 0x80
 80042f4:	01db      	lsls	r3, r3, #7
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d106      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80042fa:	4b07      	ldr	r3, [pc, #28]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	4b06      	ldr	r3, [pc, #24]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004300:	2180      	movs	r1, #128	@ 0x80
 8004302:	0249      	lsls	r1, r1, #9
 8004304:	430a      	orrs	r2, r1
 8004306:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004308:	2312      	movs	r3, #18
 800430a:	18fb      	adds	r3, r7, r3
 800430c:	781b      	ldrb	r3, [r3, #0]
}
 800430e:	0018      	movs	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	b006      	add	sp, #24
 8004314:	bd80      	pop	{r7, pc}
 8004316:	46c0      	nop			@ (mov r8, r8)
 8004318:	40021000 	.word	0x40021000
 800431c:	40007000 	.word	0x40007000
 8004320:	fffffcff 	.word	0xfffffcff
 8004324:	fffeffff 	.word	0xfffeffff
 8004328:	00001388 	.word	0x00001388
 800432c:	efffffff 	.word	0xefffffff
 8004330:	fffff3ff 	.word	0xfffff3ff
 8004334:	fff3ffff 	.word	0xfff3ffff
 8004338:	ffcfffff 	.word	0xffcfffff
 800433c:	ffffcfff 	.word	0xffffcfff
 8004340:	ffbfffff 	.word	0xffbfffff
 8004344:	ffff3fff 	.word	0xffff3fff

08004348 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8004348:	b590      	push	{r4, r7, lr}
 800434a:	b08b      	sub	sp, #44	@ 0x2c
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8004350:	2427      	movs	r4, #39	@ 0x27
 8004352:	193b      	adds	r3, r7, r4
 8004354:	2200      	movs	r2, #0
 8004356:	701a      	strb	r2, [r3, #0]
  FlagStatus       backupchanged = RESET;
 8004358:	2326      	movs	r3, #38	@ 0x26
 800435a:	18fb      	adds	r3, r7, r3
 800435c:	2200      	movs	r2, #0
 800435e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 8004360:	4b31      	ldr	r3, [pc, #196]	@ (8004428 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004362:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004364:	4b30      	ldr	r3, [pc, #192]	@ (8004428 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004366:	2101      	movs	r1, #1
 8004368:	430a      	orrs	r2, r1
 800436a:	635a      	str	r2, [r3, #52]	@ 0x34
 800436c:	4b2e      	ldr	r3, [pc, #184]	@ (8004428 <HAL_RCCEx_EnableLSCO+0xe0>)
 800436e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004370:	2201      	movs	r2, #1
 8004372:	4013      	ands	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 8004378:	2110      	movs	r1, #16
 800437a:	187b      	adds	r3, r7, r1
 800437c:	2204      	movs	r2, #4
 800437e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004380:	187b      	adds	r3, r7, r1
 8004382:	2203      	movs	r2, #3
 8004384:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004386:	187b      	adds	r3, r7, r1
 8004388:	2203      	movs	r2, #3
 800438a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438c:	187b      	adds	r3, r7, r1
 800438e:	2200      	movs	r2, #0
 8004390:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 8004392:	187a      	adds	r2, r7, r1
 8004394:	23a0      	movs	r3, #160	@ 0xa0
 8004396:	05db      	lsls	r3, r3, #23
 8004398:	0011      	movs	r1, r2
 800439a:	0018      	movs	r0, r3
 800439c:	f7fe f926 	bl	80025ec <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a0:	4b21      	ldr	r3, [pc, #132]	@ (8004428 <HAL_RCCEx_EnableLSCO+0xe0>)
 80043a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043a4:	2380      	movs	r3, #128	@ 0x80
 80043a6:	055b      	lsls	r3, r3, #21
 80043a8:	4013      	ands	r3, r2
 80043aa:	d110      	bne.n	80043ce <HAL_RCCEx_EnableLSCO+0x86>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004428 <HAL_RCCEx_EnableLSCO+0xe0>)
 80043ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004428 <HAL_RCCEx_EnableLSCO+0xe0>)
 80043b2:	2180      	movs	r1, #128	@ 0x80
 80043b4:	0549      	lsls	r1, r1, #21
 80043b6:	430a      	orrs	r2, r1
 80043b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80043ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004428 <HAL_RCCEx_EnableLSCO+0xe0>)
 80043bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043be:	2380      	movs	r3, #128	@ 0x80
 80043c0:	055b      	lsls	r3, r3, #21
 80043c2:	4013      	ands	r3, r2
 80043c4:	60bb      	str	r3, [r7, #8]
 80043c6:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 80043c8:	193b      	adds	r3, r7, r4
 80043ca:	2201      	movs	r2, #1
 80043cc:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ce:	4b17      	ldr	r3, [pc, #92]	@ (800442c <HAL_RCCEx_EnableLSCO+0xe4>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	2380      	movs	r3, #128	@ 0x80
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	4013      	ands	r3, r2
 80043d8:	d105      	bne.n	80043e6 <HAL_RCCEx_EnableLSCO+0x9e>
  {
    HAL_PWR_EnableBkUpAccess();
 80043da:	f7ff f939 	bl	8003650 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 80043de:	2326      	movs	r3, #38	@ 0x26
 80043e0:	18fb      	adds	r3, r7, r3
 80043e2:	2201      	movs	r2, #1
 80043e4:	701a      	strb	r2, [r3, #0]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 80043e6:	4b10      	ldr	r3, [pc, #64]	@ (8004428 <HAL_RCCEx_EnableLSCO+0xe0>)
 80043e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ea:	4a11      	ldr	r2, [pc, #68]	@ (8004430 <HAL_RCCEx_EnableLSCO+0xe8>)
 80043ec:	401a      	ands	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	431a      	orrs	r2, r3
 80043f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004428 <HAL_RCCEx_EnableLSCO+0xe0>)
 80043f4:	2180      	movs	r1, #128	@ 0x80
 80043f6:	0449      	lsls	r1, r1, #17
 80043f8:	430a      	orrs	r2, r1
 80043fa:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (backupchanged == SET)
 80043fc:	2326      	movs	r3, #38	@ 0x26
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d101      	bne.n	800440a <HAL_RCCEx_EnableLSCO+0xc2>
  {
    HAL_PWR_DisableBkUpAccess();
 8004406:	f7ff f931 	bl	800366c <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 800440a:	2327      	movs	r3, #39	@ 0x27
 800440c:	18fb      	adds	r3, r7, r3
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d105      	bne.n	8004420 <HAL_RCCEx_EnableLSCO+0xd8>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8004414:	4b04      	ldr	r3, [pc, #16]	@ (8004428 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004416:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004418:	4b03      	ldr	r3, [pc, #12]	@ (8004428 <HAL_RCCEx_EnableLSCO+0xe0>)
 800441a:	4906      	ldr	r1, [pc, #24]	@ (8004434 <HAL_RCCEx_EnableLSCO+0xec>)
 800441c:	400a      	ands	r2, r1
 800441e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8004420:	46c0      	nop			@ (mov r8, r8)
 8004422:	46bd      	mov	sp, r7
 8004424:	b00b      	add	sp, #44	@ 0x2c
 8004426:	bd90      	pop	{r4, r7, pc}
 8004428:	40021000 	.word	0x40021000
 800442c:	40007000 	.word	0x40007000
 8004430:	fcffffff 	.word	0xfcffffff
 8004434:	efffffff 	.word	0xefffffff

08004438 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004438:	b5b0      	push	{r4, r5, r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004440:	230f      	movs	r3, #15
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	2201      	movs	r2, #1
 8004446:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d100      	bne.n	8004450 <HAL_RTC_Init+0x18>
 800444e:	e08c      	b.n	800456a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2229      	movs	r2, #41	@ 0x29
 8004454:	5c9b      	ldrb	r3, [r3, r2]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10b      	bne.n	8004474 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2228      	movs	r2, #40	@ 0x28
 8004460:	2100      	movs	r1, #0
 8004462:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2288      	movs	r2, #136	@ 0x88
 8004468:	0212      	lsls	r2, r2, #8
 800446a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	0018      	movs	r0, r3
 8004470:	f7fd fdf4 	bl	800205c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2229      	movs	r2, #41	@ 0x29
 8004478:	2102      	movs	r1, #2
 800447a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	2210      	movs	r2, #16
 8004484:	4013      	ands	r3, r2
 8004486:	2b10      	cmp	r3, #16
 8004488:	d062      	beq.n	8004550 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	22ca      	movs	r2, #202	@ 0xca
 8004490:	625a      	str	r2, [r3, #36]	@ 0x24
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2253      	movs	r2, #83	@ 0x53
 8004498:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800449a:	250f      	movs	r5, #15
 800449c:	197c      	adds	r4, r7, r5
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	0018      	movs	r0, r3
 80044a2:	f000 fcb9 	bl	8004e18 <RTC_EnterInitMode>
 80044a6:	0003      	movs	r3, r0
 80044a8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80044aa:	0028      	movs	r0, r5
 80044ac:	183b      	adds	r3, r7, r0
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d12c      	bne.n	800450e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	492e      	ldr	r1, [pc, #184]	@ (8004578 <HAL_RTC_Init+0x140>)
 80044c0:	400a      	ands	r2, r1
 80044c2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6999      	ldr	r1, [r3, #24]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6912      	ldr	r2, [r2, #16]
 80044ea:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6919      	ldr	r1, [r3, #16]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	041a      	lsls	r2, r3, #16
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004500:	183c      	adds	r4, r7, r0
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	0018      	movs	r0, r3
 8004506:	f000 fcc9 	bl	8004e9c <RTC_ExitInitMode>
 800450a:	0003      	movs	r3, r0
 800450c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800450e:	230f      	movs	r3, #15
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d116      	bne.n	8004546 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	00d2      	lsls	r2, r2, #3
 8004524:	08d2      	lsrs	r2, r2, #3
 8004526:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6999      	ldr	r1, [r3, #24]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	22ff      	movs	r2, #255	@ 0xff
 800454c:	625a      	str	r2, [r3, #36]	@ 0x24
 800454e:	e003      	b.n	8004558 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004550:	230f      	movs	r3, #15
 8004552:	18fb      	adds	r3, r7, r3
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004558:	230f      	movs	r3, #15
 800455a:	18fb      	adds	r3, r7, r3
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d103      	bne.n	800456a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2229      	movs	r2, #41	@ 0x29
 8004566:	2101      	movs	r1, #1
 8004568:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800456a:	230f      	movs	r3, #15
 800456c:	18fb      	adds	r3, r7, r3
 800456e:	781b      	ldrb	r3, [r3, #0]
}
 8004570:	0018      	movs	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	b004      	add	sp, #16
 8004576:	bdb0      	pop	{r4, r5, r7, pc}
 8004578:	fb8fffbf 	.word	0xfb8fffbf

0800457c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800457c:	b5b0      	push	{r4, r5, r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2228      	movs	r2, #40	@ 0x28
 800458c:	5c9b      	ldrb	r3, [r3, r2]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_RTC_SetTime+0x1a>
 8004592:	2302      	movs	r3, #2
 8004594:	e092      	b.n	80046bc <HAL_RTC_SetTime+0x140>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2228      	movs	r2, #40	@ 0x28
 800459a:	2101      	movs	r1, #1
 800459c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2229      	movs	r2, #41	@ 0x29
 80045a2:	2102      	movs	r1, #2
 80045a4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	22ca      	movs	r2, #202	@ 0xca
 80045ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2253      	movs	r2, #83	@ 0x53
 80045b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80045b6:	2513      	movs	r5, #19
 80045b8:	197c      	adds	r4, r7, r5
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	0018      	movs	r0, r3
 80045be:	f000 fc2b 	bl	8004e18 <RTC_EnterInitMode>
 80045c2:	0003      	movs	r3, r0
 80045c4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80045c6:	197b      	adds	r3, r7, r5
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d162      	bne.n	8004694 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d125      	bne.n	8004620 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	2240      	movs	r2, #64	@ 0x40
 80045dc:	4013      	ands	r3, r2
 80045de:	d102      	bne.n	80045e6 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2200      	movs	r2, #0
 80045e4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	0018      	movs	r0, r3
 80045ec:	f000 fc9a 	bl	8004f24 <RTC_ByteToBcd2>
 80045f0:	0003      	movs	r3, r0
 80045f2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	785b      	ldrb	r3, [r3, #1]
 80045f8:	0018      	movs	r0, r3
 80045fa:	f000 fc93 	bl	8004f24 <RTC_ByteToBcd2>
 80045fe:	0003      	movs	r3, r0
 8004600:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004602:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	789b      	ldrb	r3, [r3, #2]
 8004608:	0018      	movs	r0, r3
 800460a:	f000 fc8b 	bl	8004f24 <RTC_ByteToBcd2>
 800460e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004610:	0022      	movs	r2, r4
 8004612:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	78db      	ldrb	r3, [r3, #3]
 8004618:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800461a:	4313      	orrs	r3, r2
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	e017      	b.n	8004650 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	2240      	movs	r2, #64	@ 0x40
 8004628:	4013      	ands	r3, r2
 800462a:	d102      	bne.n	8004632 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2200      	movs	r2, #0
 8004630:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	785b      	ldrb	r3, [r3, #1]
 800463c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800463e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004644:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	78db      	ldrb	r3, [r3, #3]
 800464a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	491b      	ldr	r1, [pc, #108]	@ (80046c4 <HAL_RTC_SetTime+0x148>)
 8004658:	400a      	ands	r2, r1
 800465a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699a      	ldr	r2, [r3, #24]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4918      	ldr	r1, [pc, #96]	@ (80046c8 <HAL_RTC_SetTime+0x14c>)
 8004668:	400a      	ands	r2, r1
 800466a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6999      	ldr	r1, [r3, #24]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	431a      	orrs	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004684:	2313      	movs	r3, #19
 8004686:	18fc      	adds	r4, r7, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	0018      	movs	r0, r3
 800468c:	f000 fc06 	bl	8004e9c <RTC_ExitInitMode>
 8004690:	0003      	movs	r3, r0
 8004692:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	22ff      	movs	r2, #255	@ 0xff
 800469a:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 800469c:	2313      	movs	r3, #19
 800469e:	18fb      	adds	r3, r7, r3
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d103      	bne.n	80046ae <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2229      	movs	r2, #41	@ 0x29
 80046aa:	2101      	movs	r1, #1
 80046ac:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2228      	movs	r2, #40	@ 0x28
 80046b2:	2100      	movs	r1, #0
 80046b4:	5499      	strb	r1, [r3, r2]

  return status;
 80046b6:	2313      	movs	r3, #19
 80046b8:	18fb      	adds	r3, r7, r3
 80046ba:	781b      	ldrb	r3, [r3, #0]
}
 80046bc:	0018      	movs	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	b006      	add	sp, #24
 80046c2:	bdb0      	pop	{r4, r5, r7, pc}
 80046c4:	007f7f7f 	.word	0x007f7f7f
 80046c8:	fffbffff 	.word	0xfffbffff

080046cc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	045b      	lsls	r3, r3, #17
 80046ea:	0c5a      	lsrs	r2, r3, #17
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a22      	ldr	r2, [pc, #136]	@ (8004780 <HAL_RTC_GetTime+0xb4>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	0c1b      	lsrs	r3, r3, #16
 8004700:	b2db      	uxtb	r3, r3
 8004702:	223f      	movs	r2, #63	@ 0x3f
 8004704:	4013      	ands	r3, r2
 8004706:	b2da      	uxtb	r2, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	0a1b      	lsrs	r3, r3, #8
 8004710:	b2db      	uxtb	r3, r3
 8004712:	227f      	movs	r2, #127	@ 0x7f
 8004714:	4013      	ands	r3, r2
 8004716:	b2da      	uxtb	r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	b2db      	uxtb	r3, r3
 8004720:	227f      	movs	r2, #127	@ 0x7f
 8004722:	4013      	ands	r3, r2
 8004724:	b2da      	uxtb	r2, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	0d9b      	lsrs	r3, r3, #22
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2201      	movs	r2, #1
 8004732:	4013      	ands	r3, r2
 8004734:	b2da      	uxtb	r2, r3
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d11a      	bne.n	8004776 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	0018      	movs	r0, r3
 8004746:	f000 fc15 	bl	8004f74 <RTC_Bcd2ToByte>
 800474a:	0003      	movs	r3, r0
 800474c:	001a      	movs	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	785b      	ldrb	r3, [r3, #1]
 8004756:	0018      	movs	r0, r3
 8004758:	f000 fc0c 	bl	8004f74 <RTC_Bcd2ToByte>
 800475c:	0003      	movs	r3, r0
 800475e:	001a      	movs	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	789b      	ldrb	r3, [r3, #2]
 8004768:	0018      	movs	r0, r3
 800476a:	f000 fc03 	bl	8004f74 <RTC_Bcd2ToByte>
 800476e:	0003      	movs	r3, r0
 8004770:	001a      	movs	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	0018      	movs	r0, r3
 800477a:	46bd      	mov	sp, r7
 800477c:	b006      	add	sp, #24
 800477e:	bd80      	pop	{r7, pc}
 8004780:	007f7f7f 	.word	0x007f7f7f

08004784 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004784:	b5b0      	push	{r4, r5, r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2228      	movs	r2, #40	@ 0x28
 8004794:	5c9b      	ldrb	r3, [r3, r2]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_RTC_SetDate+0x1a>
 800479a:	2302      	movs	r3, #2
 800479c:	e07e      	b.n	800489c <HAL_RTC_SetDate+0x118>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2228      	movs	r2, #40	@ 0x28
 80047a2:	2101      	movs	r1, #1
 80047a4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2229      	movs	r2, #41	@ 0x29
 80047aa:	2102      	movs	r1, #2
 80047ac:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10e      	bne.n	80047d2 <HAL_RTC_SetDate+0x4e>
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	785b      	ldrb	r3, [r3, #1]
 80047b8:	001a      	movs	r2, r3
 80047ba:	2310      	movs	r3, #16
 80047bc:	4013      	ands	r3, r2
 80047be:	d008      	beq.n	80047d2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	785b      	ldrb	r3, [r3, #1]
 80047c4:	2210      	movs	r2, #16
 80047c6:	4393      	bics	r3, r2
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	330a      	adds	r3, #10
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d11c      	bne.n	8004812 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	78db      	ldrb	r3, [r3, #3]
 80047dc:	0018      	movs	r0, r3
 80047de:	f000 fba1 	bl	8004f24 <RTC_ByteToBcd2>
 80047e2:	0003      	movs	r3, r0
 80047e4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	785b      	ldrb	r3, [r3, #1]
 80047ea:	0018      	movs	r0, r3
 80047ec:	f000 fb9a 	bl	8004f24 <RTC_ByteToBcd2>
 80047f0:	0003      	movs	r3, r0
 80047f2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80047f4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	789b      	ldrb	r3, [r3, #2]
 80047fa:	0018      	movs	r0, r3
 80047fc:	f000 fb92 	bl	8004f24 <RTC_ByteToBcd2>
 8004800:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004802:	0022      	movs	r2, r4
 8004804:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800480c:	4313      	orrs	r3, r2
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	e00e      	b.n	8004830 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	78db      	ldrb	r3, [r3, #3]
 8004816:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	785b      	ldrb	r3, [r3, #1]
 800481c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800481e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004824:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	22ca      	movs	r2, #202	@ 0xca
 8004836:	625a      	str	r2, [r3, #36]	@ 0x24
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2253      	movs	r2, #83	@ 0x53
 800483e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004840:	2513      	movs	r5, #19
 8004842:	197c      	adds	r4, r7, r5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	0018      	movs	r0, r3
 8004848:	f000 fae6 	bl	8004e18 <RTC_EnterInitMode>
 800484c:	0003      	movs	r3, r0
 800484e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004850:	0028      	movs	r0, r5
 8004852:	183b      	adds	r3, r7, r0
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10c      	bne.n	8004874 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4910      	ldr	r1, [pc, #64]	@ (80048a4 <HAL_RTC_SetDate+0x120>)
 8004862:	400a      	ands	r2, r1
 8004864:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004866:	183c      	adds	r4, r7, r0
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	0018      	movs	r0, r3
 800486c:	f000 fb16 	bl	8004e9c <RTC_ExitInitMode>
 8004870:	0003      	movs	r3, r0
 8004872:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	22ff      	movs	r2, #255	@ 0xff
 800487a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800487c:	2313      	movs	r3, #19
 800487e:	18fb      	adds	r3, r7, r3
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d103      	bne.n	800488e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2229      	movs	r2, #41	@ 0x29
 800488a:	2101      	movs	r1, #1
 800488c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2228      	movs	r2, #40	@ 0x28
 8004892:	2100      	movs	r1, #0
 8004894:	5499      	strb	r1, [r3, r2]

  return status;
 8004896:	2313      	movs	r3, #19
 8004898:	18fb      	adds	r3, r7, r3
 800489a:	781b      	ldrb	r3, [r3, #0]
}
 800489c:	0018      	movs	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	b006      	add	sp, #24
 80048a2:	bdb0      	pop	{r4, r5, r7, pc}
 80048a4:	00ffff3f 	.word	0x00ffff3f

080048a8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	4a21      	ldr	r2, [pc, #132]	@ (8004940 <HAL_RTC_GetDate+0x98>)
 80048bc:	4013      	ands	r3, r2
 80048be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	0c1b      	lsrs	r3, r3, #16
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	0a1b      	lsrs	r3, r3, #8
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	221f      	movs	r2, #31
 80048d2:	4013      	ands	r3, r2
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	223f      	movs	r2, #63	@ 0x3f
 80048e0:	4013      	ands	r3, r2
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	0b5b      	lsrs	r3, r3, #13
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2207      	movs	r2, #7
 80048f0:	4013      	ands	r3, r2
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d11a      	bne.n	8004934 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	78db      	ldrb	r3, [r3, #3]
 8004902:	0018      	movs	r0, r3
 8004904:	f000 fb36 	bl	8004f74 <RTC_Bcd2ToByte>
 8004908:	0003      	movs	r3, r0
 800490a:	001a      	movs	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	785b      	ldrb	r3, [r3, #1]
 8004914:	0018      	movs	r0, r3
 8004916:	f000 fb2d 	bl	8004f74 <RTC_Bcd2ToByte>
 800491a:	0003      	movs	r3, r0
 800491c:	001a      	movs	r2, r3
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	789b      	ldrb	r3, [r3, #2]
 8004926:	0018      	movs	r0, r3
 8004928:	f000 fb24 	bl	8004f74 <RTC_Bcd2ToByte>
 800492c:	0003      	movs	r3, r0
 800492e:	001a      	movs	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	0018      	movs	r0, r3
 8004938:	46bd      	mov	sp, r7
 800493a:	b006      	add	sp, #24
 800493c:	bd80      	pop	{r7, pc}
 800493e:	46c0      	nop			@ (mov r8, r8)
 8004940:	00ffff3f 	.word	0x00ffff3f

08004944 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004944:	b590      	push	{r4, r7, lr}
 8004946:	b089      	sub	sp, #36	@ 0x24
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2228      	movs	r2, #40	@ 0x28
 8004954:	5c9b      	ldrb	r3, [r3, r2]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_RTC_SetAlarm_IT+0x1a>
 800495a:	2302      	movs	r3, #2
 800495c:	e127      	b.n	8004bae <HAL_RTC_SetAlarm_IT+0x26a>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2228      	movs	r2, #40	@ 0x28
 8004962:	2101      	movs	r1, #1
 8004964:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2229      	movs	r2, #41	@ 0x29
 800496a:	2102      	movs	r1, #2
 800496c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d136      	bne.n	80049e2 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	2240      	movs	r2, #64	@ 0x40
 800497c:	4013      	ands	r3, r2
 800497e:	d102      	bne.n	8004986 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2200      	movs	r2, #0
 8004984:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	0018      	movs	r0, r3
 800498c:	f000 faca 	bl	8004f24 <RTC_ByteToBcd2>
 8004990:	0003      	movs	r3, r0
 8004992:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	785b      	ldrb	r3, [r3, #1]
 8004998:	0018      	movs	r0, r3
 800499a:	f000 fac3 	bl	8004f24 <RTC_ByteToBcd2>
 800499e:	0003      	movs	r3, r0
 80049a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80049a2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	789b      	ldrb	r3, [r3, #2]
 80049a8:	0018      	movs	r0, r3
 80049aa:	f000 fabb 	bl	8004f24 <RTC_ByteToBcd2>
 80049ae:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80049b0:	0022      	movs	r2, r4
 80049b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	78db      	ldrb	r3, [r3, #3]
 80049b8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80049ba:	431a      	orrs	r2, r3
 80049bc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2220      	movs	r2, #32
 80049c2:	5c9b      	ldrb	r3, [r3, r2]
 80049c4:	0018      	movs	r0, r3
 80049c6:	f000 faad 	bl	8004f24 <RTC_ByteToBcd2>
 80049ca:	0003      	movs	r3, r0
 80049cc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80049ce:	0022      	movs	r2, r4
 80049d0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80049d6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80049dc:	4313      	orrs	r3, r2
 80049de:	61fb      	str	r3, [r7, #28]
 80049e0:	e022      	b.n	8004a28 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	2240      	movs	r2, #64	@ 0x40
 80049ea:	4013      	ands	r3, r2
 80049ec:	d102      	bne.n	80049f4 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2200      	movs	r2, #0
 80049f2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	785b      	ldrb	r3, [r3, #1]
 80049fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a00:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a06:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	78db      	ldrb	r3, [r3, #3]
 8004a0c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a0e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2120      	movs	r1, #32
 8004a14:	5c5b      	ldrb	r3, [r3, r1]
 8004a16:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a18:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a1e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a24:	4313      	orrs	r3, r2
 8004a26:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	22ca      	movs	r2, #202	@ 0xca
 8004a3a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2253      	movs	r2, #83	@ 0x53
 8004a42:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a48:	2380      	movs	r3, #128	@ 0x80
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d14c      	bne.n	8004aea <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4957      	ldr	r1, [pc, #348]	@ (8004bb8 <HAL_RTC_SetAlarm_IT+0x274>)
 8004a5c:	400a      	ands	r2, r1
 8004a5e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004a70:	f7fd fcd4 	bl	800241c <HAL_GetTick>
 8004a74:	0003      	movs	r3, r0
 8004a76:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004a78:	e016      	b.n	8004aa8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a7a:	f7fd fccf 	bl	800241c <HAL_GetTick>
 8004a7e:	0002      	movs	r2, r0
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	1ad2      	subs	r2, r2, r3
 8004a84:	23fa      	movs	r3, #250	@ 0xfa
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d90d      	bls.n	8004aa8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	22ff      	movs	r2, #255	@ 0xff
 8004a92:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2229      	movs	r2, #41	@ 0x29
 8004a98:	2103      	movs	r1, #3
 8004a9a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2228      	movs	r2, #40	@ 0x28
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e082      	b.n	8004bae <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	d0e2      	beq.n	8004a7a <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	69fa      	ldr	r2, [r7, #28]
 8004aba:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2180      	movs	r1, #128	@ 0x80
 8004ad0:	0049      	lsls	r1, r1, #1
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	699a      	ldr	r2, [r3, #24]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2180      	movs	r1, #128	@ 0x80
 8004ae2:	0149      	lsls	r1, r1, #5
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	619a      	str	r2, [r3, #24]
 8004ae8:	e04b      	b.n	8004b82 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699a      	ldr	r2, [r3, #24]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4931      	ldr	r1, [pc, #196]	@ (8004bbc <HAL_RTC_SetAlarm_IT+0x278>)
 8004af6:	400a      	ands	r2, r1
 8004af8:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2102      	movs	r1, #2
 8004b06:	430a      	orrs	r2, r1
 8004b08:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004b0a:	f7fd fc87 	bl	800241c <HAL_GetTick>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004b12:	e016      	b.n	8004b42 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004b14:	f7fd fc82 	bl	800241c <HAL_GetTick>
 8004b18:	0002      	movs	r2, r0
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	1ad2      	subs	r2, r2, r3
 8004b1e:	23fa      	movs	r3, #250	@ 0xfa
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d90d      	bls.n	8004b42 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	22ff      	movs	r2, #255	@ 0xff
 8004b2c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2229      	movs	r2, #41	@ 0x29
 8004b32:	2103      	movs	r1, #3
 8004b34:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2228      	movs	r2, #40	@ 0x28
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e035      	b.n	8004bae <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d0e2      	beq.n	8004b14 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69fa      	ldr	r2, [r7, #28]
 8004b54:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699a      	ldr	r2, [r3, #24]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2180      	movs	r1, #128	@ 0x80
 8004b6a:	0089      	lsls	r1, r1, #2
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2180      	movs	r1, #128	@ 0x80
 8004b7c:	0189      	lsls	r1, r1, #6
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004b82:	4a0f      	ldr	r2, [pc, #60]	@ (8004bc0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004b84:	2380      	movs	r3, #128	@ 0x80
 8004b86:	58d3      	ldr	r3, [r2, r3]
 8004b88:	490d      	ldr	r1, [pc, #52]	@ (8004bc0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004b8a:	2280      	movs	r2, #128	@ 0x80
 8004b8c:	0312      	lsls	r2, r2, #12
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	2280      	movs	r2, #128	@ 0x80
 8004b92:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	22ff      	movs	r2, #255	@ 0xff
 8004b9a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2229      	movs	r2, #41	@ 0x29
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2228      	movs	r2, #40	@ 0x28
 8004ba8:	2100      	movs	r1, #0
 8004baa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	0018      	movs	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	b009      	add	sp, #36	@ 0x24
 8004bb4:	bd90      	pop	{r4, r7, pc}
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	fffffeff 	.word	0xfffffeff
 8004bbc:	fffffdff 	.word	0xfffffdff
 8004bc0:	40021800 	.word	0x40021800

08004bc4 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	2380      	movs	r3, #128	@ 0x80
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d144      	bne.n	8004c66 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2280      	movs	r2, #128	@ 0x80
 8004be0:	0052      	lsls	r2, r2, #1
 8004be2:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bea:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf2:	045b      	lsls	r3, r3, #17
 8004bf4:	0c5b      	lsrs	r3, r3, #17
 8004bf6:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	0c1b      	lsrs	r3, r3, #16
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	223f      	movs	r2, #63	@ 0x3f
 8004c00:	4013      	ands	r3, r2
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	0a1b      	lsrs	r3, r3, #8
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	227f      	movs	r2, #127	@ 0x7f
 8004c10:	4013      	ands	r3, r2
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	227f      	movs	r2, #127	@ 0x7f
 8004c1e:	4013      	ands	r3, r2
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	0d9b      	lsrs	r3, r3, #22
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	4013      	ands	r3, r2
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	0e1b      	lsrs	r3, r3, #24
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	223f      	movs	r2, #63	@ 0x3f
 8004c44:	4013      	ands	r3, r2
 8004c46:	b2d9      	uxtb	r1, r3
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	2380      	movs	r3, #128	@ 0x80
 8004c52:	05db      	lsls	r3, r3, #23
 8004c54:	401a      	ands	r2, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	4a3b      	ldr	r2, [pc, #236]	@ (8004d4c <HAL_RTC_GetAlarm+0x188>)
 8004c5e:	401a      	ands	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	615a      	str	r2, [r3, #20]
 8004c64:	e043      	b.n	8004cee <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2280      	movs	r2, #128	@ 0x80
 8004c6a:	0092      	lsls	r2, r2, #2
 8004c6c:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c74:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c7c:	045b      	lsls	r3, r3, #17
 8004c7e:	0c5b      	lsrs	r3, r3, #17
 8004c80:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	0c1b      	lsrs	r3, r3, #16
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	223f      	movs	r2, #63	@ 0x3f
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	0a1b      	lsrs	r3, r3, #8
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	227f      	movs	r2, #127	@ 0x7f
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	227f      	movs	r2, #127	@ 0x7f
 8004ca8:	4013      	ands	r3, r2
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	0d9b      	lsrs	r3, r3, #22
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	4013      	ands	r3, r2
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	0e1b      	lsrs	r3, r3, #24
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	223f      	movs	r2, #63	@ 0x3f
 8004cce:	4013      	ands	r3, r2
 8004cd0:	b2d9      	uxtb	r1, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	2380      	movs	r3, #128	@ 0x80
 8004cdc:	05db      	lsls	r3, r3, #23
 8004cde:	401a      	ands	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	4a19      	ldr	r2, [pc, #100]	@ (8004d4c <HAL_RTC_GetAlarm+0x188>)
 8004ce8:	401a      	ands	r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d125      	bne.n	8004d40 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f000 f93b 	bl	8004f74 <RTC_Bcd2ToByte>
 8004cfe:	0003      	movs	r3, r0
 8004d00:	001a      	movs	r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	785b      	ldrb	r3, [r3, #1]
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f000 f932 	bl	8004f74 <RTC_Bcd2ToByte>
 8004d10:	0003      	movs	r3, r0
 8004d12:	001a      	movs	r2, r3
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	789b      	ldrb	r3, [r3, #2]
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f000 f929 	bl	8004f74 <RTC_Bcd2ToByte>
 8004d22:	0003      	movs	r3, r0
 8004d24:	001a      	movs	r2, r3
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	5c9b      	ldrb	r3, [r3, r2]
 8004d30:	0018      	movs	r0, r3
 8004d32:	f000 f91f 	bl	8004f74 <RTC_Bcd2ToByte>
 8004d36:	0003      	movs	r3, r0
 8004d38:	0019      	movs	r1, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	0018      	movs	r0, r3
 8004d44:	46bd      	mov	sp, r7
 8004d46:	b006      	add	sp, #24
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	46c0      	nop			@ (mov r8, r8)
 8004d4c:	80808080 	.word	0x80808080

08004d50 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	2380      	movs	r3, #128	@ 0x80
 8004d60:	015b      	lsls	r3, r3, #5
 8004d62:	4013      	ands	r3, r2
 8004d64:	d011      	beq.n	8004d8a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d00b      	beq.n	8004d8a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	0018      	movs	r0, r3
 8004d86:	f7fc fa5b 	bl	8001240 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	699a      	ldr	r2, [r3, #24]
 8004d90:	2380      	movs	r3, #128	@ 0x80
 8004d92:	019b      	lsls	r3, r3, #6
 8004d94:	4013      	ands	r3, r2
 8004d96:	d011      	beq.n	8004dbc <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d9e:	2202      	movs	r2, #2
 8004da0:	4013      	ands	r3, r2
 8004da2:	d00b      	beq.n	8004dbc <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2102      	movs	r1, #2
 8004db0:	430a      	orrs	r2, r1
 8004db2:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	0018      	movs	r0, r3
 8004db8:	f000 f9a4 	bl	8005104 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2229      	movs	r2, #41	@ 0x29
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	5499      	strb	r1, [r3, r2]
}
 8004dc4:	46c0      	nop			@ (mov r8, r8)
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b002      	add	sp, #8
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a0e      	ldr	r2, [pc, #56]	@ (8004e14 <HAL_RTC_WaitForSynchro+0x48>)
 8004dda:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004ddc:	f7fd fb1e 	bl	800241c <HAL_GetTick>
 8004de0:	0003      	movs	r3, r0
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004de4:	e00a      	b.n	8004dfc <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004de6:	f7fd fb19 	bl	800241c <HAL_GetTick>
 8004dea:	0002      	movs	r2, r0
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1ad2      	subs	r2, r2, r3
 8004df0:	23fa      	movs	r3, #250	@ 0xfa
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d901      	bls.n	8004dfc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e006      	b.n	8004e0a <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	2220      	movs	r2, #32
 8004e04:	4013      	ands	r3, r2
 8004e06:	d0ee      	beq.n	8004de6 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	b004      	add	sp, #16
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	46c0      	nop			@ (mov r8, r8)
 8004e14:	0001005f 	.word	0x0001005f

08004e18 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004e20:	230f      	movs	r3, #15
 8004e22:	18fb      	adds	r3, r7, r3
 8004e24:	2200      	movs	r2, #0
 8004e26:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	2240      	movs	r2, #64	@ 0x40
 8004e30:	4013      	ands	r3, r2
 8004e32:	d12c      	bne.n	8004e8e <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2180      	movs	r1, #128	@ 0x80
 8004e40:	430a      	orrs	r2, r1
 8004e42:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004e44:	f7fd faea 	bl	800241c <HAL_GetTick>
 8004e48:	0003      	movs	r3, r0
 8004e4a:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004e4c:	e014      	b.n	8004e78 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e4e:	f7fd fae5 	bl	800241c <HAL_GetTick>
 8004e52:	0002      	movs	r2, r0
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	1ad2      	subs	r2, r2, r3
 8004e58:	200f      	movs	r0, #15
 8004e5a:	183b      	adds	r3, r7, r0
 8004e5c:	1839      	adds	r1, r7, r0
 8004e5e:	7809      	ldrb	r1, [r1, #0]
 8004e60:	7019      	strb	r1, [r3, #0]
 8004e62:	23fa      	movs	r3, #250	@ 0xfa
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d906      	bls.n	8004e78 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004e6a:	183b      	adds	r3, r7, r0
 8004e6c:	2203      	movs	r2, #3
 8004e6e:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2229      	movs	r2, #41	@ 0x29
 8004e74:	2103      	movs	r1, #3
 8004e76:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	2240      	movs	r2, #64	@ 0x40
 8004e80:	4013      	ands	r3, r2
 8004e82:	d104      	bne.n	8004e8e <RTC_EnterInitMode+0x76>
 8004e84:	230f      	movs	r3, #15
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d1df      	bne.n	8004e4e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004e8e:	230f      	movs	r3, #15
 8004e90:	18fb      	adds	r3, r7, r3
 8004e92:	781b      	ldrb	r3, [r3, #0]
}
 8004e94:	0018      	movs	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b004      	add	sp, #16
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e9c:	b590      	push	{r4, r7, lr}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea4:	240f      	movs	r4, #15
 8004ea6:	193b      	adds	r3, r7, r4
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004eac:	4b1c      	ldr	r3, [pc, #112]	@ (8004f20 <RTC_ExitInitMode+0x84>)
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f20 <RTC_ExitInitMode+0x84>)
 8004eb2:	2180      	movs	r1, #128	@ 0x80
 8004eb4:	438a      	bics	r2, r1
 8004eb6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004eb8:	4b19      	ldr	r3, [pc, #100]	@ (8004f20 <RTC_ExitInitMode+0x84>)
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	d10d      	bne.n	8004ede <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f7ff ff81 	bl	8004dcc <HAL_RTC_WaitForSynchro>
 8004eca:	1e03      	subs	r3, r0, #0
 8004ecc:	d021      	beq.n	8004f12 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2229      	movs	r2, #41	@ 0x29
 8004ed2:	2103      	movs	r1, #3
 8004ed4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004ed6:	193b      	adds	r3, r7, r4
 8004ed8:	2203      	movs	r2, #3
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	e019      	b.n	8004f12 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004ede:	4b10      	ldr	r3, [pc, #64]	@ (8004f20 <RTC_ExitInitMode+0x84>)
 8004ee0:	699a      	ldr	r2, [r3, #24]
 8004ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8004f20 <RTC_ExitInitMode+0x84>)
 8004ee4:	2120      	movs	r1, #32
 8004ee6:	438a      	bics	r2, r1
 8004ee8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	0018      	movs	r0, r3
 8004eee:	f7ff ff6d 	bl	8004dcc <HAL_RTC_WaitForSynchro>
 8004ef2:	1e03      	subs	r3, r0, #0
 8004ef4:	d007      	beq.n	8004f06 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2229      	movs	r2, #41	@ 0x29
 8004efa:	2103      	movs	r1, #3
 8004efc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004efe:	230f      	movs	r3, #15
 8004f00:	18fb      	adds	r3, r7, r3
 8004f02:	2203      	movs	r2, #3
 8004f04:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f06:	4b06      	ldr	r3, [pc, #24]	@ (8004f20 <RTC_ExitInitMode+0x84>)
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <RTC_ExitInitMode+0x84>)
 8004f0c:	2120      	movs	r1, #32
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004f12:	230f      	movs	r3, #15
 8004f14:	18fb      	adds	r3, r7, r3
 8004f16:	781b      	ldrb	r3, [r3, #0]
}
 8004f18:	0018      	movs	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b005      	add	sp, #20
 8004f1e:	bd90      	pop	{r4, r7, pc}
 8004f20:	40002800 	.word	0x40002800

08004f24 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	0002      	movs	r2, r0
 8004f2c:	1dfb      	adds	r3, r7, #7
 8004f2e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004f34:	230b      	movs	r3, #11
 8004f36:	18fb      	adds	r3, r7, r3
 8004f38:	1dfa      	adds	r2, r7, #7
 8004f3a:	7812      	ldrb	r2, [r2, #0]
 8004f3c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004f3e:	e008      	b.n	8004f52 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3301      	adds	r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004f46:	220b      	movs	r2, #11
 8004f48:	18bb      	adds	r3, r7, r2
 8004f4a:	18ba      	adds	r2, r7, r2
 8004f4c:	7812      	ldrb	r2, [r2, #0]
 8004f4e:	3a0a      	subs	r2, #10
 8004f50:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004f52:	210b      	movs	r1, #11
 8004f54:	187b      	adds	r3, r7, r1
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	2b09      	cmp	r3, #9
 8004f5a:	d8f1      	bhi.n	8004f40 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	011b      	lsls	r3, r3, #4
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	187b      	adds	r3, r7, r1
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	b2db      	uxtb	r3, r3
}
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b004      	add	sp, #16
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	0002      	movs	r2, r0
 8004f7c:	1dfb      	adds	r3, r7, #7
 8004f7e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004f80:	1dfb      	adds	r3, r7, #7
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	091b      	lsrs	r3, r3, #4
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	001a      	movs	r2, r3
 8004f8a:	0013      	movs	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	189b      	adds	r3, r3, r2
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	1dfb      	adds	r3, r7, #7
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	210f      	movs	r1, #15
 8004f9e:	400b      	ands	r3, r1
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	18d3      	adds	r3, r2, r3
 8004fa4:	b2db      	uxtb	r3, r3
}
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	b004      	add	sp, #16
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b086      	sub	sp, #24
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	607a      	str	r2, [r7, #4]
 8004fba:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2228      	movs	r2, #40	@ 0x28
 8004fc0:	5c9b      	ldrb	r3, [r3, r2]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_RTCEx_SetSmoothCalib+0x1c>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e04f      	b.n	800506a <HAL_RTCEx_SetSmoothCalib+0xbc>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2228      	movs	r2, #40	@ 0x28
 8004fce:	2101      	movs	r1, #1
 8004fd0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2229      	movs	r2, #41	@ 0x29
 8004fd6:	2102      	movs	r1, #2
 8004fd8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	22ca      	movs	r2, #202	@ 0xca
 8004fe0:	625a      	str	r2, [r3, #36]	@ 0x24
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2253      	movs	r2, #83	@ 0x53
 8004fe8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	2380      	movs	r3, #128	@ 0x80
 8004ff2:	025b      	lsls	r3, r3, #9
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d022      	beq.n	800503e <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8004ff8:	f7fd fa10 	bl	800241c <HAL_GetTick>
 8004ffc:	0003      	movs	r3, r0
 8004ffe:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8005000:	e016      	b.n	8005030 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005002:	f7fd fa0b 	bl	800241c <HAL_GetTick>
 8005006:	0002      	movs	r2, r0
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	1ad2      	subs	r2, r2, r3
 800500c:	23fa      	movs	r3, #250	@ 0xfa
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	429a      	cmp	r2, r3
 8005012:	d90d      	bls.n	8005030 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	22ff      	movs	r2, #255	@ 0xff
 800501a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2229      	movs	r2, #41	@ 0x29
 8005020:	2103      	movs	r1, #3
 8005022:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2228      	movs	r2, #40	@ 0x28
 8005028:	2100      	movs	r1, #0
 800502a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e01c      	b.n	800506a <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	2380      	movs	r3, #128	@ 0x80
 8005038:	025b      	lsls	r3, r3, #9
 800503a:	4013      	ands	r3, r2
 800503c:	d1e1      	bne.n	8005002 <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	431a      	orrs	r2, r3
 8005044:	0011      	movs	r1, r2
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	22ff      	movs	r2, #255	@ 0xff
 8005056:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2229      	movs	r2, #41	@ 0x29
 800505c:	2101      	movs	r1, #1
 800505e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2228      	movs	r2, #40	@ 0x28
 8005064:	2100      	movs	r1, #0
 8005066:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	0018      	movs	r0, r3
 800506c:	46bd      	mov	sp, r7
 800506e:	b006      	add	sp, #24
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2228      	movs	r2, #40	@ 0x28
 8005082:	5c9b      	ldrb	r3, [r3, r2]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d101      	bne.n	800508c <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8005088:	2302      	movs	r3, #2
 800508a:	e035      	b.n	80050f8 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2228      	movs	r2, #40	@ 0x28
 8005090:	2101      	movs	r1, #1
 8005092:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2229      	movs	r2, #41	@ 0x29
 8005098:	2102      	movs	r1, #2
 800509a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	22ca      	movs	r2, #202	@ 0xca
 80050a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2253      	movs	r2, #83	@ 0x53
 80050aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4912      	ldr	r1, [pc, #72]	@ (8005100 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 80050b8:	400a      	ands	r2, r1
 80050ba:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6999      	ldr	r1, [r3, #24]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	699a      	ldr	r2, [r3, #24]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2180      	movs	r1, #128	@ 0x80
 80050d8:	0409      	lsls	r1, r1, #16
 80050da:	430a      	orrs	r2, r1
 80050dc:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	22ff      	movs	r2, #255	@ 0xff
 80050e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2229      	movs	r2, #41	@ 0x29
 80050ea:	2101      	movs	r1, #1
 80050ec:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2228      	movs	r2, #40	@ 0x28
 80050f2:	2100      	movs	r1, #0
 80050f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	0018      	movs	r0, r3
 80050fa:	46bd      	mov	sp, r7
 80050fc:	b002      	add	sp, #8
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	fff7ffff 	.word	0xfff7ffff

08005104 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800510c:	46c0      	nop			@ (mov r8, r8)
 800510e:	46bd      	mov	sp, r7
 8005110:	b002      	add	sp, #8
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	001a      	movs	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	18d3      	adds	r3, r2, r3
 800512c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	3301      	adds	r3, #1
 8005132:	33ff      	adds	r3, #255	@ 0xff
 8005134:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	18d3      	adds	r3, r2, r3
 800513e:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	601a      	str	r2, [r3, #0]
}
 8005146:	46c0      	nop			@ (mov r8, r8)
 8005148:	46bd      	mov	sp, r7
 800514a:	b006      	add	sp, #24
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	001a      	movs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	18d3      	adds	r3, r2, r3
 8005164:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3301      	adds	r3, #1
 800516a:	33ff      	adds	r3, #255	@ 0xff
 800516c:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	18d3      	adds	r3, r2, r3
 8005176:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	681b      	ldr	r3, [r3, #0]
}
 800517c:	0018      	movs	r0, r3
 800517e:	46bd      	mov	sp, r7
 8005180:	b004      	add	sp, #16
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e04a      	b.n	800522c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	223d      	movs	r2, #61	@ 0x3d
 800519a:	5c9b      	ldrb	r3, [r3, r2]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d107      	bne.n	80051b2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	223c      	movs	r2, #60	@ 0x3c
 80051a6:	2100      	movs	r1, #0
 80051a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f7fc ffb7 	bl	8002120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	223d      	movs	r2, #61	@ 0x3d
 80051b6:	2102      	movs	r1, #2
 80051b8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3304      	adds	r3, #4
 80051c2:	0019      	movs	r1, r3
 80051c4:	0010      	movs	r0, r2
 80051c6:	f000 fc87 	bl	8005ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2248      	movs	r2, #72	@ 0x48
 80051ce:	2101      	movs	r1, #1
 80051d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	223e      	movs	r2, #62	@ 0x3e
 80051d6:	2101      	movs	r1, #1
 80051d8:	5499      	strb	r1, [r3, r2]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	223f      	movs	r2, #63	@ 0x3f
 80051de:	2101      	movs	r1, #1
 80051e0:	5499      	strb	r1, [r3, r2]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2240      	movs	r2, #64	@ 0x40
 80051e6:	2101      	movs	r1, #1
 80051e8:	5499      	strb	r1, [r3, r2]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2241      	movs	r2, #65	@ 0x41
 80051ee:	2101      	movs	r1, #1
 80051f0:	5499      	strb	r1, [r3, r2]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2242      	movs	r2, #66	@ 0x42
 80051f6:	2101      	movs	r1, #1
 80051f8:	5499      	strb	r1, [r3, r2]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2243      	movs	r2, #67	@ 0x43
 80051fe:	2101      	movs	r1, #1
 8005200:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2244      	movs	r2, #68	@ 0x44
 8005206:	2101      	movs	r1, #1
 8005208:	5499      	strb	r1, [r3, r2]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2245      	movs	r2, #69	@ 0x45
 800520e:	2101      	movs	r1, #1
 8005210:	5499      	strb	r1, [r3, r2]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2246      	movs	r2, #70	@ 0x46
 8005216:	2101      	movs	r1, #1
 8005218:	5499      	strb	r1, [r3, r2]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2247      	movs	r2, #71	@ 0x47
 800521e:	2101      	movs	r1, #1
 8005220:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	223d      	movs	r2, #61	@ 0x3d
 8005226:	2101      	movs	r1, #1
 8005228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	0018      	movs	r0, r3
 800522e:	46bd      	mov	sp, r7
 8005230:	b002      	add	sp, #8
 8005232:	bd80      	pop	{r7, pc}

08005234 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	223d      	movs	r2, #61	@ 0x3d
 8005240:	5c9b      	ldrb	r3, [r3, r2]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b01      	cmp	r3, #1
 8005246:	d001      	beq.n	800524c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e035      	b.n	80052b8 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	223d      	movs	r2, #61	@ 0x3d
 8005250:	2102      	movs	r1, #2
 8005252:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a19      	ldr	r2, [pc, #100]	@ (80052c0 <HAL_TIM_Base_Start+0x8c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00a      	beq.n	8005274 <HAL_TIM_Base_Start+0x40>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	2380      	movs	r3, #128	@ 0x80
 8005264:	05db      	lsls	r3, r3, #23
 8005266:	429a      	cmp	r2, r3
 8005268:	d004      	beq.n	8005274 <HAL_TIM_Base_Start+0x40>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a15      	ldr	r2, [pc, #84]	@ (80052c4 <HAL_TIM_Base_Start+0x90>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d116      	bne.n	80052a2 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	4a13      	ldr	r2, [pc, #76]	@ (80052c8 <HAL_TIM_Base_Start+0x94>)
 800527c:	4013      	ands	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b06      	cmp	r3, #6
 8005284:	d016      	beq.n	80052b4 <HAL_TIM_Base_Start+0x80>
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	2380      	movs	r3, #128	@ 0x80
 800528a:	025b      	lsls	r3, r3, #9
 800528c:	429a      	cmp	r2, r3
 800528e:	d011      	beq.n	80052b4 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2101      	movs	r1, #1
 800529c:	430a      	orrs	r2, r1
 800529e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a0:	e008      	b.n	80052b4 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2101      	movs	r1, #1
 80052ae:	430a      	orrs	r2, r1
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	e000      	b.n	80052b6 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	0018      	movs	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b004      	add	sp, #16
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40012c00 	.word	0x40012c00
 80052c4:	40000400 	.word	0x40000400
 80052c8:	00010007 	.word	0x00010007

080052cc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	4a0d      	ldr	r2, [pc, #52]	@ (8005310 <HAL_TIM_Base_Stop+0x44>)
 80052dc:	4013      	ands	r3, r2
 80052de:	d10d      	bne.n	80052fc <HAL_TIM_Base_Stop+0x30>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	4a0b      	ldr	r2, [pc, #44]	@ (8005314 <HAL_TIM_Base_Stop+0x48>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	d107      	bne.n	80052fc <HAL_TIM_Base_Stop+0x30>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2101      	movs	r1, #1
 80052f8:	438a      	bics	r2, r1
 80052fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	223d      	movs	r2, #61	@ 0x3d
 8005300:	2101      	movs	r1, #1
 8005302:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	0018      	movs	r0, r3
 8005308:	46bd      	mov	sp, r7
 800530a:	b002      	add	sp, #8
 800530c:	bd80      	pop	{r7, pc}
 800530e:	46c0      	nop			@ (mov r8, r8)
 8005310:	00001111 	.word	0x00001111
 8005314:	00000444 	.word	0x00000444

08005318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	223d      	movs	r2, #61	@ 0x3d
 8005324:	5c9b      	ldrb	r3, [r3, r2]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b01      	cmp	r3, #1
 800532a:	d001      	beq.n	8005330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e03d      	b.n	80053ac <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	223d      	movs	r2, #61	@ 0x3d
 8005334:	2102      	movs	r1, #2
 8005336:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2101      	movs	r1, #1
 8005344:	430a      	orrs	r2, r1
 8005346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a19      	ldr	r2, [pc, #100]	@ (80053b4 <HAL_TIM_Base_Start_IT+0x9c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00a      	beq.n	8005368 <HAL_TIM_Base_Start_IT+0x50>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	2380      	movs	r3, #128	@ 0x80
 8005358:	05db      	lsls	r3, r3, #23
 800535a:	429a      	cmp	r2, r3
 800535c:	d004      	beq.n	8005368 <HAL_TIM_Base_Start_IT+0x50>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a15      	ldr	r2, [pc, #84]	@ (80053b8 <HAL_TIM_Base_Start_IT+0xa0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d116      	bne.n	8005396 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	4a13      	ldr	r2, [pc, #76]	@ (80053bc <HAL_TIM_Base_Start_IT+0xa4>)
 8005370:	4013      	ands	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b06      	cmp	r3, #6
 8005378:	d016      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x90>
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	2380      	movs	r3, #128	@ 0x80
 800537e:	025b      	lsls	r3, r3, #9
 8005380:	429a      	cmp	r2, r3
 8005382:	d011      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2101      	movs	r1, #1
 8005390:	430a      	orrs	r2, r1
 8005392:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005394:	e008      	b.n	80053a8 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2101      	movs	r1, #1
 80053a2:	430a      	orrs	r2, r1
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	e000      	b.n	80053aa <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	0018      	movs	r0, r3
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b004      	add	sp, #16
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40012c00 	.word	0x40012c00
 80053b8:	40000400 	.word	0x40000400
 80053bc:	00010007 	.word	0x00010007

080053c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2101      	movs	r1, #1
 80053d4:	438a      	bics	r2, r1
 80053d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	4a0d      	ldr	r2, [pc, #52]	@ (8005414 <HAL_TIM_Base_Stop_IT+0x54>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	d10d      	bne.n	8005400 <HAL_TIM_Base_Stop_IT+0x40>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	4a0b      	ldr	r2, [pc, #44]	@ (8005418 <HAL_TIM_Base_Stop_IT+0x58>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	d107      	bne.n	8005400 <HAL_TIM_Base_Stop_IT+0x40>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2101      	movs	r1, #1
 80053fc:	438a      	bics	r2, r1
 80053fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	223d      	movs	r2, #61	@ 0x3d
 8005404:	2101      	movs	r1, #1
 8005406:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	0018      	movs	r0, r3
 800540c:	46bd      	mov	sp, r7
 800540e:	b002      	add	sp, #8
 8005410:	bd80      	pop	{r7, pc}
 8005412:	46c0      	nop			@ (mov r8, r8)
 8005414:	00001111 	.word	0x00001111
 8005418:	00000444 	.word	0x00000444

0800541c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e04a      	b.n	80054c4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	223d      	movs	r2, #61	@ 0x3d
 8005432:	5c9b      	ldrb	r3, [r3, r2]
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d107      	bne.n	800544a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	223c      	movs	r2, #60	@ 0x3c
 800543e:	2100      	movs	r1, #0
 8005440:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	0018      	movs	r0, r3
 8005446:	f7fc fe4f 	bl	80020e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	223d      	movs	r2, #61	@ 0x3d
 800544e:	2102      	movs	r1, #2
 8005450:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3304      	adds	r3, #4
 800545a:	0019      	movs	r1, r3
 800545c:	0010      	movs	r0, r2
 800545e:	f000 fb3b 	bl	8005ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2248      	movs	r2, #72	@ 0x48
 8005466:	2101      	movs	r1, #1
 8005468:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	223e      	movs	r2, #62	@ 0x3e
 800546e:	2101      	movs	r1, #1
 8005470:	5499      	strb	r1, [r3, r2]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	223f      	movs	r2, #63	@ 0x3f
 8005476:	2101      	movs	r1, #1
 8005478:	5499      	strb	r1, [r3, r2]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2240      	movs	r2, #64	@ 0x40
 800547e:	2101      	movs	r1, #1
 8005480:	5499      	strb	r1, [r3, r2]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2241      	movs	r2, #65	@ 0x41
 8005486:	2101      	movs	r1, #1
 8005488:	5499      	strb	r1, [r3, r2]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2242      	movs	r2, #66	@ 0x42
 800548e:	2101      	movs	r1, #1
 8005490:	5499      	strb	r1, [r3, r2]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2243      	movs	r2, #67	@ 0x43
 8005496:	2101      	movs	r1, #1
 8005498:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2244      	movs	r2, #68	@ 0x44
 800549e:	2101      	movs	r1, #1
 80054a0:	5499      	strb	r1, [r3, r2]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2245      	movs	r2, #69	@ 0x45
 80054a6:	2101      	movs	r1, #1
 80054a8:	5499      	strb	r1, [r3, r2]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2246      	movs	r2, #70	@ 0x46
 80054ae:	2101      	movs	r1, #1
 80054b0:	5499      	strb	r1, [r3, r2]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2247      	movs	r2, #71	@ 0x47
 80054b6:	2101      	movs	r1, #1
 80054b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	223d      	movs	r2, #61	@ 0x3d
 80054be:	2101      	movs	r1, #1
 80054c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	0018      	movs	r0, r3
 80054c6:	46bd      	mov	sp, r7
 80054c8:	b002      	add	sp, #8
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d108      	bne.n	80054ee <HAL_TIM_PWM_Start+0x22>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	223e      	movs	r2, #62	@ 0x3e
 80054e0:	5c9b      	ldrb	r3, [r3, r2]
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	1e5a      	subs	r2, r3, #1
 80054e8:	4193      	sbcs	r3, r2
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	e037      	b.n	800555e <HAL_TIM_PWM_Start+0x92>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d108      	bne.n	8005506 <HAL_TIM_PWM_Start+0x3a>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	223f      	movs	r2, #63	@ 0x3f
 80054f8:	5c9b      	ldrb	r3, [r3, r2]
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	3b01      	subs	r3, #1
 80054fe:	1e5a      	subs	r2, r3, #1
 8005500:	4193      	sbcs	r3, r2
 8005502:	b2db      	uxtb	r3, r3
 8005504:	e02b      	b.n	800555e <HAL_TIM_PWM_Start+0x92>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b08      	cmp	r3, #8
 800550a:	d108      	bne.n	800551e <HAL_TIM_PWM_Start+0x52>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2240      	movs	r2, #64	@ 0x40
 8005510:	5c9b      	ldrb	r3, [r3, r2]
 8005512:	b2db      	uxtb	r3, r3
 8005514:	3b01      	subs	r3, #1
 8005516:	1e5a      	subs	r2, r3, #1
 8005518:	4193      	sbcs	r3, r2
 800551a:	b2db      	uxtb	r3, r3
 800551c:	e01f      	b.n	800555e <HAL_TIM_PWM_Start+0x92>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b0c      	cmp	r3, #12
 8005522:	d108      	bne.n	8005536 <HAL_TIM_PWM_Start+0x6a>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2241      	movs	r2, #65	@ 0x41
 8005528:	5c9b      	ldrb	r3, [r3, r2]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	3b01      	subs	r3, #1
 800552e:	1e5a      	subs	r2, r3, #1
 8005530:	4193      	sbcs	r3, r2
 8005532:	b2db      	uxtb	r3, r3
 8005534:	e013      	b.n	800555e <HAL_TIM_PWM_Start+0x92>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b10      	cmp	r3, #16
 800553a:	d108      	bne.n	800554e <HAL_TIM_PWM_Start+0x82>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2242      	movs	r2, #66	@ 0x42
 8005540:	5c9b      	ldrb	r3, [r3, r2]
 8005542:	b2db      	uxtb	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	1e5a      	subs	r2, r3, #1
 8005548:	4193      	sbcs	r3, r2
 800554a:	b2db      	uxtb	r3, r3
 800554c:	e007      	b.n	800555e <HAL_TIM_PWM_Start+0x92>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2243      	movs	r2, #67	@ 0x43
 8005552:	5c9b      	ldrb	r3, [r3, r2]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	3b01      	subs	r3, #1
 8005558:	1e5a      	subs	r2, r3, #1
 800555a:	4193      	sbcs	r3, r2
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e081      	b.n	800566a <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d104      	bne.n	8005576 <HAL_TIM_PWM_Start+0xaa>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	223e      	movs	r2, #62	@ 0x3e
 8005570:	2102      	movs	r1, #2
 8005572:	5499      	strb	r1, [r3, r2]
 8005574:	e023      	b.n	80055be <HAL_TIM_PWM_Start+0xf2>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b04      	cmp	r3, #4
 800557a:	d104      	bne.n	8005586 <HAL_TIM_PWM_Start+0xba>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	223f      	movs	r2, #63	@ 0x3f
 8005580:	2102      	movs	r1, #2
 8005582:	5499      	strb	r1, [r3, r2]
 8005584:	e01b      	b.n	80055be <HAL_TIM_PWM_Start+0xf2>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b08      	cmp	r3, #8
 800558a:	d104      	bne.n	8005596 <HAL_TIM_PWM_Start+0xca>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2240      	movs	r2, #64	@ 0x40
 8005590:	2102      	movs	r1, #2
 8005592:	5499      	strb	r1, [r3, r2]
 8005594:	e013      	b.n	80055be <HAL_TIM_PWM_Start+0xf2>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b0c      	cmp	r3, #12
 800559a:	d104      	bne.n	80055a6 <HAL_TIM_PWM_Start+0xda>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2241      	movs	r2, #65	@ 0x41
 80055a0:	2102      	movs	r1, #2
 80055a2:	5499      	strb	r1, [r3, r2]
 80055a4:	e00b      	b.n	80055be <HAL_TIM_PWM_Start+0xf2>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b10      	cmp	r3, #16
 80055aa:	d104      	bne.n	80055b6 <HAL_TIM_PWM_Start+0xea>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2242      	movs	r2, #66	@ 0x42
 80055b0:	2102      	movs	r1, #2
 80055b2:	5499      	strb	r1, [r3, r2]
 80055b4:	e003      	b.n	80055be <HAL_TIM_PWM_Start+0xf2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2243      	movs	r2, #67	@ 0x43
 80055ba:	2102      	movs	r1, #2
 80055bc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6839      	ldr	r1, [r7, #0]
 80055c4:	2201      	movs	r2, #1
 80055c6:	0018      	movs	r0, r3
 80055c8:	f000 fda6 	bl	8006118 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a28      	ldr	r2, [pc, #160]	@ (8005674 <HAL_TIM_PWM_Start+0x1a8>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d009      	beq.n	80055ea <HAL_TIM_PWM_Start+0x11e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a27      	ldr	r2, [pc, #156]	@ (8005678 <HAL_TIM_PWM_Start+0x1ac>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d004      	beq.n	80055ea <HAL_TIM_PWM_Start+0x11e>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a25      	ldr	r2, [pc, #148]	@ (800567c <HAL_TIM_PWM_Start+0x1b0>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d101      	bne.n	80055ee <HAL_TIM_PWM_Start+0x122>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <HAL_TIM_PWM_Start+0x124>
 80055ee:	2300      	movs	r3, #0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d008      	beq.n	8005606 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2180      	movs	r1, #128	@ 0x80
 8005600:	0209      	lsls	r1, r1, #8
 8005602:	430a      	orrs	r2, r1
 8005604:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a1a      	ldr	r2, [pc, #104]	@ (8005674 <HAL_TIM_PWM_Start+0x1a8>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00a      	beq.n	8005626 <HAL_TIM_PWM_Start+0x15a>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	2380      	movs	r3, #128	@ 0x80
 8005616:	05db      	lsls	r3, r3, #23
 8005618:	429a      	cmp	r2, r3
 800561a:	d004      	beq.n	8005626 <HAL_TIM_PWM_Start+0x15a>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a17      	ldr	r2, [pc, #92]	@ (8005680 <HAL_TIM_PWM_Start+0x1b4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d116      	bne.n	8005654 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	4a15      	ldr	r2, [pc, #84]	@ (8005684 <HAL_TIM_PWM_Start+0x1b8>)
 800562e:	4013      	ands	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2b06      	cmp	r3, #6
 8005636:	d016      	beq.n	8005666 <HAL_TIM_PWM_Start+0x19a>
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	2380      	movs	r3, #128	@ 0x80
 800563c:	025b      	lsls	r3, r3, #9
 800563e:	429a      	cmp	r2, r3
 8005640:	d011      	beq.n	8005666 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2101      	movs	r1, #1
 800564e:	430a      	orrs	r2, r1
 8005650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005652:	e008      	b.n	8005666 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2101      	movs	r1, #1
 8005660:	430a      	orrs	r2, r1
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	e000      	b.n	8005668 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005666:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	0018      	movs	r0, r3
 800566c:	46bd      	mov	sp, r7
 800566e:	b004      	add	sp, #16
 8005670:	bd80      	pop	{r7, pc}
 8005672:	46c0      	nop			@ (mov r8, r8)
 8005674:	40012c00 	.word	0x40012c00
 8005678:	40014400 	.word	0x40014400
 800567c:	40014800 	.word	0x40014800
 8005680:	40000400 	.word	0x40000400
 8005684:	00010007 	.word	0x00010007

08005688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2202      	movs	r2, #2
 80056a4:	4013      	ands	r3, r2
 80056a6:	d021      	beq.n	80056ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2202      	movs	r2, #2
 80056ac:	4013      	ands	r3, r2
 80056ae:	d01d      	beq.n	80056ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2203      	movs	r2, #3
 80056b6:	4252      	negs	r2, r2
 80056b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	2203      	movs	r2, #3
 80056c8:	4013      	ands	r3, r2
 80056ca:	d004      	beq.n	80056d6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	0018      	movs	r0, r3
 80056d0:	f000 f9ea 	bl	8005aa8 <HAL_TIM_IC_CaptureCallback>
 80056d4:	e007      	b.n	80056e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	0018      	movs	r0, r3
 80056da:	f000 f9dd 	bl	8005a98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	0018      	movs	r0, r3
 80056e2:	f000 f9e9 	bl	8005ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2204      	movs	r2, #4
 80056f0:	4013      	ands	r3, r2
 80056f2:	d022      	beq.n	800573a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2204      	movs	r2, #4
 80056f8:	4013      	ands	r3, r2
 80056fa:	d01e      	beq.n	800573a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2205      	movs	r2, #5
 8005702:	4252      	negs	r2, r2
 8005704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2202      	movs	r2, #2
 800570a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699a      	ldr	r2, [r3, #24]
 8005712:	23c0      	movs	r3, #192	@ 0xc0
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4013      	ands	r3, r2
 8005718:	d004      	beq.n	8005724 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	0018      	movs	r0, r3
 800571e:	f000 f9c3 	bl	8005aa8 <HAL_TIM_IC_CaptureCallback>
 8005722:	e007      	b.n	8005734 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	0018      	movs	r0, r3
 8005728:	f000 f9b6 	bl	8005a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	0018      	movs	r0, r3
 8005730:	f000 f9c2 	bl	8005ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2208      	movs	r2, #8
 800573e:	4013      	ands	r3, r2
 8005740:	d021      	beq.n	8005786 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2208      	movs	r2, #8
 8005746:	4013      	ands	r3, r2
 8005748:	d01d      	beq.n	8005786 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2209      	movs	r2, #9
 8005750:	4252      	negs	r2, r2
 8005752:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2204      	movs	r2, #4
 8005758:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	2203      	movs	r2, #3
 8005762:	4013      	ands	r3, r2
 8005764:	d004      	beq.n	8005770 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	0018      	movs	r0, r3
 800576a:	f000 f99d 	bl	8005aa8 <HAL_TIM_IC_CaptureCallback>
 800576e:	e007      	b.n	8005780 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	0018      	movs	r0, r3
 8005774:	f000 f990 	bl	8005a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	0018      	movs	r0, r3
 800577c:	f000 f99c 	bl	8005ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2210      	movs	r2, #16
 800578a:	4013      	ands	r3, r2
 800578c:	d022      	beq.n	80057d4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2210      	movs	r2, #16
 8005792:	4013      	ands	r3, r2
 8005794:	d01e      	beq.n	80057d4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2211      	movs	r2, #17
 800579c:	4252      	negs	r2, r2
 800579e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2208      	movs	r2, #8
 80057a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69da      	ldr	r2, [r3, #28]
 80057ac:	23c0      	movs	r3, #192	@ 0xc0
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4013      	ands	r3, r2
 80057b2:	d004      	beq.n	80057be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	0018      	movs	r0, r3
 80057b8:	f000 f976 	bl	8005aa8 <HAL_TIM_IC_CaptureCallback>
 80057bc:	e007      	b.n	80057ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	0018      	movs	r0, r3
 80057c2:	f000 f969 	bl	8005a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	0018      	movs	r0, r3
 80057ca:	f000 f975 	bl	8005ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2201      	movs	r2, #1
 80057d8:	4013      	ands	r3, r2
 80057da:	d00c      	beq.n	80057f6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	4013      	ands	r3, r2
 80057e2:	d008      	beq.n	80057f6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2202      	movs	r2, #2
 80057ea:	4252      	negs	r2, r2
 80057ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	0018      	movs	r0, r3
 80057f2:	f7fb fe7d 	bl	80014f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2280      	movs	r2, #128	@ 0x80
 80057fa:	4013      	ands	r3, r2
 80057fc:	d104      	bne.n	8005808 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	2380      	movs	r3, #128	@ 0x80
 8005802:	019b      	lsls	r3, r3, #6
 8005804:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005806:	d00b      	beq.n	8005820 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2280      	movs	r2, #128	@ 0x80
 800580c:	4013      	ands	r3, r2
 800580e:	d007      	beq.n	8005820 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a1e      	ldr	r2, [pc, #120]	@ (8005890 <HAL_TIM_IRQHandler+0x208>)
 8005816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	0018      	movs	r0, r3
 800581c:	f000 fd10 	bl	8006240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	2380      	movs	r3, #128	@ 0x80
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	4013      	ands	r3, r2
 8005828:	d00b      	beq.n	8005842 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2280      	movs	r2, #128	@ 0x80
 800582e:	4013      	ands	r3, r2
 8005830:	d007      	beq.n	8005842 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a17      	ldr	r2, [pc, #92]	@ (8005894 <HAL_TIM_IRQHandler+0x20c>)
 8005838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	0018      	movs	r0, r3
 800583e:	f000 fd07 	bl	8006250 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2240      	movs	r2, #64	@ 0x40
 8005846:	4013      	ands	r3, r2
 8005848:	d00c      	beq.n	8005864 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2240      	movs	r2, #64	@ 0x40
 800584e:	4013      	ands	r3, r2
 8005850:	d008      	beq.n	8005864 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2241      	movs	r2, #65	@ 0x41
 8005858:	4252      	negs	r2, r2
 800585a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	0018      	movs	r0, r3
 8005860:	f000 f932 	bl	8005ac8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2220      	movs	r2, #32
 8005868:	4013      	ands	r3, r2
 800586a:	d00c      	beq.n	8005886 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2220      	movs	r2, #32
 8005870:	4013      	ands	r3, r2
 8005872:	d008      	beq.n	8005886 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2221      	movs	r2, #33	@ 0x21
 800587a:	4252      	negs	r2, r2
 800587c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	0018      	movs	r0, r3
 8005882:	f000 fcd5 	bl	8006230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005886:	46c0      	nop			@ (mov r8, r8)
 8005888:	46bd      	mov	sp, r7
 800588a:	b004      	add	sp, #16
 800588c:	bd80      	pop	{r7, pc}
 800588e:	46c0      	nop			@ (mov r8, r8)
 8005890:	ffffdf7f 	.word	0xffffdf7f
 8005894:	fffffeff 	.word	0xfffffeff

08005898 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058a4:	2317      	movs	r3, #23
 80058a6:	18fb      	adds	r3, r7, r3
 80058a8:	2200      	movs	r2, #0
 80058aa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	223c      	movs	r2, #60	@ 0x3c
 80058b0:	5c9b      	ldrb	r3, [r3, r2]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d101      	bne.n	80058ba <HAL_TIM_PWM_ConfigChannel+0x22>
 80058b6:	2302      	movs	r3, #2
 80058b8:	e0e5      	b.n	8005a86 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	223c      	movs	r2, #60	@ 0x3c
 80058be:	2101      	movs	r1, #1
 80058c0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b14      	cmp	r3, #20
 80058c6:	d900      	bls.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x32>
 80058c8:	e0d1      	b.n	8005a6e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	009a      	lsls	r2, r3, #2
 80058ce:	4b70      	ldr	r3, [pc, #448]	@ (8005a90 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80058d0:	18d3      	adds	r3, r2, r3
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	0011      	movs	r1, r2
 80058de:	0018      	movs	r0, r3
 80058e0:	f000 f97e 	bl	8005be0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699a      	ldr	r2, [r3, #24]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2108      	movs	r1, #8
 80058f0:	430a      	orrs	r2, r1
 80058f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699a      	ldr	r2, [r3, #24]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2104      	movs	r1, #4
 8005900:	438a      	bics	r2, r1
 8005902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6999      	ldr	r1, [r3, #24]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	691a      	ldr	r2, [r3, #16]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	619a      	str	r2, [r3, #24]
      break;
 8005916:	e0af      	b.n	8005a78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	0011      	movs	r1, r2
 8005920:	0018      	movs	r0, r3
 8005922:	f000 f9dd 	bl	8005ce0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	699a      	ldr	r2, [r3, #24]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2180      	movs	r1, #128	@ 0x80
 8005932:	0109      	lsls	r1, r1, #4
 8005934:	430a      	orrs	r2, r1
 8005936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699a      	ldr	r2, [r3, #24]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4954      	ldr	r1, [pc, #336]	@ (8005a94 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005944:	400a      	ands	r2, r1
 8005946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6999      	ldr	r1, [r3, #24]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	021a      	lsls	r2, r3, #8
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	619a      	str	r2, [r3, #24]
      break;
 800595c:	e08c      	b.n	8005a78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	0011      	movs	r1, r2
 8005966:	0018      	movs	r0, r3
 8005968:	f000 fa38 	bl	8005ddc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	69da      	ldr	r2, [r3, #28]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2108      	movs	r1, #8
 8005978:	430a      	orrs	r2, r1
 800597a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	69da      	ldr	r2, [r3, #28]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2104      	movs	r1, #4
 8005988:	438a      	bics	r2, r1
 800598a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69d9      	ldr	r1, [r3, #28]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	691a      	ldr	r2, [r3, #16]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	61da      	str	r2, [r3, #28]
      break;
 800599e:	e06b      	b.n	8005a78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	0011      	movs	r1, r2
 80059a8:	0018      	movs	r0, r3
 80059aa:	f000 fa99 	bl	8005ee0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69da      	ldr	r2, [r3, #28]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2180      	movs	r1, #128	@ 0x80
 80059ba:	0109      	lsls	r1, r1, #4
 80059bc:	430a      	orrs	r2, r1
 80059be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	69da      	ldr	r2, [r3, #28]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4932      	ldr	r1, [pc, #200]	@ (8005a94 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80059cc:	400a      	ands	r2, r1
 80059ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69d9      	ldr	r1, [r3, #28]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	021a      	lsls	r2, r3, #8
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	61da      	str	r2, [r3, #28]
      break;
 80059e4:	e048      	b.n	8005a78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	0011      	movs	r1, r2
 80059ee:	0018      	movs	r0, r3
 80059f0:	f000 fada 	bl	8005fa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2108      	movs	r1, #8
 8005a00:	430a      	orrs	r2, r1
 8005a02:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2104      	movs	r1, #4
 8005a10:	438a      	bics	r2, r1
 8005a12:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	691a      	ldr	r2, [r3, #16]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005a26:	e027      	b.n	8005a78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	0011      	movs	r1, r2
 8005a30:	0018      	movs	r0, r3
 8005a32:	f000 fb13 	bl	800605c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2180      	movs	r1, #128	@ 0x80
 8005a42:	0109      	lsls	r1, r1, #4
 8005a44:	430a      	orrs	r2, r1
 8005a46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4910      	ldr	r1, [pc, #64]	@ (8005a94 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005a54:	400a      	ands	r2, r1
 8005a56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	021a      	lsls	r2, r3, #8
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005a6c:	e004      	b.n	8005a78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005a6e:	2317      	movs	r3, #23
 8005a70:	18fb      	adds	r3, r7, r3
 8005a72:	2201      	movs	r2, #1
 8005a74:	701a      	strb	r2, [r3, #0]
      break;
 8005a76:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	223c      	movs	r2, #60	@ 0x3c
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	5499      	strb	r1, [r3, r2]

  return status;
 8005a80:	2317      	movs	r3, #23
 8005a82:	18fb      	adds	r3, r7, r3
 8005a84:	781b      	ldrb	r3, [r3, #0]
}
 8005a86:	0018      	movs	r0, r3
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	b006      	add	sp, #24
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	46c0      	nop			@ (mov r8, r8)
 8005a90:	0800635c 	.word	0x0800635c
 8005a94:	fffffbff 	.word	0xfffffbff

08005a98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aa0:	46c0      	nop			@ (mov r8, r8)
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	b002      	add	sp, #8
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ab0:	46c0      	nop			@ (mov r8, r8)
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	b002      	add	sp, #8
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ac0:	46c0      	nop			@ (mov r8, r8)
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	b002      	add	sp, #8
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ad0:	46c0      	nop			@ (mov r8, r8)
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	b002      	add	sp, #8
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a37      	ldr	r2, [pc, #220]	@ (8005bc8 <TIM_Base_SetConfig+0xf0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d008      	beq.n	8005b02 <TIM_Base_SetConfig+0x2a>
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	2380      	movs	r3, #128	@ 0x80
 8005af4:	05db      	lsls	r3, r3, #23
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d003      	beq.n	8005b02 <TIM_Base_SetConfig+0x2a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a33      	ldr	r2, [pc, #204]	@ (8005bcc <TIM_Base_SetConfig+0xf4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d108      	bne.n	8005b14 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2270      	movs	r2, #112	@ 0x70
 8005b06:	4393      	bics	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a2c      	ldr	r2, [pc, #176]	@ (8005bc8 <TIM_Base_SetConfig+0xf0>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d014      	beq.n	8005b46 <TIM_Base_SetConfig+0x6e>
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	2380      	movs	r3, #128	@ 0x80
 8005b20:	05db      	lsls	r3, r3, #23
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d00f      	beq.n	8005b46 <TIM_Base_SetConfig+0x6e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a28      	ldr	r2, [pc, #160]	@ (8005bcc <TIM_Base_SetConfig+0xf4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00b      	beq.n	8005b46 <TIM_Base_SetConfig+0x6e>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a27      	ldr	r2, [pc, #156]	@ (8005bd0 <TIM_Base_SetConfig+0xf8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d007      	beq.n	8005b46 <TIM_Base_SetConfig+0x6e>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a26      	ldr	r2, [pc, #152]	@ (8005bd4 <TIM_Base_SetConfig+0xfc>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d003      	beq.n	8005b46 <TIM_Base_SetConfig+0x6e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a25      	ldr	r2, [pc, #148]	@ (8005bd8 <TIM_Base_SetConfig+0x100>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d108      	bne.n	8005b58 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4a24      	ldr	r2, [pc, #144]	@ (8005bdc <TIM_Base_SetConfig+0x104>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2280      	movs	r2, #128	@ 0x80
 8005b5c:	4393      	bics	r3, r2
 8005b5e:	001a      	movs	r2, r3
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a11      	ldr	r2, [pc, #68]	@ (8005bc8 <TIM_Base_SetConfig+0xf0>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d007      	beq.n	8005b96 <TIM_Base_SetConfig+0xbe>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a12      	ldr	r2, [pc, #72]	@ (8005bd4 <TIM_Base_SetConfig+0xfc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d003      	beq.n	8005b96 <TIM_Base_SetConfig+0xbe>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a11      	ldr	r2, [pc, #68]	@ (8005bd8 <TIM_Base_SetConfig+0x100>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d103      	bne.n	8005b9e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	691a      	ldr	r2, [r3, #16]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	4013      	ands	r3, r2
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d106      	bne.n	8005bbe <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	4393      	bics	r3, r2
 8005bb8:	001a      	movs	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	611a      	str	r2, [r3, #16]
  }
}
 8005bbe:	46c0      	nop			@ (mov r8, r8)
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	b004      	add	sp, #16
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	46c0      	nop			@ (mov r8, r8)
 8005bc8:	40012c00 	.word	0x40012c00
 8005bcc:	40000400 	.word	0x40000400
 8005bd0:	40002000 	.word	0x40002000
 8005bd4:	40014400 	.word	0x40014400
 8005bd8:	40014800 	.word	0x40014800
 8005bdc:	fffffcff 	.word	0xfffffcff

08005be0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	4393      	bics	r3, r2
 8005bf8:	001a      	movs	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4a2e      	ldr	r2, [pc, #184]	@ (8005cc8 <TIM_OC1_SetConfig+0xe8>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2203      	movs	r2, #3
 8005c16:	4393      	bics	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2202      	movs	r2, #2
 8005c28:	4393      	bics	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a24      	ldr	r2, [pc, #144]	@ (8005ccc <TIM_OC1_SetConfig+0xec>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d007      	beq.n	8005c4e <TIM_OC1_SetConfig+0x6e>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a23      	ldr	r2, [pc, #140]	@ (8005cd0 <TIM_OC1_SetConfig+0xf0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d003      	beq.n	8005c4e <TIM_OC1_SetConfig+0x6e>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a22      	ldr	r2, [pc, #136]	@ (8005cd4 <TIM_OC1_SetConfig+0xf4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d10c      	bne.n	8005c68 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2208      	movs	r2, #8
 8005c52:	4393      	bics	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2204      	movs	r2, #4
 8005c64:	4393      	bics	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a18      	ldr	r2, [pc, #96]	@ (8005ccc <TIM_OC1_SetConfig+0xec>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d007      	beq.n	8005c80 <TIM_OC1_SetConfig+0xa0>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a17      	ldr	r2, [pc, #92]	@ (8005cd0 <TIM_OC1_SetConfig+0xf0>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_OC1_SetConfig+0xa0>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a16      	ldr	r2, [pc, #88]	@ (8005cd4 <TIM_OC1_SetConfig+0xf4>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d111      	bne.n	8005ca4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4a15      	ldr	r2, [pc, #84]	@ (8005cd8 <TIM_OC1_SetConfig+0xf8>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	4a14      	ldr	r2, [pc, #80]	@ (8005cdc <TIM_OC1_SetConfig+0xfc>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	621a      	str	r2, [r3, #32]
}
 8005cbe:	46c0      	nop			@ (mov r8, r8)
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	b006      	add	sp, #24
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	46c0      	nop			@ (mov r8, r8)
 8005cc8:	fffeff8f 	.word	0xfffeff8f
 8005ccc:	40012c00 	.word	0x40012c00
 8005cd0:	40014400 	.word	0x40014400
 8005cd4:	40014800 	.word	0x40014800
 8005cd8:	fffffeff 	.word	0xfffffeff
 8005cdc:	fffffdff 	.word	0xfffffdff

08005ce0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	2210      	movs	r2, #16
 8005cf6:	4393      	bics	r3, r2
 8005cf8:	001a      	movs	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4a2c      	ldr	r2, [pc, #176]	@ (8005dc0 <TIM_OC2_SetConfig+0xe0>)
 8005d0e:	4013      	ands	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4a2b      	ldr	r2, [pc, #172]	@ (8005dc4 <TIM_OC2_SetConfig+0xe4>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	021b      	lsls	r3, r3, #8
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	4393      	bics	r3, r2
 8005d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a22      	ldr	r2, [pc, #136]	@ (8005dc8 <TIM_OC2_SetConfig+0xe8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d10d      	bne.n	8005d5e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2280      	movs	r2, #128	@ 0x80
 8005d46:	4393      	bics	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	011b      	lsls	r3, r3, #4
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2240      	movs	r2, #64	@ 0x40
 8005d5a:	4393      	bics	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a19      	ldr	r2, [pc, #100]	@ (8005dc8 <TIM_OC2_SetConfig+0xe8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d007      	beq.n	8005d76 <TIM_OC2_SetConfig+0x96>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a18      	ldr	r2, [pc, #96]	@ (8005dcc <TIM_OC2_SetConfig+0xec>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d003      	beq.n	8005d76 <TIM_OC2_SetConfig+0x96>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a17      	ldr	r2, [pc, #92]	@ (8005dd0 <TIM_OC2_SetConfig+0xf0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d113      	bne.n	8005d9e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	4a16      	ldr	r2, [pc, #88]	@ (8005dd4 <TIM_OC2_SetConfig+0xf4>)
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	4a15      	ldr	r2, [pc, #84]	@ (8005dd8 <TIM_OC2_SetConfig+0xf8>)
 8005d82:	4013      	ands	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	621a      	str	r2, [r3, #32]
}
 8005db8:	46c0      	nop			@ (mov r8, r8)
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	b006      	add	sp, #24
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	feff8fff 	.word	0xfeff8fff
 8005dc4:	fffffcff 	.word	0xfffffcff
 8005dc8:	40012c00 	.word	0x40012c00
 8005dcc:	40014400 	.word	0x40014400
 8005dd0:	40014800 	.word	0x40014800
 8005dd4:	fffffbff 	.word	0xfffffbff
 8005dd8:	fffff7ff 	.word	0xfffff7ff

08005ddc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	4a31      	ldr	r2, [pc, #196]	@ (8005eb8 <TIM_OC3_SetConfig+0xdc>)
 8005df2:	401a      	ands	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4a2d      	ldr	r2, [pc, #180]	@ (8005ebc <TIM_OC3_SetConfig+0xe0>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2203      	movs	r2, #3
 8005e10:	4393      	bics	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	4a27      	ldr	r2, [pc, #156]	@ (8005ec0 <TIM_OC3_SetConfig+0xe4>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a23      	ldr	r2, [pc, #140]	@ (8005ec4 <TIM_OC3_SetConfig+0xe8>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d10d      	bne.n	8005e56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	4a22      	ldr	r2, [pc, #136]	@ (8005ec8 <TIM_OC3_SetConfig+0xec>)
 8005e3e:	4013      	ands	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	021b      	lsls	r3, r3, #8
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	4a1e      	ldr	r2, [pc, #120]	@ (8005ecc <TIM_OC3_SetConfig+0xf0>)
 8005e52:	4013      	ands	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a1a      	ldr	r2, [pc, #104]	@ (8005ec4 <TIM_OC3_SetConfig+0xe8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d007      	beq.n	8005e6e <TIM_OC3_SetConfig+0x92>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a1b      	ldr	r2, [pc, #108]	@ (8005ed0 <TIM_OC3_SetConfig+0xf4>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d003      	beq.n	8005e6e <TIM_OC3_SetConfig+0x92>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a1a      	ldr	r2, [pc, #104]	@ (8005ed4 <TIM_OC3_SetConfig+0xf8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d113      	bne.n	8005e96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	4a19      	ldr	r2, [pc, #100]	@ (8005ed8 <TIM_OC3_SetConfig+0xfc>)
 8005e72:	4013      	ands	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	4a18      	ldr	r2, [pc, #96]	@ (8005edc <TIM_OC3_SetConfig+0x100>)
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	621a      	str	r2, [r3, #32]
}
 8005eb0:	46c0      	nop			@ (mov r8, r8)
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	b006      	add	sp, #24
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	fffffeff 	.word	0xfffffeff
 8005ebc:	fffeff8f 	.word	0xfffeff8f
 8005ec0:	fffffdff 	.word	0xfffffdff
 8005ec4:	40012c00 	.word	0x40012c00
 8005ec8:	fffff7ff 	.word	0xfffff7ff
 8005ecc:	fffffbff 	.word	0xfffffbff
 8005ed0:	40014400 	.word	0x40014400
 8005ed4:	40014800 	.word	0x40014800
 8005ed8:	ffffefff 	.word	0xffffefff
 8005edc:	ffffdfff 	.word	0xffffdfff

08005ee0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	4a24      	ldr	r2, [pc, #144]	@ (8005f88 <TIM_OC4_SetConfig+0xa8>)
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4a20      	ldr	r2, [pc, #128]	@ (8005f8c <TIM_OC4_SetConfig+0xac>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4a1f      	ldr	r2, [pc, #124]	@ (8005f90 <TIM_OC4_SetConfig+0xb0>)
 8005f14:	4013      	ands	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	021b      	lsls	r3, r3, #8
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	4a1b      	ldr	r2, [pc, #108]	@ (8005f94 <TIM_OC4_SetConfig+0xb4>)
 8005f28:	4013      	ands	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	031b      	lsls	r3, r3, #12
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a17      	ldr	r2, [pc, #92]	@ (8005f98 <TIM_OC4_SetConfig+0xb8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d007      	beq.n	8005f50 <TIM_OC4_SetConfig+0x70>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a16      	ldr	r2, [pc, #88]	@ (8005f9c <TIM_OC4_SetConfig+0xbc>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d003      	beq.n	8005f50 <TIM_OC4_SetConfig+0x70>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a15      	ldr	r2, [pc, #84]	@ (8005fa0 <TIM_OC4_SetConfig+0xc0>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d109      	bne.n	8005f64 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	4a14      	ldr	r2, [pc, #80]	@ (8005fa4 <TIM_OC4_SetConfig+0xc4>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	019b      	lsls	r3, r3, #6
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	621a      	str	r2, [r3, #32]
}
 8005f7e:	46c0      	nop			@ (mov r8, r8)
 8005f80:	46bd      	mov	sp, r7
 8005f82:	b006      	add	sp, #24
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	46c0      	nop			@ (mov r8, r8)
 8005f88:	ffffefff 	.word	0xffffefff
 8005f8c:	feff8fff 	.word	0xfeff8fff
 8005f90:	fffffcff 	.word	0xfffffcff
 8005f94:	ffffdfff 	.word	0xffffdfff
 8005f98:	40012c00 	.word	0x40012c00
 8005f9c:	40014400 	.word	0x40014400
 8005fa0:	40014800 	.word	0x40014800
 8005fa4:	ffffbfff 	.word	0xffffbfff

08005fa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	4a21      	ldr	r2, [pc, #132]	@ (8006044 <TIM_OC5_SetConfig+0x9c>)
 8005fbe:	401a      	ands	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8006048 <TIM_OC5_SetConfig+0xa0>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	4a19      	ldr	r2, [pc, #100]	@ (800604c <TIM_OC5_SetConfig+0xa4>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	041b      	lsls	r3, r3, #16
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a15      	ldr	r2, [pc, #84]	@ (8006050 <TIM_OC5_SetConfig+0xa8>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d007      	beq.n	800600e <TIM_OC5_SetConfig+0x66>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a14      	ldr	r2, [pc, #80]	@ (8006054 <TIM_OC5_SetConfig+0xac>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d003      	beq.n	800600e <TIM_OC5_SetConfig+0x66>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a13      	ldr	r2, [pc, #76]	@ (8006058 <TIM_OC5_SetConfig+0xb0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d109      	bne.n	8006022 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	4a0c      	ldr	r2, [pc, #48]	@ (8006044 <TIM_OC5_SetConfig+0x9c>)
 8006012:	4013      	ands	r3, r2
 8006014:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	021b      	lsls	r3, r3, #8
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	621a      	str	r2, [r3, #32]
}
 800603c:	46c0      	nop			@ (mov r8, r8)
 800603e:	46bd      	mov	sp, r7
 8006040:	b006      	add	sp, #24
 8006042:	bd80      	pop	{r7, pc}
 8006044:	fffeffff 	.word	0xfffeffff
 8006048:	fffeff8f 	.word	0xfffeff8f
 800604c:	fffdffff 	.word	0xfffdffff
 8006050:	40012c00 	.word	0x40012c00
 8006054:	40014400 	.word	0x40014400
 8006058:	40014800 	.word	0x40014800

0800605c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	4a22      	ldr	r2, [pc, #136]	@ (80060fc <TIM_OC6_SetConfig+0xa0>)
 8006072:	401a      	ands	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4a1e      	ldr	r2, [pc, #120]	@ (8006100 <TIM_OC6_SetConfig+0xa4>)
 8006088:	4013      	ands	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	021b      	lsls	r3, r3, #8
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	4313      	orrs	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	4a1a      	ldr	r2, [pc, #104]	@ (8006104 <TIM_OC6_SetConfig+0xa8>)
 800609c:	4013      	ands	r3, r2
 800609e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	051b      	lsls	r3, r3, #20
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a16      	ldr	r2, [pc, #88]	@ (8006108 <TIM_OC6_SetConfig+0xac>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d007      	beq.n	80060c4 <TIM_OC6_SetConfig+0x68>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a15      	ldr	r2, [pc, #84]	@ (800610c <TIM_OC6_SetConfig+0xb0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d003      	beq.n	80060c4 <TIM_OC6_SetConfig+0x68>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a14      	ldr	r2, [pc, #80]	@ (8006110 <TIM_OC6_SetConfig+0xb4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d109      	bne.n	80060d8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	4a13      	ldr	r2, [pc, #76]	@ (8006114 <TIM_OC6_SetConfig+0xb8>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	029b      	lsls	r3, r3, #10
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	621a      	str	r2, [r3, #32]
}
 80060f2:	46c0      	nop			@ (mov r8, r8)
 80060f4:	46bd      	mov	sp, r7
 80060f6:	b006      	add	sp, #24
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	46c0      	nop			@ (mov r8, r8)
 80060fc:	ffefffff 	.word	0xffefffff
 8006100:	feff8fff 	.word	0xfeff8fff
 8006104:	ffdfffff 	.word	0xffdfffff
 8006108:	40012c00 	.word	0x40012c00
 800610c:	40014400 	.word	0x40014400
 8006110:	40014800 	.word	0x40014800
 8006114:	fffbffff 	.word	0xfffbffff

08006118 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	221f      	movs	r2, #31
 8006128:	4013      	ands	r3, r2
 800612a:	2201      	movs	r2, #1
 800612c:	409a      	lsls	r2, r3
 800612e:	0013      	movs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	43d2      	mvns	r2, r2
 800613a:	401a      	ands	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a1a      	ldr	r2, [r3, #32]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	211f      	movs	r1, #31
 8006148:	400b      	ands	r3, r1
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	4099      	lsls	r1, r3
 800614e:	000b      	movs	r3, r1
 8006150:	431a      	orrs	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	621a      	str	r2, [r3, #32]
}
 8006156:	46c0      	nop			@ (mov r8, r8)
 8006158:	46bd      	mov	sp, r7
 800615a:	b006      	add	sp, #24
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	223c      	movs	r2, #60	@ 0x3c
 800616e:	5c9b      	ldrb	r3, [r3, r2]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006174:	2302      	movs	r3, #2
 8006176:	e050      	b.n	800621a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	223c      	movs	r2, #60	@ 0x3c
 800617c:	2101      	movs	r1, #1
 800617e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	223d      	movs	r2, #61	@ 0x3d
 8006184:	2102      	movs	r1, #2
 8006186:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a21      	ldr	r2, [pc, #132]	@ (8006224 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d108      	bne.n	80061b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4a20      	ldr	r2, [pc, #128]	@ (8006228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2270      	movs	r2, #112	@ 0x70
 80061b8:	4393      	bics	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a14      	ldr	r2, [pc, #80]	@ (8006224 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00a      	beq.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	2380      	movs	r3, #128	@ 0x80
 80061de:	05db      	lsls	r3, r3, #23
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d004      	beq.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a10      	ldr	r2, [pc, #64]	@ (800622c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d10c      	bne.n	8006208 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2280      	movs	r2, #128	@ 0x80
 80061f2:	4393      	bics	r3, r2
 80061f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	223d      	movs	r2, #61	@ 0x3d
 800620c:	2101      	movs	r1, #1
 800620e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	223c      	movs	r2, #60	@ 0x3c
 8006214:	2100      	movs	r1, #0
 8006216:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	0018      	movs	r0, r3
 800621c:	46bd      	mov	sp, r7
 800621e:	b004      	add	sp, #16
 8006220:	bd80      	pop	{r7, pc}
 8006222:	46c0      	nop			@ (mov r8, r8)
 8006224:	40012c00 	.word	0x40012c00
 8006228:	ff0fffff 	.word	0xff0fffff
 800622c:	40000400 	.word	0x40000400

08006230 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006238:	46c0      	nop			@ (mov r8, r8)
 800623a:	46bd      	mov	sp, r7
 800623c:	b002      	add	sp, #8
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006248:	46c0      	nop			@ (mov r8, r8)
 800624a:	46bd      	mov	sp, r7
 800624c:	b002      	add	sp, #8
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006258:	46c0      	nop			@ (mov r8, r8)
 800625a:	46bd      	mov	sp, r7
 800625c:	b002      	add	sp, #8
 800625e:	bd80      	pop	{r7, pc}

08006260 <memset>:
 8006260:	0003      	movs	r3, r0
 8006262:	1882      	adds	r2, r0, r2
 8006264:	4293      	cmp	r3, r2
 8006266:	d100      	bne.n	800626a <memset+0xa>
 8006268:	4770      	bx	lr
 800626a:	7019      	strb	r1, [r3, #0]
 800626c:	3301      	adds	r3, #1
 800626e:	e7f9      	b.n	8006264 <memset+0x4>

08006270 <__libc_init_array>:
 8006270:	b570      	push	{r4, r5, r6, lr}
 8006272:	2600      	movs	r6, #0
 8006274:	4c0c      	ldr	r4, [pc, #48]	@ (80062a8 <__libc_init_array+0x38>)
 8006276:	4d0d      	ldr	r5, [pc, #52]	@ (80062ac <__libc_init_array+0x3c>)
 8006278:	1b64      	subs	r4, r4, r5
 800627a:	10a4      	asrs	r4, r4, #2
 800627c:	42a6      	cmp	r6, r4
 800627e:	d109      	bne.n	8006294 <__libc_init_array+0x24>
 8006280:	2600      	movs	r6, #0
 8006282:	f000 f823 	bl	80062cc <_init>
 8006286:	4c0a      	ldr	r4, [pc, #40]	@ (80062b0 <__libc_init_array+0x40>)
 8006288:	4d0a      	ldr	r5, [pc, #40]	@ (80062b4 <__libc_init_array+0x44>)
 800628a:	1b64      	subs	r4, r4, r5
 800628c:	10a4      	asrs	r4, r4, #2
 800628e:	42a6      	cmp	r6, r4
 8006290:	d105      	bne.n	800629e <__libc_init_array+0x2e>
 8006292:	bd70      	pop	{r4, r5, r6, pc}
 8006294:	00b3      	lsls	r3, r6, #2
 8006296:	58eb      	ldr	r3, [r5, r3]
 8006298:	4798      	blx	r3
 800629a:	3601      	adds	r6, #1
 800629c:	e7ee      	b.n	800627c <__libc_init_array+0xc>
 800629e:	00b3      	lsls	r3, r6, #2
 80062a0:	58eb      	ldr	r3, [r5, r3]
 80062a2:	4798      	blx	r3
 80062a4:	3601      	adds	r6, #1
 80062a6:	e7f2      	b.n	800628e <__libc_init_array+0x1e>
 80062a8:	080063b0 	.word	0x080063b0
 80062ac:	080063b0 	.word	0x080063b0
 80062b0:	080063b4 	.word	0x080063b4
 80062b4:	080063b0 	.word	0x080063b0

080062b8 <memcpy>:
 80062b8:	2300      	movs	r3, #0
 80062ba:	b510      	push	{r4, lr}
 80062bc:	429a      	cmp	r2, r3
 80062be:	d100      	bne.n	80062c2 <memcpy+0xa>
 80062c0:	bd10      	pop	{r4, pc}
 80062c2:	5ccc      	ldrb	r4, [r1, r3]
 80062c4:	54c4      	strb	r4, [r0, r3]
 80062c6:	3301      	adds	r3, #1
 80062c8:	e7f8      	b.n	80062bc <memcpy+0x4>
	...

080062cc <_init>:
 80062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ce:	46c0      	nop			@ (mov r8, r8)
 80062d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062d2:	bc08      	pop	{r3}
 80062d4:	469e      	mov	lr, r3
 80062d6:	4770      	bx	lr

080062d8 <_fini>:
 80062d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062da:	46c0      	nop			@ (mov r8, r8)
 80062dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062de:	bc08      	pop	{r3}
 80062e0:	469e      	mov	lr, r3
 80062e2:	4770      	bx	lr
