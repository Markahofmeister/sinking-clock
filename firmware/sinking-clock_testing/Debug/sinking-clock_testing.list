
sinking-clock_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005220  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080052dc  080052dc  000152dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005424  08005424  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800542c  0800542c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800542c  0800542c  0001542c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005430  08005430  00015430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000088  080054bc  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080054bc  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bb1  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a1  00000000  00000000  00030c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00033008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00033df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bc3  00000000  00000000  00034b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001146b  00000000  00000000  0004c6c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093717  00000000  00000000  0005db2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1245  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a3c  00000000  00000000  000f1298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000088 	.word	0x20000088
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080052c4 	.word	0x080052c4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000008c 	.word	0x2000008c
 8000100:	080052c4 	.word	0x080052c4

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	469b      	mov	fp, r3
 80002a6:	d433      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a8:	465a      	mov	r2, fp
 80002aa:	4653      	mov	r3, sl
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83a      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e078      	b.n	80003b4 <__udivmoddi4+0x144>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e075      	b.n	80003ba <__udivmoddi4+0x14a>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e028      	b.n	800033a <__udivmoddi4+0xca>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	2320      	movs	r3, #32
 8000314:	1a9b      	subs	r3, r3, r2
 8000316:	4652      	mov	r2, sl
 8000318:	40da      	lsrs	r2, r3
 800031a:	4641      	mov	r1, r8
 800031c:	0013      	movs	r3, r2
 800031e:	464a      	mov	r2, r9
 8000320:	408a      	lsls	r2, r1
 8000322:	0017      	movs	r7, r2
 8000324:	4642      	mov	r2, r8
 8000326:	431f      	orrs	r7, r3
 8000328:	4653      	mov	r3, sl
 800032a:	4093      	lsls	r3, r2
 800032c:	001e      	movs	r6, r3
 800032e:	42af      	cmp	r7, r5
 8000330:	d9c4      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0d9      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000340:	07fb      	lsls	r3, r7, #31
 8000342:	0872      	lsrs	r2, r6, #1
 8000344:	431a      	orrs	r2, r3
 8000346:	4646      	mov	r6, r8
 8000348:	087b      	lsrs	r3, r7, #1
 800034a:	e00e      	b.n	800036a <__udivmoddi4+0xfa>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d101      	bne.n	8000354 <__udivmoddi4+0xe4>
 8000350:	42a2      	cmp	r2, r4
 8000352:	d80c      	bhi.n	800036e <__udivmoddi4+0xfe>
 8000354:	1aa4      	subs	r4, r4, r2
 8000356:	419d      	sbcs	r5, r3
 8000358:	2001      	movs	r0, #1
 800035a:	1924      	adds	r4, r4, r4
 800035c:	416d      	adcs	r5, r5
 800035e:	2100      	movs	r1, #0
 8000360:	3e01      	subs	r6, #1
 8000362:	1824      	adds	r4, r4, r0
 8000364:	414d      	adcs	r5, r1
 8000366:	2e00      	cmp	r6, #0
 8000368:	d006      	beq.n	8000378 <__udivmoddi4+0x108>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d9ee      	bls.n	800034c <__udivmoddi4+0xdc>
 800036e:	3e01      	subs	r6, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2e00      	cmp	r6, #0
 8000376:	d1f8      	bne.n	800036a <__udivmoddi4+0xfa>
 8000378:	9800      	ldr	r0, [sp, #0]
 800037a:	9901      	ldr	r1, [sp, #4]
 800037c:	465b      	mov	r3, fp
 800037e:	1900      	adds	r0, r0, r4
 8000380:	4169      	adcs	r1, r5
 8000382:	2b00      	cmp	r3, #0
 8000384:	db24      	blt.n	80003d0 <__udivmoddi4+0x160>
 8000386:	002b      	movs	r3, r5
 8000388:	465a      	mov	r2, fp
 800038a:	4644      	mov	r4, r8
 800038c:	40d3      	lsrs	r3, r2
 800038e:	002a      	movs	r2, r5
 8000390:	40e2      	lsrs	r2, r4
 8000392:	001c      	movs	r4, r3
 8000394:	465b      	mov	r3, fp
 8000396:	0015      	movs	r5, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	db2a      	blt.n	80003f2 <__udivmoddi4+0x182>
 800039c:	0026      	movs	r6, r4
 800039e:	409e      	lsls	r6, r3
 80003a0:	0033      	movs	r3, r6
 80003a2:	0026      	movs	r6, r4
 80003a4:	4647      	mov	r7, r8
 80003a6:	40be      	lsls	r6, r7
 80003a8:	0032      	movs	r2, r6
 80003aa:	1a80      	subs	r0, r0, r2
 80003ac:	4199      	sbcs	r1, r3
 80003ae:	9000      	str	r0, [sp, #0]
 80003b0:	9101      	str	r1, [sp, #4]
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b4:	42a3      	cmp	r3, r4
 80003b6:	d8bc      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80003b8:	e783      	b.n	80002c2 <__udivmoddi4+0x52>
 80003ba:	4642      	mov	r2, r8
 80003bc:	2320      	movs	r3, #32
 80003be:	2100      	movs	r1, #0
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	2200      	movs	r2, #0
 80003c4:	9100      	str	r1, [sp, #0]
 80003c6:	9201      	str	r2, [sp, #4]
 80003c8:	2201      	movs	r2, #1
 80003ca:	40da      	lsrs	r2, r3
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	e786      	b.n	80002de <__udivmoddi4+0x6e>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	1a9b      	subs	r3, r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	4646      	mov	r6, r8
 80003da:	409a      	lsls	r2, r3
 80003dc:	0023      	movs	r3, r4
 80003de:	40f3      	lsrs	r3, r6
 80003e0:	4644      	mov	r4, r8
 80003e2:	4313      	orrs	r3, r2
 80003e4:	002a      	movs	r2, r5
 80003e6:	40e2      	lsrs	r2, r4
 80003e8:	001c      	movs	r4, r3
 80003ea:	465b      	mov	r3, fp
 80003ec:	0015      	movs	r5, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dad4      	bge.n	800039c <__udivmoddi4+0x12c>
 80003f2:	4642      	mov	r2, r8
 80003f4:	002f      	movs	r7, r5
 80003f6:	2320      	movs	r3, #32
 80003f8:	0026      	movs	r6, r4
 80003fa:	4097      	lsls	r7, r2
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	40de      	lsrs	r6, r3
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7cd      	b.n	80003a2 <__udivmoddi4+0x132>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000464:	2301      	movs	r3, #1
 8000466:	425b      	negs	r3, r3
 8000468:	1d39      	adds	r1, r7, #4
 800046a:	4804      	ldr	r0, [pc, #16]	; (800047c <__io_putchar+0x20>)
 800046c:	2201      	movs	r2, #1
 800046e:	f003 f9e3 	bl	8003838 <HAL_UART_Transmit>
  return ch;
 8000472:	687b      	ldr	r3, [r7, #4]
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000124 	.word	0x20000124

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000484:	f000 fdb2 	bl	8000fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000488:	f000 f80b 	bl	80004a2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048c:	f000 f976 	bl	800077c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000490:	f000 f940 	bl	8000714 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000494:	f000 f892 	bl	80005bc <MX_RTC_Init>
  MX_I2C1_Init();
 8000498:	f000 f850 	bl	800053c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  sevSeg_I2C1_Init();			//Initialize 7-segment display to test mode
 800049c:	f000 fb0c 	bl	8000ab8 <sevSeg_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <main+0x20>

080004a2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a2:	b590      	push	{r4, r7, lr}
 80004a4:	b093      	sub	sp, #76	; 0x4c
 80004a6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a8:	2410      	movs	r4, #16
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	0018      	movs	r0, r3
 80004ae:	2338      	movs	r3, #56	; 0x38
 80004b0:	001a      	movs	r2, r3
 80004b2:	2100      	movs	r1, #0
 80004b4:	f003 fec8 	bl	8004248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b8:	003b      	movs	r3, r7
 80004ba:	0018      	movs	r0, r3
 80004bc:	2310      	movs	r3, #16
 80004be:	001a      	movs	r2, r3
 80004c0:	2100      	movs	r1, #0
 80004c2:	f003 fec1 	bl	8004248 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004c6:	2380      	movs	r3, #128	; 0x80
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 fd0e 	bl	8001eec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	220a      	movs	r2, #10
 80004d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2280      	movs	r2, #128	; 0x80
 80004da:	0052      	lsls	r2, r2, #1
 80004dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004de:	0021      	movs	r1, r4
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	2240      	movs	r2, #64	; 0x40
 80004ea:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	2201      	movs	r2, #1
 80004f0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2200      	movs	r2, #0
 80004f6:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	0018      	movs	r0, r3
 80004fc:	f001 fd42 	bl	8001f84 <HAL_RCC_OscConfig>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d001      	beq.n	8000508 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000504:	f000 fb3e 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000508:	003b      	movs	r3, r7
 800050a:	2207      	movs	r2, #7
 800050c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800050e:	003b      	movs	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000514:	003b      	movs	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800051a:	003b      	movs	r3, r7
 800051c:	2200      	movs	r2, #0
 800051e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000520:	003b      	movs	r3, r7
 8000522:	2100      	movs	r1, #0
 8000524:	0018      	movs	r0, r3
 8000526:	f002 f847 	bl	80025b8 <HAL_RCC_ClockConfig>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800052e:	f000 fb29 	bl	8000b84 <Error_Handler>
  }
}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b013      	add	sp, #76	; 0x4c
 8000538:	bd90      	pop	{r4, r7, pc}
	...

0800053c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000542:	4a1c      	ldr	r2, [pc, #112]	; (80005b4 <MX_I2C1_Init+0x78>)
 8000544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000548:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <MX_I2C1_Init+0x7c>)
 800054a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <MX_I2C1_Init+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000554:	2201      	movs	r2, #1
 8000556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <MX_I2C1_Init+0x74>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_I2C1_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000578:	0018      	movs	r0, r3
 800057a:	f001 f86b 	bl	8001654 <HAL_I2C_Init>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000582:	f000 faff 	bl	8000b84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000588:	2100      	movs	r1, #0
 800058a:	0018      	movs	r0, r3
 800058c:	f001 fc16 	bl	8001dbc <HAL_I2CEx_ConfigAnalogFilter>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000594:	f000 faf6 	bl	8000b84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <MX_I2C1_Init+0x74>)
 800059a:	2100      	movs	r1, #0
 800059c:	0018      	movs	r0, r3
 800059e:	f001 fc59 	bl	8001e54 <HAL_I2CEx_ConfigDigitalFilter>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005a6:	f000 faed 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200000a4 	.word	0x200000a4
 80005b4:	40005400 	.word	0x40005400
 80005b8:	0010061a 	.word	0x0010061a

080005bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b090      	sub	sp, #64	; 0x40
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005c2:	232c      	movs	r3, #44	; 0x2c
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	0018      	movs	r0, r3
 80005c8:	2314      	movs	r3, #20
 80005ca:	001a      	movs	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	f003 fe3b 	bl	8004248 <memset>
  RTC_DateTypeDef sDate = {0};
 80005d2:	2328      	movs	r3, #40	; 0x28
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80005da:	003b      	movs	r3, r7
 80005dc:	0018      	movs	r0, r3
 80005de:	2328      	movs	r3, #40	; 0x28
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f003 fe30 	bl	8004248 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005e8:	4b47      	ldr	r3, [pc, #284]	; (8000708 <MX_RTC_Init+0x14c>)
 80005ea:	4a48      	ldr	r2, [pc, #288]	; (800070c <MX_RTC_Init+0x150>)
 80005ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80005ee:	4b46      	ldr	r3, [pc, #280]	; (8000708 <MX_RTC_Init+0x14c>)
 80005f0:	2240      	movs	r2, #64	; 0x40
 80005f2:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80005f4:	4b44      	ldr	r3, [pc, #272]	; (8000708 <MX_RTC_Init+0x14c>)
 80005f6:	227f      	movs	r2, #127	; 0x7f
 80005f8:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80005fa:	4b43      	ldr	r3, [pc, #268]	; (8000708 <MX_RTC_Init+0x14c>)
 80005fc:	22ff      	movs	r2, #255	; 0xff
 80005fe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000600:	4b41      	ldr	r3, [pc, #260]	; (8000708 <MX_RTC_Init+0x14c>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000606:	4b40      	ldr	r3, [pc, #256]	; (8000708 <MX_RTC_Init+0x14c>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800060c:	4b3e      	ldr	r3, [pc, #248]	; (8000708 <MX_RTC_Init+0x14c>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000612:	4b3d      	ldr	r3, [pc, #244]	; (8000708 <MX_RTC_Init+0x14c>)
 8000614:	2280      	movs	r2, #128	; 0x80
 8000616:	05d2      	lsls	r2, r2, #23
 8000618:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800061a:	4b3b      	ldr	r3, [pc, #236]	; (8000708 <MX_RTC_Init+0x14c>)
 800061c:	2200      	movs	r2, #0
 800061e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000620:	4b39      	ldr	r3, [pc, #228]	; (8000708 <MX_RTC_Init+0x14c>)
 8000622:	0018      	movs	r0, r3
 8000624:	f002 faec 	bl	8002c00 <HAL_RTC_Init>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 800062c:	f000 faaa 	bl	8000b84 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000630:	212c      	movs	r1, #44	; 0x2c
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2201      	movs	r2, #1
 8000636:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800065c:	1879      	adds	r1, r7, r1
 800065e:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <MX_RTC_Init+0x14c>)
 8000660:	2201      	movs	r2, #1
 8000662:	0018      	movs	r0, r3
 8000664:	f002 fb6e 	bl	8002d44 <HAL_RTC_SetTime>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 800066c:	f000 fa8a 	bl	8000b84 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000670:	2128      	movs	r1, #40	; 0x28
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2201      	movs	r2, #1
 8000676:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2201      	movs	r2, #1
 800067c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2201      	movs	r2, #1
 8000682:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2200      	movs	r2, #0
 8000688:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800068a:	1879      	adds	r1, r7, r1
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <MX_RTC_Init+0x14c>)
 800068e:	2201      	movs	r2, #1
 8000690:	0018      	movs	r0, r3
 8000692:	f002 fc5b 	bl	8002f4c <HAL_RTC_SetDate>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 800069a:	f000 fa73 	bl	8000b84 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 800069e:	003b      	movs	r3, r7
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80006a4:	003b      	movs	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 80006aa:	003b      	movs	r3, r7
 80006ac:	2201      	movs	r2, #1
 80006ae:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80006b0:	003b      	movs	r3, r7
 80006b2:	2200      	movs	r2, #0
 80006b4:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80006b6:	003b      	movs	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006bc:	003b      	movs	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006c2:	003b      	movs	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80006c8:	003b      	movs	r3, r7
 80006ca:	4a11      	ldr	r2, [pc, #68]	; (8000710 <MX_RTC_Init+0x154>)
 80006cc:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80006ce:	003b      	movs	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80006d4:	003b      	movs	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80006da:	003b      	movs	r3, r7
 80006dc:	2220      	movs	r2, #32
 80006de:	2101      	movs	r1, #1
 80006e0:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80006e2:	003b      	movs	r3, r7
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	0052      	lsls	r2, r2, #1
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80006ea:	0039      	movs	r1, r7
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_RTC_Init+0x14c>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	0018      	movs	r0, r3
 80006f2:	f002 fd0b 	bl	800310c <HAL_RTC_SetAlarm_IT>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <MX_RTC_Init+0x142>
  {
    Error_Handler();
 80006fa:	f000 fa43 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b010      	add	sp, #64	; 0x40
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	200000f8 	.word	0x200000f8
 800070c:	40002800 	.word	0x40002800
 8000710:	80808000 	.word	0x80808000

08000714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_USART2_UART_Init+0x60>)
 800071a:	4a17      	ldr	r2, [pc, #92]	; (8000778 <MX_USART2_UART_Init+0x64>)
 800071c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000720:	22e1      	movs	r2, #225	; 0xe1
 8000722:	0252      	lsls	r2, r2, #9
 8000724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	0152      	lsls	r2, r2, #5
 800072c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART2_UART_Init+0x60>)
 800073c:	220c      	movs	r2, #12
 800073e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART2_UART_Init+0x60>)
 800074e:	2200      	movs	r2, #0
 8000750:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000754:	2200      	movs	r2, #0
 8000756:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART2_UART_Init+0x60>)
 800075a:	2200      	movs	r2, #0
 800075c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000760:	0018      	movs	r0, r3
 8000762:	f003 f813 	bl	800378c <HAL_UART_Init>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800076a:	f000 fa0b 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000124 	.word	0x20000124
 8000778:	40004400 	.word	0x40004400

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b08b      	sub	sp, #44	; 0x2c
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	2414      	movs	r4, #20
 8000784:	193b      	adds	r3, r7, r4
 8000786:	0018      	movs	r0, r3
 8000788:	2314      	movs	r3, #20
 800078a:	001a      	movs	r2, r3
 800078c:	2100      	movs	r1, #0
 800078e:	f003 fd5b 	bl	8004248 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b72      	ldr	r3, [pc, #456]	; (800095c <MX_GPIO_Init+0x1e0>)
 8000794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000796:	4b71      	ldr	r3, [pc, #452]	; (800095c <MX_GPIO_Init+0x1e0>)
 8000798:	2102      	movs	r1, #2
 800079a:	430a      	orrs	r2, r1
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
 800079e:	4b6f      	ldr	r3, [pc, #444]	; (800095c <MX_GPIO_Init+0x1e0>)
 80007a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007a2:	2202      	movs	r2, #2
 80007a4:	4013      	ands	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b6c      	ldr	r3, [pc, #432]	; (800095c <MX_GPIO_Init+0x1e0>)
 80007ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ae:	4b6b      	ldr	r3, [pc, #428]	; (800095c <MX_GPIO_Init+0x1e0>)
 80007b0:	2104      	movs	r1, #4
 80007b2:	430a      	orrs	r2, r1
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
 80007b6:	4b69      	ldr	r3, [pc, #420]	; (800095c <MX_GPIO_Init+0x1e0>)
 80007b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ba:	2204      	movs	r2, #4
 80007bc:	4013      	ands	r3, r2
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007c2:	4b66      	ldr	r3, [pc, #408]	; (800095c <MX_GPIO_Init+0x1e0>)
 80007c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c6:	4b65      	ldr	r3, [pc, #404]	; (800095c <MX_GPIO_Init+0x1e0>)
 80007c8:	2120      	movs	r1, #32
 80007ca:	430a      	orrs	r2, r1
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
 80007ce:	4b63      	ldr	r3, [pc, #396]	; (800095c <MX_GPIO_Init+0x1e0>)
 80007d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d2:	2220      	movs	r2, #32
 80007d4:	4013      	ands	r3, r2
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b60      	ldr	r3, [pc, #384]	; (800095c <MX_GPIO_Init+0x1e0>)
 80007dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007de:	4b5f      	ldr	r3, [pc, #380]	; (800095c <MX_GPIO_Init+0x1e0>)
 80007e0:	2101      	movs	r1, #1
 80007e2:	430a      	orrs	r2, r1
 80007e4:	635a      	str	r2, [r3, #52]	; 0x34
 80007e6:	4b5d      	ldr	r3, [pc, #372]	; (800095c <MX_GPIO_Init+0x1e0>)
 80007e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ea:	2201      	movs	r2, #1
 80007ec:	4013      	ands	r3, r2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RTC_Interrupt_LED_Pin|Minute_Set_LED_Pin|Hour_Set_LED_Pin, GPIO_PIN_RESET);
 80007f2:	23c8      	movs	r3, #200	; 0xc8
 80007f4:	00d9      	lsls	r1, r3, #3
 80007f6:	23a0      	movs	r3, #160	; 0xa0
 80007f8:	05db      	lsls	r3, r3, #23
 80007fa:	2200      	movs	r2, #0
 80007fc:	0018      	movs	r0, r3
 80007fe:	f000 febd 	bl	800157c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Snooze_LED_Pin|Alarm_Set_LED_Pin|Alarm_Enable_LED_Pin|Display_LED_Pin, GPIO_PIN_RESET);
 8000802:	4b57      	ldr	r3, [pc, #348]	; (8000960 <MX_GPIO_Init+0x1e4>)
 8000804:	2200      	movs	r2, #0
 8000806:	21c3      	movs	r1, #195	; 0xc3
 8000808:	0018      	movs	r0, r3
 800080a:	f000 feb7 	bl	800157c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800080e:	4b55      	ldr	r3, [pc, #340]	; (8000964 <MX_GPIO_Init+0x1e8>)
 8000810:	2200      	movs	r2, #0
 8000812:	2140      	movs	r1, #64	; 0x40
 8000814:	0018      	movs	r0, r3
 8000816:	f000 feb1 	bl	800157c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 800081a:	193b      	adds	r3, r7, r4
 800081c:	2204      	movs	r2, #4
 800081e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000820:	193b      	adds	r3, r7, r4
 8000822:	2288      	movs	r2, #136	; 0x88
 8000824:	0352      	lsls	r2, r2, #13
 8000826:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	193b      	adds	r3, r7, r4
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 800082e:	193b      	adds	r3, r7, r4
 8000830:	4a4d      	ldr	r2, [pc, #308]	; (8000968 <MX_GPIO_Init+0x1ec>)
 8000832:	0019      	movs	r1, r3
 8000834:	0010      	movs	r0, r2
 8000836:	f000 fd3d 	bl	80012b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_Button_Pin Alarm_Enable_Button_Pin Alarm_Set_Button_Pin Hour_Set_Button_Pin
                           Snooze_Button_Pin Minute_Set_Button_Pin */
  GPIO_InitStruct.Pin = Display_Button_Pin|Alarm_Enable_Button_Pin|Alarm_Set_Button_Pin|Hour_Set_Button_Pin
 800083a:	193b      	adds	r3, r7, r4
 800083c:	4a4b      	ldr	r2, [pc, #300]	; (800096c <MX_GPIO_Init+0x1f0>)
 800083e:	601a      	str	r2, [r3, #0]
                          |Snooze_Button_Pin|Minute_Set_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2284      	movs	r2, #132	; 0x84
 8000844:	0392      	lsls	r2, r2, #14
 8000846:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2201      	movs	r2, #1
 800084c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	193a      	adds	r2, r7, r4
 8000850:	23a0      	movs	r3, #160	; 0xa0
 8000852:	05db      	lsls	r3, r3, #23
 8000854:	0011      	movs	r1, r2
 8000856:	0018      	movs	r0, r3
 8000858:	f000 fd2c 	bl	80012b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTC_Interrupt_LED_Pin Minute_Set_LED_Pin Hour_Set_LED_Pin */
  GPIO_InitStruct.Pin = RTC_Interrupt_LED_Pin|Minute_Set_LED_Pin|Hour_Set_LED_Pin;
 800085c:	0021      	movs	r1, r4
 800085e:	187b      	adds	r3, r7, r1
 8000860:	22c8      	movs	r2, #200	; 0xc8
 8000862:	00d2      	lsls	r2, r2, #3
 8000864:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	000c      	movs	r4, r1
 8000868:	193b      	adds	r3, r7, r4
 800086a:	2201      	movs	r2, #1
 800086c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	193b      	adds	r3, r7, r4
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	193a      	adds	r2, r7, r4
 800087c:	23a0      	movs	r3, #160	; 0xa0
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	0011      	movs	r1, r2
 8000882:	0018      	movs	r0, r3
 8000884:	f000 fd16 	bl	80012b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Snooze_LED_Pin Alarm_Set_LED_Pin Alarm_Enable_LED_Pin Display_LED_Pin */
  GPIO_InitStruct.Pin = Snooze_LED_Pin|Alarm_Set_LED_Pin|Alarm_Enable_LED_Pin|Display_LED_Pin;
 8000888:	193b      	adds	r3, r7, r4
 800088a:	22c3      	movs	r2, #195	; 0xc3
 800088c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2201      	movs	r2, #1
 8000892:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	4a2f      	ldr	r2, [pc, #188]	; (8000960 <MX_GPIO_Init+0x1e4>)
 80008a4:	0019      	movs	r1, r3
 80008a6:	0010      	movs	r0, r2
 80008a8:	f000 fd04 	bl	80012b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80008ac:	0021      	movs	r1, r4
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2240      	movs	r2, #64	; 0x40
 80008b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2201      	movs	r2, #1
 80008b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	4a26      	ldr	r2, [pc, #152]	; (8000964 <MX_GPIO_Init+0x1e8>)
 80008ca:	0019      	movs	r1, r3
 80008cc:	0010      	movs	r0, r2
 80008ce:	f000 fcf1 	bl	80012b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	2005      	movs	r0, #5
 80008d8:	f000 fcba 	bl	8001250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80008dc:	2005      	movs	r0, #5
 80008de:	f000 fccc 	bl	800127a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	2006      	movs	r0, #6
 80008e8:	f000 fcb2 	bl	8001250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80008ec:	2006      	movs	r0, #6
 80008ee:	f000 fcc4 	bl	800127a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	2007      	movs	r0, #7
 80008f8:	f000 fcaa 	bl	8001250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80008fc:	2007      	movs	r0, #7
 80008fe:	f000 fcbc 	bl	800127a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  // Initialize all output pins to low
	HAL_GPIO_WritePin(GPIOB, displayLEDPin, 0);
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_GPIO_Init+0x1e4>)
 8000906:	2200      	movs	r2, #0
 8000908:	0018      	movs	r0, r3
 800090a:	f000 fe37 	bl	800157c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, alarmEnableLEDPin, 0);
 800090e:	2140      	movs	r1, #64	; 0x40
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_GPIO_Init+0x1e4>)
 8000912:	2200      	movs	r2, #0
 8000914:	0018      	movs	r0, r3
 8000916:	f000 fe31 	bl	800157c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, alarmSetLEDPin, 0);
 800091a:	2102      	movs	r1, #2
 800091c:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_GPIO_Init+0x1e4>)
 800091e:	2200      	movs	r2, #0
 8000920:	0018      	movs	r0, r3
 8000922:	f000 fe2b 	bl	800157c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, hourSetLEDPin, 0);
 8000926:	2380      	movs	r3, #128	; 0x80
 8000928:	00d9      	lsls	r1, r3, #3
 800092a:	23a0      	movs	r3, #160	; 0xa0
 800092c:	05db      	lsls	r3, r3, #23
 800092e:	2200      	movs	r2, #0
 8000930:	0018      	movs	r0, r3
 8000932:	f000 fe23 	bl	800157c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, minuteSetLEDPin, 0);
 8000936:	2380      	movs	r3, #128	; 0x80
 8000938:	0099      	lsls	r1, r3, #2
 800093a:	23a0      	movs	r3, #160	; 0xa0
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	2200      	movs	r2, #0
 8000940:	0018      	movs	r0, r3
 8000942:	f000 fe1b 	bl	800157c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, snoozeButtonLEDPin, 0);
 8000946:	2101      	movs	r1, #1
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <MX_GPIO_Init+0x1e4>)
 800094a:	2200      	movs	r2, #0
 800094c:	0018      	movs	r0, r3
 800094e:	f000 fe15 	bl	800157c <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b00b      	add	sp, #44	; 0x2c
 8000958:	bd90      	pop	{r4, r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	40021000 	.word	0x40021000
 8000960:	50000400 	.word	0x50000400
 8000964:	50000800 	.word	0x50000800
 8000968:	50001400 	.word	0x50001400
 800096c:	00001833 	.word	0x00001833

08000970 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	0002      	movs	r2, r0
 8000978:	1dbb      	adds	r3, r7, #6
 800097a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == displayButtonPin) {
 800097c:	2201      	movs	r2, #1
 800097e:	1dbb      	adds	r3, r7, #6
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	4293      	cmp	r3, r2
 8000984:	d106      	bne.n	8000994 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		HAL_GPIO_TogglePin(GPIOB, displayLEDPin);
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 800098a:	0011      	movs	r1, r2
 800098c:	0018      	movs	r0, r3
 800098e:	f000 fe12 	bl	80015b6 <HAL_GPIO_TogglePin>
//    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
//    printf("ISR Entered\n");
//  } else {
//      __NOP();
//  }
}
 8000992:	e042      	b.n	8000a1a <HAL_GPIO_EXTI_Falling_Callback+0xaa>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8000994:	2202      	movs	r2, #2
 8000996:	1dbb      	adds	r3, r7, #6
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	4293      	cmp	r3, r2
 800099c:	d106      	bne.n	80009ac <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		HAL_GPIO_TogglePin(GPIOB, alarmEnableLEDPin);
 800099e:	2240      	movs	r2, #64	; 0x40
 80009a0:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 80009a2:	0011      	movs	r1, r2
 80009a4:	0018      	movs	r0, r3
 80009a6:	f000 fe06 	bl	80015b6 <HAL_GPIO_TogglePin>
}
 80009aa:	e036      	b.n	8000a1a <HAL_GPIO_EXTI_Falling_Callback+0xaa>
	else if(GPIO_Pin == alarmSetButtonPin) {
 80009ac:	2210      	movs	r2, #16
 80009ae:	1dbb      	adds	r3, r7, #6
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d106      	bne.n	80009c4 <HAL_GPIO_EXTI_Falling_Callback+0x54>
		HAL_GPIO_TogglePin(GPIOB, alarmSetLEDPin);
 80009b6:	2202      	movs	r2, #2
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 80009ba:	0011      	movs	r1, r2
 80009bc:	0018      	movs	r0, r3
 80009be:	f000 fdfa 	bl	80015b6 <HAL_GPIO_TogglePin>
}
 80009c2:	e02a      	b.n	8000a1a <HAL_GPIO_EXTI_Falling_Callback+0xaa>
	else if(GPIO_Pin == hourSetButtonPin) {
 80009c4:	2220      	movs	r2, #32
 80009c6:	1dbb      	adds	r3, r7, #6
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d108      	bne.n	80009e0 <HAL_GPIO_EXTI_Falling_Callback+0x70>
		HAL_GPIO_TogglePin(GPIOA, hourSetLEDPin);
 80009ce:	2380      	movs	r3, #128	; 0x80
 80009d0:	00da      	lsls	r2, r3, #3
 80009d2:	23a0      	movs	r3, #160	; 0xa0
 80009d4:	05db      	lsls	r3, r3, #23
 80009d6:	0011      	movs	r1, r2
 80009d8:	0018      	movs	r0, r3
 80009da:	f000 fdec 	bl	80015b6 <HAL_GPIO_TogglePin>
}
 80009de:	e01c      	b.n	8000a1a <HAL_GPIO_EXTI_Falling_Callback+0xaa>
	else if(GPIO_Pin == minuteSetButtonPin) {
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	015b      	lsls	r3, r3, #5
 80009e4:	1dba      	adds	r2, r7, #6
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d108      	bne.n	80009fe <HAL_GPIO_EXTI_Falling_Callback+0x8e>
		HAL_GPIO_TogglePin(GPIOA, minuteSetLEDPin);
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	009a      	lsls	r2, r3, #2
 80009f0:	23a0      	movs	r3, #160	; 0xa0
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fddd 	bl	80015b6 <HAL_GPIO_TogglePin>
}
 80009fc:	e00d      	b.n	8000a1a <HAL_GPIO_EXTI_Falling_Callback+0xaa>
	else if(GPIO_Pin == snoozeButtonPin) {
 80009fe:	2380      	movs	r3, #128	; 0x80
 8000a00:	011b      	lsls	r3, r3, #4
 8000a02:	1dba      	adds	r2, r7, #6
 8000a04:	8812      	ldrh	r2, [r2, #0]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d106      	bne.n	8000a18 <HAL_GPIO_EXTI_Falling_Callback+0xa8>
		HAL_GPIO_TogglePin(GPIOB, snoozeButtonLEDPin);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 8000a0e:	0011      	movs	r1, r2
 8000a10:	0018      	movs	r0, r3
 8000a12:	f000 fdd0 	bl	80015b6 <HAL_GPIO_TogglePin>
}
 8000a16:	e000      	b.n	8000a1a <HAL_GPIO_EXTI_Falling_Callback+0xaa>
		__NOP();
 8000a18:	46c0      	nop			; (mov r8, r8)
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b002      	add	sp, #8
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	50000400 	.word	0x50000400

08000a28 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b093      	sub	sp, #76	; 0x4c
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	005a      	lsls	r2, r3, #1
 8000a34:	2420      	movs	r4, #32
 8000a36:	1939      	adds	r1, r7, r4
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f002 fca6 	bl	800338c <HAL_RTC_GetAlarm>

  printf("Enter alarm interrupt");
 8000a40:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f003 fc08 	bl	8004258 <iprintf>
  printf("\n");
 8000a48:	200a      	movs	r0, #10
 8000a4a:	f003 fc1f 	bl	800428c <putchar>

  RTC_TimeTypeDef currTime;
  RTC_DateTypeDef currDate;
  HAL_RTC_GetTime(hrtc, &currTime, RTC_FORMAT_BIN);
 8000a4e:	230c      	movs	r3, #12
 8000a50:	18f9      	adds	r1, r7, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	0018      	movs	r0, r3
 8000a58:	f002 fa1c 	bl	8002e94 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(hrtc, &currDate, RTC_FORMAT_BIN);
 8000a5c:	2308      	movs	r3, #8
 8000a5e:	18f9      	adds	r1, r7, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	0018      	movs	r0, r3
 8000a66:	f002 fb03 	bl	8003070 <HAL_RTC_GetDate>

  if(sAlarm.AlarmTime.Seconds>58) {
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	789b      	ldrb	r3, [r3, #2]
 8000a6e:	2b3a      	cmp	r3, #58	; 0x3a
 8000a70:	d903      	bls.n	8000a7a <HAL_RTC_AlarmAEventCallback+0x52>
    sAlarm.AlarmTime.Seconds=0;
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2200      	movs	r2, #0
 8000a76:	709a      	strb	r2, [r3, #2]
 8000a78:	e006      	b.n	8000a88 <HAL_RTC_AlarmAEventCallback+0x60>
  } else {
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	789b      	ldrb	r3, [r3, #2]
 8000a80:	3301      	adds	r3, #1
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	2320      	movs	r3, #32
 8000a8c:	18f9      	adds	r1, r7, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2200      	movs	r2, #0
 8000a92:	0018      	movs	r0, r3
 8000a94:	f002 fb3a 	bl	800310c <HAL_RTC_SetAlarm_IT>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d1f6      	bne.n	8000a8a <HAL_RTC_AlarmAEventCallback+0x62>
    HAL_GPIO_TogglePin(GPIOA, RTCInterruptLEDPin);
 8000a9c:	2240      	movs	r2, #64	; 0x40
 8000a9e:	23a0      	movs	r3, #160	; 0xa0
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f000 fd86 	bl	80015b6 <HAL_GPIO_TogglePin>
}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b013      	add	sp, #76	; 0x4c
 8000ab0:	bd90      	pop	{r4, r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	080052dc 	.word	0x080052dc

08000ab8 <sevSeg_I2C1_Init>:

static void sevSeg_I2C1_Init(void) {
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af02      	add	r7, sp, #8
	 */

	HAL_StatusTypeDef HalRet;

	//Set display to decode hex data inputs
	HalRet = HAL_I2C_Master_Transmit(&hi2c1, (sevSeg_addr), sevSeg_decodeBuffer, 2, HAL_MAX_DELAY);
 8000abe:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <sevSeg_I2C1_Init+0xb0>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b299      	uxth	r1, r3
 8000ac4:	1dfc      	adds	r4, r7, #7
 8000ac6:	4a29      	ldr	r2, [pc, #164]	; (8000b6c <sevSeg_I2C1_Init+0xb4>)
 8000ac8:	4829      	ldr	r0, [pc, #164]	; (8000b70 <sevSeg_I2C1_Init+0xb8>)
 8000aca:	2301      	movs	r3, #1
 8000acc:	425b      	negs	r3, r3
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	f000 fe55 	bl	8001780 <HAL_I2C_Master_Transmit>
 8000ad6:	0003      	movs	r3, r0
 8000ad8:	7023      	strb	r3, [r4, #0]

	if(HalRet != HAL_OK) {		//check HAL
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d004      	beq.n	8000aec <sevSeg_I2C1_Init+0x34>
		printf("HAL Not OK :( \n\r");
 8000ae2:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <sevSeg_I2C1_Init+0xbc>)
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f003 fbb7 	bl	8004258 <iprintf>
 8000aea:	e003      	b.n	8000af4 <sevSeg_I2C1_Init+0x3c>
	} else{
		printf("HAL OK :)");
 8000aec:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <sevSeg_I2C1_Init+0xc0>)
 8000aee:	0018      	movs	r0, r3
 8000af0:	f003 fbb2 	bl	8004258 <iprintf>
	}

	//Disable shutdown mode
	HalRet = HAL_I2C_Master_Transmit(&hi2c1, (sevSeg_addr), sevSeg_SD_ONBuff, 2, HAL_MAX_DELAY);
 8000af4:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <sevSeg_I2C1_Init+0xb0>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b299      	uxth	r1, r3
 8000afa:	1dfc      	adds	r4, r7, #7
 8000afc:	4a1f      	ldr	r2, [pc, #124]	; (8000b7c <sevSeg_I2C1_Init+0xc4>)
 8000afe:	481c      	ldr	r0, [pc, #112]	; (8000b70 <sevSeg_I2C1_Init+0xb8>)
 8000b00:	2301      	movs	r3, #1
 8000b02:	425b      	negs	r3, r3
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2302      	movs	r3, #2
 8000b08:	f000 fe3a 	bl	8001780 <HAL_I2C_Master_Transmit>
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	7023      	strb	r3, [r4, #0]

	if(HalRet != HAL_OK) {		//check HAL
 8000b10:	1dfb      	adds	r3, r7, #7
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d004      	beq.n	8000b22 <sevSeg_I2C1_Init+0x6a>
		printf("HAL Not OK :( \n\r");
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <sevSeg_I2C1_Init+0xbc>)
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f003 fb9c 	bl	8004258 <iprintf>
 8000b20:	e003      	b.n	8000b2a <sevSeg_I2C1_Init+0x72>
	} else {
		printf("HAL OK :)");
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <sevSeg_I2C1_Init+0xc0>)
 8000b24:	0018      	movs	r0, r3
 8000b26:	f003 fb97 	bl	8004258 <iprintf>
	}

	//Set to test mode
	HalRet = HAL_I2C_Master_Transmit(&hi2c1, (sevSeg_addr), sevSeg_testONBuff, 2, HAL_MAX_DELAY);
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <sevSeg_I2C1_Init+0xb0>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b299      	uxth	r1, r3
 8000b30:	1dfc      	adds	r4, r7, #7
 8000b32:	4a13      	ldr	r2, [pc, #76]	; (8000b80 <sevSeg_I2C1_Init+0xc8>)
 8000b34:	480e      	ldr	r0, [pc, #56]	; (8000b70 <sevSeg_I2C1_Init+0xb8>)
 8000b36:	2301      	movs	r3, #1
 8000b38:	425b      	negs	r3, r3
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	f000 fe1f 	bl	8001780 <HAL_I2C_Master_Transmit>
 8000b42:	0003      	movs	r3, r0
 8000b44:	7023      	strb	r3, [r4, #0]

	if(HalRet != HAL_OK) {		//check HAL
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d004      	beq.n	8000b58 <sevSeg_I2C1_Init+0xa0>
		printf("HAL Not OK :( \n\r");
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <sevSeg_I2C1_Init+0xbc>)
 8000b50:	0018      	movs	r0, r3
 8000b52:	f003 fb81 	bl	8004258 <iprintf>
	} else {
		printf("HAL OK :)");
	}

	return;
 8000b56:	e004      	b.n	8000b62 <sevSeg_I2C1_Init+0xaa>
		printf("HAL OK :)");
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <sevSeg_I2C1_Init+0xc0>)
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f003 fb7c 	bl	8004258 <iprintf>
	return;
 8000b60:	46c0      	nop			; (mov r8, r8)

}
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b003      	add	sp, #12
 8000b66:	bd90      	pop	{r4, r7, pc}
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000004 	.word	0x20000004
 8000b70:	200000a4 	.word	0x200000a4
 8000b74:	080052f4 	.word	0x080052f4
 8000b78:	08005308 	.word	0x08005308
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000014 	.word	0x20000014

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <Error_Handler+0x8>
	...

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <HAL_MspInit+0x44>)
 8000b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_MspInit+0x44>)
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_MspInit+0x44>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4013      	ands	r3, r2
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bb4:	2180      	movs	r1, #128	; 0x80
 8000bb6:	0549      	lsls	r1, r1, #21
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	055b      	lsls	r3, r3, #21
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b002      	add	sp, #8
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b095      	sub	sp, #84	; 0x54
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	233c      	movs	r3, #60	; 0x3c
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	0018      	movs	r0, r3
 8000be6:	2314      	movs	r3, #20
 8000be8:	001a      	movs	r2, r3
 8000bea:	2100      	movs	r1, #0
 8000bec:	f003 fb2c 	bl	8004248 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf0:	2414      	movs	r4, #20
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	2328      	movs	r3, #40	; 0x28
 8000bf8:	001a      	movs	r2, r3
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	f003 fb24 	bl	8004248 <memset>
  if(hi2c->Instance==I2C1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a22      	ldr	r2, [pc, #136]	; (8000c90 <HAL_I2C_MspInit+0xb8>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d13e      	bne.n	8000c88 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	2220      	movs	r2, #32
 8000c0e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c10:	193b      	adds	r3, r7, r4
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f001 fe77 	bl	800290c <HAL_RCCEx_PeriphCLKConfig>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c22:	f7ff ffaf 	bl	8000b84 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <HAL_I2C_MspInit+0xbc>)
 8000c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <HAL_I2C_MspInit+0xbc>)
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	635a      	str	r2, [r3, #52]	; 0x34
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_I2C_MspInit+0xbc>)
 8000c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c36:	2202      	movs	r2, #2
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000c3e:	213c      	movs	r1, #60	; 0x3c
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	22c0      	movs	r2, #192	; 0xc0
 8000c44:	0092      	lsls	r2, r2, #2
 8000c46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2212      	movs	r2, #18
 8000c4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2206      	movs	r2, #6
 8000c5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <HAL_I2C_MspInit+0xc0>)
 8000c64:	0019      	movs	r1, r3
 8000c66:	0010      	movs	r0, r2
 8000c68:	f000 fb24 	bl	80012b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_I2C_MspInit+0xbc>)
 8000c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_I2C_MspInit+0xbc>)
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	0389      	lsls	r1, r1, #14
 8000c76:	430a      	orrs	r2, r1
 8000c78:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_I2C_MspInit+0xbc>)
 8000c7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	039b      	lsls	r3, r3, #14
 8000c82:	4013      	ands	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b015      	add	sp, #84	; 0x54
 8000c8e:	bd90      	pop	{r4, r7, pc}
 8000c90:	40005400 	.word	0x40005400
 8000c94:	40021000 	.word	0x40021000
 8000c98:	50000400 	.word	0x50000400

08000c9c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c9c:	b590      	push	{r4, r7, lr}
 8000c9e:	b08f      	sub	sp, #60	; 0x3c
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca4:	2410      	movs	r4, #16
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	0018      	movs	r0, r3
 8000caa:	2328      	movs	r3, #40	; 0x28
 8000cac:	001a      	movs	r2, r3
 8000cae:	2100      	movs	r1, #0
 8000cb0:	f003 faca 	bl	8004248 <memset>
  if(hrtc->Instance==RTC)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a19      	ldr	r2, [pc, #100]	; (8000d20 <HAL_RTC_MspInit+0x84>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d12c      	bne.n	8000d18 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	2280      	movs	r2, #128	; 0x80
 8000cc2:	0292      	lsls	r2, r2, #10
 8000cc4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	2280      	movs	r2, #128	; 0x80
 8000cca:	0092      	lsls	r2, r2, #2
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f001 fe1b 	bl	800290c <HAL_RCCEx_PeriphCLKConfig>
 8000cd6:	1e03      	subs	r3, r0, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000cda:	f7ff ff53 	bl	8000b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_RTC_MspInit+0x88>)
 8000ce0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <HAL_RTC_MspInit+0x88>)
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	0209      	lsls	r1, r1, #8
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <HAL_RTC_MspInit+0x88>)
 8000cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_RTC_MspInit+0x88>)
 8000cf2:	2180      	movs	r1, #128	; 0x80
 8000cf4:	00c9      	lsls	r1, r1, #3
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_RTC_MspInit+0x88>)
 8000cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cfe:	2380      	movs	r3, #128	; 0x80
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	4013      	ands	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2002      	movs	r0, #2
 8000d0e:	f000 fa9f 	bl	8001250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000d12:	2002      	movs	r0, #2
 8000d14:	f000 fab1 	bl	800127a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b00f      	add	sp, #60	; 0x3c
 8000d1e:	bd90      	pop	{r4, r7, pc}
 8000d20:	40002800 	.word	0x40002800
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b08b      	sub	sp, #44	; 0x2c
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	2414      	movs	r4, #20
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	0018      	movs	r0, r3
 8000d36:	2314      	movs	r3, #20
 8000d38:	001a      	movs	r2, r3
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f003 fa84 	bl	8004248 <memset>
  if(huart->Instance==USART2)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a1b      	ldr	r2, [pc, #108]	; (8000db4 <HAL_UART_MspInit+0x8c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d130      	bne.n	8000dac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d4a:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <HAL_UART_MspInit+0x90>)
 8000d4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <HAL_UART_MspInit+0x90>)
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	0289      	lsls	r1, r1, #10
 8000d54:	430a      	orrs	r2, r1
 8000d56:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_UART_MspInit+0x90>)
 8000d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	029b      	lsls	r3, r3, #10
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_UART_MspInit+0x90>)
 8000d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <HAL_UART_MspInit+0x90>)
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	635a      	str	r2, [r3, #52]	; 0x34
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_UART_MspInit+0x90>)
 8000d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d76:	2201      	movs	r2, #1
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000d7e:	0021      	movs	r1, r4
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	220c      	movs	r2, #12
 8000d84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	2202      	movs	r2, #2
 8000d8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	2201      	movs	r2, #1
 8000d90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	187a      	adds	r2, r7, r1
 8000da0:	23a0      	movs	r3, #160	; 0xa0
 8000da2:	05db      	lsls	r3, r3, #23
 8000da4:	0011      	movs	r1, r2
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 fa84 	bl	80012b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b00b      	add	sp, #44	; 0x2c
 8000db2:	bd90      	pop	{r4, r7, pc}
 8000db4:	40004400 	.word	0x40004400
 8000db8:	40021000 	.word	0x40021000

08000dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <NMI_Handler+0x4>

08000dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <HardFault_Handler+0x4>

08000dc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de0:	f000 f96e 	bl	80010c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <RTC_TAMP_IRQHandler+0x14>)
 8000df2:	0018      	movs	r0, r3
 8000df4:	f002 fb90 	bl	8003518 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	200000f8 	.word	0x200000f8

08000e04 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */



  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Display_Button_Pin);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f000 fbef 	bl	80015ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Enable_Button_Pin);
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f000 fbec 	bl	80015ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  //NOT the interrupt part for GPIO pin 1 (I think)

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_NRST_Pin);
 8000e1e:	2004      	movs	r0, #4
 8000e20:	f000 fbe4 	bl	80015ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alarm_Set_Button_Pin);
 8000e2e:	2010      	movs	r0, #16
 8000e30:	f000 fbdc 	bl	80015ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Hour_Set_Button_Pin);
 8000e34:	2020      	movs	r0, #32
 8000e36:	f000 fbd9 	bl	80015ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Snooze_Button_Pin);
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	011b      	lsls	r3, r3, #4
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f000 fbd4 	bl	80015ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Minute_Set_Button_Pin);
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	015b      	lsls	r3, r3, #5
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f000 fbcf 	bl	80015ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	e00a      	b.n	8000e7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e66:	e000      	b.n	8000e6a <_read+0x16>
 8000e68:	bf00      	nop
 8000e6a:	0001      	movs	r1, r0
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	60ba      	str	r2, [r7, #8]
 8000e72:	b2ca      	uxtb	r2, r1
 8000e74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	dbf0      	blt.n	8000e66 <_read+0x12>
  }

  return len;
 8000e84:	687b      	ldr	r3, [r7, #4]
}
 8000e86:	0018      	movs	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b006      	add	sp, #24
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	e009      	b.n	8000eb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	1c5a      	adds	r2, r3, #1
 8000ea4:	60ba      	str	r2, [r7, #8]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f7ff fad7 	bl	800045c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	dbf1      	blt.n	8000ea0 <_write+0x12>
  }
  return len;
 8000ebc:	687b      	ldr	r3, [r7, #4]
}
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b006      	add	sp, #24
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <_close>:

int _close(int file)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	425b      	negs	r3, r3
}
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b002      	add	sp, #8
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	0192      	lsls	r2, r2, #6
 8000eea:	605a      	str	r2, [r3, #4]
  return 0;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	0018      	movs	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b002      	add	sp, #8
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <_isatty>:

int _isatty(int file)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	0018      	movs	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b002      	add	sp, #8
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	0018      	movs	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b004      	add	sp, #16
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f28:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <_sbrk+0x5c>)
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <_sbrk+0x60>)
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d102      	bne.n	8000f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <_sbrk+0x64>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <_sbrk+0x68>)
 8000f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	18d3      	adds	r3, r2, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d207      	bcs.n	8000f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f50:	f003 f950 	bl	80041f4 <__errno>
 8000f54:	0003      	movs	r3, r0
 8000f56:	220c      	movs	r2, #12
 8000f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	425b      	negs	r3, r3
 8000f5e:	e009      	b.n	8000f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <_sbrk+0x64>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f66:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	18d2      	adds	r2, r2, r3
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <_sbrk+0x64>)
 8000f70:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b006      	add	sp, #24
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20002000 	.word	0x20002000
 8000f80:	00000400 	.word	0x00000400
 8000f84:	200001b8 	.word	0x200001b8
 8000f88:	200001d0 	.word	0x200001d0

08000f8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f9c:	f7ff fff6 	bl	8000f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa0:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fa2:	490d      	ldr	r1, [pc, #52]	; (8000fd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <LoopForever+0xe>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb8:	4c0a      	ldr	r4, [pc, #40]	; (8000fe4 <LoopForever+0x16>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fc6:	f003 f91b 	bl	8004200 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fca:	f7ff fa59 	bl	8000480 <main>

08000fce <LoopForever>:

LoopForever:
  b LoopForever
 8000fce:	e7fe      	b.n	8000fce <LoopForever>
  ldr   r0, =_estack
 8000fd0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000fdc:	08005434 	.word	0x08005434
  ldr r2, =_sbss
 8000fe0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000fe4:	200001d0 	.word	0x200001d0

08000fe8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC1_IRQHandler>
	...

08000fec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_Init+0x3c>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_Init+0x3c>)
 8000ffe:	2180      	movs	r1, #128	; 0x80
 8001000:	0049      	lsls	r1, r1, #1
 8001002:	430a      	orrs	r2, r1
 8001004:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001006:	2000      	movs	r0, #0
 8001008:	f000 f810 	bl	800102c <HAL_InitTick>
 800100c:	1e03      	subs	r3, r0, #0
 800100e:	d003      	beq.n	8001018 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
 8001016:	e001      	b.n	800101c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001018:	f7ff fdba 	bl	8000b90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800101c:	1dfb      	adds	r3, r7, #7
 800101e:	781b      	ldrb	r3, [r3, #0]
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	b002      	add	sp, #8
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40022000 	.word	0x40022000

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001034:	230f      	movs	r3, #15
 8001036:	18fb      	adds	r3, r7, r3
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <HAL_InitTick+0x88>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d02b      	beq.n	800109c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <HAL_InitTick+0x8c>)
 8001046:	681c      	ldr	r4, [r3, #0]
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <HAL_InitTick+0x88>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	0019      	movs	r1, r3
 800104e:	23fa      	movs	r3, #250	; 0xfa
 8001050:	0098      	lsls	r0, r3, #2
 8001052:	f7ff f861 	bl	8000118 <__udivsi3>
 8001056:	0003      	movs	r3, r0
 8001058:	0019      	movs	r1, r3
 800105a:	0020      	movs	r0, r4
 800105c:	f7ff f85c 	bl	8000118 <__udivsi3>
 8001060:	0003      	movs	r3, r0
 8001062:	0018      	movs	r0, r3
 8001064:	f000 f919 	bl	800129a <HAL_SYSTICK_Config>
 8001068:	1e03      	subs	r3, r0, #0
 800106a:	d112      	bne.n	8001092 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b03      	cmp	r3, #3
 8001070:	d80a      	bhi.n	8001088 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	2301      	movs	r3, #1
 8001076:	425b      	negs	r3, r3
 8001078:	2200      	movs	r2, #0
 800107a:	0018      	movs	r0, r3
 800107c:	f000 f8e8 	bl	8001250 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_InitTick+0x90>)
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	e00d      	b.n	80010a4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001088:	230f      	movs	r3, #15
 800108a:	18fb      	adds	r3, r7, r3
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	e008      	b.n	80010a4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001092:	230f      	movs	r3, #15
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	e003      	b.n	80010a4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800109c:	230f      	movs	r3, #15
 800109e:	18fb      	adds	r3, r7, r3
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80010a4:	230f      	movs	r3, #15
 80010a6:	18fb      	adds	r3, r7, r3
 80010a8:	781b      	ldrb	r3, [r3, #0]
}
 80010aa:	0018      	movs	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b005      	add	sp, #20
 80010b0:	bd90      	pop	{r4, r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	20000020 	.word	0x20000020
 80010b8:	20000018 	.word	0x20000018
 80010bc:	2000001c 	.word	0x2000001c

080010c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_IncTick+0x1c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	001a      	movs	r2, r3
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <HAL_IncTick+0x20>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	18d2      	adds	r2, r2, r3
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <HAL_IncTick+0x20>)
 80010d2:	601a      	str	r2, [r3, #0]
}
 80010d4:	46c0      	nop			; (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	20000020 	.word	0x20000020
 80010e0:	200001bc 	.word	0x200001bc

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b02      	ldr	r3, [pc, #8]	; (80010f4 <HAL_GetTick+0x10>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	200001bc 	.word	0x200001bc

080010f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	0002      	movs	r2, r0
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b7f      	cmp	r3, #127	; 0x7f
 800110a:	d809      	bhi.n	8001120 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	001a      	movs	r2, r3
 8001112:	231f      	movs	r3, #31
 8001114:	401a      	ands	r2, r3
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <__NVIC_EnableIRQ+0x30>)
 8001118:	2101      	movs	r1, #1
 800111a:	4091      	lsls	r1, r2
 800111c:	000a      	movs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	b002      	add	sp, #8
 8001126:	bd80      	pop	{r7, pc}
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	0002      	movs	r2, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b7f      	cmp	r3, #127	; 0x7f
 8001140:	d828      	bhi.n	8001194 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001142:	4a2f      	ldr	r2, [pc, #188]	; (8001200 <__NVIC_SetPriority+0xd4>)
 8001144:	1dfb      	adds	r3, r7, #7
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b25b      	sxtb	r3, r3
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	33c0      	adds	r3, #192	; 0xc0
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	589b      	ldr	r3, [r3, r2]
 8001152:	1dfa      	adds	r2, r7, #7
 8001154:	7812      	ldrb	r2, [r2, #0]
 8001156:	0011      	movs	r1, r2
 8001158:	2203      	movs	r2, #3
 800115a:	400a      	ands	r2, r1
 800115c:	00d2      	lsls	r2, r2, #3
 800115e:	21ff      	movs	r1, #255	; 0xff
 8001160:	4091      	lsls	r1, r2
 8001162:	000a      	movs	r2, r1
 8001164:	43d2      	mvns	r2, r2
 8001166:	401a      	ands	r2, r3
 8001168:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	019b      	lsls	r3, r3, #6
 800116e:	22ff      	movs	r2, #255	; 0xff
 8001170:	401a      	ands	r2, r3
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	0018      	movs	r0, r3
 8001178:	2303      	movs	r3, #3
 800117a:	4003      	ands	r3, r0
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001180:	481f      	ldr	r0, [pc, #124]	; (8001200 <__NVIC_SetPriority+0xd4>)
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b25b      	sxtb	r3, r3
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	430a      	orrs	r2, r1
 800118c:	33c0      	adds	r3, #192	; 0xc0
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001192:	e031      	b.n	80011f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001194:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <__NVIC_SetPriority+0xd8>)
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	0019      	movs	r1, r3
 800119c:	230f      	movs	r3, #15
 800119e:	400b      	ands	r3, r1
 80011a0:	3b08      	subs	r3, #8
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3306      	adds	r3, #6
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	18d3      	adds	r3, r2, r3
 80011aa:	3304      	adds	r3, #4
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	1dfa      	adds	r2, r7, #7
 80011b0:	7812      	ldrb	r2, [r2, #0]
 80011b2:	0011      	movs	r1, r2
 80011b4:	2203      	movs	r2, #3
 80011b6:	400a      	ands	r2, r1
 80011b8:	00d2      	lsls	r2, r2, #3
 80011ba:	21ff      	movs	r1, #255	; 0xff
 80011bc:	4091      	lsls	r1, r2
 80011be:	000a      	movs	r2, r1
 80011c0:	43d2      	mvns	r2, r2
 80011c2:	401a      	ands	r2, r3
 80011c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	019b      	lsls	r3, r3, #6
 80011ca:	22ff      	movs	r2, #255	; 0xff
 80011cc:	401a      	ands	r2, r3
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	0018      	movs	r0, r3
 80011d4:	2303      	movs	r3, #3
 80011d6:	4003      	ands	r3, r0
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011dc:	4809      	ldr	r0, [pc, #36]	; (8001204 <__NVIC_SetPriority+0xd8>)
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	001c      	movs	r4, r3
 80011e4:	230f      	movs	r3, #15
 80011e6:	4023      	ands	r3, r4
 80011e8:	3b08      	subs	r3, #8
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	430a      	orrs	r2, r1
 80011ee:	3306      	adds	r3, #6
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	18c3      	adds	r3, r0, r3
 80011f4:	3304      	adds	r3, #4
 80011f6:	601a      	str	r2, [r3, #0]
}
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b003      	add	sp, #12
 80011fe:	bd90      	pop	{r4, r7, pc}
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	1e5a      	subs	r2, r3, #1
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	045b      	lsls	r3, r3, #17
 8001218:	429a      	cmp	r2, r3
 800121a:	d301      	bcc.n	8001220 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121c:	2301      	movs	r3, #1
 800121e:	e010      	b.n	8001242 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <SysTick_Config+0x44>)
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	3a01      	subs	r2, #1
 8001226:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001228:	2301      	movs	r3, #1
 800122a:	425b      	negs	r3, r3
 800122c:	2103      	movs	r1, #3
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff ff7c 	bl	800112c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <SysTick_Config+0x44>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <SysTick_Config+0x44>)
 800123c:	2207      	movs	r2, #7
 800123e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001240:	2300      	movs	r3, #0
}
 8001242:	0018      	movs	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	b002      	add	sp, #8
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	e000e010 	.word	0xe000e010

08001250 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	210f      	movs	r1, #15
 800125c:	187b      	adds	r3, r7, r1
 800125e:	1c02      	adds	r2, r0, #0
 8001260:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	187b      	adds	r3, r7, r1
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b25b      	sxtb	r3, r3
 800126a:	0011      	movs	r1, r2
 800126c:	0018      	movs	r0, r3
 800126e:	f7ff ff5d 	bl	800112c <__NVIC_SetPriority>
}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	46bd      	mov	sp, r7
 8001276:	b004      	add	sp, #16
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	0002      	movs	r2, r0
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	b25b      	sxtb	r3, r3
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	b002      	add	sp, #8
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7ff ffaf 	bl	8001208 <SysTick_Config>
 80012aa:	0003      	movs	r3, r0
}
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b002      	add	sp, #8
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c2:	e147      	b.n	8001554 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2101      	movs	r1, #1
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	4091      	lsls	r1, r2
 80012ce:	000a      	movs	r2, r1
 80012d0:	4013      	ands	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d100      	bne.n	80012dc <HAL_GPIO_Init+0x28>
 80012da:	e138      	b.n	800154e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2203      	movs	r2, #3
 80012e2:	4013      	ands	r3, r2
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d005      	beq.n	80012f4 <HAL_GPIO_Init+0x40>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2203      	movs	r2, #3
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d130      	bne.n	8001356 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	409a      	lsls	r2, r3
 8001302:	0013      	movs	r3, r2
 8001304:	43da      	mvns	r2, r3
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	409a      	lsls	r2, r3
 8001316:	0013      	movs	r3, r2
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800132a:	2201      	movs	r2, #1
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
 8001330:	0013      	movs	r3, r2
 8001332:	43da      	mvns	r2, r3
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	091b      	lsrs	r3, r3, #4
 8001340:	2201      	movs	r2, #1
 8001342:	401a      	ands	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	409a      	lsls	r2, r3
 8001348:	0013      	movs	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2203      	movs	r2, #3
 800135c:	4013      	ands	r3, r2
 800135e:	2b03      	cmp	r3, #3
 8001360:	d017      	beq.n	8001392 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	2203      	movs	r2, #3
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	43da      	mvns	r2, r3
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	409a      	lsls	r2, r3
 8001384:	0013      	movs	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2203      	movs	r2, #3
 8001398:	4013      	ands	r3, r2
 800139a:	2b02      	cmp	r3, #2
 800139c:	d123      	bne.n	80013e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	08da      	lsrs	r2, r3, #3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3208      	adds	r2, #8
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	58d3      	ldr	r3, [r2, r3]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	2207      	movs	r2, #7
 80013b0:	4013      	ands	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	220f      	movs	r2, #15
 80013b6:	409a      	lsls	r2, r3
 80013b8:	0013      	movs	r3, r2
 80013ba:	43da      	mvns	r2, r3
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	691a      	ldr	r2, [r3, #16]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	2107      	movs	r1, #7
 80013ca:	400b      	ands	r3, r1
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	409a      	lsls	r2, r3
 80013d0:	0013      	movs	r3, r2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	08da      	lsrs	r2, r3, #3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3208      	adds	r2, #8
 80013e0:	0092      	lsls	r2, r2, #2
 80013e2:	6939      	ldr	r1, [r7, #16]
 80013e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	409a      	lsls	r2, r3
 80013f4:	0013      	movs	r3, r2
 80013f6:	43da      	mvns	r2, r3
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2203      	movs	r2, #3
 8001404:	401a      	ands	r2, r3
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	409a      	lsls	r2, r3
 800140c:	0013      	movs	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	23c0      	movs	r3, #192	; 0xc0
 8001420:	029b      	lsls	r3, r3, #10
 8001422:	4013      	ands	r3, r2
 8001424:	d100      	bne.n	8001428 <HAL_GPIO_Init+0x174>
 8001426:	e092      	b.n	800154e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001428:	4a50      	ldr	r2, [pc, #320]	; (800156c <HAL_GPIO_Init+0x2b8>)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	3318      	adds	r3, #24
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	589b      	ldr	r3, [r3, r2]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	2203      	movs	r2, #3
 800143a:	4013      	ands	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	220f      	movs	r2, #15
 8001440:	409a      	lsls	r2, r3
 8001442:	0013      	movs	r3, r2
 8001444:	43da      	mvns	r2, r3
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	23a0      	movs	r3, #160	; 0xa0
 8001450:	05db      	lsls	r3, r3, #23
 8001452:	429a      	cmp	r2, r3
 8001454:	d013      	beq.n	800147e <HAL_GPIO_Init+0x1ca>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a45      	ldr	r2, [pc, #276]	; (8001570 <HAL_GPIO_Init+0x2bc>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d00d      	beq.n	800147a <HAL_GPIO_Init+0x1c6>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a44      	ldr	r2, [pc, #272]	; (8001574 <HAL_GPIO_Init+0x2c0>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d007      	beq.n	8001476 <HAL_GPIO_Init+0x1c2>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a43      	ldr	r2, [pc, #268]	; (8001578 <HAL_GPIO_Init+0x2c4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_GPIO_Init+0x1be>
 800146e:	2303      	movs	r3, #3
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x1cc>
 8001472:	2305      	movs	r3, #5
 8001474:	e004      	b.n	8001480 <HAL_GPIO_Init+0x1cc>
 8001476:	2302      	movs	r3, #2
 8001478:	e002      	b.n	8001480 <HAL_GPIO_Init+0x1cc>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x1cc>
 800147e:	2300      	movs	r3, #0
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	2103      	movs	r1, #3
 8001484:	400a      	ands	r2, r1
 8001486:	00d2      	lsls	r2, r2, #3
 8001488:	4093      	lsls	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001490:	4936      	ldr	r1, [pc, #216]	; (800156c <HAL_GPIO_Init+0x2b8>)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3318      	adds	r3, #24
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800149e:	4b33      	ldr	r3, [pc, #204]	; (800156c <HAL_GPIO_Init+0x2b8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	43da      	mvns	r2, r3
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	035b      	lsls	r3, r3, #13
 80014b6:	4013      	ands	r3, r2
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014c2:	4b2a      	ldr	r3, [pc, #168]	; (800156c <HAL_GPIO_Init+0x2b8>)
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <HAL_GPIO_Init+0x2b8>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	43da      	mvns	r2, r3
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	039b      	lsls	r3, r3, #14
 80014e0:	4013      	ands	r3, r2
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <HAL_GPIO_Init+0x2b8>)
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014f2:	4a1e      	ldr	r2, [pc, #120]	; (800156c <HAL_GPIO_Init+0x2b8>)
 80014f4:	2384      	movs	r3, #132	; 0x84
 80014f6:	58d3      	ldr	r3, [r2, r3]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	43da      	mvns	r2, r3
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	029b      	lsls	r3, r3, #10
 800150c:	4013      	ands	r3, r2
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001518:	4914      	ldr	r1, [pc, #80]	; (800156c <HAL_GPIO_Init+0x2b8>)
 800151a:	2284      	movs	r2, #132	; 0x84
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <HAL_GPIO_Init+0x2b8>)
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	58d3      	ldr	r3, [r2, r3]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43da      	mvns	r2, r3
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	025b      	lsls	r3, r3, #9
 800153a:	4013      	ands	r3, r2
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001546:	4909      	ldr	r1, [pc, #36]	; (800156c <HAL_GPIO_Init+0x2b8>)
 8001548:	2280      	movs	r2, #128	; 0x80
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3301      	adds	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	40da      	lsrs	r2, r3
 800155c:	1e13      	subs	r3, r2, #0
 800155e:	d000      	beq.n	8001562 <HAL_GPIO_Init+0x2ae>
 8001560:	e6b0      	b.n	80012c4 <HAL_GPIO_Init+0x10>
  }
}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	b006      	add	sp, #24
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40021800 	.word	0x40021800
 8001570:	50000400 	.word	0x50000400
 8001574:	50000800 	.word	0x50000800
 8001578:	50000c00 	.word	0x50000c00

0800157c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	0008      	movs	r0, r1
 8001586:	0011      	movs	r1, r2
 8001588:	1cbb      	adds	r3, r7, #2
 800158a:	1c02      	adds	r2, r0, #0
 800158c:	801a      	strh	r2, [r3, #0]
 800158e:	1c7b      	adds	r3, r7, #1
 8001590:	1c0a      	adds	r2, r1, #0
 8001592:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001594:	1c7b      	adds	r3, r7, #1
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d004      	beq.n	80015a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800159c:	1cbb      	adds	r3, r7, #2
 800159e:	881a      	ldrh	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015a4:	e003      	b.n	80015ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015a6:	1cbb      	adds	r3, r7, #2
 80015a8:	881a      	ldrh	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b002      	add	sp, #8
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b084      	sub	sp, #16
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	000a      	movs	r2, r1
 80015c0:	1cbb      	adds	r3, r7, #2
 80015c2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015ca:	1cbb      	adds	r3, r7, #2
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4013      	ands	r3, r2
 80015d2:	041a      	lsls	r2, r3, #16
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	1cb9      	adds	r1, r7, #2
 80015da:	8809      	ldrh	r1, [r1, #0]
 80015dc:	400b      	ands	r3, r1
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	619a      	str	r2, [r3, #24]
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b004      	add	sp, #16
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	0002      	movs	r2, r0
 80015f4:	1dbb      	adds	r3, r7, #6
 80015f6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80015f8:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	1dba      	adds	r2, r7, #6
 80015fe:	8812      	ldrh	r2, [r2, #0]
 8001600:	4013      	ands	r3, r2
 8001602:	d008      	beq.n	8001616 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001604:	4b0d      	ldr	r3, [pc, #52]	; (800163c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001606:	1dba      	adds	r2, r7, #6
 8001608:	8812      	ldrh	r2, [r2, #0]
 800160a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800160c:	1dbb      	adds	r3, r7, #6
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	0018      	movs	r0, r3
 8001612:	f000 f815 	bl	8001640 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	1dba      	adds	r2, r7, #6
 800161c:	8812      	ldrh	r2, [r2, #0]
 800161e:	4013      	ands	r3, r2
 8001620:	d008      	beq.n	8001634 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001624:	1dba      	adds	r2, r7, #6
 8001626:	8812      	ldrh	r2, [r2, #0]
 8001628:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800162a:	1dbb      	adds	r3, r7, #6
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	0018      	movs	r0, r3
 8001630:	f7ff f99e 	bl	8000970 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001634:	46c0      	nop			; (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	b002      	add	sp, #8
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021800 	.word	0x40021800

08001640 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	0002      	movs	r2, r0
 8001648:	1dbb      	adds	r3, r7, #6
 800164a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800164c:	46c0      	nop			; (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b002      	add	sp, #8
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e082      	b.n	800176c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2241      	movs	r2, #65	; 0x41
 800166a:	5c9b      	ldrb	r3, [r3, r2]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d107      	bne.n	8001682 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2240      	movs	r2, #64	; 0x40
 8001676:	2100      	movs	r1, #0
 8001678:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	0018      	movs	r0, r3
 800167e:	f7ff faab 	bl	8000bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2241      	movs	r2, #65	; 0x41
 8001686:	2124      	movs	r1, #36	; 0x24
 8001688:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2101      	movs	r1, #1
 8001696:	438a      	bics	r2, r1
 8001698:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4934      	ldr	r1, [pc, #208]	; (8001774 <HAL_I2C_Init+0x120>)
 80016a4:	400a      	ands	r2, r1
 80016a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4931      	ldr	r1, [pc, #196]	; (8001778 <HAL_I2C_Init+0x124>)
 80016b4:	400a      	ands	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d108      	bne.n	80016d2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2180      	movs	r1, #128	; 0x80
 80016ca:	0209      	lsls	r1, r1, #8
 80016cc:	430a      	orrs	r2, r1
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	e007      	b.n	80016e2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2184      	movs	r1, #132	; 0x84
 80016dc:	0209      	lsls	r1, r1, #8
 80016de:	430a      	orrs	r2, r1
 80016e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d104      	bne.n	80016f4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	491f      	ldr	r1, [pc, #124]	; (800177c <HAL_I2C_Init+0x128>)
 8001700:	430a      	orrs	r2, r1
 8001702:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	491a      	ldr	r1, [pc, #104]	; (8001778 <HAL_I2C_Init+0x124>)
 8001710:	400a      	ands	r2, r1
 8001712:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	431a      	orrs	r2, r3
 800171e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69d9      	ldr	r1, [r3, #28]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a1a      	ldr	r2, [r3, #32]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2101      	movs	r1, #1
 800174a:	430a      	orrs	r2, r1
 800174c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2241      	movs	r2, #65	; 0x41
 8001758:	2120      	movs	r1, #32
 800175a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2242      	movs	r2, #66	; 0x42
 8001766:	2100      	movs	r1, #0
 8001768:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	0018      	movs	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	b002      	add	sp, #8
 8001772:	bd80      	pop	{r7, pc}
 8001774:	f0ffffff 	.word	0xf0ffffff
 8001778:	ffff7fff 	.word	0xffff7fff
 800177c:	02008000 	.word	0x02008000

08001780 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af02      	add	r7, sp, #8
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	0008      	movs	r0, r1
 800178a:	607a      	str	r2, [r7, #4]
 800178c:	0019      	movs	r1, r3
 800178e:	230a      	movs	r3, #10
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	1c02      	adds	r2, r0, #0
 8001794:	801a      	strh	r2, [r3, #0]
 8001796:	2308      	movs	r3, #8
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	1c0a      	adds	r2, r1, #0
 800179c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2241      	movs	r2, #65	; 0x41
 80017a2:	5c9b      	ldrb	r3, [r3, r2]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b20      	cmp	r3, #32
 80017a8:	d000      	beq.n	80017ac <HAL_I2C_Master_Transmit+0x2c>
 80017aa:	e0e7      	b.n	800197c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2240      	movs	r2, #64	; 0x40
 80017b0:	5c9b      	ldrb	r3, [r3, r2]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <HAL_I2C_Master_Transmit+0x3a>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e0e1      	b.n	800197e <HAL_I2C_Master_Transmit+0x1fe>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2240      	movs	r2, #64	; 0x40
 80017be:	2101      	movs	r1, #1
 80017c0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017c2:	f7ff fc8f 	bl	80010e4 <HAL_GetTick>
 80017c6:	0003      	movs	r3, r0
 80017c8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	0219      	lsls	r1, r3, #8
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2319      	movs	r3, #25
 80017d6:	2201      	movs	r2, #1
 80017d8:	f000 f8fc 	bl	80019d4 <I2C_WaitOnFlagUntilTimeout>
 80017dc:	1e03      	subs	r3, r0, #0
 80017de:	d001      	beq.n	80017e4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0cc      	b.n	800197e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2241      	movs	r2, #65	; 0x41
 80017e8:	2121      	movs	r1, #33	; 0x21
 80017ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2242      	movs	r2, #66	; 0x42
 80017f0:	2110      	movs	r1, #16
 80017f2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2208      	movs	r2, #8
 8001804:	18ba      	adds	r2, r7, r2
 8001806:	8812      	ldrh	r2, [r2, #0]
 8001808:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001814:	b29b      	uxth	r3, r3
 8001816:	2bff      	cmp	r3, #255	; 0xff
 8001818:	d911      	bls.n	800183e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	22ff      	movs	r2, #255	; 0xff
 800181e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001824:	b2da      	uxtb	r2, r3
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	045c      	lsls	r4, r3, #17
 800182a:	230a      	movs	r3, #10
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	8819      	ldrh	r1, [r3, #0]
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	4b55      	ldr	r3, [pc, #340]	; (8001988 <HAL_I2C_Master_Transmit+0x208>)
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	0023      	movs	r3, r4
 8001838:	f000 fa86 	bl	8001d48 <I2C_TransferConfig>
 800183c:	e075      	b.n	800192a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001842:	b29a      	uxth	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184c:	b2da      	uxtb	r2, r3
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	049c      	lsls	r4, r3, #18
 8001852:	230a      	movs	r3, #10
 8001854:	18fb      	adds	r3, r7, r3
 8001856:	8819      	ldrh	r1, [r3, #0]
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	4b4b      	ldr	r3, [pc, #300]	; (8001988 <HAL_I2C_Master_Transmit+0x208>)
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	0023      	movs	r3, r4
 8001860:	f000 fa72 	bl	8001d48 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001864:	e061      	b.n	800192a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	0018      	movs	r0, r3
 800186e:	f000 f8f0 	bl	8001a52 <I2C_WaitOnTXISFlagUntilTimeout>
 8001872:	1e03      	subs	r3, r0, #0
 8001874:	d001      	beq.n	800187a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e081      	b.n	800197e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	781a      	ldrb	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001894:	b29b      	uxth	r3, r3
 8001896:	3b01      	subs	r3, #1
 8001898:	b29a      	uxth	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a2:	3b01      	subs	r3, #1
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d03a      	beq.n	800192a <HAL_I2C_Master_Transmit+0x1aa>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d136      	bne.n	800192a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	0013      	movs	r3, r2
 80018c6:	2200      	movs	r2, #0
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	f000 f883 	bl	80019d4 <I2C_WaitOnFlagUntilTimeout>
 80018ce:	1e03      	subs	r3, r0, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e053      	b.n	800197e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018da:	b29b      	uxth	r3, r3
 80018dc:	2bff      	cmp	r3, #255	; 0xff
 80018de:	d911      	bls.n	8001904 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	22ff      	movs	r2, #255	; 0xff
 80018e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	045c      	lsls	r4, r3, #17
 80018f0:	230a      	movs	r3, #10
 80018f2:	18fb      	adds	r3, r7, r3
 80018f4:	8819      	ldrh	r1, [r3, #0]
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	2300      	movs	r3, #0
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	0023      	movs	r3, r4
 80018fe:	f000 fa23 	bl	8001d48 <I2C_TransferConfig>
 8001902:	e012      	b.n	800192a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001912:	b2da      	uxtb	r2, r3
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	049c      	lsls	r4, r3, #18
 8001918:	230a      	movs	r3, #10
 800191a:	18fb      	adds	r3, r7, r3
 800191c:	8819      	ldrh	r1, [r3, #0]
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	2300      	movs	r3, #0
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	0023      	movs	r3, r4
 8001926:	f000 fa0f 	bl	8001d48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192e:	b29b      	uxth	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d198      	bne.n	8001866 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	0018      	movs	r0, r3
 800193c:	f000 f8c8 	bl	8001ad0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001940:	1e03      	subs	r3, r0, #0
 8001942:	d001      	beq.n	8001948 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e01a      	b.n	800197e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2220      	movs	r2, #32
 800194e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	490c      	ldr	r1, [pc, #48]	; (800198c <HAL_I2C_Master_Transmit+0x20c>)
 800195c:	400a      	ands	r2, r1
 800195e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2241      	movs	r2, #65	; 0x41
 8001964:	2120      	movs	r1, #32
 8001966:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2242      	movs	r2, #66	; 0x42
 800196c:	2100      	movs	r1, #0
 800196e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2240      	movs	r2, #64	; 0x40
 8001974:	2100      	movs	r1, #0
 8001976:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	e000      	b.n	800197e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800197c:	2302      	movs	r3, #2
  }
}
 800197e:	0018      	movs	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	b007      	add	sp, #28
 8001984:	bd90      	pop	{r4, r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	80002000 	.word	0x80002000
 800198c:	fe00e800 	.word	0xfe00e800

08001990 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2202      	movs	r2, #2
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d103      	bne.n	80019ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2200      	movs	r2, #0
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2201      	movs	r2, #1
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d007      	beq.n	80019cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	699a      	ldr	r2, [r3, #24]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2101      	movs	r1, #1
 80019c8:	430a      	orrs	r2, r1
 80019ca:	619a      	str	r2, [r3, #24]
  }
}
 80019cc:	46c0      	nop			; (mov r8, r8)
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b002      	add	sp, #8
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	1dfb      	adds	r3, r7, #7
 80019e2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019e4:	e021      	b.n	8001a2a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	d01e      	beq.n	8001a2a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ec:	f7ff fb7a 	bl	80010e4 <HAL_GetTick>
 80019f0:	0002      	movs	r2, r0
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d302      	bcc.n	8001a02 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d113      	bne.n	8001a2a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	2220      	movs	r2, #32
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2241      	movs	r2, #65	; 0x41
 8001a12:	2120      	movs	r1, #32
 8001a14:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2242      	movs	r2, #66	; 0x42
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2240      	movs	r2, #64	; 0x40
 8001a22:	2100      	movs	r1, #0
 8001a24:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00f      	b.n	8001a4a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	4013      	ands	r3, r2
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	425a      	negs	r2, r3
 8001a3a:	4153      	adcs	r3, r2
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	001a      	movs	r2, r3
 8001a40:	1dfb      	adds	r3, r7, #7
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d0ce      	beq.n	80019e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b004      	add	sp, #16
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b084      	sub	sp, #16
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a5e:	e02b      	b.n	8001ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	68b9      	ldr	r1, [r7, #8]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	0018      	movs	r0, r3
 8001a68:	f000 f86e 	bl	8001b48 <I2C_IsErrorOccurred>
 8001a6c:	1e03      	subs	r3, r0, #0
 8001a6e:	d001      	beq.n	8001a74 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e029      	b.n	8001ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	3301      	adds	r3, #1
 8001a78:	d01e      	beq.n	8001ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a7a:	f7ff fb33 	bl	80010e4 <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d302      	bcc.n	8001a90 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d113      	bne.n	8001ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	2220      	movs	r2, #32
 8001a96:	431a      	orrs	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2241      	movs	r2, #65	; 0x41
 8001aa0:	2120      	movs	r1, #32
 8001aa2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2242      	movs	r2, #66	; 0x42
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2240      	movs	r2, #64	; 0x40
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e007      	b.n	8001ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d1cc      	bne.n	8001a60 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	0018      	movs	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b004      	add	sp, #16
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001adc:	e028      	b.n	8001b30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f000 f82f 	bl	8001b48 <I2C_IsErrorOccurred>
 8001aea:	1e03      	subs	r3, r0, #0
 8001aec:	d001      	beq.n	8001af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e026      	b.n	8001b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001af2:	f7ff faf7 	bl	80010e4 <HAL_GetTick>
 8001af6:	0002      	movs	r2, r0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	68ba      	ldr	r2, [r7, #8]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d302      	bcc.n	8001b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d113      	bne.n	8001b30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2241      	movs	r2, #65	; 0x41
 8001b18:	2120      	movs	r1, #32
 8001b1a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2242      	movs	r2, #66	; 0x42
 8001b20:	2100      	movs	r1, #0
 8001b22:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2240      	movs	r2, #64	; 0x40
 8001b28:	2100      	movs	r1, #0
 8001b2a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e007      	b.n	8001b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	2220      	movs	r2, #32
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b20      	cmp	r3, #32
 8001b3c:	d1cf      	bne.n	8001ade <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b004      	add	sp, #16
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b08b      	sub	sp, #44	; 0x2c
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b54:	2327      	movs	r3, #39	; 0x27
 8001b56:	18fb      	adds	r3, r7, r3
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2210      	movs	r2, #16
 8001b70:	4013      	ands	r3, r2
 8001b72:	d100      	bne.n	8001b76 <I2C_IsErrorOccurred+0x2e>
 8001b74:	e082      	b.n	8001c7c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2210      	movs	r2, #16
 8001b7c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b7e:	e060      	b.n	8001c42 <I2C_IsErrorOccurred+0xfa>
 8001b80:	2427      	movs	r4, #39	; 0x27
 8001b82:	193b      	adds	r3, r7, r4
 8001b84:	193a      	adds	r2, r7, r4
 8001b86:	7812      	ldrb	r2, [r2, #0]
 8001b88:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	d058      	beq.n	8001c42 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b90:	f7ff faa8 	bl	80010e4 <HAL_GetTick>
 8001b94:	0002      	movs	r2, r0
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d306      	bcc.n	8001bae <I2C_IsErrorOccurred+0x66>
 8001ba0:	193b      	adds	r3, r7, r4
 8001ba2:	193a      	adds	r2, r7, r4
 8001ba4:	7812      	ldrb	r2, [r2, #0]
 8001ba6:	701a      	strb	r2, [r3, #0]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d149      	bne.n	8001c42 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	01db      	lsls	r3, r3, #7
 8001bb8:	4013      	ands	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001bbc:	2013      	movs	r0, #19
 8001bbe:	183b      	adds	r3, r7, r0
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	2142      	movs	r1, #66	; 0x42
 8001bc4:	5c52      	ldrb	r2, [r2, r1]
 8001bc6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	699a      	ldr	r2, [r3, #24]
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d126      	bne.n	8001c2a <I2C_IsErrorOccurred+0xe2>
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	01db      	lsls	r3, r3, #7
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d021      	beq.n	8001c2a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001be6:	183b      	adds	r3, r7, r0
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b20      	cmp	r3, #32
 8001bec:	d01d      	beq.n	8001c2a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2180      	movs	r1, #128	; 0x80
 8001bfa:	01c9      	lsls	r1, r1, #7
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c00:	f7ff fa70 	bl	80010e4 <HAL_GetTick>
 8001c04:	0003      	movs	r3, r0
 8001c06:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c08:	e00f      	b.n	8001c2a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c0a:	f7ff fa6b 	bl	80010e4 <HAL_GetTick>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b19      	cmp	r3, #25
 8001c16:	d908      	bls.n	8001c2a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c20:	2327      	movs	r3, #39	; 0x27
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]

              break;
 8001c28:	e00b      	b.n	8001c42 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	2220      	movs	r2, #32
 8001c32:	4013      	ands	r3, r2
 8001c34:	2127      	movs	r1, #39	; 0x27
 8001c36:	187a      	adds	r2, r7, r1
 8001c38:	1879      	adds	r1, r7, r1
 8001c3a:	7809      	ldrb	r1, [r1, #0]
 8001c3c:	7011      	strb	r1, [r2, #0]
 8001c3e:	2b20      	cmp	r3, #32
 8001c40:	d1e3      	bne.n	8001c0a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	2220      	movs	r2, #32
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b20      	cmp	r3, #32
 8001c4e:	d004      	beq.n	8001c5a <I2C_IsErrorOccurred+0x112>
 8001c50:	2327      	movs	r3, #39	; 0x27
 8001c52:	18fb      	adds	r3, r7, r3
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d092      	beq.n	8001b80 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c5a:	2327      	movs	r3, #39	; 0x27
 8001c5c:	18fb      	adds	r3, r7, r3
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d103      	bne.n	8001c6c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	2204      	movs	r2, #4
 8001c70:	4313      	orrs	r3, r2
 8001c72:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c74:	2327      	movs	r3, #39	; 0x27
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d00c      	beq.n	8001ca8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	2201      	movs	r2, #1
 8001c92:	4313      	orrs	r3, r2
 8001c94:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	0052      	lsls	r2, r2, #1
 8001c9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ca0:	2327      	movs	r3, #39	; 0x27
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d00c      	beq.n	8001ccc <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2280      	movs	r2, #128	; 0x80
 8001cc0:	00d2      	lsls	r2, r2, #3
 8001cc2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cc4:	2327      	movs	r3, #39	; 0x27
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	2201      	movs	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d00c      	beq.n	8001cf0 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2280      	movs	r2, #128	; 0x80
 8001ce4:	0092      	lsls	r2, r2, #2
 8001ce6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ce8:	2327      	movs	r3, #39	; 0x27
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	2201      	movs	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001cf0:	2327      	movs	r3, #39	; 0x27
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01d      	beq.n	8001d36 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f7ff fe47 	bl	8001990 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	490d      	ldr	r1, [pc, #52]	; (8001d44 <I2C_IsErrorOccurred+0x1fc>)
 8001d0e:	400a      	ands	r2, r1
 8001d10:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2241      	movs	r2, #65	; 0x41
 8001d22:	2120      	movs	r1, #32
 8001d24:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2242      	movs	r2, #66	; 0x42
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2240      	movs	r2, #64	; 0x40
 8001d32:	2100      	movs	r1, #0
 8001d34:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001d36:	2327      	movs	r3, #39	; 0x27
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	781b      	ldrb	r3, [r3, #0]
}
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b00b      	add	sp, #44	; 0x2c
 8001d42:	bd90      	pop	{r4, r7, pc}
 8001d44:	fe00e800 	.word	0xfe00e800

08001d48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	0008      	movs	r0, r1
 8001d52:	0011      	movs	r1, r2
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	240a      	movs	r4, #10
 8001d58:	193b      	adds	r3, r7, r4
 8001d5a:	1c02      	adds	r2, r0, #0
 8001d5c:	801a      	strh	r2, [r3, #0]
 8001d5e:	2009      	movs	r0, #9
 8001d60:	183b      	adds	r3, r7, r0
 8001d62:	1c0a      	adds	r2, r1, #0
 8001d64:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d66:	193b      	adds	r3, r7, r4
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	059b      	lsls	r3, r3, #22
 8001d6c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d6e:	183b      	adds	r3, r7, r0
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	0419      	lsls	r1, r3, #16
 8001d74:	23ff      	movs	r3, #255	; 0xff
 8001d76:	041b      	lsls	r3, r3, #16
 8001d78:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d7a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	4313      	orrs	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	085b      	lsrs	r3, r3, #1
 8001d88:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d92:	0d51      	lsrs	r1, r2, #21
 8001d94:	2280      	movs	r2, #128	; 0x80
 8001d96:	00d2      	lsls	r2, r2, #3
 8001d98:	400a      	ands	r2, r1
 8001d9a:	4907      	ldr	r1, [pc, #28]	; (8001db8 <I2C_TransferConfig+0x70>)
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	43d2      	mvns	r2, r2
 8001da0:	401a      	ands	r2, r3
 8001da2:	0011      	movs	r1, r2
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b007      	add	sp, #28
 8001db4:	bd90      	pop	{r4, r7, pc}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	03ff63ff 	.word	0x03ff63ff

08001dbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2241      	movs	r2, #65	; 0x41
 8001dca:	5c9b      	ldrb	r3, [r3, r2]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b20      	cmp	r3, #32
 8001dd0:	d138      	bne.n	8001e44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2240      	movs	r2, #64	; 0x40
 8001dd6:	5c9b      	ldrb	r3, [r3, r2]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e032      	b.n	8001e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2240      	movs	r2, #64	; 0x40
 8001de4:	2101      	movs	r1, #1
 8001de6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2241      	movs	r2, #65	; 0x41
 8001dec:	2124      	movs	r1, #36	; 0x24
 8001dee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	438a      	bics	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4911      	ldr	r1, [pc, #68]	; (8001e50 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6819      	ldr	r1, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2241      	movs	r2, #65	; 0x41
 8001e34:	2120      	movs	r1, #32
 8001e36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2240      	movs	r2, #64	; 0x40
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	e000      	b.n	8001e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e44:	2302      	movs	r3, #2
  }
}
 8001e46:	0018      	movs	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	b002      	add	sp, #8
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	ffffefff 	.word	0xffffefff

08001e54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2241      	movs	r2, #65	; 0x41
 8001e62:	5c9b      	ldrb	r3, [r3, r2]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b20      	cmp	r3, #32
 8001e68:	d139      	bne.n	8001ede <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2240      	movs	r2, #64	; 0x40
 8001e6e:	5c9b      	ldrb	r3, [r3, r2]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e033      	b.n	8001ee0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2240      	movs	r2, #64	; 0x40
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2241      	movs	r2, #65	; 0x41
 8001e84:	2124      	movs	r1, #36	; 0x24
 8001e86:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2101      	movs	r1, #1
 8001e94:	438a      	bics	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4a11      	ldr	r2, [pc, #68]	; (8001ee8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2241      	movs	r2, #65	; 0x41
 8001ece:	2120      	movs	r1, #32
 8001ed0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2240      	movs	r2, #64	; 0x40
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e000      	b.n	8001ee0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ede:	2302      	movs	r3, #2
  }
}
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b004      	add	sp, #16
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	fffff0ff 	.word	0xfffff0ff

08001eec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a19      	ldr	r2, [pc, #100]	; (8001f60 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	0019      	movs	r1, r3
 8001efe:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d11f      	bne.n	8001f50 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001f10:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	0013      	movs	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	189b      	adds	r3, r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4912      	ldr	r1, [pc, #72]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f7fe f8fa 	bl	8000118 <__udivsi3>
 8001f24:	0003      	movs	r3, r0
 8001f26:	3301      	adds	r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f2a:	e008      	b.n	8001f3e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	e001      	b.n	8001f3e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e009      	b.n	8001f52 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	401a      	ands	r2, r3
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d0ed      	beq.n	8001f2c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b004      	add	sp, #16
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	40007000 	.word	0x40007000
 8001f60:	fffff9ff 	.word	0xfffff9ff
 8001f64:	20000018 	.word	0x20000018
 8001f68:	000f4240 	.word	0x000f4240

08001f6c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	23e0      	movs	r3, #224	; 0xe0
 8001f76:	01db      	lsls	r3, r3, #7
 8001f78:	4013      	ands	r3, r2
}
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000

08001f84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e2fe      	b.n	8002594 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x1e>
 8001fa0:	e07c      	b.n	800209c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fa2:	4bc3      	ldr	r3, [pc, #780]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2238      	movs	r2, #56	; 0x38
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fac:	4bc0      	ldr	r3, [pc, #768]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	2b10      	cmp	r3, #16
 8001fba:	d102      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x3e>
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d002      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d10b      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc8:	4bb9      	ldr	r3, [pc, #740]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	029b      	lsls	r3, r3, #10
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d062      	beq.n	800209a <HAL_RCC_OscConfig+0x116>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d15e      	bne.n	800209a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e2d9      	b.n	8002594 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	025b      	lsls	r3, r3, #9
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_OscConfig+0x78>
 8001fec:	4bb0      	ldr	r3, [pc, #704]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4baf      	ldr	r3, [pc, #700]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8001ff2:	2180      	movs	r1, #128	; 0x80
 8001ff4:	0249      	lsls	r1, r1, #9
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	e020      	b.n	800203e <HAL_RCC_OscConfig+0xba>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	23a0      	movs	r3, #160	; 0xa0
 8002002:	02db      	lsls	r3, r3, #11
 8002004:	429a      	cmp	r2, r3
 8002006:	d10e      	bne.n	8002026 <HAL_RCC_OscConfig+0xa2>
 8002008:	4ba9      	ldr	r3, [pc, #676]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4ba8      	ldr	r3, [pc, #672]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 800200e:	2180      	movs	r1, #128	; 0x80
 8002010:	02c9      	lsls	r1, r1, #11
 8002012:	430a      	orrs	r2, r1
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	4ba6      	ldr	r3, [pc, #664]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	4ba5      	ldr	r3, [pc, #660]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 800201c:	2180      	movs	r1, #128	; 0x80
 800201e:	0249      	lsls	r1, r1, #9
 8002020:	430a      	orrs	r2, r1
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	e00b      	b.n	800203e <HAL_RCC_OscConfig+0xba>
 8002026:	4ba2      	ldr	r3, [pc, #648]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4ba1      	ldr	r3, [pc, #644]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 800202c:	49a1      	ldr	r1, [pc, #644]	; (80022b4 <HAL_RCC_OscConfig+0x330>)
 800202e:	400a      	ands	r2, r1
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	4b9f      	ldr	r3, [pc, #636]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4b9e      	ldr	r3, [pc, #632]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8002038:	499f      	ldr	r1, [pc, #636]	; (80022b8 <HAL_RCC_OscConfig+0x334>)
 800203a:	400a      	ands	r2, r1
 800203c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d014      	beq.n	8002070 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7ff f84d 	bl	80010e4 <HAL_GetTick>
 800204a:	0003      	movs	r3, r0
 800204c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002050:	f7ff f848 	bl	80010e4 <HAL_GetTick>
 8002054:	0002      	movs	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	; 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e298      	b.n	8002594 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002062:	4b93      	ldr	r3, [pc, #588]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	029b      	lsls	r3, r3, #10
 800206a:	4013      	ands	r3, r2
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0xcc>
 800206e:	e015      	b.n	800209c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7ff f838 	bl	80010e4 <HAL_GetTick>
 8002074:	0003      	movs	r3, r0
 8002076:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800207a:	f7ff f833 	bl	80010e4 <HAL_GetTick>
 800207e:	0002      	movs	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b64      	cmp	r3, #100	; 0x64
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e283      	b.n	8002594 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800208c:	4b88      	ldr	r3, [pc, #544]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	029b      	lsls	r3, r3, #10
 8002094:	4013      	ands	r3, r2
 8002096:	d1f0      	bne.n	800207a <HAL_RCC_OscConfig+0xf6>
 8002098:	e000      	b.n	800209c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2202      	movs	r2, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	d100      	bne.n	80020a8 <HAL_RCC_OscConfig+0x124>
 80020a6:	e099      	b.n	80021dc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020a8:	4b81      	ldr	r3, [pc, #516]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2238      	movs	r2, #56	; 0x38
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020b2:	4b7f      	ldr	r3, [pc, #508]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2203      	movs	r2, #3
 80020b8:	4013      	ands	r3, r2
 80020ba:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	2b10      	cmp	r3, #16
 80020c0:	d102      	bne.n	80020c8 <HAL_RCC_OscConfig+0x144>
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d002      	beq.n	80020ce <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d135      	bne.n	800213a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ce:	4b78      	ldr	r3, [pc, #480]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4013      	ands	r3, r2
 80020d8:	d005      	beq.n	80020e6 <HAL_RCC_OscConfig+0x162>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e256      	b.n	8002594 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e6:	4b72      	ldr	r3, [pc, #456]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4a74      	ldr	r2, [pc, #464]	; (80022bc <HAL_RCC_OscConfig+0x338>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	0019      	movs	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	021a      	lsls	r2, r3, #8
 80020f6:	4b6e      	ldr	r3, [pc, #440]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 80020f8:	430a      	orrs	r2, r1
 80020fa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d112      	bne.n	8002128 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002102:	4b6b      	ldr	r3, [pc, #428]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a6e      	ldr	r2, [pc, #440]	; (80022c0 <HAL_RCC_OscConfig+0x33c>)
 8002108:	4013      	ands	r3, r2
 800210a:	0019      	movs	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	4b67      	ldr	r3, [pc, #412]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8002112:	430a      	orrs	r2, r1
 8002114:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002116:	4b66      	ldr	r3, [pc, #408]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	0adb      	lsrs	r3, r3, #11
 800211c:	2207      	movs	r2, #7
 800211e:	4013      	ands	r3, r2
 8002120:	4a68      	ldr	r2, [pc, #416]	; (80022c4 <HAL_RCC_OscConfig+0x340>)
 8002122:	40da      	lsrs	r2, r3
 8002124:	4b68      	ldr	r3, [pc, #416]	; (80022c8 <HAL_RCC_OscConfig+0x344>)
 8002126:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002128:	4b68      	ldr	r3, [pc, #416]	; (80022cc <HAL_RCC_OscConfig+0x348>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	0018      	movs	r0, r3
 800212e:	f7fe ff7d 	bl	800102c <HAL_InitTick>
 8002132:	1e03      	subs	r3, r0, #0
 8002134:	d051      	beq.n	80021da <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e22c      	b.n	8002594 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d030      	beq.n	80021a4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002142:	4b5b      	ldr	r3, [pc, #364]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a5e      	ldr	r2, [pc, #376]	; (80022c0 <HAL_RCC_OscConfig+0x33c>)
 8002148:	4013      	ands	r3, r2
 800214a:	0019      	movs	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	4b57      	ldr	r3, [pc, #348]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8002152:	430a      	orrs	r2, r1
 8002154:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002156:	4b56      	ldr	r3, [pc, #344]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b55      	ldr	r3, [pc, #340]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 800215c:	2180      	movs	r1, #128	; 0x80
 800215e:	0049      	lsls	r1, r1, #1
 8002160:	430a      	orrs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7fe ffbe 	bl	80010e4 <HAL_GetTick>
 8002168:	0003      	movs	r3, r0
 800216a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216e:	f7fe ffb9 	bl	80010e4 <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e209      	b.n	8002594 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002180:	4b4b      	ldr	r3, [pc, #300]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4013      	ands	r3, r2
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218c:	4b48      	ldr	r3, [pc, #288]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a4a      	ldr	r2, [pc, #296]	; (80022bc <HAL_RCC_OscConfig+0x338>)
 8002192:	4013      	ands	r3, r2
 8002194:	0019      	movs	r1, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	021a      	lsls	r2, r3, #8
 800219c:	4b44      	ldr	r3, [pc, #272]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 800219e:	430a      	orrs	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	e01b      	b.n	80021dc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80021a4:	4b42      	ldr	r3, [pc, #264]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 80021aa:	4949      	ldr	r1, [pc, #292]	; (80022d0 <HAL_RCC_OscConfig+0x34c>)
 80021ac:	400a      	ands	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7fe ff98 	bl	80010e4 <HAL_GetTick>
 80021b4:	0003      	movs	r3, r0
 80021b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ba:	f7fe ff93 	bl	80010e4 <HAL_GetTick>
 80021be:	0002      	movs	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1e3      	b.n	8002594 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021cc:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4013      	ands	r3, r2
 80021d6:	d1f0      	bne.n	80021ba <HAL_RCC_OscConfig+0x236>
 80021d8:	e000      	b.n	80021dc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2208      	movs	r2, #8
 80021e2:	4013      	ands	r3, r2
 80021e4:	d047      	beq.n	8002276 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80021e6:	4b32      	ldr	r3, [pc, #200]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2238      	movs	r2, #56	; 0x38
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b18      	cmp	r3, #24
 80021f0:	d10a      	bne.n	8002208 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80021f2:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 80021f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f6:	2202      	movs	r2, #2
 80021f8:	4013      	ands	r3, r2
 80021fa:	d03c      	beq.n	8002276 <HAL_RCC_OscConfig+0x2f2>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d138      	bne.n	8002276 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e1c5      	b.n	8002594 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d019      	beq.n	8002244 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002210:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8002212:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002214:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8002216:	2101      	movs	r1, #1
 8002218:	430a      	orrs	r2, r1
 800221a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7fe ff62 	bl	80010e4 <HAL_GetTick>
 8002220:	0003      	movs	r3, r0
 8002222:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002226:	f7fe ff5d 	bl	80010e4 <HAL_GetTick>
 800222a:	0002      	movs	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e1ad      	b.n	8002594 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002238:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 800223a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223c:	2202      	movs	r2, #2
 800223e:	4013      	ands	r3, r2
 8002240:	d0f1      	beq.n	8002226 <HAL_RCC_OscConfig+0x2a2>
 8002242:	e018      	b.n	8002276 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002244:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8002246:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 800224a:	2101      	movs	r1, #1
 800224c:	438a      	bics	r2, r1
 800224e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7fe ff48 	bl	80010e4 <HAL_GetTick>
 8002254:	0003      	movs	r3, r0
 8002256:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225a:	f7fe ff43 	bl	80010e4 <HAL_GetTick>
 800225e:	0002      	movs	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e193      	b.n	8002594 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800226c:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 800226e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002270:	2202      	movs	r2, #2
 8002272:	4013      	ands	r3, r2
 8002274:	d1f1      	bne.n	800225a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2204      	movs	r2, #4
 800227c:	4013      	ands	r3, r2
 800227e:	d100      	bne.n	8002282 <HAL_RCC_OscConfig+0x2fe>
 8002280:	e0c6      	b.n	8002410 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002282:	231f      	movs	r3, #31
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2238      	movs	r2, #56	; 0x38
 8002290:	4013      	ands	r3, r2
 8002292:	2b20      	cmp	r3, #32
 8002294:	d11e      	bne.n	80022d4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_RCC_OscConfig+0x32c>)
 8002298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229a:	2202      	movs	r2, #2
 800229c:	4013      	ands	r3, r2
 800229e:	d100      	bne.n	80022a2 <HAL_RCC_OscConfig+0x31e>
 80022a0:	e0b6      	b.n	8002410 <HAL_RCC_OscConfig+0x48c>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d000      	beq.n	80022ac <HAL_RCC_OscConfig+0x328>
 80022aa:	e0b1      	b.n	8002410 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e171      	b.n	8002594 <HAL_RCC_OscConfig+0x610>
 80022b0:	40021000 	.word	0x40021000
 80022b4:	fffeffff 	.word	0xfffeffff
 80022b8:	fffbffff 	.word	0xfffbffff
 80022bc:	ffff80ff 	.word	0xffff80ff
 80022c0:	ffffc7ff 	.word	0xffffc7ff
 80022c4:	00f42400 	.word	0x00f42400
 80022c8:	20000018 	.word	0x20000018
 80022cc:	2000001c 	.word	0x2000001c
 80022d0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022d4:	4bb1      	ldr	r3, [pc, #708]	; (800259c <HAL_RCC_OscConfig+0x618>)
 80022d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	055b      	lsls	r3, r3, #21
 80022dc:	4013      	ands	r3, r2
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_OscConfig+0x360>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x362>
 80022e4:	2300      	movs	r3, #0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d011      	beq.n	800230e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80022ea:	4bac      	ldr	r3, [pc, #688]	; (800259c <HAL_RCC_OscConfig+0x618>)
 80022ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ee:	4bab      	ldr	r3, [pc, #684]	; (800259c <HAL_RCC_OscConfig+0x618>)
 80022f0:	2180      	movs	r1, #128	; 0x80
 80022f2:	0549      	lsls	r1, r1, #21
 80022f4:	430a      	orrs	r2, r1
 80022f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80022f8:	4ba8      	ldr	r3, [pc, #672]	; (800259c <HAL_RCC_OscConfig+0x618>)
 80022fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	055b      	lsls	r3, r3, #21
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002306:	231f      	movs	r3, #31
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800230e:	4ba4      	ldr	r3, [pc, #656]	; (80025a0 <HAL_RCC_OscConfig+0x61c>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4013      	ands	r3, r2
 8002318:	d11a      	bne.n	8002350 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800231a:	4ba1      	ldr	r3, [pc, #644]	; (80025a0 <HAL_RCC_OscConfig+0x61c>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4ba0      	ldr	r3, [pc, #640]	; (80025a0 <HAL_RCC_OscConfig+0x61c>)
 8002320:	2180      	movs	r1, #128	; 0x80
 8002322:	0049      	lsls	r1, r1, #1
 8002324:	430a      	orrs	r2, r1
 8002326:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002328:	f7fe fedc 	bl	80010e4 <HAL_GetTick>
 800232c:	0003      	movs	r3, r0
 800232e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002332:	f7fe fed7 	bl	80010e4 <HAL_GetTick>
 8002336:	0002      	movs	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e127      	b.n	8002594 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002344:	4b96      	ldr	r3, [pc, #600]	; (80025a0 <HAL_RCC_OscConfig+0x61c>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4013      	ands	r3, r2
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d106      	bne.n	8002366 <HAL_RCC_OscConfig+0x3e2>
 8002358:	4b90      	ldr	r3, [pc, #576]	; (800259c <HAL_RCC_OscConfig+0x618>)
 800235a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800235c:	4b8f      	ldr	r3, [pc, #572]	; (800259c <HAL_RCC_OscConfig+0x618>)
 800235e:	2101      	movs	r1, #1
 8002360:	430a      	orrs	r2, r1
 8002362:	65da      	str	r2, [r3, #92]	; 0x5c
 8002364:	e01c      	b.n	80023a0 <HAL_RCC_OscConfig+0x41c>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b05      	cmp	r3, #5
 800236c:	d10c      	bne.n	8002388 <HAL_RCC_OscConfig+0x404>
 800236e:	4b8b      	ldr	r3, [pc, #556]	; (800259c <HAL_RCC_OscConfig+0x618>)
 8002370:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002372:	4b8a      	ldr	r3, [pc, #552]	; (800259c <HAL_RCC_OscConfig+0x618>)
 8002374:	2104      	movs	r1, #4
 8002376:	430a      	orrs	r2, r1
 8002378:	65da      	str	r2, [r3, #92]	; 0x5c
 800237a:	4b88      	ldr	r3, [pc, #544]	; (800259c <HAL_RCC_OscConfig+0x618>)
 800237c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800237e:	4b87      	ldr	r3, [pc, #540]	; (800259c <HAL_RCC_OscConfig+0x618>)
 8002380:	2101      	movs	r1, #1
 8002382:	430a      	orrs	r2, r1
 8002384:	65da      	str	r2, [r3, #92]	; 0x5c
 8002386:	e00b      	b.n	80023a0 <HAL_RCC_OscConfig+0x41c>
 8002388:	4b84      	ldr	r3, [pc, #528]	; (800259c <HAL_RCC_OscConfig+0x618>)
 800238a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800238c:	4b83      	ldr	r3, [pc, #524]	; (800259c <HAL_RCC_OscConfig+0x618>)
 800238e:	2101      	movs	r1, #1
 8002390:	438a      	bics	r2, r1
 8002392:	65da      	str	r2, [r3, #92]	; 0x5c
 8002394:	4b81      	ldr	r3, [pc, #516]	; (800259c <HAL_RCC_OscConfig+0x618>)
 8002396:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002398:	4b80      	ldr	r3, [pc, #512]	; (800259c <HAL_RCC_OscConfig+0x618>)
 800239a:	2104      	movs	r1, #4
 800239c:	438a      	bics	r2, r1
 800239e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d014      	beq.n	80023d2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7fe fe9c 	bl	80010e4 <HAL_GetTick>
 80023ac:	0003      	movs	r3, r0
 80023ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023b0:	e009      	b.n	80023c6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7fe fe97 	bl	80010e4 <HAL_GetTick>
 80023b6:	0002      	movs	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	4a79      	ldr	r2, [pc, #484]	; (80025a4 <HAL_RCC_OscConfig+0x620>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e0e6      	b.n	8002594 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c6:	4b75      	ldr	r3, [pc, #468]	; (800259c <HAL_RCC_OscConfig+0x618>)
 80023c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ca:	2202      	movs	r2, #2
 80023cc:	4013      	ands	r3, r2
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x42e>
 80023d0:	e013      	b.n	80023fa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7fe fe87 	bl	80010e4 <HAL_GetTick>
 80023d6:	0003      	movs	r3, r0
 80023d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023da:	e009      	b.n	80023f0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023dc:	f7fe fe82 	bl	80010e4 <HAL_GetTick>
 80023e0:	0002      	movs	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	4a6f      	ldr	r2, [pc, #444]	; (80025a4 <HAL_RCC_OscConfig+0x620>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e0d1      	b.n	8002594 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023f0:	4b6a      	ldr	r3, [pc, #424]	; (800259c <HAL_RCC_OscConfig+0x618>)
 80023f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f4:	2202      	movs	r2, #2
 80023f6:	4013      	ands	r3, r2
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80023fa:	231f      	movs	r3, #31
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d105      	bne.n	8002410 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002404:	4b65      	ldr	r3, [pc, #404]	; (800259c <HAL_RCC_OscConfig+0x618>)
 8002406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002408:	4b64      	ldr	r3, [pc, #400]	; (800259c <HAL_RCC_OscConfig+0x618>)
 800240a:	4967      	ldr	r1, [pc, #412]	; (80025a8 <HAL_RCC_OscConfig+0x624>)
 800240c:	400a      	ands	r2, r1
 800240e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d100      	bne.n	800241a <HAL_RCC_OscConfig+0x496>
 8002418:	e0bb      	b.n	8002592 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800241a:	4b60      	ldr	r3, [pc, #384]	; (800259c <HAL_RCC_OscConfig+0x618>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2238      	movs	r2, #56	; 0x38
 8002420:	4013      	ands	r3, r2
 8002422:	2b10      	cmp	r3, #16
 8002424:	d100      	bne.n	8002428 <HAL_RCC_OscConfig+0x4a4>
 8002426:	e07b      	b.n	8002520 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d156      	bne.n	80024de <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002430:	4b5a      	ldr	r3, [pc, #360]	; (800259c <HAL_RCC_OscConfig+0x618>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b59      	ldr	r3, [pc, #356]	; (800259c <HAL_RCC_OscConfig+0x618>)
 8002436:	495d      	ldr	r1, [pc, #372]	; (80025ac <HAL_RCC_OscConfig+0x628>)
 8002438:	400a      	ands	r2, r1
 800243a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe fe52 	bl	80010e4 <HAL_GetTick>
 8002440:	0003      	movs	r3, r0
 8002442:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002446:	f7fe fe4d 	bl	80010e4 <HAL_GetTick>
 800244a:	0002      	movs	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e09d      	b.n	8002594 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002458:	4b50      	ldr	r3, [pc, #320]	; (800259c <HAL_RCC_OscConfig+0x618>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	049b      	lsls	r3, r3, #18
 8002460:	4013      	ands	r3, r2
 8002462:	d1f0      	bne.n	8002446 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002464:	4b4d      	ldr	r3, [pc, #308]	; (800259c <HAL_RCC_OscConfig+0x618>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a51      	ldr	r2, [pc, #324]	; (80025b0 <HAL_RCC_OscConfig+0x62c>)
 800246a:	4013      	ands	r3, r2
 800246c:	0019      	movs	r1, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1a      	ldr	r2, [r3, #32]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002490:	431a      	orrs	r2, r3
 8002492:	4b42      	ldr	r3, [pc, #264]	; (800259c <HAL_RCC_OscConfig+0x618>)
 8002494:	430a      	orrs	r2, r1
 8002496:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002498:	4b40      	ldr	r3, [pc, #256]	; (800259c <HAL_RCC_OscConfig+0x618>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b3f      	ldr	r3, [pc, #252]	; (800259c <HAL_RCC_OscConfig+0x618>)
 800249e:	2180      	movs	r1, #128	; 0x80
 80024a0:	0449      	lsls	r1, r1, #17
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80024a6:	4b3d      	ldr	r3, [pc, #244]	; (800259c <HAL_RCC_OscConfig+0x618>)
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	4b3c      	ldr	r3, [pc, #240]	; (800259c <HAL_RCC_OscConfig+0x618>)
 80024ac:	2180      	movs	r1, #128	; 0x80
 80024ae:	0549      	lsls	r1, r1, #21
 80024b0:	430a      	orrs	r2, r1
 80024b2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fe fe16 	bl	80010e4 <HAL_GetTick>
 80024b8:	0003      	movs	r3, r0
 80024ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024be:	f7fe fe11 	bl	80010e4 <HAL_GetTick>
 80024c2:	0002      	movs	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e061      	b.n	8002594 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d0:	4b32      	ldr	r3, [pc, #200]	; (800259c <HAL_RCC_OscConfig+0x618>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	049b      	lsls	r3, r3, #18
 80024d8:	4013      	ands	r3, r2
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x53a>
 80024dc:	e059      	b.n	8002592 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024de:	4b2f      	ldr	r3, [pc, #188]	; (800259c <HAL_RCC_OscConfig+0x618>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	4b2e      	ldr	r3, [pc, #184]	; (800259c <HAL_RCC_OscConfig+0x618>)
 80024e4:	4931      	ldr	r1, [pc, #196]	; (80025ac <HAL_RCC_OscConfig+0x628>)
 80024e6:	400a      	ands	r2, r1
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7fe fdfb 	bl	80010e4 <HAL_GetTick>
 80024ee:	0003      	movs	r3, r0
 80024f0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f4:	f7fe fdf6 	bl	80010e4 <HAL_GetTick>
 80024f8:	0002      	movs	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e046      	b.n	8002594 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002506:	4b25      	ldr	r3, [pc, #148]	; (800259c <HAL_RCC_OscConfig+0x618>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	049b      	lsls	r3, r3, #18
 800250e:	4013      	ands	r3, r2
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002512:	4b22      	ldr	r3, [pc, #136]	; (800259c <HAL_RCC_OscConfig+0x618>)
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	4b21      	ldr	r3, [pc, #132]	; (800259c <HAL_RCC_OscConfig+0x618>)
 8002518:	4926      	ldr	r1, [pc, #152]	; (80025b4 <HAL_RCC_OscConfig+0x630>)
 800251a:	400a      	ands	r2, r1
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	e038      	b.n	8002592 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e033      	b.n	8002594 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800252c:	4b1b      	ldr	r3, [pc, #108]	; (800259c <HAL_RCC_OscConfig+0x618>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2203      	movs	r2, #3
 8002536:	401a      	ands	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	429a      	cmp	r2, r3
 800253e:	d126      	bne.n	800258e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2270      	movs	r2, #112	; 0x70
 8002544:	401a      	ands	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254a:	429a      	cmp	r2, r3
 800254c:	d11f      	bne.n	800258e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	23fe      	movs	r3, #254	; 0xfe
 8002552:	01db      	lsls	r3, r3, #7
 8002554:	401a      	ands	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800255c:	429a      	cmp	r2, r3
 800255e:	d116      	bne.n	800258e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	23f8      	movs	r3, #248	; 0xf8
 8002564:	039b      	lsls	r3, r3, #14
 8002566:	401a      	ands	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800256c:	429a      	cmp	r2, r3
 800256e:	d10e      	bne.n	800258e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	23e0      	movs	r3, #224	; 0xe0
 8002574:	051b      	lsls	r3, r3, #20
 8002576:	401a      	ands	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	0f5b      	lsrs	r3, r3, #29
 8002584:	075a      	lsls	r2, r3, #29
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d001      	beq.n	8002592 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	0018      	movs	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	b008      	add	sp, #32
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	40007000 	.word	0x40007000
 80025a4:	00001388 	.word	0x00001388
 80025a8:	efffffff 	.word	0xefffffff
 80025ac:	feffffff 	.word	0xfeffffff
 80025b0:	11c1808c 	.word	0x11c1808c
 80025b4:	eefefffc 	.word	0xeefefffc

080025b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0e9      	b.n	80027a0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025cc:	4b76      	ldr	r3, [pc, #472]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2207      	movs	r2, #7
 80025d2:	4013      	ands	r3, r2
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d91e      	bls.n	8002618 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b73      	ldr	r3, [pc, #460]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2207      	movs	r2, #7
 80025e0:	4393      	bics	r3, r2
 80025e2:	0019      	movs	r1, r3
 80025e4:	4b70      	ldr	r3, [pc, #448]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025ec:	f7fe fd7a 	bl	80010e4 <HAL_GetTick>
 80025f0:	0003      	movs	r3, r0
 80025f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025f4:	e009      	b.n	800260a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f6:	f7fe fd75 	bl	80010e4 <HAL_GetTick>
 80025fa:	0002      	movs	r2, r0
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	4a6a      	ldr	r2, [pc, #424]	; (80027ac <HAL_RCC_ClockConfig+0x1f4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e0ca      	b.n	80027a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800260a:	4b67      	ldr	r3, [pc, #412]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2207      	movs	r2, #7
 8002610:	4013      	ands	r3, r2
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d1ee      	bne.n	80025f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2202      	movs	r2, #2
 800261e:	4013      	ands	r3, r2
 8002620:	d015      	beq.n	800264e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2204      	movs	r2, #4
 8002628:	4013      	ands	r3, r2
 800262a:	d006      	beq.n	800263a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800262c:	4b60      	ldr	r3, [pc, #384]	; (80027b0 <HAL_RCC_ClockConfig+0x1f8>)
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	4b5f      	ldr	r3, [pc, #380]	; (80027b0 <HAL_RCC_ClockConfig+0x1f8>)
 8002632:	21e0      	movs	r1, #224	; 0xe0
 8002634:	01c9      	lsls	r1, r1, #7
 8002636:	430a      	orrs	r2, r1
 8002638:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263a:	4b5d      	ldr	r3, [pc, #372]	; (80027b0 <HAL_RCC_ClockConfig+0x1f8>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	4a5d      	ldr	r2, [pc, #372]	; (80027b4 <HAL_RCC_ClockConfig+0x1fc>)
 8002640:	4013      	ands	r3, r2
 8002642:	0019      	movs	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	4b59      	ldr	r3, [pc, #356]	; (80027b0 <HAL_RCC_ClockConfig+0x1f8>)
 800264a:	430a      	orrs	r2, r1
 800264c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2201      	movs	r2, #1
 8002654:	4013      	ands	r3, r2
 8002656:	d057      	beq.n	8002708 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d107      	bne.n	8002670 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002660:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <HAL_RCC_ClockConfig+0x1f8>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	029b      	lsls	r3, r3, #10
 8002668:	4013      	ands	r3, r2
 800266a:	d12b      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e097      	b.n	80027a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d107      	bne.n	8002688 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002678:	4b4d      	ldr	r3, [pc, #308]	; (80027b0 <HAL_RCC_ClockConfig+0x1f8>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	049b      	lsls	r3, r3, #18
 8002680:	4013      	ands	r3, r2
 8002682:	d11f      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e08b      	b.n	80027a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d107      	bne.n	80026a0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002690:	4b47      	ldr	r3, [pc, #284]	; (80027b0 <HAL_RCC_ClockConfig+0x1f8>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4013      	ands	r3, r2
 800269a:	d113      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e07f      	b.n	80027a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d106      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026a8:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <HAL_RCC_ClockConfig+0x1f8>)
 80026aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ac:	2202      	movs	r2, #2
 80026ae:	4013      	ands	r3, r2
 80026b0:	d108      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e074      	b.n	80027a0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b6:	4b3e      	ldr	r3, [pc, #248]	; (80027b0 <HAL_RCC_ClockConfig+0x1f8>)
 80026b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ba:	2202      	movs	r2, #2
 80026bc:	4013      	ands	r3, r2
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e06d      	b.n	80027a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026c4:	4b3a      	ldr	r3, [pc, #232]	; (80027b0 <HAL_RCC_ClockConfig+0x1f8>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2207      	movs	r2, #7
 80026ca:	4393      	bics	r3, r2
 80026cc:	0019      	movs	r1, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <HAL_RCC_ClockConfig+0x1f8>)
 80026d4:	430a      	orrs	r2, r1
 80026d6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d8:	f7fe fd04 	bl	80010e4 <HAL_GetTick>
 80026dc:	0003      	movs	r3, r0
 80026de:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e0:	e009      	b.n	80026f6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e2:	f7fe fcff 	bl	80010e4 <HAL_GetTick>
 80026e6:	0002      	movs	r2, r0
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	4a2f      	ldr	r2, [pc, #188]	; (80027ac <HAL_RCC_ClockConfig+0x1f4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e054      	b.n	80027a0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	4b2e      	ldr	r3, [pc, #184]	; (80027b0 <HAL_RCC_ClockConfig+0x1f8>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2238      	movs	r2, #56	; 0x38
 80026fc:	401a      	ands	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	429a      	cmp	r2, r3
 8002706:	d1ec      	bne.n	80026e2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002708:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2207      	movs	r2, #7
 800270e:	4013      	ands	r3, r2
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d21e      	bcs.n	8002754 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2207      	movs	r2, #7
 800271c:	4393      	bics	r3, r2
 800271e:	0019      	movs	r1, r3
 8002720:	4b21      	ldr	r3, [pc, #132]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002728:	f7fe fcdc 	bl	80010e4 <HAL_GetTick>
 800272c:	0003      	movs	r3, r0
 800272e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002730:	e009      	b.n	8002746 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002732:	f7fe fcd7 	bl	80010e4 <HAL_GetTick>
 8002736:	0002      	movs	r2, r0
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	4a1b      	ldr	r2, [pc, #108]	; (80027ac <HAL_RCC_ClockConfig+0x1f4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e02c      	b.n	80027a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002746:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2207      	movs	r2, #7
 800274c:	4013      	ands	r3, r2
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d1ee      	bne.n	8002732 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2204      	movs	r2, #4
 800275a:	4013      	ands	r3, r2
 800275c:	d009      	beq.n	8002772 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800275e:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <HAL_RCC_ClockConfig+0x1f8>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	4a15      	ldr	r2, [pc, #84]	; (80027b8 <HAL_RCC_ClockConfig+0x200>)
 8002764:	4013      	ands	r3, r2
 8002766:	0019      	movs	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_RCC_ClockConfig+0x1f8>)
 800276e:	430a      	orrs	r2, r1
 8002770:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002772:	f000 f829 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8002776:	0001      	movs	r1, r0
 8002778:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <HAL_RCC_ClockConfig+0x1f8>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	220f      	movs	r2, #15
 8002780:	401a      	ands	r2, r3
 8002782:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <HAL_RCC_ClockConfig+0x204>)
 8002784:	0092      	lsls	r2, r2, #2
 8002786:	58d3      	ldr	r3, [r2, r3]
 8002788:	221f      	movs	r2, #31
 800278a:	4013      	ands	r3, r2
 800278c:	000a      	movs	r2, r1
 800278e:	40da      	lsrs	r2, r3
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_RCC_ClockConfig+0x208>)
 8002792:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_RCC_ClockConfig+0x20c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	0018      	movs	r0, r3
 800279a:	f7fe fc47 	bl	800102c <HAL_InitTick>
 800279e:	0003      	movs	r3, r0
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b004      	add	sp, #16
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40022000 	.word	0x40022000
 80027ac:	00001388 	.word	0x00001388
 80027b0:	40021000 	.word	0x40021000
 80027b4:	fffff0ff 	.word	0xfffff0ff
 80027b8:	ffff8fff 	.word	0xffff8fff
 80027bc:	08005314 	.word	0x08005314
 80027c0:	20000018 	.word	0x20000018
 80027c4:	2000001c 	.word	0x2000001c

080027c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ce:	4b3c      	ldr	r3, [pc, #240]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2238      	movs	r2, #56	; 0x38
 80027d4:	4013      	ands	r3, r2
 80027d6:	d10f      	bne.n	80027f8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80027d8:	4b39      	ldr	r3, [pc, #228]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	0adb      	lsrs	r3, r3, #11
 80027de:	2207      	movs	r2, #7
 80027e0:	4013      	ands	r3, r2
 80027e2:	2201      	movs	r2, #1
 80027e4:	409a      	lsls	r2, r3
 80027e6:	0013      	movs	r3, r2
 80027e8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80027ea:	6839      	ldr	r1, [r7, #0]
 80027ec:	4835      	ldr	r0, [pc, #212]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027ee:	f7fd fc93 	bl	8000118 <__udivsi3>
 80027f2:	0003      	movs	r3, r0
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	e05d      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027f8:	4b31      	ldr	r3, [pc, #196]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2238      	movs	r2, #56	; 0x38
 80027fe:	4013      	ands	r3, r2
 8002800:	2b08      	cmp	r3, #8
 8002802:	d102      	bne.n	800280a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002804:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	e054      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800280a:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2238      	movs	r2, #56	; 0x38
 8002810:	4013      	ands	r3, r2
 8002812:	2b10      	cmp	r3, #16
 8002814:	d138      	bne.n	8002888 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002816:	4b2a      	ldr	r3, [pc, #168]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2203      	movs	r2, #3
 800281c:	4013      	ands	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002820:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	2207      	movs	r2, #7
 8002828:	4013      	ands	r3, r2
 800282a:	3301      	adds	r3, #1
 800282c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b03      	cmp	r3, #3
 8002832:	d10d      	bne.n	8002850 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	4824      	ldr	r0, [pc, #144]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002838:	f7fd fc6e 	bl	8000118 <__udivsi3>
 800283c:	0003      	movs	r3, r0
 800283e:	0019      	movs	r1, r3
 8002840:	4b1f      	ldr	r3, [pc, #124]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	0a1b      	lsrs	r3, r3, #8
 8002846:	227f      	movs	r2, #127	; 0x7f
 8002848:	4013      	ands	r3, r2
 800284a:	434b      	muls	r3, r1
 800284c:	617b      	str	r3, [r7, #20]
        break;
 800284e:	e00d      	b.n	800286c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	481c      	ldr	r0, [pc, #112]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002854:	f7fd fc60 	bl	8000118 <__udivsi3>
 8002858:	0003      	movs	r3, r0
 800285a:	0019      	movs	r1, r3
 800285c:	4b18      	ldr	r3, [pc, #96]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	227f      	movs	r2, #127	; 0x7f
 8002864:	4013      	ands	r3, r2
 8002866:	434b      	muls	r3, r1
 8002868:	617b      	str	r3, [r7, #20]
        break;
 800286a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800286c:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	0f5b      	lsrs	r3, r3, #29
 8002872:	2207      	movs	r2, #7
 8002874:	4013      	ands	r3, r2
 8002876:	3301      	adds	r3, #1
 8002878:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	6978      	ldr	r0, [r7, #20]
 800287e:	f7fd fc4b 	bl	8000118 <__udivsi3>
 8002882:	0003      	movs	r3, r0
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	e015      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002888:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2238      	movs	r2, #56	; 0x38
 800288e:	4013      	ands	r3, r2
 8002890:	2b20      	cmp	r3, #32
 8002892:	d103      	bne.n	800289c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	021b      	lsls	r3, r3, #8
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	e00b      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800289c:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2238      	movs	r2, #56	; 0x38
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b18      	cmp	r3, #24
 80028a6:	d103      	bne.n	80028b0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80028a8:	23fa      	movs	r3, #250	; 0xfa
 80028aa:	01db      	lsls	r3, r3, #7
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	e001      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028b4:	693b      	ldr	r3, [r7, #16]
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b006      	add	sp, #24
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	40021000 	.word	0x40021000
 80028c4:	00f42400 	.word	0x00f42400
 80028c8:	007a1200 	.word	0x007a1200

080028cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d0:	4b02      	ldr	r3, [pc, #8]	; (80028dc <HAL_RCC_GetHCLKFreq+0x10>)
 80028d2:	681b      	ldr	r3, [r3, #0]
}
 80028d4:	0018      	movs	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	20000018 	.word	0x20000018

080028e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e0:	b5b0      	push	{r4, r5, r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80028e4:	f7ff fff2 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 80028e8:	0004      	movs	r4, r0
 80028ea:	f7ff fb3f 	bl	8001f6c <LL_RCC_GetAPB1Prescaler>
 80028ee:	0003      	movs	r3, r0
 80028f0:	0b1a      	lsrs	r2, r3, #12
 80028f2:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028f4:	0092      	lsls	r2, r2, #2
 80028f6:	58d3      	ldr	r3, [r2, r3]
 80028f8:	221f      	movs	r2, #31
 80028fa:	4013      	ands	r3, r2
 80028fc:	40dc      	lsrs	r4, r3
 80028fe:	0023      	movs	r3, r4
}
 8002900:	0018      	movs	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	bdb0      	pop	{r4, r5, r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	08005354 	.word	0x08005354

0800290c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002914:	2313      	movs	r3, #19
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800291c:	2312      	movs	r3, #18
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	029b      	lsls	r3, r3, #10
 800292c:	4013      	ands	r3, r2
 800292e:	d100      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002930:	e0a3      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002932:	2011      	movs	r0, #17
 8002934:	183b      	adds	r3, r7, r0
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293a:	4ba5      	ldr	r3, [pc, #660]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800293c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	055b      	lsls	r3, r3, #21
 8002942:	4013      	ands	r3, r2
 8002944:	d110      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002946:	4ba2      	ldr	r3, [pc, #648]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800294a:	4ba1      	ldr	r3, [pc, #644]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800294c:	2180      	movs	r1, #128	; 0x80
 800294e:	0549      	lsls	r1, r1, #21
 8002950:	430a      	orrs	r2, r1
 8002952:	63da      	str	r2, [r3, #60]	; 0x3c
 8002954:	4b9e      	ldr	r3, [pc, #632]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	055b      	lsls	r3, r3, #21
 800295c:	4013      	ands	r3, r2
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002962:	183b      	adds	r3, r7, r0
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002968:	4b9a      	ldr	r3, [pc, #616]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b99      	ldr	r3, [pc, #612]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800296e:	2180      	movs	r1, #128	; 0x80
 8002970:	0049      	lsls	r1, r1, #1
 8002972:	430a      	orrs	r2, r1
 8002974:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002976:	f7fe fbb5 	bl	80010e4 <HAL_GetTick>
 800297a:	0003      	movs	r3, r0
 800297c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800297e:	e00b      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002980:	f7fe fbb0 	bl	80010e4 <HAL_GetTick>
 8002984:	0002      	movs	r2, r0
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d904      	bls.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800298e:	2313      	movs	r3, #19
 8002990:	18fb      	adds	r3, r7, r3
 8002992:	2203      	movs	r2, #3
 8002994:	701a      	strb	r2, [r3, #0]
        break;
 8002996:	e005      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002998:	4b8e      	ldr	r3, [pc, #568]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4013      	ands	r3, r2
 80029a2:	d0ed      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80029a4:	2313      	movs	r3, #19
 80029a6:	18fb      	adds	r3, r7, r3
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d154      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029ae:	4b88      	ldr	r3, [pc, #544]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029b2:	23c0      	movs	r3, #192	; 0xc0
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4013      	ands	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d019      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d014      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029ca:	4b81      	ldr	r3, [pc, #516]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ce:	4a82      	ldr	r2, [pc, #520]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029d4:	4b7e      	ldr	r3, [pc, #504]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029d8:	4b7d      	ldr	r3, [pc, #500]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029da:	2180      	movs	r1, #128	; 0x80
 80029dc:	0249      	lsls	r1, r1, #9
 80029de:	430a      	orrs	r2, r1
 80029e0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029e2:	4b7b      	ldr	r3, [pc, #492]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029e6:	4b7a      	ldr	r3, [pc, #488]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029e8:	497c      	ldr	r1, [pc, #496]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80029ea:	400a      	ands	r2, r1
 80029ec:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029ee:	4b78      	ldr	r3, [pc, #480]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2201      	movs	r2, #1
 80029f8:	4013      	ands	r3, r2
 80029fa:	d016      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe fb72 	bl	80010e4 <HAL_GetTick>
 8002a00:	0003      	movs	r3, r0
 8002a02:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a04:	e00c      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7fe fb6d 	bl	80010e4 <HAL_GetTick>
 8002a0a:	0002      	movs	r2, r0
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	4a73      	ldr	r2, [pc, #460]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d904      	bls.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002a16:	2313      	movs	r3, #19
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	701a      	strb	r2, [r3, #0]
            break;
 8002a1e:	e004      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a20:	4b6b      	ldr	r3, [pc, #428]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a24:	2202      	movs	r2, #2
 8002a26:	4013      	ands	r3, r2
 8002a28:	d0ed      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002a2a:	2313      	movs	r3, #19
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a34:	4b66      	ldr	r3, [pc, #408]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a38:	4a67      	ldr	r2, [pc, #412]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	0019      	movs	r1, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a42:	4b63      	ldr	r3, [pc, #396]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a44:	430a      	orrs	r2, r1
 8002a46:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a48:	e00c      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a4a:	2312      	movs	r3, #18
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	2213      	movs	r2, #19
 8002a50:	18ba      	adds	r2, r7, r2
 8002a52:	7812      	ldrb	r2, [r2, #0]
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	e005      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a58:	2312      	movs	r3, #18
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	2213      	movs	r2, #19
 8002a5e:	18ba      	adds	r2, r7, r2
 8002a60:	7812      	ldrb	r2, [r2, #0]
 8002a62:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a64:	2311      	movs	r3, #17
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d105      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6e:	4b58      	ldr	r3, [pc, #352]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a72:	4b57      	ldr	r3, [pc, #348]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a74:	495b      	ldr	r1, [pc, #364]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002a76:	400a      	ands	r2, r1
 8002a78:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	4013      	ands	r3, r2
 8002a82:	d009      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a84:	4b52      	ldr	r3, [pc, #328]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a88:	2203      	movs	r2, #3
 8002a8a:	4393      	bics	r3, r2
 8002a8c:	0019      	movs	r1, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	4b4f      	ldr	r3, [pc, #316]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a94:	430a      	orrs	r2, r1
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2210      	movs	r2, #16
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d009      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aa2:	4b4b      	ldr	r3, [pc, #300]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa6:	4a50      	ldr	r2, [pc, #320]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	0019      	movs	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	4b47      	ldr	r3, [pc, #284]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d009      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ac2:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	4a49      	ldr	r2, [pc, #292]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	0019      	movs	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	4b3f      	ldr	r3, [pc, #252]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	2380      	movs	r3, #128	; 0x80
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d009      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ae2:	4b3b      	ldr	r3, [pc, #236]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae6:	4a42      	ldr	r2, [pc, #264]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699a      	ldr	r2, [r3, #24]
 8002af0:	4b37      	ldr	r3, [pc, #220]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002af2:	430a      	orrs	r2, r1
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2220      	movs	r2, #32
 8002afc:	4013      	ands	r3, r2
 8002afe:	d009      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b00:	4b33      	ldr	r3, [pc, #204]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b04:	4a3b      	ldr	r2, [pc, #236]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	0019      	movs	r1, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b10:	430a      	orrs	r2, r1
 8002b12:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	01db      	lsls	r3, r3, #7
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d015      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	0899      	lsrs	r1, r3, #2
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69da      	ldr	r2, [r3, #28]
 8002b2c:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69da      	ldr	r2, [r3, #28]
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	05db      	lsls	r3, r3, #23
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d106      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b3e:	4b24      	ldr	r3, [pc, #144]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b44:	2180      	movs	r1, #128	; 0x80
 8002b46:	0249      	lsls	r1, r1, #9
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	039b      	lsls	r3, r3, #14
 8002b54:	4013      	ands	r3, r2
 8002b56:	d016      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b58:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5c:	4a26      	ldr	r2, [pc, #152]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	0019      	movs	r1, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1a      	ldr	r2, [r3, #32]
 8002b66:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1a      	ldr	r2, [r3, #32]
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	03db      	lsls	r3, r3, #15
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d106      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b78:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b7e:	2180      	movs	r1, #128	; 0x80
 8002b80:	0449      	lsls	r1, r1, #17
 8002b82:	430a      	orrs	r2, r1
 8002b84:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d016      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002b92:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b96:	4a19      	ldr	r2, [pc, #100]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	01db      	lsls	r3, r3, #7
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d106      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002bb2:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bb8:	2180      	movs	r1, #128	; 0x80
 8002bba:	0249      	lsls	r1, r1, #9
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002bc0:	2312      	movs	r3, #18
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	781b      	ldrb	r3, [r3, #0]
}
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b006      	add	sp, #24
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	fffffcff 	.word	0xfffffcff
 8002bdc:	fffeffff 	.word	0xfffeffff
 8002be0:	00001388 	.word	0x00001388
 8002be4:	efffffff 	.word	0xefffffff
 8002be8:	fffff3ff 	.word	0xfffff3ff
 8002bec:	fff3ffff 	.word	0xfff3ffff
 8002bf0:	ffcfffff 	.word	0xffcfffff
 8002bf4:	ffffcfff 	.word	0xffffcfff
 8002bf8:	ffbfffff 	.word	0xffbfffff
 8002bfc:	ffff3fff 	.word	0xffff3fff

08002c00 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c00:	b5b0      	push	{r4, r5, r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c08:	230f      	movs	r3, #15
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d100      	bne.n	8002c18 <HAL_RTC_Init+0x18>
 8002c16:	e08c      	b.n	8002d32 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2229      	movs	r2, #41	; 0x29
 8002c1c:	5c9b      	ldrb	r3, [r3, r2]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10b      	bne.n	8002c3c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2228      	movs	r2, #40	; 0x28
 8002c28:	2100      	movs	r1, #0
 8002c2a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2288      	movs	r2, #136	; 0x88
 8002c30:	0212      	lsls	r2, r2, #8
 8002c32:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	0018      	movs	r0, r3
 8002c38:	f7fe f830 	bl	8000c9c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2229      	movs	r2, #41	; 0x29
 8002c40:	2102      	movs	r1, #2
 8002c42:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	2210      	movs	r2, #16
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b10      	cmp	r3, #16
 8002c50:	d062      	beq.n	8002d18 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	22ca      	movs	r2, #202	; 0xca
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2253      	movs	r2, #83	; 0x53
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002c62:	250f      	movs	r5, #15
 8002c64:	197c      	adds	r4, r7, r5
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f000 fcba 	bl	80035e2 <RTC_EnterInitMode>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002c72:	0028      	movs	r0, r5
 8002c74:	183b      	adds	r3, r7, r0
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d12c      	bne.n	8002cd6 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	492e      	ldr	r1, [pc, #184]	; (8002d40 <HAL_RTC_Init+0x140>)
 8002c88:	400a      	ands	r2, r1
 8002c8a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6999      	ldr	r1, [r3, #24]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6912      	ldr	r2, [r2, #16]
 8002cb2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6919      	ldr	r1, [r3, #16]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	041a      	lsls	r2, r3, #16
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002cc8:	183c      	adds	r4, r7, r0
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f000 fccb 	bl	8003668 <RTC_ExitInitMode>
 8002cd2:	0003      	movs	r3, r0
 8002cd4:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002cd6:	230f      	movs	r3, #15
 8002cd8:	18fb      	adds	r3, r7, r3
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d116      	bne.n	8002d0e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	00d2      	lsls	r2, r2, #3
 8002cec:	08d2      	lsrs	r2, r2, #3
 8002cee:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6999      	ldr	r1, [r3, #24]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	22ff      	movs	r2, #255	; 0xff
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24
 8002d16:	e003      	b.n	8002d20 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002d18:	230f      	movs	r3, #15
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002d20:	230f      	movs	r3, #15
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d103      	bne.n	8002d32 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2229      	movs	r2, #41	; 0x29
 8002d2e:	2101      	movs	r1, #1
 8002d30:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002d32:	230f      	movs	r3, #15
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	781b      	ldrb	r3, [r3, #0]
}
 8002d38:	0018      	movs	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b004      	add	sp, #16
 8002d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d40:	fb8fffbf 	.word	0xfb8fffbf

08002d44 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d44:	b5b0      	push	{r4, r5, r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2228      	movs	r2, #40	; 0x28
 8002d54:	5c9b      	ldrb	r3, [r3, r2]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_RTC_SetTime+0x1a>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e092      	b.n	8002e84 <HAL_RTC_SetTime+0x140>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2228      	movs	r2, #40	; 0x28
 8002d62:	2101      	movs	r1, #1
 8002d64:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2229      	movs	r2, #41	; 0x29
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	22ca      	movs	r2, #202	; 0xca
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2253      	movs	r2, #83	; 0x53
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d7e:	2513      	movs	r5, #19
 8002d80:	197c      	adds	r4, r7, r5
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f000 fc2c 	bl	80035e2 <RTC_EnterInitMode>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002d8e:	197b      	adds	r3, r7, r5
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d162      	bne.n	8002e5c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d125      	bne.n	8002de8 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	2240      	movs	r2, #64	; 0x40
 8002da4:	4013      	ands	r3, r2
 8002da6:	d102      	bne.n	8002dae <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2200      	movs	r2, #0
 8002dac:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	0018      	movs	r0, r3
 8002db4:	f000 fc9c 	bl	80036f0 <RTC_ByteToBcd2>
 8002db8:	0003      	movs	r3, r0
 8002dba:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	785b      	ldrb	r3, [r3, #1]
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f000 fc95 	bl	80036f0 <RTC_ByteToBcd2>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002dca:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	789b      	ldrb	r3, [r3, #2]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f000 fc8d 	bl	80036f0 <RTC_ByteToBcd2>
 8002dd6:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002dd8:	0022      	movs	r2, r4
 8002dda:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	78db      	ldrb	r3, [r3, #3]
 8002de0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	e017      	b.n	8002e18 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2240      	movs	r2, #64	; 0x40
 8002df0:	4013      	ands	r3, r2
 8002df2:	d102      	bne.n	8002dfa <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2200      	movs	r2, #0
 8002df8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	785b      	ldrb	r3, [r3, #1]
 8002e04:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e06:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e0c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	78db      	ldrb	r3, [r3, #3]
 8002e12:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	491b      	ldr	r1, [pc, #108]	; (8002e8c <HAL_RTC_SetTime+0x148>)
 8002e20:	400a      	ands	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4918      	ldr	r1, [pc, #96]	; (8002e90 <HAL_RTC_SetTime+0x14c>)
 8002e30:	400a      	ands	r2, r1
 8002e32:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6999      	ldr	r1, [r3, #24]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e4c:	2313      	movs	r3, #19
 8002e4e:	18fc      	adds	r4, r7, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	0018      	movs	r0, r3
 8002e54:	f000 fc08 	bl	8003668 <RTC_ExitInitMode>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	22ff      	movs	r2, #255	; 0xff
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8002e64:	2313      	movs	r3, #19
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2229      	movs	r2, #41	; 0x29
 8002e72:	2101      	movs	r1, #1
 8002e74:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2228      	movs	r2, #40	; 0x28
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	5499      	strb	r1, [r3, r2]

  return status;
 8002e7e:	2313      	movs	r3, #19
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	781b      	ldrb	r3, [r3, #0]
}
 8002e84:	0018      	movs	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b006      	add	sp, #24
 8002e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e8c:	007f7f7f 	.word	0x007f7f7f
 8002e90:	fffbffff 	.word	0xfffbffff

08002e94 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	045b      	lsls	r3, r3, #17
 8002eb2:	0c5a      	lsrs	r2, r3, #17
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a22      	ldr	r2, [pc, #136]	; (8002f48 <HAL_RTC_GetTime+0xb4>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	0c1b      	lsrs	r3, r3, #16
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	223f      	movs	r2, #63	; 0x3f
 8002ecc:	4013      	ands	r3, r2
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	0a1b      	lsrs	r3, r3, #8
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	227f      	movs	r2, #127	; 0x7f
 8002edc:	4013      	ands	r3, r2
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	227f      	movs	r2, #127	; 0x7f
 8002eea:	4013      	ands	r3, r2
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	0d9b      	lsrs	r3, r3, #22
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2201      	movs	r2, #1
 8002efa:	4013      	ands	r3, r2
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d11a      	bne.n	8002f3e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f000 fc17 	bl	8003740 <RTC_Bcd2ToByte>
 8002f12:	0003      	movs	r3, r0
 8002f14:	001a      	movs	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	785b      	ldrb	r3, [r3, #1]
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f000 fc0e 	bl	8003740 <RTC_Bcd2ToByte>
 8002f24:	0003      	movs	r3, r0
 8002f26:	001a      	movs	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	789b      	ldrb	r3, [r3, #2]
 8002f30:	0018      	movs	r0, r3
 8002f32:	f000 fc05 	bl	8003740 <RTC_Bcd2ToByte>
 8002f36:	0003      	movs	r3, r0
 8002f38:	001a      	movs	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	0018      	movs	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b006      	add	sp, #24
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	007f7f7f 	.word	0x007f7f7f

08002f4c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f4c:	b5b0      	push	{r4, r5, r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2228      	movs	r2, #40	; 0x28
 8002f5c:	5c9b      	ldrb	r3, [r3, r2]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_RTC_SetDate+0x1a>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e07e      	b.n	8003064 <HAL_RTC_SetDate+0x118>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2228      	movs	r2, #40	; 0x28
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2229      	movs	r2, #41	; 0x29
 8002f72:	2102      	movs	r1, #2
 8002f74:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10e      	bne.n	8002f9a <HAL_RTC_SetDate+0x4e>
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	785b      	ldrb	r3, [r3, #1]
 8002f80:	001a      	movs	r2, r3
 8002f82:	2310      	movs	r3, #16
 8002f84:	4013      	ands	r3, r2
 8002f86:	d008      	beq.n	8002f9a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	785b      	ldrb	r3, [r3, #1]
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	4393      	bics	r3, r2
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	330a      	adds	r3, #10
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d11c      	bne.n	8002fda <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	78db      	ldrb	r3, [r3, #3]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f000 fba3 	bl	80036f0 <RTC_ByteToBcd2>
 8002faa:	0003      	movs	r3, r0
 8002fac:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	785b      	ldrb	r3, [r3, #1]
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f000 fb9c 	bl	80036f0 <RTC_ByteToBcd2>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fbc:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	789b      	ldrb	r3, [r3, #2]
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f000 fb94 	bl	80036f0 <RTC_ByteToBcd2>
 8002fc8:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fca:	0022      	movs	r2, r4
 8002fcc:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	e00e      	b.n	8002ff8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	78db      	ldrb	r3, [r3, #3]
 8002fde:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	785b      	ldrb	r3, [r3, #1]
 8002fe4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002fe6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002fec:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	22ca      	movs	r2, #202	; 0xca
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2253      	movs	r2, #83	; 0x53
 8003006:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003008:	2513      	movs	r5, #19
 800300a:	197c      	adds	r4, r7, r5
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	0018      	movs	r0, r3
 8003010:	f000 fae7 	bl	80035e2 <RTC_EnterInitMode>
 8003014:	0003      	movs	r3, r0
 8003016:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003018:	0028      	movs	r0, r5
 800301a:	183b      	adds	r3, r7, r0
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10c      	bne.n	800303c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4910      	ldr	r1, [pc, #64]	; (800306c <HAL_RTC_SetDate+0x120>)
 800302a:	400a      	ands	r2, r1
 800302c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800302e:	183c      	adds	r4, r7, r0
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	0018      	movs	r0, r3
 8003034:	f000 fb18 	bl	8003668 <RTC_ExitInitMode>
 8003038:	0003      	movs	r3, r0
 800303a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	22ff      	movs	r2, #255	; 0xff
 8003042:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003044:	2313      	movs	r3, #19
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d103      	bne.n	8003056 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2229      	movs	r2, #41	; 0x29
 8003052:	2101      	movs	r1, #1
 8003054:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2228      	movs	r2, #40	; 0x28
 800305a:	2100      	movs	r1, #0
 800305c:	5499      	strb	r1, [r3, r2]

  return status;
 800305e:	2313      	movs	r3, #19
 8003060:	18fb      	adds	r3, r7, r3
 8003062:	781b      	ldrb	r3, [r3, #0]
}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	b006      	add	sp, #24
 800306a:	bdb0      	pop	{r4, r5, r7, pc}
 800306c:	00ffff3f 	.word	0x00ffff3f

08003070 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	4a21      	ldr	r2, [pc, #132]	; (8003108 <HAL_RTC_GetDate+0x98>)
 8003084:	4013      	ands	r3, r2
 8003086:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	0c1b      	lsrs	r3, r3, #16
 800308c:	b2da      	uxtb	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	0a1b      	lsrs	r3, r3, #8
 8003096:	b2db      	uxtb	r3, r3
 8003098:	221f      	movs	r2, #31
 800309a:	4013      	ands	r3, r2
 800309c:	b2da      	uxtb	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	223f      	movs	r2, #63	; 0x3f
 80030a8:	4013      	ands	r3, r2
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	0b5b      	lsrs	r3, r3, #13
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2207      	movs	r2, #7
 80030b8:	4013      	ands	r3, r2
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d11a      	bne.n	80030fc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	78db      	ldrb	r3, [r3, #3]
 80030ca:	0018      	movs	r0, r3
 80030cc:	f000 fb38 	bl	8003740 <RTC_Bcd2ToByte>
 80030d0:	0003      	movs	r3, r0
 80030d2:	001a      	movs	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	785b      	ldrb	r3, [r3, #1]
 80030dc:	0018      	movs	r0, r3
 80030de:	f000 fb2f 	bl	8003740 <RTC_Bcd2ToByte>
 80030e2:	0003      	movs	r3, r0
 80030e4:	001a      	movs	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	789b      	ldrb	r3, [r3, #2]
 80030ee:	0018      	movs	r0, r3
 80030f0:	f000 fb26 	bl	8003740 <RTC_Bcd2ToByte>
 80030f4:	0003      	movs	r3, r0
 80030f6:	001a      	movs	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	0018      	movs	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	b006      	add	sp, #24
 8003104:	bd80      	pop	{r7, pc}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	00ffff3f 	.word	0x00ffff3f

0800310c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800310c:	b590      	push	{r4, r7, lr}
 800310e:	b089      	sub	sp, #36	; 0x24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2228      	movs	r2, #40	; 0x28
 800311c:	5c9b      	ldrb	r3, [r3, r2]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_RTC_SetAlarm_IT+0x1a>
 8003122:	2302      	movs	r3, #2
 8003124:	e127      	b.n	8003376 <HAL_RTC_SetAlarm_IT+0x26a>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2228      	movs	r2, #40	; 0x28
 800312a:	2101      	movs	r1, #1
 800312c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2229      	movs	r2, #41	; 0x29
 8003132:	2102      	movs	r1, #2
 8003134:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d136      	bne.n	80031aa <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	2240      	movs	r2, #64	; 0x40
 8003144:	4013      	ands	r3, r2
 8003146:	d102      	bne.n	800314e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2200      	movs	r2, #0
 800314c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	0018      	movs	r0, r3
 8003154:	f000 facc 	bl	80036f0 <RTC_ByteToBcd2>
 8003158:	0003      	movs	r3, r0
 800315a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	785b      	ldrb	r3, [r3, #1]
 8003160:	0018      	movs	r0, r3
 8003162:	f000 fac5 	bl	80036f0 <RTC_ByteToBcd2>
 8003166:	0003      	movs	r3, r0
 8003168:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800316a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	789b      	ldrb	r3, [r3, #2]
 8003170:	0018      	movs	r0, r3
 8003172:	f000 fabd 	bl	80036f0 <RTC_ByteToBcd2>
 8003176:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003178:	0022      	movs	r2, r4
 800317a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	78db      	ldrb	r3, [r3, #3]
 8003180:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003182:	431a      	orrs	r2, r3
 8003184:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2220      	movs	r2, #32
 800318a:	5c9b      	ldrb	r3, [r3, r2]
 800318c:	0018      	movs	r0, r3
 800318e:	f000 faaf 	bl	80036f0 <RTC_ByteToBcd2>
 8003192:	0003      	movs	r3, r0
 8003194:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003196:	0022      	movs	r2, r4
 8003198:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800319e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61fb      	str	r3, [r7, #28]
 80031a8:	e022      	b.n	80031f0 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	2240      	movs	r2, #64	; 0x40
 80031b2:	4013      	ands	r3, r2
 80031b4:	d102      	bne.n	80031bc <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2200      	movs	r2, #0
 80031ba:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	785b      	ldrb	r3, [r3, #1]
 80031c6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80031c8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80031ce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	78db      	ldrb	r3, [r3, #3]
 80031d4:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80031d6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2120      	movs	r1, #32
 80031dc:	5c5b      	ldrb	r3, [r3, r1]
 80031de:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80031e0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80031e6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	22ca      	movs	r2, #202	; 0xca
 8003202:	625a      	str	r2, [r3, #36]	; 0x24
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2253      	movs	r2, #83	; 0x53
 800320a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	429a      	cmp	r2, r3
 8003216:	d14c      	bne.n	80032b2 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4957      	ldr	r1, [pc, #348]	; (8003380 <HAL_RTC_SetAlarm_IT+0x274>)
 8003224:	400a      	ands	r2, r1
 8003226:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2101      	movs	r1, #1
 8003234:	430a      	orrs	r2, r1
 8003236:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8003238:	f7fd ff54 	bl	80010e4 <HAL_GetTick>
 800323c:	0003      	movs	r3, r0
 800323e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003240:	e016      	b.n	8003270 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003242:	f7fd ff4f 	bl	80010e4 <HAL_GetTick>
 8003246:	0002      	movs	r2, r0
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	1ad2      	subs	r2, r2, r3
 800324c:	23fa      	movs	r3, #250	; 0xfa
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	429a      	cmp	r2, r3
 8003252:	d90d      	bls.n	8003270 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	22ff      	movs	r2, #255	; 0xff
 800325a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2229      	movs	r2, #41	; 0x29
 8003260:	2103      	movs	r1, #3
 8003262:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2228      	movs	r2, #40	; 0x28
 8003268:	2100      	movs	r1, #0
 800326a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e082      	b.n	8003376 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	4013      	ands	r3, r2
 800327a:	d0e2      	beq.n	8003242 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69fa      	ldr	r2, [r7, #28]
 8003282:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2180      	movs	r1, #128	; 0x80
 8003298:	0049      	lsls	r1, r1, #1
 800329a:	430a      	orrs	r2, r1
 800329c:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699a      	ldr	r2, [r3, #24]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2180      	movs	r1, #128	; 0x80
 80032aa:	0149      	lsls	r1, r1, #5
 80032ac:	430a      	orrs	r2, r1
 80032ae:	619a      	str	r2, [r3, #24]
 80032b0:	e04b      	b.n	800334a <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699a      	ldr	r2, [r3, #24]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4931      	ldr	r1, [pc, #196]	; (8003384 <HAL_RTC_SetAlarm_IT+0x278>)
 80032be:	400a      	ands	r2, r1
 80032c0:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2102      	movs	r1, #2
 80032ce:	430a      	orrs	r2, r1
 80032d0:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80032d2:	f7fd ff07 	bl	80010e4 <HAL_GetTick>
 80032d6:	0003      	movs	r3, r0
 80032d8:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80032da:	e016      	b.n	800330a <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80032dc:	f7fd ff02 	bl	80010e4 <HAL_GetTick>
 80032e0:	0002      	movs	r2, r0
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	1ad2      	subs	r2, r2, r3
 80032e6:	23fa      	movs	r3, #250	; 0xfa
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d90d      	bls.n	800330a <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	22ff      	movs	r2, #255	; 0xff
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2229      	movs	r2, #41	; 0x29
 80032fa:	2103      	movs	r1, #3
 80032fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2228      	movs	r2, #40	; 0x28
 8003302:	2100      	movs	r1, #0
 8003304:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e035      	b.n	8003376 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2202      	movs	r2, #2
 8003312:	4013      	ands	r3, r2
 8003314:	d0e2      	beq.n	80032dc <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69fa      	ldr	r2, [r7, #28]
 800331c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699a      	ldr	r2, [r3, #24]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2180      	movs	r1, #128	; 0x80
 8003332:	0089      	lsls	r1, r1, #2
 8003334:	430a      	orrs	r2, r1
 8003336:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2180      	movs	r1, #128	; 0x80
 8003344:	0189      	lsls	r1, r1, #6
 8003346:	430a      	orrs	r2, r1
 8003348:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800334a:	4a0f      	ldr	r2, [pc, #60]	; (8003388 <HAL_RTC_SetAlarm_IT+0x27c>)
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	58d3      	ldr	r3, [r2, r3]
 8003350:	490d      	ldr	r1, [pc, #52]	; (8003388 <HAL_RTC_SetAlarm_IT+0x27c>)
 8003352:	2280      	movs	r2, #128	; 0x80
 8003354:	0312      	lsls	r2, r2, #12
 8003356:	4313      	orrs	r3, r2
 8003358:	2280      	movs	r2, #128	; 0x80
 800335a:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	22ff      	movs	r2, #255	; 0xff
 8003362:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2229      	movs	r2, #41	; 0x29
 8003368:	2101      	movs	r1, #1
 800336a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2228      	movs	r2, #40	; 0x28
 8003370:	2100      	movs	r1, #0
 8003372:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	0018      	movs	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	b009      	add	sp, #36	; 0x24
 800337c:	bd90      	pop	{r4, r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	fffffeff 	.word	0xfffffeff
 8003384:	fffffdff 	.word	0xfffffdff
 8003388:	40021800 	.word	0x40021800

0800338c <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d144      	bne.n	800342e <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2280      	movs	r2, #128	; 0x80
 80033a8:	0052      	lsls	r2, r2, #1
 80033aa:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	045b      	lsls	r3, r3, #17
 80033bc:	0c5b      	lsrs	r3, r3, #17
 80033be:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	0c1b      	lsrs	r3, r3, #16
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	223f      	movs	r2, #63	; 0x3f
 80033c8:	4013      	ands	r3, r2
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	0a1b      	lsrs	r3, r3, #8
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	227f      	movs	r2, #127	; 0x7f
 80033d8:	4013      	ands	r3, r2
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	227f      	movs	r2, #127	; 0x7f
 80033e6:	4013      	ands	r3, r2
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	0d9b      	lsrs	r3, r3, #22
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2201      	movs	r2, #1
 80033f6:	4013      	ands	r3, r2
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	0e1b      	lsrs	r3, r3, #24
 8003408:	b2db      	uxtb	r3, r3
 800340a:	223f      	movs	r2, #63	; 0x3f
 800340c:	4013      	ands	r3, r2
 800340e:	b2d9      	uxtb	r1, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2220      	movs	r2, #32
 8003414:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	2380      	movs	r3, #128	; 0x80
 800341a:	05db      	lsls	r3, r3, #23
 800341c:	401a      	ands	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	4a3b      	ldr	r2, [pc, #236]	; (8003514 <HAL_RTC_GetAlarm+0x188>)
 8003426:	401a      	ands	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	615a      	str	r2, [r3, #20]
 800342c:	e043      	b.n	80034b6 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2280      	movs	r2, #128	; 0x80
 8003432:	0092      	lsls	r2, r2, #2
 8003434:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800343c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003444:	045b      	lsls	r3, r3, #17
 8003446:	0c5b      	lsrs	r3, r3, #17
 8003448:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	0c1b      	lsrs	r3, r3, #16
 800344e:	b2db      	uxtb	r3, r3
 8003450:	223f      	movs	r2, #63	; 0x3f
 8003452:	4013      	ands	r3, r2
 8003454:	b2da      	uxtb	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	0a1b      	lsrs	r3, r3, #8
 800345e:	b2db      	uxtb	r3, r3
 8003460:	227f      	movs	r2, #127	; 0x7f
 8003462:	4013      	ands	r3, r2
 8003464:	b2da      	uxtb	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	227f      	movs	r2, #127	; 0x7f
 8003470:	4013      	ands	r3, r2
 8003472:	b2da      	uxtb	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	0d9b      	lsrs	r3, r3, #22
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2201      	movs	r2, #1
 8003480:	4013      	ands	r3, r2
 8003482:	b2da      	uxtb	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	0e1b      	lsrs	r3, r3, #24
 8003492:	b2db      	uxtb	r3, r3
 8003494:	223f      	movs	r2, #63	; 0x3f
 8003496:	4013      	ands	r3, r2
 8003498:	b2d9      	uxtb	r1, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2220      	movs	r2, #32
 800349e:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	2380      	movs	r3, #128	; 0x80
 80034a4:	05db      	lsls	r3, r3, #23
 80034a6:	401a      	ands	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	4a19      	ldr	r2, [pc, #100]	; (8003514 <HAL_RTC_GetAlarm+0x188>)
 80034b0:	401a      	ands	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d125      	bne.n	8003508 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	0018      	movs	r0, r3
 80034c2:	f000 f93d 	bl	8003740 <RTC_Bcd2ToByte>
 80034c6:	0003      	movs	r3, r0
 80034c8:	001a      	movs	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	785b      	ldrb	r3, [r3, #1]
 80034d2:	0018      	movs	r0, r3
 80034d4:	f000 f934 	bl	8003740 <RTC_Bcd2ToByte>
 80034d8:	0003      	movs	r3, r0
 80034da:	001a      	movs	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	789b      	ldrb	r3, [r3, #2]
 80034e4:	0018      	movs	r0, r3
 80034e6:	f000 f92b 	bl	8003740 <RTC_Bcd2ToByte>
 80034ea:	0003      	movs	r3, r0
 80034ec:	001a      	movs	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2220      	movs	r2, #32
 80034f6:	5c9b      	ldrb	r3, [r3, r2]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f000 f921 	bl	8003740 <RTC_Bcd2ToByte>
 80034fe:	0003      	movs	r3, r0
 8003500:	0019      	movs	r1, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2220      	movs	r2, #32
 8003506:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	0018      	movs	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	b006      	add	sp, #24
 8003510:	bd80      	pop	{r7, pc}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	80808080 	.word	0x80808080

08003518 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	2380      	movs	r3, #128	; 0x80
 8003528:	015b      	lsls	r3, r3, #5
 800352a:	4013      	ands	r3, r2
 800352c:	d011      	beq.n	8003552 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003534:	2201      	movs	r2, #1
 8003536:	4013      	ands	r3, r2
 8003538:	d00b      	beq.n	8003552 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2101      	movs	r1, #1
 8003546:	430a      	orrs	r2, r1
 8003548:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	0018      	movs	r0, r3
 800354e:	f7fd fa6b 	bl	8000a28 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699a      	ldr	r2, [r3, #24]
 8003558:	2380      	movs	r3, #128	; 0x80
 800355a:	019b      	lsls	r3, r3, #6
 800355c:	4013      	ands	r3, r2
 800355e:	d011      	beq.n	8003584 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003566:	2202      	movs	r2, #2
 8003568:	4013      	ands	r3, r2
 800356a:	d00b      	beq.n	8003584 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2102      	movs	r1, #2
 8003578:	430a      	orrs	r2, r1
 800357a:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	0018      	movs	r0, r3
 8003580:	f000 f8fb 	bl	800377a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2229      	movs	r2, #41	; 0x29
 8003588:	2101      	movs	r1, #1
 800358a:	5499      	strb	r1, [r3, r2]
}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	46bd      	mov	sp, r7
 8003590:	b002      	add	sp, #8
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	21a0      	movs	r1, #160	; 0xa0
 80035a8:	438a      	bics	r2, r1
 80035aa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80035ac:	f7fd fd9a 	bl	80010e4 <HAL_GetTick>
 80035b0:	0003      	movs	r3, r0
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80035b4:	e00a      	b.n	80035cc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80035b6:	f7fd fd95 	bl	80010e4 <HAL_GetTick>
 80035ba:	0002      	movs	r2, r0
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1ad2      	subs	r2, r2, r3
 80035c0:	23fa      	movs	r3, #250	; 0xfa
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d901      	bls.n	80035cc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e006      	b.n	80035da <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	4013      	ands	r3, r2
 80035d6:	d0ee      	beq.n	80035b6 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	0018      	movs	r0, r3
 80035dc:	46bd      	mov	sp, r7
 80035de:	b004      	add	sp, #16
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80035ea:	230f      	movs	r3, #15
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	2240      	movs	r2, #64	; 0x40
 80035fa:	4013      	ands	r3, r2
 80035fc:	d12c      	bne.n	8003658 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2180      	movs	r1, #128	; 0x80
 800360a:	430a      	orrs	r2, r1
 800360c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800360e:	f7fd fd69 	bl	80010e4 <HAL_GetTick>
 8003612:	0003      	movs	r3, r0
 8003614:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003616:	e014      	b.n	8003642 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003618:	f7fd fd64 	bl	80010e4 <HAL_GetTick>
 800361c:	0002      	movs	r2, r0
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	1ad2      	subs	r2, r2, r3
 8003622:	200f      	movs	r0, #15
 8003624:	183b      	adds	r3, r7, r0
 8003626:	1839      	adds	r1, r7, r0
 8003628:	7809      	ldrb	r1, [r1, #0]
 800362a:	7019      	strb	r1, [r3, #0]
 800362c:	23fa      	movs	r3, #250	; 0xfa
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	429a      	cmp	r2, r3
 8003632:	d906      	bls.n	8003642 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8003634:	183b      	adds	r3, r7, r0
 8003636:	2203      	movs	r2, #3
 8003638:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2229      	movs	r2, #41	; 0x29
 800363e:	2103      	movs	r1, #3
 8003640:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	2240      	movs	r2, #64	; 0x40
 800364a:	4013      	ands	r3, r2
 800364c:	d104      	bne.n	8003658 <RTC_EnterInitMode+0x76>
 800364e:	230f      	movs	r3, #15
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d1df      	bne.n	8003618 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003658:	230f      	movs	r3, #15
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	781b      	ldrb	r3, [r3, #0]
}
 800365e:	0018      	movs	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	b004      	add	sp, #16
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003670:	240f      	movs	r4, #15
 8003672:	193b      	adds	r3, r7, r4
 8003674:	2200      	movs	r2, #0
 8003676:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003678:	4b1c      	ldr	r3, [pc, #112]	; (80036ec <RTC_ExitInitMode+0x84>)
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	4b1b      	ldr	r3, [pc, #108]	; (80036ec <RTC_ExitInitMode+0x84>)
 800367e:	2180      	movs	r1, #128	; 0x80
 8003680:	438a      	bics	r2, r1
 8003682:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003684:	4b19      	ldr	r3, [pc, #100]	; (80036ec <RTC_ExitInitMode+0x84>)
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	2220      	movs	r2, #32
 800368a:	4013      	ands	r3, r2
 800368c:	d10d      	bne.n	80036aa <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	0018      	movs	r0, r3
 8003692:	f7ff ff7f 	bl	8003594 <HAL_RTC_WaitForSynchro>
 8003696:	1e03      	subs	r3, r0, #0
 8003698:	d021      	beq.n	80036de <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2229      	movs	r2, #41	; 0x29
 800369e:	2103      	movs	r1, #3
 80036a0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80036a2:	193b      	adds	r3, r7, r4
 80036a4:	2203      	movs	r2, #3
 80036a6:	701a      	strb	r2, [r3, #0]
 80036a8:	e019      	b.n	80036de <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80036aa:	4b10      	ldr	r3, [pc, #64]	; (80036ec <RTC_ExitInitMode+0x84>)
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <RTC_ExitInitMode+0x84>)
 80036b0:	2120      	movs	r1, #32
 80036b2:	438a      	bics	r2, r1
 80036b4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	0018      	movs	r0, r3
 80036ba:	f7ff ff6b 	bl	8003594 <HAL_RTC_WaitForSynchro>
 80036be:	1e03      	subs	r3, r0, #0
 80036c0:	d007      	beq.n	80036d2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2229      	movs	r2, #41	; 0x29
 80036c6:	2103      	movs	r1, #3
 80036c8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80036ca:	230f      	movs	r3, #15
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	2203      	movs	r2, #3
 80036d0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <RTC_ExitInitMode+0x84>)
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	4b05      	ldr	r3, [pc, #20]	; (80036ec <RTC_ExitInitMode+0x84>)
 80036d8:	2120      	movs	r1, #32
 80036da:	430a      	orrs	r2, r1
 80036dc:	619a      	str	r2, [r3, #24]
  }

  return status;
 80036de:	230f      	movs	r3, #15
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	781b      	ldrb	r3, [r3, #0]
}
 80036e4:	0018      	movs	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b005      	add	sp, #20
 80036ea:	bd90      	pop	{r4, r7, pc}
 80036ec:	40002800 	.word	0x40002800

080036f0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	0002      	movs	r2, r0
 80036f8:	1dfb      	adds	r3, r7, #7
 80036fa:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003700:	230b      	movs	r3, #11
 8003702:	18fb      	adds	r3, r7, r3
 8003704:	1dfa      	adds	r2, r7, #7
 8003706:	7812      	ldrb	r2, [r2, #0]
 8003708:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800370a:	e008      	b.n	800371e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	3301      	adds	r3, #1
 8003710:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003712:	220b      	movs	r2, #11
 8003714:	18bb      	adds	r3, r7, r2
 8003716:	18ba      	adds	r2, r7, r2
 8003718:	7812      	ldrb	r2, [r2, #0]
 800371a:	3a0a      	subs	r2, #10
 800371c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800371e:	210b      	movs	r1, #11
 8003720:	187b      	adds	r3, r7, r1
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b09      	cmp	r3, #9
 8003726:	d8f1      	bhi.n	800370c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	b2da      	uxtb	r2, r3
 8003730:	187b      	adds	r3, r7, r1
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	4313      	orrs	r3, r2
 8003736:	b2db      	uxtb	r3, r3
}
 8003738:	0018      	movs	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	b004      	add	sp, #16
 800373e:	bd80      	pop	{r7, pc}

08003740 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	0002      	movs	r2, r0
 8003748:	1dfb      	adds	r3, r7, #7
 800374a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800374c:	1dfb      	adds	r3, r7, #7
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	091b      	lsrs	r3, r3, #4
 8003752:	b2db      	uxtb	r3, r3
 8003754:	001a      	movs	r2, r3
 8003756:	0013      	movs	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	189b      	adds	r3, r3, r2
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	b2da      	uxtb	r2, r3
 8003764:	1dfb      	adds	r3, r7, #7
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	210f      	movs	r1, #15
 800376a:	400b      	ands	r3, r1
 800376c:	b2db      	uxtb	r3, r3
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	b2db      	uxtb	r3, r3
}
 8003772:	0018      	movs	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	b004      	add	sp, #16
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	46bd      	mov	sp, r7
 8003786:	b002      	add	sp, #8
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e046      	b.n	800382c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2288      	movs	r2, #136	; 0x88
 80037a2:	589b      	ldr	r3, [r3, r2]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d107      	bne.n	80037b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2284      	movs	r2, #132	; 0x84
 80037ac:	2100      	movs	r1, #0
 80037ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	0018      	movs	r0, r3
 80037b4:	f7fd fab8 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2288      	movs	r2, #136	; 0x88
 80037bc:	2124      	movs	r1, #36	; 0x24
 80037be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2101      	movs	r1, #1
 80037cc:	438a      	bics	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	0018      	movs	r0, r3
 80037d4:	f000 f8cc 	bl	8003970 <UART_SetConfig>
 80037d8:	0003      	movs	r3, r0
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e024      	b.n	800382c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	0018      	movs	r0, r3
 80037ee:	f000 fb37 	bl	8003e60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	490d      	ldr	r1, [pc, #52]	; (8003834 <HAL_UART_Init+0xa8>)
 80037fe:	400a      	ands	r2, r1
 8003800:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	212a      	movs	r1, #42	; 0x2a
 800380e:	438a      	bics	r2, r1
 8003810:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2101      	movs	r1, #1
 800381e:	430a      	orrs	r2, r1
 8003820:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	0018      	movs	r0, r3
 8003826:	f000 fbcf 	bl	8003fc8 <UART_CheckIdleState>
 800382a:	0003      	movs	r3, r0
}
 800382c:	0018      	movs	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	b002      	add	sp, #8
 8003832:	bd80      	pop	{r7, pc}
 8003834:	ffffb7ff 	.word	0xffffb7ff

08003838 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af02      	add	r7, sp, #8
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	603b      	str	r3, [r7, #0]
 8003844:	1dbb      	adds	r3, r7, #6
 8003846:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2288      	movs	r2, #136	; 0x88
 800384c:	589b      	ldr	r3, [r3, r2]
 800384e:	2b20      	cmp	r3, #32
 8003850:	d000      	beq.n	8003854 <HAL_UART_Transmit+0x1c>
 8003852:	e088      	b.n	8003966 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_UART_Transmit+0x2a>
 800385a:	1dbb      	adds	r3, r7, #6
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e080      	b.n	8003968 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	015b      	lsls	r3, r3, #5
 800386e:	429a      	cmp	r2, r3
 8003870:	d109      	bne.n	8003886 <HAL_UART_Transmit+0x4e>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d105      	bne.n	8003886 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2201      	movs	r2, #1
 800387e:	4013      	ands	r3, r2
 8003880:	d001      	beq.n	8003886 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e070      	b.n	8003968 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2290      	movs	r2, #144	; 0x90
 800388a:	2100      	movs	r1, #0
 800388c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2288      	movs	r2, #136	; 0x88
 8003892:	2121      	movs	r1, #33	; 0x21
 8003894:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003896:	f7fd fc25 	bl	80010e4 <HAL_GetTick>
 800389a:	0003      	movs	r3, r0
 800389c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	1dba      	adds	r2, r7, #6
 80038a2:	2154      	movs	r1, #84	; 0x54
 80038a4:	8812      	ldrh	r2, [r2, #0]
 80038a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1dba      	adds	r2, r7, #6
 80038ac:	2156      	movs	r1, #86	; 0x56
 80038ae:	8812      	ldrh	r2, [r2, #0]
 80038b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	015b      	lsls	r3, r3, #5
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d108      	bne.n	80038d0 <HAL_UART_Transmit+0x98>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d104      	bne.n	80038d0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	e003      	b.n	80038d8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038d8:	e02c      	b.n	8003934 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	0013      	movs	r3, r2
 80038e4:	2200      	movs	r2, #0
 80038e6:	2180      	movs	r1, #128	; 0x80
 80038e8:	f000 fbbc 	bl	8004064 <UART_WaitOnFlagUntilTimeout>
 80038ec:	1e03      	subs	r3, r0, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e039      	b.n	8003968 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10b      	bne.n	8003912 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	001a      	movs	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	05d2      	lsls	r2, r2, #23
 8003906:	0dd2      	lsrs	r2, r2, #23
 8003908:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	3302      	adds	r3, #2
 800390e:	61bb      	str	r3, [r7, #24]
 8003910:	e007      	b.n	8003922 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	781a      	ldrb	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	3301      	adds	r3, #1
 8003920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2256      	movs	r2, #86	; 0x56
 8003926:	5a9b      	ldrh	r3, [r3, r2]
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b299      	uxth	r1, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2256      	movs	r2, #86	; 0x56
 8003932:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2256      	movs	r2, #86	; 0x56
 8003938:	5a9b      	ldrh	r3, [r3, r2]
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1cc      	bne.n	80038da <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	0013      	movs	r3, r2
 800394a:	2200      	movs	r2, #0
 800394c:	2140      	movs	r1, #64	; 0x40
 800394e:	f000 fb89 	bl	8004064 <UART_WaitOnFlagUntilTimeout>
 8003952:	1e03      	subs	r3, r0, #0
 8003954:	d001      	beq.n	800395a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e006      	b.n	8003968 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2288      	movs	r2, #136	; 0x88
 800395e:	2120      	movs	r1, #32
 8003960:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	e000      	b.n	8003968 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003966:	2302      	movs	r3, #2
  }
}
 8003968:	0018      	movs	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	b008      	add	sp, #32
 800396e:	bd80      	pop	{r7, pc}

08003970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003970:	b5b0      	push	{r4, r5, r7, lr}
 8003972:	b090      	sub	sp, #64	; 0x40
 8003974:	af00      	add	r7, sp, #0
 8003976:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003978:	231a      	movs	r3, #26
 800397a:	2220      	movs	r2, #32
 800397c:	189b      	adds	r3, r3, r2
 800397e:	19db      	adds	r3, r3, r7
 8003980:	2200      	movs	r2, #0
 8003982:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	431a      	orrs	r2, r3
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	431a      	orrs	r2, r3
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	4313      	orrs	r3, r2
 800399a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4ac4      	ldr	r2, [pc, #784]	; (8003cb4 <UART_SetConfig+0x344>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	0019      	movs	r1, r3
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ae:	430b      	orrs	r3, r1
 80039b0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	4abf      	ldr	r2, [pc, #764]	; (8003cb8 <UART_SetConfig+0x348>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	0018      	movs	r0, r3
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	68d9      	ldr	r1, [r3, #12]
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	0003      	movs	r3, r0
 80039c8:	430b      	orrs	r3, r1
 80039ca:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4ab9      	ldr	r2, [pc, #740]	; (8003cbc <UART_SetConfig+0x34c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d004      	beq.n	80039e6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039e2:	4313      	orrs	r3, r2
 80039e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4ab4      	ldr	r2, [pc, #720]	; (8003cc0 <UART_SetConfig+0x350>)
 80039ee:	4013      	ands	r3, r2
 80039f0:	0019      	movs	r1, r3
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f8:	430b      	orrs	r3, r1
 80039fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	220f      	movs	r2, #15
 8003a04:	4393      	bics	r3, r2
 8003a06:	0018      	movs	r0, r3
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	0003      	movs	r3, r0
 8003a12:	430b      	orrs	r3, r1
 8003a14:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4aaa      	ldr	r2, [pc, #680]	; (8003cc4 <UART_SetConfig+0x354>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d131      	bne.n	8003a84 <UART_SetConfig+0x114>
 8003a20:	4ba9      	ldr	r3, [pc, #676]	; (8003cc8 <UART_SetConfig+0x358>)
 8003a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a24:	2203      	movs	r2, #3
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d01d      	beq.n	8003a68 <UART_SetConfig+0xf8>
 8003a2c:	d823      	bhi.n	8003a76 <UART_SetConfig+0x106>
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d00c      	beq.n	8003a4c <UART_SetConfig+0xdc>
 8003a32:	d820      	bhi.n	8003a76 <UART_SetConfig+0x106>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <UART_SetConfig+0xce>
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d00e      	beq.n	8003a5a <UART_SetConfig+0xea>
 8003a3c:	e01b      	b.n	8003a76 <UART_SetConfig+0x106>
 8003a3e:	231b      	movs	r3, #27
 8003a40:	2220      	movs	r2, #32
 8003a42:	189b      	adds	r3, r3, r2
 8003a44:	19db      	adds	r3, r3, r7
 8003a46:	2200      	movs	r2, #0
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	e071      	b.n	8003b30 <UART_SetConfig+0x1c0>
 8003a4c:	231b      	movs	r3, #27
 8003a4e:	2220      	movs	r2, #32
 8003a50:	189b      	adds	r3, r3, r2
 8003a52:	19db      	adds	r3, r3, r7
 8003a54:	2202      	movs	r2, #2
 8003a56:	701a      	strb	r2, [r3, #0]
 8003a58:	e06a      	b.n	8003b30 <UART_SetConfig+0x1c0>
 8003a5a:	231b      	movs	r3, #27
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	189b      	adds	r3, r3, r2
 8003a60:	19db      	adds	r3, r3, r7
 8003a62:	2204      	movs	r2, #4
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	e063      	b.n	8003b30 <UART_SetConfig+0x1c0>
 8003a68:	231b      	movs	r3, #27
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	189b      	adds	r3, r3, r2
 8003a6e:	19db      	adds	r3, r3, r7
 8003a70:	2208      	movs	r2, #8
 8003a72:	701a      	strb	r2, [r3, #0]
 8003a74:	e05c      	b.n	8003b30 <UART_SetConfig+0x1c0>
 8003a76:	231b      	movs	r3, #27
 8003a78:	2220      	movs	r2, #32
 8003a7a:	189b      	adds	r3, r3, r2
 8003a7c:	19db      	adds	r3, r3, r7
 8003a7e:	2210      	movs	r2, #16
 8003a80:	701a      	strb	r2, [r3, #0]
 8003a82:	e055      	b.n	8003b30 <UART_SetConfig+0x1c0>
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a90      	ldr	r2, [pc, #576]	; (8003ccc <UART_SetConfig+0x35c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d106      	bne.n	8003a9c <UART_SetConfig+0x12c>
 8003a8e:	231b      	movs	r3, #27
 8003a90:	2220      	movs	r2, #32
 8003a92:	189b      	adds	r3, r3, r2
 8003a94:	19db      	adds	r3, r3, r7
 8003a96:	2200      	movs	r2, #0
 8003a98:	701a      	strb	r2, [r3, #0]
 8003a9a:	e049      	b.n	8003b30 <UART_SetConfig+0x1c0>
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a86      	ldr	r2, [pc, #536]	; (8003cbc <UART_SetConfig+0x34c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d13e      	bne.n	8003b24 <UART_SetConfig+0x1b4>
 8003aa6:	4b88      	ldr	r3, [pc, #544]	; (8003cc8 <UART_SetConfig+0x358>)
 8003aa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003aaa:	23c0      	movs	r3, #192	; 0xc0
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	4013      	ands	r3, r2
 8003ab0:	22c0      	movs	r2, #192	; 0xc0
 8003ab2:	0112      	lsls	r2, r2, #4
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d027      	beq.n	8003b08 <UART_SetConfig+0x198>
 8003ab8:	22c0      	movs	r2, #192	; 0xc0
 8003aba:	0112      	lsls	r2, r2, #4
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d82a      	bhi.n	8003b16 <UART_SetConfig+0x1a6>
 8003ac0:	2280      	movs	r2, #128	; 0x80
 8003ac2:	0112      	lsls	r2, r2, #4
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d011      	beq.n	8003aec <UART_SetConfig+0x17c>
 8003ac8:	2280      	movs	r2, #128	; 0x80
 8003aca:	0112      	lsls	r2, r2, #4
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d822      	bhi.n	8003b16 <UART_SetConfig+0x1a6>
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <UART_SetConfig+0x16e>
 8003ad4:	2280      	movs	r2, #128	; 0x80
 8003ad6:	00d2      	lsls	r2, r2, #3
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00e      	beq.n	8003afa <UART_SetConfig+0x18a>
 8003adc:	e01b      	b.n	8003b16 <UART_SetConfig+0x1a6>
 8003ade:	231b      	movs	r3, #27
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	189b      	adds	r3, r3, r2
 8003ae4:	19db      	adds	r3, r3, r7
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	701a      	strb	r2, [r3, #0]
 8003aea:	e021      	b.n	8003b30 <UART_SetConfig+0x1c0>
 8003aec:	231b      	movs	r3, #27
 8003aee:	2220      	movs	r2, #32
 8003af0:	189b      	adds	r3, r3, r2
 8003af2:	19db      	adds	r3, r3, r7
 8003af4:	2202      	movs	r2, #2
 8003af6:	701a      	strb	r2, [r3, #0]
 8003af8:	e01a      	b.n	8003b30 <UART_SetConfig+0x1c0>
 8003afa:	231b      	movs	r3, #27
 8003afc:	2220      	movs	r2, #32
 8003afe:	189b      	adds	r3, r3, r2
 8003b00:	19db      	adds	r3, r3, r7
 8003b02:	2204      	movs	r2, #4
 8003b04:	701a      	strb	r2, [r3, #0]
 8003b06:	e013      	b.n	8003b30 <UART_SetConfig+0x1c0>
 8003b08:	231b      	movs	r3, #27
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	189b      	adds	r3, r3, r2
 8003b0e:	19db      	adds	r3, r3, r7
 8003b10:	2208      	movs	r2, #8
 8003b12:	701a      	strb	r2, [r3, #0]
 8003b14:	e00c      	b.n	8003b30 <UART_SetConfig+0x1c0>
 8003b16:	231b      	movs	r3, #27
 8003b18:	2220      	movs	r2, #32
 8003b1a:	189b      	adds	r3, r3, r2
 8003b1c:	19db      	adds	r3, r3, r7
 8003b1e:	2210      	movs	r2, #16
 8003b20:	701a      	strb	r2, [r3, #0]
 8003b22:	e005      	b.n	8003b30 <UART_SetConfig+0x1c0>
 8003b24:	231b      	movs	r3, #27
 8003b26:	2220      	movs	r2, #32
 8003b28:	189b      	adds	r3, r3, r2
 8003b2a:	19db      	adds	r3, r3, r7
 8003b2c:	2210      	movs	r2, #16
 8003b2e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a61      	ldr	r2, [pc, #388]	; (8003cbc <UART_SetConfig+0x34c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d000      	beq.n	8003b3c <UART_SetConfig+0x1cc>
 8003b3a:	e092      	b.n	8003c62 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b3c:	231b      	movs	r3, #27
 8003b3e:	2220      	movs	r2, #32
 8003b40:	189b      	adds	r3, r3, r2
 8003b42:	19db      	adds	r3, r3, r7
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d015      	beq.n	8003b76 <UART_SetConfig+0x206>
 8003b4a:	dc18      	bgt.n	8003b7e <UART_SetConfig+0x20e>
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d00d      	beq.n	8003b6c <UART_SetConfig+0x1fc>
 8003b50:	dc15      	bgt.n	8003b7e <UART_SetConfig+0x20e>
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <UART_SetConfig+0x1ec>
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d005      	beq.n	8003b66 <UART_SetConfig+0x1f6>
 8003b5a:	e010      	b.n	8003b7e <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b5c:	f7fe fec0 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 8003b60:	0003      	movs	r3, r0
 8003b62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b64:	e014      	b.n	8003b90 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b66:	4b5a      	ldr	r3, [pc, #360]	; (8003cd0 <UART_SetConfig+0x360>)
 8003b68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b6a:	e011      	b.n	8003b90 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b6c:	f7fe fe2c 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8003b70:	0003      	movs	r3, r0
 8003b72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b74:	e00c      	b.n	8003b90 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	021b      	lsls	r3, r3, #8
 8003b7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b7c:	e008      	b.n	8003b90 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003b82:	231a      	movs	r3, #26
 8003b84:	2220      	movs	r2, #32
 8003b86:	189b      	adds	r3, r3, r2
 8003b88:	19db      	adds	r3, r3, r7
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	701a      	strb	r2, [r3, #0]
        break;
 8003b8e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d100      	bne.n	8003b98 <UART_SetConfig+0x228>
 8003b96:	e147      	b.n	8003e28 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b9c:	4b4d      	ldr	r3, [pc, #308]	; (8003cd4 <UART_SetConfig+0x364>)
 8003b9e:	0052      	lsls	r2, r2, #1
 8003ba0:	5ad3      	ldrh	r3, [r2, r3]
 8003ba2:	0019      	movs	r1, r3
 8003ba4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ba6:	f7fc fab7 	bl	8000118 <__udivsi3>
 8003baa:	0003      	movs	r3, r0
 8003bac:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	0013      	movs	r3, r2
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	189b      	adds	r3, r3, r2
 8003bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d305      	bcc.n	8003bca <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d906      	bls.n	8003bd8 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8003bca:	231a      	movs	r3, #26
 8003bcc:	2220      	movs	r2, #32
 8003bce:	189b      	adds	r3, r3, r2
 8003bd0:	19db      	adds	r3, r3, r7
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	e127      	b.n	8003e28 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bda:	61bb      	str	r3, [r7, #24]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61fb      	str	r3, [r7, #28]
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003be4:	4b3b      	ldr	r3, [pc, #236]	; (8003cd4 <UART_SetConfig+0x364>)
 8003be6:	0052      	lsls	r2, r2, #1
 8003be8:	5ad3      	ldrh	r3, [r2, r3]
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	69b8      	ldr	r0, [r7, #24]
 8003bf6:	69f9      	ldr	r1, [r7, #28]
 8003bf8:	f7fc fb1a 	bl	8000230 <__aeabi_uldivmod>
 8003bfc:	0002      	movs	r2, r0
 8003bfe:	000b      	movs	r3, r1
 8003c00:	0e11      	lsrs	r1, r2, #24
 8003c02:	021d      	lsls	r5, r3, #8
 8003c04:	430d      	orrs	r5, r1
 8003c06:	0214      	lsls	r4, r2, #8
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	085b      	lsrs	r3, r3, #1
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	68b8      	ldr	r0, [r7, #8]
 8003c16:	68f9      	ldr	r1, [r7, #12]
 8003c18:	1900      	adds	r0, r0, r4
 8003c1a:	4169      	adcs	r1, r5
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	2300      	movs	r3, #0
 8003c24:	607b      	str	r3, [r7, #4]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f7fc fb01 	bl	8000230 <__aeabi_uldivmod>
 8003c2e:	0002      	movs	r2, r0
 8003c30:	000b      	movs	r3, r1
 8003c32:	0013      	movs	r3, r2
 8003c34:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c38:	23c0      	movs	r3, #192	; 0xc0
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d309      	bcc.n	8003c54 <UART_SetConfig+0x2e4>
 8003c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c42:	2380      	movs	r3, #128	; 0x80
 8003c44:	035b      	lsls	r3, r3, #13
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d204      	bcs.n	8003c54 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c50:	60da      	str	r2, [r3, #12]
 8003c52:	e0e9      	b.n	8003e28 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8003c54:	231a      	movs	r3, #26
 8003c56:	2220      	movs	r2, #32
 8003c58:	189b      	adds	r3, r3, r2
 8003c5a:	19db      	adds	r3, r3, r7
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	701a      	strb	r2, [r3, #0]
 8003c60:	e0e2      	b.n	8003e28 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	69da      	ldr	r2, [r3, #28]
 8003c66:	2380      	movs	r3, #128	; 0x80
 8003c68:	021b      	lsls	r3, r3, #8
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d000      	beq.n	8003c70 <UART_SetConfig+0x300>
 8003c6e:	e083      	b.n	8003d78 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003c70:	231b      	movs	r3, #27
 8003c72:	2220      	movs	r2, #32
 8003c74:	189b      	adds	r3, r3, r2
 8003c76:	19db      	adds	r3, r3, r7
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d015      	beq.n	8003caa <UART_SetConfig+0x33a>
 8003c7e:	dc2b      	bgt.n	8003cd8 <UART_SetConfig+0x368>
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d00d      	beq.n	8003ca0 <UART_SetConfig+0x330>
 8003c84:	dc28      	bgt.n	8003cd8 <UART_SetConfig+0x368>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <UART_SetConfig+0x320>
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d005      	beq.n	8003c9a <UART_SetConfig+0x32a>
 8003c8e:	e023      	b.n	8003cd8 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c90:	f7fe fe26 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 8003c94:	0003      	movs	r3, r0
 8003c96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c98:	e027      	b.n	8003cea <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <UART_SetConfig+0x360>)
 8003c9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c9e:	e024      	b.n	8003cea <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ca0:	f7fe fd92 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ca8:	e01f      	b.n	8003cea <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003caa:	2380      	movs	r3, #128	; 0x80
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cb0:	e01b      	b.n	8003cea <UART_SetConfig+0x37a>
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	cfff69f3 	.word	0xcfff69f3
 8003cb8:	ffffcfff 	.word	0xffffcfff
 8003cbc:	40008000 	.word	0x40008000
 8003cc0:	11fff4ff 	.word	0x11fff4ff
 8003cc4:	40013800 	.word	0x40013800
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40004400 	.word	0x40004400
 8003cd0:	00f42400 	.word	0x00f42400
 8003cd4:	08005374 	.word	0x08005374
      default:
        pclk = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003cdc:	231a      	movs	r3, #26
 8003cde:	2220      	movs	r2, #32
 8003ce0:	189b      	adds	r3, r3, r2
 8003ce2:	19db      	adds	r3, r3, r7
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	701a      	strb	r2, [r3, #0]
        break;
 8003ce8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d100      	bne.n	8003cf2 <UART_SetConfig+0x382>
 8003cf0:	e09a      	b.n	8003e28 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cf6:	4b58      	ldr	r3, [pc, #352]	; (8003e58 <UART_SetConfig+0x4e8>)
 8003cf8:	0052      	lsls	r2, r2, #1
 8003cfa:	5ad3      	ldrh	r3, [r2, r3]
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003d00:	f7fc fa0a 	bl	8000118 <__udivsi3>
 8003d04:	0003      	movs	r3, r0
 8003d06:	005a      	lsls	r2, r3, #1
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	085b      	lsrs	r3, r3, #1
 8003d0e:	18d2      	adds	r2, r2, r3
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	0019      	movs	r1, r3
 8003d16:	0010      	movs	r0, r2
 8003d18:	f7fc f9fe 	bl	8000118 <__udivsi3>
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	2b0f      	cmp	r3, #15
 8003d24:	d921      	bls.n	8003d6a <UART_SetConfig+0x3fa>
 8003d26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d28:	2380      	movs	r3, #128	; 0x80
 8003d2a:	025b      	lsls	r3, r3, #9
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d21c      	bcs.n	8003d6a <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	200e      	movs	r0, #14
 8003d36:	2420      	movs	r4, #32
 8003d38:	1903      	adds	r3, r0, r4
 8003d3a:	19db      	adds	r3, r3, r7
 8003d3c:	210f      	movs	r1, #15
 8003d3e:	438a      	bics	r2, r1
 8003d40:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d44:	085b      	lsrs	r3, r3, #1
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2207      	movs	r2, #7
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	b299      	uxth	r1, r3
 8003d4e:	1903      	adds	r3, r0, r4
 8003d50:	19db      	adds	r3, r3, r7
 8003d52:	1902      	adds	r2, r0, r4
 8003d54:	19d2      	adds	r2, r2, r7
 8003d56:	8812      	ldrh	r2, [r2, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	1902      	adds	r2, r0, r4
 8003d62:	19d2      	adds	r2, r2, r7
 8003d64:	8812      	ldrh	r2, [r2, #0]
 8003d66:	60da      	str	r2, [r3, #12]
 8003d68:	e05e      	b.n	8003e28 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d6a:	231a      	movs	r3, #26
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	189b      	adds	r3, r3, r2
 8003d70:	19db      	adds	r3, r3, r7
 8003d72:	2201      	movs	r2, #1
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	e057      	b.n	8003e28 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d78:	231b      	movs	r3, #27
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	189b      	adds	r3, r3, r2
 8003d7e:	19db      	adds	r3, r3, r7
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d015      	beq.n	8003db2 <UART_SetConfig+0x442>
 8003d86:	dc18      	bgt.n	8003dba <UART_SetConfig+0x44a>
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d00d      	beq.n	8003da8 <UART_SetConfig+0x438>
 8003d8c:	dc15      	bgt.n	8003dba <UART_SetConfig+0x44a>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <UART_SetConfig+0x428>
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d005      	beq.n	8003da2 <UART_SetConfig+0x432>
 8003d96:	e010      	b.n	8003dba <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d98:	f7fe fda2 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 8003d9c:	0003      	movs	r3, r0
 8003d9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003da0:	e014      	b.n	8003dcc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003da2:	4b2e      	ldr	r3, [pc, #184]	; (8003e5c <UART_SetConfig+0x4ec>)
 8003da4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003da6:	e011      	b.n	8003dcc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003da8:	f7fe fd0e 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8003dac:	0003      	movs	r3, r0
 8003dae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003db0:	e00c      	b.n	8003dcc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	021b      	lsls	r3, r3, #8
 8003db6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003db8:	e008      	b.n	8003dcc <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003dbe:	231a      	movs	r3, #26
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	189b      	adds	r3, r3, r2
 8003dc4:	19db      	adds	r3, r3, r7
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	701a      	strb	r2, [r3, #0]
        break;
 8003dca:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d02a      	beq.n	8003e28 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dd6:	4b20      	ldr	r3, [pc, #128]	; (8003e58 <UART_SetConfig+0x4e8>)
 8003dd8:	0052      	lsls	r2, r2, #1
 8003dda:	5ad3      	ldrh	r3, [r2, r3]
 8003ddc:	0019      	movs	r1, r3
 8003dde:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003de0:	f7fc f99a 	bl	8000118 <__udivsi3>
 8003de4:	0003      	movs	r3, r0
 8003de6:	001a      	movs	r2, r3
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	085b      	lsrs	r3, r3, #1
 8003dee:	18d2      	adds	r2, r2, r3
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	0019      	movs	r1, r3
 8003df6:	0010      	movs	r0, r2
 8003df8:	f7fc f98e 	bl	8000118 <__udivsi3>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e02:	2b0f      	cmp	r3, #15
 8003e04:	d90a      	bls.n	8003e1c <UART_SetConfig+0x4ac>
 8003e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e08:	2380      	movs	r3, #128	; 0x80
 8003e0a:	025b      	lsls	r3, r3, #9
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d205      	bcs.n	8003e1c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	60da      	str	r2, [r3, #12]
 8003e1a:	e005      	b.n	8003e28 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003e1c:	231a      	movs	r3, #26
 8003e1e:	2220      	movs	r2, #32
 8003e20:	189b      	adds	r3, r3, r2
 8003e22:	19db      	adds	r3, r3, r7
 8003e24:	2201      	movs	r2, #1
 8003e26:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	226a      	movs	r2, #106	; 0x6a
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	2268      	movs	r2, #104	; 0x68
 8003e34:	2101      	movs	r1, #1
 8003e36:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	2200      	movs	r2, #0
 8003e42:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003e44:	231a      	movs	r3, #26
 8003e46:	2220      	movs	r2, #32
 8003e48:	189b      	adds	r3, r3, r2
 8003e4a:	19db      	adds	r3, r3, r7
 8003e4c:	781b      	ldrb	r3, [r3, #0]
}
 8003e4e:	0018      	movs	r0, r3
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b010      	add	sp, #64	; 0x40
 8003e54:	bdb0      	pop	{r4, r5, r7, pc}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	08005374 	.word	0x08005374
 8003e5c:	00f42400 	.word	0x00f42400

08003e60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d00b      	beq.n	8003e8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	4a4a      	ldr	r2, [pc, #296]	; (8003fa4 <UART_AdvFeatureConfig+0x144>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	0019      	movs	r1, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	2202      	movs	r2, #2
 8003e90:	4013      	ands	r3, r2
 8003e92:	d00b      	beq.n	8003eac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	4a43      	ldr	r2, [pc, #268]	; (8003fa8 <UART_AdvFeatureConfig+0x148>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	0019      	movs	r1, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d00b      	beq.n	8003ece <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4a3b      	ldr	r2, [pc, #236]	; (8003fac <UART_AdvFeatureConfig+0x14c>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	2208      	movs	r2, #8
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d00b      	beq.n	8003ef0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4a34      	ldr	r2, [pc, #208]	; (8003fb0 <UART_AdvFeatureConfig+0x150>)
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	0019      	movs	r1, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	2210      	movs	r2, #16
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d00b      	beq.n	8003f12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a2c      	ldr	r2, [pc, #176]	; (8003fb4 <UART_AdvFeatureConfig+0x154>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	0019      	movs	r1, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f16:	2220      	movs	r2, #32
 8003f18:	4013      	ands	r3, r2
 8003f1a:	d00b      	beq.n	8003f34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	4a25      	ldr	r2, [pc, #148]	; (8003fb8 <UART_AdvFeatureConfig+0x158>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	0019      	movs	r1, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	2240      	movs	r2, #64	; 0x40
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d01d      	beq.n	8003f7a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4a1d      	ldr	r2, [pc, #116]	; (8003fbc <UART_AdvFeatureConfig+0x15c>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	0019      	movs	r1, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f5a:	2380      	movs	r3, #128	; 0x80
 8003f5c:	035b      	lsls	r3, r3, #13
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d10b      	bne.n	8003f7a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	4a15      	ldr	r2, [pc, #84]	; (8003fc0 <UART_AdvFeatureConfig+0x160>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	0019      	movs	r1, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	2280      	movs	r2, #128	; 0x80
 8003f80:	4013      	ands	r3, r2
 8003f82:	d00b      	beq.n	8003f9c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	4a0e      	ldr	r2, [pc, #56]	; (8003fc4 <UART_AdvFeatureConfig+0x164>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	0019      	movs	r1, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]
  }
}
 8003f9c:	46c0      	nop			; (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b002      	add	sp, #8
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	fffdffff 	.word	0xfffdffff
 8003fa8:	fffeffff 	.word	0xfffeffff
 8003fac:	fffbffff 	.word	0xfffbffff
 8003fb0:	ffff7fff 	.word	0xffff7fff
 8003fb4:	ffffefff 	.word	0xffffefff
 8003fb8:	ffffdfff 	.word	0xffffdfff
 8003fbc:	ffefffff 	.word	0xffefffff
 8003fc0:	ff9fffff 	.word	0xff9fffff
 8003fc4:	fff7ffff 	.word	0xfff7ffff

08003fc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2290      	movs	r2, #144	; 0x90
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fd8:	f7fd f884 	bl	80010e4 <HAL_GetTick>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d10c      	bne.n	8004008 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2280      	movs	r2, #128	; 0x80
 8003ff2:	0391      	lsls	r1, r2, #14
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	4a1a      	ldr	r2, [pc, #104]	; (8004060 <UART_CheckIdleState+0x98>)
 8003ff8:	9200      	str	r2, [sp, #0]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f000 f832 	bl	8004064 <UART_WaitOnFlagUntilTimeout>
 8004000:	1e03      	subs	r3, r0, #0
 8004002:	d001      	beq.n	8004008 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e026      	b.n	8004056 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2204      	movs	r2, #4
 8004010:	4013      	ands	r3, r2
 8004012:	2b04      	cmp	r3, #4
 8004014:	d10c      	bne.n	8004030 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2280      	movs	r2, #128	; 0x80
 800401a:	03d1      	lsls	r1, r2, #15
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	4a10      	ldr	r2, [pc, #64]	; (8004060 <UART_CheckIdleState+0x98>)
 8004020:	9200      	str	r2, [sp, #0]
 8004022:	2200      	movs	r2, #0
 8004024:	f000 f81e 	bl	8004064 <UART_WaitOnFlagUntilTimeout>
 8004028:	1e03      	subs	r3, r0, #0
 800402a:	d001      	beq.n	8004030 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e012      	b.n	8004056 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2288      	movs	r2, #136	; 0x88
 8004034:	2120      	movs	r1, #32
 8004036:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	228c      	movs	r2, #140	; 0x8c
 800403c:	2120      	movs	r1, #32
 800403e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2284      	movs	r2, #132	; 0x84
 8004050:	2100      	movs	r1, #0
 8004052:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	0018      	movs	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	b004      	add	sp, #16
 800405c:	bd80      	pop	{r7, pc}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	01ffffff 	.word	0x01ffffff

08004064 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b094      	sub	sp, #80	; 0x50
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	1dfb      	adds	r3, r7, #7
 8004072:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004074:	e0a7      	b.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004078:	3301      	adds	r3, #1
 800407a:	d100      	bne.n	800407e <UART_WaitOnFlagUntilTimeout+0x1a>
 800407c:	e0a3      	b.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800407e:	f7fd f831 	bl	80010e4 <HAL_GetTick>
 8004082:	0002      	movs	r2, r0
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800408a:	429a      	cmp	r2, r3
 800408c:	d302      	bcc.n	8004094 <UART_WaitOnFlagUntilTimeout+0x30>
 800408e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004090:	2b00      	cmp	r3, #0
 8004092:	d13f      	bne.n	8004114 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004094:	f3ef 8310 	mrs	r3, PRIMASK
 8004098:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800409a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800409c:	647b      	str	r3, [r7, #68]	; 0x44
 800409e:	2301      	movs	r3, #1
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	f383 8810 	msr	PRIMASK, r3
}
 80040a8:	46c0      	nop			; (mov r8, r8)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	494e      	ldr	r1, [pc, #312]	; (80041f0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80040b6:	400a      	ands	r2, r1
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040bc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c0:	f383 8810 	msr	PRIMASK, r3
}
 80040c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c6:	f3ef 8310 	mrs	r3, PRIMASK
 80040ca:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80040cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ce:	643b      	str	r3, [r7, #64]	; 0x40
 80040d0:	2301      	movs	r3, #1
 80040d2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d6:	f383 8810 	msr	PRIMASK, r3
}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2101      	movs	r1, #1
 80040e8:	438a      	bics	r2, r1
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f2:	f383 8810 	msr	PRIMASK, r3
}
 80040f6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2288      	movs	r2, #136	; 0x88
 80040fc:	2120      	movs	r1, #32
 80040fe:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	228c      	movs	r2, #140	; 0x8c
 8004104:	2120      	movs	r1, #32
 8004106:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2284      	movs	r2, #132	; 0x84
 800410c:	2100      	movs	r1, #0
 800410e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e069      	b.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2204      	movs	r2, #4
 800411c:	4013      	ands	r3, r2
 800411e:	d052      	beq.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	69da      	ldr	r2, [r3, #28]
 8004126:	2380      	movs	r3, #128	; 0x80
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	401a      	ands	r2, r3
 800412c:	2380      	movs	r3, #128	; 0x80
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	429a      	cmp	r2, r3
 8004132:	d148      	bne.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2280      	movs	r2, #128	; 0x80
 800413a:	0112      	lsls	r2, r2, #4
 800413c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800413e:	f3ef 8310 	mrs	r3, PRIMASK
 8004142:	613b      	str	r3, [r7, #16]
  return(result);
 8004144:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004148:	2301      	movs	r3, #1
 800414a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f383 8810 	msr	PRIMASK, r3
}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4924      	ldr	r1, [pc, #144]	; (80041f0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004160:	400a      	ands	r2, r1
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004166:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	f383 8810 	msr	PRIMASK, r3
}
 800416e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004170:	f3ef 8310 	mrs	r3, PRIMASK
 8004174:	61fb      	str	r3, [r7, #28]
  return(result);
 8004176:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004178:	64bb      	str	r3, [r7, #72]	; 0x48
 800417a:	2301      	movs	r3, #1
 800417c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	f383 8810 	msr	PRIMASK, r3
}
 8004184:	46c0      	nop			; (mov r8, r8)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2101      	movs	r1, #1
 8004192:	438a      	bics	r2, r1
 8004194:	609a      	str	r2, [r3, #8]
 8004196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	f383 8810 	msr	PRIMASK, r3
}
 80041a0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2288      	movs	r2, #136	; 0x88
 80041a6:	2120      	movs	r1, #32
 80041a8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	228c      	movs	r2, #140	; 0x8c
 80041ae:	2120      	movs	r1, #32
 80041b0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2290      	movs	r2, #144	; 0x90
 80041b6:	2120      	movs	r1, #32
 80041b8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2284      	movs	r2, #132	; 0x84
 80041be:	2100      	movs	r1, #0
 80041c0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e010      	b.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	4013      	ands	r3, r2
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	425a      	negs	r2, r3
 80041d6:	4153      	adcs	r3, r2
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	001a      	movs	r2, r3
 80041dc:	1dfb      	adds	r3, r7, #7
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d100      	bne.n	80041e6 <UART_WaitOnFlagUntilTimeout+0x182>
 80041e4:	e747      	b.n	8004076 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	0018      	movs	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b014      	add	sp, #80	; 0x50
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	fffffe5f 	.word	0xfffffe5f

080041f4 <__errno>:
 80041f4:	4b01      	ldr	r3, [pc, #4]	; (80041fc <__errno+0x8>)
 80041f6:	6818      	ldr	r0, [r3, #0]
 80041f8:	4770      	bx	lr
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	20000024 	.word	0x20000024

08004200 <__libc_init_array>:
 8004200:	b570      	push	{r4, r5, r6, lr}
 8004202:	2600      	movs	r6, #0
 8004204:	4d0c      	ldr	r5, [pc, #48]	; (8004238 <__libc_init_array+0x38>)
 8004206:	4c0d      	ldr	r4, [pc, #52]	; (800423c <__libc_init_array+0x3c>)
 8004208:	1b64      	subs	r4, r4, r5
 800420a:	10a4      	asrs	r4, r4, #2
 800420c:	42a6      	cmp	r6, r4
 800420e:	d109      	bne.n	8004224 <__libc_init_array+0x24>
 8004210:	2600      	movs	r6, #0
 8004212:	f001 f857 	bl	80052c4 <_init>
 8004216:	4d0a      	ldr	r5, [pc, #40]	; (8004240 <__libc_init_array+0x40>)
 8004218:	4c0a      	ldr	r4, [pc, #40]	; (8004244 <__libc_init_array+0x44>)
 800421a:	1b64      	subs	r4, r4, r5
 800421c:	10a4      	asrs	r4, r4, #2
 800421e:	42a6      	cmp	r6, r4
 8004220:	d105      	bne.n	800422e <__libc_init_array+0x2e>
 8004222:	bd70      	pop	{r4, r5, r6, pc}
 8004224:	00b3      	lsls	r3, r6, #2
 8004226:	58eb      	ldr	r3, [r5, r3]
 8004228:	4798      	blx	r3
 800422a:	3601      	adds	r6, #1
 800422c:	e7ee      	b.n	800420c <__libc_init_array+0xc>
 800422e:	00b3      	lsls	r3, r6, #2
 8004230:	58eb      	ldr	r3, [r5, r3]
 8004232:	4798      	blx	r3
 8004234:	3601      	adds	r6, #1
 8004236:	e7f2      	b.n	800421e <__libc_init_array+0x1e>
 8004238:	0800542c 	.word	0x0800542c
 800423c:	0800542c 	.word	0x0800542c
 8004240:	0800542c 	.word	0x0800542c
 8004244:	08005430 	.word	0x08005430

08004248 <memset>:
 8004248:	0003      	movs	r3, r0
 800424a:	1882      	adds	r2, r0, r2
 800424c:	4293      	cmp	r3, r2
 800424e:	d100      	bne.n	8004252 <memset+0xa>
 8004250:	4770      	bx	lr
 8004252:	7019      	strb	r1, [r3, #0]
 8004254:	3301      	adds	r3, #1
 8004256:	e7f9      	b.n	800424c <memset+0x4>

08004258 <iprintf>:
 8004258:	b40f      	push	{r0, r1, r2, r3}
 800425a:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <iprintf+0x30>)
 800425c:	b513      	push	{r0, r1, r4, lr}
 800425e:	681c      	ldr	r4, [r3, #0]
 8004260:	2c00      	cmp	r4, #0
 8004262:	d005      	beq.n	8004270 <iprintf+0x18>
 8004264:	69a3      	ldr	r3, [r4, #24]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d102      	bne.n	8004270 <iprintf+0x18>
 800426a:	0020      	movs	r0, r4
 800426c:	f000 f884 	bl	8004378 <__sinit>
 8004270:	ab05      	add	r3, sp, #20
 8004272:	0020      	movs	r0, r4
 8004274:	9a04      	ldr	r2, [sp, #16]
 8004276:	68a1      	ldr	r1, [r4, #8]
 8004278:	9301      	str	r3, [sp, #4]
 800427a:	f000 f9e1 	bl	8004640 <_vfiprintf_r>
 800427e:	bc16      	pop	{r1, r2, r4}
 8004280:	bc08      	pop	{r3}
 8004282:	b004      	add	sp, #16
 8004284:	4718      	bx	r3
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	20000024 	.word	0x20000024

0800428c <putchar>:
 800428c:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <putchar+0x24>)
 800428e:	b570      	push	{r4, r5, r6, lr}
 8004290:	681c      	ldr	r4, [r3, #0]
 8004292:	0005      	movs	r5, r0
 8004294:	2c00      	cmp	r4, #0
 8004296:	d005      	beq.n	80042a4 <putchar+0x18>
 8004298:	69a3      	ldr	r3, [r4, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d102      	bne.n	80042a4 <putchar+0x18>
 800429e:	0020      	movs	r0, r4
 80042a0:	f000 f86a 	bl	8004378 <__sinit>
 80042a4:	0029      	movs	r1, r5
 80042a6:	0020      	movs	r0, r4
 80042a8:	68a2      	ldr	r2, [r4, #8]
 80042aa:	f000 fc85 	bl	8004bb8 <_putc_r>
 80042ae:	bd70      	pop	{r4, r5, r6, pc}
 80042b0:	20000024 	.word	0x20000024

080042b4 <std>:
 80042b4:	2300      	movs	r3, #0
 80042b6:	b510      	push	{r4, lr}
 80042b8:	0004      	movs	r4, r0
 80042ba:	6003      	str	r3, [r0, #0]
 80042bc:	6043      	str	r3, [r0, #4]
 80042be:	6083      	str	r3, [r0, #8]
 80042c0:	8181      	strh	r1, [r0, #12]
 80042c2:	6643      	str	r3, [r0, #100]	; 0x64
 80042c4:	0019      	movs	r1, r3
 80042c6:	81c2      	strh	r2, [r0, #14]
 80042c8:	6103      	str	r3, [r0, #16]
 80042ca:	6143      	str	r3, [r0, #20]
 80042cc:	6183      	str	r3, [r0, #24]
 80042ce:	2208      	movs	r2, #8
 80042d0:	305c      	adds	r0, #92	; 0x5c
 80042d2:	f7ff ffb9 	bl	8004248 <memset>
 80042d6:	4b05      	ldr	r3, [pc, #20]	; (80042ec <std+0x38>)
 80042d8:	6224      	str	r4, [r4, #32]
 80042da:	6263      	str	r3, [r4, #36]	; 0x24
 80042dc:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <std+0x3c>)
 80042de:	62a3      	str	r3, [r4, #40]	; 0x28
 80042e0:	4b04      	ldr	r3, [pc, #16]	; (80042f4 <std+0x40>)
 80042e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042e4:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <std+0x44>)
 80042e6:	6323      	str	r3, [r4, #48]	; 0x30
 80042e8:	bd10      	pop	{r4, pc}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	08004c71 	.word	0x08004c71
 80042f0:	08004c99 	.word	0x08004c99
 80042f4:	08004cd1 	.word	0x08004cd1
 80042f8:	08004cfd 	.word	0x08004cfd

080042fc <_cleanup_r>:
 80042fc:	b510      	push	{r4, lr}
 80042fe:	4902      	ldr	r1, [pc, #8]	; (8004308 <_cleanup_r+0xc>)
 8004300:	f000 f8ba 	bl	8004478 <_fwalk_reent>
 8004304:	bd10      	pop	{r4, pc}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	08005009 	.word	0x08005009

0800430c <__sfmoreglue>:
 800430c:	b570      	push	{r4, r5, r6, lr}
 800430e:	2568      	movs	r5, #104	; 0x68
 8004310:	1e4a      	subs	r2, r1, #1
 8004312:	4355      	muls	r5, r2
 8004314:	000e      	movs	r6, r1
 8004316:	0029      	movs	r1, r5
 8004318:	3174      	adds	r1, #116	; 0x74
 800431a:	f000 f8f3 	bl	8004504 <_malloc_r>
 800431e:	1e04      	subs	r4, r0, #0
 8004320:	d008      	beq.n	8004334 <__sfmoreglue+0x28>
 8004322:	2100      	movs	r1, #0
 8004324:	002a      	movs	r2, r5
 8004326:	6001      	str	r1, [r0, #0]
 8004328:	6046      	str	r6, [r0, #4]
 800432a:	300c      	adds	r0, #12
 800432c:	60a0      	str	r0, [r4, #8]
 800432e:	3268      	adds	r2, #104	; 0x68
 8004330:	f7ff ff8a 	bl	8004248 <memset>
 8004334:	0020      	movs	r0, r4
 8004336:	bd70      	pop	{r4, r5, r6, pc}

08004338 <__sfp_lock_acquire>:
 8004338:	b510      	push	{r4, lr}
 800433a:	4802      	ldr	r0, [pc, #8]	; (8004344 <__sfp_lock_acquire+0xc>)
 800433c:	f000 f8bd 	bl	80044ba <__retarget_lock_acquire_recursive>
 8004340:	bd10      	pop	{r4, pc}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	200001c1 	.word	0x200001c1

08004348 <__sfp_lock_release>:
 8004348:	b510      	push	{r4, lr}
 800434a:	4802      	ldr	r0, [pc, #8]	; (8004354 <__sfp_lock_release+0xc>)
 800434c:	f000 f8b6 	bl	80044bc <__retarget_lock_release_recursive>
 8004350:	bd10      	pop	{r4, pc}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	200001c1 	.word	0x200001c1

08004358 <__sinit_lock_acquire>:
 8004358:	b510      	push	{r4, lr}
 800435a:	4802      	ldr	r0, [pc, #8]	; (8004364 <__sinit_lock_acquire+0xc>)
 800435c:	f000 f8ad 	bl	80044ba <__retarget_lock_acquire_recursive>
 8004360:	bd10      	pop	{r4, pc}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	200001c2 	.word	0x200001c2

08004368 <__sinit_lock_release>:
 8004368:	b510      	push	{r4, lr}
 800436a:	4802      	ldr	r0, [pc, #8]	; (8004374 <__sinit_lock_release+0xc>)
 800436c:	f000 f8a6 	bl	80044bc <__retarget_lock_release_recursive>
 8004370:	bd10      	pop	{r4, pc}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	200001c2 	.word	0x200001c2

08004378 <__sinit>:
 8004378:	b513      	push	{r0, r1, r4, lr}
 800437a:	0004      	movs	r4, r0
 800437c:	f7ff ffec 	bl	8004358 <__sinit_lock_acquire>
 8004380:	69a3      	ldr	r3, [r4, #24]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <__sinit+0x14>
 8004386:	f7ff ffef 	bl	8004368 <__sinit_lock_release>
 800438a:	bd13      	pop	{r0, r1, r4, pc}
 800438c:	64a3      	str	r3, [r4, #72]	; 0x48
 800438e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004390:	6523      	str	r3, [r4, #80]	; 0x50
 8004392:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <__sinit+0x68>)
 8004394:	4a13      	ldr	r2, [pc, #76]	; (80043e4 <__sinit+0x6c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	62a2      	str	r2, [r4, #40]	; 0x28
 800439a:	9301      	str	r3, [sp, #4]
 800439c:	42a3      	cmp	r3, r4
 800439e:	d101      	bne.n	80043a4 <__sinit+0x2c>
 80043a0:	2301      	movs	r3, #1
 80043a2:	61a3      	str	r3, [r4, #24]
 80043a4:	0020      	movs	r0, r4
 80043a6:	f000 f81f 	bl	80043e8 <__sfp>
 80043aa:	6060      	str	r0, [r4, #4]
 80043ac:	0020      	movs	r0, r4
 80043ae:	f000 f81b 	bl	80043e8 <__sfp>
 80043b2:	60a0      	str	r0, [r4, #8]
 80043b4:	0020      	movs	r0, r4
 80043b6:	f000 f817 	bl	80043e8 <__sfp>
 80043ba:	2200      	movs	r2, #0
 80043bc:	2104      	movs	r1, #4
 80043be:	60e0      	str	r0, [r4, #12]
 80043c0:	6860      	ldr	r0, [r4, #4]
 80043c2:	f7ff ff77 	bl	80042b4 <std>
 80043c6:	2201      	movs	r2, #1
 80043c8:	2109      	movs	r1, #9
 80043ca:	68a0      	ldr	r0, [r4, #8]
 80043cc:	f7ff ff72 	bl	80042b4 <std>
 80043d0:	2202      	movs	r2, #2
 80043d2:	2112      	movs	r1, #18
 80043d4:	68e0      	ldr	r0, [r4, #12]
 80043d6:	f7ff ff6d 	bl	80042b4 <std>
 80043da:	2301      	movs	r3, #1
 80043dc:	61a3      	str	r3, [r4, #24]
 80043de:	e7d2      	b.n	8004386 <__sinit+0xe>
 80043e0:	0800538c 	.word	0x0800538c
 80043e4:	080042fd 	.word	0x080042fd

080043e8 <__sfp>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	0007      	movs	r7, r0
 80043ec:	f7ff ffa4 	bl	8004338 <__sfp_lock_acquire>
 80043f0:	4b1f      	ldr	r3, [pc, #124]	; (8004470 <__sfp+0x88>)
 80043f2:	681e      	ldr	r6, [r3, #0]
 80043f4:	69b3      	ldr	r3, [r6, #24]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d102      	bne.n	8004400 <__sfp+0x18>
 80043fa:	0030      	movs	r0, r6
 80043fc:	f7ff ffbc 	bl	8004378 <__sinit>
 8004400:	3648      	adds	r6, #72	; 0x48
 8004402:	68b4      	ldr	r4, [r6, #8]
 8004404:	6873      	ldr	r3, [r6, #4]
 8004406:	3b01      	subs	r3, #1
 8004408:	d504      	bpl.n	8004414 <__sfp+0x2c>
 800440a:	6833      	ldr	r3, [r6, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d022      	beq.n	8004456 <__sfp+0x6e>
 8004410:	6836      	ldr	r6, [r6, #0]
 8004412:	e7f6      	b.n	8004402 <__sfp+0x1a>
 8004414:	220c      	movs	r2, #12
 8004416:	5ea5      	ldrsh	r5, [r4, r2]
 8004418:	2d00      	cmp	r5, #0
 800441a:	d11a      	bne.n	8004452 <__sfp+0x6a>
 800441c:	0020      	movs	r0, r4
 800441e:	4b15      	ldr	r3, [pc, #84]	; (8004474 <__sfp+0x8c>)
 8004420:	3058      	adds	r0, #88	; 0x58
 8004422:	60e3      	str	r3, [r4, #12]
 8004424:	6665      	str	r5, [r4, #100]	; 0x64
 8004426:	f000 f847 	bl	80044b8 <__retarget_lock_init_recursive>
 800442a:	f7ff ff8d 	bl	8004348 <__sfp_lock_release>
 800442e:	0020      	movs	r0, r4
 8004430:	2208      	movs	r2, #8
 8004432:	0029      	movs	r1, r5
 8004434:	6025      	str	r5, [r4, #0]
 8004436:	60a5      	str	r5, [r4, #8]
 8004438:	6065      	str	r5, [r4, #4]
 800443a:	6125      	str	r5, [r4, #16]
 800443c:	6165      	str	r5, [r4, #20]
 800443e:	61a5      	str	r5, [r4, #24]
 8004440:	305c      	adds	r0, #92	; 0x5c
 8004442:	f7ff ff01 	bl	8004248 <memset>
 8004446:	6365      	str	r5, [r4, #52]	; 0x34
 8004448:	63a5      	str	r5, [r4, #56]	; 0x38
 800444a:	64a5      	str	r5, [r4, #72]	; 0x48
 800444c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800444e:	0020      	movs	r0, r4
 8004450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004452:	3468      	adds	r4, #104	; 0x68
 8004454:	e7d7      	b.n	8004406 <__sfp+0x1e>
 8004456:	2104      	movs	r1, #4
 8004458:	0038      	movs	r0, r7
 800445a:	f7ff ff57 	bl	800430c <__sfmoreglue>
 800445e:	1e04      	subs	r4, r0, #0
 8004460:	6030      	str	r0, [r6, #0]
 8004462:	d1d5      	bne.n	8004410 <__sfp+0x28>
 8004464:	f7ff ff70 	bl	8004348 <__sfp_lock_release>
 8004468:	230c      	movs	r3, #12
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	e7ef      	b.n	800444e <__sfp+0x66>
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	0800538c 	.word	0x0800538c
 8004474:	ffff0001 	.word	0xffff0001

08004478 <_fwalk_reent>:
 8004478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800447a:	0004      	movs	r4, r0
 800447c:	0006      	movs	r6, r0
 800447e:	2700      	movs	r7, #0
 8004480:	9101      	str	r1, [sp, #4]
 8004482:	3448      	adds	r4, #72	; 0x48
 8004484:	6863      	ldr	r3, [r4, #4]
 8004486:	68a5      	ldr	r5, [r4, #8]
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	9b00      	ldr	r3, [sp, #0]
 800448c:	3b01      	subs	r3, #1
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	d504      	bpl.n	800449c <_fwalk_reent+0x24>
 8004492:	6824      	ldr	r4, [r4, #0]
 8004494:	2c00      	cmp	r4, #0
 8004496:	d1f5      	bne.n	8004484 <_fwalk_reent+0xc>
 8004498:	0038      	movs	r0, r7
 800449a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800449c:	89ab      	ldrh	r3, [r5, #12]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d908      	bls.n	80044b4 <_fwalk_reent+0x3c>
 80044a2:	220e      	movs	r2, #14
 80044a4:	5eab      	ldrsh	r3, [r5, r2]
 80044a6:	3301      	adds	r3, #1
 80044a8:	d004      	beq.n	80044b4 <_fwalk_reent+0x3c>
 80044aa:	0029      	movs	r1, r5
 80044ac:	0030      	movs	r0, r6
 80044ae:	9b01      	ldr	r3, [sp, #4]
 80044b0:	4798      	blx	r3
 80044b2:	4307      	orrs	r7, r0
 80044b4:	3568      	adds	r5, #104	; 0x68
 80044b6:	e7e8      	b.n	800448a <_fwalk_reent+0x12>

080044b8 <__retarget_lock_init_recursive>:
 80044b8:	4770      	bx	lr

080044ba <__retarget_lock_acquire_recursive>:
 80044ba:	4770      	bx	lr

080044bc <__retarget_lock_release_recursive>:
 80044bc:	4770      	bx	lr
	...

080044c0 <sbrk_aligned>:
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	4e0f      	ldr	r6, [pc, #60]	; (8004500 <sbrk_aligned+0x40>)
 80044c4:	000d      	movs	r5, r1
 80044c6:	6831      	ldr	r1, [r6, #0]
 80044c8:	0004      	movs	r4, r0
 80044ca:	2900      	cmp	r1, #0
 80044cc:	d102      	bne.n	80044d4 <sbrk_aligned+0x14>
 80044ce:	f000 fbbd 	bl	8004c4c <_sbrk_r>
 80044d2:	6030      	str	r0, [r6, #0]
 80044d4:	0029      	movs	r1, r5
 80044d6:	0020      	movs	r0, r4
 80044d8:	f000 fbb8 	bl	8004c4c <_sbrk_r>
 80044dc:	1c43      	adds	r3, r0, #1
 80044de:	d00a      	beq.n	80044f6 <sbrk_aligned+0x36>
 80044e0:	2303      	movs	r3, #3
 80044e2:	1cc5      	adds	r5, r0, #3
 80044e4:	439d      	bics	r5, r3
 80044e6:	42a8      	cmp	r0, r5
 80044e8:	d007      	beq.n	80044fa <sbrk_aligned+0x3a>
 80044ea:	1a29      	subs	r1, r5, r0
 80044ec:	0020      	movs	r0, r4
 80044ee:	f000 fbad 	bl	8004c4c <_sbrk_r>
 80044f2:	1c43      	adds	r3, r0, #1
 80044f4:	d101      	bne.n	80044fa <sbrk_aligned+0x3a>
 80044f6:	2501      	movs	r5, #1
 80044f8:	426d      	negs	r5, r5
 80044fa:	0028      	movs	r0, r5
 80044fc:	bd70      	pop	{r4, r5, r6, pc}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	200001c8 	.word	0x200001c8

08004504 <_malloc_r>:
 8004504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004506:	2203      	movs	r2, #3
 8004508:	1ccb      	adds	r3, r1, #3
 800450a:	4393      	bics	r3, r2
 800450c:	3308      	adds	r3, #8
 800450e:	0006      	movs	r6, r0
 8004510:	001f      	movs	r7, r3
 8004512:	2b0c      	cmp	r3, #12
 8004514:	d232      	bcs.n	800457c <_malloc_r+0x78>
 8004516:	270c      	movs	r7, #12
 8004518:	42b9      	cmp	r1, r7
 800451a:	d831      	bhi.n	8004580 <_malloc_r+0x7c>
 800451c:	0030      	movs	r0, r6
 800451e:	f000 fe3f 	bl	80051a0 <__malloc_lock>
 8004522:	4d32      	ldr	r5, [pc, #200]	; (80045ec <_malloc_r+0xe8>)
 8004524:	682b      	ldr	r3, [r5, #0]
 8004526:	001c      	movs	r4, r3
 8004528:	2c00      	cmp	r4, #0
 800452a:	d12e      	bne.n	800458a <_malloc_r+0x86>
 800452c:	0039      	movs	r1, r7
 800452e:	0030      	movs	r0, r6
 8004530:	f7ff ffc6 	bl	80044c0 <sbrk_aligned>
 8004534:	0004      	movs	r4, r0
 8004536:	1c43      	adds	r3, r0, #1
 8004538:	d11e      	bne.n	8004578 <_malloc_r+0x74>
 800453a:	682c      	ldr	r4, [r5, #0]
 800453c:	0025      	movs	r5, r4
 800453e:	2d00      	cmp	r5, #0
 8004540:	d14a      	bne.n	80045d8 <_malloc_r+0xd4>
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	0029      	movs	r1, r5
 8004546:	18e3      	adds	r3, r4, r3
 8004548:	0030      	movs	r0, r6
 800454a:	9301      	str	r3, [sp, #4]
 800454c:	f000 fb7e 	bl	8004c4c <_sbrk_r>
 8004550:	9b01      	ldr	r3, [sp, #4]
 8004552:	4283      	cmp	r3, r0
 8004554:	d143      	bne.n	80045de <_malloc_r+0xda>
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	3703      	adds	r7, #3
 800455a:	1aff      	subs	r7, r7, r3
 800455c:	2303      	movs	r3, #3
 800455e:	439f      	bics	r7, r3
 8004560:	3708      	adds	r7, #8
 8004562:	2f0c      	cmp	r7, #12
 8004564:	d200      	bcs.n	8004568 <_malloc_r+0x64>
 8004566:	270c      	movs	r7, #12
 8004568:	0039      	movs	r1, r7
 800456a:	0030      	movs	r0, r6
 800456c:	f7ff ffa8 	bl	80044c0 <sbrk_aligned>
 8004570:	1c43      	adds	r3, r0, #1
 8004572:	d034      	beq.n	80045de <_malloc_r+0xda>
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	19df      	adds	r7, r3, r7
 8004578:	6027      	str	r7, [r4, #0]
 800457a:	e013      	b.n	80045a4 <_malloc_r+0xa0>
 800457c:	2b00      	cmp	r3, #0
 800457e:	dacb      	bge.n	8004518 <_malloc_r+0x14>
 8004580:	230c      	movs	r3, #12
 8004582:	2500      	movs	r5, #0
 8004584:	6033      	str	r3, [r6, #0]
 8004586:	0028      	movs	r0, r5
 8004588:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800458a:	6822      	ldr	r2, [r4, #0]
 800458c:	1bd1      	subs	r1, r2, r7
 800458e:	d420      	bmi.n	80045d2 <_malloc_r+0xce>
 8004590:	290b      	cmp	r1, #11
 8004592:	d917      	bls.n	80045c4 <_malloc_r+0xc0>
 8004594:	19e2      	adds	r2, r4, r7
 8004596:	6027      	str	r7, [r4, #0]
 8004598:	42a3      	cmp	r3, r4
 800459a:	d111      	bne.n	80045c0 <_malloc_r+0xbc>
 800459c:	602a      	str	r2, [r5, #0]
 800459e:	6863      	ldr	r3, [r4, #4]
 80045a0:	6011      	str	r1, [r2, #0]
 80045a2:	6053      	str	r3, [r2, #4]
 80045a4:	0030      	movs	r0, r6
 80045a6:	0025      	movs	r5, r4
 80045a8:	f000 fe02 	bl	80051b0 <__malloc_unlock>
 80045ac:	2207      	movs	r2, #7
 80045ae:	350b      	adds	r5, #11
 80045b0:	1d23      	adds	r3, r4, #4
 80045b2:	4395      	bics	r5, r2
 80045b4:	1aea      	subs	r2, r5, r3
 80045b6:	429d      	cmp	r5, r3
 80045b8:	d0e5      	beq.n	8004586 <_malloc_r+0x82>
 80045ba:	1b5b      	subs	r3, r3, r5
 80045bc:	50a3      	str	r3, [r4, r2]
 80045be:	e7e2      	b.n	8004586 <_malloc_r+0x82>
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	e7ec      	b.n	800459e <_malloc_r+0x9a>
 80045c4:	6862      	ldr	r2, [r4, #4]
 80045c6:	42a3      	cmp	r3, r4
 80045c8:	d101      	bne.n	80045ce <_malloc_r+0xca>
 80045ca:	602a      	str	r2, [r5, #0]
 80045cc:	e7ea      	b.n	80045a4 <_malloc_r+0xa0>
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	e7e8      	b.n	80045a4 <_malloc_r+0xa0>
 80045d2:	0023      	movs	r3, r4
 80045d4:	6864      	ldr	r4, [r4, #4]
 80045d6:	e7a7      	b.n	8004528 <_malloc_r+0x24>
 80045d8:	002c      	movs	r4, r5
 80045da:	686d      	ldr	r5, [r5, #4]
 80045dc:	e7af      	b.n	800453e <_malloc_r+0x3a>
 80045de:	230c      	movs	r3, #12
 80045e0:	0030      	movs	r0, r6
 80045e2:	6033      	str	r3, [r6, #0]
 80045e4:	f000 fde4 	bl	80051b0 <__malloc_unlock>
 80045e8:	e7cd      	b.n	8004586 <_malloc_r+0x82>
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	200001c4 	.word	0x200001c4

080045f0 <__sfputc_r>:
 80045f0:	6893      	ldr	r3, [r2, #8]
 80045f2:	b510      	push	{r4, lr}
 80045f4:	3b01      	subs	r3, #1
 80045f6:	6093      	str	r3, [r2, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	da04      	bge.n	8004606 <__sfputc_r+0x16>
 80045fc:	6994      	ldr	r4, [r2, #24]
 80045fe:	42a3      	cmp	r3, r4
 8004600:	db07      	blt.n	8004612 <__sfputc_r+0x22>
 8004602:	290a      	cmp	r1, #10
 8004604:	d005      	beq.n	8004612 <__sfputc_r+0x22>
 8004606:	6813      	ldr	r3, [r2, #0]
 8004608:	1c58      	adds	r0, r3, #1
 800460a:	6010      	str	r0, [r2, #0]
 800460c:	7019      	strb	r1, [r3, #0]
 800460e:	0008      	movs	r0, r1
 8004610:	bd10      	pop	{r4, pc}
 8004612:	f000 fb79 	bl	8004d08 <__swbuf_r>
 8004616:	0001      	movs	r1, r0
 8004618:	e7f9      	b.n	800460e <__sfputc_r+0x1e>

0800461a <__sfputs_r>:
 800461a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461c:	0006      	movs	r6, r0
 800461e:	000f      	movs	r7, r1
 8004620:	0014      	movs	r4, r2
 8004622:	18d5      	adds	r5, r2, r3
 8004624:	42ac      	cmp	r4, r5
 8004626:	d101      	bne.n	800462c <__sfputs_r+0x12>
 8004628:	2000      	movs	r0, #0
 800462a:	e007      	b.n	800463c <__sfputs_r+0x22>
 800462c:	7821      	ldrb	r1, [r4, #0]
 800462e:	003a      	movs	r2, r7
 8004630:	0030      	movs	r0, r6
 8004632:	f7ff ffdd 	bl	80045f0 <__sfputc_r>
 8004636:	3401      	adds	r4, #1
 8004638:	1c43      	adds	r3, r0, #1
 800463a:	d1f3      	bne.n	8004624 <__sfputs_r+0xa>
 800463c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004640 <_vfiprintf_r>:
 8004640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004642:	b0a1      	sub	sp, #132	; 0x84
 8004644:	0006      	movs	r6, r0
 8004646:	000c      	movs	r4, r1
 8004648:	001f      	movs	r7, r3
 800464a:	9203      	str	r2, [sp, #12]
 800464c:	2800      	cmp	r0, #0
 800464e:	d004      	beq.n	800465a <_vfiprintf_r+0x1a>
 8004650:	6983      	ldr	r3, [r0, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <_vfiprintf_r+0x1a>
 8004656:	f7ff fe8f 	bl	8004378 <__sinit>
 800465a:	4b8e      	ldr	r3, [pc, #568]	; (8004894 <_vfiprintf_r+0x254>)
 800465c:	429c      	cmp	r4, r3
 800465e:	d11c      	bne.n	800469a <_vfiprintf_r+0x5a>
 8004660:	6874      	ldr	r4, [r6, #4]
 8004662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004664:	07db      	lsls	r3, r3, #31
 8004666:	d405      	bmi.n	8004674 <_vfiprintf_r+0x34>
 8004668:	89a3      	ldrh	r3, [r4, #12]
 800466a:	059b      	lsls	r3, r3, #22
 800466c:	d402      	bmi.n	8004674 <_vfiprintf_r+0x34>
 800466e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004670:	f7ff ff23 	bl	80044ba <__retarget_lock_acquire_recursive>
 8004674:	89a3      	ldrh	r3, [r4, #12]
 8004676:	071b      	lsls	r3, r3, #28
 8004678:	d502      	bpl.n	8004680 <_vfiprintf_r+0x40>
 800467a:	6923      	ldr	r3, [r4, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d11d      	bne.n	80046bc <_vfiprintf_r+0x7c>
 8004680:	0021      	movs	r1, r4
 8004682:	0030      	movs	r0, r6
 8004684:	f000 fbaa 	bl	8004ddc <__swsetup_r>
 8004688:	2800      	cmp	r0, #0
 800468a:	d017      	beq.n	80046bc <_vfiprintf_r+0x7c>
 800468c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800468e:	07db      	lsls	r3, r3, #31
 8004690:	d50d      	bpl.n	80046ae <_vfiprintf_r+0x6e>
 8004692:	2001      	movs	r0, #1
 8004694:	4240      	negs	r0, r0
 8004696:	b021      	add	sp, #132	; 0x84
 8004698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800469a:	4b7f      	ldr	r3, [pc, #508]	; (8004898 <_vfiprintf_r+0x258>)
 800469c:	429c      	cmp	r4, r3
 800469e:	d101      	bne.n	80046a4 <_vfiprintf_r+0x64>
 80046a0:	68b4      	ldr	r4, [r6, #8]
 80046a2:	e7de      	b.n	8004662 <_vfiprintf_r+0x22>
 80046a4:	4b7d      	ldr	r3, [pc, #500]	; (800489c <_vfiprintf_r+0x25c>)
 80046a6:	429c      	cmp	r4, r3
 80046a8:	d1db      	bne.n	8004662 <_vfiprintf_r+0x22>
 80046aa:	68f4      	ldr	r4, [r6, #12]
 80046ac:	e7d9      	b.n	8004662 <_vfiprintf_r+0x22>
 80046ae:	89a3      	ldrh	r3, [r4, #12]
 80046b0:	059b      	lsls	r3, r3, #22
 80046b2:	d4ee      	bmi.n	8004692 <_vfiprintf_r+0x52>
 80046b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046b6:	f7ff ff01 	bl	80044bc <__retarget_lock_release_recursive>
 80046ba:	e7ea      	b.n	8004692 <_vfiprintf_r+0x52>
 80046bc:	2300      	movs	r3, #0
 80046be:	ad08      	add	r5, sp, #32
 80046c0:	616b      	str	r3, [r5, #20]
 80046c2:	3320      	adds	r3, #32
 80046c4:	766b      	strb	r3, [r5, #25]
 80046c6:	3310      	adds	r3, #16
 80046c8:	76ab      	strb	r3, [r5, #26]
 80046ca:	9707      	str	r7, [sp, #28]
 80046cc:	9f03      	ldr	r7, [sp, #12]
 80046ce:	783b      	ldrb	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <_vfiprintf_r+0x98>
 80046d4:	2b25      	cmp	r3, #37	; 0x25
 80046d6:	d14e      	bne.n	8004776 <_vfiprintf_r+0x136>
 80046d8:	9b03      	ldr	r3, [sp, #12]
 80046da:	1afb      	subs	r3, r7, r3
 80046dc:	9305      	str	r3, [sp, #20]
 80046de:	9b03      	ldr	r3, [sp, #12]
 80046e0:	429f      	cmp	r7, r3
 80046e2:	d00d      	beq.n	8004700 <_vfiprintf_r+0xc0>
 80046e4:	9b05      	ldr	r3, [sp, #20]
 80046e6:	0021      	movs	r1, r4
 80046e8:	0030      	movs	r0, r6
 80046ea:	9a03      	ldr	r2, [sp, #12]
 80046ec:	f7ff ff95 	bl	800461a <__sfputs_r>
 80046f0:	1c43      	adds	r3, r0, #1
 80046f2:	d100      	bne.n	80046f6 <_vfiprintf_r+0xb6>
 80046f4:	e0b5      	b.n	8004862 <_vfiprintf_r+0x222>
 80046f6:	696a      	ldr	r2, [r5, #20]
 80046f8:	9b05      	ldr	r3, [sp, #20]
 80046fa:	4694      	mov	ip, r2
 80046fc:	4463      	add	r3, ip
 80046fe:	616b      	str	r3, [r5, #20]
 8004700:	783b      	ldrb	r3, [r7, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d100      	bne.n	8004708 <_vfiprintf_r+0xc8>
 8004706:	e0ac      	b.n	8004862 <_vfiprintf_r+0x222>
 8004708:	2201      	movs	r2, #1
 800470a:	1c7b      	adds	r3, r7, #1
 800470c:	9303      	str	r3, [sp, #12]
 800470e:	2300      	movs	r3, #0
 8004710:	4252      	negs	r2, r2
 8004712:	606a      	str	r2, [r5, #4]
 8004714:	a904      	add	r1, sp, #16
 8004716:	3254      	adds	r2, #84	; 0x54
 8004718:	1852      	adds	r2, r2, r1
 800471a:	602b      	str	r3, [r5, #0]
 800471c:	60eb      	str	r3, [r5, #12]
 800471e:	60ab      	str	r3, [r5, #8]
 8004720:	7013      	strb	r3, [r2, #0]
 8004722:	65ab      	str	r3, [r5, #88]	; 0x58
 8004724:	9b03      	ldr	r3, [sp, #12]
 8004726:	2205      	movs	r2, #5
 8004728:	7819      	ldrb	r1, [r3, #0]
 800472a:	485d      	ldr	r0, [pc, #372]	; (80048a0 <_vfiprintf_r+0x260>)
 800472c:	f000 fd2c 	bl	8005188 <memchr>
 8004730:	9b03      	ldr	r3, [sp, #12]
 8004732:	1c5f      	adds	r7, r3, #1
 8004734:	2800      	cmp	r0, #0
 8004736:	d120      	bne.n	800477a <_vfiprintf_r+0x13a>
 8004738:	682a      	ldr	r2, [r5, #0]
 800473a:	06d3      	lsls	r3, r2, #27
 800473c:	d504      	bpl.n	8004748 <_vfiprintf_r+0x108>
 800473e:	2353      	movs	r3, #83	; 0x53
 8004740:	a904      	add	r1, sp, #16
 8004742:	185b      	adds	r3, r3, r1
 8004744:	2120      	movs	r1, #32
 8004746:	7019      	strb	r1, [r3, #0]
 8004748:	0713      	lsls	r3, r2, #28
 800474a:	d504      	bpl.n	8004756 <_vfiprintf_r+0x116>
 800474c:	2353      	movs	r3, #83	; 0x53
 800474e:	a904      	add	r1, sp, #16
 8004750:	185b      	adds	r3, r3, r1
 8004752:	212b      	movs	r1, #43	; 0x2b
 8004754:	7019      	strb	r1, [r3, #0]
 8004756:	9b03      	ldr	r3, [sp, #12]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b2a      	cmp	r3, #42	; 0x2a
 800475c:	d016      	beq.n	800478c <_vfiprintf_r+0x14c>
 800475e:	2100      	movs	r1, #0
 8004760:	68eb      	ldr	r3, [r5, #12]
 8004762:	9f03      	ldr	r7, [sp, #12]
 8004764:	783a      	ldrb	r2, [r7, #0]
 8004766:	1c78      	adds	r0, r7, #1
 8004768:	3a30      	subs	r2, #48	; 0x30
 800476a:	4684      	mov	ip, r0
 800476c:	2a09      	cmp	r2, #9
 800476e:	d94f      	bls.n	8004810 <_vfiprintf_r+0x1d0>
 8004770:	2900      	cmp	r1, #0
 8004772:	d111      	bne.n	8004798 <_vfiprintf_r+0x158>
 8004774:	e017      	b.n	80047a6 <_vfiprintf_r+0x166>
 8004776:	3701      	adds	r7, #1
 8004778:	e7a9      	b.n	80046ce <_vfiprintf_r+0x8e>
 800477a:	4b49      	ldr	r3, [pc, #292]	; (80048a0 <_vfiprintf_r+0x260>)
 800477c:	682a      	ldr	r2, [r5, #0]
 800477e:	1ac0      	subs	r0, r0, r3
 8004780:	2301      	movs	r3, #1
 8004782:	4083      	lsls	r3, r0
 8004784:	4313      	orrs	r3, r2
 8004786:	602b      	str	r3, [r5, #0]
 8004788:	9703      	str	r7, [sp, #12]
 800478a:	e7cb      	b.n	8004724 <_vfiprintf_r+0xe4>
 800478c:	9b07      	ldr	r3, [sp, #28]
 800478e:	1d19      	adds	r1, r3, #4
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	9107      	str	r1, [sp, #28]
 8004794:	2b00      	cmp	r3, #0
 8004796:	db01      	blt.n	800479c <_vfiprintf_r+0x15c>
 8004798:	930b      	str	r3, [sp, #44]	; 0x2c
 800479a:	e004      	b.n	80047a6 <_vfiprintf_r+0x166>
 800479c:	425b      	negs	r3, r3
 800479e:	60eb      	str	r3, [r5, #12]
 80047a0:	2302      	movs	r3, #2
 80047a2:	4313      	orrs	r3, r2
 80047a4:	602b      	str	r3, [r5, #0]
 80047a6:	783b      	ldrb	r3, [r7, #0]
 80047a8:	2b2e      	cmp	r3, #46	; 0x2e
 80047aa:	d10a      	bne.n	80047c2 <_vfiprintf_r+0x182>
 80047ac:	787b      	ldrb	r3, [r7, #1]
 80047ae:	2b2a      	cmp	r3, #42	; 0x2a
 80047b0:	d137      	bne.n	8004822 <_vfiprintf_r+0x1e2>
 80047b2:	9b07      	ldr	r3, [sp, #28]
 80047b4:	3702      	adds	r7, #2
 80047b6:	1d1a      	adds	r2, r3, #4
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	9207      	str	r2, [sp, #28]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	db2d      	blt.n	800481c <_vfiprintf_r+0x1dc>
 80047c0:	9309      	str	r3, [sp, #36]	; 0x24
 80047c2:	2203      	movs	r2, #3
 80047c4:	7839      	ldrb	r1, [r7, #0]
 80047c6:	4837      	ldr	r0, [pc, #220]	; (80048a4 <_vfiprintf_r+0x264>)
 80047c8:	f000 fcde 	bl	8005188 <memchr>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d007      	beq.n	80047e0 <_vfiprintf_r+0x1a0>
 80047d0:	4b34      	ldr	r3, [pc, #208]	; (80048a4 <_vfiprintf_r+0x264>)
 80047d2:	682a      	ldr	r2, [r5, #0]
 80047d4:	1ac0      	subs	r0, r0, r3
 80047d6:	2340      	movs	r3, #64	; 0x40
 80047d8:	4083      	lsls	r3, r0
 80047da:	4313      	orrs	r3, r2
 80047dc:	3701      	adds	r7, #1
 80047de:	602b      	str	r3, [r5, #0]
 80047e0:	7839      	ldrb	r1, [r7, #0]
 80047e2:	1c7b      	adds	r3, r7, #1
 80047e4:	2206      	movs	r2, #6
 80047e6:	4830      	ldr	r0, [pc, #192]	; (80048a8 <_vfiprintf_r+0x268>)
 80047e8:	9303      	str	r3, [sp, #12]
 80047ea:	7629      	strb	r1, [r5, #24]
 80047ec:	f000 fccc 	bl	8005188 <memchr>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	d045      	beq.n	8004880 <_vfiprintf_r+0x240>
 80047f4:	4b2d      	ldr	r3, [pc, #180]	; (80048ac <_vfiprintf_r+0x26c>)
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d127      	bne.n	800484a <_vfiprintf_r+0x20a>
 80047fa:	2207      	movs	r2, #7
 80047fc:	9b07      	ldr	r3, [sp, #28]
 80047fe:	3307      	adds	r3, #7
 8004800:	4393      	bics	r3, r2
 8004802:	3308      	adds	r3, #8
 8004804:	9307      	str	r3, [sp, #28]
 8004806:	696b      	ldr	r3, [r5, #20]
 8004808:	9a04      	ldr	r2, [sp, #16]
 800480a:	189b      	adds	r3, r3, r2
 800480c:	616b      	str	r3, [r5, #20]
 800480e:	e75d      	b.n	80046cc <_vfiprintf_r+0x8c>
 8004810:	210a      	movs	r1, #10
 8004812:	434b      	muls	r3, r1
 8004814:	4667      	mov	r7, ip
 8004816:	189b      	adds	r3, r3, r2
 8004818:	3909      	subs	r1, #9
 800481a:	e7a3      	b.n	8004764 <_vfiprintf_r+0x124>
 800481c:	2301      	movs	r3, #1
 800481e:	425b      	negs	r3, r3
 8004820:	e7ce      	b.n	80047c0 <_vfiprintf_r+0x180>
 8004822:	2300      	movs	r3, #0
 8004824:	001a      	movs	r2, r3
 8004826:	3701      	adds	r7, #1
 8004828:	606b      	str	r3, [r5, #4]
 800482a:	7839      	ldrb	r1, [r7, #0]
 800482c:	1c78      	adds	r0, r7, #1
 800482e:	3930      	subs	r1, #48	; 0x30
 8004830:	4684      	mov	ip, r0
 8004832:	2909      	cmp	r1, #9
 8004834:	d903      	bls.n	800483e <_vfiprintf_r+0x1fe>
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0c3      	beq.n	80047c2 <_vfiprintf_r+0x182>
 800483a:	9209      	str	r2, [sp, #36]	; 0x24
 800483c:	e7c1      	b.n	80047c2 <_vfiprintf_r+0x182>
 800483e:	230a      	movs	r3, #10
 8004840:	435a      	muls	r2, r3
 8004842:	4667      	mov	r7, ip
 8004844:	1852      	adds	r2, r2, r1
 8004846:	3b09      	subs	r3, #9
 8004848:	e7ef      	b.n	800482a <_vfiprintf_r+0x1ea>
 800484a:	ab07      	add	r3, sp, #28
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	0022      	movs	r2, r4
 8004850:	0029      	movs	r1, r5
 8004852:	0030      	movs	r0, r6
 8004854:	4b16      	ldr	r3, [pc, #88]	; (80048b0 <_vfiprintf_r+0x270>)
 8004856:	e000      	b.n	800485a <_vfiprintf_r+0x21a>
 8004858:	bf00      	nop
 800485a:	9004      	str	r0, [sp, #16]
 800485c:	9b04      	ldr	r3, [sp, #16]
 800485e:	3301      	adds	r3, #1
 8004860:	d1d1      	bne.n	8004806 <_vfiprintf_r+0x1c6>
 8004862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004864:	07db      	lsls	r3, r3, #31
 8004866:	d405      	bmi.n	8004874 <_vfiprintf_r+0x234>
 8004868:	89a3      	ldrh	r3, [r4, #12]
 800486a:	059b      	lsls	r3, r3, #22
 800486c:	d402      	bmi.n	8004874 <_vfiprintf_r+0x234>
 800486e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004870:	f7ff fe24 	bl	80044bc <__retarget_lock_release_recursive>
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	065b      	lsls	r3, r3, #25
 8004878:	d500      	bpl.n	800487c <_vfiprintf_r+0x23c>
 800487a:	e70a      	b.n	8004692 <_vfiprintf_r+0x52>
 800487c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800487e:	e70a      	b.n	8004696 <_vfiprintf_r+0x56>
 8004880:	ab07      	add	r3, sp, #28
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	0022      	movs	r2, r4
 8004886:	0029      	movs	r1, r5
 8004888:	0030      	movs	r0, r6
 800488a:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <_vfiprintf_r+0x270>)
 800488c:	f000 f882 	bl	8004994 <_printf_i>
 8004890:	e7e3      	b.n	800485a <_vfiprintf_r+0x21a>
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	080053b0 	.word	0x080053b0
 8004898:	080053d0 	.word	0x080053d0
 800489c:	08005390 	.word	0x08005390
 80048a0:	080053f0 	.word	0x080053f0
 80048a4:	080053f6 	.word	0x080053f6
 80048a8:	080053fa 	.word	0x080053fa
 80048ac:	00000000 	.word	0x00000000
 80048b0:	0800461b 	.word	0x0800461b

080048b4 <_printf_common>:
 80048b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048b6:	0015      	movs	r5, r2
 80048b8:	9301      	str	r3, [sp, #4]
 80048ba:	688a      	ldr	r2, [r1, #8]
 80048bc:	690b      	ldr	r3, [r1, #16]
 80048be:	000c      	movs	r4, r1
 80048c0:	9000      	str	r0, [sp, #0]
 80048c2:	4293      	cmp	r3, r2
 80048c4:	da00      	bge.n	80048c8 <_printf_common+0x14>
 80048c6:	0013      	movs	r3, r2
 80048c8:	0022      	movs	r2, r4
 80048ca:	602b      	str	r3, [r5, #0]
 80048cc:	3243      	adds	r2, #67	; 0x43
 80048ce:	7812      	ldrb	r2, [r2, #0]
 80048d0:	2a00      	cmp	r2, #0
 80048d2:	d001      	beq.n	80048d8 <_printf_common+0x24>
 80048d4:	3301      	adds	r3, #1
 80048d6:	602b      	str	r3, [r5, #0]
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	069b      	lsls	r3, r3, #26
 80048dc:	d502      	bpl.n	80048e4 <_printf_common+0x30>
 80048de:	682b      	ldr	r3, [r5, #0]
 80048e0:	3302      	adds	r3, #2
 80048e2:	602b      	str	r3, [r5, #0]
 80048e4:	6822      	ldr	r2, [r4, #0]
 80048e6:	2306      	movs	r3, #6
 80048e8:	0017      	movs	r7, r2
 80048ea:	401f      	ands	r7, r3
 80048ec:	421a      	tst	r2, r3
 80048ee:	d027      	beq.n	8004940 <_printf_common+0x8c>
 80048f0:	0023      	movs	r3, r4
 80048f2:	3343      	adds	r3, #67	; 0x43
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	1e5a      	subs	r2, r3, #1
 80048f8:	4193      	sbcs	r3, r2
 80048fa:	6822      	ldr	r2, [r4, #0]
 80048fc:	0692      	lsls	r2, r2, #26
 80048fe:	d430      	bmi.n	8004962 <_printf_common+0xae>
 8004900:	0022      	movs	r2, r4
 8004902:	9901      	ldr	r1, [sp, #4]
 8004904:	9800      	ldr	r0, [sp, #0]
 8004906:	9e08      	ldr	r6, [sp, #32]
 8004908:	3243      	adds	r2, #67	; 0x43
 800490a:	47b0      	blx	r6
 800490c:	1c43      	adds	r3, r0, #1
 800490e:	d025      	beq.n	800495c <_printf_common+0xa8>
 8004910:	2306      	movs	r3, #6
 8004912:	6820      	ldr	r0, [r4, #0]
 8004914:	682a      	ldr	r2, [r5, #0]
 8004916:	68e1      	ldr	r1, [r4, #12]
 8004918:	2500      	movs	r5, #0
 800491a:	4003      	ands	r3, r0
 800491c:	2b04      	cmp	r3, #4
 800491e:	d103      	bne.n	8004928 <_printf_common+0x74>
 8004920:	1a8d      	subs	r5, r1, r2
 8004922:	43eb      	mvns	r3, r5
 8004924:	17db      	asrs	r3, r3, #31
 8004926:	401d      	ands	r5, r3
 8004928:	68a3      	ldr	r3, [r4, #8]
 800492a:	6922      	ldr	r2, [r4, #16]
 800492c:	4293      	cmp	r3, r2
 800492e:	dd01      	ble.n	8004934 <_printf_common+0x80>
 8004930:	1a9b      	subs	r3, r3, r2
 8004932:	18ed      	adds	r5, r5, r3
 8004934:	2700      	movs	r7, #0
 8004936:	42bd      	cmp	r5, r7
 8004938:	d120      	bne.n	800497c <_printf_common+0xc8>
 800493a:	2000      	movs	r0, #0
 800493c:	e010      	b.n	8004960 <_printf_common+0xac>
 800493e:	3701      	adds	r7, #1
 8004940:	68e3      	ldr	r3, [r4, #12]
 8004942:	682a      	ldr	r2, [r5, #0]
 8004944:	1a9b      	subs	r3, r3, r2
 8004946:	42bb      	cmp	r3, r7
 8004948:	ddd2      	ble.n	80048f0 <_printf_common+0x3c>
 800494a:	0022      	movs	r2, r4
 800494c:	2301      	movs	r3, #1
 800494e:	9901      	ldr	r1, [sp, #4]
 8004950:	9800      	ldr	r0, [sp, #0]
 8004952:	9e08      	ldr	r6, [sp, #32]
 8004954:	3219      	adds	r2, #25
 8004956:	47b0      	blx	r6
 8004958:	1c43      	adds	r3, r0, #1
 800495a:	d1f0      	bne.n	800493e <_printf_common+0x8a>
 800495c:	2001      	movs	r0, #1
 800495e:	4240      	negs	r0, r0
 8004960:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004962:	2030      	movs	r0, #48	; 0x30
 8004964:	18e1      	adds	r1, r4, r3
 8004966:	3143      	adds	r1, #67	; 0x43
 8004968:	7008      	strb	r0, [r1, #0]
 800496a:	0021      	movs	r1, r4
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	3145      	adds	r1, #69	; 0x45
 8004970:	7809      	ldrb	r1, [r1, #0]
 8004972:	18a2      	adds	r2, r4, r2
 8004974:	3243      	adds	r2, #67	; 0x43
 8004976:	3302      	adds	r3, #2
 8004978:	7011      	strb	r1, [r2, #0]
 800497a:	e7c1      	b.n	8004900 <_printf_common+0x4c>
 800497c:	0022      	movs	r2, r4
 800497e:	2301      	movs	r3, #1
 8004980:	9901      	ldr	r1, [sp, #4]
 8004982:	9800      	ldr	r0, [sp, #0]
 8004984:	9e08      	ldr	r6, [sp, #32]
 8004986:	321a      	adds	r2, #26
 8004988:	47b0      	blx	r6
 800498a:	1c43      	adds	r3, r0, #1
 800498c:	d0e6      	beq.n	800495c <_printf_common+0xa8>
 800498e:	3701      	adds	r7, #1
 8004990:	e7d1      	b.n	8004936 <_printf_common+0x82>
	...

08004994 <_printf_i>:
 8004994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004996:	b08b      	sub	sp, #44	; 0x2c
 8004998:	9206      	str	r2, [sp, #24]
 800499a:	000a      	movs	r2, r1
 800499c:	3243      	adds	r2, #67	; 0x43
 800499e:	9307      	str	r3, [sp, #28]
 80049a0:	9005      	str	r0, [sp, #20]
 80049a2:	9204      	str	r2, [sp, #16]
 80049a4:	7e0a      	ldrb	r2, [r1, #24]
 80049a6:	000c      	movs	r4, r1
 80049a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80049aa:	2a78      	cmp	r2, #120	; 0x78
 80049ac:	d807      	bhi.n	80049be <_printf_i+0x2a>
 80049ae:	2a62      	cmp	r2, #98	; 0x62
 80049b0:	d809      	bhi.n	80049c6 <_printf_i+0x32>
 80049b2:	2a00      	cmp	r2, #0
 80049b4:	d100      	bne.n	80049b8 <_printf_i+0x24>
 80049b6:	e0c1      	b.n	8004b3c <_printf_i+0x1a8>
 80049b8:	2a58      	cmp	r2, #88	; 0x58
 80049ba:	d100      	bne.n	80049be <_printf_i+0x2a>
 80049bc:	e08c      	b.n	8004ad8 <_printf_i+0x144>
 80049be:	0026      	movs	r6, r4
 80049c0:	3642      	adds	r6, #66	; 0x42
 80049c2:	7032      	strb	r2, [r6, #0]
 80049c4:	e022      	b.n	8004a0c <_printf_i+0x78>
 80049c6:	0010      	movs	r0, r2
 80049c8:	3863      	subs	r0, #99	; 0x63
 80049ca:	2815      	cmp	r0, #21
 80049cc:	d8f7      	bhi.n	80049be <_printf_i+0x2a>
 80049ce:	f7fb fb99 	bl	8000104 <__gnu_thumb1_case_shi>
 80049d2:	0016      	.short	0x0016
 80049d4:	fff6001f 	.word	0xfff6001f
 80049d8:	fff6fff6 	.word	0xfff6fff6
 80049dc:	001ffff6 	.word	0x001ffff6
 80049e0:	fff6fff6 	.word	0xfff6fff6
 80049e4:	fff6fff6 	.word	0xfff6fff6
 80049e8:	003600a8 	.word	0x003600a8
 80049ec:	fff6009a 	.word	0xfff6009a
 80049f0:	00b9fff6 	.word	0x00b9fff6
 80049f4:	0036fff6 	.word	0x0036fff6
 80049f8:	fff6fff6 	.word	0xfff6fff6
 80049fc:	009e      	.short	0x009e
 80049fe:	0026      	movs	r6, r4
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	3642      	adds	r6, #66	; 0x42
 8004a04:	1d11      	adds	r1, r2, #4
 8004a06:	6019      	str	r1, [r3, #0]
 8004a08:	6813      	ldr	r3, [r2, #0]
 8004a0a:	7033      	strb	r3, [r6, #0]
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e0a7      	b.n	8004b60 <_printf_i+0x1cc>
 8004a10:	6808      	ldr	r0, [r1, #0]
 8004a12:	6819      	ldr	r1, [r3, #0]
 8004a14:	1d0a      	adds	r2, r1, #4
 8004a16:	0605      	lsls	r5, r0, #24
 8004a18:	d50b      	bpl.n	8004a32 <_printf_i+0x9e>
 8004a1a:	680d      	ldr	r5, [r1, #0]
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	2d00      	cmp	r5, #0
 8004a20:	da03      	bge.n	8004a2a <_printf_i+0x96>
 8004a22:	232d      	movs	r3, #45	; 0x2d
 8004a24:	9a04      	ldr	r2, [sp, #16]
 8004a26:	426d      	negs	r5, r5
 8004a28:	7013      	strb	r3, [r2, #0]
 8004a2a:	4b61      	ldr	r3, [pc, #388]	; (8004bb0 <_printf_i+0x21c>)
 8004a2c:	270a      	movs	r7, #10
 8004a2e:	9303      	str	r3, [sp, #12]
 8004a30:	e01b      	b.n	8004a6a <_printf_i+0xd6>
 8004a32:	680d      	ldr	r5, [r1, #0]
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	0641      	lsls	r1, r0, #25
 8004a38:	d5f1      	bpl.n	8004a1e <_printf_i+0x8a>
 8004a3a:	b22d      	sxth	r5, r5
 8004a3c:	e7ef      	b.n	8004a1e <_printf_i+0x8a>
 8004a3e:	680d      	ldr	r5, [r1, #0]
 8004a40:	6819      	ldr	r1, [r3, #0]
 8004a42:	1d08      	adds	r0, r1, #4
 8004a44:	6018      	str	r0, [r3, #0]
 8004a46:	062e      	lsls	r6, r5, #24
 8004a48:	d501      	bpl.n	8004a4e <_printf_i+0xba>
 8004a4a:	680d      	ldr	r5, [r1, #0]
 8004a4c:	e003      	b.n	8004a56 <_printf_i+0xc2>
 8004a4e:	066d      	lsls	r5, r5, #25
 8004a50:	d5fb      	bpl.n	8004a4a <_printf_i+0xb6>
 8004a52:	680d      	ldr	r5, [r1, #0]
 8004a54:	b2ad      	uxth	r5, r5
 8004a56:	4b56      	ldr	r3, [pc, #344]	; (8004bb0 <_printf_i+0x21c>)
 8004a58:	2708      	movs	r7, #8
 8004a5a:	9303      	str	r3, [sp, #12]
 8004a5c:	2a6f      	cmp	r2, #111	; 0x6f
 8004a5e:	d000      	beq.n	8004a62 <_printf_i+0xce>
 8004a60:	3702      	adds	r7, #2
 8004a62:	0023      	movs	r3, r4
 8004a64:	2200      	movs	r2, #0
 8004a66:	3343      	adds	r3, #67	; 0x43
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	6863      	ldr	r3, [r4, #4]
 8004a6c:	60a3      	str	r3, [r4, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	db03      	blt.n	8004a7a <_printf_i+0xe6>
 8004a72:	2204      	movs	r2, #4
 8004a74:	6821      	ldr	r1, [r4, #0]
 8004a76:	4391      	bics	r1, r2
 8004a78:	6021      	str	r1, [r4, #0]
 8004a7a:	2d00      	cmp	r5, #0
 8004a7c:	d102      	bne.n	8004a84 <_printf_i+0xf0>
 8004a7e:	9e04      	ldr	r6, [sp, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00c      	beq.n	8004a9e <_printf_i+0x10a>
 8004a84:	9e04      	ldr	r6, [sp, #16]
 8004a86:	0028      	movs	r0, r5
 8004a88:	0039      	movs	r1, r7
 8004a8a:	f7fb fbcb 	bl	8000224 <__aeabi_uidivmod>
 8004a8e:	9b03      	ldr	r3, [sp, #12]
 8004a90:	3e01      	subs	r6, #1
 8004a92:	5c5b      	ldrb	r3, [r3, r1]
 8004a94:	7033      	strb	r3, [r6, #0]
 8004a96:	002b      	movs	r3, r5
 8004a98:	0005      	movs	r5, r0
 8004a9a:	429f      	cmp	r7, r3
 8004a9c:	d9f3      	bls.n	8004a86 <_printf_i+0xf2>
 8004a9e:	2f08      	cmp	r7, #8
 8004aa0:	d109      	bne.n	8004ab6 <_printf_i+0x122>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	07db      	lsls	r3, r3, #31
 8004aa6:	d506      	bpl.n	8004ab6 <_printf_i+0x122>
 8004aa8:	6863      	ldr	r3, [r4, #4]
 8004aaa:	6922      	ldr	r2, [r4, #16]
 8004aac:	4293      	cmp	r3, r2
 8004aae:	dc02      	bgt.n	8004ab6 <_printf_i+0x122>
 8004ab0:	2330      	movs	r3, #48	; 0x30
 8004ab2:	3e01      	subs	r6, #1
 8004ab4:	7033      	strb	r3, [r6, #0]
 8004ab6:	9b04      	ldr	r3, [sp, #16]
 8004ab8:	1b9b      	subs	r3, r3, r6
 8004aba:	6123      	str	r3, [r4, #16]
 8004abc:	9b07      	ldr	r3, [sp, #28]
 8004abe:	0021      	movs	r1, r4
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	9805      	ldr	r0, [sp, #20]
 8004ac4:	9b06      	ldr	r3, [sp, #24]
 8004ac6:	aa09      	add	r2, sp, #36	; 0x24
 8004ac8:	f7ff fef4 	bl	80048b4 <_printf_common>
 8004acc:	1c43      	adds	r3, r0, #1
 8004ace:	d14c      	bne.n	8004b6a <_printf_i+0x1d6>
 8004ad0:	2001      	movs	r0, #1
 8004ad2:	4240      	negs	r0, r0
 8004ad4:	b00b      	add	sp, #44	; 0x2c
 8004ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ad8:	3145      	adds	r1, #69	; 0x45
 8004ada:	700a      	strb	r2, [r1, #0]
 8004adc:	4a34      	ldr	r2, [pc, #208]	; (8004bb0 <_printf_i+0x21c>)
 8004ade:	9203      	str	r2, [sp, #12]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	6821      	ldr	r1, [r4, #0]
 8004ae4:	ca20      	ldmia	r2!, {r5}
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	0608      	lsls	r0, r1, #24
 8004aea:	d516      	bpl.n	8004b1a <_printf_i+0x186>
 8004aec:	07cb      	lsls	r3, r1, #31
 8004aee:	d502      	bpl.n	8004af6 <_printf_i+0x162>
 8004af0:	2320      	movs	r3, #32
 8004af2:	4319      	orrs	r1, r3
 8004af4:	6021      	str	r1, [r4, #0]
 8004af6:	2710      	movs	r7, #16
 8004af8:	2d00      	cmp	r5, #0
 8004afa:	d1b2      	bne.n	8004a62 <_printf_i+0xce>
 8004afc:	2320      	movs	r3, #32
 8004afe:	6822      	ldr	r2, [r4, #0]
 8004b00:	439a      	bics	r2, r3
 8004b02:	6022      	str	r2, [r4, #0]
 8004b04:	e7ad      	b.n	8004a62 <_printf_i+0xce>
 8004b06:	2220      	movs	r2, #32
 8004b08:	6809      	ldr	r1, [r1, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	6022      	str	r2, [r4, #0]
 8004b0e:	0022      	movs	r2, r4
 8004b10:	2178      	movs	r1, #120	; 0x78
 8004b12:	3245      	adds	r2, #69	; 0x45
 8004b14:	7011      	strb	r1, [r2, #0]
 8004b16:	4a27      	ldr	r2, [pc, #156]	; (8004bb4 <_printf_i+0x220>)
 8004b18:	e7e1      	b.n	8004ade <_printf_i+0x14a>
 8004b1a:	0648      	lsls	r0, r1, #25
 8004b1c:	d5e6      	bpl.n	8004aec <_printf_i+0x158>
 8004b1e:	b2ad      	uxth	r5, r5
 8004b20:	e7e4      	b.n	8004aec <_printf_i+0x158>
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	680d      	ldr	r5, [r1, #0]
 8004b26:	1d10      	adds	r0, r2, #4
 8004b28:	6949      	ldr	r1, [r1, #20]
 8004b2a:	6018      	str	r0, [r3, #0]
 8004b2c:	6813      	ldr	r3, [r2, #0]
 8004b2e:	062e      	lsls	r6, r5, #24
 8004b30:	d501      	bpl.n	8004b36 <_printf_i+0x1a2>
 8004b32:	6019      	str	r1, [r3, #0]
 8004b34:	e002      	b.n	8004b3c <_printf_i+0x1a8>
 8004b36:	066d      	lsls	r5, r5, #25
 8004b38:	d5fb      	bpl.n	8004b32 <_printf_i+0x19e>
 8004b3a:	8019      	strh	r1, [r3, #0]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	9e04      	ldr	r6, [sp, #16]
 8004b40:	6123      	str	r3, [r4, #16]
 8004b42:	e7bb      	b.n	8004abc <_printf_i+0x128>
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	1d11      	adds	r1, r2, #4
 8004b48:	6019      	str	r1, [r3, #0]
 8004b4a:	6816      	ldr	r6, [r2, #0]
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	0030      	movs	r0, r6
 8004b50:	6862      	ldr	r2, [r4, #4]
 8004b52:	f000 fb19 	bl	8005188 <memchr>
 8004b56:	2800      	cmp	r0, #0
 8004b58:	d001      	beq.n	8004b5e <_printf_i+0x1ca>
 8004b5a:	1b80      	subs	r0, r0, r6
 8004b5c:	6060      	str	r0, [r4, #4]
 8004b5e:	6863      	ldr	r3, [r4, #4]
 8004b60:	6123      	str	r3, [r4, #16]
 8004b62:	2300      	movs	r3, #0
 8004b64:	9a04      	ldr	r2, [sp, #16]
 8004b66:	7013      	strb	r3, [r2, #0]
 8004b68:	e7a8      	b.n	8004abc <_printf_i+0x128>
 8004b6a:	6923      	ldr	r3, [r4, #16]
 8004b6c:	0032      	movs	r2, r6
 8004b6e:	9906      	ldr	r1, [sp, #24]
 8004b70:	9805      	ldr	r0, [sp, #20]
 8004b72:	9d07      	ldr	r5, [sp, #28]
 8004b74:	47a8      	blx	r5
 8004b76:	1c43      	adds	r3, r0, #1
 8004b78:	d0aa      	beq.n	8004ad0 <_printf_i+0x13c>
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	079b      	lsls	r3, r3, #30
 8004b7e:	d415      	bmi.n	8004bac <_printf_i+0x218>
 8004b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b82:	68e0      	ldr	r0, [r4, #12]
 8004b84:	4298      	cmp	r0, r3
 8004b86:	daa5      	bge.n	8004ad4 <_printf_i+0x140>
 8004b88:	0018      	movs	r0, r3
 8004b8a:	e7a3      	b.n	8004ad4 <_printf_i+0x140>
 8004b8c:	0022      	movs	r2, r4
 8004b8e:	2301      	movs	r3, #1
 8004b90:	9906      	ldr	r1, [sp, #24]
 8004b92:	9805      	ldr	r0, [sp, #20]
 8004b94:	9e07      	ldr	r6, [sp, #28]
 8004b96:	3219      	adds	r2, #25
 8004b98:	47b0      	blx	r6
 8004b9a:	1c43      	adds	r3, r0, #1
 8004b9c:	d098      	beq.n	8004ad0 <_printf_i+0x13c>
 8004b9e:	3501      	adds	r5, #1
 8004ba0:	68e3      	ldr	r3, [r4, #12]
 8004ba2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ba4:	1a9b      	subs	r3, r3, r2
 8004ba6:	42ab      	cmp	r3, r5
 8004ba8:	dcf0      	bgt.n	8004b8c <_printf_i+0x1f8>
 8004baa:	e7e9      	b.n	8004b80 <_printf_i+0x1ec>
 8004bac:	2500      	movs	r5, #0
 8004bae:	e7f7      	b.n	8004ba0 <_printf_i+0x20c>
 8004bb0:	08005401 	.word	0x08005401
 8004bb4:	08005412 	.word	0x08005412

08004bb8 <_putc_r>:
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	0006      	movs	r6, r0
 8004bbc:	000d      	movs	r5, r1
 8004bbe:	0014      	movs	r4, r2
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	d004      	beq.n	8004bce <_putc_r+0x16>
 8004bc4:	6983      	ldr	r3, [r0, #24]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <_putc_r+0x16>
 8004bca:	f7ff fbd5 	bl	8004378 <__sinit>
 8004bce:	4b1c      	ldr	r3, [pc, #112]	; (8004c40 <_putc_r+0x88>)
 8004bd0:	429c      	cmp	r4, r3
 8004bd2:	d124      	bne.n	8004c1e <_putc_r+0x66>
 8004bd4:	6874      	ldr	r4, [r6, #4]
 8004bd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bd8:	07db      	lsls	r3, r3, #31
 8004bda:	d405      	bmi.n	8004be8 <_putc_r+0x30>
 8004bdc:	89a3      	ldrh	r3, [r4, #12]
 8004bde:	059b      	lsls	r3, r3, #22
 8004be0:	d402      	bmi.n	8004be8 <_putc_r+0x30>
 8004be2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004be4:	f7ff fc69 	bl	80044ba <__retarget_lock_acquire_recursive>
 8004be8:	68a3      	ldr	r3, [r4, #8]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	60a3      	str	r3, [r4, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	da05      	bge.n	8004bfe <_putc_r+0x46>
 8004bf2:	69a2      	ldr	r2, [r4, #24]
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	db1c      	blt.n	8004c32 <_putc_r+0x7a>
 8004bf8:	b2eb      	uxtb	r3, r5
 8004bfa:	2b0a      	cmp	r3, #10
 8004bfc:	d019      	beq.n	8004c32 <_putc_r+0x7a>
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	6022      	str	r2, [r4, #0]
 8004c04:	701d      	strb	r5, [r3, #0]
 8004c06:	b2ed      	uxtb	r5, r5
 8004c08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c0a:	07db      	lsls	r3, r3, #31
 8004c0c:	d405      	bmi.n	8004c1a <_putc_r+0x62>
 8004c0e:	89a3      	ldrh	r3, [r4, #12]
 8004c10:	059b      	lsls	r3, r3, #22
 8004c12:	d402      	bmi.n	8004c1a <_putc_r+0x62>
 8004c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c16:	f7ff fc51 	bl	80044bc <__retarget_lock_release_recursive>
 8004c1a:	0028      	movs	r0, r5
 8004c1c:	bd70      	pop	{r4, r5, r6, pc}
 8004c1e:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <_putc_r+0x8c>)
 8004c20:	429c      	cmp	r4, r3
 8004c22:	d101      	bne.n	8004c28 <_putc_r+0x70>
 8004c24:	68b4      	ldr	r4, [r6, #8]
 8004c26:	e7d6      	b.n	8004bd6 <_putc_r+0x1e>
 8004c28:	4b07      	ldr	r3, [pc, #28]	; (8004c48 <_putc_r+0x90>)
 8004c2a:	429c      	cmp	r4, r3
 8004c2c:	d1d3      	bne.n	8004bd6 <_putc_r+0x1e>
 8004c2e:	68f4      	ldr	r4, [r6, #12]
 8004c30:	e7d1      	b.n	8004bd6 <_putc_r+0x1e>
 8004c32:	0029      	movs	r1, r5
 8004c34:	0022      	movs	r2, r4
 8004c36:	0030      	movs	r0, r6
 8004c38:	f000 f866 	bl	8004d08 <__swbuf_r>
 8004c3c:	0005      	movs	r5, r0
 8004c3e:	e7e3      	b.n	8004c08 <_putc_r+0x50>
 8004c40:	080053b0 	.word	0x080053b0
 8004c44:	080053d0 	.word	0x080053d0
 8004c48:	08005390 	.word	0x08005390

08004c4c <_sbrk_r>:
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	b570      	push	{r4, r5, r6, lr}
 8004c50:	4d06      	ldr	r5, [pc, #24]	; (8004c6c <_sbrk_r+0x20>)
 8004c52:	0004      	movs	r4, r0
 8004c54:	0008      	movs	r0, r1
 8004c56:	602b      	str	r3, [r5, #0]
 8004c58:	f7fc f962 	bl	8000f20 <_sbrk>
 8004c5c:	1c43      	adds	r3, r0, #1
 8004c5e:	d103      	bne.n	8004c68 <_sbrk_r+0x1c>
 8004c60:	682b      	ldr	r3, [r5, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d000      	beq.n	8004c68 <_sbrk_r+0x1c>
 8004c66:	6023      	str	r3, [r4, #0]
 8004c68:	bd70      	pop	{r4, r5, r6, pc}
 8004c6a:	46c0      	nop			; (mov r8, r8)
 8004c6c:	200001cc 	.word	0x200001cc

08004c70 <__sread>:
 8004c70:	b570      	push	{r4, r5, r6, lr}
 8004c72:	000c      	movs	r4, r1
 8004c74:	250e      	movs	r5, #14
 8004c76:	5f49      	ldrsh	r1, [r1, r5]
 8004c78:	f000 faec 	bl	8005254 <_read_r>
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	db03      	blt.n	8004c88 <__sread+0x18>
 8004c80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004c82:	181b      	adds	r3, r3, r0
 8004c84:	6563      	str	r3, [r4, #84]	; 0x54
 8004c86:	bd70      	pop	{r4, r5, r6, pc}
 8004c88:	89a3      	ldrh	r3, [r4, #12]
 8004c8a:	4a02      	ldr	r2, [pc, #8]	; (8004c94 <__sread+0x24>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	81a3      	strh	r3, [r4, #12]
 8004c90:	e7f9      	b.n	8004c86 <__sread+0x16>
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	ffffefff 	.word	0xffffefff

08004c98 <__swrite>:
 8004c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9a:	001f      	movs	r7, r3
 8004c9c:	898b      	ldrh	r3, [r1, #12]
 8004c9e:	0005      	movs	r5, r0
 8004ca0:	000c      	movs	r4, r1
 8004ca2:	0016      	movs	r6, r2
 8004ca4:	05db      	lsls	r3, r3, #23
 8004ca6:	d505      	bpl.n	8004cb4 <__swrite+0x1c>
 8004ca8:	230e      	movs	r3, #14
 8004caa:	5ec9      	ldrsh	r1, [r1, r3]
 8004cac:	2200      	movs	r2, #0
 8004cae:	2302      	movs	r3, #2
 8004cb0:	f000 f9ea 	bl	8005088 <_lseek_r>
 8004cb4:	89a3      	ldrh	r3, [r4, #12]
 8004cb6:	4a05      	ldr	r2, [pc, #20]	; (8004ccc <__swrite+0x34>)
 8004cb8:	0028      	movs	r0, r5
 8004cba:	4013      	ands	r3, r2
 8004cbc:	81a3      	strh	r3, [r4, #12]
 8004cbe:	0032      	movs	r2, r6
 8004cc0:	230e      	movs	r3, #14
 8004cc2:	5ee1      	ldrsh	r1, [r4, r3]
 8004cc4:	003b      	movs	r3, r7
 8004cc6:	f000 f875 	bl	8004db4 <_write_r>
 8004cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ccc:	ffffefff 	.word	0xffffefff

08004cd0 <__sseek>:
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	000c      	movs	r4, r1
 8004cd4:	250e      	movs	r5, #14
 8004cd6:	5f49      	ldrsh	r1, [r1, r5]
 8004cd8:	f000 f9d6 	bl	8005088 <_lseek_r>
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	1c42      	adds	r2, r0, #1
 8004ce0:	d103      	bne.n	8004cea <__sseek+0x1a>
 8004ce2:	4a05      	ldr	r2, [pc, #20]	; (8004cf8 <__sseek+0x28>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	81a3      	strh	r3, [r4, #12]
 8004ce8:	bd70      	pop	{r4, r5, r6, pc}
 8004cea:	2280      	movs	r2, #128	; 0x80
 8004cec:	0152      	lsls	r2, r2, #5
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	81a3      	strh	r3, [r4, #12]
 8004cf2:	6560      	str	r0, [r4, #84]	; 0x54
 8004cf4:	e7f8      	b.n	8004ce8 <__sseek+0x18>
 8004cf6:	46c0      	nop			; (mov r8, r8)
 8004cf8:	ffffefff 	.word	0xffffefff

08004cfc <__sclose>:
 8004cfc:	b510      	push	{r4, lr}
 8004cfe:	230e      	movs	r3, #14
 8004d00:	5ec9      	ldrsh	r1, [r1, r3]
 8004d02:	f000 f8e3 	bl	8004ecc <_close_r>
 8004d06:	bd10      	pop	{r4, pc}

08004d08 <__swbuf_r>:
 8004d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0a:	0005      	movs	r5, r0
 8004d0c:	000e      	movs	r6, r1
 8004d0e:	0014      	movs	r4, r2
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d004      	beq.n	8004d1e <__swbuf_r+0x16>
 8004d14:	6983      	ldr	r3, [r0, #24]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <__swbuf_r+0x16>
 8004d1a:	f7ff fb2d 	bl	8004378 <__sinit>
 8004d1e:	4b22      	ldr	r3, [pc, #136]	; (8004da8 <__swbuf_r+0xa0>)
 8004d20:	429c      	cmp	r4, r3
 8004d22:	d12e      	bne.n	8004d82 <__swbuf_r+0x7a>
 8004d24:	686c      	ldr	r4, [r5, #4]
 8004d26:	69a3      	ldr	r3, [r4, #24]
 8004d28:	60a3      	str	r3, [r4, #8]
 8004d2a:	89a3      	ldrh	r3, [r4, #12]
 8004d2c:	071b      	lsls	r3, r3, #28
 8004d2e:	d532      	bpl.n	8004d96 <__swbuf_r+0x8e>
 8004d30:	6923      	ldr	r3, [r4, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d02f      	beq.n	8004d96 <__swbuf_r+0x8e>
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	6922      	ldr	r2, [r4, #16]
 8004d3a:	b2f7      	uxtb	r7, r6
 8004d3c:	1a98      	subs	r0, r3, r2
 8004d3e:	6963      	ldr	r3, [r4, #20]
 8004d40:	b2f6      	uxtb	r6, r6
 8004d42:	4283      	cmp	r3, r0
 8004d44:	dc05      	bgt.n	8004d52 <__swbuf_r+0x4a>
 8004d46:	0021      	movs	r1, r4
 8004d48:	0028      	movs	r0, r5
 8004d4a:	f000 f95d 	bl	8005008 <_fflush_r>
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	d127      	bne.n	8004da2 <__swbuf_r+0x9a>
 8004d52:	68a3      	ldr	r3, [r4, #8]
 8004d54:	3001      	adds	r0, #1
 8004d56:	3b01      	subs	r3, #1
 8004d58:	60a3      	str	r3, [r4, #8]
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	6022      	str	r2, [r4, #0]
 8004d60:	701f      	strb	r7, [r3, #0]
 8004d62:	6963      	ldr	r3, [r4, #20]
 8004d64:	4283      	cmp	r3, r0
 8004d66:	d004      	beq.n	8004d72 <__swbuf_r+0x6a>
 8004d68:	89a3      	ldrh	r3, [r4, #12]
 8004d6a:	07db      	lsls	r3, r3, #31
 8004d6c:	d507      	bpl.n	8004d7e <__swbuf_r+0x76>
 8004d6e:	2e0a      	cmp	r6, #10
 8004d70:	d105      	bne.n	8004d7e <__swbuf_r+0x76>
 8004d72:	0021      	movs	r1, r4
 8004d74:	0028      	movs	r0, r5
 8004d76:	f000 f947 	bl	8005008 <_fflush_r>
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	d111      	bne.n	8004da2 <__swbuf_r+0x9a>
 8004d7e:	0030      	movs	r0, r6
 8004d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d82:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <__swbuf_r+0xa4>)
 8004d84:	429c      	cmp	r4, r3
 8004d86:	d101      	bne.n	8004d8c <__swbuf_r+0x84>
 8004d88:	68ac      	ldr	r4, [r5, #8]
 8004d8a:	e7cc      	b.n	8004d26 <__swbuf_r+0x1e>
 8004d8c:	4b08      	ldr	r3, [pc, #32]	; (8004db0 <__swbuf_r+0xa8>)
 8004d8e:	429c      	cmp	r4, r3
 8004d90:	d1c9      	bne.n	8004d26 <__swbuf_r+0x1e>
 8004d92:	68ec      	ldr	r4, [r5, #12]
 8004d94:	e7c7      	b.n	8004d26 <__swbuf_r+0x1e>
 8004d96:	0021      	movs	r1, r4
 8004d98:	0028      	movs	r0, r5
 8004d9a:	f000 f81f 	bl	8004ddc <__swsetup_r>
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	d0c9      	beq.n	8004d36 <__swbuf_r+0x2e>
 8004da2:	2601      	movs	r6, #1
 8004da4:	4276      	negs	r6, r6
 8004da6:	e7ea      	b.n	8004d7e <__swbuf_r+0x76>
 8004da8:	080053b0 	.word	0x080053b0
 8004dac:	080053d0 	.word	0x080053d0
 8004db0:	08005390 	.word	0x08005390

08004db4 <_write_r>:
 8004db4:	b570      	push	{r4, r5, r6, lr}
 8004db6:	0004      	movs	r4, r0
 8004db8:	0008      	movs	r0, r1
 8004dba:	0011      	movs	r1, r2
 8004dbc:	001a      	movs	r2, r3
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	4d05      	ldr	r5, [pc, #20]	; (8004dd8 <_write_r+0x24>)
 8004dc2:	602b      	str	r3, [r5, #0]
 8004dc4:	f7fc f863 	bl	8000e8e <_write>
 8004dc8:	1c43      	adds	r3, r0, #1
 8004dca:	d103      	bne.n	8004dd4 <_write_r+0x20>
 8004dcc:	682b      	ldr	r3, [r5, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d000      	beq.n	8004dd4 <_write_r+0x20>
 8004dd2:	6023      	str	r3, [r4, #0]
 8004dd4:	bd70      	pop	{r4, r5, r6, pc}
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	200001cc 	.word	0x200001cc

08004ddc <__swsetup_r>:
 8004ddc:	4b37      	ldr	r3, [pc, #220]	; (8004ebc <__swsetup_r+0xe0>)
 8004dde:	b570      	push	{r4, r5, r6, lr}
 8004de0:	681d      	ldr	r5, [r3, #0]
 8004de2:	0006      	movs	r6, r0
 8004de4:	000c      	movs	r4, r1
 8004de6:	2d00      	cmp	r5, #0
 8004de8:	d005      	beq.n	8004df6 <__swsetup_r+0x1a>
 8004dea:	69ab      	ldr	r3, [r5, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d102      	bne.n	8004df6 <__swsetup_r+0x1a>
 8004df0:	0028      	movs	r0, r5
 8004df2:	f7ff fac1 	bl	8004378 <__sinit>
 8004df6:	4b32      	ldr	r3, [pc, #200]	; (8004ec0 <__swsetup_r+0xe4>)
 8004df8:	429c      	cmp	r4, r3
 8004dfa:	d10f      	bne.n	8004e1c <__swsetup_r+0x40>
 8004dfc:	686c      	ldr	r4, [r5, #4]
 8004dfe:	230c      	movs	r3, #12
 8004e00:	5ee2      	ldrsh	r2, [r4, r3]
 8004e02:	b293      	uxth	r3, r2
 8004e04:	0711      	lsls	r1, r2, #28
 8004e06:	d42d      	bmi.n	8004e64 <__swsetup_r+0x88>
 8004e08:	06d9      	lsls	r1, r3, #27
 8004e0a:	d411      	bmi.n	8004e30 <__swsetup_r+0x54>
 8004e0c:	2309      	movs	r3, #9
 8004e0e:	2001      	movs	r0, #1
 8004e10:	6033      	str	r3, [r6, #0]
 8004e12:	3337      	adds	r3, #55	; 0x37
 8004e14:	4313      	orrs	r3, r2
 8004e16:	81a3      	strh	r3, [r4, #12]
 8004e18:	4240      	negs	r0, r0
 8004e1a:	bd70      	pop	{r4, r5, r6, pc}
 8004e1c:	4b29      	ldr	r3, [pc, #164]	; (8004ec4 <__swsetup_r+0xe8>)
 8004e1e:	429c      	cmp	r4, r3
 8004e20:	d101      	bne.n	8004e26 <__swsetup_r+0x4a>
 8004e22:	68ac      	ldr	r4, [r5, #8]
 8004e24:	e7eb      	b.n	8004dfe <__swsetup_r+0x22>
 8004e26:	4b28      	ldr	r3, [pc, #160]	; (8004ec8 <__swsetup_r+0xec>)
 8004e28:	429c      	cmp	r4, r3
 8004e2a:	d1e8      	bne.n	8004dfe <__swsetup_r+0x22>
 8004e2c:	68ec      	ldr	r4, [r5, #12]
 8004e2e:	e7e6      	b.n	8004dfe <__swsetup_r+0x22>
 8004e30:	075b      	lsls	r3, r3, #29
 8004e32:	d513      	bpl.n	8004e5c <__swsetup_r+0x80>
 8004e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e36:	2900      	cmp	r1, #0
 8004e38:	d008      	beq.n	8004e4c <__swsetup_r+0x70>
 8004e3a:	0023      	movs	r3, r4
 8004e3c:	3344      	adds	r3, #68	; 0x44
 8004e3e:	4299      	cmp	r1, r3
 8004e40:	d002      	beq.n	8004e48 <__swsetup_r+0x6c>
 8004e42:	0030      	movs	r0, r6
 8004e44:	f000 f9bc 	bl	80051c0 <_free_r>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	6363      	str	r3, [r4, #52]	; 0x34
 8004e4c:	2224      	movs	r2, #36	; 0x24
 8004e4e:	89a3      	ldrh	r3, [r4, #12]
 8004e50:	4393      	bics	r3, r2
 8004e52:	81a3      	strh	r3, [r4, #12]
 8004e54:	2300      	movs	r3, #0
 8004e56:	6063      	str	r3, [r4, #4]
 8004e58:	6923      	ldr	r3, [r4, #16]
 8004e5a:	6023      	str	r3, [r4, #0]
 8004e5c:	2308      	movs	r3, #8
 8004e5e:	89a2      	ldrh	r2, [r4, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	81a3      	strh	r3, [r4, #12]
 8004e64:	6923      	ldr	r3, [r4, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10b      	bne.n	8004e82 <__swsetup_r+0xa6>
 8004e6a:	21a0      	movs	r1, #160	; 0xa0
 8004e6c:	2280      	movs	r2, #128	; 0x80
 8004e6e:	89a3      	ldrh	r3, [r4, #12]
 8004e70:	0089      	lsls	r1, r1, #2
 8004e72:	0092      	lsls	r2, r2, #2
 8004e74:	400b      	ands	r3, r1
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d003      	beq.n	8004e82 <__swsetup_r+0xa6>
 8004e7a:	0021      	movs	r1, r4
 8004e7c:	0030      	movs	r0, r6
 8004e7e:	f000 f93f 	bl	8005100 <__smakebuf_r>
 8004e82:	220c      	movs	r2, #12
 8004e84:	5ea3      	ldrsh	r3, [r4, r2]
 8004e86:	2001      	movs	r0, #1
 8004e88:	001a      	movs	r2, r3
 8004e8a:	b299      	uxth	r1, r3
 8004e8c:	4002      	ands	r2, r0
 8004e8e:	4203      	tst	r3, r0
 8004e90:	d00f      	beq.n	8004eb2 <__swsetup_r+0xd6>
 8004e92:	2200      	movs	r2, #0
 8004e94:	60a2      	str	r2, [r4, #8]
 8004e96:	6962      	ldr	r2, [r4, #20]
 8004e98:	4252      	negs	r2, r2
 8004e9a:	61a2      	str	r2, [r4, #24]
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	6922      	ldr	r2, [r4, #16]
 8004ea0:	4282      	cmp	r2, r0
 8004ea2:	d1ba      	bne.n	8004e1a <__swsetup_r+0x3e>
 8004ea4:	060a      	lsls	r2, r1, #24
 8004ea6:	d5b8      	bpl.n	8004e1a <__swsetup_r+0x3e>
 8004ea8:	2240      	movs	r2, #64	; 0x40
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	81a3      	strh	r3, [r4, #12]
 8004eae:	3801      	subs	r0, #1
 8004eb0:	e7b3      	b.n	8004e1a <__swsetup_r+0x3e>
 8004eb2:	0788      	lsls	r0, r1, #30
 8004eb4:	d400      	bmi.n	8004eb8 <__swsetup_r+0xdc>
 8004eb6:	6962      	ldr	r2, [r4, #20]
 8004eb8:	60a2      	str	r2, [r4, #8]
 8004eba:	e7ef      	b.n	8004e9c <__swsetup_r+0xc0>
 8004ebc:	20000024 	.word	0x20000024
 8004ec0:	080053b0 	.word	0x080053b0
 8004ec4:	080053d0 	.word	0x080053d0
 8004ec8:	08005390 	.word	0x08005390

08004ecc <_close_r>:
 8004ecc:	2300      	movs	r3, #0
 8004ece:	b570      	push	{r4, r5, r6, lr}
 8004ed0:	4d06      	ldr	r5, [pc, #24]	; (8004eec <_close_r+0x20>)
 8004ed2:	0004      	movs	r4, r0
 8004ed4:	0008      	movs	r0, r1
 8004ed6:	602b      	str	r3, [r5, #0]
 8004ed8:	f7fb fff5 	bl	8000ec6 <_close>
 8004edc:	1c43      	adds	r3, r0, #1
 8004ede:	d103      	bne.n	8004ee8 <_close_r+0x1c>
 8004ee0:	682b      	ldr	r3, [r5, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d000      	beq.n	8004ee8 <_close_r+0x1c>
 8004ee6:	6023      	str	r3, [r4, #0]
 8004ee8:	bd70      	pop	{r4, r5, r6, pc}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	200001cc 	.word	0x200001cc

08004ef0 <__sflush_r>:
 8004ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ef2:	898b      	ldrh	r3, [r1, #12]
 8004ef4:	0005      	movs	r5, r0
 8004ef6:	000c      	movs	r4, r1
 8004ef8:	071a      	lsls	r2, r3, #28
 8004efa:	d45f      	bmi.n	8004fbc <__sflush_r+0xcc>
 8004efc:	684a      	ldr	r2, [r1, #4]
 8004efe:	2a00      	cmp	r2, #0
 8004f00:	dc04      	bgt.n	8004f0c <__sflush_r+0x1c>
 8004f02:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004f04:	2a00      	cmp	r2, #0
 8004f06:	dc01      	bgt.n	8004f0c <__sflush_r+0x1c>
 8004f08:	2000      	movs	r0, #0
 8004f0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f0c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004f0e:	2f00      	cmp	r7, #0
 8004f10:	d0fa      	beq.n	8004f08 <__sflush_r+0x18>
 8004f12:	2200      	movs	r2, #0
 8004f14:	2180      	movs	r1, #128	; 0x80
 8004f16:	682e      	ldr	r6, [r5, #0]
 8004f18:	602a      	str	r2, [r5, #0]
 8004f1a:	001a      	movs	r2, r3
 8004f1c:	0149      	lsls	r1, r1, #5
 8004f1e:	400a      	ands	r2, r1
 8004f20:	420b      	tst	r3, r1
 8004f22:	d034      	beq.n	8004f8e <__sflush_r+0x9e>
 8004f24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f26:	89a3      	ldrh	r3, [r4, #12]
 8004f28:	075b      	lsls	r3, r3, #29
 8004f2a:	d506      	bpl.n	8004f3a <__sflush_r+0x4a>
 8004f2c:	6863      	ldr	r3, [r4, #4]
 8004f2e:	1ac0      	subs	r0, r0, r3
 8004f30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <__sflush_r+0x4a>
 8004f36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f38:	1ac0      	subs	r0, r0, r3
 8004f3a:	0002      	movs	r2, r0
 8004f3c:	6a21      	ldr	r1, [r4, #32]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	0028      	movs	r0, r5
 8004f42:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004f44:	47b8      	blx	r7
 8004f46:	89a1      	ldrh	r1, [r4, #12]
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d106      	bne.n	8004f5a <__sflush_r+0x6a>
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	2b1d      	cmp	r3, #29
 8004f50:	d831      	bhi.n	8004fb6 <__sflush_r+0xc6>
 8004f52:	4a2c      	ldr	r2, [pc, #176]	; (8005004 <__sflush_r+0x114>)
 8004f54:	40da      	lsrs	r2, r3
 8004f56:	07d3      	lsls	r3, r2, #31
 8004f58:	d52d      	bpl.n	8004fb6 <__sflush_r+0xc6>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	6063      	str	r3, [r4, #4]
 8004f5e:	6923      	ldr	r3, [r4, #16]
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	04cb      	lsls	r3, r1, #19
 8004f64:	d505      	bpl.n	8004f72 <__sflush_r+0x82>
 8004f66:	1c43      	adds	r3, r0, #1
 8004f68:	d102      	bne.n	8004f70 <__sflush_r+0x80>
 8004f6a:	682b      	ldr	r3, [r5, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d100      	bne.n	8004f72 <__sflush_r+0x82>
 8004f70:	6560      	str	r0, [r4, #84]	; 0x54
 8004f72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f74:	602e      	str	r6, [r5, #0]
 8004f76:	2900      	cmp	r1, #0
 8004f78:	d0c6      	beq.n	8004f08 <__sflush_r+0x18>
 8004f7a:	0023      	movs	r3, r4
 8004f7c:	3344      	adds	r3, #68	; 0x44
 8004f7e:	4299      	cmp	r1, r3
 8004f80:	d002      	beq.n	8004f88 <__sflush_r+0x98>
 8004f82:	0028      	movs	r0, r5
 8004f84:	f000 f91c 	bl	80051c0 <_free_r>
 8004f88:	2000      	movs	r0, #0
 8004f8a:	6360      	str	r0, [r4, #52]	; 0x34
 8004f8c:	e7bd      	b.n	8004f0a <__sflush_r+0x1a>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	0028      	movs	r0, r5
 8004f92:	6a21      	ldr	r1, [r4, #32]
 8004f94:	47b8      	blx	r7
 8004f96:	1c43      	adds	r3, r0, #1
 8004f98:	d1c5      	bne.n	8004f26 <__sflush_r+0x36>
 8004f9a:	682b      	ldr	r3, [r5, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0c2      	beq.n	8004f26 <__sflush_r+0x36>
 8004fa0:	2b1d      	cmp	r3, #29
 8004fa2:	d001      	beq.n	8004fa8 <__sflush_r+0xb8>
 8004fa4:	2b16      	cmp	r3, #22
 8004fa6:	d101      	bne.n	8004fac <__sflush_r+0xbc>
 8004fa8:	602e      	str	r6, [r5, #0]
 8004faa:	e7ad      	b.n	8004f08 <__sflush_r+0x18>
 8004fac:	2340      	movs	r3, #64	; 0x40
 8004fae:	89a2      	ldrh	r2, [r4, #12]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	81a3      	strh	r3, [r4, #12]
 8004fb4:	e7a9      	b.n	8004f0a <__sflush_r+0x1a>
 8004fb6:	2340      	movs	r3, #64	; 0x40
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	e7fa      	b.n	8004fb2 <__sflush_r+0xc2>
 8004fbc:	690f      	ldr	r7, [r1, #16]
 8004fbe:	2f00      	cmp	r7, #0
 8004fc0:	d0a2      	beq.n	8004f08 <__sflush_r+0x18>
 8004fc2:	680a      	ldr	r2, [r1, #0]
 8004fc4:	600f      	str	r7, [r1, #0]
 8004fc6:	1bd2      	subs	r2, r2, r7
 8004fc8:	9201      	str	r2, [sp, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	079b      	lsls	r3, r3, #30
 8004fce:	d100      	bne.n	8004fd2 <__sflush_r+0xe2>
 8004fd0:	694a      	ldr	r2, [r1, #20]
 8004fd2:	60a2      	str	r2, [r4, #8]
 8004fd4:	9b01      	ldr	r3, [sp, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	dc00      	bgt.n	8004fdc <__sflush_r+0xec>
 8004fda:	e795      	b.n	8004f08 <__sflush_r+0x18>
 8004fdc:	003a      	movs	r2, r7
 8004fde:	0028      	movs	r0, r5
 8004fe0:	9b01      	ldr	r3, [sp, #4]
 8004fe2:	6a21      	ldr	r1, [r4, #32]
 8004fe4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004fe6:	47b0      	blx	r6
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	dc06      	bgt.n	8004ffa <__sflush_r+0x10a>
 8004fec:	2340      	movs	r3, #64	; 0x40
 8004fee:	2001      	movs	r0, #1
 8004ff0:	89a2      	ldrh	r2, [r4, #12]
 8004ff2:	4240      	negs	r0, r0
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	81a3      	strh	r3, [r4, #12]
 8004ff8:	e787      	b.n	8004f0a <__sflush_r+0x1a>
 8004ffa:	9b01      	ldr	r3, [sp, #4]
 8004ffc:	183f      	adds	r7, r7, r0
 8004ffe:	1a1b      	subs	r3, r3, r0
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	e7e7      	b.n	8004fd4 <__sflush_r+0xe4>
 8005004:	20400001 	.word	0x20400001

08005008 <_fflush_r>:
 8005008:	690b      	ldr	r3, [r1, #16]
 800500a:	b570      	push	{r4, r5, r6, lr}
 800500c:	0005      	movs	r5, r0
 800500e:	000c      	movs	r4, r1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d102      	bne.n	800501a <_fflush_r+0x12>
 8005014:	2500      	movs	r5, #0
 8005016:	0028      	movs	r0, r5
 8005018:	bd70      	pop	{r4, r5, r6, pc}
 800501a:	2800      	cmp	r0, #0
 800501c:	d004      	beq.n	8005028 <_fflush_r+0x20>
 800501e:	6983      	ldr	r3, [r0, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <_fflush_r+0x20>
 8005024:	f7ff f9a8 	bl	8004378 <__sinit>
 8005028:	4b14      	ldr	r3, [pc, #80]	; (800507c <_fflush_r+0x74>)
 800502a:	429c      	cmp	r4, r3
 800502c:	d11b      	bne.n	8005066 <_fflush_r+0x5e>
 800502e:	686c      	ldr	r4, [r5, #4]
 8005030:	220c      	movs	r2, #12
 8005032:	5ea3      	ldrsh	r3, [r4, r2]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0ed      	beq.n	8005014 <_fflush_r+0xc>
 8005038:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800503a:	07d2      	lsls	r2, r2, #31
 800503c:	d404      	bmi.n	8005048 <_fflush_r+0x40>
 800503e:	059b      	lsls	r3, r3, #22
 8005040:	d402      	bmi.n	8005048 <_fflush_r+0x40>
 8005042:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005044:	f7ff fa39 	bl	80044ba <__retarget_lock_acquire_recursive>
 8005048:	0028      	movs	r0, r5
 800504a:	0021      	movs	r1, r4
 800504c:	f7ff ff50 	bl	8004ef0 <__sflush_r>
 8005050:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005052:	0005      	movs	r5, r0
 8005054:	07db      	lsls	r3, r3, #31
 8005056:	d4de      	bmi.n	8005016 <_fflush_r+0xe>
 8005058:	89a3      	ldrh	r3, [r4, #12]
 800505a:	059b      	lsls	r3, r3, #22
 800505c:	d4db      	bmi.n	8005016 <_fflush_r+0xe>
 800505e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005060:	f7ff fa2c 	bl	80044bc <__retarget_lock_release_recursive>
 8005064:	e7d7      	b.n	8005016 <_fflush_r+0xe>
 8005066:	4b06      	ldr	r3, [pc, #24]	; (8005080 <_fflush_r+0x78>)
 8005068:	429c      	cmp	r4, r3
 800506a:	d101      	bne.n	8005070 <_fflush_r+0x68>
 800506c:	68ac      	ldr	r4, [r5, #8]
 800506e:	e7df      	b.n	8005030 <_fflush_r+0x28>
 8005070:	4b04      	ldr	r3, [pc, #16]	; (8005084 <_fflush_r+0x7c>)
 8005072:	429c      	cmp	r4, r3
 8005074:	d1dc      	bne.n	8005030 <_fflush_r+0x28>
 8005076:	68ec      	ldr	r4, [r5, #12]
 8005078:	e7da      	b.n	8005030 <_fflush_r+0x28>
 800507a:	46c0      	nop			; (mov r8, r8)
 800507c:	080053b0 	.word	0x080053b0
 8005080:	080053d0 	.word	0x080053d0
 8005084:	08005390 	.word	0x08005390

08005088 <_lseek_r>:
 8005088:	b570      	push	{r4, r5, r6, lr}
 800508a:	0004      	movs	r4, r0
 800508c:	0008      	movs	r0, r1
 800508e:	0011      	movs	r1, r2
 8005090:	001a      	movs	r2, r3
 8005092:	2300      	movs	r3, #0
 8005094:	4d05      	ldr	r5, [pc, #20]	; (80050ac <_lseek_r+0x24>)
 8005096:	602b      	str	r3, [r5, #0]
 8005098:	f7fb ff36 	bl	8000f08 <_lseek>
 800509c:	1c43      	adds	r3, r0, #1
 800509e:	d103      	bne.n	80050a8 <_lseek_r+0x20>
 80050a0:	682b      	ldr	r3, [r5, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d000      	beq.n	80050a8 <_lseek_r+0x20>
 80050a6:	6023      	str	r3, [r4, #0]
 80050a8:	bd70      	pop	{r4, r5, r6, pc}
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	200001cc 	.word	0x200001cc

080050b0 <__swhatbuf_r>:
 80050b0:	b570      	push	{r4, r5, r6, lr}
 80050b2:	000e      	movs	r6, r1
 80050b4:	001d      	movs	r5, r3
 80050b6:	230e      	movs	r3, #14
 80050b8:	5ec9      	ldrsh	r1, [r1, r3]
 80050ba:	0014      	movs	r4, r2
 80050bc:	b096      	sub	sp, #88	; 0x58
 80050be:	2900      	cmp	r1, #0
 80050c0:	da08      	bge.n	80050d4 <__swhatbuf_r+0x24>
 80050c2:	220c      	movs	r2, #12
 80050c4:	5eb3      	ldrsh	r3, [r6, r2]
 80050c6:	2200      	movs	r2, #0
 80050c8:	602a      	str	r2, [r5, #0]
 80050ca:	061b      	lsls	r3, r3, #24
 80050cc:	d411      	bmi.n	80050f2 <__swhatbuf_r+0x42>
 80050ce:	2380      	movs	r3, #128	; 0x80
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	e00f      	b.n	80050f4 <__swhatbuf_r+0x44>
 80050d4:	466a      	mov	r2, sp
 80050d6:	f000 f8d1 	bl	800527c <_fstat_r>
 80050da:	2800      	cmp	r0, #0
 80050dc:	dbf1      	blt.n	80050c2 <__swhatbuf_r+0x12>
 80050de:	23f0      	movs	r3, #240	; 0xf0
 80050e0:	9901      	ldr	r1, [sp, #4]
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	4019      	ands	r1, r3
 80050e6:	4b05      	ldr	r3, [pc, #20]	; (80050fc <__swhatbuf_r+0x4c>)
 80050e8:	18c9      	adds	r1, r1, r3
 80050ea:	424b      	negs	r3, r1
 80050ec:	4159      	adcs	r1, r3
 80050ee:	6029      	str	r1, [r5, #0]
 80050f0:	e7ed      	b.n	80050ce <__swhatbuf_r+0x1e>
 80050f2:	2340      	movs	r3, #64	; 0x40
 80050f4:	2000      	movs	r0, #0
 80050f6:	6023      	str	r3, [r4, #0]
 80050f8:	b016      	add	sp, #88	; 0x58
 80050fa:	bd70      	pop	{r4, r5, r6, pc}
 80050fc:	ffffe000 	.word	0xffffe000

08005100 <__smakebuf_r>:
 8005100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005102:	2602      	movs	r6, #2
 8005104:	898b      	ldrh	r3, [r1, #12]
 8005106:	0005      	movs	r5, r0
 8005108:	000c      	movs	r4, r1
 800510a:	4233      	tst	r3, r6
 800510c:	d006      	beq.n	800511c <__smakebuf_r+0x1c>
 800510e:	0023      	movs	r3, r4
 8005110:	3347      	adds	r3, #71	; 0x47
 8005112:	6023      	str	r3, [r4, #0]
 8005114:	6123      	str	r3, [r4, #16]
 8005116:	2301      	movs	r3, #1
 8005118:	6163      	str	r3, [r4, #20]
 800511a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800511c:	466a      	mov	r2, sp
 800511e:	ab01      	add	r3, sp, #4
 8005120:	f7ff ffc6 	bl	80050b0 <__swhatbuf_r>
 8005124:	9900      	ldr	r1, [sp, #0]
 8005126:	0007      	movs	r7, r0
 8005128:	0028      	movs	r0, r5
 800512a:	f7ff f9eb 	bl	8004504 <_malloc_r>
 800512e:	2800      	cmp	r0, #0
 8005130:	d108      	bne.n	8005144 <__smakebuf_r+0x44>
 8005132:	220c      	movs	r2, #12
 8005134:	5ea3      	ldrsh	r3, [r4, r2]
 8005136:	059a      	lsls	r2, r3, #22
 8005138:	d4ef      	bmi.n	800511a <__smakebuf_r+0x1a>
 800513a:	2203      	movs	r2, #3
 800513c:	4393      	bics	r3, r2
 800513e:	431e      	orrs	r6, r3
 8005140:	81a6      	strh	r6, [r4, #12]
 8005142:	e7e4      	b.n	800510e <__smakebuf_r+0xe>
 8005144:	4b0f      	ldr	r3, [pc, #60]	; (8005184 <__smakebuf_r+0x84>)
 8005146:	62ab      	str	r3, [r5, #40]	; 0x28
 8005148:	2380      	movs	r3, #128	; 0x80
 800514a:	89a2      	ldrh	r2, [r4, #12]
 800514c:	6020      	str	r0, [r4, #0]
 800514e:	4313      	orrs	r3, r2
 8005150:	81a3      	strh	r3, [r4, #12]
 8005152:	9b00      	ldr	r3, [sp, #0]
 8005154:	6120      	str	r0, [r4, #16]
 8005156:	6163      	str	r3, [r4, #20]
 8005158:	9b01      	ldr	r3, [sp, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00d      	beq.n	800517a <__smakebuf_r+0x7a>
 800515e:	0028      	movs	r0, r5
 8005160:	230e      	movs	r3, #14
 8005162:	5ee1      	ldrsh	r1, [r4, r3]
 8005164:	f000 f89c 	bl	80052a0 <_isatty_r>
 8005168:	2800      	cmp	r0, #0
 800516a:	d006      	beq.n	800517a <__smakebuf_r+0x7a>
 800516c:	2203      	movs	r2, #3
 800516e:	89a3      	ldrh	r3, [r4, #12]
 8005170:	4393      	bics	r3, r2
 8005172:	001a      	movs	r2, r3
 8005174:	2301      	movs	r3, #1
 8005176:	4313      	orrs	r3, r2
 8005178:	81a3      	strh	r3, [r4, #12]
 800517a:	89a0      	ldrh	r0, [r4, #12]
 800517c:	4307      	orrs	r7, r0
 800517e:	81a7      	strh	r7, [r4, #12]
 8005180:	e7cb      	b.n	800511a <__smakebuf_r+0x1a>
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	080042fd 	.word	0x080042fd

08005188 <memchr>:
 8005188:	b2c9      	uxtb	r1, r1
 800518a:	1882      	adds	r2, r0, r2
 800518c:	4290      	cmp	r0, r2
 800518e:	d101      	bne.n	8005194 <memchr+0xc>
 8005190:	2000      	movs	r0, #0
 8005192:	4770      	bx	lr
 8005194:	7803      	ldrb	r3, [r0, #0]
 8005196:	428b      	cmp	r3, r1
 8005198:	d0fb      	beq.n	8005192 <memchr+0xa>
 800519a:	3001      	adds	r0, #1
 800519c:	e7f6      	b.n	800518c <memchr+0x4>
	...

080051a0 <__malloc_lock>:
 80051a0:	b510      	push	{r4, lr}
 80051a2:	4802      	ldr	r0, [pc, #8]	; (80051ac <__malloc_lock+0xc>)
 80051a4:	f7ff f989 	bl	80044ba <__retarget_lock_acquire_recursive>
 80051a8:	bd10      	pop	{r4, pc}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	200001c0 	.word	0x200001c0

080051b0 <__malloc_unlock>:
 80051b0:	b510      	push	{r4, lr}
 80051b2:	4802      	ldr	r0, [pc, #8]	; (80051bc <__malloc_unlock+0xc>)
 80051b4:	f7ff f982 	bl	80044bc <__retarget_lock_release_recursive>
 80051b8:	bd10      	pop	{r4, pc}
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	200001c0 	.word	0x200001c0

080051c0 <_free_r>:
 80051c0:	b570      	push	{r4, r5, r6, lr}
 80051c2:	0005      	movs	r5, r0
 80051c4:	2900      	cmp	r1, #0
 80051c6:	d010      	beq.n	80051ea <_free_r+0x2a>
 80051c8:	1f0c      	subs	r4, r1, #4
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	da00      	bge.n	80051d2 <_free_r+0x12>
 80051d0:	18e4      	adds	r4, r4, r3
 80051d2:	0028      	movs	r0, r5
 80051d4:	f7ff ffe4 	bl	80051a0 <__malloc_lock>
 80051d8:	4a1d      	ldr	r2, [pc, #116]	; (8005250 <_free_r+0x90>)
 80051da:	6813      	ldr	r3, [r2, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d105      	bne.n	80051ec <_free_r+0x2c>
 80051e0:	6063      	str	r3, [r4, #4]
 80051e2:	6014      	str	r4, [r2, #0]
 80051e4:	0028      	movs	r0, r5
 80051e6:	f7ff ffe3 	bl	80051b0 <__malloc_unlock>
 80051ea:	bd70      	pop	{r4, r5, r6, pc}
 80051ec:	42a3      	cmp	r3, r4
 80051ee:	d908      	bls.n	8005202 <_free_r+0x42>
 80051f0:	6821      	ldr	r1, [r4, #0]
 80051f2:	1860      	adds	r0, r4, r1
 80051f4:	4283      	cmp	r3, r0
 80051f6:	d1f3      	bne.n	80051e0 <_free_r+0x20>
 80051f8:	6818      	ldr	r0, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	1841      	adds	r1, r0, r1
 80051fe:	6021      	str	r1, [r4, #0]
 8005200:	e7ee      	b.n	80051e0 <_free_r+0x20>
 8005202:	001a      	movs	r2, r3
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <_free_r+0x4e>
 800520a:	42a3      	cmp	r3, r4
 800520c:	d9f9      	bls.n	8005202 <_free_r+0x42>
 800520e:	6811      	ldr	r1, [r2, #0]
 8005210:	1850      	adds	r0, r2, r1
 8005212:	42a0      	cmp	r0, r4
 8005214:	d10b      	bne.n	800522e <_free_r+0x6e>
 8005216:	6820      	ldr	r0, [r4, #0]
 8005218:	1809      	adds	r1, r1, r0
 800521a:	1850      	adds	r0, r2, r1
 800521c:	6011      	str	r1, [r2, #0]
 800521e:	4283      	cmp	r3, r0
 8005220:	d1e0      	bne.n	80051e4 <_free_r+0x24>
 8005222:	6818      	ldr	r0, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	1841      	adds	r1, r0, r1
 8005228:	6011      	str	r1, [r2, #0]
 800522a:	6053      	str	r3, [r2, #4]
 800522c:	e7da      	b.n	80051e4 <_free_r+0x24>
 800522e:	42a0      	cmp	r0, r4
 8005230:	d902      	bls.n	8005238 <_free_r+0x78>
 8005232:	230c      	movs	r3, #12
 8005234:	602b      	str	r3, [r5, #0]
 8005236:	e7d5      	b.n	80051e4 <_free_r+0x24>
 8005238:	6821      	ldr	r1, [r4, #0]
 800523a:	1860      	adds	r0, r4, r1
 800523c:	4283      	cmp	r3, r0
 800523e:	d103      	bne.n	8005248 <_free_r+0x88>
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	1841      	adds	r1, r0, r1
 8005246:	6021      	str	r1, [r4, #0]
 8005248:	6063      	str	r3, [r4, #4]
 800524a:	6054      	str	r4, [r2, #4]
 800524c:	e7ca      	b.n	80051e4 <_free_r+0x24>
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	200001c4 	.word	0x200001c4

08005254 <_read_r>:
 8005254:	b570      	push	{r4, r5, r6, lr}
 8005256:	0004      	movs	r4, r0
 8005258:	0008      	movs	r0, r1
 800525a:	0011      	movs	r1, r2
 800525c:	001a      	movs	r2, r3
 800525e:	2300      	movs	r3, #0
 8005260:	4d05      	ldr	r5, [pc, #20]	; (8005278 <_read_r+0x24>)
 8005262:	602b      	str	r3, [r5, #0]
 8005264:	f7fb fdf6 	bl	8000e54 <_read>
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d103      	bne.n	8005274 <_read_r+0x20>
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d000      	beq.n	8005274 <_read_r+0x20>
 8005272:	6023      	str	r3, [r4, #0]
 8005274:	bd70      	pop	{r4, r5, r6, pc}
 8005276:	46c0      	nop			; (mov r8, r8)
 8005278:	200001cc 	.word	0x200001cc

0800527c <_fstat_r>:
 800527c:	2300      	movs	r3, #0
 800527e:	b570      	push	{r4, r5, r6, lr}
 8005280:	4d06      	ldr	r5, [pc, #24]	; (800529c <_fstat_r+0x20>)
 8005282:	0004      	movs	r4, r0
 8005284:	0008      	movs	r0, r1
 8005286:	0011      	movs	r1, r2
 8005288:	602b      	str	r3, [r5, #0]
 800528a:	f7fb fe26 	bl	8000eda <_fstat>
 800528e:	1c43      	adds	r3, r0, #1
 8005290:	d103      	bne.n	800529a <_fstat_r+0x1e>
 8005292:	682b      	ldr	r3, [r5, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d000      	beq.n	800529a <_fstat_r+0x1e>
 8005298:	6023      	str	r3, [r4, #0]
 800529a:	bd70      	pop	{r4, r5, r6, pc}
 800529c:	200001cc 	.word	0x200001cc

080052a0 <_isatty_r>:
 80052a0:	2300      	movs	r3, #0
 80052a2:	b570      	push	{r4, r5, r6, lr}
 80052a4:	4d06      	ldr	r5, [pc, #24]	; (80052c0 <_isatty_r+0x20>)
 80052a6:	0004      	movs	r4, r0
 80052a8:	0008      	movs	r0, r1
 80052aa:	602b      	str	r3, [r5, #0]
 80052ac:	f7fb fe23 	bl	8000ef6 <_isatty>
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	d103      	bne.n	80052bc <_isatty_r+0x1c>
 80052b4:	682b      	ldr	r3, [r5, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d000      	beq.n	80052bc <_isatty_r+0x1c>
 80052ba:	6023      	str	r3, [r4, #0]
 80052bc:	bd70      	pop	{r4, r5, r6, pc}
 80052be:	46c0      	nop			; (mov r8, r8)
 80052c0:	200001cc 	.word	0x200001cc

080052c4 <_init>:
 80052c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ca:	bc08      	pop	{r3}
 80052cc:	469e      	mov	lr, r3
 80052ce:	4770      	bx	lr

080052d0 <_fini>:
 80052d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d6:	bc08      	pop	{r3}
 80052d8:	469e      	mov	lr, r3
 80052da:	4770      	bx	lr
