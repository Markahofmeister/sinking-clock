
sinking-clock_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fe8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080040a4  080040a4  000050a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004188  08004188  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004188  08004188  00005188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004190  08004190  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004190  08004190  00005190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004194  08004194  00005194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004198  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  080041a4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  080041a4  00006138  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112a5  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a3  00000000  00000000  000172d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00019580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c5b  00000000  00000000  0001a528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173ae  00000000  00000000  0001b183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012703  00000000  00000000  00032531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098da6  00000000  00000000  00044c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd9da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000394c  00000000  00000000  000dda20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e136c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800408c 	.word	0x0800408c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800408c 	.word	0x0800408c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	b08f      	sub	sp, #60	@ 0x3c
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044e:	f000 fcdf 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000452:	f000 f8d3 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000456:	f000 faa9 	bl	80009ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800045a:	f000 fa73 	bl	8000944 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800045e:	f000 f919 	bl	8000694 <MX_RTC_Init>
  MX_TIM1_Init();
 8000462:	f000 f9c3 	bl	80007ec <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  GPIO_PinState GPIOPinSet[2] = {GPIO_PIN_RESET, GPIO_PIN_SET};
 8000466:	2418      	movs	r4, #24
 8000468:	193b      	adds	r3, r7, r4
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
 800046e:	193b      	adds	r3, r7, r4
 8000470:	2201      	movs	r2, #1
 8000472:	705a      	strb	r2, [r3, #1]

	  uint16_t shiftDataPin = GPIO_PIN_15;			// Port A
 8000474:	2326      	movs	r3, #38	@ 0x26
 8000476:	18fb      	adds	r3, r7, r3
 8000478:	4a5b      	ldr	r2, [pc, #364]	@ (80005e8 <main+0x1a0>)
 800047a:	801a      	strh	r2, [r3, #0]
	  uint16_t shiftDataClockPin = GPIO_PIN_5;		// Port B
 800047c:	2324      	movs	r3, #36	@ 0x24
 800047e:	18fb      	adds	r3, r7, r3
 8000480:	2220      	movs	r2, #32
 8000482:	801a      	strh	r2, [r3, #0]
	  uint16_t shiftStoreClockPin = GPIO_PIN_4;		// Port B
 8000484:	2522      	movs	r5, #34	@ 0x22
 8000486:	197b      	adds	r3, r7, r5
 8000488:	2210      	movs	r2, #16
 800048a:	801a      	strh	r2, [r3, #0]
	  uint16_t shiftOutputEnablePin = GPIO_PIN_3;		// Port B
 800048c:	2320      	movs	r3, #32
 800048e:	18fb      	adds	r3, r7, r3
 8000490:	2208      	movs	r2, #8
 8000492:	801a      	strh	r2, [r3, #0]
	  uint16_t shiftMCLRPin = GPIO_PIN_6;				// Port B
 8000494:	261e      	movs	r6, #30
 8000496:	19bb      	adds	r3, r7, r6
 8000498:	2240      	movs	r2, #64	@ 0x40
 800049a:	801a      	strh	r2, [r3, #0]

	  const uint8_t dispDigits[10] = {0b01111110, 	// 0
 800049c:	220c      	movs	r2, #12
 800049e:	18bb      	adds	r3, r7, r2
 80004a0:	4a52      	ldr	r2, [pc, #328]	@ (80005ec <main+0x1a4>)
 80004a2:	ca03      	ldmia	r2!, {r0, r1}
 80004a4:	c303      	stmia	r3!, {r0, r1}
 80004a6:	8812      	ldrh	r2, [r2, #0]
 80004a8:	801a      	strh	r2, [r3, #0]
									0b01110000,		// 7
									0b01111111,		// 8
									0b01111011};	// 9

	// Clear any existing shift register data
	HAL_GPIO_WritePin(GPIOB, shiftMCLRPin, GPIOPinSet[0]);
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	781a      	ldrb	r2, [r3, #0]
 80004ae:	19bb      	adds	r3, r7, r6
 80004b0:	881b      	ldrh	r3, [r3, #0]
 80004b2:	484f      	ldr	r0, [pc, #316]	@ (80005f0 <main+0x1a8>)
 80004b4:	0019      	movs	r1, r3
 80004b6:	f000 ff97 	bl	80013e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, shiftMCLRPin, GPIOPinSet[1]);
 80004ba:	193b      	adds	r3, r7, r4
 80004bc:	785a      	ldrb	r2, [r3, #1]
 80004be:	19bb      	adds	r3, r7, r6
 80004c0:	881b      	ldrh	r3, [r3, #0]
 80004c2:	484b      	ldr	r0, [pc, #300]	@ (80005f0 <main+0x1a8>)
 80004c4:	0019      	movs	r1, r3
 80004c6:	f000 ff8f 	bl	80013e8 <HAL_GPIO_WritePin>

	// Store cleared data
	HAL_GPIO_WritePin(GPIOB, shiftStoreClockPin, GPIOPinSet[1]);
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	785a      	ldrb	r2, [r3, #1]
 80004ce:	197b      	adds	r3, r7, r5
 80004d0:	881b      	ldrh	r3, [r3, #0]
 80004d2:	4847      	ldr	r0, [pc, #284]	@ (80005f0 <main+0x1a8>)
 80004d4:	0019      	movs	r1, r3
 80004d6:	f000 ff87 	bl	80013e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, shiftStoreClockPin, GPIOPinSet[0]);
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	781a      	ldrb	r2, [r3, #0]
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	881b      	ldrh	r3, [r3, #0]
 80004e2:	4843      	ldr	r0, [pc, #268]	@ (80005f0 <main+0x1a8>)
 80004e4:	0019      	movs	r1, r3
 80004e6:	f000 ff7f 	bl	80013e8 <HAL_GPIO_WritePin>

  // Enable output by pulling enable pin low
   HAL_GPIO_WritePin(GPIOB, shiftOutputEnablePin, GPIOPinSet[0]);
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	781a      	ldrb	r2, [r3, #0]
 80004ee:	2320      	movs	r3, #32
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	483e      	ldr	r0, [pc, #248]	@ (80005f0 <main+0x1a8>)
 80004f6:	0019      	movs	r1, r3
 80004f8:	f000 ff76 	bl	80013e8 <HAL_GPIO_WritePin>

   uint16_t halDelay = 0;
 80004fc:	231c      	movs	r3, #28
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	2200      	movs	r2, #0
 8000502:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8000504:	2300      	movs	r3, #0
 8000506:	637b      	str	r3, [r7, #52]	@ 0x34
 8000508:	e04a      	b.n	80005a0 <main+0x158>

	  uint8_t sendByte = dispDigits[i+1];
 800050a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800050c:	1c5a      	adds	r2, r3, #1
 800050e:	2333      	movs	r3, #51	@ 0x33
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	210c      	movs	r1, #12
 8000514:	1879      	adds	r1, r7, r1
 8000516:	5c8a      	ldrb	r2, [r1, r2]
 8000518:	701a      	strb	r2, [r3, #0]

	  for(int j = 0; j < 8; j++) {
 800051a:	2300      	movs	r3, #0
 800051c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800051e:	e039      	b.n	8000594 <main+0x14c>

		HAL_GPIO_WritePin(GPIOA, shiftDataPin, GPIOPinSet[sendByte & 1]);
 8000520:	2533      	movs	r5, #51	@ 0x33
 8000522:	197b      	adds	r3, r7, r5
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2201      	movs	r2, #1
 8000528:	4013      	ands	r3, r2
 800052a:	2418      	movs	r4, #24
 800052c:	193a      	adds	r2, r7, r4
 800052e:	5cd2      	ldrb	r2, [r2, r3]
 8000530:	2326      	movs	r3, #38	@ 0x26
 8000532:	18fb      	adds	r3, r7, r3
 8000534:	8819      	ldrh	r1, [r3, #0]
 8000536:	23a0      	movs	r3, #160	@ 0xa0
 8000538:	05db      	lsls	r3, r3, #23
 800053a:	0018      	movs	r0, r3
 800053c:	f000 ff54 	bl	80013e8 <HAL_GPIO_WritePin>
		//HAL_Delay(halDelay);

		// Toggle clock GPIO to shift bit into register
		HAL_GPIO_WritePin(GPIOB, shiftDataClockPin, GPIOPinSet[1]);
 8000540:	193b      	adds	r3, r7, r4
 8000542:	785a      	ldrb	r2, [r3, #1]
 8000544:	2624      	movs	r6, #36	@ 0x24
 8000546:	19bb      	adds	r3, r7, r6
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	4829      	ldr	r0, [pc, #164]	@ (80005f0 <main+0x1a8>)
 800054c:	0019      	movs	r1, r3
 800054e:	f000 ff4b 	bl	80013e8 <HAL_GPIO_WritePin>
		//HAL_Delay(halDelay);
		HAL_GPIO_WritePin(GPIOB, shiftDataClockPin, GPIOPinSet[0]);
 8000552:	193b      	adds	r3, r7, r4
 8000554:	781a      	ldrb	r2, [r3, #0]
 8000556:	19bb      	adds	r3, r7, r6
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	4825      	ldr	r0, [pc, #148]	@ (80005f0 <main+0x1a8>)
 800055c:	0019      	movs	r1, r3
 800055e:	f000 ff43 	bl	80013e8 <HAL_GPIO_WritePin>
		//HAL_Delay(halDelay);

		// Store cleared data
		HAL_GPIO_WritePin(GPIOB, shiftStoreClockPin, GPIOPinSet[1]);
 8000562:	193b      	adds	r3, r7, r4
 8000564:	785a      	ldrb	r2, [r3, #1]
 8000566:	2622      	movs	r6, #34	@ 0x22
 8000568:	19bb      	adds	r3, r7, r6
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	4820      	ldr	r0, [pc, #128]	@ (80005f0 <main+0x1a8>)
 800056e:	0019      	movs	r1, r3
 8000570:	f000 ff3a 	bl	80013e8 <HAL_GPIO_WritePin>
		//HAL_Delay(halDelay);
		HAL_GPIO_WritePin(GPIOB, shiftStoreClockPin, GPIOPinSet[0]);
 8000574:	193b      	adds	r3, r7, r4
 8000576:	781a      	ldrb	r2, [r3, #0]
 8000578:	19bb      	adds	r3, r7, r6
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	481c      	ldr	r0, [pc, #112]	@ (80005f0 <main+0x1a8>)
 800057e:	0019      	movs	r1, r3
 8000580:	f000 ff32 	bl	80013e8 <HAL_GPIO_WritePin>
		//HAL_Delay(halDelay);

		// Once data pin has been written and shifted out, shift data right by one bit.
		sendByte >>= 1;
 8000584:	197b      	adds	r3, r7, r5
 8000586:	197a      	adds	r2, r7, r5
 8000588:	7812      	ldrb	r2, [r2, #0]
 800058a:	0852      	lsrs	r2, r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
	  for(int j = 0; j < 8; j++) {
 800058e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000590:	3301      	adds	r3, #1
 8000592:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000596:	2b07      	cmp	r3, #7
 8000598:	ddc2      	ble.n	8000520 <main+0xd8>
	for (int i = 0; i < 4; i++) {
 800059a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800059c:	3301      	adds	r3, #1
 800059e:	637b      	str	r3, [r7, #52]	@ 0x34
 80005a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005a2:	2b03      	cmp	r3, #3
 80005a4:	ddb1      	ble.n	800050a <main+0xc2>
//	   HAL_GPIO_WritePin(GPIOB, shiftOutputEnablePin, GPIOPinSet[1]);
//
//	   HAL_Delay(1000);

	  //Start PWM on enable output pin
	  uint16_t duties[5] = {1000, 900, 800, 700, 600};
 80005a6:	003b      	movs	r3, r7
 80005a8:	4a12      	ldr	r2, [pc, #72]	@ (80005f4 <main+0x1ac>)
 80005aa:	ca03      	ldmia	r2!, {r0, r1}
 80005ac:	c303      	stmia	r3!, {r0, r1}
 80005ae:	8812      	ldrh	r2, [r2, #0]
 80005b0:	801a      	strh	r2, [r3, #0]
	  for(int i = 0; i < 5; i++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80005b6:	e013      	b.n	80005e0 <main+0x198>

		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duties[i]);
 80005b8:	003b      	movs	r3, r7
 80005ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80005bc:	0052      	lsls	r2, r2, #1
 80005be:	5ad2      	ldrh	r2, [r2, r3]
 80005c0:	4b0d      	ldr	r3, [pc, #52]	@ (80005f8 <main+0x1b0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	639a      	str	r2, [r3, #56]	@ 0x38
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005c6:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <main+0x1b0>)
 80005c8:	2104      	movs	r1, #4
 80005ca:	0018      	movs	r0, r3
 80005cc:	f002 fa78 	bl	8002ac0 <HAL_TIM_PWM_Start>

		  HAL_Delay(1000);
 80005d0:	23fa      	movs	r3, #250	@ 0xfa
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	0018      	movs	r0, r3
 80005d6:	f000 fca1 	bl	8000f1c <HAL_Delay>
	  for(int i = 0; i < 5; i++) {
 80005da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005dc:	3301      	adds	r3, #1
 80005de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80005e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	dde8      	ble.n	80005b8 <main+0x170>
  {
 80005e6:	e7de      	b.n	80005a6 <main+0x15e>
 80005e8:	ffff8000 	.word	0xffff8000
 80005ec:	080040a4 	.word	0x080040a4
 80005f0:	50000400 	.word	0x50000400
 80005f4:	080040b0 	.word	0x080040b0
 80005f8:	20000054 	.word	0x20000054

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b093      	sub	sp, #76	@ 0x4c
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	2410      	movs	r4, #16
 8000604:	193b      	adds	r3, r7, r4
 8000606:	0018      	movs	r0, r3
 8000608:	2338      	movs	r3, #56	@ 0x38
 800060a:	001a      	movs	r2, r3
 800060c:	2100      	movs	r1, #0
 800060e:	f003 fd11 	bl	8004034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000612:	003b      	movs	r3, r7
 8000614:	0018      	movs	r0, r3
 8000616:	2310      	movs	r3, #16
 8000618:	001a      	movs	r2, r3
 800061a:	2100      	movs	r1, #0
 800061c:	f003 fd0a 	bl	8004034 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2380      	movs	r3, #128	@ 0x80
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	0018      	movs	r0, r3
 8000626:	f000 ff31 	bl	800148c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800062a:	193b      	adds	r3, r7, r4
 800062c:	220a      	movs	r2, #10
 800062e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	193b      	adds	r3, r7, r4
 8000632:	2280      	movs	r2, #128	@ 0x80
 8000634:	0052      	lsls	r2, r2, #1
 8000636:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000638:	0021      	movs	r1, r4
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2240      	movs	r2, #64	@ 0x40
 8000644:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2201      	movs	r2, #1
 800064a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	187b      	adds	r3, r7, r1
 8000654:	0018      	movs	r0, r3
 8000656:	f000 ff65 	bl	8001524 <HAL_RCC_OscConfig>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800065e:	f000 fa4b 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	003b      	movs	r3, r7
 8000664:	2207      	movs	r2, #7
 8000666:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000668:	003b      	movs	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	003b      	movs	r3, r7
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000674:	003b      	movs	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067a:	003b      	movs	r3, r7
 800067c:	2100      	movs	r1, #0
 800067e:	0018      	movs	r0, r3
 8000680:	f001 fa6a 	bl	8001b58 <HAL_RCC_ClockConfig>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000688:	f000 fa36 	bl	8000af8 <Error_Handler>
  }
}
 800068c:	46c0      	nop			@ (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b013      	add	sp, #76	@ 0x4c
 8000692:	bd90      	pop	{r4, r7, pc}

08000694 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b090      	sub	sp, #64	@ 0x40
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800069a:	232c      	movs	r3, #44	@ 0x2c
 800069c:	18fb      	adds	r3, r7, r3
 800069e:	0018      	movs	r0, r3
 80006a0:	2314      	movs	r3, #20
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f003 fcc5 	bl	8004034 <memset>
  RTC_DateTypeDef sDate = {0};
 80006aa:	2328      	movs	r3, #40	@ 0x28
 80006ac:	18fb      	adds	r3, r7, r3
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80006b2:	003b      	movs	r3, r7
 80006b4:	0018      	movs	r0, r3
 80006b6:	2328      	movs	r3, #40	@ 0x28
 80006b8:	001a      	movs	r2, r3
 80006ba:	2100      	movs	r1, #0
 80006bc:	f003 fcba 	bl	8004034 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006c0:	4b47      	ldr	r3, [pc, #284]	@ (80007e0 <MX_RTC_Init+0x14c>)
 80006c2:	4a48      	ldr	r2, [pc, #288]	@ (80007e4 <MX_RTC_Init+0x150>)
 80006c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80006c6:	4b46      	ldr	r3, [pc, #280]	@ (80007e0 <MX_RTC_Init+0x14c>)
 80006c8:	2240      	movs	r2, #64	@ 0x40
 80006ca:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80006cc:	4b44      	ldr	r3, [pc, #272]	@ (80007e0 <MX_RTC_Init+0x14c>)
 80006ce:	227f      	movs	r2, #127	@ 0x7f
 80006d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80006d2:	4b43      	ldr	r3, [pc, #268]	@ (80007e0 <MX_RTC_Init+0x14c>)
 80006d4:	22ff      	movs	r2, #255	@ 0xff
 80006d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006d8:	4b41      	ldr	r3, [pc, #260]	@ (80007e0 <MX_RTC_Init+0x14c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006de:	4b40      	ldr	r3, [pc, #256]	@ (80007e0 <MX_RTC_Init+0x14c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006e4:	4b3e      	ldr	r3, [pc, #248]	@ (80007e0 <MX_RTC_Init+0x14c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006ea:	4b3d      	ldr	r3, [pc, #244]	@ (80007e0 <MX_RTC_Init+0x14c>)
 80006ec:	2280      	movs	r2, #128	@ 0x80
 80006ee:	05d2      	lsls	r2, r2, #23
 80006f0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80006f2:	4b3b      	ldr	r3, [pc, #236]	@ (80007e0 <MX_RTC_Init+0x14c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006f8:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <MX_RTC_Init+0x14c>)
 80006fa:	0018      	movs	r0, r3
 80006fc:	f001 fd50 	bl	80021a0 <HAL_RTC_Init>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d001      	beq.n	8000708 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000704:	f000 f9f8 	bl	8000af8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000708:	212c      	movs	r1, #44	@ 0x2c
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2201      	movs	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2200      	movs	r2, #0
 8000714:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2200      	movs	r2, #0
 800071a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2200      	movs	r2, #0
 8000726:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000734:	1879      	adds	r1, r7, r1
 8000736:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <MX_RTC_Init+0x14c>)
 8000738:	2201      	movs	r2, #1
 800073a:	0018      	movs	r0, r3
 800073c:	f001 fdd2 	bl	80022e4 <HAL_RTC_SetTime>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d001      	beq.n	8000748 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000744:	f000 f9d8 	bl	8000af8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000748:	2128      	movs	r1, #40	@ 0x28
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2201      	movs	r2, #1
 8000754:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2201      	movs	r2, #1
 800075a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2200      	movs	r2, #0
 8000760:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000762:	1879      	adds	r1, r7, r1
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <MX_RTC_Init+0x14c>)
 8000766:	2201      	movs	r2, #1
 8000768:	0018      	movs	r0, r3
 800076a:	f001 fe63 	bl	8002434 <HAL_RTC_SetDate>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d001      	beq.n	8000776 <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 8000772:	f000 f9c1 	bl	8000af8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000776:	003b      	movs	r3, r7
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800077c:	003b      	movs	r3, r7
 800077e:	2200      	movs	r2, #0
 8000780:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 8000782:	003b      	movs	r3, r7
 8000784:	2201      	movs	r2, #1
 8000786:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000788:	003b      	movs	r3, r7
 800078a:	2200      	movs	r2, #0
 800078c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800078e:	003b      	movs	r3, r7
 8000790:	2200      	movs	r2, #0
 8000792:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000794:	003b      	movs	r3, r7
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800079a:	003b      	movs	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80007a0:	003b      	movs	r3, r7
 80007a2:	4a11      	ldr	r2, [pc, #68]	@ (80007e8 <MX_RTC_Init+0x154>)
 80007a4:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80007a6:	003b      	movs	r3, r7
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80007ac:	003b      	movs	r3, r7
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80007b2:	003b      	movs	r3, r7
 80007b4:	2220      	movs	r2, #32
 80007b6:	2101      	movs	r1, #1
 80007b8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80007ba:	003b      	movs	r3, r7
 80007bc:	2280      	movs	r2, #128	@ 0x80
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80007c2:	0039      	movs	r1, r7
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_RTC_Init+0x14c>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	0018      	movs	r0, r3
 80007ca:	f001 fec5 	bl	8002558 <HAL_RTC_SetAlarm_IT>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_RTC_Init+0x142>
  {
    Error_Handler();
 80007d2:	f000 f991 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b010      	add	sp, #64	@ 0x40
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	20000028 	.word	0x20000028
 80007e4:	40002800 	.word	0x40002800
 80007e8:	80808000 	.word	0x80808000

080007ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b098      	sub	sp, #96	@ 0x60
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f2:	2354      	movs	r3, #84	@ 0x54
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	0018      	movs	r0, r3
 80007f8:	230c      	movs	r3, #12
 80007fa:	001a      	movs	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	f003 fc19 	bl	8004034 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000802:	2338      	movs	r3, #56	@ 0x38
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	0018      	movs	r0, r3
 8000808:	231c      	movs	r3, #28
 800080a:	001a      	movs	r2, r3
 800080c:	2100      	movs	r1, #0
 800080e:	f003 fc11 	bl	8004034 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	0018      	movs	r0, r3
 8000816:	2334      	movs	r3, #52	@ 0x34
 8000818:	001a      	movs	r2, r3
 800081a:	2100      	movs	r1, #0
 800081c:	f003 fc0a 	bl	8004034 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000820:	4b45      	ldr	r3, [pc, #276]	@ (8000938 <MX_TIM1_Init+0x14c>)
 8000822:	4a46      	ldr	r2, [pc, #280]	@ (800093c <MX_TIM1_Init+0x150>)
 8000824:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80 - 1;
 8000826:	4b44      	ldr	r3, [pc, #272]	@ (8000938 <MX_TIM1_Init+0x14c>)
 8000828:	224f      	movs	r2, #79	@ 0x4f
 800082a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082c:	4b42      	ldr	r3, [pc, #264]	@ (8000938 <MX_TIM1_Init+0x14c>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000 - 1;
 8000832:	4b41      	ldr	r3, [pc, #260]	@ (8000938 <MX_TIM1_Init+0x14c>)
 8000834:	4a42      	ldr	r2, [pc, #264]	@ (8000940 <MX_TIM1_Init+0x154>)
 8000836:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b3f      	ldr	r3, [pc, #252]	@ (8000938 <MX_TIM1_Init+0x14c>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800083e:	4b3e      	ldr	r3, [pc, #248]	@ (8000938 <MX_TIM1_Init+0x14c>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000844:	4b3c      	ldr	r3, [pc, #240]	@ (8000938 <MX_TIM1_Init+0x14c>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800084a:	4b3b      	ldr	r3, [pc, #236]	@ (8000938 <MX_TIM1_Init+0x14c>)
 800084c:	0018      	movs	r0, r3
 800084e:	f002 f8df 	bl	8002a10 <HAL_TIM_PWM_Init>
 8000852:	1e03      	subs	r3, r0, #0
 8000854:	d001      	beq.n	800085a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000856:	f000 f94f 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085a:	2154      	movs	r1, #84	@ 0x54
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800086e:	187a      	adds	r2, r7, r1
 8000870:	4b31      	ldr	r3, [pc, #196]	@ (8000938 <MX_TIM1_Init+0x14c>)
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f002 fe37 	bl	80034e8 <HAL_TIMEx_MasterConfigSynchronization>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800087e:	f000 f93b 	bl	8000af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000882:	2138      	movs	r1, #56	@ 0x38
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2260      	movs	r2, #96	@ 0x60
 8000888:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008ae:	1879      	adds	r1, r7, r1
 80008b0:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <MX_TIM1_Init+0x14c>)
 80008b2:	2204      	movs	r2, #4
 80008b4:	0018      	movs	r0, r3
 80008b6:	f002 f9e1 	bl	8002c7c <HAL_TIM_PWM_ConfigChannel>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80008be:	f000 f91b 	bl	8000af8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2280      	movs	r2, #128	@ 0x80
 80008e4:	0192      	lsls	r2, r2, #6
 80008e6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2280      	movs	r2, #128	@ 0x80
 80008fe:	0492      	lsls	r2, r2, #18
 8000900:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2200      	movs	r2, #0
 8000906:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000914:	1d3a      	adds	r2, r7, #4
 8000916:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <MX_TIM1_Init+0x14c>)
 8000918:	0011      	movs	r1, r2
 800091a:	0018      	movs	r0, r3
 800091c:	f002 fe4c 	bl	80035b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000924:	f000 f8e8 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000928:	4b03      	ldr	r3, [pc, #12]	@ (8000938 <MX_TIM1_Init+0x14c>)
 800092a:	0018      	movs	r0, r3
 800092c:	f000 f98a 	bl	8000c44 <HAL_TIM_MspPostInit>

}
 8000930:	46c0      	nop			@ (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	b018      	add	sp, #96	@ 0x60
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000054 	.word	0x20000054
 800093c:	40012c00 	.word	0x40012c00
 8000940:	000003e7 	.word	0x000003e7

08000944 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000948:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <MX_USART2_UART_Init+0x60>)
 800094a:	4a17      	ldr	r2, [pc, #92]	@ (80009a8 <MX_USART2_UART_Init+0x64>)
 800094c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094e:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <MX_USART2_UART_Init+0x60>)
 8000950:	22e1      	movs	r2, #225	@ 0xe1
 8000952:	0252      	lsls	r2, r2, #9
 8000954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000956:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <MX_USART2_UART_Init+0x60>)
 8000958:	2280      	movs	r2, #128	@ 0x80
 800095a:	0152      	lsls	r2, r2, #5
 800095c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <MX_USART2_UART_Init+0x60>)
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000964:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <MX_USART2_UART_Init+0x60>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <MX_USART2_UART_Init+0x60>)
 800096c:	220c      	movs	r2, #12
 800096e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <MX_USART2_UART_Init+0x60>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000976:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <MX_USART2_UART_Init+0x60>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097c:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <MX_USART2_UART_Init+0x60>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000982:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <MX_USART2_UART_Init+0x60>)
 8000984:	2200      	movs	r2, #0
 8000986:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_USART2_UART_Init+0x60>)
 800098a:	2200      	movs	r2, #0
 800098c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098e:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <MX_USART2_UART_Init+0x60>)
 8000990:	0018      	movs	r0, r3
 8000992:	f002 feb7 	bl	8003704 <HAL_UART_Init>
 8000996:	1e03      	subs	r3, r0, #0
 8000998:	d001      	beq.n	800099e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800099a:	f000 f8ad 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200000a0 	.word	0x200000a0
 80009a8:	40004400 	.word	0x40004400

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b08b      	sub	sp, #44	@ 0x2c
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	2414      	movs	r4, #20
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	0018      	movs	r0, r3
 80009b8:	2314      	movs	r3, #20
 80009ba:	001a      	movs	r2, r3
 80009bc:	2100      	movs	r1, #0
 80009be:	f003 fb39 	bl	8004034 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	4b41      	ldr	r3, [pc, #260]	@ (8000ac8 <MX_GPIO_Init+0x11c>)
 80009c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009c6:	4b40      	ldr	r3, [pc, #256]	@ (8000ac8 <MX_GPIO_Init+0x11c>)
 80009c8:	2104      	movs	r1, #4
 80009ca:	430a      	orrs	r2, r1
 80009cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80009ce:	4b3e      	ldr	r3, [pc, #248]	@ (8000ac8 <MX_GPIO_Init+0x11c>)
 80009d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009d2:	2204      	movs	r2, #4
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009da:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac8 <MX_GPIO_Init+0x11c>)
 80009dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009de:	4b3a      	ldr	r3, [pc, #232]	@ (8000ac8 <MX_GPIO_Init+0x11c>)
 80009e0:	2120      	movs	r1, #32
 80009e2:	430a      	orrs	r2, r1
 80009e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80009e6:	4b38      	ldr	r3, [pc, #224]	@ (8000ac8 <MX_GPIO_Init+0x11c>)
 80009e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ea:	2220      	movs	r2, #32
 80009ec:	4013      	ands	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b35      	ldr	r3, [pc, #212]	@ (8000ac8 <MX_GPIO_Init+0x11c>)
 80009f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009f6:	4b34      	ldr	r3, [pc, #208]	@ (8000ac8 <MX_GPIO_Init+0x11c>)
 80009f8:	2101      	movs	r1, #1
 80009fa:	430a      	orrs	r2, r1
 80009fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80009fe:	4b32      	ldr	r3, [pc, #200]	@ (8000ac8 <MX_GPIO_Init+0x11c>)
 8000a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a02:	2201      	movs	r2, #1
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac8 <MX_GPIO_Init+0x11c>)
 8000a0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac8 <MX_GPIO_Init+0x11c>)
 8000a10:	2102      	movs	r1, #2
 8000a12:	430a      	orrs	r2, r1
 8000a14:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a16:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac8 <MX_GPIO_Init+0x11c>)
 8000a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Shift_Data_Out_GPIO_Port, Shift_Data_Out_Pin, GPIO_PIN_RESET);
 8000a22:	2380      	movs	r3, #128	@ 0x80
 8000a24:	0219      	lsls	r1, r3, #8
 8000a26:	23a0      	movs	r3, #160	@ 0xa0
 8000a28:	05db      	lsls	r3, r3, #23
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f000 fcdb 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, store_clock_Pin|data_clock_Pin|MCLR_Pin, GPIO_PIN_RESET);
 8000a32:	4b26      	ldr	r3, [pc, #152]	@ (8000acc <MX_GPIO_Init+0x120>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	2170      	movs	r1, #112	@ 0x70
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f000 fcd5 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	2204      	movs	r2, #4
 8000a42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	2288      	movs	r2, #136	@ 0x88
 8000a48:	0352      	lsls	r2, r2, #13
 8000a4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	193b      	adds	r3, r7, r4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000a52:	193b      	adds	r3, r7, r4
 8000a54:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad0 <MX_GPIO_Init+0x124>)
 8000a56:	0019      	movs	r1, r3
 8000a58:	0010      	movs	r0, r2
 8000a5a:	f000 fb61 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : Shift_Data_Out_Pin */
  GPIO_InitStruct.Pin = Shift_Data_Out_Pin;
 8000a5e:	0021      	movs	r1, r4
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	2280      	movs	r2, #128	@ 0x80
 8000a64:	0212      	lsls	r2, r2, #8
 8000a66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	000c      	movs	r4, r1
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	193b      	adds	r3, r7, r4
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Shift_Data_Out_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	193a      	adds	r2, r7, r4
 8000a7e:	23a0      	movs	r3, #160	@ 0xa0
 8000a80:	05db      	lsls	r3, r3, #23
 8000a82:	0011      	movs	r1, r2
 8000a84:	0018      	movs	r0, r3
 8000a86:	f000 fb4b 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : store_clock_Pin data_clock_Pin MCLR_Pin */
  GPIO_InitStruct.Pin = store_clock_Pin|data_clock_Pin|MCLR_Pin;
 8000a8a:	0021      	movs	r1, r4
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2270      	movs	r2, #112	@ 0x70
 8000a90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	2201      	movs	r2, #1
 8000a96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	4a09      	ldr	r2, [pc, #36]	@ (8000acc <MX_GPIO_Init+0x120>)
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	0010      	movs	r0, r2
 8000aac:	f000 fb38 	bl	8001120 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2006      	movs	r0, #6
 8000ab6:	f000 fb01 	bl	80010bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000aba:	2006      	movs	r0, #6
 8000abc:	f000 fb13 	bl	80010e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  // Initialize all output pins to low
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac0:	46c0      	nop			@ (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b00b      	add	sp, #44	@ 0x2c
 8000ac6:	bd90      	pop	{r4, r7, pc}
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	50000400 	.word	0x50000400
 8000ad0:	50001400 	.word	0x50001400

08000ad4 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	0002      	movs	r2, r0
 8000adc:	1dbb      	adds	r3, r7, #6
 8000ade:	801a      	strh	r2, [r3, #0]

}
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b002      	add	sp, #8
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
    HAL_GPIO_TogglePin(GPIOA, RTCInterruptLEDPin);

  printf("Current time: %d : %d : %d\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);*/

}
 8000af0:	46c0      	nop			@ (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b002      	add	sp, #8
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	e7fd      	b.n	8000b00 <Error_Handler+0x8>

08000b04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b10:	2101      	movs	r1, #1
 8000b12:	430a      	orrs	r2, r1
 8000b14:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b16:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b28:	2180      	movs	r1, #128	@ 0x80
 8000b2a:	0549      	lsls	r1, r1, #21
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b34:	2380      	movs	r3, #128	@ 0x80
 8000b36:	055b      	lsls	r3, r3, #21
 8000b38:	4013      	ands	r3, r2
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b002      	add	sp, #8
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	40021000 	.word	0x40021000

08000b4c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b08f      	sub	sp, #60	@ 0x3c
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b54:	2410      	movs	r4, #16
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	0018      	movs	r0, r3
 8000b5a:	2328      	movs	r3, #40	@ 0x28
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	2100      	movs	r1, #0
 8000b60:	f003 fa68 	bl	8004034 <memset>
  if(hrtc->Instance==RTC)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a19      	ldr	r2, [pc, #100]	@ (8000bd0 <HAL_RTC_MspInit+0x84>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12c      	bne.n	8000bc8 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	2280      	movs	r2, #128	@ 0x80
 8000b72:	0292      	lsls	r2, r2, #10
 8000b74:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	2280      	movs	r2, #128	@ 0x80
 8000b7a:	0092      	lsls	r2, r2, #2
 8000b7c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	0018      	movs	r0, r3
 8000b82:	f001 f993 	bl	8001eac <HAL_RCCEx_PeriphCLKConfig>
 8000b86:	1e03      	subs	r3, r0, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000b8a:	f7ff ffb5 	bl	8000af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <HAL_RTC_MspInit+0x88>)
 8000b90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <HAL_RTC_MspInit+0x88>)
 8000b94:	2180      	movs	r1, #128	@ 0x80
 8000b96:	0209      	lsls	r1, r1, #8
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <HAL_RTC_MspInit+0x88>)
 8000b9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <HAL_RTC_MspInit+0x88>)
 8000ba2:	2180      	movs	r1, #128	@ 0x80
 8000ba4:	00c9      	lsls	r1, r1, #3
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000baa:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <HAL_RTC_MspInit+0x88>)
 8000bac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bae:	2380      	movs	r3, #128	@ 0x80
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2002      	movs	r0, #2
 8000bbe:	f000 fa7d 	bl	80010bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	f000 fa8f 	bl	80010e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000bc8:	46c0      	nop			@ (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b00f      	add	sp, #60	@ 0x3c
 8000bce:	bd90      	pop	{r4, r7, pc}
 8000bd0:	40002800 	.word	0x40002800
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b08f      	sub	sp, #60	@ 0x3c
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be0:	2410      	movs	r4, #16
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	0018      	movs	r0, r3
 8000be6:	2328      	movs	r3, #40	@ 0x28
 8000be8:	001a      	movs	r2, r3
 8000bea:	2100      	movs	r1, #0
 8000bec:	f003 fa22 	bl	8004034 <memset>
  if(htim_pwm->Instance==TIM1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a11      	ldr	r2, [pc, #68]	@ (8000c3c <HAL_TIM_PWM_MspInit+0x64>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d11c      	bne.n	8000c34 <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	2280      	movs	r2, #128	@ 0x80
 8000bfe:	0392      	lsls	r2, r2, #14
 8000c00:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000c02:	193b      	adds	r3, r7, r4
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c08:	193b      	adds	r3, r7, r4
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f001 f94e 	bl	8001eac <HAL_RCCEx_PeriphCLKConfig>
 8000c10:	1e03      	subs	r3, r0, #0
 8000c12:	d001      	beq.n	8000c18 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8000c14:	f7ff ff70 	bl	8000af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c18:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <HAL_TIM_PWM_MspInit+0x68>)
 8000c1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c1c:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <HAL_TIM_PWM_MspInit+0x68>)
 8000c1e:	2180      	movs	r1, #128	@ 0x80
 8000c20:	0109      	lsls	r1, r1, #4
 8000c22:	430a      	orrs	r2, r1
 8000c24:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c26:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_TIM_PWM_MspInit+0x68>)
 8000c28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c2a:	2380      	movs	r3, #128	@ 0x80
 8000c2c:	011b      	lsls	r3, r3, #4
 8000c2e:	4013      	ands	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c34:	46c0      	nop			@ (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b00f      	add	sp, #60	@ 0x3c
 8000c3a:	bd90      	pop	{r4, r7, pc}
 8000c3c:	40012c00 	.word	0x40012c00
 8000c40:	40021000 	.word	0x40021000

08000c44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b089      	sub	sp, #36	@ 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	240c      	movs	r4, #12
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	0018      	movs	r0, r3
 8000c52:	2314      	movs	r3, #20
 8000c54:	001a      	movs	r2, r3
 8000c56:	2100      	movs	r1, #0
 8000c58:	f003 f9ec 	bl	8004034 <memset>
  if(htim->Instance==TIM1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a14      	ldr	r2, [pc, #80]	@ (8000cb4 <HAL_TIM_MspPostInit+0x70>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d121      	bne.n	8000caa <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <HAL_TIM_MspPostInit+0x74>)
 8000c68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c6a:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <HAL_TIM_MspPostInit+0x74>)
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <HAL_TIM_MspPostInit+0x74>)
 8000c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c76:	2202      	movs	r2, #2
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c7e:	0021      	movs	r1, r4
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2208      	movs	r2, #8
 8000c84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2202      	movs	r2, #2
 8000c8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	4a06      	ldr	r2, [pc, #24]	@ (8000cbc <HAL_TIM_MspPostInit+0x78>)
 8000ca2:	0019      	movs	r1, r3
 8000ca4:	0010      	movs	r0, r2
 8000ca6:	f000 fa3b 	bl	8001120 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b009      	add	sp, #36	@ 0x24
 8000cb0:	bd90      	pop	{r4, r7, pc}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	40012c00 	.word	0x40012c00
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	50000400 	.word	0x50000400

08000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b08b      	sub	sp, #44	@ 0x2c
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	2414      	movs	r4, #20
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	0018      	movs	r0, r3
 8000cce:	2314      	movs	r3, #20
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	f003 f9ae 	bl	8004034 <memset>
  if(huart->Instance==USART2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d4c <HAL_UART_MspInit+0x8c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d130      	bne.n	8000d44 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <HAL_UART_MspInit+0x90>)
 8000ce4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <HAL_UART_MspInit+0x90>)
 8000ce8:	2180      	movs	r1, #128	@ 0x80
 8000cea:	0289      	lsls	r1, r1, #10
 8000cec:	430a      	orrs	r2, r1
 8000cee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cf0:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <HAL_UART_MspInit+0x90>)
 8000cf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cf4:	2380      	movs	r3, #128	@ 0x80
 8000cf6:	029b      	lsls	r3, r3, #10
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <HAL_UART_MspInit+0x90>)
 8000d00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d02:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <HAL_UART_MspInit+0x90>)
 8000d04:	2101      	movs	r1, #1
 8000d06:	430a      	orrs	r2, r1
 8000d08:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <HAL_UART_MspInit+0x90>)
 8000d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000d16:	0021      	movs	r1, r4
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2202      	movs	r2, #2
 8000d22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2201      	movs	r2, #1
 8000d28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2201      	movs	r2, #1
 8000d34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	187a      	adds	r2, r7, r1
 8000d38:	23a0      	movs	r3, #160	@ 0xa0
 8000d3a:	05db      	lsls	r3, r3, #23
 8000d3c:	0011      	movs	r1, r2
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f000 f9ee 	bl	8001120 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d44:	46c0      	nop			@ (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b00b      	add	sp, #44	@ 0x2c
 8000d4a:	bd90      	pop	{r4, r7, pc}
 8000d4c:	40004400 	.word	0x40004400
 8000d50:	40021000 	.word	0x40021000

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d58:	46c0      	nop			@ (mov r8, r8)
 8000d5a:	e7fd      	b.n	8000d58 <NMI_Handler+0x4>

08000d5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d60:	46c0      	nop			@ (mov r8, r8)
 8000d62:	e7fd      	b.n	8000d60 <HardFault_Handler+0x4>

08000d64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d68:	46c0      	nop			@ (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7c:	f000 f8b2 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d80:	46c0      	nop			@ (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000d8c:	4b03      	ldr	r3, [pc, #12]	@ (8000d9c <RTC_TAMP_IRQHandler+0x14>)
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f001 fd22 	bl	80027d8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8000d94:	46c0      	nop			@ (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	20000028 	.word	0x20000028

08000da0 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_NRST_Pin);
 8000da4:	2004      	movs	r0, #4
 8000da6:	f000 fb3d 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	46c0      	nop			@ (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dbc:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dbe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dc0:	f7ff fff6 	bl	8000db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc4:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc6:	490d      	ldr	r1, [pc, #52]	@ (8000dfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e00 <LoopForever+0xe>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8000e08 <LoopForever+0x16>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dea:	f003 f92b 	bl	8004044 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000dee:	f7ff fb2b 	bl	8000448 <main>

08000df2 <LoopForever>:

LoopForever:
  b LoopForever
 8000df2:	e7fe      	b.n	8000df2 <LoopForever>
  ldr   r0, =_estack
 8000df4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e00:	08004198 	.word	0x08004198
  ldr r2, =_sbss
 8000e04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e08:	20000138 	.word	0x20000138

08000e0c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC1_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <HAL_Init+0x3c>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <HAL_Init+0x3c>)
 8000e22:	2180      	movs	r1, #128	@ 0x80
 8000e24:	0049      	lsls	r1, r1, #1
 8000e26:	430a      	orrs	r2, r1
 8000e28:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f810 	bl	8000e50 <HAL_InitTick>
 8000e30:	1e03      	subs	r3, r0, #0
 8000e32:	d003      	beq.n	8000e3c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e34:	1dfb      	adds	r3, r7, #7
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
 8000e3a:	e001      	b.n	8000e40 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f7ff fe62 	bl	8000b04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e40:	1dfb      	adds	r3, r7, #7
 8000e42:	781b      	ldrb	r3, [r3, #0]
}
 8000e44:	0018      	movs	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b002      	add	sp, #8
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40022000 	.word	0x40022000

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b590      	push	{r4, r7, lr}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e58:	230f      	movs	r3, #15
 8000e5a:	18fb      	adds	r3, r7, r3
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000e60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <HAL_InitTick+0x88>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d02b      	beq.n	8000ec0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000e68:	4b1c      	ldr	r3, [pc, #112]	@ (8000edc <HAL_InitTick+0x8c>)
 8000e6a:	681c      	ldr	r4, [r3, #0]
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <HAL_InitTick+0x88>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	0019      	movs	r1, r3
 8000e72:	23fa      	movs	r3, #250	@ 0xfa
 8000e74:	0098      	lsls	r0, r3, #2
 8000e76:	f7ff f945 	bl	8000104 <__udivsi3>
 8000e7a:	0003      	movs	r3, r0
 8000e7c:	0019      	movs	r1, r3
 8000e7e:	0020      	movs	r0, r4
 8000e80:	f7ff f940 	bl	8000104 <__udivsi3>
 8000e84:	0003      	movs	r3, r0
 8000e86:	0018      	movs	r0, r3
 8000e88:	f000 f93d 	bl	8001106 <HAL_SYSTICK_Config>
 8000e8c:	1e03      	subs	r3, r0, #0
 8000e8e:	d112      	bne.n	8000eb6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d80a      	bhi.n	8000eac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	2301      	movs	r3, #1
 8000e9a:	425b      	negs	r3, r3
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f000 f90c 	bl	80010bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <HAL_InitTick+0x90>)
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e00d      	b.n	8000ec8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000eac:	230f      	movs	r3, #15
 8000eae:	18fb      	adds	r3, r7, r3
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	701a      	strb	r2, [r3, #0]
 8000eb4:	e008      	b.n	8000ec8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eb6:	230f      	movs	r3, #15
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
 8000ebe:	e003      	b.n	8000ec8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ec8:	230f      	movs	r3, #15
 8000eca:	18fb      	adds	r3, r7, r3
 8000ecc:	781b      	ldrb	r3, [r3, #0]
}
 8000ece:	0018      	movs	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b005      	add	sp, #20
 8000ed4:	bd90      	pop	{r4, r7, pc}
 8000ed6:	46c0      	nop			@ (mov r8, r8)
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ee8:	4b05      	ldr	r3, [pc, #20]	@ (8000f00 <HAL_IncTick+0x1c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	001a      	movs	r2, r3
 8000eee:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <HAL_IncTick+0x20>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	18d2      	adds	r2, r2, r3
 8000ef4:	4b03      	ldr	r3, [pc, #12]	@ (8000f04 <HAL_IncTick+0x20>)
 8000ef6:	601a      	str	r2, [r3, #0]
}
 8000ef8:	46c0      	nop			@ (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000134 	.word	0x20000134

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b02      	ldr	r3, [pc, #8]	@ (8000f18 <HAL_GetTick+0x10>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	0018      	movs	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	20000134 	.word	0x20000134

08000f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff fff0 	bl	8000f08 <HAL_GetTick>
 8000f28:	0003      	movs	r3, r0
 8000f2a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	3301      	adds	r3, #1
 8000f34:	d005      	beq.n	8000f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <HAL_Delay+0x44>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	001a      	movs	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	189b      	adds	r3, r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	f7ff ffe0 	bl	8000f08 <HAL_GetTick>
 8000f48:	0002      	movs	r2, r0
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d8f7      	bhi.n	8000f44 <HAL_Delay+0x28>
  {
  }
}
 8000f54:	46c0      	nop			@ (mov r8, r8)
 8000f56:	46c0      	nop			@ (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b004      	add	sp, #16
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	20000008 	.word	0x20000008

08000f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	1dfb      	adds	r3, r7, #7
 8000f6e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	1dfb      	adds	r3, r7, #7
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f76:	d809      	bhi.n	8000f8c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	001a      	movs	r2, r3
 8000f7e:	231f      	movs	r3, #31
 8000f80:	401a      	ands	r2, r3
 8000f82:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <__NVIC_EnableIRQ+0x30>)
 8000f84:	2101      	movs	r1, #1
 8000f86:	4091      	lsls	r1, r2
 8000f88:	000a      	movs	r2, r1
 8000f8a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000f8c:	46c0      	nop			@ (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b002      	add	sp, #8
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fac:	d828      	bhi.n	8001000 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fae:	4a2f      	ldr	r2, [pc, #188]	@ (800106c <__NVIC_SetPriority+0xd4>)
 8000fb0:	1dfb      	adds	r3, r7, #7
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	089b      	lsrs	r3, r3, #2
 8000fb8:	33c0      	adds	r3, #192	@ 0xc0
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	589b      	ldr	r3, [r3, r2]
 8000fbe:	1dfa      	adds	r2, r7, #7
 8000fc0:	7812      	ldrb	r2, [r2, #0]
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	400a      	ands	r2, r1
 8000fc8:	00d2      	lsls	r2, r2, #3
 8000fca:	21ff      	movs	r1, #255	@ 0xff
 8000fcc:	4091      	lsls	r1, r2
 8000fce:	000a      	movs	r2, r1
 8000fd0:	43d2      	mvns	r2, r2
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	019b      	lsls	r3, r3, #6
 8000fda:	22ff      	movs	r2, #255	@ 0xff
 8000fdc:	401a      	ands	r2, r3
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	4003      	ands	r3, r0
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fec:	481f      	ldr	r0, [pc, #124]	@ (800106c <__NVIC_SetPriority+0xd4>)
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	33c0      	adds	r3, #192	@ 0xc0
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ffe:	e031      	b.n	8001064 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001000:	4a1b      	ldr	r2, [pc, #108]	@ (8001070 <__NVIC_SetPriority+0xd8>)
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	0019      	movs	r1, r3
 8001008:	230f      	movs	r3, #15
 800100a:	400b      	ands	r3, r1
 800100c:	3b08      	subs	r3, #8
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3306      	adds	r3, #6
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	18d3      	adds	r3, r2, r3
 8001016:	3304      	adds	r3, #4
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	1dfa      	adds	r2, r7, #7
 800101c:	7812      	ldrb	r2, [r2, #0]
 800101e:	0011      	movs	r1, r2
 8001020:	2203      	movs	r2, #3
 8001022:	400a      	ands	r2, r1
 8001024:	00d2      	lsls	r2, r2, #3
 8001026:	21ff      	movs	r1, #255	@ 0xff
 8001028:	4091      	lsls	r1, r2
 800102a:	000a      	movs	r2, r1
 800102c:	43d2      	mvns	r2, r2
 800102e:	401a      	ands	r2, r3
 8001030:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	019b      	lsls	r3, r3, #6
 8001036:	22ff      	movs	r2, #255	@ 0xff
 8001038:	401a      	ands	r2, r3
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	0018      	movs	r0, r3
 8001040:	2303      	movs	r3, #3
 8001042:	4003      	ands	r3, r0
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001048:	4809      	ldr	r0, [pc, #36]	@ (8001070 <__NVIC_SetPriority+0xd8>)
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	001c      	movs	r4, r3
 8001050:	230f      	movs	r3, #15
 8001052:	4023      	ands	r3, r4
 8001054:	3b08      	subs	r3, #8
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	430a      	orrs	r2, r1
 800105a:	3306      	adds	r3, #6
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	18c3      	adds	r3, r0, r3
 8001060:	3304      	adds	r3, #4
 8001062:	601a      	str	r2, [r3, #0]
}
 8001064:	46c0      	nop			@ (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b003      	add	sp, #12
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	1e5a      	subs	r2, r3, #1
 8001080:	2380      	movs	r3, #128	@ 0x80
 8001082:	045b      	lsls	r3, r3, #17
 8001084:	429a      	cmp	r2, r3
 8001086:	d301      	bcc.n	800108c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001088:	2301      	movs	r3, #1
 800108a:	e010      	b.n	80010ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108c:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <SysTick_Config+0x44>)
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	3a01      	subs	r2, #1
 8001092:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001094:	2301      	movs	r3, #1
 8001096:	425b      	negs	r3, r3
 8001098:	2103      	movs	r1, #3
 800109a:	0018      	movs	r0, r3
 800109c:	f7ff ff7c 	bl	8000f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <SysTick_Config+0x44>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	4b04      	ldr	r3, [pc, #16]	@ (80010b8 <SysTick_Config+0x44>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	0018      	movs	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b002      	add	sp, #8
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	e000e010 	.word	0xe000e010

080010bc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	210f      	movs	r1, #15
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	1c02      	adds	r2, r0, #0
 80010cc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	0011      	movs	r1, r2
 80010d8:	0018      	movs	r0, r3
 80010da:	f7ff ff5d 	bl	8000f98 <__NVIC_SetPriority>
}
 80010de:	46c0      	nop			@ (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b004      	add	sp, #16
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	0002      	movs	r2, r0
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff ff33 	bl	8000f64 <__NVIC_EnableIRQ>
}
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	46bd      	mov	sp, r7
 8001102:	b002      	add	sp, #8
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff ffaf 	bl	8001074 <SysTick_Config>
 8001116:	0003      	movs	r3, r0
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112e:	e147      	b.n	80013c0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2101      	movs	r1, #1
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4091      	lsls	r1, r2
 800113a:	000a      	movs	r2, r1
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d100      	bne.n	8001148 <HAL_GPIO_Init+0x28>
 8001146:	e138      	b.n	80013ba <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2203      	movs	r2, #3
 800114e:	4013      	ands	r3, r2
 8001150:	2b01      	cmp	r3, #1
 8001152:	d005      	beq.n	8001160 <HAL_GPIO_Init+0x40>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2203      	movs	r2, #3
 800115a:	4013      	ands	r3, r2
 800115c:	2b02      	cmp	r3, #2
 800115e:	d130      	bne.n	80011c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	409a      	lsls	r2, r3
 800116e:	0013      	movs	r3, r2
 8001170:	43da      	mvns	r2, r3
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	409a      	lsls	r2, r3
 8001182:	0013      	movs	r3, r2
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001196:	2201      	movs	r2, #1
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	409a      	lsls	r2, r3
 800119c:	0013      	movs	r3, r2
 800119e:	43da      	mvns	r2, r3
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	2201      	movs	r2, #1
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2203      	movs	r2, #3
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d017      	beq.n	80011fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	43da      	mvns	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	409a      	lsls	r2, r3
 80011f0:	0013      	movs	r3, r2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2203      	movs	r2, #3
 8001204:	4013      	ands	r3, r2
 8001206:	2b02      	cmp	r3, #2
 8001208:	d123      	bne.n	8001252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	08da      	lsrs	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3208      	adds	r2, #8
 8001212:	0092      	lsls	r2, r2, #2
 8001214:	58d3      	ldr	r3, [r2, r3]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	2207      	movs	r2, #7
 800121c:	4013      	ands	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	409a      	lsls	r2, r3
 8001224:	0013      	movs	r3, r2
 8001226:	43da      	mvns	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	691a      	ldr	r2, [r3, #16]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2107      	movs	r1, #7
 8001236:	400b      	ands	r3, r1
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	409a      	lsls	r2, r3
 800123c:	0013      	movs	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	08da      	lsrs	r2, r3, #3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3208      	adds	r2, #8
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	6939      	ldr	r1, [r7, #16]
 8001250:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	409a      	lsls	r2, r3
 8001260:	0013      	movs	r3, r2
 8001262:	43da      	mvns	r2, r3
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2203      	movs	r2, #3
 8001270:	401a      	ands	r2, r3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	409a      	lsls	r2, r3
 8001278:	0013      	movs	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	23c0      	movs	r3, #192	@ 0xc0
 800128c:	029b      	lsls	r3, r3, #10
 800128e:	4013      	ands	r3, r2
 8001290:	d100      	bne.n	8001294 <HAL_GPIO_Init+0x174>
 8001292:	e092      	b.n	80013ba <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001294:	4a50      	ldr	r2, [pc, #320]	@ (80013d8 <HAL_GPIO_Init+0x2b8>)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3318      	adds	r3, #24
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	589b      	ldr	r3, [r3, r2]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	2203      	movs	r2, #3
 80012a6:	4013      	ands	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	220f      	movs	r2, #15
 80012ac:	409a      	lsls	r2, r3
 80012ae:	0013      	movs	r3, r2
 80012b0:	43da      	mvns	r2, r3
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	23a0      	movs	r3, #160	@ 0xa0
 80012bc:	05db      	lsls	r3, r3, #23
 80012be:	429a      	cmp	r2, r3
 80012c0:	d013      	beq.n	80012ea <HAL_GPIO_Init+0x1ca>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a45      	ldr	r2, [pc, #276]	@ (80013dc <HAL_GPIO_Init+0x2bc>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d00d      	beq.n	80012e6 <HAL_GPIO_Init+0x1c6>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a44      	ldr	r2, [pc, #272]	@ (80013e0 <HAL_GPIO_Init+0x2c0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d007      	beq.n	80012e2 <HAL_GPIO_Init+0x1c2>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a43      	ldr	r2, [pc, #268]	@ (80013e4 <HAL_GPIO_Init+0x2c4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d101      	bne.n	80012de <HAL_GPIO_Init+0x1be>
 80012da:	2303      	movs	r3, #3
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x1cc>
 80012de:	2305      	movs	r3, #5
 80012e0:	e004      	b.n	80012ec <HAL_GPIO_Init+0x1cc>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_Init+0x1cc>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <HAL_GPIO_Init+0x1cc>
 80012ea:	2300      	movs	r3, #0
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	2103      	movs	r1, #3
 80012f0:	400a      	ands	r2, r1
 80012f2:	00d2      	lsls	r2, r2, #3
 80012f4:	4093      	lsls	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80012fc:	4936      	ldr	r1, [pc, #216]	@ (80013d8 <HAL_GPIO_Init+0x2b8>)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3318      	adds	r3, #24
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800130a:	4b33      	ldr	r3, [pc, #204]	@ (80013d8 <HAL_GPIO_Init+0x2b8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	43da      	mvns	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	2380      	movs	r3, #128	@ 0x80
 8001320:	035b      	lsls	r3, r3, #13
 8001322:	4013      	ands	r3, r2
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800132e:	4b2a      	ldr	r3, [pc, #168]	@ (80013d8 <HAL_GPIO_Init+0x2b8>)
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001334:	4b28      	ldr	r3, [pc, #160]	@ (80013d8 <HAL_GPIO_Init+0x2b8>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	43da      	mvns	r2, r3
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	2380      	movs	r3, #128	@ 0x80
 800134a:	039b      	lsls	r3, r3, #14
 800134c:	4013      	ands	r3, r2
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001358:	4b1f      	ldr	r3, [pc, #124]	@ (80013d8 <HAL_GPIO_Init+0x2b8>)
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800135e:	4a1e      	ldr	r2, [pc, #120]	@ (80013d8 <HAL_GPIO_Init+0x2b8>)
 8001360:	2384      	movs	r3, #132	@ 0x84
 8001362:	58d3      	ldr	r3, [r2, r3]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	43da      	mvns	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	2380      	movs	r3, #128	@ 0x80
 8001376:	029b      	lsls	r3, r3, #10
 8001378:	4013      	ands	r3, r2
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001384:	4914      	ldr	r1, [pc, #80]	@ (80013d8 <HAL_GPIO_Init+0x2b8>)
 8001386:	2284      	movs	r2, #132	@ 0x84
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800138c:	4a12      	ldr	r2, [pc, #72]	@ (80013d8 <HAL_GPIO_Init+0x2b8>)
 800138e:	2380      	movs	r3, #128	@ 0x80
 8001390:	58d3      	ldr	r3, [r2, r3]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43da      	mvns	r2, r3
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	2380      	movs	r3, #128	@ 0x80
 80013a4:	025b      	lsls	r3, r3, #9
 80013a6:	4013      	ands	r3, r2
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013b2:	4909      	ldr	r1, [pc, #36]	@ (80013d8 <HAL_GPIO_Init+0x2b8>)
 80013b4:	2280      	movs	r2, #128	@ 0x80
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	3301      	adds	r3, #1
 80013be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	40da      	lsrs	r2, r3
 80013c8:	1e13      	subs	r3, r2, #0
 80013ca:	d000      	beq.n	80013ce <HAL_GPIO_Init+0x2ae>
 80013cc:	e6b0      	b.n	8001130 <HAL_GPIO_Init+0x10>
  }
}
 80013ce:	46c0      	nop			@ (mov r8, r8)
 80013d0:	46c0      	nop			@ (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b006      	add	sp, #24
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021800 	.word	0x40021800
 80013dc:	50000400 	.word	0x50000400
 80013e0:	50000800 	.word	0x50000800
 80013e4:	50000c00 	.word	0x50000c00

080013e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	0008      	movs	r0, r1
 80013f2:	0011      	movs	r1, r2
 80013f4:	1cbb      	adds	r3, r7, #2
 80013f6:	1c02      	adds	r2, r0, #0
 80013f8:	801a      	strh	r2, [r3, #0]
 80013fa:	1c7b      	adds	r3, r7, #1
 80013fc:	1c0a      	adds	r2, r1, #0
 80013fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001400:	1c7b      	adds	r3, r7, #1
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d004      	beq.n	8001412 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001408:	1cbb      	adds	r3, r7, #2
 800140a:	881a      	ldrh	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001410:	e003      	b.n	800141a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001412:	1cbb      	adds	r3, r7, #2
 8001414:	881a      	ldrh	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	b002      	add	sp, #8
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	0002      	movs	r2, r0
 800142c:	1dbb      	adds	r3, r7, #6
 800142e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001430:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	1dba      	adds	r2, r7, #6
 8001436:	8812      	ldrh	r2, [r2, #0]
 8001438:	4013      	ands	r3, r2
 800143a:	d008      	beq.n	800144e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800143c:	4b0d      	ldr	r3, [pc, #52]	@ (8001474 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800143e:	1dba      	adds	r2, r7, #6
 8001440:	8812      	ldrh	r2, [r2, #0]
 8001442:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001444:	1dbb      	adds	r3, r7, #6
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	0018      	movs	r0, r3
 800144a:	f000 f815 	bl	8001478 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	1dba      	adds	r2, r7, #6
 8001454:	8812      	ldrh	r2, [r2, #0]
 8001456:	4013      	ands	r3, r2
 8001458:	d008      	beq.n	800146c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800145c:	1dba      	adds	r2, r7, #6
 800145e:	8812      	ldrh	r2, [r2, #0]
 8001460:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001462:	1dbb      	adds	r3, r7, #6
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	0018      	movs	r0, r3
 8001468:	f7ff fb34 	bl	8000ad4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800146c:	46c0      	nop			@ (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b002      	add	sp, #8
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021800 	.word	0x40021800

08001478 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	0002      	movs	r2, r0
 8001480:	1dbb      	adds	r3, r7, #6
 8001482:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001484:	46c0      	nop			@ (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	b002      	add	sp, #8
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a19      	ldr	r2, [pc, #100]	@ (8001500 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800149a:	4013      	ands	r3, r2
 800149c:	0019      	movs	r1, r3
 800149e:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	2380      	movs	r3, #128	@ 0x80
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d11f      	bne.n	80014f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80014b0:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	0013      	movs	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	189b      	adds	r3, r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4912      	ldr	r1, [pc, #72]	@ (8001508 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80014be:	0018      	movs	r0, r3
 80014c0:	f7fe fe20 	bl	8000104 <__udivsi3>
 80014c4:	0003      	movs	r3, r0
 80014c6:	3301      	adds	r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ca:	e008      	b.n	80014de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	e001      	b.n	80014de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e009      	b.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014de:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014e0:	695a      	ldr	r2, [r3, #20]
 80014e2:	2380      	movs	r3, #128	@ 0x80
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	401a      	ands	r2, r3
 80014e8:	2380      	movs	r3, #128	@ 0x80
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d0ed      	beq.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	0018      	movs	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b004      	add	sp, #16
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	46c0      	nop			@ (mov r8, r8)
 80014fc:	40007000 	.word	0x40007000
 8001500:	fffff9ff 	.word	0xfffff9ff
 8001504:	20000000 	.word	0x20000000
 8001508:	000f4240 	.word	0x000f4240

0800150c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001510:	4b03      	ldr	r3, [pc, #12]	@ (8001520 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	23e0      	movs	r3, #224	@ 0xe0
 8001516:	01db      	lsls	r3, r3, #7
 8001518:	4013      	ands	r3, r2
}
 800151a:	0018      	movs	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000

08001524 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e2fe      	b.n	8001b34 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2201      	movs	r2, #1
 800153c:	4013      	ands	r3, r2
 800153e:	d100      	bne.n	8001542 <HAL_RCC_OscConfig+0x1e>
 8001540:	e07c      	b.n	800163c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001542:	4bc3      	ldr	r3, [pc, #780]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2238      	movs	r2, #56	@ 0x38
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800154c:	4bc0      	ldr	r3, [pc, #768]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2203      	movs	r2, #3
 8001552:	4013      	ands	r3, r2
 8001554:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	2b10      	cmp	r3, #16
 800155a:	d102      	bne.n	8001562 <HAL_RCC_OscConfig+0x3e>
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d002      	beq.n	8001568 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2b08      	cmp	r3, #8
 8001566:	d10b      	bne.n	8001580 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	4bb9      	ldr	r3, [pc, #740]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	029b      	lsls	r3, r3, #10
 8001570:	4013      	ands	r3, r2
 8001572:	d062      	beq.n	800163a <HAL_RCC_OscConfig+0x116>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d15e      	bne.n	800163a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e2d9      	b.n	8001b34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	2380      	movs	r3, #128	@ 0x80
 8001586:	025b      	lsls	r3, r3, #9
 8001588:	429a      	cmp	r2, r3
 800158a:	d107      	bne.n	800159c <HAL_RCC_OscConfig+0x78>
 800158c:	4bb0      	ldr	r3, [pc, #704]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4baf      	ldr	r3, [pc, #700]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 8001592:	2180      	movs	r1, #128	@ 0x80
 8001594:	0249      	lsls	r1, r1, #9
 8001596:	430a      	orrs	r2, r1
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	e020      	b.n	80015de <HAL_RCC_OscConfig+0xba>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	23a0      	movs	r3, #160	@ 0xa0
 80015a2:	02db      	lsls	r3, r3, #11
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d10e      	bne.n	80015c6 <HAL_RCC_OscConfig+0xa2>
 80015a8:	4ba9      	ldr	r3, [pc, #676]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4ba8      	ldr	r3, [pc, #672]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 80015ae:	2180      	movs	r1, #128	@ 0x80
 80015b0:	02c9      	lsls	r1, r1, #11
 80015b2:	430a      	orrs	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	4ba6      	ldr	r3, [pc, #664]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4ba5      	ldr	r3, [pc, #660]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 80015bc:	2180      	movs	r1, #128	@ 0x80
 80015be:	0249      	lsls	r1, r1, #9
 80015c0:	430a      	orrs	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e00b      	b.n	80015de <HAL_RCC_OscConfig+0xba>
 80015c6:	4ba2      	ldr	r3, [pc, #648]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4ba1      	ldr	r3, [pc, #644]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 80015cc:	49a1      	ldr	r1, [pc, #644]	@ (8001854 <HAL_RCC_OscConfig+0x330>)
 80015ce:	400a      	ands	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	4b9f      	ldr	r3, [pc, #636]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4b9e      	ldr	r3, [pc, #632]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 80015d8:	499f      	ldr	r1, [pc, #636]	@ (8001858 <HAL_RCC_OscConfig+0x334>)
 80015da:	400a      	ands	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d014      	beq.n	8001610 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e6:	f7ff fc8f 	bl	8000f08 <HAL_GetTick>
 80015ea:	0003      	movs	r3, r0
 80015ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff fc8a 	bl	8000f08 <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	@ 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e298      	b.n	8001b34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001602:	4b93      	ldr	r3, [pc, #588]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	2380      	movs	r3, #128	@ 0x80
 8001608:	029b      	lsls	r3, r3, #10
 800160a:	4013      	ands	r3, r2
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0xcc>
 800160e:	e015      	b.n	800163c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fc7a 	bl	8000f08 <HAL_GetTick>
 8001614:	0003      	movs	r3, r0
 8001616:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800161a:	f7ff fc75 	bl	8000f08 <HAL_GetTick>
 800161e:	0002      	movs	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b64      	cmp	r3, #100	@ 0x64
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e283      	b.n	8001b34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800162c:	4b88      	ldr	r3, [pc, #544]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2380      	movs	r3, #128	@ 0x80
 8001632:	029b      	lsls	r3, r3, #10
 8001634:	4013      	ands	r3, r2
 8001636:	d1f0      	bne.n	800161a <HAL_RCC_OscConfig+0xf6>
 8001638:	e000      	b.n	800163c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2202      	movs	r2, #2
 8001642:	4013      	ands	r3, r2
 8001644:	d100      	bne.n	8001648 <HAL_RCC_OscConfig+0x124>
 8001646:	e099      	b.n	800177c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001648:	4b81      	ldr	r3, [pc, #516]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2238      	movs	r2, #56	@ 0x38
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001652:	4b7f      	ldr	r3, [pc, #508]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2203      	movs	r2, #3
 8001658:	4013      	ands	r3, r2
 800165a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	2b10      	cmp	r3, #16
 8001660:	d102      	bne.n	8001668 <HAL_RCC_OscConfig+0x144>
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d002      	beq.n	800166e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d135      	bne.n	80016da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800166e:	4b78      	ldr	r3, [pc, #480]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	2380      	movs	r3, #128	@ 0x80
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4013      	ands	r3, r2
 8001678:	d005      	beq.n	8001686 <HAL_RCC_OscConfig+0x162>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e256      	b.n	8001b34 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001686:	4b72      	ldr	r3, [pc, #456]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4a74      	ldr	r2, [pc, #464]	@ (800185c <HAL_RCC_OscConfig+0x338>)
 800168c:	4013      	ands	r3, r2
 800168e:	0019      	movs	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	021a      	lsls	r2, r3, #8
 8001696:	4b6e      	ldr	r3, [pc, #440]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 8001698:	430a      	orrs	r2, r1
 800169a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d112      	bne.n	80016c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016a2:	4b6b      	ldr	r3, [pc, #428]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a6e      	ldr	r2, [pc, #440]	@ (8001860 <HAL_RCC_OscConfig+0x33c>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	0019      	movs	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	4b67      	ldr	r3, [pc, #412]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 80016b2:	430a      	orrs	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80016b6:	4b66      	ldr	r3, [pc, #408]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	0adb      	lsrs	r3, r3, #11
 80016bc:	2207      	movs	r2, #7
 80016be:	4013      	ands	r3, r2
 80016c0:	4a68      	ldr	r2, [pc, #416]	@ (8001864 <HAL_RCC_OscConfig+0x340>)
 80016c2:	40da      	lsrs	r2, r3
 80016c4:	4b68      	ldr	r3, [pc, #416]	@ (8001868 <HAL_RCC_OscConfig+0x344>)
 80016c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016c8:	4b68      	ldr	r3, [pc, #416]	@ (800186c <HAL_RCC_OscConfig+0x348>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	0018      	movs	r0, r3
 80016ce:	f7ff fbbf 	bl	8000e50 <HAL_InitTick>
 80016d2:	1e03      	subs	r3, r0, #0
 80016d4:	d051      	beq.n	800177a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e22c      	b.n	8001b34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d030      	beq.n	8001744 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001860 <HAL_RCC_OscConfig+0x33c>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	0019      	movs	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	4b57      	ldr	r3, [pc, #348]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 80016f2:	430a      	orrs	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80016f6:	4b56      	ldr	r3, [pc, #344]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4b55      	ldr	r3, [pc, #340]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 80016fc:	2180      	movs	r1, #128	@ 0x80
 80016fe:	0049      	lsls	r1, r1, #1
 8001700:	430a      	orrs	r2, r1
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff fc00 	bl	8000f08 <HAL_GetTick>
 8001708:	0003      	movs	r3, r0
 800170a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170e:	f7ff fbfb 	bl	8000f08 <HAL_GetTick>
 8001712:	0002      	movs	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e209      	b.n	8001b34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001720:	4b4b      	ldr	r3, [pc, #300]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	2380      	movs	r3, #128	@ 0x80
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	4013      	ands	r3, r2
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b48      	ldr	r3, [pc, #288]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4a4a      	ldr	r2, [pc, #296]	@ (800185c <HAL_RCC_OscConfig+0x338>)
 8001732:	4013      	ands	r3, r2
 8001734:	0019      	movs	r1, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	021a      	lsls	r2, r3, #8
 800173c:	4b44      	ldr	r3, [pc, #272]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 800173e:	430a      	orrs	r2, r1
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	e01b      	b.n	800177c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001744:	4b42      	ldr	r3, [pc, #264]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b41      	ldr	r3, [pc, #260]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 800174a:	4949      	ldr	r1, [pc, #292]	@ (8001870 <HAL_RCC_OscConfig+0x34c>)
 800174c:	400a      	ands	r2, r1
 800174e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fbda 	bl	8000f08 <HAL_GetTick>
 8001754:	0003      	movs	r3, r0
 8001756:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175a:	f7ff fbd5 	bl	8000f08 <HAL_GetTick>
 800175e:	0002      	movs	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e1e3      	b.n	8001b34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800176c:	4b38      	ldr	r3, [pc, #224]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	4013      	ands	r3, r2
 8001776:	d1f0      	bne.n	800175a <HAL_RCC_OscConfig+0x236>
 8001778:	e000      	b.n	800177c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800177a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2208      	movs	r2, #8
 8001782:	4013      	ands	r3, r2
 8001784:	d047      	beq.n	8001816 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001786:	4b32      	ldr	r3, [pc, #200]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2238      	movs	r2, #56	@ 0x38
 800178c:	4013      	ands	r3, r2
 800178e:	2b18      	cmp	r3, #24
 8001790:	d10a      	bne.n	80017a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001792:	4b2f      	ldr	r3, [pc, #188]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 8001794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001796:	2202      	movs	r2, #2
 8001798:	4013      	ands	r3, r2
 800179a:	d03c      	beq.n	8001816 <HAL_RCC_OscConfig+0x2f2>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d138      	bne.n	8001816 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e1c5      	b.n	8001b34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d019      	beq.n	80017e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80017b0:	4b27      	ldr	r3, [pc, #156]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017b4:	4b26      	ldr	r3, [pc, #152]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 80017b6:	2101      	movs	r1, #1
 80017b8:	430a      	orrs	r2, r1
 80017ba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017bc:	f7ff fba4 	bl	8000f08 <HAL_GetTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c6:	f7ff fb9f 	bl	8000f08 <HAL_GetTick>
 80017ca:	0002      	movs	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e1ad      	b.n	8001b34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 80017da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017dc:	2202      	movs	r2, #2
 80017de:	4013      	ands	r3, r2
 80017e0:	d0f1      	beq.n	80017c6 <HAL_RCC_OscConfig+0x2a2>
 80017e2:	e018      	b.n	8001816 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80017e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 80017e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017e8:	4b19      	ldr	r3, [pc, #100]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 80017ea:	2101      	movs	r1, #1
 80017ec:	438a      	bics	r2, r1
 80017ee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff fb8a 	bl	8000f08 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017fa:	f7ff fb85 	bl	8000f08 <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e193      	b.n	8001b34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800180c:	4b10      	ldr	r3, [pc, #64]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 800180e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001810:	2202      	movs	r2, #2
 8001812:	4013      	ands	r3, r2
 8001814:	d1f1      	bne.n	80017fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2204      	movs	r2, #4
 800181c:	4013      	ands	r3, r2
 800181e:	d100      	bne.n	8001822 <HAL_RCC_OscConfig+0x2fe>
 8001820:	e0c6      	b.n	80019b0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001822:	231f      	movs	r3, #31
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800182a:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2238      	movs	r2, #56	@ 0x38
 8001830:	4013      	ands	r3, r2
 8001832:	2b20      	cmp	r3, #32
 8001834:	d11e      	bne.n	8001874 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001836:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <HAL_RCC_OscConfig+0x32c>)
 8001838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800183a:	2202      	movs	r2, #2
 800183c:	4013      	ands	r3, r2
 800183e:	d100      	bne.n	8001842 <HAL_RCC_OscConfig+0x31e>
 8001840:	e0b6      	b.n	80019b0 <HAL_RCC_OscConfig+0x48c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d000      	beq.n	800184c <HAL_RCC_OscConfig+0x328>
 800184a:	e0b1      	b.n	80019b0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e171      	b.n	8001b34 <HAL_RCC_OscConfig+0x610>
 8001850:	40021000 	.word	0x40021000
 8001854:	fffeffff 	.word	0xfffeffff
 8001858:	fffbffff 	.word	0xfffbffff
 800185c:	ffff80ff 	.word	0xffff80ff
 8001860:	ffffc7ff 	.word	0xffffc7ff
 8001864:	00f42400 	.word	0x00f42400
 8001868:	20000000 	.word	0x20000000
 800186c:	20000004 	.word	0x20000004
 8001870:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001874:	4bb1      	ldr	r3, [pc, #708]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001878:	2380      	movs	r3, #128	@ 0x80
 800187a:	055b      	lsls	r3, r3, #21
 800187c:	4013      	ands	r3, r2
 800187e:	d101      	bne.n	8001884 <HAL_RCC_OscConfig+0x360>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <HAL_RCC_OscConfig+0x362>
 8001884:	2300      	movs	r3, #0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d011      	beq.n	80018ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	4bac      	ldr	r3, [pc, #688]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 800188c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800188e:	4bab      	ldr	r3, [pc, #684]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001890:	2180      	movs	r1, #128	@ 0x80
 8001892:	0549      	lsls	r1, r1, #21
 8001894:	430a      	orrs	r2, r1
 8001896:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001898:	4ba8      	ldr	r3, [pc, #672]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 800189a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800189c:	2380      	movs	r3, #128	@ 0x80
 800189e:	055b      	lsls	r3, r3, #21
 80018a0:	4013      	ands	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80018a6:	231f      	movs	r3, #31
 80018a8:	18fb      	adds	r3, r7, r3
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ae:	4ba4      	ldr	r3, [pc, #656]	@ (8001b40 <HAL_RCC_OscConfig+0x61c>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	2380      	movs	r3, #128	@ 0x80
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4013      	ands	r3, r2
 80018b8:	d11a      	bne.n	80018f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018ba:	4ba1      	ldr	r3, [pc, #644]	@ (8001b40 <HAL_RCC_OscConfig+0x61c>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	4ba0      	ldr	r3, [pc, #640]	@ (8001b40 <HAL_RCC_OscConfig+0x61c>)
 80018c0:	2180      	movs	r1, #128	@ 0x80
 80018c2:	0049      	lsls	r1, r1, #1
 80018c4:	430a      	orrs	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80018c8:	f7ff fb1e 	bl	8000f08 <HAL_GetTick>
 80018cc:	0003      	movs	r3, r0
 80018ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d2:	f7ff fb19 	bl	8000f08 <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e127      	b.n	8001b34 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e4:	4b96      	ldr	r3, [pc, #600]	@ (8001b40 <HAL_RCC_OscConfig+0x61c>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2380      	movs	r3, #128	@ 0x80
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4013      	ands	r3, r2
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d106      	bne.n	8001906 <HAL_RCC_OscConfig+0x3e2>
 80018f8:	4b90      	ldr	r3, [pc, #576]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 80018fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018fc:	4b8f      	ldr	r3, [pc, #572]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 80018fe:	2101      	movs	r1, #1
 8001900:	430a      	orrs	r2, r1
 8001902:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001904:	e01c      	b.n	8001940 <HAL_RCC_OscConfig+0x41c>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b05      	cmp	r3, #5
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0x404>
 800190e:	4b8b      	ldr	r3, [pc, #556]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001910:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001912:	4b8a      	ldr	r3, [pc, #552]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001914:	2104      	movs	r1, #4
 8001916:	430a      	orrs	r2, r1
 8001918:	65da      	str	r2, [r3, #92]	@ 0x5c
 800191a:	4b88      	ldr	r3, [pc, #544]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 800191c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800191e:	4b87      	ldr	r3, [pc, #540]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001920:	2101      	movs	r1, #1
 8001922:	430a      	orrs	r2, r1
 8001924:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001926:	e00b      	b.n	8001940 <HAL_RCC_OscConfig+0x41c>
 8001928:	4b84      	ldr	r3, [pc, #528]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 800192a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800192c:	4b83      	ldr	r3, [pc, #524]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 800192e:	2101      	movs	r1, #1
 8001930:	438a      	bics	r2, r1
 8001932:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001934:	4b81      	ldr	r3, [pc, #516]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001936:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001938:	4b80      	ldr	r3, [pc, #512]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 800193a:	2104      	movs	r1, #4
 800193c:	438a      	bics	r2, r1
 800193e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d014      	beq.n	8001972 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff fade 	bl	8000f08 <HAL_GetTick>
 800194c:	0003      	movs	r3, r0
 800194e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001950:	e009      	b.n	8001966 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001952:	f7ff fad9 	bl	8000f08 <HAL_GetTick>
 8001956:	0002      	movs	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	4a79      	ldr	r2, [pc, #484]	@ (8001b44 <HAL_RCC_OscConfig+0x620>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e0e6      	b.n	8001b34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001966:	4b75      	ldr	r3, [pc, #468]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800196a:	2202      	movs	r2, #2
 800196c:	4013      	ands	r3, r2
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x42e>
 8001970:	e013      	b.n	800199a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001972:	f7ff fac9 	bl	8000f08 <HAL_GetTick>
 8001976:	0003      	movs	r3, r0
 8001978:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800197a:	e009      	b.n	8001990 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197c:	f7ff fac4 	bl	8000f08 <HAL_GetTick>
 8001980:	0002      	movs	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	4a6f      	ldr	r2, [pc, #444]	@ (8001b44 <HAL_RCC_OscConfig+0x620>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e0d1      	b.n	8001b34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001990:	4b6a      	ldr	r3, [pc, #424]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001994:	2202      	movs	r2, #2
 8001996:	4013      	ands	r3, r2
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800199a:	231f      	movs	r3, #31
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d105      	bne.n	80019b0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80019a4:	4b65      	ldr	r3, [pc, #404]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 80019a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019a8:	4b64      	ldr	r3, [pc, #400]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 80019aa:	4967      	ldr	r1, [pc, #412]	@ (8001b48 <HAL_RCC_OscConfig+0x624>)
 80019ac:	400a      	ands	r2, r1
 80019ae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d100      	bne.n	80019ba <HAL_RCC_OscConfig+0x496>
 80019b8:	e0bb      	b.n	8001b32 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ba:	4b60      	ldr	r3, [pc, #384]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2238      	movs	r2, #56	@ 0x38
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b10      	cmp	r3, #16
 80019c4:	d100      	bne.n	80019c8 <HAL_RCC_OscConfig+0x4a4>
 80019c6:	e07b      	b.n	8001ac0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69db      	ldr	r3, [r3, #28]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d156      	bne.n	8001a7e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d0:	4b5a      	ldr	r3, [pc, #360]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b59      	ldr	r3, [pc, #356]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 80019d6:	495d      	ldr	r1, [pc, #372]	@ (8001b4c <HAL_RCC_OscConfig+0x628>)
 80019d8:	400a      	ands	r2, r1
 80019da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7ff fa94 	bl	8000f08 <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e6:	f7ff fa8f 	bl	8000f08 <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e09d      	b.n	8001b34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f8:	4b50      	ldr	r3, [pc, #320]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	049b      	lsls	r3, r3, #18
 8001a00:	4013      	ands	r3, r2
 8001a02:	d1f0      	bne.n	80019e6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a04:	4b4d      	ldr	r3, [pc, #308]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	4a51      	ldr	r2, [pc, #324]	@ (8001b50 <HAL_RCC_OscConfig+0x62c>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1a      	ldr	r2, [r3, #32]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a30:	431a      	orrs	r2, r3
 8001a32:	4b42      	ldr	r3, [pc, #264]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001a34:	430a      	orrs	r2, r1
 8001a36:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a38:	4b40      	ldr	r3, [pc, #256]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b3f      	ldr	r3, [pc, #252]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001a3e:	2180      	movs	r1, #128	@ 0x80
 8001a40:	0449      	lsls	r1, r1, #17
 8001a42:	430a      	orrs	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001a46:	4b3d      	ldr	r3, [pc, #244]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001a4c:	2180      	movs	r1, #128	@ 0x80
 8001a4e:	0549      	lsls	r1, r1, #21
 8001a50:	430a      	orrs	r2, r1
 8001a52:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff fa58 	bl	8000f08 <HAL_GetTick>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5e:	f7ff fa53 	bl	8000f08 <HAL_GetTick>
 8001a62:	0002      	movs	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e061      	b.n	8001b34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a70:	4b32      	ldr	r3, [pc, #200]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2380      	movs	r3, #128	@ 0x80
 8001a76:	049b      	lsls	r3, r3, #18
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCC_OscConfig+0x53a>
 8001a7c:	e059      	b.n	8001b32 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	4b2e      	ldr	r3, [pc, #184]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001a84:	4931      	ldr	r1, [pc, #196]	@ (8001b4c <HAL_RCC_OscConfig+0x628>)
 8001a86:	400a      	ands	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fa3d 	bl	8000f08 <HAL_GetTick>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff fa38 	bl	8000f08 <HAL_GetTick>
 8001a98:	0002      	movs	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e046      	b.n	8001b34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa6:	4b25      	ldr	r3, [pc, #148]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	2380      	movs	r3, #128	@ 0x80
 8001aac:	049b      	lsls	r3, r3, #18
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001ab2:	4b22      	ldr	r3, [pc, #136]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	4b21      	ldr	r3, [pc, #132]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001ab8:	4926      	ldr	r1, [pc, #152]	@ (8001b54 <HAL_RCC_OscConfig+0x630>)
 8001aba:	400a      	ands	r2, r1
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	e038      	b.n	8001b32 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e033      	b.n	8001b34 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001acc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b3c <HAL_RCC_OscConfig+0x618>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d126      	bne.n	8001b2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2270      	movs	r2, #112	@ 0x70
 8001ae4:	401a      	ands	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d11f      	bne.n	8001b2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	23fe      	movs	r3, #254	@ 0xfe
 8001af2:	01db      	lsls	r3, r3, #7
 8001af4:	401a      	ands	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d116      	bne.n	8001b2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	23f8      	movs	r3, #248	@ 0xf8
 8001b04:	039b      	lsls	r3, r3, #14
 8001b06:	401a      	ands	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d10e      	bne.n	8001b2e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	23e0      	movs	r3, #224	@ 0xe0
 8001b14:	051b      	lsls	r3, r3, #20
 8001b16:	401a      	ands	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d106      	bne.n	8001b2e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	0f5b      	lsrs	r3, r3, #29
 8001b24:	075a      	lsls	r2, r3, #29
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d001      	beq.n	8001b32 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b008      	add	sp, #32
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40007000 	.word	0x40007000
 8001b44:	00001388 	.word	0x00001388
 8001b48:	efffffff 	.word	0xefffffff
 8001b4c:	feffffff 	.word	0xfeffffff
 8001b50:	11c1808c 	.word	0x11c1808c
 8001b54:	eefefffc 	.word	0xeefefffc

08001b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0e9      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b76      	ldr	r3, [pc, #472]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2207      	movs	r2, #7
 8001b72:	4013      	ands	r3, r2
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d91e      	bls.n	8001bb8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b73      	ldr	r3, [pc, #460]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2207      	movs	r2, #7
 8001b80:	4393      	bics	r3, r2
 8001b82:	0019      	movs	r1, r3
 8001b84:	4b70      	ldr	r3, [pc, #448]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b8c:	f7ff f9bc 	bl	8000f08 <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b94:	e009      	b.n	8001baa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b96:	f7ff f9b7 	bl	8000f08 <HAL_GetTick>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	4a6a      	ldr	r2, [pc, #424]	@ (8001d4c <HAL_RCC_ClockConfig+0x1f4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e0ca      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001baa:	4b67      	ldr	r3, [pc, #412]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2207      	movs	r2, #7
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d1ee      	bne.n	8001b96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d015      	beq.n	8001bee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d006      	beq.n	8001bda <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bcc:	4b60      	ldr	r3, [pc, #384]	@ (8001d50 <HAL_RCC_ClockConfig+0x1f8>)
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	4b5f      	ldr	r3, [pc, #380]	@ (8001d50 <HAL_RCC_ClockConfig+0x1f8>)
 8001bd2:	21e0      	movs	r1, #224	@ 0xe0
 8001bd4:	01c9      	lsls	r1, r1, #7
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bda:	4b5d      	ldr	r3, [pc, #372]	@ (8001d50 <HAL_RCC_ClockConfig+0x1f8>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	4a5d      	ldr	r2, [pc, #372]	@ (8001d54 <HAL_RCC_ClockConfig+0x1fc>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	0019      	movs	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	4b59      	ldr	r3, [pc, #356]	@ (8001d50 <HAL_RCC_ClockConfig+0x1f8>)
 8001bea:	430a      	orrs	r2, r1
 8001bec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d057      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d107      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c00:	4b53      	ldr	r3, [pc, #332]	@ (8001d50 <HAL_RCC_ClockConfig+0x1f8>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	2380      	movs	r3, #128	@ 0x80
 8001c06:	029b      	lsls	r3, r3, #10
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d12b      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e097      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d107      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c18:	4b4d      	ldr	r3, [pc, #308]	@ (8001d50 <HAL_RCC_ClockConfig+0x1f8>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2380      	movs	r3, #128	@ 0x80
 8001c1e:	049b      	lsls	r3, r3, #18
 8001c20:	4013      	ands	r3, r2
 8001c22:	d11f      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e08b      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d107      	bne.n	8001c40 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c30:	4b47      	ldr	r3, [pc, #284]	@ (8001d50 <HAL_RCC_ClockConfig+0x1f8>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	2380      	movs	r3, #128	@ 0x80
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d113      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e07f      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c48:	4b41      	ldr	r3, [pc, #260]	@ (8001d50 <HAL_RCC_ClockConfig+0x1f8>)
 8001c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d108      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e074      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c56:	4b3e      	ldr	r3, [pc, #248]	@ (8001d50 <HAL_RCC_ClockConfig+0x1f8>)
 8001c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e06d      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c64:	4b3a      	ldr	r3, [pc, #232]	@ (8001d50 <HAL_RCC_ClockConfig+0x1f8>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2207      	movs	r2, #7
 8001c6a:	4393      	bics	r3, r2
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	4b37      	ldr	r3, [pc, #220]	@ (8001d50 <HAL_RCC_ClockConfig+0x1f8>)
 8001c74:	430a      	orrs	r2, r1
 8001c76:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c78:	f7ff f946 	bl	8000f08 <HAL_GetTick>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c80:	e009      	b.n	8001c96 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c82:	f7ff f941 	bl	8000f08 <HAL_GetTick>
 8001c86:	0002      	movs	r2, r0
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	4a2f      	ldr	r2, [pc, #188]	@ (8001d4c <HAL_RCC_ClockConfig+0x1f4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e054      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	4b2e      	ldr	r3, [pc, #184]	@ (8001d50 <HAL_RCC_ClockConfig+0x1f8>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2238      	movs	r2, #56	@ 0x38
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d1ec      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b27      	ldr	r3, [pc, #156]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2207      	movs	r2, #7
 8001cae:	4013      	ands	r3, r2
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d21e      	bcs.n	8001cf4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b24      	ldr	r3, [pc, #144]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2207      	movs	r2, #7
 8001cbc:	4393      	bics	r3, r2
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	4b21      	ldr	r3, [pc, #132]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cc8:	f7ff f91e 	bl	8000f08 <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cd0:	e009      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd2:	f7ff f919 	bl	8000f08 <HAL_GetTick>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d4c <HAL_RCC_ClockConfig+0x1f4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e02c      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ce6:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2207      	movs	r2, #7
 8001cec:	4013      	ands	r3, r2
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d1ee      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d009      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cfe:	4b14      	ldr	r3, [pc, #80]	@ (8001d50 <HAL_RCC_ClockConfig+0x1f8>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	4a15      	ldr	r2, [pc, #84]	@ (8001d58 <HAL_RCC_ClockConfig+0x200>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	0019      	movs	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <HAL_RCC_ClockConfig+0x1f8>)
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d12:	f000 f829 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001d16:	0001      	movs	r1, r0
 8001d18:	4b0d      	ldr	r3, [pc, #52]	@ (8001d50 <HAL_RCC_ClockConfig+0x1f8>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	220f      	movs	r2, #15
 8001d20:	401a      	ands	r2, r3
 8001d22:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <HAL_RCC_ClockConfig+0x204>)
 8001d24:	0092      	lsls	r2, r2, #2
 8001d26:	58d3      	ldr	r3, [r2, r3]
 8001d28:	221f      	movs	r2, #31
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	000a      	movs	r2, r1
 8001d2e:	40da      	lsrs	r2, r3
 8001d30:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <HAL_RCC_ClockConfig+0x208>)
 8001d32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d34:	4b0b      	ldr	r3, [pc, #44]	@ (8001d64 <HAL_RCC_ClockConfig+0x20c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f7ff f889 	bl	8000e50 <HAL_InitTick>
 8001d3e:	0003      	movs	r3, r0
}
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b004      	add	sp, #16
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40022000 	.word	0x40022000
 8001d4c:	00001388 	.word	0x00001388
 8001d50:	40021000 	.word	0x40021000
 8001d54:	fffff0ff 	.word	0xfffff0ff
 8001d58:	ffff8fff 	.word	0xffff8fff
 8001d5c:	080040bc 	.word	0x080040bc
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000004 	.word	0x20000004

08001d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2238      	movs	r2, #56	@ 0x38
 8001d74:	4013      	ands	r3, r2
 8001d76:	d10f      	bne.n	8001d98 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001d78:	4b39      	ldr	r3, [pc, #228]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	0adb      	lsrs	r3, r3, #11
 8001d7e:	2207      	movs	r2, #7
 8001d80:	4013      	ands	r3, r2
 8001d82:	2201      	movs	r2, #1
 8001d84:	409a      	lsls	r2, r3
 8001d86:	0013      	movs	r3, r2
 8001d88:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001d8a:	6839      	ldr	r1, [r7, #0]
 8001d8c:	4835      	ldr	r0, [pc, #212]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d8e:	f7fe f9b9 	bl	8000104 <__udivsi3>
 8001d92:	0003      	movs	r3, r0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	e05d      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d98:	4b31      	ldr	r3, [pc, #196]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2238      	movs	r2, #56	@ 0x38
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d102      	bne.n	8001daa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001da4:	4b30      	ldr	r3, [pc, #192]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x100>)
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	e054      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001daa:	4b2d      	ldr	r3, [pc, #180]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2238      	movs	r2, #56	@ 0x38
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b10      	cmp	r3, #16
 8001db4:	d138      	bne.n	8001e28 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001db6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	2203      	movs	r2, #3
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dc0:	4b27      	ldr	r3, [pc, #156]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	2207      	movs	r2, #7
 8001dc8:	4013      	ands	r3, r2
 8001dca:	3301      	adds	r3, #1
 8001dcc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d10d      	bne.n	8001df0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	4824      	ldr	r0, [pc, #144]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x100>)
 8001dd8:	f7fe f994 	bl	8000104 <__udivsi3>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	0019      	movs	r1, r3
 8001de0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	227f      	movs	r2, #127	@ 0x7f
 8001de8:	4013      	ands	r3, r2
 8001dea:	434b      	muls	r3, r1
 8001dec:	617b      	str	r3, [r7, #20]
        break;
 8001dee:	e00d      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	481c      	ldr	r0, [pc, #112]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001df4:	f7fe f986 	bl	8000104 <__udivsi3>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	4b18      	ldr	r3, [pc, #96]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	227f      	movs	r2, #127	@ 0x7f
 8001e04:	4013      	ands	r3, r2
 8001e06:	434b      	muls	r3, r1
 8001e08:	617b      	str	r3, [r7, #20]
        break;
 8001e0a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001e0c:	4b14      	ldr	r3, [pc, #80]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	0f5b      	lsrs	r3, r3, #29
 8001e12:	2207      	movs	r2, #7
 8001e14:	4013      	ands	r3, r2
 8001e16:	3301      	adds	r3, #1
 8001e18:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	6978      	ldr	r0, [r7, #20]
 8001e1e:	f7fe f971 	bl	8000104 <__udivsi3>
 8001e22:	0003      	movs	r3, r0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	e015      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e28:	4b0d      	ldr	r3, [pc, #52]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2238      	movs	r2, #56	@ 0x38
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b20      	cmp	r3, #32
 8001e32:	d103      	bne.n	8001e3c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001e34:	2380      	movs	r3, #128	@ 0x80
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	e00b      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e3c:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2238      	movs	r2, #56	@ 0x38
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b18      	cmp	r3, #24
 8001e46:	d103      	bne.n	8001e50 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001e48:	23fa      	movs	r3, #250	@ 0xfa
 8001e4a:	01db      	lsls	r3, r3, #7
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	e001      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e54:	693b      	ldr	r3, [r7, #16]
}
 8001e56:	0018      	movs	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b006      	add	sp, #24
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	46c0      	nop			@ (mov r8, r8)
 8001e60:	40021000 	.word	0x40021000
 8001e64:	00f42400 	.word	0x00f42400
 8001e68:	007a1200 	.word	0x007a1200

08001e6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e70:	4b02      	ldr	r3, [pc, #8]	@ (8001e7c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	46c0      	nop			@ (mov r8, r8)
 8001e7c:	20000000 	.word	0x20000000

08001e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e80:	b5b0      	push	{r4, r5, r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001e84:	f7ff fff2 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 8001e88:	0004      	movs	r4, r0
 8001e8a:	f7ff fb3f 	bl	800150c <LL_RCC_GetAPB1Prescaler>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	0b1a      	lsrs	r2, r3, #12
 8001e92:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e94:	0092      	lsls	r2, r2, #2
 8001e96:	58d3      	ldr	r3, [r2, r3]
 8001e98:	221f      	movs	r2, #31
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	40dc      	lsrs	r4, r3
 8001e9e:	0023      	movs	r3, r4
}
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	080040fc 	.word	0x080040fc

08001eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001eb4:	2313      	movs	r3, #19
 8001eb6:	18fb      	adds	r3, r7, r3
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ebc:	2312      	movs	r3, #18
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2380      	movs	r3, #128	@ 0x80
 8001eca:	029b      	lsls	r3, r3, #10
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d100      	bne.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ed0:	e0a3      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed2:	2011      	movs	r0, #17
 8001ed4:	183b      	adds	r3, r7, r0
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eda:	4ba5      	ldr	r3, [pc, #660]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001edc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ede:	2380      	movs	r3, #128	@ 0x80
 8001ee0:	055b      	lsls	r3, r3, #21
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d110      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	4ba2      	ldr	r3, [pc, #648]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ee8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eea:	4ba1      	ldr	r3, [pc, #644]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001eec:	2180      	movs	r1, #128	@ 0x80
 8001eee:	0549      	lsls	r1, r1, #21
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ef4:	4b9e      	ldr	r3, [pc, #632]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ef6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ef8:	2380      	movs	r3, #128	@ 0x80
 8001efa:	055b      	lsls	r3, r3, #21
 8001efc:	4013      	ands	r3, r2
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f02:	183b      	adds	r3, r7, r0
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f08:	4b9a      	ldr	r3, [pc, #616]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b99      	ldr	r3, [pc, #612]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001f0e:	2180      	movs	r1, #128	@ 0x80
 8001f10:	0049      	lsls	r1, r1, #1
 8001f12:	430a      	orrs	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f16:	f7fe fff7 	bl	8000f08 <HAL_GetTick>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f1e:	e00b      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f20:	f7fe fff2 	bl	8000f08 <HAL_GetTick>
 8001f24:	0002      	movs	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d904      	bls.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001f2e:	2313      	movs	r3, #19
 8001f30:	18fb      	adds	r3, r7, r3
 8001f32:	2203      	movs	r2, #3
 8001f34:	701a      	strb	r2, [r3, #0]
        break;
 8001f36:	e005      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f38:	4b8e      	ldr	r3, [pc, #568]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	2380      	movs	r3, #128	@ 0x80
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4013      	ands	r3, r2
 8001f42:	d0ed      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001f44:	2313      	movs	r3, #19
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d154      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f4e:	4b88      	ldr	r3, [pc, #544]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f52:	23c0      	movs	r3, #192	@ 0xc0
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4013      	ands	r3, r2
 8001f58:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d019      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d014      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f6a:	4b81      	ldr	r3, [pc, #516]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6e:	4a82      	ldr	r2, [pc, #520]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f74:	4b7e      	ldr	r3, [pc, #504]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f78:	4b7d      	ldr	r3, [pc, #500]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f7a:	2180      	movs	r1, #128	@ 0x80
 8001f7c:	0249      	lsls	r1, r1, #9
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f82:	4b7b      	ldr	r3, [pc, #492]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f86:	4b7a      	ldr	r3, [pc, #488]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f88:	497c      	ldr	r1, [pc, #496]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f8e:	4b78      	ldr	r3, [pc, #480]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2201      	movs	r2, #1
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d016      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7fe ffb4 	bl	8000f08 <HAL_GetTick>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa4:	e00c      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f7fe ffaf 	bl	8000f08 <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	4a73      	ldr	r2, [pc, #460]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d904      	bls.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001fb6:	2313      	movs	r3, #19
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	2203      	movs	r2, #3
 8001fbc:	701a      	strb	r2, [r3, #0]
            break;
 8001fbe:	e004      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc0:	4b6b      	ldr	r3, [pc, #428]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d0ed      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001fca:	2313      	movs	r3, #19
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10a      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fd4:	4b66      	ldr	r3, [pc, #408]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd8:	4a67      	ldr	r2, [pc, #412]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	0019      	movs	r1, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fe2:	4b63      	ldr	r3, [pc, #396]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fe8:	e00c      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fea:	2312      	movs	r3, #18
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	2213      	movs	r2, #19
 8001ff0:	18ba      	adds	r2, r7, r2
 8001ff2:	7812      	ldrb	r2, [r2, #0]
 8001ff4:	701a      	strb	r2, [r3, #0]
 8001ff6:	e005      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ff8:	2312      	movs	r3, #18
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	2213      	movs	r2, #19
 8001ffe:	18ba      	adds	r2, r7, r2
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002004:	2311      	movs	r3, #17
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d105      	bne.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200e:	4b58      	ldr	r3, [pc, #352]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002010:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002012:	4b57      	ldr	r3, [pc, #348]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002014:	495b      	ldr	r1, [pc, #364]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002016:	400a      	ands	r2, r1
 8002018:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2201      	movs	r2, #1
 8002020:	4013      	ands	r3, r2
 8002022:	d009      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002024:	4b52      	ldr	r3, [pc, #328]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002028:	2203      	movs	r2, #3
 800202a:	4393      	bics	r3, r2
 800202c:	0019      	movs	r1, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	4b4f      	ldr	r3, [pc, #316]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002034:	430a      	orrs	r2, r1
 8002036:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2210      	movs	r2, #16
 800203e:	4013      	ands	r3, r2
 8002040:	d009      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002042:	4b4b      	ldr	r3, [pc, #300]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002046:	4a50      	ldr	r2, [pc, #320]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002048:	4013      	ands	r3, r2
 800204a:	0019      	movs	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	4b47      	ldr	r3, [pc, #284]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002052:	430a      	orrs	r2, r1
 8002054:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	2380      	movs	r3, #128	@ 0x80
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4013      	ands	r3, r2
 8002060:	d009      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002062:	4b43      	ldr	r3, [pc, #268]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002066:	4a49      	ldr	r2, [pc, #292]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002068:	4013      	ands	r3, r2
 800206a:	0019      	movs	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	4b3f      	ldr	r3, [pc, #252]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002072:	430a      	orrs	r2, r1
 8002074:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	2380      	movs	r3, #128	@ 0x80
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4013      	ands	r3, r2
 8002080:	d009      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002082:	4b3b      	ldr	r3, [pc, #236]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002086:	4a42      	ldr	r2, [pc, #264]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002088:	4013      	ands	r3, r2
 800208a:	0019      	movs	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699a      	ldr	r2, [r3, #24]
 8002090:	4b37      	ldr	r3, [pc, #220]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002092:	430a      	orrs	r2, r1
 8002094:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2220      	movs	r2, #32
 800209c:	4013      	ands	r3, r2
 800209e:	d009      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020a0:	4b33      	ldr	r3, [pc, #204]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a4:	4a3b      	ldr	r2, [pc, #236]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	0019      	movs	r1, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	4b30      	ldr	r3, [pc, #192]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020b0:	430a      	orrs	r2, r1
 80020b2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2380      	movs	r3, #128	@ 0x80
 80020ba:	01db      	lsls	r3, r3, #7
 80020bc:	4013      	ands	r3, r2
 80020be:	d015      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	0899      	lsrs	r1, r3, #2
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69da      	ldr	r2, [r3, #28]
 80020cc:	4b28      	ldr	r3, [pc, #160]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020ce:	430a      	orrs	r2, r1
 80020d0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69da      	ldr	r2, [r3, #28]
 80020d6:	2380      	movs	r3, #128	@ 0x80
 80020d8:	05db      	lsls	r3, r3, #23
 80020da:	429a      	cmp	r2, r3
 80020dc:	d106      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020de:	4b24      	ldr	r3, [pc, #144]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	4b23      	ldr	r3, [pc, #140]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020e4:	2180      	movs	r1, #128	@ 0x80
 80020e6:	0249      	lsls	r1, r1, #9
 80020e8:	430a      	orrs	r2, r1
 80020ea:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	2380      	movs	r3, #128	@ 0x80
 80020f2:	039b      	lsls	r3, r3, #14
 80020f4:	4013      	ands	r3, r2
 80020f6:	d016      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80020f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fc:	4a26      	ldr	r2, [pc, #152]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80020fe:	4013      	ands	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1a      	ldr	r2, [r3, #32]
 8002106:	4b1a      	ldr	r3, [pc, #104]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002108:	430a      	orrs	r2, r1
 800210a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1a      	ldr	r2, [r3, #32]
 8002110:	2380      	movs	r3, #128	@ 0x80
 8002112:	03db      	lsls	r3, r3, #15
 8002114:	429a      	cmp	r2, r3
 8002116:	d106      	bne.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002118:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	4b14      	ldr	r3, [pc, #80]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800211e:	2180      	movs	r1, #128	@ 0x80
 8002120:	0449      	lsls	r1, r1, #17
 8002122:	430a      	orrs	r2, r1
 8002124:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	2380      	movs	r3, #128	@ 0x80
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	4013      	ands	r3, r2
 8002130:	d016      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002132:	4b0f      	ldr	r3, [pc, #60]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002136:	4a19      	ldr	r2, [pc, #100]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002138:	4013      	ands	r3, r2
 800213a:	0019      	movs	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002142:	430a      	orrs	r2, r1
 8002144:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	2380      	movs	r3, #128	@ 0x80
 800214c:	01db      	lsls	r3, r3, #7
 800214e:	429a      	cmp	r2, r3
 8002150:	d106      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002152:	4b07      	ldr	r3, [pc, #28]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002158:	2180      	movs	r1, #128	@ 0x80
 800215a:	0249      	lsls	r1, r1, #9
 800215c:	430a      	orrs	r2, r1
 800215e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002160:	2312      	movs	r3, #18
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	781b      	ldrb	r3, [r3, #0]
}
 8002166:	0018      	movs	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	b006      	add	sp, #24
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			@ (mov r8, r8)
 8002170:	40021000 	.word	0x40021000
 8002174:	40007000 	.word	0x40007000
 8002178:	fffffcff 	.word	0xfffffcff
 800217c:	fffeffff 	.word	0xfffeffff
 8002180:	00001388 	.word	0x00001388
 8002184:	efffffff 	.word	0xefffffff
 8002188:	fffff3ff 	.word	0xfffff3ff
 800218c:	fff3ffff 	.word	0xfff3ffff
 8002190:	ffcfffff 	.word	0xffcfffff
 8002194:	ffffcfff 	.word	0xffffcfff
 8002198:	ffbfffff 	.word	0xffbfffff
 800219c:	ffff3fff 	.word	0xffff3fff

080021a0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80021a0:	b5b0      	push	{r4, r5, r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80021a8:	230f      	movs	r3, #15
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	2201      	movs	r2, #1
 80021ae:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d100      	bne.n	80021b8 <HAL_RTC_Init+0x18>
 80021b6:	e08c      	b.n	80022d2 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2229      	movs	r2, #41	@ 0x29
 80021bc:	5c9b      	ldrb	r3, [r3, r2]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10b      	bne.n	80021dc <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2228      	movs	r2, #40	@ 0x28
 80021c8:	2100      	movs	r1, #0
 80021ca:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2288      	movs	r2, #136	@ 0x88
 80021d0:	0212      	lsls	r2, r2, #8
 80021d2:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	0018      	movs	r0, r3
 80021d8:	f7fe fcb8 	bl	8000b4c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2229      	movs	r2, #41	@ 0x29
 80021e0:	2102      	movs	r1, #2
 80021e2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2210      	movs	r2, #16
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b10      	cmp	r3, #16
 80021f0:	d062      	beq.n	80022b8 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	22ca      	movs	r2, #202	@ 0xca
 80021f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2253      	movs	r2, #83	@ 0x53
 8002200:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002202:	250f      	movs	r5, #15
 8002204:	197c      	adds	r4, r7, r5
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	0018      	movs	r0, r3
 800220a:	f000 fb4a 	bl	80028a2 <RTC_EnterInitMode>
 800220e:	0003      	movs	r3, r0
 8002210:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002212:	0028      	movs	r0, r5
 8002214:	183b      	adds	r3, r7, r0
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d12c      	bne.n	8002276 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699a      	ldr	r2, [r3, #24]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	492e      	ldr	r1, [pc, #184]	@ (80022e0 <HAL_RTC_Init+0x140>)
 8002228:	400a      	ands	r2, r1
 800222a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6999      	ldr	r1, [r3, #24]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6912      	ldr	r2, [r2, #16]
 8002252:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6919      	ldr	r1, [r3, #16]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	041a      	lsls	r2, r3, #16
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002268:	183c      	adds	r4, r7, r0
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	0018      	movs	r0, r3
 800226e:	f000 fb5b 	bl	8002928 <RTC_ExitInitMode>
 8002272:	0003      	movs	r3, r0
 8002274:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002276:	230f      	movs	r3, #15
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d116      	bne.n	80022ae <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699a      	ldr	r2, [r3, #24]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	00d2      	lsls	r2, r2, #3
 800228c:	08d2      	lsrs	r2, r2, #3
 800228e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6999      	ldr	r1, [r3, #24]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	22ff      	movs	r2, #255	@ 0xff
 80022b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80022b6:	e003      	b.n	80022c0 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80022b8:	230f      	movs	r3, #15
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80022c0:	230f      	movs	r3, #15
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d103      	bne.n	80022d2 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2229      	movs	r2, #41	@ 0x29
 80022ce:	2101      	movs	r1, #1
 80022d0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80022d2:	230f      	movs	r3, #15
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	781b      	ldrb	r3, [r3, #0]
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b004      	add	sp, #16
 80022de:	bdb0      	pop	{r4, r5, r7, pc}
 80022e0:	fb8fffbf 	.word	0xfb8fffbf

080022e4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80022e4:	b5b0      	push	{r4, r5, r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2228      	movs	r2, #40	@ 0x28
 80022f4:	5c9b      	ldrb	r3, [r3, r2]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_RTC_SetTime+0x1a>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e092      	b.n	8002424 <HAL_RTC_SetTime+0x140>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2228      	movs	r2, #40	@ 0x28
 8002302:	2101      	movs	r1, #1
 8002304:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2229      	movs	r2, #41	@ 0x29
 800230a:	2102      	movs	r1, #2
 800230c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	22ca      	movs	r2, #202	@ 0xca
 8002314:	625a      	str	r2, [r3, #36]	@ 0x24
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2253      	movs	r2, #83	@ 0x53
 800231c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800231e:	2513      	movs	r5, #19
 8002320:	197c      	adds	r4, r7, r5
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	0018      	movs	r0, r3
 8002326:	f000 fabc 	bl	80028a2 <RTC_EnterInitMode>
 800232a:	0003      	movs	r3, r0
 800232c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800232e:	197b      	adds	r3, r7, r5
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d162      	bne.n	80023fc <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d125      	bne.n	8002388 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2240      	movs	r2, #64	@ 0x40
 8002344:	4013      	ands	r3, r2
 8002346:	d102      	bne.n	800234e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2200      	movs	r2, #0
 800234c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	0018      	movs	r0, r3
 8002354:	f000 fb2c 	bl	80029b0 <RTC_ByteToBcd2>
 8002358:	0003      	movs	r3, r0
 800235a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	785b      	ldrb	r3, [r3, #1]
 8002360:	0018      	movs	r0, r3
 8002362:	f000 fb25 	bl	80029b0 <RTC_ByteToBcd2>
 8002366:	0003      	movs	r3, r0
 8002368:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800236a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	789b      	ldrb	r3, [r3, #2]
 8002370:	0018      	movs	r0, r3
 8002372:	f000 fb1d 	bl	80029b0 <RTC_ByteToBcd2>
 8002376:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002378:	0022      	movs	r2, r4
 800237a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	78db      	ldrb	r3, [r3, #3]
 8002380:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002382:	4313      	orrs	r3, r2
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e017      	b.n	80023b8 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2240      	movs	r2, #64	@ 0x40
 8002390:	4013      	ands	r3, r2
 8002392:	d102      	bne.n	800239a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2200      	movs	r2, #0
 8002398:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	785b      	ldrb	r3, [r3, #1]
 80023a4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80023a6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80023ac:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	78db      	ldrb	r3, [r3, #3]
 80023b2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80023b4:	4313      	orrs	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	491b      	ldr	r1, [pc, #108]	@ (800242c <HAL_RTC_SetTime+0x148>)
 80023c0:	400a      	ands	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699a      	ldr	r2, [r3, #24]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4918      	ldr	r1, [pc, #96]	@ (8002430 <HAL_RTC_SetTime+0x14c>)
 80023d0:	400a      	ands	r2, r1
 80023d2:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6999      	ldr	r1, [r3, #24]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80023ec:	2313      	movs	r3, #19
 80023ee:	18fc      	adds	r4, r7, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 fa98 	bl	8002928 <RTC_ExitInitMode>
 80023f8:	0003      	movs	r3, r0
 80023fa:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	22ff      	movs	r2, #255	@ 0xff
 8002402:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8002404:	2313      	movs	r3, #19
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d103      	bne.n	8002416 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2229      	movs	r2, #41	@ 0x29
 8002412:	2101      	movs	r1, #1
 8002414:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2228      	movs	r2, #40	@ 0x28
 800241a:	2100      	movs	r1, #0
 800241c:	5499      	strb	r1, [r3, r2]

  return status;
 800241e:	2313      	movs	r3, #19
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	781b      	ldrb	r3, [r3, #0]
}
 8002424:	0018      	movs	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	b006      	add	sp, #24
 800242a:	bdb0      	pop	{r4, r5, r7, pc}
 800242c:	007f7f7f 	.word	0x007f7f7f
 8002430:	fffbffff 	.word	0xfffbffff

08002434 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002434:	b5b0      	push	{r4, r5, r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2228      	movs	r2, #40	@ 0x28
 8002444:	5c9b      	ldrb	r3, [r3, r2]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_RTC_SetDate+0x1a>
 800244a:	2302      	movs	r3, #2
 800244c:	e07e      	b.n	800254c <HAL_RTC_SetDate+0x118>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2228      	movs	r2, #40	@ 0x28
 8002452:	2101      	movs	r1, #1
 8002454:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2229      	movs	r2, #41	@ 0x29
 800245a:	2102      	movs	r1, #2
 800245c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10e      	bne.n	8002482 <HAL_RTC_SetDate+0x4e>
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	785b      	ldrb	r3, [r3, #1]
 8002468:	001a      	movs	r2, r3
 800246a:	2310      	movs	r3, #16
 800246c:	4013      	ands	r3, r2
 800246e:	d008      	beq.n	8002482 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	785b      	ldrb	r3, [r3, #1]
 8002474:	2210      	movs	r2, #16
 8002476:	4393      	bics	r3, r2
 8002478:	b2db      	uxtb	r3, r3
 800247a:	330a      	adds	r3, #10
 800247c:	b2da      	uxtb	r2, r3
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d11c      	bne.n	80024c2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	78db      	ldrb	r3, [r3, #3]
 800248c:	0018      	movs	r0, r3
 800248e:	f000 fa8f 	bl	80029b0 <RTC_ByteToBcd2>
 8002492:	0003      	movs	r3, r0
 8002494:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	785b      	ldrb	r3, [r3, #1]
 800249a:	0018      	movs	r0, r3
 800249c:	f000 fa88 	bl	80029b0 <RTC_ByteToBcd2>
 80024a0:	0003      	movs	r3, r0
 80024a2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80024a4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	789b      	ldrb	r3, [r3, #2]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f000 fa80 	bl	80029b0 <RTC_ByteToBcd2>
 80024b0:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80024b2:	0022      	movs	r2, r4
 80024b4:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	e00e      	b.n	80024e0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	78db      	ldrb	r3, [r3, #3]
 80024c6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	785b      	ldrb	r3, [r3, #1]
 80024cc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80024ce:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80024d4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	22ca      	movs	r2, #202	@ 0xca
 80024e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2253      	movs	r2, #83	@ 0x53
 80024ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80024f0:	2513      	movs	r5, #19
 80024f2:	197c      	adds	r4, r7, r5
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	0018      	movs	r0, r3
 80024f8:	f000 f9d3 	bl	80028a2 <RTC_EnterInitMode>
 80024fc:	0003      	movs	r3, r0
 80024fe:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002500:	0028      	movs	r0, r5
 8002502:	183b      	adds	r3, r7, r0
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10c      	bne.n	8002524 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4910      	ldr	r1, [pc, #64]	@ (8002554 <HAL_RTC_SetDate+0x120>)
 8002512:	400a      	ands	r2, r1
 8002514:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002516:	183c      	adds	r4, r7, r0
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	0018      	movs	r0, r3
 800251c:	f000 fa04 	bl	8002928 <RTC_ExitInitMode>
 8002520:	0003      	movs	r3, r0
 8002522:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	22ff      	movs	r2, #255	@ 0xff
 800252a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800252c:	2313      	movs	r3, #19
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d103      	bne.n	800253e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2229      	movs	r2, #41	@ 0x29
 800253a:	2101      	movs	r1, #1
 800253c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2228      	movs	r2, #40	@ 0x28
 8002542:	2100      	movs	r1, #0
 8002544:	5499      	strb	r1, [r3, r2]

  return status;
 8002546:	2313      	movs	r3, #19
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	781b      	ldrb	r3, [r3, #0]
}
 800254c:	0018      	movs	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	b006      	add	sp, #24
 8002552:	bdb0      	pop	{r4, r5, r7, pc}
 8002554:	00ffff3f 	.word	0x00ffff3f

08002558 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b089      	sub	sp, #36	@ 0x24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2228      	movs	r2, #40	@ 0x28
 8002568:	5c9b      	ldrb	r3, [r3, r2]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_RTC_SetAlarm_IT+0x1a>
 800256e:	2302      	movs	r3, #2
 8002570:	e127      	b.n	80027c2 <HAL_RTC_SetAlarm_IT+0x26a>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2228      	movs	r2, #40	@ 0x28
 8002576:	2101      	movs	r1, #1
 8002578:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2229      	movs	r2, #41	@ 0x29
 800257e:	2102      	movs	r1, #2
 8002580:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d136      	bne.n	80025f6 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2240      	movs	r2, #64	@ 0x40
 8002590:	4013      	ands	r3, r2
 8002592:	d102      	bne.n	800259a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2200      	movs	r2, #0
 8002598:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	0018      	movs	r0, r3
 80025a0:	f000 fa06 	bl	80029b0 <RTC_ByteToBcd2>
 80025a4:	0003      	movs	r3, r0
 80025a6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	785b      	ldrb	r3, [r3, #1]
 80025ac:	0018      	movs	r0, r3
 80025ae:	f000 f9ff 	bl	80029b0 <RTC_ByteToBcd2>
 80025b2:	0003      	movs	r3, r0
 80025b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80025b6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	789b      	ldrb	r3, [r3, #2]
 80025bc:	0018      	movs	r0, r3
 80025be:	f000 f9f7 	bl	80029b0 <RTC_ByteToBcd2>
 80025c2:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80025c4:	0022      	movs	r2, r4
 80025c6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	78db      	ldrb	r3, [r3, #3]
 80025cc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80025ce:	431a      	orrs	r2, r3
 80025d0:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2220      	movs	r2, #32
 80025d6:	5c9b      	ldrb	r3, [r3, r2]
 80025d8:	0018      	movs	r0, r3
 80025da:	f000 f9e9 	bl	80029b0 <RTC_ByteToBcd2>
 80025de:	0003      	movs	r3, r0
 80025e0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80025e2:	0022      	movs	r2, r4
 80025e4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80025ea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	e022      	b.n	800263c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2240      	movs	r2, #64	@ 0x40
 80025fe:	4013      	ands	r3, r2
 8002600:	d102      	bne.n	8002608 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2200      	movs	r2, #0
 8002606:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	785b      	ldrb	r3, [r3, #1]
 8002612:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002614:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800261a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	78db      	ldrb	r3, [r3, #3]
 8002620:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002622:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2120      	movs	r1, #32
 8002628:	5c5b      	ldrb	r3, [r3, r1]
 800262a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800262c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002632:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002638:	4313      	orrs	r3, r2
 800263a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	22ca      	movs	r2, #202	@ 0xca
 800264e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2253      	movs	r2, #83	@ 0x53
 8002656:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800265c:	2380      	movs	r3, #128	@ 0x80
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	429a      	cmp	r2, r3
 8002662:	d14c      	bne.n	80026fe <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699a      	ldr	r2, [r3, #24]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4957      	ldr	r1, [pc, #348]	@ (80027cc <HAL_RTC_SetAlarm_IT+0x274>)
 8002670:	400a      	ands	r2, r1
 8002672:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2101      	movs	r1, #1
 8002680:	430a      	orrs	r2, r1
 8002682:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8002684:	f7fe fc40 	bl	8000f08 <HAL_GetTick>
 8002688:	0003      	movs	r3, r0
 800268a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800268c:	e016      	b.n	80026bc <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800268e:	f7fe fc3b 	bl	8000f08 <HAL_GetTick>
 8002692:	0002      	movs	r2, r0
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	1ad2      	subs	r2, r2, r3
 8002698:	23fa      	movs	r3, #250	@ 0xfa
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	429a      	cmp	r2, r3
 800269e:	d90d      	bls.n	80026bc <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	22ff      	movs	r2, #255	@ 0xff
 80026a6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2229      	movs	r2, #41	@ 0x29
 80026ac:	2103      	movs	r1, #3
 80026ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2228      	movs	r2, #40	@ 0x28
 80026b4:	2100      	movs	r1, #0
 80026b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e082      	b.n	80027c2 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2201      	movs	r2, #1
 80026c4:	4013      	ands	r3, r2
 80026c6:	d0e2      	beq.n	800268e <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2180      	movs	r1, #128	@ 0x80
 80026e4:	0049      	lsls	r1, r1, #1
 80026e6:	430a      	orrs	r2, r1
 80026e8:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2180      	movs	r1, #128	@ 0x80
 80026f6:	0149      	lsls	r1, r1, #5
 80026f8:	430a      	orrs	r2, r1
 80026fa:	619a      	str	r2, [r3, #24]
 80026fc:	e04b      	b.n	8002796 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4931      	ldr	r1, [pc, #196]	@ (80027d0 <HAL_RTC_SetAlarm_IT+0x278>)
 800270a:	400a      	ands	r2, r1
 800270c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2102      	movs	r1, #2
 800271a:	430a      	orrs	r2, r1
 800271c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800271e:	f7fe fbf3 	bl	8000f08 <HAL_GetTick>
 8002722:	0003      	movs	r3, r0
 8002724:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002726:	e016      	b.n	8002756 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002728:	f7fe fbee 	bl	8000f08 <HAL_GetTick>
 800272c:	0002      	movs	r2, r0
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	1ad2      	subs	r2, r2, r3
 8002732:	23fa      	movs	r3, #250	@ 0xfa
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	429a      	cmp	r2, r3
 8002738:	d90d      	bls.n	8002756 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	22ff      	movs	r2, #255	@ 0xff
 8002740:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2229      	movs	r2, #41	@ 0x29
 8002746:	2103      	movs	r1, #3
 8002748:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2228      	movs	r2, #40	@ 0x28
 800274e:	2100      	movs	r1, #0
 8002750:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e035      	b.n	80027c2 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	2202      	movs	r2, #2
 800275e:	4013      	ands	r3, r2
 8002760:	d0e2      	beq.n	8002728 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699a      	ldr	r2, [r3, #24]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2180      	movs	r1, #128	@ 0x80
 800277e:	0089      	lsls	r1, r1, #2
 8002780:	430a      	orrs	r2, r1
 8002782:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699a      	ldr	r2, [r3, #24]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2180      	movs	r1, #128	@ 0x80
 8002790:	0189      	lsls	r1, r1, #6
 8002792:	430a      	orrs	r2, r1
 8002794:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002796:	4a0f      	ldr	r2, [pc, #60]	@ (80027d4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8002798:	2380      	movs	r3, #128	@ 0x80
 800279a:	58d3      	ldr	r3, [r2, r3]
 800279c:	490d      	ldr	r1, [pc, #52]	@ (80027d4 <HAL_RTC_SetAlarm_IT+0x27c>)
 800279e:	2280      	movs	r2, #128	@ 0x80
 80027a0:	0312      	lsls	r2, r2, #12
 80027a2:	4313      	orrs	r3, r2
 80027a4:	2280      	movs	r2, #128	@ 0x80
 80027a6:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	22ff      	movs	r2, #255	@ 0xff
 80027ae:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2229      	movs	r2, #41	@ 0x29
 80027b4:	2101      	movs	r1, #1
 80027b6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2228      	movs	r2, #40	@ 0x28
 80027bc:	2100      	movs	r1, #0
 80027be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	0018      	movs	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b009      	add	sp, #36	@ 0x24
 80027c8:	bd90      	pop	{r4, r7, pc}
 80027ca:	46c0      	nop			@ (mov r8, r8)
 80027cc:	fffffeff 	.word	0xfffffeff
 80027d0:	fffffdff 	.word	0xfffffdff
 80027d4:	40021800 	.word	0x40021800

080027d8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699a      	ldr	r2, [r3, #24]
 80027e6:	2380      	movs	r3, #128	@ 0x80
 80027e8:	015b      	lsls	r3, r3, #5
 80027ea:	4013      	ands	r3, r2
 80027ec:	d011      	beq.n	8002812 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027f4:	2201      	movs	r2, #1
 80027f6:	4013      	ands	r3, r2
 80027f8:	d00b      	beq.n	8002812 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	430a      	orrs	r2, r1
 8002808:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	0018      	movs	r0, r3
 800280e:	f7fe f96b 	bl	8000ae8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699a      	ldr	r2, [r3, #24]
 8002818:	2380      	movs	r3, #128	@ 0x80
 800281a:	019b      	lsls	r3, r3, #6
 800281c:	4013      	ands	r3, r2
 800281e:	d011      	beq.n	8002844 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002826:	2202      	movs	r2, #2
 8002828:	4013      	ands	r3, r2
 800282a:	d00b      	beq.n	8002844 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2102      	movs	r1, #2
 8002838:	430a      	orrs	r2, r1
 800283a:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	0018      	movs	r0, r3
 8002840:	f000 f8de 	bl	8002a00 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2229      	movs	r2, #41	@ 0x29
 8002848:	2101      	movs	r1, #1
 800284a:	5499      	strb	r1, [r3, r2]
}
 800284c:	46c0      	nop			@ (mov r8, r8)
 800284e:	46bd      	mov	sp, r7
 8002850:	b002      	add	sp, #8
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	21a0      	movs	r1, #160	@ 0xa0
 8002868:	438a      	bics	r2, r1
 800286a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800286c:	f7fe fb4c 	bl	8000f08 <HAL_GetTick>
 8002870:	0003      	movs	r3, r0
 8002872:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002874:	e00a      	b.n	800288c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002876:	f7fe fb47 	bl	8000f08 <HAL_GetTick>
 800287a:	0002      	movs	r2, r0
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1ad2      	subs	r2, r2, r3
 8002880:	23fa      	movs	r3, #250	@ 0xfa
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	429a      	cmp	r2, r3
 8002886:	d901      	bls.n	800288c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e006      	b.n	800289a <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	4013      	ands	r3, r2
 8002896:	d0ee      	beq.n	8002876 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	0018      	movs	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	b004      	add	sp, #16
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80028aa:	230f      	movs	r3, #15
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2240      	movs	r2, #64	@ 0x40
 80028ba:	4013      	ands	r3, r2
 80028bc:	d12c      	bne.n	8002918 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2180      	movs	r1, #128	@ 0x80
 80028ca:	430a      	orrs	r2, r1
 80028cc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80028ce:	f7fe fb1b 	bl	8000f08 <HAL_GetTick>
 80028d2:	0003      	movs	r3, r0
 80028d4:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80028d6:	e014      	b.n	8002902 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80028d8:	f7fe fb16 	bl	8000f08 <HAL_GetTick>
 80028dc:	0002      	movs	r2, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1ad2      	subs	r2, r2, r3
 80028e2:	200f      	movs	r0, #15
 80028e4:	183b      	adds	r3, r7, r0
 80028e6:	1839      	adds	r1, r7, r0
 80028e8:	7809      	ldrb	r1, [r1, #0]
 80028ea:	7019      	strb	r1, [r3, #0]
 80028ec:	23fa      	movs	r3, #250	@ 0xfa
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d906      	bls.n	8002902 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80028f4:	183b      	adds	r3, r7, r0
 80028f6:	2203      	movs	r2, #3
 80028f8:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2229      	movs	r2, #41	@ 0x29
 80028fe:	2103      	movs	r1, #3
 8002900:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2240      	movs	r2, #64	@ 0x40
 800290a:	4013      	ands	r3, r2
 800290c:	d104      	bne.n	8002918 <RTC_EnterInitMode+0x76>
 800290e:	230f      	movs	r3, #15
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b03      	cmp	r3, #3
 8002916:	d1df      	bne.n	80028d8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002918:	230f      	movs	r3, #15
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	781b      	ldrb	r3, [r3, #0]
}
 800291e:	0018      	movs	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	b004      	add	sp, #16
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002930:	240f      	movs	r4, #15
 8002932:	193b      	adds	r3, r7, r4
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002938:	4b1c      	ldr	r3, [pc, #112]	@ (80029ac <RTC_ExitInitMode+0x84>)
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <RTC_ExitInitMode+0x84>)
 800293e:	2180      	movs	r1, #128	@ 0x80
 8002940:	438a      	bics	r2, r1
 8002942:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002944:	4b19      	ldr	r3, [pc, #100]	@ (80029ac <RTC_ExitInitMode+0x84>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	2220      	movs	r2, #32
 800294a:	4013      	ands	r3, r2
 800294c:	d10d      	bne.n	800296a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	0018      	movs	r0, r3
 8002952:	f7ff ff7f 	bl	8002854 <HAL_RTC_WaitForSynchro>
 8002956:	1e03      	subs	r3, r0, #0
 8002958:	d021      	beq.n	800299e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2229      	movs	r2, #41	@ 0x29
 800295e:	2103      	movs	r1, #3
 8002960:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002962:	193b      	adds	r3, r7, r4
 8002964:	2203      	movs	r2, #3
 8002966:	701a      	strb	r2, [r3, #0]
 8002968:	e019      	b.n	800299e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800296a:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <RTC_ExitInitMode+0x84>)
 800296c:	699a      	ldr	r2, [r3, #24]
 800296e:	4b0f      	ldr	r3, [pc, #60]	@ (80029ac <RTC_ExitInitMode+0x84>)
 8002970:	2120      	movs	r1, #32
 8002972:	438a      	bics	r2, r1
 8002974:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	0018      	movs	r0, r3
 800297a:	f7ff ff6b 	bl	8002854 <HAL_RTC_WaitForSynchro>
 800297e:	1e03      	subs	r3, r0, #0
 8002980:	d007      	beq.n	8002992 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2229      	movs	r2, #41	@ 0x29
 8002986:	2103      	movs	r1, #3
 8002988:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800298a:	230f      	movs	r3, #15
 800298c:	18fb      	adds	r3, r7, r3
 800298e:	2203      	movs	r2, #3
 8002990:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002992:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <RTC_ExitInitMode+0x84>)
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <RTC_ExitInitMode+0x84>)
 8002998:	2120      	movs	r1, #32
 800299a:	430a      	orrs	r2, r1
 800299c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800299e:	230f      	movs	r3, #15
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	781b      	ldrb	r3, [r3, #0]
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b005      	add	sp, #20
 80029aa:	bd90      	pop	{r4, r7, pc}
 80029ac:	40002800 	.word	0x40002800

080029b0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	0002      	movs	r2, r0
 80029b8:	1dfb      	adds	r3, r7, #7
 80029ba:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80029c0:	230b      	movs	r3, #11
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	1dfa      	adds	r2, r7, #7
 80029c6:	7812      	ldrb	r2, [r2, #0]
 80029c8:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80029ca:	e008      	b.n	80029de <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	3301      	adds	r3, #1
 80029d0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80029d2:	220b      	movs	r2, #11
 80029d4:	18bb      	adds	r3, r7, r2
 80029d6:	18ba      	adds	r2, r7, r2
 80029d8:	7812      	ldrb	r2, [r2, #0]
 80029da:	3a0a      	subs	r2, #10
 80029dc:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80029de:	210b      	movs	r1, #11
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b09      	cmp	r3, #9
 80029e6:	d8f1      	bhi.n	80029cc <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	187b      	adds	r3, r7, r1
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	b2db      	uxtb	r3, r3
}
 80029f8:	0018      	movs	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b004      	add	sp, #16
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002a08:	46c0      	nop			@ (mov r8, r8)
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b002      	add	sp, #8
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e04a      	b.n	8002ab8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	223d      	movs	r2, #61	@ 0x3d
 8002a26:	5c9b      	ldrb	r3, [r3, r2]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d107      	bne.n	8002a3e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	223c      	movs	r2, #60	@ 0x3c
 8002a32:	2100      	movs	r1, #0
 8002a34:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f7fe f8cd 	bl	8000bd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	223d      	movs	r2, #61	@ 0x3d
 8002a42:	2102      	movs	r1, #2
 8002a44:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	0019      	movs	r1, r3
 8002a50:	0010      	movs	r0, r2
 8002a52:	f000 fa13 	bl	8002e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2248      	movs	r2, #72	@ 0x48
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	223e      	movs	r2, #62	@ 0x3e
 8002a62:	2101      	movs	r1, #1
 8002a64:	5499      	strb	r1, [r3, r2]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	223f      	movs	r2, #63	@ 0x3f
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	5499      	strb	r1, [r3, r2]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2240      	movs	r2, #64	@ 0x40
 8002a72:	2101      	movs	r1, #1
 8002a74:	5499      	strb	r1, [r3, r2]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2241      	movs	r2, #65	@ 0x41
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	5499      	strb	r1, [r3, r2]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2242      	movs	r2, #66	@ 0x42
 8002a82:	2101      	movs	r1, #1
 8002a84:	5499      	strb	r1, [r3, r2]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2243      	movs	r2, #67	@ 0x43
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2244      	movs	r2, #68	@ 0x44
 8002a92:	2101      	movs	r1, #1
 8002a94:	5499      	strb	r1, [r3, r2]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2245      	movs	r2, #69	@ 0x45
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	5499      	strb	r1, [r3, r2]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2246      	movs	r2, #70	@ 0x46
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	5499      	strb	r1, [r3, r2]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2247      	movs	r2, #71	@ 0x47
 8002aaa:	2101      	movs	r1, #1
 8002aac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	223d      	movs	r2, #61	@ 0x3d
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	0018      	movs	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b002      	add	sp, #8
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d108      	bne.n	8002ae2 <HAL_TIM_PWM_Start+0x22>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	223e      	movs	r2, #62	@ 0x3e
 8002ad4:	5c9b      	ldrb	r3, [r3, r2]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	1e5a      	subs	r2, r3, #1
 8002adc:	4193      	sbcs	r3, r2
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	e037      	b.n	8002b52 <HAL_TIM_PWM_Start+0x92>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d108      	bne.n	8002afa <HAL_TIM_PWM_Start+0x3a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	223f      	movs	r2, #63	@ 0x3f
 8002aec:	5c9b      	ldrb	r3, [r3, r2]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	1e5a      	subs	r2, r3, #1
 8002af4:	4193      	sbcs	r3, r2
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	e02b      	b.n	8002b52 <HAL_TIM_PWM_Start+0x92>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d108      	bne.n	8002b12 <HAL_TIM_PWM_Start+0x52>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2240      	movs	r2, #64	@ 0x40
 8002b04:	5c9b      	ldrb	r3, [r3, r2]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	1e5a      	subs	r2, r3, #1
 8002b0c:	4193      	sbcs	r3, r2
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	e01f      	b.n	8002b52 <HAL_TIM_PWM_Start+0x92>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b0c      	cmp	r3, #12
 8002b16:	d108      	bne.n	8002b2a <HAL_TIM_PWM_Start+0x6a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2241      	movs	r2, #65	@ 0x41
 8002b1c:	5c9b      	ldrb	r3, [r3, r2]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	1e5a      	subs	r2, r3, #1
 8002b24:	4193      	sbcs	r3, r2
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	e013      	b.n	8002b52 <HAL_TIM_PWM_Start+0x92>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	d108      	bne.n	8002b42 <HAL_TIM_PWM_Start+0x82>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2242      	movs	r2, #66	@ 0x42
 8002b34:	5c9b      	ldrb	r3, [r3, r2]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	1e5a      	subs	r2, r3, #1
 8002b3c:	4193      	sbcs	r3, r2
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	e007      	b.n	8002b52 <HAL_TIM_PWM_Start+0x92>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2243      	movs	r2, #67	@ 0x43
 8002b46:	5c9b      	ldrb	r3, [r3, r2]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	1e5a      	subs	r2, r3, #1
 8002b4e:	4193      	sbcs	r3, r2
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e081      	b.n	8002c5e <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d104      	bne.n	8002b6a <HAL_TIM_PWM_Start+0xaa>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	223e      	movs	r2, #62	@ 0x3e
 8002b64:	2102      	movs	r1, #2
 8002b66:	5499      	strb	r1, [r3, r2]
 8002b68:	e023      	b.n	8002bb2 <HAL_TIM_PWM_Start+0xf2>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d104      	bne.n	8002b7a <HAL_TIM_PWM_Start+0xba>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	223f      	movs	r2, #63	@ 0x3f
 8002b74:	2102      	movs	r1, #2
 8002b76:	5499      	strb	r1, [r3, r2]
 8002b78:	e01b      	b.n	8002bb2 <HAL_TIM_PWM_Start+0xf2>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d104      	bne.n	8002b8a <HAL_TIM_PWM_Start+0xca>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2240      	movs	r2, #64	@ 0x40
 8002b84:	2102      	movs	r1, #2
 8002b86:	5499      	strb	r1, [r3, r2]
 8002b88:	e013      	b.n	8002bb2 <HAL_TIM_PWM_Start+0xf2>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b0c      	cmp	r3, #12
 8002b8e:	d104      	bne.n	8002b9a <HAL_TIM_PWM_Start+0xda>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2241      	movs	r2, #65	@ 0x41
 8002b94:	2102      	movs	r1, #2
 8002b96:	5499      	strb	r1, [r3, r2]
 8002b98:	e00b      	b.n	8002bb2 <HAL_TIM_PWM_Start+0xf2>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b10      	cmp	r3, #16
 8002b9e:	d104      	bne.n	8002baa <HAL_TIM_PWM_Start+0xea>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2242      	movs	r2, #66	@ 0x42
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	5499      	strb	r1, [r3, r2]
 8002ba8:	e003      	b.n	8002bb2 <HAL_TIM_PWM_Start+0xf2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2243      	movs	r2, #67	@ 0x43
 8002bae:	2102      	movs	r1, #2
 8002bb0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6839      	ldr	r1, [r7, #0]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f000 fc70 	bl	80034a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a28      	ldr	r2, [pc, #160]	@ (8002c68 <HAL_TIM_PWM_Start+0x1a8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d009      	beq.n	8002bde <HAL_TIM_PWM_Start+0x11e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a27      	ldr	r2, [pc, #156]	@ (8002c6c <HAL_TIM_PWM_Start+0x1ac>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d004      	beq.n	8002bde <HAL_TIM_PWM_Start+0x11e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a25      	ldr	r2, [pc, #148]	@ (8002c70 <HAL_TIM_PWM_Start+0x1b0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d101      	bne.n	8002be2 <HAL_TIM_PWM_Start+0x122>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <HAL_TIM_PWM_Start+0x124>
 8002be2:	2300      	movs	r3, #0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2180      	movs	r1, #128	@ 0x80
 8002bf4:	0209      	lsls	r1, r1, #8
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1a      	ldr	r2, [pc, #104]	@ (8002c68 <HAL_TIM_PWM_Start+0x1a8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00a      	beq.n	8002c1a <HAL_TIM_PWM_Start+0x15a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	2380      	movs	r3, #128	@ 0x80
 8002c0a:	05db      	lsls	r3, r3, #23
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d004      	beq.n	8002c1a <HAL_TIM_PWM_Start+0x15a>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a17      	ldr	r2, [pc, #92]	@ (8002c74 <HAL_TIM_PWM_Start+0x1b4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d116      	bne.n	8002c48 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	4a15      	ldr	r2, [pc, #84]	@ (8002c78 <HAL_TIM_PWM_Start+0x1b8>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b06      	cmp	r3, #6
 8002c2a:	d016      	beq.n	8002c5a <HAL_TIM_PWM_Start+0x19a>
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	2380      	movs	r3, #128	@ 0x80
 8002c30:	025b      	lsls	r3, r3, #9
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d011      	beq.n	8002c5a <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2101      	movs	r1, #1
 8002c42:	430a      	orrs	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c46:	e008      	b.n	8002c5a <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2101      	movs	r1, #1
 8002c54:	430a      	orrs	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	e000      	b.n	8002c5c <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	0018      	movs	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	b004      	add	sp, #16
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	46c0      	nop			@ (mov r8, r8)
 8002c68:	40012c00 	.word	0x40012c00
 8002c6c:	40014400 	.word	0x40014400
 8002c70:	40014800 	.word	0x40014800
 8002c74:	40000400 	.word	0x40000400
 8002c78:	00010007 	.word	0x00010007

08002c7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c88:	2317      	movs	r3, #23
 8002c8a:	18fb      	adds	r3, r7, r3
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	223c      	movs	r2, #60	@ 0x3c
 8002c94:	5c9b      	ldrb	r3, [r3, r2]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_TIM_PWM_ConfigChannel+0x22>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e0e5      	b.n	8002e6a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	223c      	movs	r2, #60	@ 0x3c
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b14      	cmp	r3, #20
 8002caa:	d900      	bls.n	8002cae <HAL_TIM_PWM_ConfigChannel+0x32>
 8002cac:	e0d1      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	009a      	lsls	r2, r3, #2
 8002cb2:	4b70      	ldr	r3, [pc, #448]	@ (8002e74 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002cb4:	18d3      	adds	r3, r2, r3
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	0011      	movs	r1, r2
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f000 f950 	bl	8002f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2108      	movs	r1, #8
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2104      	movs	r1, #4
 8002ce4:	438a      	bics	r2, r1
 8002ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6999      	ldr	r1, [r3, #24]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	619a      	str	r2, [r3, #24]
      break;
 8002cfa:	e0af      	b.n	8002e5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	0011      	movs	r1, r2
 8002d04:	0018      	movs	r0, r3
 8002d06:	f000 f9af 	bl	8003068 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2180      	movs	r1, #128	@ 0x80
 8002d16:	0109      	lsls	r1, r1, #4
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4954      	ldr	r1, [pc, #336]	@ (8002e78 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002d28:	400a      	ands	r2, r1
 8002d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6999      	ldr	r1, [r3, #24]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	021a      	lsls	r2, r3, #8
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	619a      	str	r2, [r3, #24]
      break;
 8002d40:	e08c      	b.n	8002e5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	0011      	movs	r1, r2
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 fa0a 	bl	8003164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69da      	ldr	r2, [r3, #28]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2108      	movs	r1, #8
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69da      	ldr	r2, [r3, #28]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2104      	movs	r1, #4
 8002d6c:	438a      	bics	r2, r1
 8002d6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69d9      	ldr	r1, [r3, #28]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	61da      	str	r2, [r3, #28]
      break;
 8002d82:	e06b      	b.n	8002e5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	0011      	movs	r1, r2
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f000 fa6b 	bl	8003268 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69da      	ldr	r2, [r3, #28]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2180      	movs	r1, #128	@ 0x80
 8002d9e:	0109      	lsls	r1, r1, #4
 8002da0:	430a      	orrs	r2, r1
 8002da2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	69da      	ldr	r2, [r3, #28]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4932      	ldr	r1, [pc, #200]	@ (8002e78 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002db0:	400a      	ands	r2, r1
 8002db2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69d9      	ldr	r1, [r3, #28]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	021a      	lsls	r2, r3, #8
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	61da      	str	r2, [r3, #28]
      break;
 8002dc8:	e048      	b.n	8002e5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	0011      	movs	r1, r2
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f000 faac 	bl	8003330 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2108      	movs	r1, #8
 8002de4:	430a      	orrs	r2, r1
 8002de6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2104      	movs	r1, #4
 8002df4:	438a      	bics	r2, r1
 8002df6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002e0a:	e027      	b.n	8002e5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	0011      	movs	r1, r2
 8002e14:	0018      	movs	r0, r3
 8002e16:	f000 fae5 	bl	80033e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2180      	movs	r1, #128	@ 0x80
 8002e26:	0109      	lsls	r1, r1, #4
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4910      	ldr	r1, [pc, #64]	@ (8002e78 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002e38:	400a      	ands	r2, r1
 8002e3a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	021a      	lsls	r2, r3, #8
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002e50:	e004      	b.n	8002e5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002e52:	2317      	movs	r3, #23
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]
      break;
 8002e5a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	223c      	movs	r2, #60	@ 0x3c
 8002e60:	2100      	movs	r1, #0
 8002e62:	5499      	strb	r1, [r3, r2]

  return status;
 8002e64:	2317      	movs	r3, #23
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	781b      	ldrb	r3, [r3, #0]
}
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	b006      	add	sp, #24
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	46c0      	nop			@ (mov r8, r8)
 8002e74:	0800411c 	.word	0x0800411c
 8002e78:	fffffbff 	.word	0xfffffbff

08002e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a30      	ldr	r2, [pc, #192]	@ (8002f50 <TIM_Base_SetConfig+0xd4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d008      	beq.n	8002ea6 <TIM_Base_SetConfig+0x2a>
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	2380      	movs	r3, #128	@ 0x80
 8002e98:	05db      	lsls	r3, r3, #23
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d003      	beq.n	8002ea6 <TIM_Base_SetConfig+0x2a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a2c      	ldr	r2, [pc, #176]	@ (8002f54 <TIM_Base_SetConfig+0xd8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d108      	bne.n	8002eb8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2270      	movs	r2, #112	@ 0x70
 8002eaa:	4393      	bics	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a25      	ldr	r2, [pc, #148]	@ (8002f50 <TIM_Base_SetConfig+0xd4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d014      	beq.n	8002eea <TIM_Base_SetConfig+0x6e>
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	2380      	movs	r3, #128	@ 0x80
 8002ec4:	05db      	lsls	r3, r3, #23
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d00f      	beq.n	8002eea <TIM_Base_SetConfig+0x6e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a21      	ldr	r2, [pc, #132]	@ (8002f54 <TIM_Base_SetConfig+0xd8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00b      	beq.n	8002eea <TIM_Base_SetConfig+0x6e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a20      	ldr	r2, [pc, #128]	@ (8002f58 <TIM_Base_SetConfig+0xdc>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d007      	beq.n	8002eea <TIM_Base_SetConfig+0x6e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a1f      	ldr	r2, [pc, #124]	@ (8002f5c <TIM_Base_SetConfig+0xe0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d003      	beq.n	8002eea <TIM_Base_SetConfig+0x6e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	@ (8002f60 <TIM_Base_SetConfig+0xe4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d108      	bne.n	8002efc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4a1d      	ldr	r2, [pc, #116]	@ (8002f64 <TIM_Base_SetConfig+0xe8>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	4393      	bics	r3, r2
 8002f02:	001a      	movs	r2, r3
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a0a      	ldr	r2, [pc, #40]	@ (8002f50 <TIM_Base_SetConfig+0xd4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <TIM_Base_SetConfig+0xbe>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f5c <TIM_Base_SetConfig+0xe0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d003      	beq.n	8002f3a <TIM_Base_SetConfig+0xbe>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a0a      	ldr	r2, [pc, #40]	@ (8002f60 <TIM_Base_SetConfig+0xe4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d103      	bne.n	8002f42 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	615a      	str	r2, [r3, #20]
}
 8002f48:	46c0      	nop			@ (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b004      	add	sp, #16
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40012c00 	.word	0x40012c00
 8002f54:	40000400 	.word	0x40000400
 8002f58:	40002000 	.word	0x40002000
 8002f5c:	40014400 	.word	0x40014400
 8002f60:	40014800 	.word	0x40014800
 8002f64:	fffffcff 	.word	0xfffffcff

08002f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	2201      	movs	r2, #1
 8002f78:	4393      	bics	r3, r2
 8002f7a:	001a      	movs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4a2e      	ldr	r2, [pc, #184]	@ (8003050 <TIM_OC1_SetConfig+0xe8>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	4393      	bics	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	4393      	bics	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a24      	ldr	r2, [pc, #144]	@ (8003054 <TIM_OC1_SetConfig+0xec>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d007      	beq.n	8002fd6 <TIM_OC1_SetConfig+0x6e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a23      	ldr	r2, [pc, #140]	@ (8003058 <TIM_OC1_SetConfig+0xf0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d003      	beq.n	8002fd6 <TIM_OC1_SetConfig+0x6e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a22      	ldr	r2, [pc, #136]	@ (800305c <TIM_OC1_SetConfig+0xf4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d10c      	bne.n	8002ff0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2208      	movs	r2, #8
 8002fda:	4393      	bics	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2204      	movs	r2, #4
 8002fec:	4393      	bics	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a18      	ldr	r2, [pc, #96]	@ (8003054 <TIM_OC1_SetConfig+0xec>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d007      	beq.n	8003008 <TIM_OC1_SetConfig+0xa0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a17      	ldr	r2, [pc, #92]	@ (8003058 <TIM_OC1_SetConfig+0xf0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d003      	beq.n	8003008 <TIM_OC1_SetConfig+0xa0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a16      	ldr	r2, [pc, #88]	@ (800305c <TIM_OC1_SetConfig+0xf4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d111      	bne.n	800302c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4a15      	ldr	r2, [pc, #84]	@ (8003060 <TIM_OC1_SetConfig+0xf8>)
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4a14      	ldr	r2, [pc, #80]	@ (8003064 <TIM_OC1_SetConfig+0xfc>)
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	621a      	str	r2, [r3, #32]
}
 8003046:	46c0      	nop			@ (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	b006      	add	sp, #24
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			@ (mov r8, r8)
 8003050:	fffeff8f 	.word	0xfffeff8f
 8003054:	40012c00 	.word	0x40012c00
 8003058:	40014400 	.word	0x40014400
 800305c:	40014800 	.word	0x40014800
 8003060:	fffffeff 	.word	0xfffffeff
 8003064:	fffffdff 	.word	0xfffffdff

08003068 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	2210      	movs	r2, #16
 8003078:	4393      	bics	r3, r2
 800307a:	001a      	movs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4a2c      	ldr	r2, [pc, #176]	@ (8003148 <TIM_OC2_SetConfig+0xe0>)
 8003096:	4013      	ands	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4a2b      	ldr	r2, [pc, #172]	@ (800314c <TIM_OC2_SetConfig+0xe4>)
 800309e:	4013      	ands	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2220      	movs	r2, #32
 80030b2:	4393      	bics	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	4313      	orrs	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a22      	ldr	r2, [pc, #136]	@ (8003150 <TIM_OC2_SetConfig+0xe8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d10d      	bne.n	80030e6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2280      	movs	r2, #128	@ 0x80
 80030ce:	4393      	bics	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	4313      	orrs	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2240      	movs	r2, #64	@ 0x40
 80030e2:	4393      	bics	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a19      	ldr	r2, [pc, #100]	@ (8003150 <TIM_OC2_SetConfig+0xe8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <TIM_OC2_SetConfig+0x96>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a18      	ldr	r2, [pc, #96]	@ (8003154 <TIM_OC2_SetConfig+0xec>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d003      	beq.n	80030fe <TIM_OC2_SetConfig+0x96>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a17      	ldr	r2, [pc, #92]	@ (8003158 <TIM_OC2_SetConfig+0xf0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d113      	bne.n	8003126 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4a16      	ldr	r2, [pc, #88]	@ (800315c <TIM_OC2_SetConfig+0xf4>)
 8003102:	4013      	ands	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4a15      	ldr	r2, [pc, #84]	@ (8003160 <TIM_OC2_SetConfig+0xf8>)
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	621a      	str	r2, [r3, #32]
}
 8003140:	46c0      	nop			@ (mov r8, r8)
 8003142:	46bd      	mov	sp, r7
 8003144:	b006      	add	sp, #24
 8003146:	bd80      	pop	{r7, pc}
 8003148:	feff8fff 	.word	0xfeff8fff
 800314c:	fffffcff 	.word	0xfffffcff
 8003150:	40012c00 	.word	0x40012c00
 8003154:	40014400 	.word	0x40014400
 8003158:	40014800 	.word	0x40014800
 800315c:	fffffbff 	.word	0xfffffbff
 8003160:	fffff7ff 	.word	0xfffff7ff

08003164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	4a33      	ldr	r2, [pc, #204]	@ (8003240 <TIM_OC3_SetConfig+0xdc>)
 8003174:	401a      	ands	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4a2d      	ldr	r2, [pc, #180]	@ (8003244 <TIM_OC3_SetConfig+0xe0>)
 8003190:	4013      	ands	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2203      	movs	r2, #3
 8003198:	4393      	bics	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	4a27      	ldr	r2, [pc, #156]	@ (8003248 <TIM_OC3_SetConfig+0xe4>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a23      	ldr	r2, [pc, #140]	@ (800324c <TIM_OC3_SetConfig+0xe8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d10d      	bne.n	80031de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	4a22      	ldr	r2, [pc, #136]	@ (8003250 <TIM_OC3_SetConfig+0xec>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003254 <TIM_OC3_SetConfig+0xf0>)
 80031da:	4013      	ands	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a1a      	ldr	r2, [pc, #104]	@ (800324c <TIM_OC3_SetConfig+0xe8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d007      	beq.n	80031f6 <TIM_OC3_SetConfig+0x92>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003258 <TIM_OC3_SetConfig+0xf4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d003      	beq.n	80031f6 <TIM_OC3_SetConfig+0x92>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a1a      	ldr	r2, [pc, #104]	@ (800325c <TIM_OC3_SetConfig+0xf8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d113      	bne.n	800321e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4a19      	ldr	r2, [pc, #100]	@ (8003260 <TIM_OC3_SetConfig+0xfc>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4a18      	ldr	r2, [pc, #96]	@ (8003264 <TIM_OC3_SetConfig+0x100>)
 8003202:	4013      	ands	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	621a      	str	r2, [r3, #32]
}
 8003238:	46c0      	nop			@ (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	b006      	add	sp, #24
 800323e:	bd80      	pop	{r7, pc}
 8003240:	fffffeff 	.word	0xfffffeff
 8003244:	fffeff8f 	.word	0xfffeff8f
 8003248:	fffffdff 	.word	0xfffffdff
 800324c:	40012c00 	.word	0x40012c00
 8003250:	fffff7ff 	.word	0xfffff7ff
 8003254:	fffffbff 	.word	0xfffffbff
 8003258:	40014400 	.word	0x40014400
 800325c:	40014800 	.word	0x40014800
 8003260:	ffffefff 	.word	0xffffefff
 8003264:	ffffdfff 	.word	0xffffdfff

08003268 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	4a26      	ldr	r2, [pc, #152]	@ (8003310 <TIM_OC4_SetConfig+0xa8>)
 8003278:	401a      	ands	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4a20      	ldr	r2, [pc, #128]	@ (8003314 <TIM_OC4_SetConfig+0xac>)
 8003294:	4013      	ands	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a1f      	ldr	r2, [pc, #124]	@ (8003318 <TIM_OC4_SetConfig+0xb0>)
 800329c:	4013      	ands	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	021b      	lsls	r3, r3, #8
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4a1b      	ldr	r2, [pc, #108]	@ (800331c <TIM_OC4_SetConfig+0xb4>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	031b      	lsls	r3, r3, #12
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a17      	ldr	r2, [pc, #92]	@ (8003320 <TIM_OC4_SetConfig+0xb8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d007      	beq.n	80032d8 <TIM_OC4_SetConfig+0x70>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a16      	ldr	r2, [pc, #88]	@ (8003324 <TIM_OC4_SetConfig+0xbc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d003      	beq.n	80032d8 <TIM_OC4_SetConfig+0x70>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a15      	ldr	r2, [pc, #84]	@ (8003328 <TIM_OC4_SetConfig+0xc0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d109      	bne.n	80032ec <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	4a14      	ldr	r2, [pc, #80]	@ (800332c <TIM_OC4_SetConfig+0xc4>)
 80032dc:	4013      	ands	r3, r2
 80032de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	019b      	lsls	r3, r3, #6
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	621a      	str	r2, [r3, #32]
}
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	46bd      	mov	sp, r7
 800330a:	b006      	add	sp, #24
 800330c:	bd80      	pop	{r7, pc}
 800330e:	46c0      	nop			@ (mov r8, r8)
 8003310:	ffffefff 	.word	0xffffefff
 8003314:	feff8fff 	.word	0xfeff8fff
 8003318:	fffffcff 	.word	0xfffffcff
 800331c:	ffffdfff 	.word	0xffffdfff
 8003320:	40012c00 	.word	0x40012c00
 8003324:	40014400 	.word	0x40014400
 8003328:	40014800 	.word	0x40014800
 800332c:	ffffbfff 	.word	0xffffbfff

08003330 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	4a23      	ldr	r2, [pc, #140]	@ (80033cc <TIM_OC5_SetConfig+0x9c>)
 8003340:	401a      	ands	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4a1d      	ldr	r2, [pc, #116]	@ (80033d0 <TIM_OC5_SetConfig+0xa0>)
 800335c:	4013      	ands	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4a19      	ldr	r2, [pc, #100]	@ (80033d4 <TIM_OC5_SetConfig+0xa4>)
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	041b      	lsls	r3, r3, #16
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a15      	ldr	r2, [pc, #84]	@ (80033d8 <TIM_OC5_SetConfig+0xa8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d007      	beq.n	8003396 <TIM_OC5_SetConfig+0x66>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a14      	ldr	r2, [pc, #80]	@ (80033dc <TIM_OC5_SetConfig+0xac>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d003      	beq.n	8003396 <TIM_OC5_SetConfig+0x66>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a13      	ldr	r2, [pc, #76]	@ (80033e0 <TIM_OC5_SetConfig+0xb0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d109      	bne.n	80033aa <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	4a0c      	ldr	r2, [pc, #48]	@ (80033cc <TIM_OC5_SetConfig+0x9c>)
 800339a:	4013      	ands	r3, r2
 800339c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	021b      	lsls	r3, r3, #8
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	621a      	str	r2, [r3, #32]
}
 80033c4:	46c0      	nop			@ (mov r8, r8)
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b006      	add	sp, #24
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	fffeffff 	.word	0xfffeffff
 80033d0:	fffeff8f 	.word	0xfffeff8f
 80033d4:	fffdffff 	.word	0xfffdffff
 80033d8:	40012c00 	.word	0x40012c00
 80033dc:	40014400 	.word	0x40014400
 80033e0:	40014800 	.word	0x40014800

080033e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	4a24      	ldr	r2, [pc, #144]	@ (8003484 <TIM_OC6_SetConfig+0xa0>)
 80033f4:	401a      	ands	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4a1e      	ldr	r2, [pc, #120]	@ (8003488 <TIM_OC6_SetConfig+0xa4>)
 8003410:	4013      	ands	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	021b      	lsls	r3, r3, #8
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4a1a      	ldr	r2, [pc, #104]	@ (800348c <TIM_OC6_SetConfig+0xa8>)
 8003424:	4013      	ands	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	051b      	lsls	r3, r3, #20
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a16      	ldr	r2, [pc, #88]	@ (8003490 <TIM_OC6_SetConfig+0xac>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d007      	beq.n	800344c <TIM_OC6_SetConfig+0x68>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a15      	ldr	r2, [pc, #84]	@ (8003494 <TIM_OC6_SetConfig+0xb0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d003      	beq.n	800344c <TIM_OC6_SetConfig+0x68>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a14      	ldr	r2, [pc, #80]	@ (8003498 <TIM_OC6_SetConfig+0xb4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d109      	bne.n	8003460 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	4a13      	ldr	r2, [pc, #76]	@ (800349c <TIM_OC6_SetConfig+0xb8>)
 8003450:	4013      	ands	r3, r2
 8003452:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	029b      	lsls	r3, r3, #10
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	621a      	str	r2, [r3, #32]
}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	46bd      	mov	sp, r7
 800347e:	b006      	add	sp, #24
 8003480:	bd80      	pop	{r7, pc}
 8003482:	46c0      	nop			@ (mov r8, r8)
 8003484:	ffefffff 	.word	0xffefffff
 8003488:	feff8fff 	.word	0xfeff8fff
 800348c:	ffdfffff 	.word	0xffdfffff
 8003490:	40012c00 	.word	0x40012c00
 8003494:	40014400 	.word	0x40014400
 8003498:	40014800 	.word	0x40014800
 800349c:	fffbffff 	.word	0xfffbffff

080034a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	221f      	movs	r2, #31
 80034b0:	4013      	ands	r3, r2
 80034b2:	2201      	movs	r2, #1
 80034b4:	409a      	lsls	r2, r3
 80034b6:	0013      	movs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	43d2      	mvns	r2, r2
 80034c2:	401a      	ands	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a1a      	ldr	r2, [r3, #32]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	211f      	movs	r1, #31
 80034d0:	400b      	ands	r3, r1
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4099      	lsls	r1, r3
 80034d6:	000b      	movs	r3, r1
 80034d8:	431a      	orrs	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	621a      	str	r2, [r3, #32]
}
 80034de:	46c0      	nop			@ (mov r8, r8)
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b006      	add	sp, #24
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	223c      	movs	r2, #60	@ 0x3c
 80034f6:	5c9b      	ldrb	r3, [r3, r2]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e050      	b.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	223c      	movs	r2, #60	@ 0x3c
 8003504:	2101      	movs	r1, #1
 8003506:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	223d      	movs	r2, #61	@ 0x3d
 800350c:	2102      	movs	r1, #2
 800350e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a21      	ldr	r2, [pc, #132]	@ (80035ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d108      	bne.n	800353c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4a20      	ldr	r2, [pc, #128]	@ (80035b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800352e:	4013      	ands	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2270      	movs	r2, #112	@ 0x70
 8003540:	4393      	bics	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a14      	ldr	r2, [pc, #80]	@ (80035ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00a      	beq.n	8003576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	2380      	movs	r3, #128	@ 0x80
 8003566:	05db      	lsls	r3, r3, #23
 8003568:	429a      	cmp	r2, r3
 800356a:	d004      	beq.n	8003576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a10      	ldr	r2, [pc, #64]	@ (80035b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d10c      	bne.n	8003590 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2280      	movs	r2, #128	@ 0x80
 800357a:	4393      	bics	r3, r2
 800357c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	4313      	orrs	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	223d      	movs	r2, #61	@ 0x3d
 8003594:	2101      	movs	r1, #1
 8003596:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	223c      	movs	r2, #60	@ 0x3c
 800359c:	2100      	movs	r1, #0
 800359e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	0018      	movs	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b004      	add	sp, #16
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	46c0      	nop			@ (mov r8, r8)
 80035ac:	40012c00 	.word	0x40012c00
 80035b0:	ff0fffff 	.word	0xff0fffff
 80035b4:	40000400 	.word	0x40000400

080035b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	223c      	movs	r2, #60	@ 0x3c
 80035ca:	5c9b      	ldrb	r3, [r3, r2]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e079      	b.n	80036c8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	223c      	movs	r2, #60	@ 0x3c
 80035d8:	2101      	movs	r1, #1
 80035da:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	22ff      	movs	r2, #255	@ 0xff
 80035e0:	4393      	bics	r3, r2
 80035e2:	001a      	movs	r2, r3
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4a38      	ldr	r2, [pc, #224]	@ (80036d0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80035f0:	401a      	ands	r2, r3
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4a35      	ldr	r2, [pc, #212]	@ (80036d4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80035fe:	401a      	ands	r2, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a33      	ldr	r2, [pc, #204]	@ (80036d8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800360c:	401a      	ands	r2, r3
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4a30      	ldr	r2, [pc, #192]	@ (80036dc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800361a:	401a      	ands	r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4a2e      	ldr	r2, [pc, #184]	@ (80036e0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003628:	401a      	ands	r2, r3
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4a2b      	ldr	r2, [pc, #172]	@ (80036e4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003636:	401a      	ands	r2, r3
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a29      	ldr	r2, [pc, #164]	@ (80036e8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003644:	401a      	ands	r2, r3
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	041b      	lsls	r3, r3, #16
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a25      	ldr	r2, [pc, #148]	@ (80036ec <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d106      	bne.n	8003668 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4a24      	ldr	r2, [pc, #144]	@ (80036f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800365e:	401a      	ands	r2, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a1f      	ldr	r2, [pc, #124]	@ (80036ec <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d121      	bne.n	80036b6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4a1f      	ldr	r2, [pc, #124]	@ (80036f4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003676:	401a      	ands	r2, r3
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367c:	051b      	lsls	r3, r3, #20
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4a1c      	ldr	r2, [pc, #112]	@ (80036f8 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8003686:	401a      	ands	r2, r3
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	4313      	orrs	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4a1a      	ldr	r2, [pc, #104]	@ (80036fc <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8003694:	401a      	ands	r2, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a12      	ldr	r2, [pc, #72]	@ (80036ec <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d106      	bne.n	80036b6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4a15      	ldr	r2, [pc, #84]	@ (8003700 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80036ac:	401a      	ands	r2, r3
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	223c      	movs	r2, #60	@ 0x3c
 80036c2:	2100      	movs	r1, #0
 80036c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	0018      	movs	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b004      	add	sp, #16
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	fffffcff 	.word	0xfffffcff
 80036d4:	fffffbff 	.word	0xfffffbff
 80036d8:	fffff7ff 	.word	0xfffff7ff
 80036dc:	ffffefff 	.word	0xffffefff
 80036e0:	ffffdfff 	.word	0xffffdfff
 80036e4:	ffffbfff 	.word	0xffffbfff
 80036e8:	fff0ffff 	.word	0xfff0ffff
 80036ec:	40012c00 	.word	0x40012c00
 80036f0:	efffffff 	.word	0xefffffff
 80036f4:	ff0fffff 	.word	0xff0fffff
 80036f8:	feffffff 	.word	0xfeffffff
 80036fc:	fdffffff 	.word	0xfdffffff
 8003700:	dfffffff 	.word	0xdfffffff

08003704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e046      	b.n	80037a4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2288      	movs	r2, #136	@ 0x88
 800371a:	589b      	ldr	r3, [r3, r2]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d107      	bne.n	8003730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2284      	movs	r2, #132	@ 0x84
 8003724:	2100      	movs	r1, #0
 8003726:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	0018      	movs	r0, r3
 800372c:	f7fd fac8 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2288      	movs	r2, #136	@ 0x88
 8003734:	2124      	movs	r1, #36	@ 0x24
 8003736:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2101      	movs	r1, #1
 8003744:	438a      	bics	r2, r1
 8003746:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	0018      	movs	r0, r3
 800374c:	f000 f830 	bl	80037b0 <UART_SetConfig>
 8003750:	0003      	movs	r3, r0
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e024      	b.n	80037a4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	0018      	movs	r0, r3
 8003766:	f000 fa9b 	bl	8003ca0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	490d      	ldr	r1, [pc, #52]	@ (80037ac <HAL_UART_Init+0xa8>)
 8003776:	400a      	ands	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	212a      	movs	r1, #42	@ 0x2a
 8003786:	438a      	bics	r2, r1
 8003788:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2101      	movs	r1, #1
 8003796:	430a      	orrs	r2, r1
 8003798:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	0018      	movs	r0, r3
 800379e:	f000 fb33 	bl	8003e08 <UART_CheckIdleState>
 80037a2:	0003      	movs	r3, r0
}
 80037a4:	0018      	movs	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b002      	add	sp, #8
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	ffffb7ff 	.word	0xffffb7ff

080037b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b0:	b5b0      	push	{r4, r5, r7, lr}
 80037b2:	b090      	sub	sp, #64	@ 0x40
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037b8:	231a      	movs	r3, #26
 80037ba:	2220      	movs	r2, #32
 80037bc:	189b      	adds	r3, r3, r2
 80037be:	19db      	adds	r3, r3, r7
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	431a      	orrs	r2, r3
 80037ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	4313      	orrs	r3, r2
 80037da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4ac4      	ldr	r2, [pc, #784]	@ (8003af4 <UART_SetConfig+0x344>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	0019      	movs	r1, r3
 80037e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ee:	430b      	orrs	r3, r1
 80037f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	4abf      	ldr	r2, [pc, #764]	@ (8003af8 <UART_SetConfig+0x348>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	0018      	movs	r0, r3
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	68d9      	ldr	r1, [r3, #12]
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	0003      	movs	r3, r0
 8003808:	430b      	orrs	r3, r1
 800380a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800380c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4ab9      	ldr	r2, [pc, #740]	@ (8003afc <UART_SetConfig+0x34c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d004      	beq.n	8003826 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800381c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003822:	4313      	orrs	r3, r2
 8003824:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	4ab4      	ldr	r2, [pc, #720]	@ (8003b00 <UART_SetConfig+0x350>)
 800382e:	4013      	ands	r3, r2
 8003830:	0019      	movs	r1, r3
 8003832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003838:	430b      	orrs	r3, r1
 800383a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003842:	220f      	movs	r2, #15
 8003844:	4393      	bics	r3, r2
 8003846:	0018      	movs	r0, r3
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800384c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	0003      	movs	r3, r0
 8003852:	430b      	orrs	r3, r1
 8003854:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4aaa      	ldr	r2, [pc, #680]	@ (8003b04 <UART_SetConfig+0x354>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d131      	bne.n	80038c4 <UART_SetConfig+0x114>
 8003860:	4ba9      	ldr	r3, [pc, #676]	@ (8003b08 <UART_SetConfig+0x358>)
 8003862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003864:	2203      	movs	r2, #3
 8003866:	4013      	ands	r3, r2
 8003868:	2b03      	cmp	r3, #3
 800386a:	d01d      	beq.n	80038a8 <UART_SetConfig+0xf8>
 800386c:	d823      	bhi.n	80038b6 <UART_SetConfig+0x106>
 800386e:	2b02      	cmp	r3, #2
 8003870:	d00c      	beq.n	800388c <UART_SetConfig+0xdc>
 8003872:	d820      	bhi.n	80038b6 <UART_SetConfig+0x106>
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <UART_SetConfig+0xce>
 8003878:	2b01      	cmp	r3, #1
 800387a:	d00e      	beq.n	800389a <UART_SetConfig+0xea>
 800387c:	e01b      	b.n	80038b6 <UART_SetConfig+0x106>
 800387e:	231b      	movs	r3, #27
 8003880:	2220      	movs	r2, #32
 8003882:	189b      	adds	r3, r3, r2
 8003884:	19db      	adds	r3, r3, r7
 8003886:	2200      	movs	r2, #0
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	e071      	b.n	8003970 <UART_SetConfig+0x1c0>
 800388c:	231b      	movs	r3, #27
 800388e:	2220      	movs	r2, #32
 8003890:	189b      	adds	r3, r3, r2
 8003892:	19db      	adds	r3, r3, r7
 8003894:	2202      	movs	r2, #2
 8003896:	701a      	strb	r2, [r3, #0]
 8003898:	e06a      	b.n	8003970 <UART_SetConfig+0x1c0>
 800389a:	231b      	movs	r3, #27
 800389c:	2220      	movs	r2, #32
 800389e:	189b      	adds	r3, r3, r2
 80038a0:	19db      	adds	r3, r3, r7
 80038a2:	2204      	movs	r2, #4
 80038a4:	701a      	strb	r2, [r3, #0]
 80038a6:	e063      	b.n	8003970 <UART_SetConfig+0x1c0>
 80038a8:	231b      	movs	r3, #27
 80038aa:	2220      	movs	r2, #32
 80038ac:	189b      	adds	r3, r3, r2
 80038ae:	19db      	adds	r3, r3, r7
 80038b0:	2208      	movs	r2, #8
 80038b2:	701a      	strb	r2, [r3, #0]
 80038b4:	e05c      	b.n	8003970 <UART_SetConfig+0x1c0>
 80038b6:	231b      	movs	r3, #27
 80038b8:	2220      	movs	r2, #32
 80038ba:	189b      	adds	r3, r3, r2
 80038bc:	19db      	adds	r3, r3, r7
 80038be:	2210      	movs	r2, #16
 80038c0:	701a      	strb	r2, [r3, #0]
 80038c2:	e055      	b.n	8003970 <UART_SetConfig+0x1c0>
 80038c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a90      	ldr	r2, [pc, #576]	@ (8003b0c <UART_SetConfig+0x35c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d106      	bne.n	80038dc <UART_SetConfig+0x12c>
 80038ce:	231b      	movs	r3, #27
 80038d0:	2220      	movs	r2, #32
 80038d2:	189b      	adds	r3, r3, r2
 80038d4:	19db      	adds	r3, r3, r7
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	e049      	b.n	8003970 <UART_SetConfig+0x1c0>
 80038dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a86      	ldr	r2, [pc, #536]	@ (8003afc <UART_SetConfig+0x34c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d13e      	bne.n	8003964 <UART_SetConfig+0x1b4>
 80038e6:	4b88      	ldr	r3, [pc, #544]	@ (8003b08 <UART_SetConfig+0x358>)
 80038e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038ea:	23c0      	movs	r3, #192	@ 0xc0
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	4013      	ands	r3, r2
 80038f0:	22c0      	movs	r2, #192	@ 0xc0
 80038f2:	0112      	lsls	r2, r2, #4
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d027      	beq.n	8003948 <UART_SetConfig+0x198>
 80038f8:	22c0      	movs	r2, #192	@ 0xc0
 80038fa:	0112      	lsls	r2, r2, #4
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d82a      	bhi.n	8003956 <UART_SetConfig+0x1a6>
 8003900:	2280      	movs	r2, #128	@ 0x80
 8003902:	0112      	lsls	r2, r2, #4
 8003904:	4293      	cmp	r3, r2
 8003906:	d011      	beq.n	800392c <UART_SetConfig+0x17c>
 8003908:	2280      	movs	r2, #128	@ 0x80
 800390a:	0112      	lsls	r2, r2, #4
 800390c:	4293      	cmp	r3, r2
 800390e:	d822      	bhi.n	8003956 <UART_SetConfig+0x1a6>
 8003910:	2b00      	cmp	r3, #0
 8003912:	d004      	beq.n	800391e <UART_SetConfig+0x16e>
 8003914:	2280      	movs	r2, #128	@ 0x80
 8003916:	00d2      	lsls	r2, r2, #3
 8003918:	4293      	cmp	r3, r2
 800391a:	d00e      	beq.n	800393a <UART_SetConfig+0x18a>
 800391c:	e01b      	b.n	8003956 <UART_SetConfig+0x1a6>
 800391e:	231b      	movs	r3, #27
 8003920:	2220      	movs	r2, #32
 8003922:	189b      	adds	r3, r3, r2
 8003924:	19db      	adds	r3, r3, r7
 8003926:	2200      	movs	r2, #0
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	e021      	b.n	8003970 <UART_SetConfig+0x1c0>
 800392c:	231b      	movs	r3, #27
 800392e:	2220      	movs	r2, #32
 8003930:	189b      	adds	r3, r3, r2
 8003932:	19db      	adds	r3, r3, r7
 8003934:	2202      	movs	r2, #2
 8003936:	701a      	strb	r2, [r3, #0]
 8003938:	e01a      	b.n	8003970 <UART_SetConfig+0x1c0>
 800393a:	231b      	movs	r3, #27
 800393c:	2220      	movs	r2, #32
 800393e:	189b      	adds	r3, r3, r2
 8003940:	19db      	adds	r3, r3, r7
 8003942:	2204      	movs	r2, #4
 8003944:	701a      	strb	r2, [r3, #0]
 8003946:	e013      	b.n	8003970 <UART_SetConfig+0x1c0>
 8003948:	231b      	movs	r3, #27
 800394a:	2220      	movs	r2, #32
 800394c:	189b      	adds	r3, r3, r2
 800394e:	19db      	adds	r3, r3, r7
 8003950:	2208      	movs	r2, #8
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	e00c      	b.n	8003970 <UART_SetConfig+0x1c0>
 8003956:	231b      	movs	r3, #27
 8003958:	2220      	movs	r2, #32
 800395a:	189b      	adds	r3, r3, r2
 800395c:	19db      	adds	r3, r3, r7
 800395e:	2210      	movs	r2, #16
 8003960:	701a      	strb	r2, [r3, #0]
 8003962:	e005      	b.n	8003970 <UART_SetConfig+0x1c0>
 8003964:	231b      	movs	r3, #27
 8003966:	2220      	movs	r2, #32
 8003968:	189b      	adds	r3, r3, r2
 800396a:	19db      	adds	r3, r3, r7
 800396c:	2210      	movs	r2, #16
 800396e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a61      	ldr	r2, [pc, #388]	@ (8003afc <UART_SetConfig+0x34c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d000      	beq.n	800397c <UART_SetConfig+0x1cc>
 800397a:	e092      	b.n	8003aa2 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800397c:	231b      	movs	r3, #27
 800397e:	2220      	movs	r2, #32
 8003980:	189b      	adds	r3, r3, r2
 8003982:	19db      	adds	r3, r3, r7
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b08      	cmp	r3, #8
 8003988:	d015      	beq.n	80039b6 <UART_SetConfig+0x206>
 800398a:	dc18      	bgt.n	80039be <UART_SetConfig+0x20e>
 800398c:	2b04      	cmp	r3, #4
 800398e:	d00d      	beq.n	80039ac <UART_SetConfig+0x1fc>
 8003990:	dc15      	bgt.n	80039be <UART_SetConfig+0x20e>
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <UART_SetConfig+0x1ec>
 8003996:	2b02      	cmp	r3, #2
 8003998:	d005      	beq.n	80039a6 <UART_SetConfig+0x1f6>
 800399a:	e010      	b.n	80039be <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800399c:	f7fe fa70 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 80039a0:	0003      	movs	r3, r0
 80039a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80039a4:	e014      	b.n	80039d0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039a6:	4b5a      	ldr	r3, [pc, #360]	@ (8003b10 <UART_SetConfig+0x360>)
 80039a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80039aa:	e011      	b.n	80039d0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ac:	f7fe f9dc 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 80039b0:	0003      	movs	r3, r0
 80039b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80039b4:	e00c      	b.n	80039d0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039b6:	2380      	movs	r3, #128	@ 0x80
 80039b8:	021b      	lsls	r3, r3, #8
 80039ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80039bc:	e008      	b.n	80039d0 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80039c2:	231a      	movs	r3, #26
 80039c4:	2220      	movs	r2, #32
 80039c6:	189b      	adds	r3, r3, r2
 80039c8:	19db      	adds	r3, r3, r7
 80039ca:	2201      	movs	r2, #1
 80039cc:	701a      	strb	r2, [r3, #0]
        break;
 80039ce:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d100      	bne.n	80039d8 <UART_SetConfig+0x228>
 80039d6:	e147      	b.n	8003c68 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039dc:	4b4d      	ldr	r3, [pc, #308]	@ (8003b14 <UART_SetConfig+0x364>)
 80039de:	0052      	lsls	r2, r2, #1
 80039e0:	5ad3      	ldrh	r3, [r2, r3]
 80039e2:	0019      	movs	r1, r3
 80039e4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80039e6:	f7fc fb8d 	bl	8000104 <__udivsi3>
 80039ea:	0003      	movs	r3, r0
 80039ec:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	0013      	movs	r3, r2
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	189b      	adds	r3, r3, r2
 80039f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d305      	bcc.n	8003a0a <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d906      	bls.n	8003a18 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8003a0a:	231a      	movs	r3, #26
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	189b      	adds	r3, r3, r2
 8003a10:	19db      	adds	r3, r3, r7
 8003a12:	2201      	movs	r2, #1
 8003a14:	701a      	strb	r2, [r3, #0]
 8003a16:	e127      	b.n	8003c68 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1a:	61bb      	str	r3, [r7, #24]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a24:	4b3b      	ldr	r3, [pc, #236]	@ (8003b14 <UART_SetConfig+0x364>)
 8003a26:	0052      	lsls	r2, r2, #1
 8003a28:	5ad3      	ldrh	r3, [r2, r3]
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	69b8      	ldr	r0, [r7, #24]
 8003a36:	69f9      	ldr	r1, [r7, #28]
 8003a38:	f7fc fbf0 	bl	800021c <__aeabi_uldivmod>
 8003a3c:	0002      	movs	r2, r0
 8003a3e:	000b      	movs	r3, r1
 8003a40:	0e11      	lsrs	r1, r2, #24
 8003a42:	021d      	lsls	r5, r3, #8
 8003a44:	430d      	orrs	r5, r1
 8003a46:	0214      	lsls	r4, r2, #8
 8003a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	085b      	lsrs	r3, r3, #1
 8003a4e:	60bb      	str	r3, [r7, #8]
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	68b8      	ldr	r0, [r7, #8]
 8003a56:	68f9      	ldr	r1, [r7, #12]
 8003a58:	1900      	adds	r0, r0, r4
 8003a5a:	4169      	adcs	r1, r5
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	2300      	movs	r3, #0
 8003a64:	607b      	str	r3, [r7, #4]
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f7fc fbd7 	bl	800021c <__aeabi_uldivmod>
 8003a6e:	0002      	movs	r2, r0
 8003a70:	000b      	movs	r3, r1
 8003a72:	0013      	movs	r3, r2
 8003a74:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a78:	23c0      	movs	r3, #192	@ 0xc0
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d309      	bcc.n	8003a94 <UART_SetConfig+0x2e4>
 8003a80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a82:	2380      	movs	r3, #128	@ 0x80
 8003a84:	035b      	lsls	r3, r3, #13
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d204      	bcs.n	8003a94 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	e0e9      	b.n	8003c68 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8003a94:	231a      	movs	r3, #26
 8003a96:	2220      	movs	r2, #32
 8003a98:	189b      	adds	r3, r3, r2
 8003a9a:	19db      	adds	r3, r3, r7
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	701a      	strb	r2, [r3, #0]
 8003aa0:	e0e2      	b.n	8003c68 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa4:	69da      	ldr	r2, [r3, #28]
 8003aa6:	2380      	movs	r3, #128	@ 0x80
 8003aa8:	021b      	lsls	r3, r3, #8
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d000      	beq.n	8003ab0 <UART_SetConfig+0x300>
 8003aae:	e083      	b.n	8003bb8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003ab0:	231b      	movs	r3, #27
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	189b      	adds	r3, r3, r2
 8003ab6:	19db      	adds	r3, r3, r7
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d015      	beq.n	8003aea <UART_SetConfig+0x33a>
 8003abe:	dc2b      	bgt.n	8003b18 <UART_SetConfig+0x368>
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d00d      	beq.n	8003ae0 <UART_SetConfig+0x330>
 8003ac4:	dc28      	bgt.n	8003b18 <UART_SetConfig+0x368>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <UART_SetConfig+0x320>
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d005      	beq.n	8003ada <UART_SetConfig+0x32a>
 8003ace:	e023      	b.n	8003b18 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ad0:	f7fe f9d6 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8003ad4:	0003      	movs	r3, r0
 8003ad6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003ad8:	e027      	b.n	8003b2a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ada:	4b0d      	ldr	r3, [pc, #52]	@ (8003b10 <UART_SetConfig+0x360>)
 8003adc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003ade:	e024      	b.n	8003b2a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ae0:	f7fe f942 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8003ae4:	0003      	movs	r3, r0
 8003ae6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003ae8:	e01f      	b.n	8003b2a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aea:	2380      	movs	r3, #128	@ 0x80
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003af0:	e01b      	b.n	8003b2a <UART_SetConfig+0x37a>
 8003af2:	46c0      	nop			@ (mov r8, r8)
 8003af4:	cfff69f3 	.word	0xcfff69f3
 8003af8:	ffffcfff 	.word	0xffffcfff
 8003afc:	40008000 	.word	0x40008000
 8003b00:	11fff4ff 	.word	0x11fff4ff
 8003b04:	40013800 	.word	0x40013800
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40004400 	.word	0x40004400
 8003b10:	00f42400 	.word	0x00f42400
 8003b14:	08004170 	.word	0x08004170
      default:
        pclk = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003b1c:	231a      	movs	r3, #26
 8003b1e:	2220      	movs	r2, #32
 8003b20:	189b      	adds	r3, r3, r2
 8003b22:	19db      	adds	r3, r3, r7
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
        break;
 8003b28:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d100      	bne.n	8003b32 <UART_SetConfig+0x382>
 8003b30:	e09a      	b.n	8003c68 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b36:	4b58      	ldr	r3, [pc, #352]	@ (8003c98 <UART_SetConfig+0x4e8>)
 8003b38:	0052      	lsls	r2, r2, #1
 8003b3a:	5ad3      	ldrh	r3, [r2, r3]
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003b40:	f7fc fae0 	bl	8000104 <__udivsi3>
 8003b44:	0003      	movs	r3, r0
 8003b46:	005a      	lsls	r2, r3, #1
 8003b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	085b      	lsrs	r3, r3, #1
 8003b4e:	18d2      	adds	r2, r2, r3
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	0019      	movs	r1, r3
 8003b56:	0010      	movs	r0, r2
 8003b58:	f7fc fad4 	bl	8000104 <__udivsi3>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b62:	2b0f      	cmp	r3, #15
 8003b64:	d921      	bls.n	8003baa <UART_SetConfig+0x3fa>
 8003b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b68:	2380      	movs	r3, #128	@ 0x80
 8003b6a:	025b      	lsls	r3, r3, #9
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d21c      	bcs.n	8003baa <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	200e      	movs	r0, #14
 8003b76:	2420      	movs	r4, #32
 8003b78:	1903      	adds	r3, r0, r4
 8003b7a:	19db      	adds	r3, r3, r7
 8003b7c:	210f      	movs	r1, #15
 8003b7e:	438a      	bics	r2, r1
 8003b80:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b84:	085b      	lsrs	r3, r3, #1
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2207      	movs	r2, #7
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	b299      	uxth	r1, r3
 8003b8e:	1903      	adds	r3, r0, r4
 8003b90:	19db      	adds	r3, r3, r7
 8003b92:	1902      	adds	r2, r0, r4
 8003b94:	19d2      	adds	r2, r2, r7
 8003b96:	8812      	ldrh	r2, [r2, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	1902      	adds	r2, r0, r4
 8003ba2:	19d2      	adds	r2, r2, r7
 8003ba4:	8812      	ldrh	r2, [r2, #0]
 8003ba6:	60da      	str	r2, [r3, #12]
 8003ba8:	e05e      	b.n	8003c68 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003baa:	231a      	movs	r3, #26
 8003bac:	2220      	movs	r2, #32
 8003bae:	189b      	adds	r3, r3, r2
 8003bb0:	19db      	adds	r3, r3, r7
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	e057      	b.n	8003c68 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bb8:	231b      	movs	r3, #27
 8003bba:	2220      	movs	r2, #32
 8003bbc:	189b      	adds	r3, r3, r2
 8003bbe:	19db      	adds	r3, r3, r7
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d015      	beq.n	8003bf2 <UART_SetConfig+0x442>
 8003bc6:	dc18      	bgt.n	8003bfa <UART_SetConfig+0x44a>
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d00d      	beq.n	8003be8 <UART_SetConfig+0x438>
 8003bcc:	dc15      	bgt.n	8003bfa <UART_SetConfig+0x44a>
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <UART_SetConfig+0x428>
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d005      	beq.n	8003be2 <UART_SetConfig+0x432>
 8003bd6:	e010      	b.n	8003bfa <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd8:	f7fe f952 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8003bdc:	0003      	movs	r3, r0
 8003bde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003be0:	e014      	b.n	8003c0c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003be2:	4b2e      	ldr	r3, [pc, #184]	@ (8003c9c <UART_SetConfig+0x4ec>)
 8003be4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003be6:	e011      	b.n	8003c0c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003be8:	f7fe f8be 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8003bec:	0003      	movs	r3, r0
 8003bee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003bf0:	e00c      	b.n	8003c0c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bf2:	2380      	movs	r3, #128	@ 0x80
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003bf8:	e008      	b.n	8003c0c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003bfe:	231a      	movs	r3, #26
 8003c00:	2220      	movs	r2, #32
 8003c02:	189b      	adds	r3, r3, r2
 8003c04:	19db      	adds	r3, r3, r7
 8003c06:	2201      	movs	r2, #1
 8003c08:	701a      	strb	r2, [r3, #0]
        break;
 8003c0a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d02a      	beq.n	8003c68 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c16:	4b20      	ldr	r3, [pc, #128]	@ (8003c98 <UART_SetConfig+0x4e8>)
 8003c18:	0052      	lsls	r2, r2, #1
 8003c1a:	5ad3      	ldrh	r3, [r2, r3]
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003c20:	f7fc fa70 	bl	8000104 <__udivsi3>
 8003c24:	0003      	movs	r3, r0
 8003c26:	001a      	movs	r2, r3
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	18d2      	adds	r2, r2, r3
 8003c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	0019      	movs	r1, r3
 8003c36:	0010      	movs	r0, r2
 8003c38:	f7fc fa64 	bl	8000104 <__udivsi3>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c42:	2b0f      	cmp	r3, #15
 8003c44:	d90a      	bls.n	8003c5c <UART_SetConfig+0x4ac>
 8003c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c48:	2380      	movs	r3, #128	@ 0x80
 8003c4a:	025b      	lsls	r3, r3, #9
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d205      	bcs.n	8003c5c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	60da      	str	r2, [r3, #12]
 8003c5a:	e005      	b.n	8003c68 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003c5c:	231a      	movs	r3, #26
 8003c5e:	2220      	movs	r2, #32
 8003c60:	189b      	adds	r3, r3, r2
 8003c62:	19db      	adds	r3, r3, r7
 8003c64:	2201      	movs	r2, #1
 8003c66:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	226a      	movs	r2, #106	@ 0x6a
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c72:	2268      	movs	r2, #104	@ 0x68
 8003c74:	2101      	movs	r1, #1
 8003c76:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c80:	2200      	movs	r2, #0
 8003c82:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003c84:	231a      	movs	r3, #26
 8003c86:	2220      	movs	r2, #32
 8003c88:	189b      	adds	r3, r3, r2
 8003c8a:	19db      	adds	r3, r3, r7
 8003c8c:	781b      	ldrb	r3, [r3, #0]
}
 8003c8e:	0018      	movs	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	b010      	add	sp, #64	@ 0x40
 8003c94:	bdb0      	pop	{r4, r5, r7, pc}
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	08004170 	.word	0x08004170
 8003c9c:	00f42400 	.word	0x00f42400

08003ca0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cac:	2201      	movs	r2, #1
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d00b      	beq.n	8003cca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	4a4a      	ldr	r2, [pc, #296]	@ (8003de4 <UART_AdvFeatureConfig+0x144>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	0019      	movs	r1, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cce:	2202      	movs	r2, #2
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	d00b      	beq.n	8003cec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	4a43      	ldr	r2, [pc, #268]	@ (8003de8 <UART_AdvFeatureConfig+0x148>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	0019      	movs	r1, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d00b      	beq.n	8003d0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	4a3b      	ldr	r2, [pc, #236]	@ (8003dec <UART_AdvFeatureConfig+0x14c>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	0019      	movs	r1, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d12:	2208      	movs	r2, #8
 8003d14:	4013      	ands	r3, r2
 8003d16:	d00b      	beq.n	8003d30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4a34      	ldr	r2, [pc, #208]	@ (8003df0 <UART_AdvFeatureConfig+0x150>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	0019      	movs	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d34:	2210      	movs	r2, #16
 8003d36:	4013      	ands	r3, r2
 8003d38:	d00b      	beq.n	8003d52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	4a2c      	ldr	r2, [pc, #176]	@ (8003df4 <UART_AdvFeatureConfig+0x154>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	0019      	movs	r1, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d56:	2220      	movs	r2, #32
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d00b      	beq.n	8003d74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	4a25      	ldr	r2, [pc, #148]	@ (8003df8 <UART_AdvFeatureConfig+0x158>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	0019      	movs	r1, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d78:	2240      	movs	r2, #64	@ 0x40
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d01d      	beq.n	8003dba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	4a1d      	ldr	r2, [pc, #116]	@ (8003dfc <UART_AdvFeatureConfig+0x15c>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	0019      	movs	r1, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d9a:	2380      	movs	r3, #128	@ 0x80
 8003d9c:	035b      	lsls	r3, r3, #13
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d10b      	bne.n	8003dba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4a15      	ldr	r2, [pc, #84]	@ (8003e00 <UART_AdvFeatureConfig+0x160>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	0019      	movs	r1, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dbe:	2280      	movs	r2, #128	@ 0x80
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d00b      	beq.n	8003ddc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	4a0e      	ldr	r2, [pc, #56]	@ (8003e04 <UART_AdvFeatureConfig+0x164>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	0019      	movs	r1, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	605a      	str	r2, [r3, #4]
  }
}
 8003ddc:	46c0      	nop			@ (mov r8, r8)
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b002      	add	sp, #8
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	fffdffff 	.word	0xfffdffff
 8003de8:	fffeffff 	.word	0xfffeffff
 8003dec:	fffbffff 	.word	0xfffbffff
 8003df0:	ffff7fff 	.word	0xffff7fff
 8003df4:	ffffefff 	.word	0xffffefff
 8003df8:	ffffdfff 	.word	0xffffdfff
 8003dfc:	ffefffff 	.word	0xffefffff
 8003e00:	ff9fffff 	.word	0xff9fffff
 8003e04:	fff7ffff 	.word	0xfff7ffff

08003e08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2290      	movs	r2, #144	@ 0x90
 8003e14:	2100      	movs	r1, #0
 8003e16:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e18:	f7fd f876 	bl	8000f08 <HAL_GetTick>
 8003e1c:	0003      	movs	r3, r0
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2208      	movs	r2, #8
 8003e28:	4013      	ands	r3, r2
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d10c      	bne.n	8003e48 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2280      	movs	r2, #128	@ 0x80
 8003e32:	0391      	lsls	r1, r2, #14
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	4a1a      	ldr	r2, [pc, #104]	@ (8003ea0 <UART_CheckIdleState+0x98>)
 8003e38:	9200      	str	r2, [sp, #0]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f000 f832 	bl	8003ea4 <UART_WaitOnFlagUntilTimeout>
 8003e40:	1e03      	subs	r3, r0, #0
 8003e42:	d001      	beq.n	8003e48 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e026      	b.n	8003e96 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2204      	movs	r2, #4
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d10c      	bne.n	8003e70 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2280      	movs	r2, #128	@ 0x80
 8003e5a:	03d1      	lsls	r1, r2, #15
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	4a10      	ldr	r2, [pc, #64]	@ (8003ea0 <UART_CheckIdleState+0x98>)
 8003e60:	9200      	str	r2, [sp, #0]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f000 f81e 	bl	8003ea4 <UART_WaitOnFlagUntilTimeout>
 8003e68:	1e03      	subs	r3, r0, #0
 8003e6a:	d001      	beq.n	8003e70 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e012      	b.n	8003e96 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2288      	movs	r2, #136	@ 0x88
 8003e74:	2120      	movs	r1, #32
 8003e76:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	228c      	movs	r2, #140	@ 0x8c
 8003e7c:	2120      	movs	r1, #32
 8003e7e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2284      	movs	r2, #132	@ 0x84
 8003e90:	2100      	movs	r1, #0
 8003e92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	0018      	movs	r0, r3
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	b004      	add	sp, #16
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	46c0      	nop			@ (mov r8, r8)
 8003ea0:	01ffffff 	.word	0x01ffffff

08003ea4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b094      	sub	sp, #80	@ 0x50
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	1dfb      	adds	r3, r7, #7
 8003eb2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb4:	e0a7      	b.n	8004006 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003eb8:	3301      	adds	r3, #1
 8003eba:	d100      	bne.n	8003ebe <UART_WaitOnFlagUntilTimeout+0x1a>
 8003ebc:	e0a3      	b.n	8004006 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ebe:	f7fd f823 	bl	8000f08 <HAL_GetTick>
 8003ec2:	0002      	movs	r2, r0
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d302      	bcc.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ece:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d13f      	bne.n	8003f54 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003edc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ede:	2301      	movs	r3, #1
 8003ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee4:	f383 8810 	msr	PRIMASK, r3
}
 8003ee8:	46c0      	nop			@ (mov r8, r8)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	494e      	ldr	r1, [pc, #312]	@ (8004030 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003ef6:	400a      	ands	r2, r1
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003efc:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f00:	f383 8810 	msr	PRIMASK, r3
}
 8003f04:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f06:	f3ef 8310 	mrs	r3, PRIMASK
 8003f0a:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f10:	2301      	movs	r3, #1
 8003f12:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f16:	f383 8810 	msr	PRIMASK, r3
}
 8003f1a:	46c0      	nop			@ (mov r8, r8)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2101      	movs	r1, #1
 8003f28:	438a      	bics	r2, r1
 8003f2a:	609a      	str	r2, [r3, #8]
 8003f2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f32:	f383 8810 	msr	PRIMASK, r3
}
 8003f36:	46c0      	nop			@ (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2288      	movs	r2, #136	@ 0x88
 8003f3c:	2120      	movs	r1, #32
 8003f3e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	228c      	movs	r2, #140	@ 0x8c
 8003f44:	2120      	movs	r1, #32
 8003f46:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2284      	movs	r2, #132	@ 0x84
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e069      	b.n	8004028 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	d052      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	69da      	ldr	r2, [r3, #28]
 8003f66:	2380      	movs	r3, #128	@ 0x80
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	401a      	ands	r2, r3
 8003f6c:	2380      	movs	r3, #128	@ 0x80
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d148      	bne.n	8004006 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2280      	movs	r2, #128	@ 0x80
 8003f7a:	0112      	lsls	r2, r2, #4
 8003f7c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f82:	613b      	str	r3, [r7, #16]
  return(result);
 8003f84:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f88:	2301      	movs	r3, #1
 8003f8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f383 8810 	msr	PRIMASK, r3
}
 8003f92:	46c0      	nop			@ (mov r8, r8)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4924      	ldr	r1, [pc, #144]	@ (8004030 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003fa0:	400a      	ands	r2, r1
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fa6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	f383 8810 	msr	PRIMASK, r3
}
 8003fae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb0:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb4:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fb6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fba:	2301      	movs	r3, #1
 8003fbc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	f383 8810 	msr	PRIMASK, r3
}
 8003fc4:	46c0      	nop			@ (mov r8, r8)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	438a      	bics	r2, r1
 8003fd4:	609a      	str	r2, [r3, #8]
 8003fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	f383 8810 	msr	PRIMASK, r3
}
 8003fe0:	46c0      	nop			@ (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2288      	movs	r2, #136	@ 0x88
 8003fe6:	2120      	movs	r1, #32
 8003fe8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	228c      	movs	r2, #140	@ 0x8c
 8003fee:	2120      	movs	r1, #32
 8003ff0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2290      	movs	r2, #144	@ 0x90
 8003ff6:	2120      	movs	r1, #32
 8003ff8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2284      	movs	r2, #132	@ 0x84
 8003ffe:	2100      	movs	r1, #0
 8004000:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e010      	b.n	8004028 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	4013      	ands	r3, r2
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	425a      	negs	r2, r3
 8004016:	4153      	adcs	r3, r2
 8004018:	b2db      	uxtb	r3, r3
 800401a:	001a      	movs	r2, r3
 800401c:	1dfb      	adds	r3, r7, #7
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d100      	bne.n	8004026 <UART_WaitOnFlagUntilTimeout+0x182>
 8004024:	e747      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	0018      	movs	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	b014      	add	sp, #80	@ 0x50
 800402e:	bd80      	pop	{r7, pc}
 8004030:	fffffe5f 	.word	0xfffffe5f

08004034 <memset>:
 8004034:	0003      	movs	r3, r0
 8004036:	1882      	adds	r2, r0, r2
 8004038:	4293      	cmp	r3, r2
 800403a:	d100      	bne.n	800403e <memset+0xa>
 800403c:	4770      	bx	lr
 800403e:	7019      	strb	r1, [r3, #0]
 8004040:	3301      	adds	r3, #1
 8004042:	e7f9      	b.n	8004038 <memset+0x4>

08004044 <__libc_init_array>:
 8004044:	b570      	push	{r4, r5, r6, lr}
 8004046:	2600      	movs	r6, #0
 8004048:	4c0c      	ldr	r4, [pc, #48]	@ (800407c <__libc_init_array+0x38>)
 800404a:	4d0d      	ldr	r5, [pc, #52]	@ (8004080 <__libc_init_array+0x3c>)
 800404c:	1b64      	subs	r4, r4, r5
 800404e:	10a4      	asrs	r4, r4, #2
 8004050:	42a6      	cmp	r6, r4
 8004052:	d109      	bne.n	8004068 <__libc_init_array+0x24>
 8004054:	2600      	movs	r6, #0
 8004056:	f000 f819 	bl	800408c <_init>
 800405a:	4c0a      	ldr	r4, [pc, #40]	@ (8004084 <__libc_init_array+0x40>)
 800405c:	4d0a      	ldr	r5, [pc, #40]	@ (8004088 <__libc_init_array+0x44>)
 800405e:	1b64      	subs	r4, r4, r5
 8004060:	10a4      	asrs	r4, r4, #2
 8004062:	42a6      	cmp	r6, r4
 8004064:	d105      	bne.n	8004072 <__libc_init_array+0x2e>
 8004066:	bd70      	pop	{r4, r5, r6, pc}
 8004068:	00b3      	lsls	r3, r6, #2
 800406a:	58eb      	ldr	r3, [r5, r3]
 800406c:	4798      	blx	r3
 800406e:	3601      	adds	r6, #1
 8004070:	e7ee      	b.n	8004050 <__libc_init_array+0xc>
 8004072:	00b3      	lsls	r3, r6, #2
 8004074:	58eb      	ldr	r3, [r5, r3]
 8004076:	4798      	blx	r3
 8004078:	3601      	adds	r6, #1
 800407a:	e7f2      	b.n	8004062 <__libc_init_array+0x1e>
 800407c:	08004190 	.word	0x08004190
 8004080:	08004190 	.word	0x08004190
 8004084:	08004194 	.word	0x08004194
 8004088:	08004190 	.word	0x08004190

0800408c <_init>:
 800408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408e:	46c0      	nop			@ (mov r8, r8)
 8004090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004092:	bc08      	pop	{r3}
 8004094:	469e      	mov	lr, r3
 8004096:	4770      	bx	lr

08004098 <_fini>:
 8004098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409a:	46c0      	nop			@ (mov r8, r8)
 800409c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409e:	bc08      	pop	{r3}
 80040a0:	469e      	mov	lr, r3
 80040a2:	4770      	bx	lr
