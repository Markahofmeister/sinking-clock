
sinking-clock_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052e0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800539c  0800539c  0001539c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800564c  0800564c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800564c  0800564c  0001564c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005654  08005654  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005658  08005658  00015658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800565c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000008c  080056e8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  080056e8  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c8d  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237e  00000000  00000000  00030d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  000330c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00033eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bc4  00000000  00000000  00034bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114c6  00000000  00000000  0004c77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009379d  00000000  00000000  0005dc42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f13df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039b8  00000000  00000000  000f1430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000008c 	.word	0x2000008c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005384 	.word	0x08005384

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000090 	.word	0x20000090
 8000100:	08005384 	.word	0x08005384

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	469b      	mov	fp, r3
 80002a6:	d433      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a8:	465a      	mov	r2, fp
 80002aa:	4653      	mov	r3, sl
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83a      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e078      	b.n	80003b4 <__udivmoddi4+0x144>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e075      	b.n	80003ba <__udivmoddi4+0x14a>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e028      	b.n	800033a <__udivmoddi4+0xca>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	2320      	movs	r3, #32
 8000314:	1a9b      	subs	r3, r3, r2
 8000316:	4652      	mov	r2, sl
 8000318:	40da      	lsrs	r2, r3
 800031a:	4641      	mov	r1, r8
 800031c:	0013      	movs	r3, r2
 800031e:	464a      	mov	r2, r9
 8000320:	408a      	lsls	r2, r1
 8000322:	0017      	movs	r7, r2
 8000324:	4642      	mov	r2, r8
 8000326:	431f      	orrs	r7, r3
 8000328:	4653      	mov	r3, sl
 800032a:	4093      	lsls	r3, r2
 800032c:	001e      	movs	r6, r3
 800032e:	42af      	cmp	r7, r5
 8000330:	d9c4      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0d9      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000340:	07fb      	lsls	r3, r7, #31
 8000342:	0872      	lsrs	r2, r6, #1
 8000344:	431a      	orrs	r2, r3
 8000346:	4646      	mov	r6, r8
 8000348:	087b      	lsrs	r3, r7, #1
 800034a:	e00e      	b.n	800036a <__udivmoddi4+0xfa>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d101      	bne.n	8000354 <__udivmoddi4+0xe4>
 8000350:	42a2      	cmp	r2, r4
 8000352:	d80c      	bhi.n	800036e <__udivmoddi4+0xfe>
 8000354:	1aa4      	subs	r4, r4, r2
 8000356:	419d      	sbcs	r5, r3
 8000358:	2001      	movs	r0, #1
 800035a:	1924      	adds	r4, r4, r4
 800035c:	416d      	adcs	r5, r5
 800035e:	2100      	movs	r1, #0
 8000360:	3e01      	subs	r6, #1
 8000362:	1824      	adds	r4, r4, r0
 8000364:	414d      	adcs	r5, r1
 8000366:	2e00      	cmp	r6, #0
 8000368:	d006      	beq.n	8000378 <__udivmoddi4+0x108>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d9ee      	bls.n	800034c <__udivmoddi4+0xdc>
 800036e:	3e01      	subs	r6, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2e00      	cmp	r6, #0
 8000376:	d1f8      	bne.n	800036a <__udivmoddi4+0xfa>
 8000378:	9800      	ldr	r0, [sp, #0]
 800037a:	9901      	ldr	r1, [sp, #4]
 800037c:	465b      	mov	r3, fp
 800037e:	1900      	adds	r0, r0, r4
 8000380:	4169      	adcs	r1, r5
 8000382:	2b00      	cmp	r3, #0
 8000384:	db24      	blt.n	80003d0 <__udivmoddi4+0x160>
 8000386:	002b      	movs	r3, r5
 8000388:	465a      	mov	r2, fp
 800038a:	4644      	mov	r4, r8
 800038c:	40d3      	lsrs	r3, r2
 800038e:	002a      	movs	r2, r5
 8000390:	40e2      	lsrs	r2, r4
 8000392:	001c      	movs	r4, r3
 8000394:	465b      	mov	r3, fp
 8000396:	0015      	movs	r5, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	db2a      	blt.n	80003f2 <__udivmoddi4+0x182>
 800039c:	0026      	movs	r6, r4
 800039e:	409e      	lsls	r6, r3
 80003a0:	0033      	movs	r3, r6
 80003a2:	0026      	movs	r6, r4
 80003a4:	4647      	mov	r7, r8
 80003a6:	40be      	lsls	r6, r7
 80003a8:	0032      	movs	r2, r6
 80003aa:	1a80      	subs	r0, r0, r2
 80003ac:	4199      	sbcs	r1, r3
 80003ae:	9000      	str	r0, [sp, #0]
 80003b0:	9101      	str	r1, [sp, #4]
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b4:	42a3      	cmp	r3, r4
 80003b6:	d8bc      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80003b8:	e783      	b.n	80002c2 <__udivmoddi4+0x52>
 80003ba:	4642      	mov	r2, r8
 80003bc:	2320      	movs	r3, #32
 80003be:	2100      	movs	r1, #0
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	2200      	movs	r2, #0
 80003c4:	9100      	str	r1, [sp, #0]
 80003c6:	9201      	str	r2, [sp, #4]
 80003c8:	2201      	movs	r2, #1
 80003ca:	40da      	lsrs	r2, r3
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	e786      	b.n	80002de <__udivmoddi4+0x6e>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	1a9b      	subs	r3, r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	4646      	mov	r6, r8
 80003da:	409a      	lsls	r2, r3
 80003dc:	0023      	movs	r3, r4
 80003de:	40f3      	lsrs	r3, r6
 80003e0:	4644      	mov	r4, r8
 80003e2:	4313      	orrs	r3, r2
 80003e4:	002a      	movs	r2, r5
 80003e6:	40e2      	lsrs	r2, r4
 80003e8:	001c      	movs	r4, r3
 80003ea:	465b      	mov	r3, fp
 80003ec:	0015      	movs	r5, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dad4      	bge.n	800039c <__udivmoddi4+0x12c>
 80003f2:	4642      	mov	r2, r8
 80003f4:	002f      	movs	r7, r5
 80003f6:	2320      	movs	r3, #32
 80003f8:	0026      	movs	r6, r4
 80003fa:	4097      	lsls	r7, r2
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	40de      	lsrs	r6, r3
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7cd      	b.n	80003a2 <__udivmoddi4+0x132>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000464:	2301      	movs	r3, #1
 8000466:	425b      	negs	r3, r3
 8000468:	1d39      	adds	r1, r7, #4
 800046a:	4804      	ldr	r0, [pc, #16]	; (800047c <__io_putchar+0x20>)
 800046c:	2201      	movs	r2, #1
 800046e:	f003 faa1 	bl	80039b4 <HAL_UART_Transmit>
  return ch;
 8000472:	687b      	ldr	r3, [r7, #4]
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000128 	.word	0x20000128

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b5b0      	push	{r4, r5, r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000486:	f000 fe4b 	bl	8001120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048a:	f000 f86d 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048e:	f000 f9d7 	bl	8000840 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000492:	f000 f9a1 	bl	80007d8 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000496:	f000 f8f3 	bl	8000680 <MX_RTC_Init>
  MX_I2C1_Init();
 800049a:	f000 f8b1 	bl	8000600 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  sevSeg_I2C1_Init();			//Initialize 7-segment display to test mode
 800049e:	f000 fb77 	bl	8000b90 <sevSeg_I2C1_Init>
  while (1)
  {

	  HAL_StatusTypeDef HalRet;

	  uint8_t dispDigits[10] = {0x00, 0x01, 0x02, 0x03, 0x04,
 80004a2:	2308      	movs	r3, #8
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	4a2b      	ldr	r2, [pc, #172]	; (8000554 <main+0xd4>)
 80004a8:	ca03      	ldmia	r2!, {r0, r1}
 80004aa:	c303      	stmia	r3!, {r0, r1}
 80004ac:	8812      	ldrh	r2, [r2, #0]
 80004ae:	801a      	strh	r2, [r3, #0]
			  	  	  	  	  	  0x05, 0x06, 0x07, 0x08, 0x09};
	  uint8_t sevSeg_digit0Buff[2] = {sevSeg_digit0Reg, 0x00};
 80004b0:	2220      	movs	r2, #32
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	701a      	strb	r2, [r3, #0]
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	2200      	movs	r2, #0
 80004ba:	705a      	strb	r2, [r3, #1]
	  uint8_t sevSeg_digit1Buff[2] = {sevSeg_digit1Reg, 0x00};
 80004bc:	2221      	movs	r2, #33	; 0x21
 80004be:	003b      	movs	r3, r7
 80004c0:	701a      	strb	r2, [r3, #0]
 80004c2:	003b      	movs	r3, r7
 80004c4:	2200      	movs	r2, #0
 80004c6:	705a      	strb	r2, [r3, #1]

	  for (uint i = 0; i < 10; i++) {
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	e03e      	b.n	800054c <main+0xcc>

		sevSeg_digit0Buff[1] = dispDigits[i];
 80004ce:	2108      	movs	r1, #8
 80004d0:	187a      	adds	r2, r7, r1
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	18d3      	adds	r3, r2, r3
 80004d6:	781a      	ldrb	r2, [r3, #0]
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	705a      	strb	r2, [r3, #1]
		sevSeg_digit1Buff[1] = dispDigits[i+1];
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	3301      	adds	r3, #1
 80004e0:	187a      	adds	r2, r7, r1
 80004e2:	5cd2      	ldrb	r2, [r2, r3]
 80004e4:	003b      	movs	r3, r7
 80004e6:	705a      	strb	r2, [r3, #1]

		HalRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit0Buff, 2, HAL_MAX_DELAY);
 80004e8:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <main+0xd8>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	b299      	uxth	r1, r3
 80004ee:	2513      	movs	r5, #19
 80004f0:	197c      	adds	r4, r7, r5
 80004f2:	1d3a      	adds	r2, r7, #4
 80004f4:	4819      	ldr	r0, [pc, #100]	; (800055c <main+0xdc>)
 80004f6:	2301      	movs	r3, #1
 80004f8:	425b      	negs	r3, r3
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2302      	movs	r3, #2
 80004fe:	f001 f9fd 	bl	80018fc <HAL_I2C_Master_Transmit>
 8000502:	0003      	movs	r3, r0
 8000504:	7023      	strb	r3, [r4, #0]
		HalRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit1Buff, 2, HAL_MAX_DELAY);
 8000506:	4b14      	ldr	r3, [pc, #80]	; (8000558 <main+0xd8>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	b299      	uxth	r1, r3
 800050c:	197c      	adds	r4, r7, r5
 800050e:	003a      	movs	r2, r7
 8000510:	4812      	ldr	r0, [pc, #72]	; (800055c <main+0xdc>)
 8000512:	2301      	movs	r3, #1
 8000514:	425b      	negs	r3, r3
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	2302      	movs	r3, #2
 800051a:	f001 f9ef 	bl	80018fc <HAL_I2C_Master_Transmit>
 800051e:	0003      	movs	r3, r0
 8000520:	7023      	strb	r3, [r4, #0]

		if(HalRet != HAL_OK) {		//check HAL
 8000522:	197b      	adds	r3, r7, r5
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d004      	beq.n	8000534 <main+0xb4>
			printf("HAL Error - TX digit data\n\r");
 800052a:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <main+0xe0>)
 800052c:	0018      	movs	r0, r3
 800052e:	f003 ff51 	bl	80043d4 <iprintf>
 8000532:	e003      	b.n	800053c <main+0xbc>
		} else {
			printf("Digit incremented and displayed\n\r");
 8000534:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <main+0xe4>)
 8000536:	0018      	movs	r0, r3
 8000538:	f003 ff4c 	bl	80043d4 <iprintf>
		}

		HAL_Delay(1000);
 800053c:	23fa      	movs	r3, #250	; 0xfa
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	0018      	movs	r0, r3
 8000542:	f000 fe73 	bl	800122c <HAL_Delay>
	  for (uint i = 0; i < 10; i++) {
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	3301      	adds	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	2b09      	cmp	r3, #9
 8000550:	d9bd      	bls.n	80004ce <main+0x4e>
  {
 8000552:	e7a6      	b.n	80004a2 <main+0x22>
 8000554:	080053dc 	.word	0x080053dc
 8000558:	20000000 	.word	0x20000000
 800055c:	200000a8 	.word	0x200000a8
 8000560:	0800539c 	.word	0x0800539c
 8000564:	080053b8 	.word	0x080053b8

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b093      	sub	sp, #76	; 0x4c
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	2410      	movs	r4, #16
 8000570:	193b      	adds	r3, r7, r4
 8000572:	0018      	movs	r0, r3
 8000574:	2338      	movs	r3, #56	; 0x38
 8000576:	001a      	movs	r2, r3
 8000578:	2100      	movs	r1, #0
 800057a:	f003 ff23 	bl	80043c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057e:	003b      	movs	r3, r7
 8000580:	0018      	movs	r0, r3
 8000582:	2310      	movs	r3, #16
 8000584:	001a      	movs	r2, r3
 8000586:	2100      	movs	r1, #0
 8000588:	f003 ff1c 	bl	80043c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	0018      	movs	r0, r3
 8000592:	f001 fd69 	bl	8002068 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000596:	193b      	adds	r3, r7, r4
 8000598:	220a      	movs	r2, #10
 800059a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	193b      	adds	r3, r7, r4
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	0052      	lsls	r2, r2, #1
 80005a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005a4:	0021      	movs	r1, r4
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2240      	movs	r2, #64	; 0x40
 80005b0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2201      	movs	r2, #1
 80005b6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2200      	movs	r2, #0
 80005bc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 fd9d 	bl	8002100 <HAL_RCC_OscConfig>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ca:	f000 fb75 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	003b      	movs	r3, r7
 80005d0:	2207      	movs	r2, #7
 80005d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d4:	003b      	movs	r3, r7
 80005d6:	2200      	movs	r2, #0
 80005d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	003b      	movs	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e0:	003b      	movs	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e6:	003b      	movs	r3, r7
 80005e8:	2100      	movs	r1, #0
 80005ea:	0018      	movs	r0, r3
 80005ec:	f002 f8a2 	bl	8002734 <HAL_RCC_ClockConfig>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005f4:	f000 fb60 	bl	8000cb8 <Error_Handler>
  }
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b013      	add	sp, #76	; 0x4c
 80005fe:	bd90      	pop	{r4, r7, pc}

08000600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_I2C1_Init+0x74>)
 8000606:	4a1c      	ldr	r2, [pc, #112]	; (8000678 <MX_I2C1_Init+0x78>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_I2C1_Init+0x74>)
 800060c:	4a1b      	ldr	r2, [pc, #108]	; (800067c <MX_I2C1_Init+0x7c>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_I2C1_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_I2C1_Init+0x74>)
 8000618:	2201      	movs	r2, #1
 800061a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_I2C1_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_I2C1_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_I2C1_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_I2C1_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_I2C1_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_I2C1_Init+0x74>)
 800063c:	0018      	movs	r0, r3
 800063e:	f001 f8c7 	bl	80017d0 <HAL_I2C_Init>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000646:	f000 fb37 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <MX_I2C1_Init+0x74>)
 800064c:	2100      	movs	r1, #0
 800064e:	0018      	movs	r0, r3
 8000650:	f001 fc72 	bl	8001f38 <HAL_I2CEx_ConfigAnalogFilter>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d001      	beq.n	800065c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000658:	f000 fb2e 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <MX_I2C1_Init+0x74>)
 800065e:	2100      	movs	r1, #0
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fcb5 	bl	8001fd0 <HAL_I2CEx_ConfigDigitalFilter>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800066a:	f000 fb25 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000a8 	.word	0x200000a8
 8000678:	40005400 	.word	0x40005400
 800067c:	0010061a 	.word	0x0010061a

08000680 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b090      	sub	sp, #64	; 0x40
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000686:	232c      	movs	r3, #44	; 0x2c
 8000688:	18fb      	adds	r3, r7, r3
 800068a:	0018      	movs	r0, r3
 800068c:	2314      	movs	r3, #20
 800068e:	001a      	movs	r2, r3
 8000690:	2100      	movs	r1, #0
 8000692:	f003 fe97 	bl	80043c4 <memset>
  RTC_DateTypeDef sDate = {0};
 8000696:	2328      	movs	r3, #40	; 0x28
 8000698:	18fb      	adds	r3, r7, r3
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800069e:	003b      	movs	r3, r7
 80006a0:	0018      	movs	r0, r3
 80006a2:	2328      	movs	r3, #40	; 0x28
 80006a4:	001a      	movs	r2, r3
 80006a6:	2100      	movs	r1, #0
 80006a8:	f003 fe8c 	bl	80043c4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006ac:	4b47      	ldr	r3, [pc, #284]	; (80007cc <MX_RTC_Init+0x14c>)
 80006ae:	4a48      	ldr	r2, [pc, #288]	; (80007d0 <MX_RTC_Init+0x150>)
 80006b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80006b2:	4b46      	ldr	r3, [pc, #280]	; (80007cc <MX_RTC_Init+0x14c>)
 80006b4:	2240      	movs	r2, #64	; 0x40
 80006b6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80006b8:	4b44      	ldr	r3, [pc, #272]	; (80007cc <MX_RTC_Init+0x14c>)
 80006ba:	227f      	movs	r2, #127	; 0x7f
 80006bc:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80006be:	4b43      	ldr	r3, [pc, #268]	; (80007cc <MX_RTC_Init+0x14c>)
 80006c0:	22ff      	movs	r2, #255	; 0xff
 80006c2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006c4:	4b41      	ldr	r3, [pc, #260]	; (80007cc <MX_RTC_Init+0x14c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006ca:	4b40      	ldr	r3, [pc, #256]	; (80007cc <MX_RTC_Init+0x14c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006d0:	4b3e      	ldr	r3, [pc, #248]	; (80007cc <MX_RTC_Init+0x14c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006d6:	4b3d      	ldr	r3, [pc, #244]	; (80007cc <MX_RTC_Init+0x14c>)
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	05d2      	lsls	r2, r2, #23
 80006dc:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80006de:	4b3b      	ldr	r3, [pc, #236]	; (80007cc <MX_RTC_Init+0x14c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006e4:	4b39      	ldr	r3, [pc, #228]	; (80007cc <MX_RTC_Init+0x14c>)
 80006e6:	0018      	movs	r0, r3
 80006e8:	f002 fb48 	bl	8002d7c <HAL_RTC_Init>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80006f0:	f000 fae2 	bl	8000cb8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 80006f4:	212c      	movs	r1, #44	; 0x2c
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2200      	movs	r2, #0
 8000700:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2200      	movs	r2, #0
 8000706:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2200      	movs	r2, #0
 8000712:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000720:	1879      	adds	r1, r7, r1
 8000722:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <MX_RTC_Init+0x14c>)
 8000724:	2201      	movs	r2, #1
 8000726:	0018      	movs	r0, r3
 8000728:	f002 fbca 	bl	8002ec0 <HAL_RTC_SetTime>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000730:	f000 fac2 	bl	8000cb8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000734:	2128      	movs	r1, #40	; 0x28
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2201      	movs	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2201      	movs	r2, #1
 8000740:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2201      	movs	r2, #1
 8000746:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2200      	movs	r2, #0
 800074c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800074e:	1879      	adds	r1, r7, r1
 8000750:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_RTC_Init+0x14c>)
 8000752:	2201      	movs	r2, #1
 8000754:	0018      	movs	r0, r3
 8000756:	f002 fcb7 	bl	80030c8 <HAL_RTC_SetDate>
 800075a:	1e03      	subs	r3, r0, #0
 800075c:	d001      	beq.n	8000762 <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 800075e:	f000 faab 	bl	8000cb8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000762:	003b      	movs	r3, r7
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000768:	003b      	movs	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 800076e:	003b      	movs	r3, r7
 8000770:	2201      	movs	r2, #1
 8000772:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000774:	003b      	movs	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800077a:	003b      	movs	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000780:	003b      	movs	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000786:	003b      	movs	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 800078c:	003b      	movs	r3, r7
 800078e:	4a11      	ldr	r2, [pc, #68]	; (80007d4 <MX_RTC_Init+0x154>)
 8000790:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000792:	003b      	movs	r3, r7
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000798:	003b      	movs	r3, r7
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800079e:	003b      	movs	r3, r7
 80007a0:	2220      	movs	r2, #32
 80007a2:	2101      	movs	r1, #1
 80007a4:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80007a6:	003b      	movs	r3, r7
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	0052      	lsls	r2, r2, #1
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80007ae:	0039      	movs	r1, r7
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_RTC_Init+0x14c>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	0018      	movs	r0, r3
 80007b6:	f002 fd67 	bl	8003288 <HAL_RTC_SetAlarm_IT>
 80007ba:	1e03      	subs	r3, r0, #0
 80007bc:	d001      	beq.n	80007c2 <MX_RTC_Init+0x142>
  {
    Error_Handler();
 80007be:	f000 fa7b 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b010      	add	sp, #64	; 0x40
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	200000fc 	.word	0x200000fc
 80007d0:	40002800 	.word	0x40002800
 80007d4:	80808000 	.word	0x80808000

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_USART2_UART_Init+0x60>)
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <MX_USART2_UART_Init+0x64>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_USART2_UART_Init+0x60>)
 80007e4:	22e1      	movs	r2, #225	; 0xe1
 80007e6:	0252      	lsls	r2, r2, #9
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_USART2_UART_Init+0x60>)
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	0152      	lsls	r2, r2, #5
 80007f0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USART2_UART_Init+0x60>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_USART2_UART_Init+0x60>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART2_UART_Init+0x60>)
 8000800:	220c      	movs	r2, #12
 8000802:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USART2_UART_Init+0x60>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USART2_UART_Init+0x60>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USART2_UART_Init+0x60>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USART2_UART_Init+0x60>)
 8000818:	2200      	movs	r2, #0
 800081a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USART2_UART_Init+0x60>)
 800081e:	2200      	movs	r2, #0
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <MX_USART2_UART_Init+0x60>)
 8000824:	0018      	movs	r0, r3
 8000826:	f003 f86f 	bl	8003908 <HAL_UART_Init>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800082e:	f000 fa43 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000128 	.word	0x20000128
 800083c:	40004400 	.word	0x40004400

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b08b      	sub	sp, #44	; 0x2c
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	2414      	movs	r4, #20
 8000848:	193b      	adds	r3, r7, r4
 800084a:	0018      	movs	r0, r3
 800084c:	2314      	movs	r3, #20
 800084e:	001a      	movs	r2, r3
 8000850:	2100      	movs	r1, #0
 8000852:	f003 fdb7 	bl	80043c4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	4b72      	ldr	r3, [pc, #456]	; (8000a20 <MX_GPIO_Init+0x1e0>)
 8000858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800085a:	4b71      	ldr	r3, [pc, #452]	; (8000a20 <MX_GPIO_Init+0x1e0>)
 800085c:	2102      	movs	r1, #2
 800085e:	430a      	orrs	r2, r1
 8000860:	635a      	str	r2, [r3, #52]	; 0x34
 8000862:	4b6f      	ldr	r3, [pc, #444]	; (8000a20 <MX_GPIO_Init+0x1e0>)
 8000864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000866:	2202      	movs	r2, #2
 8000868:	4013      	ands	r3, r2
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b6c      	ldr	r3, [pc, #432]	; (8000a20 <MX_GPIO_Init+0x1e0>)
 8000870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000872:	4b6b      	ldr	r3, [pc, #428]	; (8000a20 <MX_GPIO_Init+0x1e0>)
 8000874:	2104      	movs	r1, #4
 8000876:	430a      	orrs	r2, r1
 8000878:	635a      	str	r2, [r3, #52]	; 0x34
 800087a:	4b69      	ldr	r3, [pc, #420]	; (8000a20 <MX_GPIO_Init+0x1e0>)
 800087c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800087e:	2204      	movs	r2, #4
 8000880:	4013      	ands	r3, r2
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000886:	4b66      	ldr	r3, [pc, #408]	; (8000a20 <MX_GPIO_Init+0x1e0>)
 8000888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800088a:	4b65      	ldr	r3, [pc, #404]	; (8000a20 <MX_GPIO_Init+0x1e0>)
 800088c:	2120      	movs	r1, #32
 800088e:	430a      	orrs	r2, r1
 8000890:	635a      	str	r2, [r3, #52]	; 0x34
 8000892:	4b63      	ldr	r3, [pc, #396]	; (8000a20 <MX_GPIO_Init+0x1e0>)
 8000894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000896:	2220      	movs	r2, #32
 8000898:	4013      	ands	r3, r2
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b60      	ldr	r3, [pc, #384]	; (8000a20 <MX_GPIO_Init+0x1e0>)
 80008a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008a2:	4b5f      	ldr	r3, [pc, #380]	; (8000a20 <MX_GPIO_Init+0x1e0>)
 80008a4:	2101      	movs	r1, #1
 80008a6:	430a      	orrs	r2, r1
 80008a8:	635a      	str	r2, [r3, #52]	; 0x34
 80008aa:	4b5d      	ldr	r3, [pc, #372]	; (8000a20 <MX_GPIO_Init+0x1e0>)
 80008ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ae:	2201      	movs	r2, #1
 80008b0:	4013      	ands	r3, r2
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RTC_Interrupt_LED_Pin|Minute_Set_LED_Pin|Hour_Set_LED_Pin, GPIO_PIN_RESET);
 80008b6:	23c8      	movs	r3, #200	; 0xc8
 80008b8:	00d9      	lsls	r1, r3, #3
 80008ba:	23a0      	movs	r3, #160	; 0xa0
 80008bc:	05db      	lsls	r3, r3, #23
 80008be:	2200      	movs	r2, #0
 80008c0:	0018      	movs	r0, r3
 80008c2:	f000 ff19 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Snooze_LED_Pin|Alarm_Set_LED_Pin|Alarm_Enable_LED_Pin|Display_LED_Pin, GPIO_PIN_RESET);
 80008c6:	4b57      	ldr	r3, [pc, #348]	; (8000a24 <MX_GPIO_Init+0x1e4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	21c3      	movs	r1, #195	; 0xc3
 80008cc:	0018      	movs	r0, r3
 80008ce:	f000 ff13 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008d2:	4b55      	ldr	r3, [pc, #340]	; (8000a28 <MX_GPIO_Init+0x1e8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	2140      	movs	r1, #64	; 0x40
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 ff0d 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	2204      	movs	r2, #4
 80008e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	2288      	movs	r2, #136	; 0x88
 80008e8:	0352      	lsls	r2, r2, #13
 80008ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	4a4d      	ldr	r2, [pc, #308]	; (8000a2c <MX_GPIO_Init+0x1ec>)
 80008f6:	0019      	movs	r1, r3
 80008f8:	0010      	movs	r0, r2
 80008fa:	f000 fd99 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_Button_Pin Alarm_Enable_Button_Pin Alarm_Set_Button_Pin Hour_Set_Button_Pin
                           Snooze_Button_Pin Minute_Set_Button_Pin */
  GPIO_InitStruct.Pin = Display_Button_Pin|Alarm_Enable_Button_Pin|Alarm_Set_Button_Pin|Hour_Set_Button_Pin
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	4a4b      	ldr	r2, [pc, #300]	; (8000a30 <MX_GPIO_Init+0x1f0>)
 8000902:	601a      	str	r2, [r3, #0]
                          |Snooze_Button_Pin|Minute_Set_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000904:	193b      	adds	r3, r7, r4
 8000906:	2284      	movs	r2, #132	; 0x84
 8000908:	0392      	lsls	r2, r2, #14
 800090a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2201      	movs	r2, #1
 8000910:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	193a      	adds	r2, r7, r4
 8000914:	23a0      	movs	r3, #160	; 0xa0
 8000916:	05db      	lsls	r3, r3, #23
 8000918:	0011      	movs	r1, r2
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fd88 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTC_Interrupt_LED_Pin Minute_Set_LED_Pin Hour_Set_LED_Pin */
  GPIO_InitStruct.Pin = RTC_Interrupt_LED_Pin|Minute_Set_LED_Pin|Hour_Set_LED_Pin;
 8000920:	0021      	movs	r1, r4
 8000922:	187b      	adds	r3, r7, r1
 8000924:	22c8      	movs	r2, #200	; 0xc8
 8000926:	00d2      	lsls	r2, r2, #3
 8000928:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	000c      	movs	r4, r1
 800092c:	193b      	adds	r3, r7, r4
 800092e:	2201      	movs	r2, #1
 8000930:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	193a      	adds	r2, r7, r4
 8000940:	23a0      	movs	r3, #160	; 0xa0
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	0011      	movs	r1, r2
 8000946:	0018      	movs	r0, r3
 8000948:	f000 fd72 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : Snooze_LED_Pin Alarm_Set_LED_Pin Alarm_Enable_LED_Pin Display_LED_Pin */
  GPIO_InitStruct.Pin = Snooze_LED_Pin|Alarm_Set_LED_Pin|Alarm_Enable_LED_Pin|Display_LED_Pin;
 800094c:	193b      	adds	r3, r7, r4
 800094e:	22c3      	movs	r2, #195	; 0xc3
 8000950:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	2201      	movs	r2, #1
 8000956:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	193b      	adds	r3, r7, r4
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	193b      	adds	r3, r7, r4
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000964:	193b      	adds	r3, r7, r4
 8000966:	4a2f      	ldr	r2, [pc, #188]	; (8000a24 <MX_GPIO_Init+0x1e4>)
 8000968:	0019      	movs	r1, r3
 800096a:	0010      	movs	r0, r2
 800096c:	f000 fd60 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000970:	0021      	movs	r1, r4
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2240      	movs	r2, #64	; 0x40
 8000976:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2201      	movs	r2, #1
 800097c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800098a:	187b      	adds	r3, r7, r1
 800098c:	4a26      	ldr	r2, [pc, #152]	; (8000a28 <MX_GPIO_Init+0x1e8>)
 800098e:	0019      	movs	r1, r3
 8000990:	0010      	movs	r0, r2
 8000992:	f000 fd4d 	bl	8001430 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	2005      	movs	r0, #5
 800099c:	f000 fd16 	bl	80013cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80009a0:	2005      	movs	r0, #5
 80009a2:	f000 fd28 	bl	80013f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2006      	movs	r0, #6
 80009ac:	f000 fd0e 	bl	80013cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80009b0:	2006      	movs	r0, #6
 80009b2:	f000 fd20 	bl	80013f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2007      	movs	r0, #7
 80009bc:	f000 fd06 	bl	80013cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80009c0:	2007      	movs	r0, #7
 80009c2:	f000 fd18 	bl	80013f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  // Initialize all output pins to low
	HAL_GPIO_WritePin(GPIOB, displayLEDPin, 0);
 80009c6:	2180      	movs	r1, #128	; 0x80
 80009c8:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_GPIO_Init+0x1e4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	0018      	movs	r0, r3
 80009ce:	f000 fe93 	bl	80016f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, alarmEnableLEDPin, 0);
 80009d2:	2140      	movs	r1, #64	; 0x40
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <MX_GPIO_Init+0x1e4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	0018      	movs	r0, r3
 80009da:	f000 fe8d 	bl	80016f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, alarmSetLEDPin, 0);
 80009de:	2102      	movs	r1, #2
 80009e0:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MX_GPIO_Init+0x1e4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 fe87 	bl	80016f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, hourSetLEDPin, 0);
 80009ea:	2380      	movs	r3, #128	; 0x80
 80009ec:	00d9      	lsls	r1, r3, #3
 80009ee:	23a0      	movs	r3, #160	; 0xa0
 80009f0:	05db      	lsls	r3, r3, #23
 80009f2:	2200      	movs	r2, #0
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 fe7f 	bl	80016f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, minuteSetLEDPin, 0);
 80009fa:	2380      	movs	r3, #128	; 0x80
 80009fc:	0099      	lsls	r1, r3, #2
 80009fe:	23a0      	movs	r3, #160	; 0xa0
 8000a00:	05db      	lsls	r3, r3, #23
 8000a02:	2200      	movs	r2, #0
 8000a04:	0018      	movs	r0, r3
 8000a06:	f000 fe77 	bl	80016f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, snoozeButtonLEDPin, 0);
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <MX_GPIO_Init+0x1e4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f000 fe71 	bl	80016f8 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b00b      	add	sp, #44	; 0x2c
 8000a1c:	bd90      	pop	{r4, r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	40021000 	.word	0x40021000
 8000a24:	50000400 	.word	0x50000400
 8000a28:	50000800 	.word	0x50000800
 8000a2c:	50001400 	.word	0x50001400
 8000a30:	00001833 	.word	0x00001833

08000a34 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	1dbb      	adds	r3, r7, #6
 8000a3e:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == displayButtonPin) {
 8000a40:	2201      	movs	r2, #1
 8000a42:	1dbb      	adds	r3, r7, #6
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d106      	bne.n	8000a58 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		HAL_GPIO_TogglePin(GPIOB, displayLEDPin);
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 8000a4e:	0011      	movs	r1, r2
 8000a50:	0018      	movs	r0, r3
 8000a52:	f000 fe6e 	bl	8001732 <HAL_GPIO_TogglePin>
//    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
//    printf("ISR Entered\n");
//  } else {
//      __NOP();
//  }
}
 8000a56:	e042      	b.n	8000ade <HAL_GPIO_EXTI_Falling_Callback+0xaa>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8000a58:	2202      	movs	r2, #2
 8000a5a:	1dbb      	adds	r3, r7, #6
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d106      	bne.n	8000a70 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		HAL_GPIO_TogglePin(GPIOB, alarmEnableLEDPin);
 8000a62:	2240      	movs	r2, #64	; 0x40
 8000a64:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 8000a66:	0011      	movs	r1, r2
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f000 fe62 	bl	8001732 <HAL_GPIO_TogglePin>
}
 8000a6e:	e036      	b.n	8000ade <HAL_GPIO_EXTI_Falling_Callback+0xaa>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8000a70:	2210      	movs	r2, #16
 8000a72:	1dbb      	adds	r3, r7, #6
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d106      	bne.n	8000a88 <HAL_GPIO_EXTI_Falling_Callback+0x54>
		HAL_GPIO_TogglePin(GPIOB, alarmSetLEDPin);
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 8000a7e:	0011      	movs	r1, r2
 8000a80:	0018      	movs	r0, r3
 8000a82:	f000 fe56 	bl	8001732 <HAL_GPIO_TogglePin>
}
 8000a86:	e02a      	b.n	8000ade <HAL_GPIO_EXTI_Falling_Callback+0xaa>
	else if(GPIO_Pin == hourSetButtonPin) {
 8000a88:	2220      	movs	r2, #32
 8000a8a:	1dbb      	adds	r3, r7, #6
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d108      	bne.n	8000aa4 <HAL_GPIO_EXTI_Falling_Callback+0x70>
		HAL_GPIO_TogglePin(GPIOA, hourSetLEDPin);
 8000a92:	2380      	movs	r3, #128	; 0x80
 8000a94:	00da      	lsls	r2, r3, #3
 8000a96:	23a0      	movs	r3, #160	; 0xa0
 8000a98:	05db      	lsls	r3, r3, #23
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f000 fe48 	bl	8001732 <HAL_GPIO_TogglePin>
}
 8000aa2:	e01c      	b.n	8000ade <HAL_GPIO_EXTI_Falling_Callback+0xaa>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	015b      	lsls	r3, r3, #5
 8000aa8:	1dba      	adds	r2, r7, #6
 8000aaa:	8812      	ldrh	r2, [r2, #0]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d108      	bne.n	8000ac2 <HAL_GPIO_EXTI_Falling_Callback+0x8e>
		HAL_GPIO_TogglePin(GPIOA, minuteSetLEDPin);
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	009a      	lsls	r2, r3, #2
 8000ab4:	23a0      	movs	r3, #160	; 0xa0
 8000ab6:	05db      	lsls	r3, r3, #23
 8000ab8:	0011      	movs	r1, r2
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 fe39 	bl	8001732 <HAL_GPIO_TogglePin>
}
 8000ac0:	e00d      	b.n	8000ade <HAL_GPIO_EXTI_Falling_Callback+0xaa>
	else if(GPIO_Pin == snoozeButtonPin) {
 8000ac2:	2380      	movs	r3, #128	; 0x80
 8000ac4:	011b      	lsls	r3, r3, #4
 8000ac6:	1dba      	adds	r2, r7, #6
 8000ac8:	8812      	ldrh	r2, [r2, #0]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d106      	bne.n	8000adc <HAL_GPIO_EXTI_Falling_Callback+0xa8>
		HAL_GPIO_TogglePin(GPIOB, snoozeButtonLEDPin);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f000 fe2c 	bl	8001732 <HAL_GPIO_TogglePin>
}
 8000ada:	e000      	b.n	8000ade <HAL_GPIO_EXTI_Falling_Callback+0xaa>
		__NOP();
 8000adc:	46c0      	nop			; (mov r8, r8)
}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	50000400 	.word	0x50000400

08000aec <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b093      	sub	sp, #76	; 0x4c
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	005a      	lsls	r2, r3, #1
 8000af8:	2420      	movs	r4, #32
 8000afa:	1939      	adds	r1, r7, r4
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	2300      	movs	r3, #0
 8000b00:	f002 fd02 	bl	8003508 <HAL_RTC_GetAlarm>

  printf("Enter alarm interrupt\n\r");
 8000b04:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <HAL_RTC_AlarmAEventCallback+0x9c>)
 8000b06:	0018      	movs	r0, r3
 8000b08:	f003 fc64 	bl	80043d4 <iprintf>

  RTC_TimeTypeDef currTime;
  RTC_DateTypeDef currDate;
  HAL_RTC_GetTime(hrtc, &currTime, RTC_FORMAT_BIN);
 8000b0c:	230c      	movs	r3, #12
 8000b0e:	18f9      	adds	r1, r7, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2200      	movs	r2, #0
 8000b14:	0018      	movs	r0, r3
 8000b16:	f002 fa7b 	bl	8003010 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(hrtc, &currDate, RTC_FORMAT_BIN);		//get date is necessary, else RTC will not update time
 8000b1a:	2308      	movs	r3, #8
 8000b1c:	18f9      	adds	r1, r7, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	0018      	movs	r0, r3
 8000b24:	f002 fb62 	bl	80031ec <HAL_RTC_GetDate>

  if(sAlarm.AlarmTime.Seconds>58) {
 8000b28:	193b      	adds	r3, r7, r4
 8000b2a:	789b      	ldrb	r3, [r3, #2]
 8000b2c:	2b3a      	cmp	r3, #58	; 0x3a
 8000b2e:	d903      	bls.n	8000b38 <HAL_RTC_AlarmAEventCallback+0x4c>
    sAlarm.AlarmTime.Seconds=0;
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	2200      	movs	r2, #0
 8000b34:	709a      	strb	r2, [r3, #2]
 8000b36:	e006      	b.n	8000b46 <HAL_RTC_AlarmAEventCallback+0x5a>
  } else {
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 8000b38:	2120      	movs	r1, #32
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	789b      	ldrb	r3, [r3, #2]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	2320      	movs	r3, #32
 8000b4a:	18f9      	adds	r1, r7, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	0018      	movs	r0, r3
 8000b52:	f002 fb99 	bl	8003288 <HAL_RTC_SetAlarm_IT>
 8000b56:	1e03      	subs	r3, r0, #0
 8000b58:	d1f6      	bne.n	8000b48 <HAL_RTC_AlarmAEventCallback+0x5c>
    HAL_GPIO_TogglePin(GPIOA, RTCInterruptLEDPin);
 8000b5a:	2240      	movs	r2, #64	; 0x40
 8000b5c:	23a0      	movs	r3, #160	; 0xa0
 8000b5e:	05db      	lsls	r3, r3, #23
 8000b60:	0011      	movs	r1, r2
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 fde5 	bl	8001732 <HAL_GPIO_TogglePin>

  printf("Current time: %d : %d : %d\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000b68:	200c      	movs	r0, #12
 8000b6a:	183b      	adds	r3, r7, r0
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	0019      	movs	r1, r3
 8000b70:	183b      	adds	r3, r7, r0
 8000b72:	785b      	ldrb	r3, [r3, #1]
 8000b74:	001a      	movs	r2, r3
 8000b76:	183b      	adds	r3, r7, r0
 8000b78:	789b      	ldrb	r3, [r3, #2]
 8000b7a:	4804      	ldr	r0, [pc, #16]	; (8000b8c <HAL_RTC_AlarmAEventCallback+0xa0>)
 8000b7c:	f003 fc2a 	bl	80043d4 <iprintf>

}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b013      	add	sp, #76	; 0x4c
 8000b86:	bd90      	pop	{r4, r7, pc}
 8000b88:	080053e8 	.word	0x080053e8
 8000b8c:	08005400 	.word	0x08005400

08000b90 <sevSeg_I2C1_Init>:

static void sevSeg_I2C1_Init(void) {
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af02      	add	r7, sp, #8
	 */

	HAL_StatusTypeDef HalRet;

	//Set display to decode hex data inputs
	HalRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_decodeBuffer, 2, HAL_MAX_DELAY);
 8000b96:	4b3a      	ldr	r3, [pc, #232]	; (8000c80 <sevSeg_I2C1_Init+0xf0>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	b299      	uxth	r1, r3
 8000b9c:	1dfc      	adds	r4, r7, #7
 8000b9e:	4a39      	ldr	r2, [pc, #228]	; (8000c84 <sevSeg_I2C1_Init+0xf4>)
 8000ba0:	4839      	ldr	r0, [pc, #228]	; (8000c88 <sevSeg_I2C1_Init+0xf8>)
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	2302      	movs	r3, #2
 8000baa:	f000 fea7 	bl	80018fc <HAL_I2C_Master_Transmit>
 8000bae:	0003      	movs	r3, r0
 8000bb0:	7023      	strb	r3, [r4, #0]

	if(HalRet != HAL_OK) {		//check HAL
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d004      	beq.n	8000bc4 <sevSeg_I2C1_Init+0x34>
		printf("HAL Error - TX decode mode\n\r");
 8000bba:	4b34      	ldr	r3, [pc, #208]	; (8000c8c <sevSeg_I2C1_Init+0xfc>)
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f003 fc09 	bl	80043d4 <iprintf>
 8000bc2:	e003      	b.n	8000bcc <sevSeg_I2C1_Init+0x3c>
	} else{
		printf("Display set to decode mode\n\r");
 8000bc4:	4b32      	ldr	r3, [pc, #200]	; (8000c90 <sevSeg_I2C1_Init+0x100>)
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f003 fc04 	bl	80043d4 <iprintf>
	}

	//Disable shutdown mode
	HalRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_SD_ONBuff, 2, HAL_MAX_DELAY);
 8000bcc:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <sevSeg_I2C1_Init+0xf0>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b299      	uxth	r1, r3
 8000bd2:	1dfc      	adds	r4, r7, #7
 8000bd4:	4a2f      	ldr	r2, [pc, #188]	; (8000c94 <sevSeg_I2C1_Init+0x104>)
 8000bd6:	482c      	ldr	r0, [pc, #176]	; (8000c88 <sevSeg_I2C1_Init+0xf8>)
 8000bd8:	2301      	movs	r3, #1
 8000bda:	425b      	negs	r3, r3
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	2302      	movs	r3, #2
 8000be0:	f000 fe8c 	bl	80018fc <HAL_I2C_Master_Transmit>
 8000be4:	0003      	movs	r3, r0
 8000be6:	7023      	strb	r3, [r4, #0]

	if(HalRet != HAL_OK) {		//check HAL
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d004      	beq.n	8000bfa <sevSeg_I2C1_Init+0x6a>
		printf("HAL Error - TX disable shutdown mode\n\r");
 8000bf0:	4b29      	ldr	r3, [pc, #164]	; (8000c98 <sevSeg_I2C1_Init+0x108>)
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f003 fbee 	bl	80043d4 <iprintf>
 8000bf8:	e003      	b.n	8000c02 <sevSeg_I2C1_Init+0x72>
	} else {
		printf("Display shutdown mode disabled\n\r");
 8000bfa:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <sevSeg_I2C1_Init+0x10c>)
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f003 fbe9 	bl	80043d4 <iprintf>
	}

	//Set to test mode
	HalRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_testONBuff, 2, HAL_MAX_DELAY);
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <sevSeg_I2C1_Init+0xf0>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b299      	uxth	r1, r3
 8000c08:	1dfc      	adds	r4, r7, #7
 8000c0a:	4a25      	ldr	r2, [pc, #148]	; (8000ca0 <sevSeg_I2C1_Init+0x110>)
 8000c0c:	481e      	ldr	r0, [pc, #120]	; (8000c88 <sevSeg_I2C1_Init+0xf8>)
 8000c0e:	2301      	movs	r3, #1
 8000c10:	425b      	negs	r3, r3
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	2302      	movs	r3, #2
 8000c16:	f000 fe71 	bl	80018fc <HAL_I2C_Master_Transmit>
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	7023      	strb	r3, [r4, #0]

	if(HalRet != HAL_OK) {		//check HAL
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d004      	beq.n	8000c30 <sevSeg_I2C1_Init+0xa0>
		printf("HAL Error - TX test mode ON data\n\r");
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <sevSeg_I2C1_Init+0x114>)
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f003 fbd3 	bl	80043d4 <iprintf>
 8000c2e:	e003      	b.n	8000c38 <sevSeg_I2C1_Init+0xa8>
	} else {
		printf("Test mode enabled - all LEDs on\n\r");
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <sevSeg_I2C1_Init+0x118>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f003 fbce 	bl	80043d4 <iprintf>
//		printf("HAL Error - TX intensity level data\n\r");
//	} else {
//		printf("Intensity Set\n\r");
//	}

	HAL_Delay(500);
 8000c38:	23fa      	movs	r3, #250	; 0xfa
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f000 faf5 	bl	800122c <HAL_Delay>

	//Set to test mode
	HalRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_testOFFBuff, 2, HAL_MAX_DELAY);
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <sevSeg_I2C1_Init+0xf0>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b299      	uxth	r1, r3
 8000c48:	1dfc      	adds	r4, r7, #7
 8000c4a:	4a18      	ldr	r2, [pc, #96]	; (8000cac <sevSeg_I2C1_Init+0x11c>)
 8000c4c:	480e      	ldr	r0, [pc, #56]	; (8000c88 <sevSeg_I2C1_Init+0xf8>)
 8000c4e:	2301      	movs	r3, #1
 8000c50:	425b      	negs	r3, r3
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	2302      	movs	r3, #2
 8000c56:	f000 fe51 	bl	80018fc <HAL_I2C_Master_Transmit>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	7023      	strb	r3, [r4, #0]

	if(HalRet != HAL_OK) {		//check HAL
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d004      	beq.n	8000c70 <sevSeg_I2C1_Init+0xe0>
		printf("HAL Error - TX test mode OFF data\n\r");
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <sevSeg_I2C1_Init+0x120>)
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f003 fbb3 	bl	80043d4 <iprintf>
	} else {
		printf("Test mode disabled - all LEDs off\n\r");
	}

	return;
 8000c6e:	e004      	b.n	8000c7a <sevSeg_I2C1_Init+0xea>
		printf("Test mode disabled - all LEDs off\n\r");
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <sevSeg_I2C1_Init+0x124>)
 8000c72:	0018      	movs	r0, r3
 8000c74:	f003 fbae 	bl	80043d4 <iprintf>
	return;
 8000c78:	46c0      	nop			; (mov r8, r8)

}
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b003      	add	sp, #12
 8000c7e:	bd90      	pop	{r4, r7, pc}
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000004 	.word	0x20000004
 8000c88:	200000a8 	.word	0x200000a8
 8000c8c:	08005420 	.word	0x08005420
 8000c90:	08005440 	.word	0x08005440
 8000c94:	20000008 	.word	0x20000008
 8000c98:	08005460 	.word	0x08005460
 8000c9c:	08005488 	.word	0x08005488
 8000ca0:	20000018 	.word	0x20000018
 8000ca4:	080054ac 	.word	0x080054ac
 8000ca8:	080054d0 	.word	0x080054d0
 8000cac:	20000014 	.word	0x20000014
 8000cb0:	080054f4 	.word	0x080054f4
 8000cb4:	08005518 	.word	0x08005518

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <Error_Handler+0x8>
	...

08000cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_MspInit+0x44>)
 8000ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_MspInit+0x44>)
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	641a      	str	r2, [r3, #64]	; 0x40
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_MspInit+0x44>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4013      	ands	r3, r2
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_MspInit+0x44>)
 8000ce4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_MspInit+0x44>)
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	0549      	lsls	r1, r1, #21
 8000cec:	430a      	orrs	r2, r1
 8000cee:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_MspInit+0x44>)
 8000cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	055b      	lsls	r3, r3, #21
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	40021000 	.word	0x40021000

08000d0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b095      	sub	sp, #84	; 0x54
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	233c      	movs	r3, #60	; 0x3c
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	0018      	movs	r0, r3
 8000d1a:	2314      	movs	r3, #20
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	2100      	movs	r1, #0
 8000d20:	f003 fb50 	bl	80043c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d24:	2414      	movs	r4, #20
 8000d26:	193b      	adds	r3, r7, r4
 8000d28:	0018      	movs	r0, r3
 8000d2a:	2328      	movs	r3, #40	; 0x28
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	2100      	movs	r1, #0
 8000d30:	f003 fb48 	bl	80043c4 <memset>
  if(hi2c->Instance==I2C1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a22      	ldr	r2, [pc, #136]	; (8000dc4 <HAL_I2C_MspInit+0xb8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d13e      	bne.n	8000dbc <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d3e:	193b      	adds	r3, r7, r4
 8000d40:	2220      	movs	r2, #32
 8000d42:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f001 fe9b 	bl	8002a88 <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	1e03      	subs	r3, r0, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d56:	f7ff ffaf 	bl	8000cb8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <HAL_I2C_MspInit+0xbc>)
 8000d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <HAL_I2C_MspInit+0xbc>)
 8000d60:	2102      	movs	r1, #2
 8000d62:	430a      	orrs	r2, r1
 8000d64:	635a      	str	r2, [r3, #52]	; 0x34
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <HAL_I2C_MspInit+0xbc>)
 8000d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000d72:	213c      	movs	r1, #60	; 0x3c
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	22c0      	movs	r2, #192	; 0xc0
 8000d78:	0092      	lsls	r2, r2, #2
 8000d7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	2212      	movs	r2, #18
 8000d80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2206      	movs	r2, #6
 8000d92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <HAL_I2C_MspInit+0xc0>)
 8000d98:	0019      	movs	r1, r3
 8000d9a:	0010      	movs	r0, r2
 8000d9c:	f000 fb48 	bl	8001430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_I2C_MspInit+0xbc>)
 8000da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_I2C_MspInit+0xbc>)
 8000da6:	2180      	movs	r1, #128	; 0x80
 8000da8:	0389      	lsls	r1, r1, #14
 8000daa:	430a      	orrs	r2, r1
 8000dac:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_I2C_MspInit+0xbc>)
 8000db0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	039b      	lsls	r3, r3, #14
 8000db6:	4013      	ands	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b015      	add	sp, #84	; 0x54
 8000dc2:	bd90      	pop	{r4, r7, pc}
 8000dc4:	40005400 	.word	0x40005400
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	50000400 	.word	0x50000400

08000dd0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b08f      	sub	sp, #60	; 0x3c
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd8:	2410      	movs	r4, #16
 8000dda:	193b      	adds	r3, r7, r4
 8000ddc:	0018      	movs	r0, r3
 8000dde:	2328      	movs	r3, #40	; 0x28
 8000de0:	001a      	movs	r2, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	f003 faee 	bl	80043c4 <memset>
  if(hrtc->Instance==RTC)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a19      	ldr	r2, [pc, #100]	; (8000e54 <HAL_RTC_MspInit+0x84>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d12c      	bne.n	8000e4c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	0292      	lsls	r2, r2, #10
 8000df8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000dfa:	193b      	adds	r3, r7, r4
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e02:	193b      	adds	r3, r7, r4
 8000e04:	0018      	movs	r0, r3
 8000e06:	f001 fe3f 	bl	8002a88 <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	1e03      	subs	r3, r0, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000e0e:	f7ff ff53 	bl	8000cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_RTC_MspInit+0x88>)
 8000e14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <HAL_RTC_MspInit+0x88>)
 8000e18:	2180      	movs	r1, #128	; 0x80
 8000e1a:	0209      	lsls	r1, r1, #8
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <HAL_RTC_MspInit+0x88>)
 8000e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_RTC_MspInit+0x88>)
 8000e26:	2180      	movs	r1, #128	; 0x80
 8000e28:	00c9      	lsls	r1, r1, #3
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_RTC_MspInit+0x88>)
 8000e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e32:	2380      	movs	r3, #128	; 0x80
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	4013      	ands	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2002      	movs	r0, #2
 8000e42:	f000 fac3 	bl	80013cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000e46:	2002      	movs	r0, #2
 8000e48:	f000 fad5 	bl	80013f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b00f      	add	sp, #60	; 0x3c
 8000e52:	bd90      	pop	{r4, r7, pc}
 8000e54:	40002800 	.word	0x40002800
 8000e58:	40021000 	.word	0x40021000

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b08b      	sub	sp, #44	; 0x2c
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	2414      	movs	r4, #20
 8000e66:	193b      	adds	r3, r7, r4
 8000e68:	0018      	movs	r0, r3
 8000e6a:	2314      	movs	r3, #20
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	2100      	movs	r1, #0
 8000e70:	f003 faa8 	bl	80043c4 <memset>
  if(huart->Instance==USART2)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <HAL_UART_MspInit+0x8c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d130      	bne.n	8000ee0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <HAL_UART_MspInit+0x90>)
 8000e80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <HAL_UART_MspInit+0x90>)
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	0289      	lsls	r1, r1, #10
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_UART_MspInit+0x90>)
 8000e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	029b      	lsls	r3, r3, #10
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_UART_MspInit+0x90>)
 8000e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <HAL_UART_MspInit+0x90>)
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_UART_MspInit+0x90>)
 8000ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4013      	ands	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000eb2:	0021      	movs	r1, r4
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	2200      	movs	r2, #0
 8000eca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	2201      	movs	r2, #1
 8000ed0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	187a      	adds	r2, r7, r1
 8000ed4:	23a0      	movs	r3, #160	; 0xa0
 8000ed6:	05db      	lsls	r3, r3, #23
 8000ed8:	0011      	movs	r1, r2
 8000eda:	0018      	movs	r0, r3
 8000edc:	f000 faa8 	bl	8001430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b00b      	add	sp, #44	; 0x2c
 8000ee6:	bd90      	pop	{r4, r7, pc}
 8000ee8:	40004400 	.word	0x40004400
 8000eec:	40021000 	.word	0x40021000

08000ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <NMI_Handler+0x4>

08000ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <HardFault_Handler+0x4>

08000efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 f96e 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <RTC_TAMP_IRQHandler+0x14>)
 8000f26:	0018      	movs	r0, r3
 8000f28:	f002 fbb4 	bl	8003694 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	200000fc 	.word	0x200000fc

08000f38 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */



  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Display_Button_Pin);
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f000 fc13 	bl	8001768 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Enable_Button_Pin);
 8000f42:	2002      	movs	r0, #2
 8000f44:	f000 fc10 	bl	8001768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  //NOT the interrupt part for GPIO pin 1 (I think)

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_NRST_Pin);
 8000f52:	2004      	movs	r0, #4
 8000f54:	f000 fc08 	bl	8001768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000f58:	46c0      	nop			; (mov r8, r8)
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alarm_Set_Button_Pin);
 8000f62:	2010      	movs	r0, #16
 8000f64:	f000 fc00 	bl	8001768 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Hour_Set_Button_Pin);
 8000f68:	2020      	movs	r0, #32
 8000f6a:	f000 fbfd 	bl	8001768 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Snooze_Button_Pin);
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	0018      	movs	r0, r3
 8000f74:	f000 fbf8 	bl	8001768 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Minute_Set_Button_Pin);
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	015b      	lsls	r3, r3, #5
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f000 fbf3 	bl	8001768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	e00a      	b.n	8000fb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f9a:	e000      	b.n	8000f9e <_read+0x16>
 8000f9c:	bf00      	nop
 8000f9e:	0001      	movs	r1, r0
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	1c5a      	adds	r2, r3, #1
 8000fa4:	60ba      	str	r2, [r7, #8]
 8000fa6:	b2ca      	uxtb	r2, r1
 8000fa8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3301      	adds	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dbf0      	blt.n	8000f9a <_read+0x12>
  }

  return len;
 8000fb8:	687b      	ldr	r3, [r7, #4]
}
 8000fba:	0018      	movs	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b006      	add	sp, #24
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	e009      	b.n	8000fe8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	60ba      	str	r2, [r7, #8]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff fa3d 	bl	800045c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	dbf1      	blt.n	8000fd4 <_write+0x12>
  }
  return len;
 8000ff0:	687b      	ldr	r3, [r7, #4]
}
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b006      	add	sp, #24
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_close>:

int _close(int file)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001002:	2301      	movs	r3, #1
 8001004:	425b      	negs	r3, r3
}
 8001006:	0018      	movs	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	b002      	add	sp, #8
 800100c:	bd80      	pop	{r7, pc}

0800100e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2280      	movs	r2, #128	; 0x80
 800101c:	0192      	lsls	r2, r2, #6
 800101e:	605a      	str	r2, [r3, #4]
  return 0;
 8001020:	2300      	movs	r3, #0
}
 8001022:	0018      	movs	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}

0800102a <_isatty>:

int _isatty(int file)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001032:	2301      	movs	r3, #1
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	b002      	add	sp, #8
 800103a:	bd80      	pop	{r7, pc}

0800103c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001048:	2300      	movs	r3, #0
}
 800104a:	0018      	movs	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	b004      	add	sp, #16
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800105c:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <_sbrk+0x5c>)
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <_sbrk+0x60>)
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d102      	bne.n	8001076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <_sbrk+0x64>)
 8001072:	4a12      	ldr	r2, [pc, #72]	; (80010bc <_sbrk+0x68>)
 8001074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <_sbrk+0x64>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	18d3      	adds	r3, r2, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	429a      	cmp	r2, r3
 8001082:	d207      	bcs.n	8001094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001084:	f003 f974 	bl	8004370 <__errno>
 8001088:	0003      	movs	r3, r0
 800108a:	220c      	movs	r2, #12
 800108c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108e:	2301      	movs	r3, #1
 8001090:	425b      	negs	r3, r3
 8001092:	e009      	b.n	80010a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	18d2      	adds	r2, r2, r3
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <_sbrk+0x64>)
 80010a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80010a6:	68fb      	ldr	r3, [r7, #12]
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b006      	add	sp, #24
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20002000 	.word	0x20002000
 80010b4:	00000400 	.word	0x00000400
 80010b8:	200001bc 	.word	0x200001bc
 80010bc:	200001d8 	.word	0x200001d8

080010c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010cc:	480d      	ldr	r0, [pc, #52]	; (8001104 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010d0:	f7ff fff6 	bl	80010c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <LoopForever+0x6>)
  ldr r1, =_edata
 80010d6:	490d      	ldr	r1, [pc, #52]	; (800110c <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <LoopForever+0xe>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010ec:	4c0a      	ldr	r4, [pc, #40]	; (8001118 <LoopForever+0x16>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010fa:	f003 f93f 	bl	800437c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010fe:	f7ff f9bf 	bl	8000480 <main>

08001102 <LoopForever>:

LoopForever:
  b LoopForever
 8001102:	e7fe      	b.n	8001102 <LoopForever>
  ldr   r0, =_estack
 8001104:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001110:	0800565c 	.word	0x0800565c
  ldr r2, =_sbss
 8001114:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001118:	200001d4 	.word	0x200001d4

0800111c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC1_IRQHandler>
	...

08001120 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_Init+0x3c>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_Init+0x3c>)
 8001132:	2180      	movs	r1, #128	; 0x80
 8001134:	0049      	lsls	r1, r1, #1
 8001136:	430a      	orrs	r2, r1
 8001138:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800113a:	2000      	movs	r0, #0
 800113c:	f000 f810 	bl	8001160 <HAL_InitTick>
 8001140:	1e03      	subs	r3, r0, #0
 8001142:	d003      	beq.n	800114c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001144:	1dfb      	adds	r3, r7, #7
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	e001      	b.n	8001150 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800114c:	f7ff fdba 	bl	8000cc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001150:	1dfb      	adds	r3, r7, #7
 8001152:	781b      	ldrb	r3, [r3, #0]
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b002      	add	sp, #8
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40022000 	.word	0x40022000

08001160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001168:	230f      	movs	r3, #15
 800116a:	18fb      	adds	r3, r7, r3
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <HAL_InitTick+0x88>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d02b      	beq.n	80011d0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <HAL_InitTick+0x8c>)
 800117a:	681c      	ldr	r4, [r3, #0]
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <HAL_InitTick+0x88>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	0019      	movs	r1, r3
 8001182:	23fa      	movs	r3, #250	; 0xfa
 8001184:	0098      	lsls	r0, r3, #2
 8001186:	f7fe ffc7 	bl	8000118 <__udivsi3>
 800118a:	0003      	movs	r3, r0
 800118c:	0019      	movs	r1, r3
 800118e:	0020      	movs	r0, r4
 8001190:	f7fe ffc2 	bl	8000118 <__udivsi3>
 8001194:	0003      	movs	r3, r0
 8001196:	0018      	movs	r0, r3
 8001198:	f000 f93d 	bl	8001416 <HAL_SYSTICK_Config>
 800119c:	1e03      	subs	r3, r0, #0
 800119e:	d112      	bne.n	80011c6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d80a      	bhi.n	80011bc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	2301      	movs	r3, #1
 80011aa:	425b      	negs	r3, r3
 80011ac:	2200      	movs	r2, #0
 80011ae:	0018      	movs	r0, r3
 80011b0:	f000 f90c 	bl	80013cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_InitTick+0x90>)
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	e00d      	b.n	80011d8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011bc:	230f      	movs	r3, #15
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]
 80011c4:	e008      	b.n	80011d8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011c6:	230f      	movs	r3, #15
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
 80011ce:	e003      	b.n	80011d8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011d0:	230f      	movs	r3, #15
 80011d2:	18fb      	adds	r3, r7, r3
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011d8:	230f      	movs	r3, #15
 80011da:	18fb      	adds	r3, r7, r3
 80011dc:	781b      	ldrb	r3, [r3, #0]
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b005      	add	sp, #20
 80011e4:	bd90      	pop	{r4, r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	20000024 	.word	0x20000024
 80011ec:	2000001c 	.word	0x2000001c
 80011f0:	20000020 	.word	0x20000020

080011f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_IncTick+0x1c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	001a      	movs	r2, r3
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_IncTick+0x20>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	18d2      	adds	r2, r2, r3
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <HAL_IncTick+0x20>)
 8001206:	601a      	str	r2, [r3, #0]
}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	20000024 	.word	0x20000024
 8001214:	200001c0 	.word	0x200001c0

08001218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b02      	ldr	r3, [pc, #8]	; (8001228 <HAL_GetTick+0x10>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	200001c0 	.word	0x200001c0

0800122c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff fff0 	bl	8001218 <HAL_GetTick>
 8001238:	0003      	movs	r3, r0
 800123a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	3301      	adds	r3, #1
 8001244:	d005      	beq.n	8001252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_Delay+0x44>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	001a      	movs	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	189b      	adds	r3, r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	f7ff ffe0 	bl	8001218 <HAL_GetTick>
 8001258:	0002      	movs	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d8f7      	bhi.n	8001254 <HAL_Delay+0x28>
  {
  }
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b004      	add	sp, #16
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	20000024 	.word	0x20000024

08001274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	0002      	movs	r2, r0
 800127c:	1dfb      	adds	r3, r7, #7
 800127e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001280:	1dfb      	adds	r3, r7, #7
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b7f      	cmp	r3, #127	; 0x7f
 8001286:	d809      	bhi.n	800129c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001288:	1dfb      	adds	r3, r7, #7
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	001a      	movs	r2, r3
 800128e:	231f      	movs	r3, #31
 8001290:	401a      	ands	r2, r3
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <__NVIC_EnableIRQ+0x30>)
 8001294:	2101      	movs	r1, #1
 8001296:	4091      	lsls	r1, r2
 8001298:	000a      	movs	r2, r1
 800129a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b002      	add	sp, #8
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	0002      	movs	r2, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012b6:	1dfb      	adds	r3, r7, #7
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b7f      	cmp	r3, #127	; 0x7f
 80012bc:	d828      	bhi.n	8001310 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012be:	4a2f      	ldr	r2, [pc, #188]	; (800137c <__NVIC_SetPriority+0xd4>)
 80012c0:	1dfb      	adds	r3, r7, #7
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	33c0      	adds	r3, #192	; 0xc0
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	589b      	ldr	r3, [r3, r2]
 80012ce:	1dfa      	adds	r2, r7, #7
 80012d0:	7812      	ldrb	r2, [r2, #0]
 80012d2:	0011      	movs	r1, r2
 80012d4:	2203      	movs	r2, #3
 80012d6:	400a      	ands	r2, r1
 80012d8:	00d2      	lsls	r2, r2, #3
 80012da:	21ff      	movs	r1, #255	; 0xff
 80012dc:	4091      	lsls	r1, r2
 80012de:	000a      	movs	r2, r1
 80012e0:	43d2      	mvns	r2, r2
 80012e2:	401a      	ands	r2, r3
 80012e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	019b      	lsls	r3, r3, #6
 80012ea:	22ff      	movs	r2, #255	; 0xff
 80012ec:	401a      	ands	r2, r3
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	0018      	movs	r0, r3
 80012f4:	2303      	movs	r3, #3
 80012f6:	4003      	ands	r3, r0
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012fc:	481f      	ldr	r0, [pc, #124]	; (800137c <__NVIC_SetPriority+0xd4>)
 80012fe:	1dfb      	adds	r3, r7, #7
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b25b      	sxtb	r3, r3
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	430a      	orrs	r2, r1
 8001308:	33c0      	adds	r3, #192	; 0xc0
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800130e:	e031      	b.n	8001374 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001310:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <__NVIC_SetPriority+0xd8>)
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	0019      	movs	r1, r3
 8001318:	230f      	movs	r3, #15
 800131a:	400b      	ands	r3, r1
 800131c:	3b08      	subs	r3, #8
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3306      	adds	r3, #6
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	18d3      	adds	r3, r2, r3
 8001326:	3304      	adds	r3, #4
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	1dfa      	adds	r2, r7, #7
 800132c:	7812      	ldrb	r2, [r2, #0]
 800132e:	0011      	movs	r1, r2
 8001330:	2203      	movs	r2, #3
 8001332:	400a      	ands	r2, r1
 8001334:	00d2      	lsls	r2, r2, #3
 8001336:	21ff      	movs	r1, #255	; 0xff
 8001338:	4091      	lsls	r1, r2
 800133a:	000a      	movs	r2, r1
 800133c:	43d2      	mvns	r2, r2
 800133e:	401a      	ands	r2, r3
 8001340:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	019b      	lsls	r3, r3, #6
 8001346:	22ff      	movs	r2, #255	; 0xff
 8001348:	401a      	ands	r2, r3
 800134a:	1dfb      	adds	r3, r7, #7
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	0018      	movs	r0, r3
 8001350:	2303      	movs	r3, #3
 8001352:	4003      	ands	r3, r0
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001358:	4809      	ldr	r0, [pc, #36]	; (8001380 <__NVIC_SetPriority+0xd8>)
 800135a:	1dfb      	adds	r3, r7, #7
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	001c      	movs	r4, r3
 8001360:	230f      	movs	r3, #15
 8001362:	4023      	ands	r3, r4
 8001364:	3b08      	subs	r3, #8
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	430a      	orrs	r2, r1
 800136a:	3306      	adds	r3, #6
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	18c3      	adds	r3, r0, r3
 8001370:	3304      	adds	r3, #4
 8001372:	601a      	str	r2, [r3, #0]
}
 8001374:	46c0      	nop			; (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	b003      	add	sp, #12
 800137a:	bd90      	pop	{r4, r7, pc}
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	1e5a      	subs	r2, r3, #1
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	045b      	lsls	r3, r3, #17
 8001394:	429a      	cmp	r2, r3
 8001396:	d301      	bcc.n	800139c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001398:	2301      	movs	r3, #1
 800139a:	e010      	b.n	80013be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <SysTick_Config+0x44>)
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	3a01      	subs	r2, #1
 80013a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a4:	2301      	movs	r3, #1
 80013a6:	425b      	negs	r3, r3
 80013a8:	2103      	movs	r1, #3
 80013aa:	0018      	movs	r0, r3
 80013ac:	f7ff ff7c 	bl	80012a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <SysTick_Config+0x44>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <SysTick_Config+0x44>)
 80013b8:	2207      	movs	r2, #7
 80013ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013bc:	2300      	movs	r3, #0
}
 80013be:	0018      	movs	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b002      	add	sp, #8
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	e000e010 	.word	0xe000e010

080013cc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	210f      	movs	r1, #15
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	1c02      	adds	r2, r0, #0
 80013dc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	187b      	adds	r3, r7, r1
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	0011      	movs	r1, r2
 80013e8:	0018      	movs	r0, r3
 80013ea:	f7ff ff5d 	bl	80012a8 <__NVIC_SetPriority>
}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b004      	add	sp, #16
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	0002      	movs	r2, r0
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b25b      	sxtb	r3, r3
 8001408:	0018      	movs	r0, r3
 800140a:	f7ff ff33 	bl	8001274 <__NVIC_EnableIRQ>
}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	b002      	add	sp, #8
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	0018      	movs	r0, r3
 8001422:	f7ff ffaf 	bl	8001384 <SysTick_Config>
 8001426:	0003      	movs	r3, r0
}
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	b002      	add	sp, #8
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143e:	e147      	b.n	80016d0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	4091      	lsls	r1, r2
 800144a:	000a      	movs	r2, r1
 800144c:	4013      	ands	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d100      	bne.n	8001458 <HAL_GPIO_Init+0x28>
 8001456:	e138      	b.n	80016ca <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2203      	movs	r2, #3
 800145e:	4013      	ands	r3, r2
 8001460:	2b01      	cmp	r3, #1
 8001462:	d005      	beq.n	8001470 <HAL_GPIO_Init+0x40>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2203      	movs	r2, #3
 800146a:	4013      	ands	r3, r2
 800146c:	2b02      	cmp	r3, #2
 800146e:	d130      	bne.n	80014d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	2203      	movs	r2, #3
 800147c:	409a      	lsls	r2, r3
 800147e:	0013      	movs	r3, r2
 8001480:	43da      	mvns	r2, r3
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68da      	ldr	r2, [r3, #12]
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	409a      	lsls	r2, r3
 8001492:	0013      	movs	r3, r2
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014a6:	2201      	movs	r2, #1
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	409a      	lsls	r2, r3
 80014ac:	0013      	movs	r3, r2
 80014ae:	43da      	mvns	r2, r3
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	2201      	movs	r2, #1
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	409a      	lsls	r2, r3
 80014c4:	0013      	movs	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2203      	movs	r2, #3
 80014d8:	4013      	ands	r3, r2
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d017      	beq.n	800150e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	409a      	lsls	r2, r3
 80014ec:	0013      	movs	r3, r2
 80014ee:	43da      	mvns	r2, r3
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	409a      	lsls	r2, r3
 8001500:	0013      	movs	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2203      	movs	r2, #3
 8001514:	4013      	ands	r3, r2
 8001516:	2b02      	cmp	r3, #2
 8001518:	d123      	bne.n	8001562 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	08da      	lsrs	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3208      	adds	r2, #8
 8001522:	0092      	lsls	r2, r2, #2
 8001524:	58d3      	ldr	r3, [r2, r3]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	2207      	movs	r2, #7
 800152c:	4013      	ands	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	220f      	movs	r2, #15
 8001532:	409a      	lsls	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	43da      	mvns	r2, r3
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2107      	movs	r1, #7
 8001546:	400b      	ands	r3, r1
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	409a      	lsls	r2, r3
 800154c:	0013      	movs	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	08da      	lsrs	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	6939      	ldr	r1, [r7, #16]
 8001560:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	409a      	lsls	r2, r3
 8001570:	0013      	movs	r3, r2
 8001572:	43da      	mvns	r2, r3
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2203      	movs	r2, #3
 8001580:	401a      	ands	r2, r3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	409a      	lsls	r2, r3
 8001588:	0013      	movs	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	23c0      	movs	r3, #192	; 0xc0
 800159c:	029b      	lsls	r3, r3, #10
 800159e:	4013      	ands	r3, r2
 80015a0:	d100      	bne.n	80015a4 <HAL_GPIO_Init+0x174>
 80015a2:	e092      	b.n	80016ca <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80015a4:	4a50      	ldr	r2, [pc, #320]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3318      	adds	r3, #24
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	589b      	ldr	r3, [r3, r2]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2203      	movs	r2, #3
 80015b6:	4013      	ands	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	220f      	movs	r2, #15
 80015bc:	409a      	lsls	r2, r3
 80015be:	0013      	movs	r3, r2
 80015c0:	43da      	mvns	r2, r3
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	23a0      	movs	r3, #160	; 0xa0
 80015cc:	05db      	lsls	r3, r3, #23
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d013      	beq.n	80015fa <HAL_GPIO_Init+0x1ca>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a45      	ldr	r2, [pc, #276]	; (80016ec <HAL_GPIO_Init+0x2bc>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d00d      	beq.n	80015f6 <HAL_GPIO_Init+0x1c6>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a44      	ldr	r2, [pc, #272]	; (80016f0 <HAL_GPIO_Init+0x2c0>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d007      	beq.n	80015f2 <HAL_GPIO_Init+0x1c2>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a43      	ldr	r2, [pc, #268]	; (80016f4 <HAL_GPIO_Init+0x2c4>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_GPIO_Init+0x1be>
 80015ea:	2303      	movs	r3, #3
 80015ec:	e006      	b.n	80015fc <HAL_GPIO_Init+0x1cc>
 80015ee:	2305      	movs	r3, #5
 80015f0:	e004      	b.n	80015fc <HAL_GPIO_Init+0x1cc>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_Init+0x1cc>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <HAL_GPIO_Init+0x1cc>
 80015fa:	2300      	movs	r3, #0
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	2103      	movs	r1, #3
 8001600:	400a      	ands	r2, r1
 8001602:	00d2      	lsls	r2, r2, #3
 8001604:	4093      	lsls	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800160c:	4936      	ldr	r1, [pc, #216]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	3318      	adds	r3, #24
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800161a:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43da      	mvns	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	035b      	lsls	r3, r3, #13
 8001632:	4013      	ands	r3, r2
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800163e:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001644:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	43da      	mvns	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	039b      	lsls	r3, r3, #14
 800165c:	4013      	ands	r3, r2
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001668:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800166e:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 8001670:	2384      	movs	r3, #132	; 0x84
 8001672:	58d3      	ldr	r3, [r2, r3]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	43da      	mvns	r2, r3
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	029b      	lsls	r3, r3, #10
 8001688:	4013      	ands	r3, r2
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001694:	4914      	ldr	r1, [pc, #80]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 8001696:	2284      	movs	r2, #132	; 0x84
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800169c:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	58d3      	ldr	r3, [r2, r3]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	43da      	mvns	r2, r3
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	025b      	lsls	r3, r3, #9
 80016b6:	4013      	ands	r3, r2
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016c2:	4909      	ldr	r1, [pc, #36]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 80016c4:	2280      	movs	r2, #128	; 0x80
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	40da      	lsrs	r2, r3
 80016d8:	1e13      	subs	r3, r2, #0
 80016da:	d000      	beq.n	80016de <HAL_GPIO_Init+0x2ae>
 80016dc:	e6b0      	b.n	8001440 <HAL_GPIO_Init+0x10>
  }
}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	46c0      	nop			; (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b006      	add	sp, #24
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021800 	.word	0x40021800
 80016ec:	50000400 	.word	0x50000400
 80016f0:	50000800 	.word	0x50000800
 80016f4:	50000c00 	.word	0x50000c00

080016f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	0008      	movs	r0, r1
 8001702:	0011      	movs	r1, r2
 8001704:	1cbb      	adds	r3, r7, #2
 8001706:	1c02      	adds	r2, r0, #0
 8001708:	801a      	strh	r2, [r3, #0]
 800170a:	1c7b      	adds	r3, r7, #1
 800170c:	1c0a      	adds	r2, r1, #0
 800170e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001710:	1c7b      	adds	r3, r7, #1
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d004      	beq.n	8001722 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001718:	1cbb      	adds	r3, r7, #2
 800171a:	881a      	ldrh	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001720:	e003      	b.n	800172a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001722:	1cbb      	adds	r3, r7, #2
 8001724:	881a      	ldrh	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	629a      	str	r2, [r3, #40]	; 0x28
}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	46bd      	mov	sp, r7
 800172e:	b002      	add	sp, #8
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b084      	sub	sp, #16
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	000a      	movs	r2, r1
 800173c:	1cbb      	adds	r3, r7, #2
 800173e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001746:	1cbb      	adds	r3, r7, #2
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	4013      	ands	r3, r2
 800174e:	041a      	lsls	r2, r3, #16
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	43db      	mvns	r3, r3
 8001754:	1cb9      	adds	r1, r7, #2
 8001756:	8809      	ldrh	r1, [r1, #0]
 8001758:	400b      	ands	r3, r1
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	619a      	str	r2, [r3, #24]
}
 8001760:	46c0      	nop			; (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	b004      	add	sp, #16
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	0002      	movs	r2, r0
 8001770:	1dbb      	adds	r3, r7, #6
 8001772:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	1dba      	adds	r2, r7, #6
 800177a:	8812      	ldrh	r2, [r2, #0]
 800177c:	4013      	ands	r3, r2
 800177e:	d008      	beq.n	8001792 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001780:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001782:	1dba      	adds	r2, r7, #6
 8001784:	8812      	ldrh	r2, [r2, #0]
 8001786:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001788:	1dbb      	adds	r3, r7, #6
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	0018      	movs	r0, r3
 800178e:	f000 f815 	bl	80017bc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	1dba      	adds	r2, r7, #6
 8001798:	8812      	ldrh	r2, [r2, #0]
 800179a:	4013      	ands	r3, r2
 800179c:	d008      	beq.n	80017b0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80017a0:	1dba      	adds	r2, r7, #6
 80017a2:	8812      	ldrh	r2, [r2, #0]
 80017a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80017a6:	1dbb      	adds	r3, r7, #6
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	0018      	movs	r0, r3
 80017ac:	f7ff f942 	bl	8000a34 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80017b0:	46c0      	nop			; (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b002      	add	sp, #8
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021800 	.word	0x40021800

080017bc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	0002      	movs	r2, r0
 80017c4:	1dbb      	adds	r3, r7, #6
 80017c6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80017c8:	46c0      	nop			; (mov r8, r8)
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b002      	add	sp, #8
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e082      	b.n	80018e8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2241      	movs	r2, #65	; 0x41
 80017e6:	5c9b      	ldrb	r3, [r3, r2]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d107      	bne.n	80017fe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2240      	movs	r2, #64	; 0x40
 80017f2:	2100      	movs	r1, #0
 80017f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	0018      	movs	r0, r3
 80017fa:	f7ff fa87 	bl	8000d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2241      	movs	r2, #65	; 0x41
 8001802:	2124      	movs	r1, #36	; 0x24
 8001804:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	438a      	bics	r2, r1
 8001814:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4934      	ldr	r1, [pc, #208]	; (80018f0 <HAL_I2C_Init+0x120>)
 8001820:	400a      	ands	r2, r1
 8001822:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4931      	ldr	r1, [pc, #196]	; (80018f4 <HAL_I2C_Init+0x124>)
 8001830:	400a      	ands	r2, r1
 8001832:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d108      	bne.n	800184e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2180      	movs	r1, #128	; 0x80
 8001846:	0209      	lsls	r1, r1, #8
 8001848:	430a      	orrs	r2, r1
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	e007      	b.n	800185e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2184      	movs	r1, #132	; 0x84
 8001858:	0209      	lsls	r1, r1, #8
 800185a:	430a      	orrs	r2, r1
 800185c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d104      	bne.n	8001870 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2280      	movs	r2, #128	; 0x80
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	491f      	ldr	r1, [pc, #124]	; (80018f8 <HAL_I2C_Init+0x128>)
 800187c:	430a      	orrs	r2, r1
 800187e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	491a      	ldr	r1, [pc, #104]	; (80018f4 <HAL_I2C_Init+0x124>)
 800188c:	400a      	ands	r2, r1
 800188e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	431a      	orrs	r2, r3
 800189a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69d9      	ldr	r1, [r3, #28]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1a      	ldr	r2, [r3, #32]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2101      	movs	r1, #1
 80018c6:	430a      	orrs	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2241      	movs	r2, #65	; 0x41
 80018d4:	2120      	movs	r1, #32
 80018d6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2242      	movs	r2, #66	; 0x42
 80018e2:	2100      	movs	r1, #0
 80018e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	0018      	movs	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b002      	add	sp, #8
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	f0ffffff 	.word	0xf0ffffff
 80018f4:	ffff7fff 	.word	0xffff7fff
 80018f8:	02008000 	.word	0x02008000

080018fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b089      	sub	sp, #36	; 0x24
 8001900:	af02      	add	r7, sp, #8
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	0008      	movs	r0, r1
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	0019      	movs	r1, r3
 800190a:	230a      	movs	r3, #10
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	1c02      	adds	r2, r0, #0
 8001910:	801a      	strh	r2, [r3, #0]
 8001912:	2308      	movs	r3, #8
 8001914:	18fb      	adds	r3, r7, r3
 8001916:	1c0a      	adds	r2, r1, #0
 8001918:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2241      	movs	r2, #65	; 0x41
 800191e:	5c9b      	ldrb	r3, [r3, r2]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b20      	cmp	r3, #32
 8001924:	d000      	beq.n	8001928 <HAL_I2C_Master_Transmit+0x2c>
 8001926:	e0e7      	b.n	8001af8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2240      	movs	r2, #64	; 0x40
 800192c:	5c9b      	ldrb	r3, [r3, r2]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d101      	bne.n	8001936 <HAL_I2C_Master_Transmit+0x3a>
 8001932:	2302      	movs	r3, #2
 8001934:	e0e1      	b.n	8001afa <HAL_I2C_Master_Transmit+0x1fe>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2240      	movs	r2, #64	; 0x40
 800193a:	2101      	movs	r1, #1
 800193c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800193e:	f7ff fc6b 	bl	8001218 <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	0219      	lsls	r1, r3, #8
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2319      	movs	r3, #25
 8001952:	2201      	movs	r2, #1
 8001954:	f000 f8fc 	bl	8001b50 <I2C_WaitOnFlagUntilTimeout>
 8001958:	1e03      	subs	r3, r0, #0
 800195a:	d001      	beq.n	8001960 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0cc      	b.n	8001afa <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2241      	movs	r2, #65	; 0x41
 8001964:	2121      	movs	r1, #33	; 0x21
 8001966:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2242      	movs	r2, #66	; 0x42
 800196c:	2110      	movs	r1, #16
 800196e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2208      	movs	r2, #8
 8001980:	18ba      	adds	r2, r7, r2
 8001982:	8812      	ldrh	r2, [r2, #0]
 8001984:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001990:	b29b      	uxth	r3, r3
 8001992:	2bff      	cmp	r3, #255	; 0xff
 8001994:	d911      	bls.n	80019ba <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	22ff      	movs	r2, #255	; 0xff
 800199a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	045c      	lsls	r4, r3, #17
 80019a6:	230a      	movs	r3, #10
 80019a8:	18fb      	adds	r3, r7, r3
 80019aa:	8819      	ldrh	r1, [r3, #0]
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	4b55      	ldr	r3, [pc, #340]	; (8001b04 <HAL_I2C_Master_Transmit+0x208>)
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	0023      	movs	r3, r4
 80019b4:	f000 fa86 	bl	8001ec4 <I2C_TransferConfig>
 80019b8:	e075      	b.n	8001aa6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019be:	b29a      	uxth	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	049c      	lsls	r4, r3, #18
 80019ce:	230a      	movs	r3, #10
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	8819      	ldrh	r1, [r3, #0]
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	4b4b      	ldr	r3, [pc, #300]	; (8001b04 <HAL_I2C_Master_Transmit+0x208>)
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	0023      	movs	r3, r4
 80019dc:	f000 fa72 	bl	8001ec4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80019e0:	e061      	b.n	8001aa6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	0018      	movs	r0, r3
 80019ea:	f000 f8f0 	bl	8001bce <I2C_WaitOnTXISFlagUntilTimeout>
 80019ee:	1e03      	subs	r3, r0, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e081      	b.n	8001afa <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	3b01      	subs	r3, #1
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d03a      	beq.n	8001aa6 <HAL_I2C_Master_Transmit+0x1aa>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d136      	bne.n	8001aa6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	0013      	movs	r3, r2
 8001a42:	2200      	movs	r2, #0
 8001a44:	2180      	movs	r1, #128	; 0x80
 8001a46:	f000 f883 	bl	8001b50 <I2C_WaitOnFlagUntilTimeout>
 8001a4a:	1e03      	subs	r3, r0, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e053      	b.n	8001afa <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	2bff      	cmp	r3, #255	; 0xff
 8001a5a:	d911      	bls.n	8001a80 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	22ff      	movs	r2, #255	; 0xff
 8001a60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	045c      	lsls	r4, r3, #17
 8001a6c:	230a      	movs	r3, #10
 8001a6e:	18fb      	adds	r3, r7, r3
 8001a70:	8819      	ldrh	r1, [r3, #0]
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	2300      	movs	r3, #0
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	0023      	movs	r3, r4
 8001a7a:	f000 fa23 	bl	8001ec4 <I2C_TransferConfig>
 8001a7e:	e012      	b.n	8001aa6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	049c      	lsls	r4, r3, #18
 8001a94:	230a      	movs	r3, #10
 8001a96:	18fb      	adds	r3, r7, r3
 8001a98:	8819      	ldrh	r1, [r3, #0]
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	0023      	movs	r3, r4
 8001aa2:	f000 fa0f 	bl	8001ec4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d198      	bne.n	80019e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f000 f8c8 	bl	8001c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001abc:	1e03      	subs	r3, r0, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e01a      	b.n	8001afa <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2220      	movs	r2, #32
 8001aca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	490c      	ldr	r1, [pc, #48]	; (8001b08 <HAL_I2C_Master_Transmit+0x20c>)
 8001ad8:	400a      	ands	r2, r1
 8001ada:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2241      	movs	r2, #65	; 0x41
 8001ae0:	2120      	movs	r1, #32
 8001ae2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2242      	movs	r2, #66	; 0x42
 8001ae8:	2100      	movs	r1, #0
 8001aea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2240      	movs	r2, #64	; 0x40
 8001af0:	2100      	movs	r1, #0
 8001af2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	e000      	b.n	8001afa <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001af8:	2302      	movs	r3, #2
  }
}
 8001afa:	0018      	movs	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b007      	add	sp, #28
 8001b00:	bd90      	pop	{r4, r7, pc}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	80002000 	.word	0x80002000
 8001b08:	fe00e800 	.word	0xfe00e800

08001b0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d103      	bne.n	8001b2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2200      	movs	r2, #0
 8001b28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	2201      	movs	r2, #1
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d007      	beq.n	8001b48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699a      	ldr	r2, [r3, #24]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2101      	movs	r1, #1
 8001b44:	430a      	orrs	r2, r1
 8001b46:	619a      	str	r2, [r3, #24]
  }
}
 8001b48:	46c0      	nop			; (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b002      	add	sp, #8
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	1dfb      	adds	r3, r7, #7
 8001b5e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b60:	e021      	b.n	8001ba6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	3301      	adds	r3, #1
 8001b66:	d01e      	beq.n	8001ba6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b68:	f7ff fb56 	bl	8001218 <HAL_GetTick>
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d302      	bcc.n	8001b7e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d113      	bne.n	8001ba6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	2220      	movs	r2, #32
 8001b84:	431a      	orrs	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2241      	movs	r2, #65	; 0x41
 8001b8e:	2120      	movs	r1, #32
 8001b90:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2242      	movs	r2, #66	; 0x42
 8001b96:	2100      	movs	r1, #0
 8001b98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2240      	movs	r2, #64	; 0x40
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00f      	b.n	8001bc6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	425a      	negs	r2, r3
 8001bb6:	4153      	adcs	r3, r2
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	001a      	movs	r2, r3
 8001bbc:	1dfb      	adds	r3, r7, #7
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d0ce      	beq.n	8001b62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b004      	add	sp, #16
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bda:	e02b      	b.n	8001c34 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	68b9      	ldr	r1, [r7, #8]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	0018      	movs	r0, r3
 8001be4:	f000 f86e 	bl	8001cc4 <I2C_IsErrorOccurred>
 8001be8:	1e03      	subs	r3, r0, #0
 8001bea:	d001      	beq.n	8001bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e029      	b.n	8001c44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	d01e      	beq.n	8001c34 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf6:	f7ff fb0f 	bl	8001218 <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d302      	bcc.n	8001c0c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d113      	bne.n	8001c34 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	2220      	movs	r2, #32
 8001c12:	431a      	orrs	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2241      	movs	r2, #65	; 0x41
 8001c1c:	2120      	movs	r1, #32
 8001c1e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2242      	movs	r2, #66	; 0x42
 8001c24:	2100      	movs	r1, #0
 8001c26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2240      	movs	r2, #64	; 0x40
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e007      	b.n	8001c44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d1cc      	bne.n	8001bdc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b004      	add	sp, #16
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c58:	e028      	b.n	8001cac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	0018      	movs	r0, r3
 8001c62:	f000 f82f 	bl	8001cc4 <I2C_IsErrorOccurred>
 8001c66:	1e03      	subs	r3, r0, #0
 8001c68:	d001      	beq.n	8001c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e026      	b.n	8001cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c6e:	f7ff fad3 	bl	8001218 <HAL_GetTick>
 8001c72:	0002      	movs	r2, r0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d302      	bcc.n	8001c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d113      	bne.n	8001cac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c88:	2220      	movs	r2, #32
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2241      	movs	r2, #65	; 0x41
 8001c94:	2120      	movs	r1, #32
 8001c96:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2242      	movs	r2, #66	; 0x42
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2240      	movs	r2, #64	; 0x40
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e007      	b.n	8001cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	d1cf      	bne.n	8001c5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b004      	add	sp, #16
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b08b      	sub	sp, #44	; 0x2c
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd0:	2327      	movs	r3, #39	; 0x27
 8001cd2:	18fb      	adds	r3, r7, r3
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2210      	movs	r2, #16
 8001cec:	4013      	ands	r3, r2
 8001cee:	d100      	bne.n	8001cf2 <I2C_IsErrorOccurred+0x2e>
 8001cf0:	e082      	b.n	8001df8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2210      	movs	r2, #16
 8001cf8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cfa:	e060      	b.n	8001dbe <I2C_IsErrorOccurred+0xfa>
 8001cfc:	2427      	movs	r4, #39	; 0x27
 8001cfe:	193b      	adds	r3, r7, r4
 8001d00:	193a      	adds	r2, r7, r4
 8001d02:	7812      	ldrb	r2, [r2, #0]
 8001d04:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	d058      	beq.n	8001dbe <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d0c:	f7ff fa84 	bl	8001218 <HAL_GetTick>
 8001d10:	0002      	movs	r2, r0
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d306      	bcc.n	8001d2a <I2C_IsErrorOccurred+0x66>
 8001d1c:	193b      	adds	r3, r7, r4
 8001d1e:	193a      	adds	r2, r7, r4
 8001d20:	7812      	ldrb	r2, [r2, #0]
 8001d22:	701a      	strb	r2, [r3, #0]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d149      	bne.n	8001dbe <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	01db      	lsls	r3, r3, #7
 8001d34:	4013      	ands	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d38:	2013      	movs	r0, #19
 8001d3a:	183b      	adds	r3, r7, r0
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	2142      	movs	r1, #66	; 0x42
 8001d40:	5c52      	ldrb	r2, [r2, r1]
 8001d42:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699a      	ldr	r2, [r3, #24]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	401a      	ands	r2, r3
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d126      	bne.n	8001da6 <I2C_IsErrorOccurred+0xe2>
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	01db      	lsls	r3, r3, #7
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d021      	beq.n	8001da6 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001d62:	183b      	adds	r3, r7, r0
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	d01d      	beq.n	8001da6 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2180      	movs	r1, #128	; 0x80
 8001d76:	01c9      	lsls	r1, r1, #7
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d7c:	f7ff fa4c 	bl	8001218 <HAL_GetTick>
 8001d80:	0003      	movs	r3, r0
 8001d82:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d84:	e00f      	b.n	8001da6 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d86:	f7ff fa47 	bl	8001218 <HAL_GetTick>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b19      	cmp	r3, #25
 8001d92:	d908      	bls.n	8001da6 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	2220      	movs	r2, #32
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001d9c:	2327      	movs	r3, #39	; 0x27
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]

              break;
 8001da4:	e00b      	b.n	8001dbe <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	2220      	movs	r2, #32
 8001dae:	4013      	ands	r3, r2
 8001db0:	2127      	movs	r1, #39	; 0x27
 8001db2:	187a      	adds	r2, r7, r1
 8001db4:	1879      	adds	r1, r7, r1
 8001db6:	7809      	ldrb	r1, [r1, #0]
 8001db8:	7011      	strb	r1, [r2, #0]
 8001dba:	2b20      	cmp	r3, #32
 8001dbc:	d1e3      	bne.n	8001d86 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b20      	cmp	r3, #32
 8001dca:	d004      	beq.n	8001dd6 <I2C_IsErrorOccurred+0x112>
 8001dcc:	2327      	movs	r3, #39	; 0x27
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d092      	beq.n	8001cfc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001dd6:	2327      	movs	r3, #39	; 0x27
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d103      	bne.n	8001de8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2220      	movs	r2, #32
 8001de6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	2204      	movs	r2, #4
 8001dec:	4313      	orrs	r3, r2
 8001dee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001df0:	2327      	movs	r3, #39	; 0x27
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4013      	ands	r3, r2
 8001e08:	d00c      	beq.n	8001e24 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	0052      	lsls	r2, r2, #1
 8001e1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e1c:	2327      	movs	r3, #39	; 0x27
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d00c      	beq.n	8001e48 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	2208      	movs	r2, #8
 8001e32:	4313      	orrs	r3, r2
 8001e34:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2280      	movs	r2, #128	; 0x80
 8001e3c:	00d2      	lsls	r2, r2, #3
 8001e3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e40:	2327      	movs	r3, #39	; 0x27
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d00c      	beq.n	8001e6c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	2202      	movs	r2, #2
 8001e56:	4313      	orrs	r3, r2
 8001e58:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2280      	movs	r2, #128	; 0x80
 8001e60:	0092      	lsls	r2, r2, #2
 8001e62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e64:	2327      	movs	r3, #39	; 0x27
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001e6c:	2327      	movs	r3, #39	; 0x27
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d01d      	beq.n	8001eb2 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f7ff fe47 	bl	8001b0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	490d      	ldr	r1, [pc, #52]	; (8001ec0 <I2C_IsErrorOccurred+0x1fc>)
 8001e8a:	400a      	ands	r2, r1
 8001e8c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2241      	movs	r2, #65	; 0x41
 8001e9e:	2120      	movs	r1, #32
 8001ea0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2242      	movs	r2, #66	; 0x42
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2240      	movs	r2, #64	; 0x40
 8001eae:	2100      	movs	r1, #0
 8001eb0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001eb2:	2327      	movs	r3, #39	; 0x27
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	781b      	ldrb	r3, [r3, #0]
}
 8001eb8:	0018      	movs	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b00b      	add	sp, #44	; 0x2c
 8001ebe:	bd90      	pop	{r4, r7, pc}
 8001ec0:	fe00e800 	.word	0xfe00e800

08001ec4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	0008      	movs	r0, r1
 8001ece:	0011      	movs	r1, r2
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	240a      	movs	r4, #10
 8001ed4:	193b      	adds	r3, r7, r4
 8001ed6:	1c02      	adds	r2, r0, #0
 8001ed8:	801a      	strh	r2, [r3, #0]
 8001eda:	2009      	movs	r0, #9
 8001edc:	183b      	adds	r3, r7, r0
 8001ede:	1c0a      	adds	r2, r1, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ee2:	193b      	adds	r3, r7, r4
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	059b      	lsls	r3, r3, #22
 8001ee8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001eea:	183b      	adds	r3, r7, r0
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	0419      	lsls	r1, r3, #16
 8001ef0:	23ff      	movs	r3, #255	; 0xff
 8001ef2:	041b      	lsls	r3, r3, #16
 8001ef4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ef6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efe:	4313      	orrs	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	085b      	lsrs	r3, r3, #1
 8001f04:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f0e:	0d51      	lsrs	r1, r2, #21
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	00d2      	lsls	r2, r2, #3
 8001f14:	400a      	ands	r2, r1
 8001f16:	4907      	ldr	r1, [pc, #28]	; (8001f34 <I2C_TransferConfig+0x70>)
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	43d2      	mvns	r2, r2
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	0011      	movs	r1, r2
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b007      	add	sp, #28
 8001f30:	bd90      	pop	{r4, r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	03ff63ff 	.word	0x03ff63ff

08001f38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2241      	movs	r2, #65	; 0x41
 8001f46:	5c9b      	ldrb	r3, [r3, r2]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b20      	cmp	r3, #32
 8001f4c:	d138      	bne.n	8001fc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2240      	movs	r2, #64	; 0x40
 8001f52:	5c9b      	ldrb	r3, [r3, r2]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e032      	b.n	8001fc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2240      	movs	r2, #64	; 0x40
 8001f60:	2101      	movs	r1, #1
 8001f62:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2241      	movs	r2, #65	; 0x41
 8001f68:	2124      	movs	r1, #36	; 0x24
 8001f6a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2101      	movs	r1, #1
 8001f78:	438a      	bics	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4911      	ldr	r1, [pc, #68]	; (8001fcc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001f88:	400a      	ands	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6819      	ldr	r1, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2241      	movs	r2, #65	; 0x41
 8001fb0:	2120      	movs	r1, #32
 8001fb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2240      	movs	r2, #64	; 0x40
 8001fb8:	2100      	movs	r1, #0
 8001fba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	e000      	b.n	8001fc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fc0:	2302      	movs	r3, #2
  }
}
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b002      	add	sp, #8
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	ffffefff 	.word	0xffffefff

08001fd0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2241      	movs	r2, #65	; 0x41
 8001fde:	5c9b      	ldrb	r3, [r3, r2]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b20      	cmp	r3, #32
 8001fe4:	d139      	bne.n	800205a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2240      	movs	r2, #64	; 0x40
 8001fea:	5c9b      	ldrb	r3, [r3, r2]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e033      	b.n	800205c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2240      	movs	r2, #64	; 0x40
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2241      	movs	r2, #65	; 0x41
 8002000:	2124      	movs	r1, #36	; 0x24
 8002002:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2101      	movs	r1, #1
 8002010:	438a      	bics	r2, r1
 8002012:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4a11      	ldr	r2, [pc, #68]	; (8002064 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002020:	4013      	ands	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2101      	movs	r1, #1
 8002042:	430a      	orrs	r2, r1
 8002044:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2241      	movs	r2, #65	; 0x41
 800204a:	2120      	movs	r1, #32
 800204c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2240      	movs	r2, #64	; 0x40
 8002052:	2100      	movs	r1, #0
 8002054:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	e000      	b.n	800205c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800205a:	2302      	movs	r3, #2
  }
}
 800205c:	0018      	movs	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	b004      	add	sp, #16
 8002062:	bd80      	pop	{r7, pc}
 8002064:	fffff0ff 	.word	0xfffff0ff

08002068 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002070:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a19      	ldr	r2, [pc, #100]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002076:	4013      	ands	r3, r2
 8002078:	0019      	movs	r1, r3
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	430a      	orrs	r2, r1
 8002080:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	429a      	cmp	r2, r3
 800208a:	d11f      	bne.n	80020cc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	0013      	movs	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	189b      	adds	r3, r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4912      	ldr	r1, [pc, #72]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800209a:	0018      	movs	r0, r3
 800209c:	f7fe f83c 	bl	8000118 <__udivsi3>
 80020a0:	0003      	movs	r3, r0
 80020a2:	3301      	adds	r3, #1
 80020a4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020a6:	e008      	b.n	80020ba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	e001      	b.n	80020ba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e009      	b.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	401a      	ands	r2, r3
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d0ed      	beq.n	80020a8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	0018      	movs	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b004      	add	sp, #16
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	40007000 	.word	0x40007000
 80020dc:	fffff9ff 	.word	0xfffff9ff
 80020e0:	2000001c 	.word	0x2000001c
 80020e4:	000f4240 	.word	0x000f4240

080020e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80020ec:	4b03      	ldr	r3, [pc, #12]	; (80020fc <LL_RCC_GetAPB1Prescaler+0x14>)
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	23e0      	movs	r3, #224	; 0xe0
 80020f2:	01db      	lsls	r3, r3, #7
 80020f4:	4013      	ands	r3, r2
}
 80020f6:	0018      	movs	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000

08002100 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e2fe      	b.n	8002710 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2201      	movs	r2, #1
 8002118:	4013      	ands	r3, r2
 800211a:	d100      	bne.n	800211e <HAL_RCC_OscConfig+0x1e>
 800211c:	e07c      	b.n	8002218 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800211e:	4bc3      	ldr	r3, [pc, #780]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2238      	movs	r2, #56	; 0x38
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002128:	4bc0      	ldr	r3, [pc, #768]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2203      	movs	r2, #3
 800212e:	4013      	ands	r3, r2
 8002130:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2b10      	cmp	r3, #16
 8002136:	d102      	bne.n	800213e <HAL_RCC_OscConfig+0x3e>
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2b03      	cmp	r3, #3
 800213c:	d002      	beq.n	8002144 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b08      	cmp	r3, #8
 8002142:	d10b      	bne.n	800215c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	4bb9      	ldr	r3, [pc, #740]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	029b      	lsls	r3, r3, #10
 800214c:	4013      	ands	r3, r2
 800214e:	d062      	beq.n	8002216 <HAL_RCC_OscConfig+0x116>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d15e      	bne.n	8002216 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e2d9      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	025b      	lsls	r3, r3, #9
 8002164:	429a      	cmp	r2, r3
 8002166:	d107      	bne.n	8002178 <HAL_RCC_OscConfig+0x78>
 8002168:	4bb0      	ldr	r3, [pc, #704]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4baf      	ldr	r3, [pc, #700]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 800216e:	2180      	movs	r1, #128	; 0x80
 8002170:	0249      	lsls	r1, r1, #9
 8002172:	430a      	orrs	r2, r1
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e020      	b.n	80021ba <HAL_RCC_OscConfig+0xba>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	23a0      	movs	r3, #160	; 0xa0
 800217e:	02db      	lsls	r3, r3, #11
 8002180:	429a      	cmp	r2, r3
 8002182:	d10e      	bne.n	80021a2 <HAL_RCC_OscConfig+0xa2>
 8002184:	4ba9      	ldr	r3, [pc, #676]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4ba8      	ldr	r3, [pc, #672]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 800218a:	2180      	movs	r1, #128	; 0x80
 800218c:	02c9      	lsls	r1, r1, #11
 800218e:	430a      	orrs	r2, r1
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	4ba6      	ldr	r3, [pc, #664]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4ba5      	ldr	r3, [pc, #660]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 8002198:	2180      	movs	r1, #128	; 0x80
 800219a:	0249      	lsls	r1, r1, #9
 800219c:	430a      	orrs	r2, r1
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	e00b      	b.n	80021ba <HAL_RCC_OscConfig+0xba>
 80021a2:	4ba2      	ldr	r3, [pc, #648]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	4ba1      	ldr	r3, [pc, #644]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 80021a8:	49a1      	ldr	r1, [pc, #644]	; (8002430 <HAL_RCC_OscConfig+0x330>)
 80021aa:	400a      	ands	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	4b9f      	ldr	r3, [pc, #636]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	4b9e      	ldr	r3, [pc, #632]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 80021b4:	499f      	ldr	r1, [pc, #636]	; (8002434 <HAL_RCC_OscConfig+0x334>)
 80021b6:	400a      	ands	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d014      	beq.n	80021ec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c2:	f7ff f829 	bl	8001218 <HAL_GetTick>
 80021c6:	0003      	movs	r3, r0
 80021c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021cc:	f7ff f824 	bl	8001218 <HAL_GetTick>
 80021d0:	0002      	movs	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e298      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021de:	4b93      	ldr	r3, [pc, #588]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	029b      	lsls	r3, r3, #10
 80021e6:	4013      	ands	r3, r2
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0xcc>
 80021ea:	e015      	b.n	8002218 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7ff f814 	bl	8001218 <HAL_GetTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f6:	f7ff f80f 	bl	8001218 <HAL_GetTick>
 80021fa:	0002      	movs	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b64      	cmp	r3, #100	; 0x64
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e283      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002208:	4b88      	ldr	r3, [pc, #544]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	029b      	lsls	r3, r3, #10
 8002210:	4013      	ands	r3, r2
 8002212:	d1f0      	bne.n	80021f6 <HAL_RCC_OscConfig+0xf6>
 8002214:	e000      	b.n	8002218 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002216:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2202      	movs	r2, #2
 800221e:	4013      	ands	r3, r2
 8002220:	d100      	bne.n	8002224 <HAL_RCC_OscConfig+0x124>
 8002222:	e099      	b.n	8002358 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002224:	4b81      	ldr	r3, [pc, #516]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2238      	movs	r2, #56	; 0x38
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800222e:	4b7f      	ldr	r3, [pc, #508]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2203      	movs	r2, #3
 8002234:	4013      	ands	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2b10      	cmp	r3, #16
 800223c:	d102      	bne.n	8002244 <HAL_RCC_OscConfig+0x144>
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d002      	beq.n	800224a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d135      	bne.n	80022b6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800224a:	4b78      	ldr	r3, [pc, #480]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4013      	ands	r3, r2
 8002254:	d005      	beq.n	8002262 <HAL_RCC_OscConfig+0x162>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e256      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002262:	4b72      	ldr	r3, [pc, #456]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4a74      	ldr	r2, [pc, #464]	; (8002438 <HAL_RCC_OscConfig+0x338>)
 8002268:	4013      	ands	r3, r2
 800226a:	0019      	movs	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	021a      	lsls	r2, r3, #8
 8002272:	4b6e      	ldr	r3, [pc, #440]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 8002274:	430a      	orrs	r2, r1
 8002276:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d112      	bne.n	80022a4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800227e:	4b6b      	ldr	r3, [pc, #428]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a6e      	ldr	r2, [pc, #440]	; (800243c <HAL_RCC_OscConfig+0x33c>)
 8002284:	4013      	ands	r3, r2
 8002286:	0019      	movs	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	4b67      	ldr	r3, [pc, #412]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002292:	4b66      	ldr	r3, [pc, #408]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	0adb      	lsrs	r3, r3, #11
 8002298:	2207      	movs	r2, #7
 800229a:	4013      	ands	r3, r2
 800229c:	4a68      	ldr	r2, [pc, #416]	; (8002440 <HAL_RCC_OscConfig+0x340>)
 800229e:	40da      	lsrs	r2, r3
 80022a0:	4b68      	ldr	r3, [pc, #416]	; (8002444 <HAL_RCC_OscConfig+0x344>)
 80022a2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022a4:	4b68      	ldr	r3, [pc, #416]	; (8002448 <HAL_RCC_OscConfig+0x348>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0018      	movs	r0, r3
 80022aa:	f7fe ff59 	bl	8001160 <HAL_InitTick>
 80022ae:	1e03      	subs	r3, r0, #0
 80022b0:	d051      	beq.n	8002356 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e22c      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d030      	beq.n	8002320 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022be:	4b5b      	ldr	r3, [pc, #364]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a5e      	ldr	r2, [pc, #376]	; (800243c <HAL_RCC_OscConfig+0x33c>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	0019      	movs	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	4b57      	ldr	r3, [pc, #348]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 80022ce:	430a      	orrs	r2, r1
 80022d0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80022d2:	4b56      	ldr	r3, [pc, #344]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	4b55      	ldr	r3, [pc, #340]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	0049      	lsls	r1, r1, #1
 80022dc:	430a      	orrs	r2, r1
 80022de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7fe ff9a 	bl	8001218 <HAL_GetTick>
 80022e4:	0003      	movs	r3, r0
 80022e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ea:	f7fe ff95 	bl	8001218 <HAL_GetTick>
 80022ee:	0002      	movs	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e209      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022fc:	4b4b      	ldr	r3, [pc, #300]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4013      	ands	r3, r2
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002308:	4b48      	ldr	r3, [pc, #288]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4a4a      	ldr	r2, [pc, #296]	; (8002438 <HAL_RCC_OscConfig+0x338>)
 800230e:	4013      	ands	r3, r2
 8002310:	0019      	movs	r1, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	021a      	lsls	r2, r3, #8
 8002318:	4b44      	ldr	r3, [pc, #272]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 800231a:	430a      	orrs	r2, r1
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	e01b      	b.n	8002358 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002320:	4b42      	ldr	r3, [pc, #264]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b41      	ldr	r3, [pc, #260]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 8002326:	4949      	ldr	r1, [pc, #292]	; (800244c <HAL_RCC_OscConfig+0x34c>)
 8002328:	400a      	ands	r2, r1
 800232a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7fe ff74 	bl	8001218 <HAL_GetTick>
 8002330:	0003      	movs	r3, r0
 8002332:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002336:	f7fe ff6f 	bl	8001218 <HAL_GetTick>
 800233a:	0002      	movs	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e1e3      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002348:	4b38      	ldr	r3, [pc, #224]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4013      	ands	r3, r2
 8002352:	d1f0      	bne.n	8002336 <HAL_RCC_OscConfig+0x236>
 8002354:	e000      	b.n	8002358 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002356:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2208      	movs	r2, #8
 800235e:	4013      	ands	r3, r2
 8002360:	d047      	beq.n	80023f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002362:	4b32      	ldr	r3, [pc, #200]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2238      	movs	r2, #56	; 0x38
 8002368:	4013      	ands	r3, r2
 800236a:	2b18      	cmp	r3, #24
 800236c:	d10a      	bne.n	8002384 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800236e:	4b2f      	ldr	r3, [pc, #188]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 8002370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002372:	2202      	movs	r2, #2
 8002374:	4013      	ands	r3, r2
 8002376:	d03c      	beq.n	80023f2 <HAL_RCC_OscConfig+0x2f2>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d138      	bne.n	80023f2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e1c5      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d019      	beq.n	80023c0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800238c:	4b27      	ldr	r3, [pc, #156]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 800238e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002390:	4b26      	ldr	r3, [pc, #152]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 8002392:	2101      	movs	r1, #1
 8002394:	430a      	orrs	r2, r1
 8002396:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7fe ff3e 	bl	8001218 <HAL_GetTick>
 800239c:	0003      	movs	r3, r0
 800239e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a2:	f7fe ff39 	bl	8001218 <HAL_GetTick>
 80023a6:	0002      	movs	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e1ad      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023b4:	4b1d      	ldr	r3, [pc, #116]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 80023b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b8:	2202      	movs	r2, #2
 80023ba:	4013      	ands	r3, r2
 80023bc:	d0f1      	beq.n	80023a2 <HAL_RCC_OscConfig+0x2a2>
 80023be:	e018      	b.n	80023f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80023c0:	4b1a      	ldr	r3, [pc, #104]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 80023c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023c4:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 80023c6:	2101      	movs	r1, #1
 80023c8:	438a      	bics	r2, r1
 80023ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7fe ff24 	bl	8001218 <HAL_GetTick>
 80023d0:	0003      	movs	r3, r0
 80023d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d6:	f7fe ff1f 	bl	8001218 <HAL_GetTick>
 80023da:	0002      	movs	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e193      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023e8:	4b10      	ldr	r3, [pc, #64]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 80023ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ec:	2202      	movs	r2, #2
 80023ee:	4013      	ands	r3, r2
 80023f0:	d1f1      	bne.n	80023d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2204      	movs	r2, #4
 80023f8:	4013      	ands	r3, r2
 80023fa:	d100      	bne.n	80023fe <HAL_RCC_OscConfig+0x2fe>
 80023fc:	e0c6      	b.n	800258c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023fe:	231f      	movs	r3, #31
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2238      	movs	r2, #56	; 0x38
 800240c:	4013      	ands	r3, r2
 800240e:	2b20      	cmp	r3, #32
 8002410:	d11e      	bne.n	8002450 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_RCC_OscConfig+0x32c>)
 8002414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002416:	2202      	movs	r2, #2
 8002418:	4013      	ands	r3, r2
 800241a:	d100      	bne.n	800241e <HAL_RCC_OscConfig+0x31e>
 800241c:	e0b6      	b.n	800258c <HAL_RCC_OscConfig+0x48c>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d000      	beq.n	8002428 <HAL_RCC_OscConfig+0x328>
 8002426:	e0b1      	b.n	800258c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e171      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
 800242c:	40021000 	.word	0x40021000
 8002430:	fffeffff 	.word	0xfffeffff
 8002434:	fffbffff 	.word	0xfffbffff
 8002438:	ffff80ff 	.word	0xffff80ff
 800243c:	ffffc7ff 	.word	0xffffc7ff
 8002440:	00f42400 	.word	0x00f42400
 8002444:	2000001c 	.word	0x2000001c
 8002448:	20000020 	.word	0x20000020
 800244c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002450:	4bb1      	ldr	r3, [pc, #708]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 8002452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	055b      	lsls	r3, r3, #21
 8002458:	4013      	ands	r3, r2
 800245a:	d101      	bne.n	8002460 <HAL_RCC_OscConfig+0x360>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <HAL_RCC_OscConfig+0x362>
 8002460:	2300      	movs	r3, #0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d011      	beq.n	800248a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	4bac      	ldr	r3, [pc, #688]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 8002468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800246a:	4bab      	ldr	r3, [pc, #684]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 800246c:	2180      	movs	r1, #128	; 0x80
 800246e:	0549      	lsls	r1, r1, #21
 8002470:	430a      	orrs	r2, r1
 8002472:	63da      	str	r2, [r3, #60]	; 0x3c
 8002474:	4ba8      	ldr	r3, [pc, #672]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 8002476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	055b      	lsls	r3, r3, #21
 800247c:	4013      	ands	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002482:	231f      	movs	r3, #31
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800248a:	4ba4      	ldr	r3, [pc, #656]	; (800271c <HAL_RCC_OscConfig+0x61c>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4013      	ands	r3, r2
 8002494:	d11a      	bne.n	80024cc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002496:	4ba1      	ldr	r3, [pc, #644]	; (800271c <HAL_RCC_OscConfig+0x61c>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4ba0      	ldr	r3, [pc, #640]	; (800271c <HAL_RCC_OscConfig+0x61c>)
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	0049      	lsls	r1, r1, #1
 80024a0:	430a      	orrs	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80024a4:	f7fe feb8 	bl	8001218 <HAL_GetTick>
 80024a8:	0003      	movs	r3, r0
 80024aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ae:	f7fe feb3 	bl	8001218 <HAL_GetTick>
 80024b2:	0002      	movs	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e127      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c0:	4b96      	ldr	r3, [pc, #600]	; (800271c <HAL_RCC_OscConfig+0x61c>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4013      	ands	r3, r2
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d106      	bne.n	80024e2 <HAL_RCC_OscConfig+0x3e2>
 80024d4:	4b90      	ldr	r3, [pc, #576]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 80024d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024d8:	4b8f      	ldr	r3, [pc, #572]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 80024da:	2101      	movs	r1, #1
 80024dc:	430a      	orrs	r2, r1
 80024de:	65da      	str	r2, [r3, #92]	; 0x5c
 80024e0:	e01c      	b.n	800251c <HAL_RCC_OscConfig+0x41c>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b05      	cmp	r3, #5
 80024e8:	d10c      	bne.n	8002504 <HAL_RCC_OscConfig+0x404>
 80024ea:	4b8b      	ldr	r3, [pc, #556]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 80024ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024ee:	4b8a      	ldr	r3, [pc, #552]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 80024f0:	2104      	movs	r1, #4
 80024f2:	430a      	orrs	r2, r1
 80024f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80024f6:	4b88      	ldr	r3, [pc, #544]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 80024f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024fa:	4b87      	ldr	r3, [pc, #540]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 80024fc:	2101      	movs	r1, #1
 80024fe:	430a      	orrs	r2, r1
 8002500:	65da      	str	r2, [r3, #92]	; 0x5c
 8002502:	e00b      	b.n	800251c <HAL_RCC_OscConfig+0x41c>
 8002504:	4b84      	ldr	r3, [pc, #528]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 8002506:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002508:	4b83      	ldr	r3, [pc, #524]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 800250a:	2101      	movs	r1, #1
 800250c:	438a      	bics	r2, r1
 800250e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002510:	4b81      	ldr	r3, [pc, #516]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 8002512:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002514:	4b80      	ldr	r3, [pc, #512]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 8002516:	2104      	movs	r1, #4
 8002518:	438a      	bics	r2, r1
 800251a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d014      	beq.n	800254e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7fe fe78 	bl	8001218 <HAL_GetTick>
 8002528:	0003      	movs	r3, r0
 800252a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252c:	e009      	b.n	8002542 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7fe fe73 	bl	8001218 <HAL_GetTick>
 8002532:	0002      	movs	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	4a79      	ldr	r2, [pc, #484]	; (8002720 <HAL_RCC_OscConfig+0x620>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e0e6      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002542:	4b75      	ldr	r3, [pc, #468]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 8002544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002546:	2202      	movs	r2, #2
 8002548:	4013      	ands	r3, r2
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x42e>
 800254c:	e013      	b.n	8002576 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254e:	f7fe fe63 	bl	8001218 <HAL_GetTick>
 8002552:	0003      	movs	r3, r0
 8002554:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002556:	e009      	b.n	800256c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002558:	f7fe fe5e 	bl	8001218 <HAL_GetTick>
 800255c:	0002      	movs	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	4a6f      	ldr	r2, [pc, #444]	; (8002720 <HAL_RCC_OscConfig+0x620>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e0d1      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800256c:	4b6a      	ldr	r3, [pc, #424]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 800256e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002570:	2202      	movs	r2, #2
 8002572:	4013      	ands	r3, r2
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002576:	231f      	movs	r3, #31
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d105      	bne.n	800258c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002580:	4b65      	ldr	r3, [pc, #404]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 8002582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002584:	4b64      	ldr	r3, [pc, #400]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 8002586:	4967      	ldr	r1, [pc, #412]	; (8002724 <HAL_RCC_OscConfig+0x624>)
 8002588:	400a      	ands	r2, r1
 800258a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d100      	bne.n	8002596 <HAL_RCC_OscConfig+0x496>
 8002594:	e0bb      	b.n	800270e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002596:	4b60      	ldr	r3, [pc, #384]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2238      	movs	r2, #56	; 0x38
 800259c:	4013      	ands	r3, r2
 800259e:	2b10      	cmp	r3, #16
 80025a0:	d100      	bne.n	80025a4 <HAL_RCC_OscConfig+0x4a4>
 80025a2:	e07b      	b.n	800269c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d156      	bne.n	800265a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ac:	4b5a      	ldr	r3, [pc, #360]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b59      	ldr	r3, [pc, #356]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 80025b2:	495d      	ldr	r1, [pc, #372]	; (8002728 <HAL_RCC_OscConfig+0x628>)
 80025b4:	400a      	ands	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7fe fe2e 	bl	8001218 <HAL_GetTick>
 80025bc:	0003      	movs	r3, r0
 80025be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c2:	f7fe fe29 	bl	8001218 <HAL_GetTick>
 80025c6:	0002      	movs	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e09d      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d4:	4b50      	ldr	r3, [pc, #320]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	049b      	lsls	r3, r3, #18
 80025dc:	4013      	ands	r3, r2
 80025de:	d1f0      	bne.n	80025c2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e0:	4b4d      	ldr	r3, [pc, #308]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4a51      	ldr	r2, [pc, #324]	; (800272c <HAL_RCC_OscConfig+0x62c>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	0019      	movs	r1, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1a      	ldr	r2, [r3, #32]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260c:	431a      	orrs	r2, r3
 800260e:	4b42      	ldr	r3, [pc, #264]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 8002610:	430a      	orrs	r2, r1
 8002612:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002614:	4b40      	ldr	r3, [pc, #256]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b3f      	ldr	r3, [pc, #252]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 800261a:	2180      	movs	r1, #128	; 0x80
 800261c:	0449      	lsls	r1, r1, #17
 800261e:	430a      	orrs	r2, r1
 8002620:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002622:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	4b3c      	ldr	r3, [pc, #240]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 8002628:	2180      	movs	r1, #128	; 0x80
 800262a:	0549      	lsls	r1, r1, #21
 800262c:	430a      	orrs	r2, r1
 800262e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7fe fdf2 	bl	8001218 <HAL_GetTick>
 8002634:	0003      	movs	r3, r0
 8002636:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263a:	f7fe fded 	bl	8001218 <HAL_GetTick>
 800263e:	0002      	movs	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e061      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800264c:	4b32      	ldr	r3, [pc, #200]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	049b      	lsls	r3, r3, #18
 8002654:	4013      	ands	r3, r2
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x53a>
 8002658:	e059      	b.n	800270e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265a:	4b2f      	ldr	r3, [pc, #188]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	4b2e      	ldr	r3, [pc, #184]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 8002660:	4931      	ldr	r1, [pc, #196]	; (8002728 <HAL_RCC_OscConfig+0x628>)
 8002662:	400a      	ands	r2, r1
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7fe fdd7 	bl	8001218 <HAL_GetTick>
 800266a:	0003      	movs	r3, r0
 800266c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe fdd2 	bl	8001218 <HAL_GetTick>
 8002674:	0002      	movs	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e046      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002682:	4b25      	ldr	r3, [pc, #148]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	2380      	movs	r3, #128	; 0x80
 8002688:	049b      	lsls	r3, r3, #18
 800268a:	4013      	ands	r3, r2
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800268e:	4b22      	ldr	r3, [pc, #136]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	4b21      	ldr	r3, [pc, #132]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 8002694:	4926      	ldr	r1, [pc, #152]	; (8002730 <HAL_RCC_OscConfig+0x630>)
 8002696:	400a      	ands	r2, r1
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	e038      	b.n	800270e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e033      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80026a8:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <HAL_RCC_OscConfig+0x618>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2203      	movs	r2, #3
 80026b2:	401a      	ands	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d126      	bne.n	800270a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2270      	movs	r2, #112	; 0x70
 80026c0:	401a      	ands	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d11f      	bne.n	800270a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	23fe      	movs	r3, #254	; 0xfe
 80026ce:	01db      	lsls	r3, r3, #7
 80026d0:	401a      	ands	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d116      	bne.n	800270a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	23f8      	movs	r3, #248	; 0xf8
 80026e0:	039b      	lsls	r3, r3, #14
 80026e2:	401a      	ands	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d10e      	bne.n	800270a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	23e0      	movs	r3, #224	; 0xe0
 80026f0:	051b      	lsls	r3, r3, #20
 80026f2:	401a      	ands	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d106      	bne.n	800270a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	0f5b      	lsrs	r3, r3, #29
 8002700:	075a      	lsls	r2, r3, #29
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d001      	beq.n	800270e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	0018      	movs	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	b008      	add	sp, #32
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000
 800271c:	40007000 	.word	0x40007000
 8002720:	00001388 	.word	0x00001388
 8002724:	efffffff 	.word	0xefffffff
 8002728:	feffffff 	.word	0xfeffffff
 800272c:	11c1808c 	.word	0x11c1808c
 8002730:	eefefffc 	.word	0xeefefffc

08002734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0e9      	b.n	800291c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002748:	4b76      	ldr	r3, [pc, #472]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2207      	movs	r2, #7
 800274e:	4013      	ands	r3, r2
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d91e      	bls.n	8002794 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b73      	ldr	r3, [pc, #460]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2207      	movs	r2, #7
 800275c:	4393      	bics	r3, r2
 800275e:	0019      	movs	r1, r3
 8002760:	4b70      	ldr	r3, [pc, #448]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002768:	f7fe fd56 	bl	8001218 <HAL_GetTick>
 800276c:	0003      	movs	r3, r0
 800276e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002770:	e009      	b.n	8002786 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002772:	f7fe fd51 	bl	8001218 <HAL_GetTick>
 8002776:	0002      	movs	r2, r0
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	4a6a      	ldr	r2, [pc, #424]	; (8002928 <HAL_RCC_ClockConfig+0x1f4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e0ca      	b.n	800291c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002786:	4b67      	ldr	r3, [pc, #412]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2207      	movs	r2, #7
 800278c:	4013      	ands	r3, r2
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d1ee      	bne.n	8002772 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2202      	movs	r2, #2
 800279a:	4013      	ands	r3, r2
 800279c:	d015      	beq.n	80027ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2204      	movs	r2, #4
 80027a4:	4013      	ands	r3, r2
 80027a6:	d006      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027a8:	4b60      	ldr	r3, [pc, #384]	; (800292c <HAL_RCC_ClockConfig+0x1f8>)
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	4b5f      	ldr	r3, [pc, #380]	; (800292c <HAL_RCC_ClockConfig+0x1f8>)
 80027ae:	21e0      	movs	r1, #224	; 0xe0
 80027b0:	01c9      	lsls	r1, r1, #7
 80027b2:	430a      	orrs	r2, r1
 80027b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b6:	4b5d      	ldr	r3, [pc, #372]	; (800292c <HAL_RCC_ClockConfig+0x1f8>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	4a5d      	ldr	r2, [pc, #372]	; (8002930 <HAL_RCC_ClockConfig+0x1fc>)
 80027bc:	4013      	ands	r3, r2
 80027be:	0019      	movs	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	4b59      	ldr	r3, [pc, #356]	; (800292c <HAL_RCC_ClockConfig+0x1f8>)
 80027c6:	430a      	orrs	r2, r1
 80027c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2201      	movs	r2, #1
 80027d0:	4013      	ands	r3, r2
 80027d2:	d057      	beq.n	8002884 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d107      	bne.n	80027ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027dc:	4b53      	ldr	r3, [pc, #332]	; (800292c <HAL_RCC_ClockConfig+0x1f8>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	2380      	movs	r3, #128	; 0x80
 80027e2:	029b      	lsls	r3, r3, #10
 80027e4:	4013      	ands	r3, r2
 80027e6:	d12b      	bne.n	8002840 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e097      	b.n	800291c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d107      	bne.n	8002804 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f4:	4b4d      	ldr	r3, [pc, #308]	; (800292c <HAL_RCC_ClockConfig+0x1f8>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	049b      	lsls	r3, r3, #18
 80027fc:	4013      	ands	r3, r2
 80027fe:	d11f      	bne.n	8002840 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e08b      	b.n	800291c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d107      	bne.n	800281c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800280c:	4b47      	ldr	r3, [pc, #284]	; (800292c <HAL_RCC_ClockConfig+0x1f8>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4013      	ands	r3, r2
 8002816:	d113      	bne.n	8002840 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e07f      	b.n	800291c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d106      	bne.n	8002832 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002824:	4b41      	ldr	r3, [pc, #260]	; (800292c <HAL_RCC_ClockConfig+0x1f8>)
 8002826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002828:	2202      	movs	r2, #2
 800282a:	4013      	ands	r3, r2
 800282c:	d108      	bne.n	8002840 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e074      	b.n	800291c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002832:	4b3e      	ldr	r3, [pc, #248]	; (800292c <HAL_RCC_ClockConfig+0x1f8>)
 8002834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002836:	2202      	movs	r2, #2
 8002838:	4013      	ands	r3, r2
 800283a:	d101      	bne.n	8002840 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e06d      	b.n	800291c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002840:	4b3a      	ldr	r3, [pc, #232]	; (800292c <HAL_RCC_ClockConfig+0x1f8>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2207      	movs	r2, #7
 8002846:	4393      	bics	r3, r2
 8002848:	0019      	movs	r1, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	4b37      	ldr	r3, [pc, #220]	; (800292c <HAL_RCC_ClockConfig+0x1f8>)
 8002850:	430a      	orrs	r2, r1
 8002852:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002854:	f7fe fce0 	bl	8001218 <HAL_GetTick>
 8002858:	0003      	movs	r3, r0
 800285a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285c:	e009      	b.n	8002872 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800285e:	f7fe fcdb 	bl	8001218 <HAL_GetTick>
 8002862:	0002      	movs	r2, r0
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	4a2f      	ldr	r2, [pc, #188]	; (8002928 <HAL_RCC_ClockConfig+0x1f4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e054      	b.n	800291c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	4b2e      	ldr	r3, [pc, #184]	; (800292c <HAL_RCC_ClockConfig+0x1f8>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2238      	movs	r2, #56	; 0x38
 8002878:	401a      	ands	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	429a      	cmp	r2, r3
 8002882:	d1ec      	bne.n	800285e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002884:	4b27      	ldr	r3, [pc, #156]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2207      	movs	r2, #7
 800288a:	4013      	ands	r3, r2
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d21e      	bcs.n	80028d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b24      	ldr	r3, [pc, #144]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2207      	movs	r2, #7
 8002898:	4393      	bics	r3, r2
 800289a:	0019      	movs	r1, r3
 800289c:	4b21      	ldr	r3, [pc, #132]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028a4:	f7fe fcb8 	bl	8001218 <HAL_GetTick>
 80028a8:	0003      	movs	r3, r0
 80028aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028ac:	e009      	b.n	80028c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ae:	f7fe fcb3 	bl	8001218 <HAL_GetTick>
 80028b2:	0002      	movs	r2, r0
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <HAL_RCC_ClockConfig+0x1f4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e02c      	b.n	800291c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028c2:	4b18      	ldr	r3, [pc, #96]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2207      	movs	r2, #7
 80028c8:	4013      	ands	r3, r2
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d1ee      	bne.n	80028ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2204      	movs	r2, #4
 80028d6:	4013      	ands	r3, r2
 80028d8:	d009      	beq.n	80028ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80028da:	4b14      	ldr	r3, [pc, #80]	; (800292c <HAL_RCC_ClockConfig+0x1f8>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	4a15      	ldr	r2, [pc, #84]	; (8002934 <HAL_RCC_ClockConfig+0x200>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	0019      	movs	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_RCC_ClockConfig+0x1f8>)
 80028ea:	430a      	orrs	r2, r1
 80028ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80028ee:	f000 f829 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 80028f2:	0001      	movs	r1, r0
 80028f4:	4b0d      	ldr	r3, [pc, #52]	; (800292c <HAL_RCC_ClockConfig+0x1f8>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	220f      	movs	r2, #15
 80028fc:	401a      	ands	r2, r3
 80028fe:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <HAL_RCC_ClockConfig+0x204>)
 8002900:	0092      	lsls	r2, r2, #2
 8002902:	58d3      	ldr	r3, [r2, r3]
 8002904:	221f      	movs	r2, #31
 8002906:	4013      	ands	r3, r2
 8002908:	000a      	movs	r2, r1
 800290a:	40da      	lsrs	r2, r3
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_RCC_ClockConfig+0x208>)
 800290e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_RCC_ClockConfig+0x20c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	0018      	movs	r0, r3
 8002916:	f7fe fc23 	bl	8001160 <HAL_InitTick>
 800291a:	0003      	movs	r3, r0
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	b004      	add	sp, #16
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40022000 	.word	0x40022000
 8002928:	00001388 	.word	0x00001388
 800292c:	40021000 	.word	0x40021000
 8002930:	fffff0ff 	.word	0xfffff0ff
 8002934:	ffff8fff 	.word	0xffff8fff
 8002938:	0800553c 	.word	0x0800553c
 800293c:	2000001c 	.word	0x2000001c
 8002940:	20000020 	.word	0x20000020

08002944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800294a:	4b3c      	ldr	r3, [pc, #240]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2238      	movs	r2, #56	; 0x38
 8002950:	4013      	ands	r3, r2
 8002952:	d10f      	bne.n	8002974 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002954:	4b39      	ldr	r3, [pc, #228]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	0adb      	lsrs	r3, r3, #11
 800295a:	2207      	movs	r2, #7
 800295c:	4013      	ands	r3, r2
 800295e:	2201      	movs	r2, #1
 8002960:	409a      	lsls	r2, r3
 8002962:	0013      	movs	r3, r2
 8002964:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002966:	6839      	ldr	r1, [r7, #0]
 8002968:	4835      	ldr	r0, [pc, #212]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xfc>)
 800296a:	f7fd fbd5 	bl	8000118 <__udivsi3>
 800296e:	0003      	movs	r3, r0
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	e05d      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002974:	4b31      	ldr	r3, [pc, #196]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2238      	movs	r2, #56	; 0x38
 800297a:	4013      	ands	r3, r2
 800297c:	2b08      	cmp	r3, #8
 800297e:	d102      	bne.n	8002986 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002980:	4b30      	ldr	r3, [pc, #192]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x100>)
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	e054      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002986:	4b2d      	ldr	r3, [pc, #180]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2238      	movs	r2, #56	; 0x38
 800298c:	4013      	ands	r3, r2
 800298e:	2b10      	cmp	r3, #16
 8002990:	d138      	bne.n	8002a04 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002992:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2203      	movs	r2, #3
 8002998:	4013      	ands	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800299c:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	2207      	movs	r2, #7
 80029a4:	4013      	ands	r3, r2
 80029a6:	3301      	adds	r3, #1
 80029a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d10d      	bne.n	80029cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	4824      	ldr	r0, [pc, #144]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x100>)
 80029b4:	f7fd fbb0 	bl	8000118 <__udivsi3>
 80029b8:	0003      	movs	r3, r0
 80029ba:	0019      	movs	r1, r3
 80029bc:	4b1f      	ldr	r3, [pc, #124]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	0a1b      	lsrs	r3, r3, #8
 80029c2:	227f      	movs	r2, #127	; 0x7f
 80029c4:	4013      	ands	r3, r2
 80029c6:	434b      	muls	r3, r1
 80029c8:	617b      	str	r3, [r7, #20]
        break;
 80029ca:	e00d      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	481c      	ldr	r0, [pc, #112]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xfc>)
 80029d0:	f7fd fba2 	bl	8000118 <__udivsi3>
 80029d4:	0003      	movs	r3, r0
 80029d6:	0019      	movs	r1, r3
 80029d8:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	227f      	movs	r2, #127	; 0x7f
 80029e0:	4013      	ands	r3, r2
 80029e2:	434b      	muls	r3, r1
 80029e4:	617b      	str	r3, [r7, #20]
        break;
 80029e6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80029e8:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	0f5b      	lsrs	r3, r3, #29
 80029ee:	2207      	movs	r2, #7
 80029f0:	4013      	ands	r3, r2
 80029f2:	3301      	adds	r3, #1
 80029f4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	6978      	ldr	r0, [r7, #20]
 80029fa:	f7fd fb8d 	bl	8000118 <__udivsi3>
 80029fe:	0003      	movs	r3, r0
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	e015      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a04:	4b0d      	ldr	r3, [pc, #52]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2238      	movs	r2, #56	; 0x38
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d103      	bne.n	8002a18 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002a10:	2380      	movs	r3, #128	; 0x80
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	e00b      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a18:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2238      	movs	r2, #56	; 0x38
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b18      	cmp	r3, #24
 8002a22:	d103      	bne.n	8002a2c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002a24:	23fa      	movs	r3, #250	; 0xfa
 8002a26:	01db      	lsls	r3, r3, #7
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	e001      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a30:	693b      	ldr	r3, [r7, #16]
}
 8002a32:	0018      	movs	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b006      	add	sp, #24
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	00f42400 	.word	0x00f42400
 8002a44:	007a1200 	.word	0x007a1200

08002a48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a4c:	4b02      	ldr	r3, [pc, #8]	; (8002a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	2000001c 	.word	0x2000001c

08002a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a5c:	b5b0      	push	{r4, r5, r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a60:	f7ff fff2 	bl	8002a48 <HAL_RCC_GetHCLKFreq>
 8002a64:	0004      	movs	r4, r0
 8002a66:	f7ff fb3f 	bl	80020e8 <LL_RCC_GetAPB1Prescaler>
 8002a6a:	0003      	movs	r3, r0
 8002a6c:	0b1a      	lsrs	r2, r3, #12
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a70:	0092      	lsls	r2, r2, #2
 8002a72:	58d3      	ldr	r3, [r2, r3]
 8002a74:	221f      	movs	r2, #31
 8002a76:	4013      	ands	r3, r2
 8002a78:	40dc      	lsrs	r4, r3
 8002a7a:	0023      	movs	r3, r4
}
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bdb0      	pop	{r4, r5, r7, pc}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	0800557c 	.word	0x0800557c

08002a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002a90:	2313      	movs	r3, #19
 8002a92:	18fb      	adds	r3, r7, r3
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a98:	2312      	movs	r3, #18
 8002a9a:	18fb      	adds	r3, r7, r3
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	2380      	movs	r3, #128	; 0x80
 8002aa6:	029b      	lsls	r3, r3, #10
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d100      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002aac:	e0a3      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aae:	2011      	movs	r0, #17
 8002ab0:	183b      	adds	r3, r7, r0
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab6:	4ba5      	ldr	r3, [pc, #660]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ab8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	055b      	lsls	r3, r3, #21
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d110      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac2:	4ba2      	ldr	r3, [pc, #648]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ac6:	4ba1      	ldr	r3, [pc, #644]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ac8:	2180      	movs	r1, #128	; 0x80
 8002aca:	0549      	lsls	r1, r1, #21
 8002acc:	430a      	orrs	r2, r1
 8002ace:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ad0:	4b9e      	ldr	r3, [pc, #632]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ad2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ade:	183b      	adds	r3, r7, r0
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ae4:	4b9a      	ldr	r3, [pc, #616]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b99      	ldr	r3, [pc, #612]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002aea:	2180      	movs	r1, #128	; 0x80
 8002aec:	0049      	lsls	r1, r1, #1
 8002aee:	430a      	orrs	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002af2:	f7fe fb91 	bl	8001218 <HAL_GetTick>
 8002af6:	0003      	movs	r3, r0
 8002af8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002afa:	e00b      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afc:	f7fe fb8c 	bl	8001218 <HAL_GetTick>
 8002b00:	0002      	movs	r2, r0
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d904      	bls.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002b0a:	2313      	movs	r3, #19
 8002b0c:	18fb      	adds	r3, r7, r3
 8002b0e:	2203      	movs	r2, #3
 8002b10:	701a      	strb	r2, [r3, #0]
        break;
 8002b12:	e005      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b14:	4b8e      	ldr	r3, [pc, #568]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d0ed      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002b20:	2313      	movs	r3, #19
 8002b22:	18fb      	adds	r3, r7, r3
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d154      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b2a:	4b88      	ldr	r3, [pc, #544]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b2e:	23c0      	movs	r3, #192	; 0xc0
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4013      	ands	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d019      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d014      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b46:	4b81      	ldr	r3, [pc, #516]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4a:	4a82      	ldr	r2, [pc, #520]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b50:	4b7e      	ldr	r3, [pc, #504]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b54:	4b7d      	ldr	r3, [pc, #500]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b56:	2180      	movs	r1, #128	; 0x80
 8002b58:	0249      	lsls	r1, r1, #9
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b5e:	4b7b      	ldr	r3, [pc, #492]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b62:	4b7a      	ldr	r3, [pc, #488]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b64:	497c      	ldr	r1, [pc, #496]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002b66:	400a      	ands	r2, r1
 8002b68:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b6a:	4b78      	ldr	r3, [pc, #480]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2201      	movs	r2, #1
 8002b74:	4013      	ands	r3, r2
 8002b76:	d016      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe fb4e 	bl	8001218 <HAL_GetTick>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b80:	e00c      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b82:	f7fe fb49 	bl	8001218 <HAL_GetTick>
 8002b86:	0002      	movs	r2, r0
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	4a73      	ldr	r2, [pc, #460]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d904      	bls.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002b92:	2313      	movs	r3, #19
 8002b94:	18fb      	adds	r3, r7, r3
 8002b96:	2203      	movs	r2, #3
 8002b98:	701a      	strb	r2, [r3, #0]
            break;
 8002b9a:	e004      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b9c:	4b6b      	ldr	r3, [pc, #428]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d0ed      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002ba6:	2313      	movs	r3, #19
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bb0:	4b66      	ldr	r3, [pc, #408]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	4a67      	ldr	r2, [pc, #412]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	0019      	movs	r1, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bbe:	4b63      	ldr	r3, [pc, #396]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bc4:	e00c      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bc6:	2312      	movs	r3, #18
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	2213      	movs	r2, #19
 8002bcc:	18ba      	adds	r2, r7, r2
 8002bce:	7812      	ldrb	r2, [r2, #0]
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	e005      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd4:	2312      	movs	r3, #18
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	2213      	movs	r2, #19
 8002bda:	18ba      	adds	r2, r7, r2
 8002bdc:	7812      	ldrb	r2, [r2, #0]
 8002bde:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002be0:	2311      	movs	r3, #17
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d105      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bea:	4b58      	ldr	r3, [pc, #352]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bee:	4b57      	ldr	r3, [pc, #348]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bf0:	495b      	ldr	r1, [pc, #364]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002bf2:	400a      	ands	r2, r1
 8002bf4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d009      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c00:	4b52      	ldr	r3, [pc, #328]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c04:	2203      	movs	r2, #3
 8002c06:	4393      	bics	r3, r2
 8002c08:	0019      	movs	r1, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	4b4f      	ldr	r3, [pc, #316]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c10:	430a      	orrs	r2, r1
 8002c12:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2210      	movs	r2, #16
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d009      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c1e:	4b4b      	ldr	r3, [pc, #300]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c22:	4a50      	ldr	r2, [pc, #320]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	0019      	movs	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	4b47      	ldr	r3, [pc, #284]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d009      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c3e:	4b43      	ldr	r3, [pc, #268]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c42:	4a49      	ldr	r2, [pc, #292]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	0019      	movs	r1, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	695a      	ldr	r2, [r3, #20]
 8002c4c:	4b3f      	ldr	r3, [pc, #252]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	2380      	movs	r3, #128	; 0x80
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d009      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c5e:	4b3b      	ldr	r3, [pc, #236]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c62:	4a42      	ldr	r2, [pc, #264]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	0019      	movs	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699a      	ldr	r2, [r3, #24]
 8002c6c:	4b37      	ldr	r3, [pc, #220]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2220      	movs	r2, #32
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d009      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c7c:	4b33      	ldr	r3, [pc, #204]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c80:	4a3b      	ldr	r2, [pc, #236]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	0019      	movs	r1, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	4b30      	ldr	r3, [pc, #192]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	01db      	lsls	r3, r3, #7
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d015      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c9c:	4b2b      	ldr	r3, [pc, #172]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	0899      	lsrs	r1, r3, #2
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69da      	ldr	r2, [r3, #28]
 8002ca8:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002caa:	430a      	orrs	r2, r1
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69da      	ldr	r2, [r3, #28]
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	05db      	lsls	r3, r3, #23
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d106      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002cba:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	4b23      	ldr	r3, [pc, #140]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cc0:	2180      	movs	r1, #128	; 0x80
 8002cc2:	0249      	lsls	r1, r1, #9
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	039b      	lsls	r3, r3, #14
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d016      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002cd4:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd8:	4a26      	ldr	r2, [pc, #152]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	0019      	movs	r1, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1a      	ldr	r2, [r3, #32]
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1a      	ldr	r2, [r3, #32]
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	03db      	lsls	r3, r3, #15
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d106      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002cf4:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cfa:	2180      	movs	r1, #128	; 0x80
 8002cfc:	0449      	lsls	r1, r1, #17
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	2380      	movs	r3, #128	; 0x80
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d016      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002d0e:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d12:	4a19      	ldr	r2, [pc, #100]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	0019      	movs	r1, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691a      	ldr	r2, [r3, #16]
 8002d26:	2380      	movs	r3, #128	; 0x80
 8002d28:	01db      	lsls	r3, r3, #7
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d106      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d2e:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d34:	2180      	movs	r1, #128	; 0x80
 8002d36:	0249      	lsls	r1, r1, #9
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002d3c:	2312      	movs	r3, #18
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	781b      	ldrb	r3, [r3, #0]
}
 8002d42:	0018      	movs	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b006      	add	sp, #24
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40007000 	.word	0x40007000
 8002d54:	fffffcff 	.word	0xfffffcff
 8002d58:	fffeffff 	.word	0xfffeffff
 8002d5c:	00001388 	.word	0x00001388
 8002d60:	efffffff 	.word	0xefffffff
 8002d64:	fffff3ff 	.word	0xfffff3ff
 8002d68:	fff3ffff 	.word	0xfff3ffff
 8002d6c:	ffcfffff 	.word	0xffcfffff
 8002d70:	ffffcfff 	.word	0xffffcfff
 8002d74:	ffbfffff 	.word	0xffbfffff
 8002d78:	ffff3fff 	.word	0xffff3fff

08002d7c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002d7c:	b5b0      	push	{r4, r5, r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d84:	230f      	movs	r3, #15
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d100      	bne.n	8002d94 <HAL_RTC_Init+0x18>
 8002d92:	e08c      	b.n	8002eae <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2229      	movs	r2, #41	; 0x29
 8002d98:	5c9b      	ldrb	r3, [r3, r2]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10b      	bne.n	8002db8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2228      	movs	r2, #40	; 0x28
 8002da4:	2100      	movs	r1, #0
 8002da6:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2288      	movs	r2, #136	; 0x88
 8002dac:	0212      	lsls	r2, r2, #8
 8002dae:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	0018      	movs	r0, r3
 8002db4:	f7fe f80c 	bl	8000dd0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2229      	movs	r2, #41	; 0x29
 8002dbc:	2102      	movs	r1, #2
 8002dbe:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	2210      	movs	r2, #16
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b10      	cmp	r3, #16
 8002dcc:	d062      	beq.n	8002e94 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	22ca      	movs	r2, #202	; 0xca
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2253      	movs	r2, #83	; 0x53
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002dde:	250f      	movs	r5, #15
 8002de0:	197c      	adds	r4, r7, r5
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f000 fcba 	bl	800375e <RTC_EnterInitMode>
 8002dea:	0003      	movs	r3, r0
 8002dec:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002dee:	0028      	movs	r0, r5
 8002df0:	183b      	adds	r3, r7, r0
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d12c      	bne.n	8002e52 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699a      	ldr	r2, [r3, #24]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	492e      	ldr	r1, [pc, #184]	; (8002ebc <HAL_RTC_Init+0x140>)
 8002e04:	400a      	ands	r2, r1
 8002e06:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6999      	ldr	r1, [r3, #24]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6912      	ldr	r2, [r2, #16]
 8002e2e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6919      	ldr	r1, [r3, #16]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	041a      	lsls	r2, r3, #16
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002e44:	183c      	adds	r4, r7, r0
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f000 fccb 	bl	80037e4 <RTC_ExitInitMode>
 8002e4e:	0003      	movs	r3, r0
 8002e50:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002e52:	230f      	movs	r3, #15
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d116      	bne.n	8002e8a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	00d2      	lsls	r2, r2, #3
 8002e68:	08d2      	lsrs	r2, r2, #3
 8002e6a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6999      	ldr	r1, [r3, #24]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	22ff      	movs	r2, #255	; 0xff
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24
 8002e92:	e003      	b.n	8002e9c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002e94:	230f      	movs	r3, #15
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002e9c:	230f      	movs	r3, #15
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d103      	bne.n	8002eae <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2229      	movs	r2, #41	; 0x29
 8002eaa:	2101      	movs	r1, #1
 8002eac:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002eae:	230f      	movs	r3, #15
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	781b      	ldrb	r3, [r3, #0]
}
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b004      	add	sp, #16
 8002eba:	bdb0      	pop	{r4, r5, r7, pc}
 8002ebc:	fb8fffbf 	.word	0xfb8fffbf

08002ec0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ec0:	b5b0      	push	{r4, r5, r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2228      	movs	r2, #40	; 0x28
 8002ed0:	5c9b      	ldrb	r3, [r3, r2]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_RTC_SetTime+0x1a>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e092      	b.n	8003000 <HAL_RTC_SetTime+0x140>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2228      	movs	r2, #40	; 0x28
 8002ede:	2101      	movs	r1, #1
 8002ee0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2229      	movs	r2, #41	; 0x29
 8002ee6:	2102      	movs	r1, #2
 8002ee8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	22ca      	movs	r2, #202	; 0xca
 8002ef0:	625a      	str	r2, [r3, #36]	; 0x24
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2253      	movs	r2, #83	; 0x53
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002efa:	2513      	movs	r5, #19
 8002efc:	197c      	adds	r4, r7, r5
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	0018      	movs	r0, r3
 8002f02:	f000 fc2c 	bl	800375e <RTC_EnterInitMode>
 8002f06:	0003      	movs	r3, r0
 8002f08:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002f0a:	197b      	adds	r3, r7, r5
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d162      	bne.n	8002fd8 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d125      	bne.n	8002f64 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2240      	movs	r2, #64	; 0x40
 8002f20:	4013      	ands	r3, r2
 8002f22:	d102      	bne.n	8002f2a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2200      	movs	r2, #0
 8002f28:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f000 fc9c 	bl	800386c <RTC_ByteToBcd2>
 8002f34:	0003      	movs	r3, r0
 8002f36:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	785b      	ldrb	r3, [r3, #1]
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f000 fc95 	bl	800386c <RTC_ByteToBcd2>
 8002f42:	0003      	movs	r3, r0
 8002f44:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f46:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	789b      	ldrb	r3, [r3, #2]
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f000 fc8d 	bl	800386c <RTC_ByteToBcd2>
 8002f52:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f54:	0022      	movs	r2, r4
 8002f56:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	78db      	ldrb	r3, [r3, #3]
 8002f5c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e017      	b.n	8002f94 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	2240      	movs	r2, #64	; 0x40
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d102      	bne.n	8002f76 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2200      	movs	r2, #0
 8002f74:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	785b      	ldrb	r3, [r3, #1]
 8002f80:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f82:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f88:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	78db      	ldrb	r3, [r3, #3]
 8002f8e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	491b      	ldr	r1, [pc, #108]	; (8003008 <HAL_RTC_SetTime+0x148>)
 8002f9c:	400a      	ands	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4918      	ldr	r1, [pc, #96]	; (800300c <HAL_RTC_SetTime+0x14c>)
 8002fac:	400a      	ands	r2, r1
 8002fae:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6999      	ldr	r1, [r3, #24]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002fc8:	2313      	movs	r3, #19
 8002fca:	18fc      	adds	r4, r7, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f000 fc08 	bl	80037e4 <RTC_ExitInitMode>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	22ff      	movs	r2, #255	; 0xff
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8002fe0:	2313      	movs	r3, #19
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d103      	bne.n	8002ff2 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2229      	movs	r2, #41	; 0x29
 8002fee:	2101      	movs	r1, #1
 8002ff0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2228      	movs	r2, #40	; 0x28
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	5499      	strb	r1, [r3, r2]

  return status;
 8002ffa:	2313      	movs	r3, #19
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	781b      	ldrb	r3, [r3, #0]
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b006      	add	sp, #24
 8003006:	bdb0      	pop	{r4, r5, r7, pc}
 8003008:	007f7f7f 	.word	0x007f7f7f
 800300c:	fffbffff 	.word	0xfffbffff

08003010 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	045b      	lsls	r3, r3, #17
 800302e:	0c5a      	lsrs	r2, r3, #17
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a22      	ldr	r2, [pc, #136]	; (80030c4 <HAL_RTC_GetTime+0xb4>)
 800303c:	4013      	ands	r3, r2
 800303e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	0c1b      	lsrs	r3, r3, #16
 8003044:	b2db      	uxtb	r3, r3
 8003046:	223f      	movs	r2, #63	; 0x3f
 8003048:	4013      	ands	r3, r2
 800304a:	b2da      	uxtb	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	b2db      	uxtb	r3, r3
 8003056:	227f      	movs	r2, #127	; 0x7f
 8003058:	4013      	ands	r3, r2
 800305a:	b2da      	uxtb	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	227f      	movs	r2, #127	; 0x7f
 8003066:	4013      	ands	r3, r2
 8003068:	b2da      	uxtb	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	0d9b      	lsrs	r3, r3, #22
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2201      	movs	r2, #1
 8003076:	4013      	ands	r3, r2
 8003078:	b2da      	uxtb	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d11a      	bne.n	80030ba <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	0018      	movs	r0, r3
 800308a:	f000 fc17 	bl	80038bc <RTC_Bcd2ToByte>
 800308e:	0003      	movs	r3, r0
 8003090:	001a      	movs	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	785b      	ldrb	r3, [r3, #1]
 800309a:	0018      	movs	r0, r3
 800309c:	f000 fc0e 	bl	80038bc <RTC_Bcd2ToByte>
 80030a0:	0003      	movs	r3, r0
 80030a2:	001a      	movs	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	789b      	ldrb	r3, [r3, #2]
 80030ac:	0018      	movs	r0, r3
 80030ae:	f000 fc05 	bl	80038bc <RTC_Bcd2ToByte>
 80030b2:	0003      	movs	r3, r0
 80030b4:	001a      	movs	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	b006      	add	sp, #24
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	007f7f7f 	.word	0x007f7f7f

080030c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80030c8:	b5b0      	push	{r4, r5, r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2228      	movs	r2, #40	; 0x28
 80030d8:	5c9b      	ldrb	r3, [r3, r2]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HAL_RTC_SetDate+0x1a>
 80030de:	2302      	movs	r3, #2
 80030e0:	e07e      	b.n	80031e0 <HAL_RTC_SetDate+0x118>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2228      	movs	r2, #40	; 0x28
 80030e6:	2101      	movs	r1, #1
 80030e8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2229      	movs	r2, #41	; 0x29
 80030ee:	2102      	movs	r1, #2
 80030f0:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10e      	bne.n	8003116 <HAL_RTC_SetDate+0x4e>
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	785b      	ldrb	r3, [r3, #1]
 80030fc:	001a      	movs	r2, r3
 80030fe:	2310      	movs	r3, #16
 8003100:	4013      	ands	r3, r2
 8003102:	d008      	beq.n	8003116 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	785b      	ldrb	r3, [r3, #1]
 8003108:	2210      	movs	r2, #16
 800310a:	4393      	bics	r3, r2
 800310c:	b2db      	uxtb	r3, r3
 800310e:	330a      	adds	r3, #10
 8003110:	b2da      	uxtb	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d11c      	bne.n	8003156 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	78db      	ldrb	r3, [r3, #3]
 8003120:	0018      	movs	r0, r3
 8003122:	f000 fba3 	bl	800386c <RTC_ByteToBcd2>
 8003126:	0003      	movs	r3, r0
 8003128:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	785b      	ldrb	r3, [r3, #1]
 800312e:	0018      	movs	r0, r3
 8003130:	f000 fb9c 	bl	800386c <RTC_ByteToBcd2>
 8003134:	0003      	movs	r3, r0
 8003136:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003138:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	789b      	ldrb	r3, [r3, #2]
 800313e:	0018      	movs	r0, r3
 8003140:	f000 fb94 	bl	800386c <RTC_ByteToBcd2>
 8003144:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003146:	0022      	movs	r2, r4
 8003148:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e00e      	b.n	8003174 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	78db      	ldrb	r3, [r3, #3]
 800315a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	785b      	ldrb	r3, [r3, #1]
 8003160:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003162:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003168:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	22ca      	movs	r2, #202	; 0xca
 800317a:	625a      	str	r2, [r3, #36]	; 0x24
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2253      	movs	r2, #83	; 0x53
 8003182:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003184:	2513      	movs	r5, #19
 8003186:	197c      	adds	r4, r7, r5
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	0018      	movs	r0, r3
 800318c:	f000 fae7 	bl	800375e <RTC_EnterInitMode>
 8003190:	0003      	movs	r3, r0
 8003192:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003194:	0028      	movs	r0, r5
 8003196:	183b      	adds	r3, r7, r0
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10c      	bne.n	80031b8 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4910      	ldr	r1, [pc, #64]	; (80031e8 <HAL_RTC_SetDate+0x120>)
 80031a6:	400a      	ands	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80031aa:	183c      	adds	r4, r7, r0
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	0018      	movs	r0, r3
 80031b0:	f000 fb18 	bl	80037e4 <RTC_ExitInitMode>
 80031b4:	0003      	movs	r3, r0
 80031b6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	22ff      	movs	r2, #255	; 0xff
 80031be:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80031c0:	2313      	movs	r3, #19
 80031c2:	18fb      	adds	r3, r7, r3
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d103      	bne.n	80031d2 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2229      	movs	r2, #41	; 0x29
 80031ce:	2101      	movs	r1, #1
 80031d0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2228      	movs	r2, #40	; 0x28
 80031d6:	2100      	movs	r1, #0
 80031d8:	5499      	strb	r1, [r3, r2]

  return status;
 80031da:	2313      	movs	r3, #19
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	781b      	ldrb	r3, [r3, #0]
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b006      	add	sp, #24
 80031e6:	bdb0      	pop	{r4, r5, r7, pc}
 80031e8:	00ffff3f 	.word	0x00ffff3f

080031ec <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4a21      	ldr	r2, [pc, #132]	; (8003284 <HAL_RTC_GetDate+0x98>)
 8003200:	4013      	ands	r3, r2
 8003202:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	0c1b      	lsrs	r3, r3, #16
 8003208:	b2da      	uxtb	r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	0a1b      	lsrs	r3, r3, #8
 8003212:	b2db      	uxtb	r3, r3
 8003214:	221f      	movs	r2, #31
 8003216:	4013      	ands	r3, r2
 8003218:	b2da      	uxtb	r2, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	223f      	movs	r2, #63	; 0x3f
 8003224:	4013      	ands	r3, r2
 8003226:	b2da      	uxtb	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	0b5b      	lsrs	r3, r3, #13
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2207      	movs	r2, #7
 8003234:	4013      	ands	r3, r2
 8003236:	b2da      	uxtb	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d11a      	bne.n	8003278 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	78db      	ldrb	r3, [r3, #3]
 8003246:	0018      	movs	r0, r3
 8003248:	f000 fb38 	bl	80038bc <RTC_Bcd2ToByte>
 800324c:	0003      	movs	r3, r0
 800324e:	001a      	movs	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	785b      	ldrb	r3, [r3, #1]
 8003258:	0018      	movs	r0, r3
 800325a:	f000 fb2f 	bl	80038bc <RTC_Bcd2ToByte>
 800325e:	0003      	movs	r3, r0
 8003260:	001a      	movs	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	789b      	ldrb	r3, [r3, #2]
 800326a:	0018      	movs	r0, r3
 800326c:	f000 fb26 	bl	80038bc <RTC_Bcd2ToByte>
 8003270:	0003      	movs	r3, r0
 8003272:	001a      	movs	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	0018      	movs	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	b006      	add	sp, #24
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	00ffff3f 	.word	0x00ffff3f

08003288 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b089      	sub	sp, #36	; 0x24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2228      	movs	r2, #40	; 0x28
 8003298:	5c9b      	ldrb	r3, [r3, r2]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_RTC_SetAlarm_IT+0x1a>
 800329e:	2302      	movs	r3, #2
 80032a0:	e127      	b.n	80034f2 <HAL_RTC_SetAlarm_IT+0x26a>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2228      	movs	r2, #40	; 0x28
 80032a6:	2101      	movs	r1, #1
 80032a8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2229      	movs	r2, #41	; 0x29
 80032ae:	2102      	movs	r1, #2
 80032b0:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d136      	bne.n	8003326 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2240      	movs	r2, #64	; 0x40
 80032c0:	4013      	ands	r3, r2
 80032c2:	d102      	bne.n	80032ca <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2200      	movs	r2, #0
 80032c8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	0018      	movs	r0, r3
 80032d0:	f000 facc 	bl	800386c <RTC_ByteToBcd2>
 80032d4:	0003      	movs	r3, r0
 80032d6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	785b      	ldrb	r3, [r3, #1]
 80032dc:	0018      	movs	r0, r3
 80032de:	f000 fac5 	bl	800386c <RTC_ByteToBcd2>
 80032e2:	0003      	movs	r3, r0
 80032e4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80032e6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	789b      	ldrb	r3, [r3, #2]
 80032ec:	0018      	movs	r0, r3
 80032ee:	f000 fabd 	bl	800386c <RTC_ByteToBcd2>
 80032f2:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80032f4:	0022      	movs	r2, r4
 80032f6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	78db      	ldrb	r3, [r3, #3]
 80032fc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80032fe:	431a      	orrs	r2, r3
 8003300:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2220      	movs	r2, #32
 8003306:	5c9b      	ldrb	r3, [r3, r2]
 8003308:	0018      	movs	r0, r3
 800330a:	f000 faaf 	bl	800386c <RTC_ByteToBcd2>
 800330e:	0003      	movs	r3, r0
 8003310:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003312:	0022      	movs	r2, r4
 8003314:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800331a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003320:	4313      	orrs	r3, r2
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	e022      	b.n	800336c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	2240      	movs	r2, #64	; 0x40
 800332e:	4013      	ands	r3, r2
 8003330:	d102      	bne.n	8003338 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2200      	movs	r2, #0
 8003336:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	785b      	ldrb	r3, [r3, #1]
 8003342:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003344:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800334a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	78db      	ldrb	r3, [r3, #3]
 8003350:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003352:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2120      	movs	r1, #32
 8003358:	5c5b      	ldrb	r3, [r3, r1]
 800335a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800335c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003362:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003368:	4313      	orrs	r3, r2
 800336a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	22ca      	movs	r2, #202	; 0xca
 800337e:	625a      	str	r2, [r3, #36]	; 0x24
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2253      	movs	r2, #83	; 0x53
 8003386:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	429a      	cmp	r2, r3
 8003392:	d14c      	bne.n	800342e <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699a      	ldr	r2, [r3, #24]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4957      	ldr	r1, [pc, #348]	; (80034fc <HAL_RTC_SetAlarm_IT+0x274>)
 80033a0:	400a      	ands	r2, r1
 80033a2:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2101      	movs	r1, #1
 80033b0:	430a      	orrs	r2, r1
 80033b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80033b4:	f7fd ff30 	bl	8001218 <HAL_GetTick>
 80033b8:	0003      	movs	r3, r0
 80033ba:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80033bc:	e016      	b.n	80033ec <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80033be:	f7fd ff2b 	bl	8001218 <HAL_GetTick>
 80033c2:	0002      	movs	r2, r0
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	1ad2      	subs	r2, r2, r3
 80033c8:	23fa      	movs	r3, #250	; 0xfa
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d90d      	bls.n	80033ec <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	22ff      	movs	r2, #255	; 0xff
 80033d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2229      	movs	r2, #41	; 0x29
 80033dc:	2103      	movs	r1, #3
 80033de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2228      	movs	r2, #40	; 0x28
 80033e4:	2100      	movs	r1, #0
 80033e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e082      	b.n	80034f2 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2201      	movs	r2, #1
 80033f4:	4013      	ands	r3, r2
 80033f6:	d0e2      	beq.n	80033be <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2180      	movs	r1, #128	; 0x80
 8003414:	0049      	lsls	r1, r1, #1
 8003416:	430a      	orrs	r2, r1
 8003418:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699a      	ldr	r2, [r3, #24]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2180      	movs	r1, #128	; 0x80
 8003426:	0149      	lsls	r1, r1, #5
 8003428:	430a      	orrs	r2, r1
 800342a:	619a      	str	r2, [r3, #24]
 800342c:	e04b      	b.n	80034c6 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699a      	ldr	r2, [r3, #24]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4931      	ldr	r1, [pc, #196]	; (8003500 <HAL_RTC_SetAlarm_IT+0x278>)
 800343a:	400a      	ands	r2, r1
 800343c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2102      	movs	r1, #2
 800344a:	430a      	orrs	r2, r1
 800344c:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800344e:	f7fd fee3 	bl	8001218 <HAL_GetTick>
 8003452:	0003      	movs	r3, r0
 8003454:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003456:	e016      	b.n	8003486 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003458:	f7fd fede 	bl	8001218 <HAL_GetTick>
 800345c:	0002      	movs	r2, r0
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	1ad2      	subs	r2, r2, r3
 8003462:	23fa      	movs	r3, #250	; 0xfa
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	429a      	cmp	r2, r3
 8003468:	d90d      	bls.n	8003486 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	22ff      	movs	r2, #255	; 0xff
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2229      	movs	r2, #41	; 0x29
 8003476:	2103      	movs	r1, #3
 8003478:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2228      	movs	r2, #40	; 0x28
 800347e:	2100      	movs	r1, #0
 8003480:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e035      	b.n	80034f2 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2202      	movs	r2, #2
 800348e:	4013      	ands	r3, r2
 8003490:	d0e2      	beq.n	8003458 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69fa      	ldr	r2, [r7, #28]
 8003498:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	699a      	ldr	r2, [r3, #24]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2180      	movs	r1, #128	; 0x80
 80034ae:	0089      	lsls	r1, r1, #2
 80034b0:	430a      	orrs	r2, r1
 80034b2:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2180      	movs	r1, #128	; 0x80
 80034c0:	0189      	lsls	r1, r1, #6
 80034c2:	430a      	orrs	r2, r1
 80034c4:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80034c6:	4a0f      	ldr	r2, [pc, #60]	; (8003504 <HAL_RTC_SetAlarm_IT+0x27c>)
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	58d3      	ldr	r3, [r2, r3]
 80034cc:	490d      	ldr	r1, [pc, #52]	; (8003504 <HAL_RTC_SetAlarm_IT+0x27c>)
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	0312      	lsls	r2, r2, #12
 80034d2:	4313      	orrs	r3, r2
 80034d4:	2280      	movs	r2, #128	; 0x80
 80034d6:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	22ff      	movs	r2, #255	; 0xff
 80034de:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2229      	movs	r2, #41	; 0x29
 80034e4:	2101      	movs	r1, #1
 80034e6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2228      	movs	r2, #40	; 0x28
 80034ec:	2100      	movs	r1, #0
 80034ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	0018      	movs	r0, r3
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b009      	add	sp, #36	; 0x24
 80034f8:	bd90      	pop	{r4, r7, pc}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	fffffeff 	.word	0xfffffeff
 8003500:	fffffdff 	.word	0xfffffdff
 8003504:	40021800 	.word	0x40021800

08003508 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	429a      	cmp	r2, r3
 800351e:	d144      	bne.n	80035aa <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	0052      	lsls	r2, r2, #1
 8003526:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	045b      	lsls	r3, r3, #17
 8003538:	0c5b      	lsrs	r3, r3, #17
 800353a:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	0c1b      	lsrs	r3, r3, #16
 8003540:	b2db      	uxtb	r3, r3
 8003542:	223f      	movs	r2, #63	; 0x3f
 8003544:	4013      	ands	r3, r2
 8003546:	b2da      	uxtb	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	0a1b      	lsrs	r3, r3, #8
 8003550:	b2db      	uxtb	r3, r3
 8003552:	227f      	movs	r2, #127	; 0x7f
 8003554:	4013      	ands	r3, r2
 8003556:	b2da      	uxtb	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	227f      	movs	r2, #127	; 0x7f
 8003562:	4013      	ands	r3, r2
 8003564:	b2da      	uxtb	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	0d9b      	lsrs	r3, r3, #22
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2201      	movs	r2, #1
 8003572:	4013      	ands	r3, r2
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	0e1b      	lsrs	r3, r3, #24
 8003584:	b2db      	uxtb	r3, r3
 8003586:	223f      	movs	r2, #63	; 0x3f
 8003588:	4013      	ands	r3, r2
 800358a:	b2d9      	uxtb	r1, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2220      	movs	r2, #32
 8003590:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	2380      	movs	r3, #128	; 0x80
 8003596:	05db      	lsls	r3, r3, #23
 8003598:	401a      	ands	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	4a3b      	ldr	r2, [pc, #236]	; (8003690 <HAL_RTC_GetAlarm+0x188>)
 80035a2:	401a      	ands	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	615a      	str	r2, [r3, #20]
 80035a8:	e043      	b.n	8003632 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2280      	movs	r2, #128	; 0x80
 80035ae:	0092      	lsls	r2, r2, #2
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b8:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c0:	045b      	lsls	r3, r3, #17
 80035c2:	0c5b      	lsrs	r3, r3, #17
 80035c4:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	0c1b      	lsrs	r3, r3, #16
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	223f      	movs	r2, #63	; 0x3f
 80035ce:	4013      	ands	r3, r2
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	0a1b      	lsrs	r3, r3, #8
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	227f      	movs	r2, #127	; 0x7f
 80035de:	4013      	ands	r3, r2
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	227f      	movs	r2, #127	; 0x7f
 80035ec:	4013      	ands	r3, r2
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	0d9b      	lsrs	r3, r3, #22
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2201      	movs	r2, #1
 80035fc:	4013      	ands	r3, r2
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	0e1b      	lsrs	r3, r3, #24
 800360e:	b2db      	uxtb	r3, r3
 8003610:	223f      	movs	r2, #63	; 0x3f
 8003612:	4013      	ands	r3, r2
 8003614:	b2d9      	uxtb	r1, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2220      	movs	r2, #32
 800361a:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	05db      	lsls	r3, r3, #23
 8003622:	401a      	ands	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	4a19      	ldr	r2, [pc, #100]	; (8003690 <HAL_RTC_GetAlarm+0x188>)
 800362c:	401a      	ands	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d125      	bne.n	8003684 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	0018      	movs	r0, r3
 800363e:	f000 f93d 	bl	80038bc <RTC_Bcd2ToByte>
 8003642:	0003      	movs	r3, r0
 8003644:	001a      	movs	r2, r3
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	785b      	ldrb	r3, [r3, #1]
 800364e:	0018      	movs	r0, r3
 8003650:	f000 f934 	bl	80038bc <RTC_Bcd2ToByte>
 8003654:	0003      	movs	r3, r0
 8003656:	001a      	movs	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	789b      	ldrb	r3, [r3, #2]
 8003660:	0018      	movs	r0, r3
 8003662:	f000 f92b 	bl	80038bc <RTC_Bcd2ToByte>
 8003666:	0003      	movs	r3, r0
 8003668:	001a      	movs	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2220      	movs	r2, #32
 8003672:	5c9b      	ldrb	r3, [r3, r2]
 8003674:	0018      	movs	r0, r3
 8003676:	f000 f921 	bl	80038bc <RTC_Bcd2ToByte>
 800367a:	0003      	movs	r3, r0
 800367c:	0019      	movs	r1, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2220      	movs	r2, #32
 8003682:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	0018      	movs	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	b006      	add	sp, #24
 800368c:	bd80      	pop	{r7, pc}
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	80808080 	.word	0x80808080

08003694 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	015b      	lsls	r3, r3, #5
 80036a6:	4013      	ands	r3, r2
 80036a8:	d011      	beq.n	80036ce <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b0:	2201      	movs	r2, #1
 80036b2:	4013      	ands	r3, r2
 80036b4:	d00b      	beq.n	80036ce <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2101      	movs	r1, #1
 80036c2:	430a      	orrs	r2, r1
 80036c4:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	0018      	movs	r0, r3
 80036ca:	f7fd fa0f 	bl	8000aec <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	2380      	movs	r3, #128	; 0x80
 80036d6:	019b      	lsls	r3, r3, #6
 80036d8:	4013      	ands	r3, r2
 80036da:	d011      	beq.n	8003700 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e2:	2202      	movs	r2, #2
 80036e4:	4013      	ands	r3, r2
 80036e6:	d00b      	beq.n	8003700 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2102      	movs	r1, #2
 80036f4:	430a      	orrs	r2, r1
 80036f6:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	0018      	movs	r0, r3
 80036fc:	f000 f8fb 	bl	80038f6 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2229      	movs	r2, #41	; 0x29
 8003704:	2101      	movs	r1, #1
 8003706:	5499      	strb	r1, [r3, r2]
}
 8003708:	46c0      	nop			; (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	21a0      	movs	r1, #160	; 0xa0
 8003724:	438a      	bics	r2, r1
 8003726:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003728:	f7fd fd76 	bl	8001218 <HAL_GetTick>
 800372c:	0003      	movs	r3, r0
 800372e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003730:	e00a      	b.n	8003748 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003732:	f7fd fd71 	bl	8001218 <HAL_GetTick>
 8003736:	0002      	movs	r2, r0
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	1ad2      	subs	r2, r2, r3
 800373c:	23fa      	movs	r3, #250	; 0xfa
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	429a      	cmp	r2, r3
 8003742:	d901      	bls.n	8003748 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e006      	b.n	8003756 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	4013      	ands	r3, r2
 8003752:	d0ee      	beq.n	8003732 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	0018      	movs	r0, r3
 8003758:	46bd      	mov	sp, r7
 800375a:	b004      	add	sp, #16
 800375c:	bd80      	pop	{r7, pc}

0800375e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8003766:	230f      	movs	r3, #15
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2240      	movs	r2, #64	; 0x40
 8003776:	4013      	ands	r3, r2
 8003778:	d12c      	bne.n	80037d4 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2180      	movs	r1, #128	; 0x80
 8003786:	430a      	orrs	r2, r1
 8003788:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800378a:	f7fd fd45 	bl	8001218 <HAL_GetTick>
 800378e:	0003      	movs	r3, r0
 8003790:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003792:	e014      	b.n	80037be <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003794:	f7fd fd40 	bl	8001218 <HAL_GetTick>
 8003798:	0002      	movs	r2, r0
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	1ad2      	subs	r2, r2, r3
 800379e:	200f      	movs	r0, #15
 80037a0:	183b      	adds	r3, r7, r0
 80037a2:	1839      	adds	r1, r7, r0
 80037a4:	7809      	ldrb	r1, [r1, #0]
 80037a6:	7019      	strb	r1, [r3, #0]
 80037a8:	23fa      	movs	r3, #250	; 0xfa
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d906      	bls.n	80037be <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80037b0:	183b      	adds	r3, r7, r0
 80037b2:	2203      	movs	r2, #3
 80037b4:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2229      	movs	r2, #41	; 0x29
 80037ba:	2103      	movs	r1, #3
 80037bc:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2240      	movs	r2, #64	; 0x40
 80037c6:	4013      	ands	r3, r2
 80037c8:	d104      	bne.n	80037d4 <RTC_EnterInitMode+0x76>
 80037ca:	230f      	movs	r3, #15
 80037cc:	18fb      	adds	r3, r7, r3
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d1df      	bne.n	8003794 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80037d4:	230f      	movs	r3, #15
 80037d6:	18fb      	adds	r3, r7, r3
 80037d8:	781b      	ldrb	r3, [r3, #0]
}
 80037da:	0018      	movs	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	b004      	add	sp, #16
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80037e4:	b590      	push	{r4, r7, lr}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037ec:	240f      	movs	r4, #15
 80037ee:	193b      	adds	r3, r7, r4
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80037f4:	4b1c      	ldr	r3, [pc, #112]	; (8003868 <RTC_ExitInitMode+0x84>)
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <RTC_ExitInitMode+0x84>)
 80037fa:	2180      	movs	r1, #128	; 0x80
 80037fc:	438a      	bics	r2, r1
 80037fe:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003800:	4b19      	ldr	r3, [pc, #100]	; (8003868 <RTC_ExitInitMode+0x84>)
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2220      	movs	r2, #32
 8003806:	4013      	ands	r3, r2
 8003808:	d10d      	bne.n	8003826 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	0018      	movs	r0, r3
 800380e:	f7ff ff7f 	bl	8003710 <HAL_RTC_WaitForSynchro>
 8003812:	1e03      	subs	r3, r0, #0
 8003814:	d021      	beq.n	800385a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2229      	movs	r2, #41	; 0x29
 800381a:	2103      	movs	r1, #3
 800381c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800381e:	193b      	adds	r3, r7, r4
 8003820:	2203      	movs	r2, #3
 8003822:	701a      	strb	r2, [r3, #0]
 8003824:	e019      	b.n	800385a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003826:	4b10      	ldr	r3, [pc, #64]	; (8003868 <RTC_ExitInitMode+0x84>)
 8003828:	699a      	ldr	r2, [r3, #24]
 800382a:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <RTC_ExitInitMode+0x84>)
 800382c:	2120      	movs	r1, #32
 800382e:	438a      	bics	r2, r1
 8003830:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	0018      	movs	r0, r3
 8003836:	f7ff ff6b 	bl	8003710 <HAL_RTC_WaitForSynchro>
 800383a:	1e03      	subs	r3, r0, #0
 800383c:	d007      	beq.n	800384e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2229      	movs	r2, #41	; 0x29
 8003842:	2103      	movs	r1, #3
 8003844:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003846:	230f      	movs	r3, #15
 8003848:	18fb      	adds	r3, r7, r3
 800384a:	2203      	movs	r2, #3
 800384c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800384e:	4b06      	ldr	r3, [pc, #24]	; (8003868 <RTC_ExitInitMode+0x84>)
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	4b05      	ldr	r3, [pc, #20]	; (8003868 <RTC_ExitInitMode+0x84>)
 8003854:	2120      	movs	r1, #32
 8003856:	430a      	orrs	r2, r1
 8003858:	619a      	str	r2, [r3, #24]
  }

  return status;
 800385a:	230f      	movs	r3, #15
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	781b      	ldrb	r3, [r3, #0]
}
 8003860:	0018      	movs	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	b005      	add	sp, #20
 8003866:	bd90      	pop	{r4, r7, pc}
 8003868:	40002800 	.word	0x40002800

0800386c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	0002      	movs	r2, r0
 8003874:	1dfb      	adds	r3, r7, #7
 8003876:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800387c:	230b      	movs	r3, #11
 800387e:	18fb      	adds	r3, r7, r3
 8003880:	1dfa      	adds	r2, r7, #7
 8003882:	7812      	ldrb	r2, [r2, #0]
 8003884:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8003886:	e008      	b.n	800389a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3301      	adds	r3, #1
 800388c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800388e:	220b      	movs	r2, #11
 8003890:	18bb      	adds	r3, r7, r2
 8003892:	18ba      	adds	r2, r7, r2
 8003894:	7812      	ldrb	r2, [r2, #0]
 8003896:	3a0a      	subs	r2, #10
 8003898:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800389a:	210b      	movs	r1, #11
 800389c:	187b      	adds	r3, r7, r1
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b09      	cmp	r3, #9
 80038a2:	d8f1      	bhi.n	8003888 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	187b      	adds	r3, r7, r1
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	b2db      	uxtb	r3, r3
}
 80038b4:	0018      	movs	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b004      	add	sp, #16
 80038ba:	bd80      	pop	{r7, pc}

080038bc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	0002      	movs	r2, r0
 80038c4:	1dfb      	adds	r3, r7, #7
 80038c6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80038c8:	1dfb      	adds	r3, r7, #7
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	001a      	movs	r2, r3
 80038d2:	0013      	movs	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	189b      	adds	r3, r3, r2
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	1dfb      	adds	r3, r7, #7
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	210f      	movs	r1, #15
 80038e6:	400b      	ands	r3, r1
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	18d3      	adds	r3, r2, r3
 80038ec:	b2db      	uxtb	r3, r3
}
 80038ee:	0018      	movs	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b004      	add	sp, #16
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	46bd      	mov	sp, r7
 8003902:	b002      	add	sp, #8
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e046      	b.n	80039a8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2288      	movs	r2, #136	; 0x88
 800391e:	589b      	ldr	r3, [r3, r2]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d107      	bne.n	8003934 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2284      	movs	r2, #132	; 0x84
 8003928:	2100      	movs	r1, #0
 800392a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	0018      	movs	r0, r3
 8003930:	f7fd fa94 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2288      	movs	r2, #136	; 0x88
 8003938:	2124      	movs	r1, #36	; 0x24
 800393a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2101      	movs	r1, #1
 8003948:	438a      	bics	r2, r1
 800394a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	0018      	movs	r0, r3
 8003950:	f000 f8cc 	bl	8003aec <UART_SetConfig>
 8003954:	0003      	movs	r3, r0
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e024      	b.n	80039a8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	0018      	movs	r0, r3
 800396a:	f000 fb37 	bl	8003fdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	490d      	ldr	r1, [pc, #52]	; (80039b0 <HAL_UART_Init+0xa8>)
 800397a:	400a      	ands	r2, r1
 800397c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	212a      	movs	r1, #42	; 0x2a
 800398a:	438a      	bics	r2, r1
 800398c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2101      	movs	r1, #1
 800399a:	430a      	orrs	r2, r1
 800399c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	0018      	movs	r0, r3
 80039a2:	f000 fbcf 	bl	8004144 <UART_CheckIdleState>
 80039a6:	0003      	movs	r3, r0
}
 80039a8:	0018      	movs	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b002      	add	sp, #8
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	ffffb7ff 	.word	0xffffb7ff

080039b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08a      	sub	sp, #40	; 0x28
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	1dbb      	adds	r3, r7, #6
 80039c2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2288      	movs	r2, #136	; 0x88
 80039c8:	589b      	ldr	r3, [r3, r2]
 80039ca:	2b20      	cmp	r3, #32
 80039cc:	d000      	beq.n	80039d0 <HAL_UART_Transmit+0x1c>
 80039ce:	e088      	b.n	8003ae2 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_UART_Transmit+0x2a>
 80039d6:	1dbb      	adds	r3, r7, #6
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e080      	b.n	8003ae4 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	2380      	movs	r3, #128	; 0x80
 80039e8:	015b      	lsls	r3, r3, #5
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d109      	bne.n	8003a02 <HAL_UART_Transmit+0x4e>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d105      	bne.n	8003a02 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2201      	movs	r2, #1
 80039fa:	4013      	ands	r3, r2
 80039fc:	d001      	beq.n	8003a02 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e070      	b.n	8003ae4 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2290      	movs	r2, #144	; 0x90
 8003a06:	2100      	movs	r1, #0
 8003a08:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2288      	movs	r2, #136	; 0x88
 8003a0e:	2121      	movs	r1, #33	; 0x21
 8003a10:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a12:	f7fd fc01 	bl	8001218 <HAL_GetTick>
 8003a16:	0003      	movs	r3, r0
 8003a18:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1dba      	adds	r2, r7, #6
 8003a1e:	2154      	movs	r1, #84	; 0x54
 8003a20:	8812      	ldrh	r2, [r2, #0]
 8003a22:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1dba      	adds	r2, r7, #6
 8003a28:	2156      	movs	r1, #86	; 0x56
 8003a2a:	8812      	ldrh	r2, [r2, #0]
 8003a2c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	2380      	movs	r3, #128	; 0x80
 8003a34:	015b      	lsls	r3, r3, #5
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d108      	bne.n	8003a4c <HAL_UART_Transmit+0x98>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d104      	bne.n	8003a4c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	e003      	b.n	8003a54 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a54:	e02c      	b.n	8003ab0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	0013      	movs	r3, r2
 8003a60:	2200      	movs	r2, #0
 8003a62:	2180      	movs	r1, #128	; 0x80
 8003a64:	f000 fbbc 	bl	80041e0 <UART_WaitOnFlagUntilTimeout>
 8003a68:	1e03      	subs	r3, r0, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e039      	b.n	8003ae4 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10b      	bne.n	8003a8e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	001a      	movs	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	05d2      	lsls	r2, r2, #23
 8003a82:	0dd2      	lsrs	r2, r2, #23
 8003a84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	3302      	adds	r3, #2
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	e007      	b.n	8003a9e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	781a      	ldrb	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2256      	movs	r2, #86	; 0x56
 8003aa2:	5a9b      	ldrh	r3, [r3, r2]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b299      	uxth	r1, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2256      	movs	r2, #86	; 0x56
 8003aae:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2256      	movs	r2, #86	; 0x56
 8003ab4:	5a9b      	ldrh	r3, [r3, r2]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1cc      	bne.n	8003a56 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	0013      	movs	r3, r2
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2140      	movs	r1, #64	; 0x40
 8003aca:	f000 fb89 	bl	80041e0 <UART_WaitOnFlagUntilTimeout>
 8003ace:	1e03      	subs	r3, r0, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e006      	b.n	8003ae4 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2288      	movs	r2, #136	; 0x88
 8003ada:	2120      	movs	r1, #32
 8003adc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e000      	b.n	8003ae4 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003ae2:	2302      	movs	r3, #2
  }
}
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b008      	add	sp, #32
 8003aea:	bd80      	pop	{r7, pc}

08003aec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aec:	b5b0      	push	{r4, r5, r7, lr}
 8003aee:	b090      	sub	sp, #64	; 0x40
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003af4:	231a      	movs	r3, #26
 8003af6:	2220      	movs	r2, #32
 8003af8:	189b      	adds	r3, r3, r2
 8003afa:	19db      	adds	r3, r3, r7
 8003afc:	2200      	movs	r2, #0
 8003afe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4ac4      	ldr	r2, [pc, #784]	; (8003e30 <UART_SetConfig+0x344>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	0019      	movs	r1, r3
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	4abf      	ldr	r2, [pc, #764]	; (8003e34 <UART_SetConfig+0x348>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	0018      	movs	r0, r3
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	68d9      	ldr	r1, [r3, #12]
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	0003      	movs	r3, r0
 8003b44:	430b      	orrs	r3, r1
 8003b46:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4ab9      	ldr	r2, [pc, #740]	; (8003e38 <UART_SetConfig+0x34c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d004      	beq.n	8003b62 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	4ab4      	ldr	r2, [pc, #720]	; (8003e3c <UART_SetConfig+0x350>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	0019      	movs	r1, r3
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b74:	430b      	orrs	r3, r1
 8003b76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	220f      	movs	r2, #15
 8003b80:	4393      	bics	r3, r2
 8003b82:	0018      	movs	r0, r3
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	430b      	orrs	r3, r1
 8003b90:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4aaa      	ldr	r2, [pc, #680]	; (8003e40 <UART_SetConfig+0x354>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d131      	bne.n	8003c00 <UART_SetConfig+0x114>
 8003b9c:	4ba9      	ldr	r3, [pc, #676]	; (8003e44 <UART_SetConfig+0x358>)
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d01d      	beq.n	8003be4 <UART_SetConfig+0xf8>
 8003ba8:	d823      	bhi.n	8003bf2 <UART_SetConfig+0x106>
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d00c      	beq.n	8003bc8 <UART_SetConfig+0xdc>
 8003bae:	d820      	bhi.n	8003bf2 <UART_SetConfig+0x106>
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <UART_SetConfig+0xce>
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d00e      	beq.n	8003bd6 <UART_SetConfig+0xea>
 8003bb8:	e01b      	b.n	8003bf2 <UART_SetConfig+0x106>
 8003bba:	231b      	movs	r3, #27
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	189b      	adds	r3, r3, r2
 8003bc0:	19db      	adds	r3, r3, r7
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	e071      	b.n	8003cac <UART_SetConfig+0x1c0>
 8003bc8:	231b      	movs	r3, #27
 8003bca:	2220      	movs	r2, #32
 8003bcc:	189b      	adds	r3, r3, r2
 8003bce:	19db      	adds	r3, r3, r7
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	701a      	strb	r2, [r3, #0]
 8003bd4:	e06a      	b.n	8003cac <UART_SetConfig+0x1c0>
 8003bd6:	231b      	movs	r3, #27
 8003bd8:	2220      	movs	r2, #32
 8003bda:	189b      	adds	r3, r3, r2
 8003bdc:	19db      	adds	r3, r3, r7
 8003bde:	2204      	movs	r2, #4
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	e063      	b.n	8003cac <UART_SetConfig+0x1c0>
 8003be4:	231b      	movs	r3, #27
 8003be6:	2220      	movs	r2, #32
 8003be8:	189b      	adds	r3, r3, r2
 8003bea:	19db      	adds	r3, r3, r7
 8003bec:	2208      	movs	r2, #8
 8003bee:	701a      	strb	r2, [r3, #0]
 8003bf0:	e05c      	b.n	8003cac <UART_SetConfig+0x1c0>
 8003bf2:	231b      	movs	r3, #27
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	189b      	adds	r3, r3, r2
 8003bf8:	19db      	adds	r3, r3, r7
 8003bfa:	2210      	movs	r2, #16
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	e055      	b.n	8003cac <UART_SetConfig+0x1c0>
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a90      	ldr	r2, [pc, #576]	; (8003e48 <UART_SetConfig+0x35c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d106      	bne.n	8003c18 <UART_SetConfig+0x12c>
 8003c0a:	231b      	movs	r3, #27
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	189b      	adds	r3, r3, r2
 8003c10:	19db      	adds	r3, r3, r7
 8003c12:	2200      	movs	r2, #0
 8003c14:	701a      	strb	r2, [r3, #0]
 8003c16:	e049      	b.n	8003cac <UART_SetConfig+0x1c0>
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a86      	ldr	r2, [pc, #536]	; (8003e38 <UART_SetConfig+0x34c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d13e      	bne.n	8003ca0 <UART_SetConfig+0x1b4>
 8003c22:	4b88      	ldr	r3, [pc, #544]	; (8003e44 <UART_SetConfig+0x358>)
 8003c24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c26:	23c0      	movs	r3, #192	; 0xc0
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	22c0      	movs	r2, #192	; 0xc0
 8003c2e:	0112      	lsls	r2, r2, #4
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d027      	beq.n	8003c84 <UART_SetConfig+0x198>
 8003c34:	22c0      	movs	r2, #192	; 0xc0
 8003c36:	0112      	lsls	r2, r2, #4
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d82a      	bhi.n	8003c92 <UART_SetConfig+0x1a6>
 8003c3c:	2280      	movs	r2, #128	; 0x80
 8003c3e:	0112      	lsls	r2, r2, #4
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d011      	beq.n	8003c68 <UART_SetConfig+0x17c>
 8003c44:	2280      	movs	r2, #128	; 0x80
 8003c46:	0112      	lsls	r2, r2, #4
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d822      	bhi.n	8003c92 <UART_SetConfig+0x1a6>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d004      	beq.n	8003c5a <UART_SetConfig+0x16e>
 8003c50:	2280      	movs	r2, #128	; 0x80
 8003c52:	00d2      	lsls	r2, r2, #3
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00e      	beq.n	8003c76 <UART_SetConfig+0x18a>
 8003c58:	e01b      	b.n	8003c92 <UART_SetConfig+0x1a6>
 8003c5a:	231b      	movs	r3, #27
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	189b      	adds	r3, r3, r2
 8003c60:	19db      	adds	r3, r3, r7
 8003c62:	2200      	movs	r2, #0
 8003c64:	701a      	strb	r2, [r3, #0]
 8003c66:	e021      	b.n	8003cac <UART_SetConfig+0x1c0>
 8003c68:	231b      	movs	r3, #27
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	189b      	adds	r3, r3, r2
 8003c6e:	19db      	adds	r3, r3, r7
 8003c70:	2202      	movs	r2, #2
 8003c72:	701a      	strb	r2, [r3, #0]
 8003c74:	e01a      	b.n	8003cac <UART_SetConfig+0x1c0>
 8003c76:	231b      	movs	r3, #27
 8003c78:	2220      	movs	r2, #32
 8003c7a:	189b      	adds	r3, r3, r2
 8003c7c:	19db      	adds	r3, r3, r7
 8003c7e:	2204      	movs	r2, #4
 8003c80:	701a      	strb	r2, [r3, #0]
 8003c82:	e013      	b.n	8003cac <UART_SetConfig+0x1c0>
 8003c84:	231b      	movs	r3, #27
 8003c86:	2220      	movs	r2, #32
 8003c88:	189b      	adds	r3, r3, r2
 8003c8a:	19db      	adds	r3, r3, r7
 8003c8c:	2208      	movs	r2, #8
 8003c8e:	701a      	strb	r2, [r3, #0]
 8003c90:	e00c      	b.n	8003cac <UART_SetConfig+0x1c0>
 8003c92:	231b      	movs	r3, #27
 8003c94:	2220      	movs	r2, #32
 8003c96:	189b      	adds	r3, r3, r2
 8003c98:	19db      	adds	r3, r3, r7
 8003c9a:	2210      	movs	r2, #16
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e005      	b.n	8003cac <UART_SetConfig+0x1c0>
 8003ca0:	231b      	movs	r3, #27
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	189b      	adds	r3, r3, r2
 8003ca6:	19db      	adds	r3, r3, r7
 8003ca8:	2210      	movs	r2, #16
 8003caa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a61      	ldr	r2, [pc, #388]	; (8003e38 <UART_SetConfig+0x34c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d000      	beq.n	8003cb8 <UART_SetConfig+0x1cc>
 8003cb6:	e092      	b.n	8003dde <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cb8:	231b      	movs	r3, #27
 8003cba:	2220      	movs	r2, #32
 8003cbc:	189b      	adds	r3, r3, r2
 8003cbe:	19db      	adds	r3, r3, r7
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d015      	beq.n	8003cf2 <UART_SetConfig+0x206>
 8003cc6:	dc18      	bgt.n	8003cfa <UART_SetConfig+0x20e>
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d00d      	beq.n	8003ce8 <UART_SetConfig+0x1fc>
 8003ccc:	dc15      	bgt.n	8003cfa <UART_SetConfig+0x20e>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <UART_SetConfig+0x1ec>
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d005      	beq.n	8003ce2 <UART_SetConfig+0x1f6>
 8003cd6:	e010      	b.n	8003cfa <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cd8:	f7fe fec0 	bl	8002a5c <HAL_RCC_GetPCLK1Freq>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ce0:	e014      	b.n	8003d0c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce2:	4b5a      	ldr	r3, [pc, #360]	; (8003e4c <UART_SetConfig+0x360>)
 8003ce4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ce6:	e011      	b.n	8003d0c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ce8:	f7fe fe2c 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8003cec:	0003      	movs	r3, r0
 8003cee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cf0:	e00c      	b.n	8003d0c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cf2:	2380      	movs	r3, #128	; 0x80
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cf8:	e008      	b.n	8003d0c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003cfe:	231a      	movs	r3, #26
 8003d00:	2220      	movs	r2, #32
 8003d02:	189b      	adds	r3, r3, r2
 8003d04:	19db      	adds	r3, r3, r7
 8003d06:	2201      	movs	r2, #1
 8003d08:	701a      	strb	r2, [r3, #0]
        break;
 8003d0a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d100      	bne.n	8003d14 <UART_SetConfig+0x228>
 8003d12:	e147      	b.n	8003fa4 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d18:	4b4d      	ldr	r3, [pc, #308]	; (8003e50 <UART_SetConfig+0x364>)
 8003d1a:	0052      	lsls	r2, r2, #1
 8003d1c:	5ad3      	ldrh	r3, [r2, r3]
 8003d1e:	0019      	movs	r1, r3
 8003d20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003d22:	f7fc f9f9 	bl	8000118 <__udivsi3>
 8003d26:	0003      	movs	r3, r0
 8003d28:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	0013      	movs	r3, r2
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	189b      	adds	r3, r3, r2
 8003d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d305      	bcc.n	8003d46 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d906      	bls.n	8003d54 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8003d46:	231a      	movs	r3, #26
 8003d48:	2220      	movs	r2, #32
 8003d4a:	189b      	adds	r3, r3, r2
 8003d4c:	19db      	adds	r3, r3, r7
 8003d4e:	2201      	movs	r2, #1
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	e127      	b.n	8003fa4 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d56:	61bb      	str	r3, [r7, #24]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61fb      	str	r3, [r7, #28]
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d60:	4b3b      	ldr	r3, [pc, #236]	; (8003e50 <UART_SetConfig+0x364>)
 8003d62:	0052      	lsls	r2, r2, #1
 8003d64:	5ad3      	ldrh	r3, [r2, r3]
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	69b8      	ldr	r0, [r7, #24]
 8003d72:	69f9      	ldr	r1, [r7, #28]
 8003d74:	f7fc fa5c 	bl	8000230 <__aeabi_uldivmod>
 8003d78:	0002      	movs	r2, r0
 8003d7a:	000b      	movs	r3, r1
 8003d7c:	0e11      	lsrs	r1, r2, #24
 8003d7e:	021d      	lsls	r5, r3, #8
 8003d80:	430d      	orrs	r5, r1
 8003d82:	0214      	lsls	r4, r2, #8
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	085b      	lsrs	r3, r3, #1
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	68b8      	ldr	r0, [r7, #8]
 8003d92:	68f9      	ldr	r1, [r7, #12]
 8003d94:	1900      	adds	r0, r0, r4
 8003d96:	4169      	adcs	r1, r5
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f7fc fa43 	bl	8000230 <__aeabi_uldivmod>
 8003daa:	0002      	movs	r2, r0
 8003dac:	000b      	movs	r3, r1
 8003dae:	0013      	movs	r3, r2
 8003db0:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003db4:	23c0      	movs	r3, #192	; 0xc0
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d309      	bcc.n	8003dd0 <UART_SetConfig+0x2e4>
 8003dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	035b      	lsls	r3, r3, #13
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d204      	bcs.n	8003dd0 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dcc:	60da      	str	r2, [r3, #12]
 8003dce:	e0e9      	b.n	8003fa4 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8003dd0:	231a      	movs	r3, #26
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	189b      	adds	r3, r3, r2
 8003dd6:	19db      	adds	r3, r3, r7
 8003dd8:	2201      	movs	r2, #1
 8003dda:	701a      	strb	r2, [r3, #0]
 8003ddc:	e0e2      	b.n	8003fa4 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	69da      	ldr	r2, [r3, #28]
 8003de2:	2380      	movs	r3, #128	; 0x80
 8003de4:	021b      	lsls	r3, r3, #8
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d000      	beq.n	8003dec <UART_SetConfig+0x300>
 8003dea:	e083      	b.n	8003ef4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003dec:	231b      	movs	r3, #27
 8003dee:	2220      	movs	r2, #32
 8003df0:	189b      	adds	r3, r3, r2
 8003df2:	19db      	adds	r3, r3, r7
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d015      	beq.n	8003e26 <UART_SetConfig+0x33a>
 8003dfa:	dc2b      	bgt.n	8003e54 <UART_SetConfig+0x368>
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d00d      	beq.n	8003e1c <UART_SetConfig+0x330>
 8003e00:	dc28      	bgt.n	8003e54 <UART_SetConfig+0x368>
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <UART_SetConfig+0x320>
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d005      	beq.n	8003e16 <UART_SetConfig+0x32a>
 8003e0a:	e023      	b.n	8003e54 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e0c:	f7fe fe26 	bl	8002a5c <HAL_RCC_GetPCLK1Freq>
 8003e10:	0003      	movs	r3, r0
 8003e12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e14:	e027      	b.n	8003e66 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e16:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <UART_SetConfig+0x360>)
 8003e18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e1a:	e024      	b.n	8003e66 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e1c:	f7fe fd92 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8003e20:	0003      	movs	r3, r0
 8003e22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e24:	e01f      	b.n	8003e66 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e26:	2380      	movs	r3, #128	; 0x80
 8003e28:	021b      	lsls	r3, r3, #8
 8003e2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e2c:	e01b      	b.n	8003e66 <UART_SetConfig+0x37a>
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	cfff69f3 	.word	0xcfff69f3
 8003e34:	ffffcfff 	.word	0xffffcfff
 8003e38:	40008000 	.word	0x40008000
 8003e3c:	11fff4ff 	.word	0x11fff4ff
 8003e40:	40013800 	.word	0x40013800
 8003e44:	40021000 	.word	0x40021000
 8003e48:	40004400 	.word	0x40004400
 8003e4c:	00f42400 	.word	0x00f42400
 8003e50:	0800559c 	.word	0x0800559c
      default:
        pclk = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003e58:	231a      	movs	r3, #26
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	189b      	adds	r3, r3, r2
 8003e5e:	19db      	adds	r3, r3, r7
 8003e60:	2201      	movs	r2, #1
 8003e62:	701a      	strb	r2, [r3, #0]
        break;
 8003e64:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d100      	bne.n	8003e6e <UART_SetConfig+0x382>
 8003e6c:	e09a      	b.n	8003fa4 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e72:	4b58      	ldr	r3, [pc, #352]	; (8003fd4 <UART_SetConfig+0x4e8>)
 8003e74:	0052      	lsls	r2, r2, #1
 8003e76:	5ad3      	ldrh	r3, [r2, r3]
 8003e78:	0019      	movs	r1, r3
 8003e7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003e7c:	f7fc f94c 	bl	8000118 <__udivsi3>
 8003e80:	0003      	movs	r3, r0
 8003e82:	005a      	lsls	r2, r3, #1
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	085b      	lsrs	r3, r3, #1
 8003e8a:	18d2      	adds	r2, r2, r3
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	0019      	movs	r1, r3
 8003e92:	0010      	movs	r0, r2
 8003e94:	f7fc f940 	bl	8000118 <__udivsi3>
 8003e98:	0003      	movs	r3, r0
 8003e9a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	2b0f      	cmp	r3, #15
 8003ea0:	d921      	bls.n	8003ee6 <UART_SetConfig+0x3fa>
 8003ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	025b      	lsls	r3, r3, #9
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d21c      	bcs.n	8003ee6 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	200e      	movs	r0, #14
 8003eb2:	2420      	movs	r4, #32
 8003eb4:	1903      	adds	r3, r0, r4
 8003eb6:	19db      	adds	r3, r3, r7
 8003eb8:	210f      	movs	r1, #15
 8003eba:	438a      	bics	r2, r1
 8003ebc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	085b      	lsrs	r3, r3, #1
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2207      	movs	r2, #7
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	b299      	uxth	r1, r3
 8003eca:	1903      	adds	r3, r0, r4
 8003ecc:	19db      	adds	r3, r3, r7
 8003ece:	1902      	adds	r2, r0, r4
 8003ed0:	19d2      	adds	r2, r2, r7
 8003ed2:	8812      	ldrh	r2, [r2, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	1902      	adds	r2, r0, r4
 8003ede:	19d2      	adds	r2, r2, r7
 8003ee0:	8812      	ldrh	r2, [r2, #0]
 8003ee2:	60da      	str	r2, [r3, #12]
 8003ee4:	e05e      	b.n	8003fa4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003ee6:	231a      	movs	r3, #26
 8003ee8:	2220      	movs	r2, #32
 8003eea:	189b      	adds	r3, r3, r2
 8003eec:	19db      	adds	r3, r3, r7
 8003eee:	2201      	movs	r2, #1
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	e057      	b.n	8003fa4 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ef4:	231b      	movs	r3, #27
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	189b      	adds	r3, r3, r2
 8003efa:	19db      	adds	r3, r3, r7
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d015      	beq.n	8003f2e <UART_SetConfig+0x442>
 8003f02:	dc18      	bgt.n	8003f36 <UART_SetConfig+0x44a>
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d00d      	beq.n	8003f24 <UART_SetConfig+0x438>
 8003f08:	dc15      	bgt.n	8003f36 <UART_SetConfig+0x44a>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <UART_SetConfig+0x428>
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d005      	beq.n	8003f1e <UART_SetConfig+0x432>
 8003f12:	e010      	b.n	8003f36 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f14:	f7fe fda2 	bl	8002a5c <HAL_RCC_GetPCLK1Freq>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f1c:	e014      	b.n	8003f48 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f1e:	4b2e      	ldr	r3, [pc, #184]	; (8003fd8 <UART_SetConfig+0x4ec>)
 8003f20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f22:	e011      	b.n	8003f48 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f24:	f7fe fd0e 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8003f28:	0003      	movs	r3, r0
 8003f2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f2c:	e00c      	b.n	8003f48 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2e:	2380      	movs	r3, #128	; 0x80
 8003f30:	021b      	lsls	r3, r3, #8
 8003f32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f34:	e008      	b.n	8003f48 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003f3a:	231a      	movs	r3, #26
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	189b      	adds	r3, r3, r2
 8003f40:	19db      	adds	r3, r3, r7
 8003f42:	2201      	movs	r2, #1
 8003f44:	701a      	strb	r2, [r3, #0]
        break;
 8003f46:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d02a      	beq.n	8003fa4 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f52:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <UART_SetConfig+0x4e8>)
 8003f54:	0052      	lsls	r2, r2, #1
 8003f56:	5ad3      	ldrh	r3, [r2, r3]
 8003f58:	0019      	movs	r1, r3
 8003f5a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f5c:	f7fc f8dc 	bl	8000118 <__udivsi3>
 8003f60:	0003      	movs	r3, r0
 8003f62:	001a      	movs	r2, r3
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	18d2      	adds	r2, r2, r3
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	0019      	movs	r1, r3
 8003f72:	0010      	movs	r0, r2
 8003f74:	f7fc f8d0 	bl	8000118 <__udivsi3>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	2b0f      	cmp	r3, #15
 8003f80:	d90a      	bls.n	8003f98 <UART_SetConfig+0x4ac>
 8003f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f84:	2380      	movs	r3, #128	; 0x80
 8003f86:	025b      	lsls	r3, r3, #9
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d205      	bcs.n	8003f98 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60da      	str	r2, [r3, #12]
 8003f96:	e005      	b.n	8003fa4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003f98:	231a      	movs	r3, #26
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	189b      	adds	r3, r3, r2
 8003f9e:	19db      	adds	r3, r3, r7
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	226a      	movs	r2, #106	; 0x6a
 8003fa8:	2101      	movs	r1, #1
 8003faa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	2268      	movs	r2, #104	; 0x68
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003fc0:	231a      	movs	r3, #26
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	189b      	adds	r3, r3, r2
 8003fc6:	19db      	adds	r3, r3, r7
 8003fc8:	781b      	ldrb	r3, [r3, #0]
}
 8003fca:	0018      	movs	r0, r3
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b010      	add	sp, #64	; 0x40
 8003fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	0800559c 	.word	0x0800559c
 8003fd8:	00f42400 	.word	0x00f42400

08003fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	2201      	movs	r2, #1
 8003fea:	4013      	ands	r3, r2
 8003fec:	d00b      	beq.n	8004006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4a4a      	ldr	r2, [pc, #296]	; (8004120 <UART_AdvFeatureConfig+0x144>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	0019      	movs	r1, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	2202      	movs	r2, #2
 800400c:	4013      	ands	r3, r2
 800400e:	d00b      	beq.n	8004028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	4a43      	ldr	r2, [pc, #268]	; (8004124 <UART_AdvFeatureConfig+0x148>)
 8004018:	4013      	ands	r3, r2
 800401a:	0019      	movs	r1, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	2204      	movs	r2, #4
 800402e:	4013      	ands	r3, r2
 8004030:	d00b      	beq.n	800404a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4a3b      	ldr	r2, [pc, #236]	; (8004128 <UART_AdvFeatureConfig+0x14c>)
 800403a:	4013      	ands	r3, r2
 800403c:	0019      	movs	r1, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404e:	2208      	movs	r2, #8
 8004050:	4013      	ands	r3, r2
 8004052:	d00b      	beq.n	800406c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	4a34      	ldr	r2, [pc, #208]	; (800412c <UART_AdvFeatureConfig+0x150>)
 800405c:	4013      	ands	r3, r2
 800405e:	0019      	movs	r1, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004070:	2210      	movs	r2, #16
 8004072:	4013      	ands	r3, r2
 8004074:	d00b      	beq.n	800408e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	4a2c      	ldr	r2, [pc, #176]	; (8004130 <UART_AdvFeatureConfig+0x154>)
 800407e:	4013      	ands	r3, r2
 8004080:	0019      	movs	r1, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	2220      	movs	r2, #32
 8004094:	4013      	ands	r3, r2
 8004096:	d00b      	beq.n	80040b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	4a25      	ldr	r2, [pc, #148]	; (8004134 <UART_AdvFeatureConfig+0x158>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	0019      	movs	r1, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b4:	2240      	movs	r2, #64	; 0x40
 80040b6:	4013      	ands	r3, r2
 80040b8:	d01d      	beq.n	80040f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	4a1d      	ldr	r2, [pc, #116]	; (8004138 <UART_AdvFeatureConfig+0x15c>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	0019      	movs	r1, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040d6:	2380      	movs	r3, #128	; 0x80
 80040d8:	035b      	lsls	r3, r3, #13
 80040da:	429a      	cmp	r2, r3
 80040dc:	d10b      	bne.n	80040f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	4a15      	ldr	r2, [pc, #84]	; (800413c <UART_AdvFeatureConfig+0x160>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	0019      	movs	r1, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fa:	2280      	movs	r2, #128	; 0x80
 80040fc:	4013      	ands	r3, r2
 80040fe:	d00b      	beq.n	8004118 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	4a0e      	ldr	r2, [pc, #56]	; (8004140 <UART_AdvFeatureConfig+0x164>)
 8004108:	4013      	ands	r3, r2
 800410a:	0019      	movs	r1, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	605a      	str	r2, [r3, #4]
  }
}
 8004118:	46c0      	nop			; (mov r8, r8)
 800411a:	46bd      	mov	sp, r7
 800411c:	b002      	add	sp, #8
 800411e:	bd80      	pop	{r7, pc}
 8004120:	fffdffff 	.word	0xfffdffff
 8004124:	fffeffff 	.word	0xfffeffff
 8004128:	fffbffff 	.word	0xfffbffff
 800412c:	ffff7fff 	.word	0xffff7fff
 8004130:	ffffefff 	.word	0xffffefff
 8004134:	ffffdfff 	.word	0xffffdfff
 8004138:	ffefffff 	.word	0xffefffff
 800413c:	ff9fffff 	.word	0xff9fffff
 8004140:	fff7ffff 	.word	0xfff7ffff

08004144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af02      	add	r7, sp, #8
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2290      	movs	r2, #144	; 0x90
 8004150:	2100      	movs	r1, #0
 8004152:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004154:	f7fd f860 	bl	8001218 <HAL_GetTick>
 8004158:	0003      	movs	r3, r0
 800415a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2208      	movs	r2, #8
 8004164:	4013      	ands	r3, r2
 8004166:	2b08      	cmp	r3, #8
 8004168:	d10c      	bne.n	8004184 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2280      	movs	r2, #128	; 0x80
 800416e:	0391      	lsls	r1, r2, #14
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4a1a      	ldr	r2, [pc, #104]	; (80041dc <UART_CheckIdleState+0x98>)
 8004174:	9200      	str	r2, [sp, #0]
 8004176:	2200      	movs	r2, #0
 8004178:	f000 f832 	bl	80041e0 <UART_WaitOnFlagUntilTimeout>
 800417c:	1e03      	subs	r3, r0, #0
 800417e:	d001      	beq.n	8004184 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e026      	b.n	80041d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2204      	movs	r2, #4
 800418c:	4013      	ands	r3, r2
 800418e:	2b04      	cmp	r3, #4
 8004190:	d10c      	bne.n	80041ac <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2280      	movs	r2, #128	; 0x80
 8004196:	03d1      	lsls	r1, r2, #15
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	4a10      	ldr	r2, [pc, #64]	; (80041dc <UART_CheckIdleState+0x98>)
 800419c:	9200      	str	r2, [sp, #0]
 800419e:	2200      	movs	r2, #0
 80041a0:	f000 f81e 	bl	80041e0 <UART_WaitOnFlagUntilTimeout>
 80041a4:	1e03      	subs	r3, r0, #0
 80041a6:	d001      	beq.n	80041ac <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e012      	b.n	80041d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2288      	movs	r2, #136	; 0x88
 80041b0:	2120      	movs	r1, #32
 80041b2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	228c      	movs	r2, #140	; 0x8c
 80041b8:	2120      	movs	r1, #32
 80041ba:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2284      	movs	r2, #132	; 0x84
 80041cc:	2100      	movs	r1, #0
 80041ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	0018      	movs	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b004      	add	sp, #16
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	01ffffff 	.word	0x01ffffff

080041e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b094      	sub	sp, #80	; 0x50
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	1dfb      	adds	r3, r7, #7
 80041ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f0:	e0a7      	b.n	8004342 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041f4:	3301      	adds	r3, #1
 80041f6:	d100      	bne.n	80041fa <UART_WaitOnFlagUntilTimeout+0x1a>
 80041f8:	e0a3      	b.n	8004342 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fa:	f7fd f80d 	bl	8001218 <HAL_GetTick>
 80041fe:	0002      	movs	r2, r0
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004206:	429a      	cmp	r2, r3
 8004208:	d302      	bcc.n	8004210 <UART_WaitOnFlagUntilTimeout+0x30>
 800420a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800420c:	2b00      	cmp	r3, #0
 800420e:	d13f      	bne.n	8004290 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004210:	f3ef 8310 	mrs	r3, PRIMASK
 8004214:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004218:	647b      	str	r3, [r7, #68]	; 0x44
 800421a:	2301      	movs	r3, #1
 800421c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	f383 8810 	msr	PRIMASK, r3
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	494e      	ldr	r1, [pc, #312]	; (800436c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004232:	400a      	ands	r2, r1
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004238:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800423a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423c:	f383 8810 	msr	PRIMASK, r3
}
 8004240:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004242:	f3ef 8310 	mrs	r3, PRIMASK
 8004246:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424a:	643b      	str	r3, [r7, #64]	; 0x40
 800424c:	2301      	movs	r3, #1
 800424e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004252:	f383 8810 	msr	PRIMASK, r3
}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2101      	movs	r1, #1
 8004264:	438a      	bics	r2, r1
 8004266:	609a      	str	r2, [r3, #8]
 8004268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800426a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800426e:	f383 8810 	msr	PRIMASK, r3
}
 8004272:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2288      	movs	r2, #136	; 0x88
 8004278:	2120      	movs	r1, #32
 800427a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	228c      	movs	r2, #140	; 0x8c
 8004280:	2120      	movs	r1, #32
 8004282:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2284      	movs	r2, #132	; 0x84
 8004288:	2100      	movs	r1, #0
 800428a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e069      	b.n	8004364 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2204      	movs	r2, #4
 8004298:	4013      	ands	r3, r2
 800429a:	d052      	beq.n	8004342 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69da      	ldr	r2, [r3, #28]
 80042a2:	2380      	movs	r3, #128	; 0x80
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	401a      	ands	r2, r3
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d148      	bne.n	8004342 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2280      	movs	r2, #128	; 0x80
 80042b6:	0112      	lsls	r2, r2, #4
 80042b8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ba:	f3ef 8310 	mrs	r3, PRIMASK
 80042be:	613b      	str	r3, [r7, #16]
  return(result);
 80042c0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80042c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c4:	2301      	movs	r3, #1
 80042c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f383 8810 	msr	PRIMASK, r3
}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4924      	ldr	r1, [pc, #144]	; (800436c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80042dc:	400a      	ands	r2, r1
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	f383 8810 	msr	PRIMASK, r3
}
 80042ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ec:	f3ef 8310 	mrs	r3, PRIMASK
 80042f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80042f2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80042f6:	2301      	movs	r3, #1
 80042f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	f383 8810 	msr	PRIMASK, r3
}
 8004300:	46c0      	nop			; (mov r8, r8)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2101      	movs	r1, #1
 800430e:	438a      	bics	r2, r1
 8004310:	609a      	str	r2, [r3, #8]
 8004312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004314:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	f383 8810 	msr	PRIMASK, r3
}
 800431c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2288      	movs	r2, #136	; 0x88
 8004322:	2120      	movs	r1, #32
 8004324:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	228c      	movs	r2, #140	; 0x8c
 800432a:	2120      	movs	r1, #32
 800432c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2290      	movs	r2, #144	; 0x90
 8004332:	2120      	movs	r1, #32
 8004334:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2284      	movs	r2, #132	; 0x84
 800433a:	2100      	movs	r1, #0
 800433c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e010      	b.n	8004364 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	4013      	ands	r3, r2
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	425a      	negs	r2, r3
 8004352:	4153      	adcs	r3, r2
 8004354:	b2db      	uxtb	r3, r3
 8004356:	001a      	movs	r2, r3
 8004358:	1dfb      	adds	r3, r7, #7
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d100      	bne.n	8004362 <UART_WaitOnFlagUntilTimeout+0x182>
 8004360:	e747      	b.n	80041f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	0018      	movs	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	b014      	add	sp, #80	; 0x50
 800436a:	bd80      	pop	{r7, pc}
 800436c:	fffffe5f 	.word	0xfffffe5f

08004370 <__errno>:
 8004370:	4b01      	ldr	r3, [pc, #4]	; (8004378 <__errno+0x8>)
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	4770      	bx	lr
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	20000028 	.word	0x20000028

0800437c <__libc_init_array>:
 800437c:	b570      	push	{r4, r5, r6, lr}
 800437e:	2600      	movs	r6, #0
 8004380:	4d0c      	ldr	r5, [pc, #48]	; (80043b4 <__libc_init_array+0x38>)
 8004382:	4c0d      	ldr	r4, [pc, #52]	; (80043b8 <__libc_init_array+0x3c>)
 8004384:	1b64      	subs	r4, r4, r5
 8004386:	10a4      	asrs	r4, r4, #2
 8004388:	42a6      	cmp	r6, r4
 800438a:	d109      	bne.n	80043a0 <__libc_init_array+0x24>
 800438c:	2600      	movs	r6, #0
 800438e:	f000 fff9 	bl	8005384 <_init>
 8004392:	4d0a      	ldr	r5, [pc, #40]	; (80043bc <__libc_init_array+0x40>)
 8004394:	4c0a      	ldr	r4, [pc, #40]	; (80043c0 <__libc_init_array+0x44>)
 8004396:	1b64      	subs	r4, r4, r5
 8004398:	10a4      	asrs	r4, r4, #2
 800439a:	42a6      	cmp	r6, r4
 800439c:	d105      	bne.n	80043aa <__libc_init_array+0x2e>
 800439e:	bd70      	pop	{r4, r5, r6, pc}
 80043a0:	00b3      	lsls	r3, r6, #2
 80043a2:	58eb      	ldr	r3, [r5, r3]
 80043a4:	4798      	blx	r3
 80043a6:	3601      	adds	r6, #1
 80043a8:	e7ee      	b.n	8004388 <__libc_init_array+0xc>
 80043aa:	00b3      	lsls	r3, r6, #2
 80043ac:	58eb      	ldr	r3, [r5, r3]
 80043ae:	4798      	blx	r3
 80043b0:	3601      	adds	r6, #1
 80043b2:	e7f2      	b.n	800439a <__libc_init_array+0x1e>
 80043b4:	08005654 	.word	0x08005654
 80043b8:	08005654 	.word	0x08005654
 80043bc:	08005654 	.word	0x08005654
 80043c0:	08005658 	.word	0x08005658

080043c4 <memset>:
 80043c4:	0003      	movs	r3, r0
 80043c6:	1882      	adds	r2, r0, r2
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d100      	bne.n	80043ce <memset+0xa>
 80043cc:	4770      	bx	lr
 80043ce:	7019      	strb	r1, [r3, #0]
 80043d0:	3301      	adds	r3, #1
 80043d2:	e7f9      	b.n	80043c8 <memset+0x4>

080043d4 <iprintf>:
 80043d4:	b40f      	push	{r0, r1, r2, r3}
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <iprintf+0x30>)
 80043d8:	b513      	push	{r0, r1, r4, lr}
 80043da:	681c      	ldr	r4, [r3, #0]
 80043dc:	2c00      	cmp	r4, #0
 80043de:	d005      	beq.n	80043ec <iprintf+0x18>
 80043e0:	69a3      	ldr	r3, [r4, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d102      	bne.n	80043ec <iprintf+0x18>
 80043e6:	0020      	movs	r0, r4
 80043e8:	f000 f870 	bl	80044cc <__sinit>
 80043ec:	ab05      	add	r3, sp, #20
 80043ee:	0020      	movs	r0, r4
 80043f0:	9a04      	ldr	r2, [sp, #16]
 80043f2:	68a1      	ldr	r1, [r4, #8]
 80043f4:	9301      	str	r3, [sp, #4]
 80043f6:	f000 f9cd 	bl	8004794 <_vfiprintf_r>
 80043fa:	bc16      	pop	{r1, r2, r4}
 80043fc:	bc08      	pop	{r3}
 80043fe:	b004      	add	sp, #16
 8004400:	4718      	bx	r3
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	20000028 	.word	0x20000028

08004408 <std>:
 8004408:	2300      	movs	r3, #0
 800440a:	b510      	push	{r4, lr}
 800440c:	0004      	movs	r4, r0
 800440e:	6003      	str	r3, [r0, #0]
 8004410:	6043      	str	r3, [r0, #4]
 8004412:	6083      	str	r3, [r0, #8]
 8004414:	8181      	strh	r1, [r0, #12]
 8004416:	6643      	str	r3, [r0, #100]	; 0x64
 8004418:	0019      	movs	r1, r3
 800441a:	81c2      	strh	r2, [r0, #14]
 800441c:	6103      	str	r3, [r0, #16]
 800441e:	6143      	str	r3, [r0, #20]
 8004420:	6183      	str	r3, [r0, #24]
 8004422:	2208      	movs	r2, #8
 8004424:	305c      	adds	r0, #92	; 0x5c
 8004426:	f7ff ffcd 	bl	80043c4 <memset>
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <std+0x38>)
 800442c:	6224      	str	r4, [r4, #32]
 800442e:	6263      	str	r3, [r4, #36]	; 0x24
 8004430:	4b04      	ldr	r3, [pc, #16]	; (8004444 <std+0x3c>)
 8004432:	62a3      	str	r3, [r4, #40]	; 0x28
 8004434:	4b04      	ldr	r3, [pc, #16]	; (8004448 <std+0x40>)
 8004436:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004438:	4b04      	ldr	r3, [pc, #16]	; (800444c <std+0x44>)
 800443a:	6323      	str	r3, [r4, #48]	; 0x30
 800443c:	bd10      	pop	{r4, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	08004d31 	.word	0x08004d31
 8004444:	08004d59 	.word	0x08004d59
 8004448:	08004d91 	.word	0x08004d91
 800444c:	08004dbd 	.word	0x08004dbd

08004450 <_cleanup_r>:
 8004450:	b510      	push	{r4, lr}
 8004452:	4902      	ldr	r1, [pc, #8]	; (800445c <_cleanup_r+0xc>)
 8004454:	f000 f8ba 	bl	80045cc <_fwalk_reent>
 8004458:	bd10      	pop	{r4, pc}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	080050c9 	.word	0x080050c9

08004460 <__sfmoreglue>:
 8004460:	b570      	push	{r4, r5, r6, lr}
 8004462:	2568      	movs	r5, #104	; 0x68
 8004464:	1e4a      	subs	r2, r1, #1
 8004466:	4355      	muls	r5, r2
 8004468:	000e      	movs	r6, r1
 800446a:	0029      	movs	r1, r5
 800446c:	3174      	adds	r1, #116	; 0x74
 800446e:	f000 f8f3 	bl	8004658 <_malloc_r>
 8004472:	1e04      	subs	r4, r0, #0
 8004474:	d008      	beq.n	8004488 <__sfmoreglue+0x28>
 8004476:	2100      	movs	r1, #0
 8004478:	002a      	movs	r2, r5
 800447a:	6001      	str	r1, [r0, #0]
 800447c:	6046      	str	r6, [r0, #4]
 800447e:	300c      	adds	r0, #12
 8004480:	60a0      	str	r0, [r4, #8]
 8004482:	3268      	adds	r2, #104	; 0x68
 8004484:	f7ff ff9e 	bl	80043c4 <memset>
 8004488:	0020      	movs	r0, r4
 800448a:	bd70      	pop	{r4, r5, r6, pc}

0800448c <__sfp_lock_acquire>:
 800448c:	b510      	push	{r4, lr}
 800448e:	4802      	ldr	r0, [pc, #8]	; (8004498 <__sfp_lock_acquire+0xc>)
 8004490:	f000 f8bd 	bl	800460e <__retarget_lock_acquire_recursive>
 8004494:	bd10      	pop	{r4, pc}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	200001c5 	.word	0x200001c5

0800449c <__sfp_lock_release>:
 800449c:	b510      	push	{r4, lr}
 800449e:	4802      	ldr	r0, [pc, #8]	; (80044a8 <__sfp_lock_release+0xc>)
 80044a0:	f000 f8b6 	bl	8004610 <__retarget_lock_release_recursive>
 80044a4:	bd10      	pop	{r4, pc}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	200001c5 	.word	0x200001c5

080044ac <__sinit_lock_acquire>:
 80044ac:	b510      	push	{r4, lr}
 80044ae:	4802      	ldr	r0, [pc, #8]	; (80044b8 <__sinit_lock_acquire+0xc>)
 80044b0:	f000 f8ad 	bl	800460e <__retarget_lock_acquire_recursive>
 80044b4:	bd10      	pop	{r4, pc}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	200001c6 	.word	0x200001c6

080044bc <__sinit_lock_release>:
 80044bc:	b510      	push	{r4, lr}
 80044be:	4802      	ldr	r0, [pc, #8]	; (80044c8 <__sinit_lock_release+0xc>)
 80044c0:	f000 f8a6 	bl	8004610 <__retarget_lock_release_recursive>
 80044c4:	bd10      	pop	{r4, pc}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	200001c6 	.word	0x200001c6

080044cc <__sinit>:
 80044cc:	b513      	push	{r0, r1, r4, lr}
 80044ce:	0004      	movs	r4, r0
 80044d0:	f7ff ffec 	bl	80044ac <__sinit_lock_acquire>
 80044d4:	69a3      	ldr	r3, [r4, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <__sinit+0x14>
 80044da:	f7ff ffef 	bl	80044bc <__sinit_lock_release>
 80044de:	bd13      	pop	{r0, r1, r4, pc}
 80044e0:	64a3      	str	r3, [r4, #72]	; 0x48
 80044e2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80044e4:	6523      	str	r3, [r4, #80]	; 0x50
 80044e6:	4b13      	ldr	r3, [pc, #76]	; (8004534 <__sinit+0x68>)
 80044e8:	4a13      	ldr	r2, [pc, #76]	; (8004538 <__sinit+0x6c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80044ee:	9301      	str	r3, [sp, #4]
 80044f0:	42a3      	cmp	r3, r4
 80044f2:	d101      	bne.n	80044f8 <__sinit+0x2c>
 80044f4:	2301      	movs	r3, #1
 80044f6:	61a3      	str	r3, [r4, #24]
 80044f8:	0020      	movs	r0, r4
 80044fa:	f000 f81f 	bl	800453c <__sfp>
 80044fe:	6060      	str	r0, [r4, #4]
 8004500:	0020      	movs	r0, r4
 8004502:	f000 f81b 	bl	800453c <__sfp>
 8004506:	60a0      	str	r0, [r4, #8]
 8004508:	0020      	movs	r0, r4
 800450a:	f000 f817 	bl	800453c <__sfp>
 800450e:	2200      	movs	r2, #0
 8004510:	2104      	movs	r1, #4
 8004512:	60e0      	str	r0, [r4, #12]
 8004514:	6860      	ldr	r0, [r4, #4]
 8004516:	f7ff ff77 	bl	8004408 <std>
 800451a:	2201      	movs	r2, #1
 800451c:	2109      	movs	r1, #9
 800451e:	68a0      	ldr	r0, [r4, #8]
 8004520:	f7ff ff72 	bl	8004408 <std>
 8004524:	2202      	movs	r2, #2
 8004526:	2112      	movs	r1, #18
 8004528:	68e0      	ldr	r0, [r4, #12]
 800452a:	f7ff ff6d 	bl	8004408 <std>
 800452e:	2301      	movs	r3, #1
 8004530:	61a3      	str	r3, [r4, #24]
 8004532:	e7d2      	b.n	80044da <__sinit+0xe>
 8004534:	080055b4 	.word	0x080055b4
 8004538:	08004451 	.word	0x08004451

0800453c <__sfp>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	0007      	movs	r7, r0
 8004540:	f7ff ffa4 	bl	800448c <__sfp_lock_acquire>
 8004544:	4b1f      	ldr	r3, [pc, #124]	; (80045c4 <__sfp+0x88>)
 8004546:	681e      	ldr	r6, [r3, #0]
 8004548:	69b3      	ldr	r3, [r6, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d102      	bne.n	8004554 <__sfp+0x18>
 800454e:	0030      	movs	r0, r6
 8004550:	f7ff ffbc 	bl	80044cc <__sinit>
 8004554:	3648      	adds	r6, #72	; 0x48
 8004556:	68b4      	ldr	r4, [r6, #8]
 8004558:	6873      	ldr	r3, [r6, #4]
 800455a:	3b01      	subs	r3, #1
 800455c:	d504      	bpl.n	8004568 <__sfp+0x2c>
 800455e:	6833      	ldr	r3, [r6, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d022      	beq.n	80045aa <__sfp+0x6e>
 8004564:	6836      	ldr	r6, [r6, #0]
 8004566:	e7f6      	b.n	8004556 <__sfp+0x1a>
 8004568:	220c      	movs	r2, #12
 800456a:	5ea5      	ldrsh	r5, [r4, r2]
 800456c:	2d00      	cmp	r5, #0
 800456e:	d11a      	bne.n	80045a6 <__sfp+0x6a>
 8004570:	0020      	movs	r0, r4
 8004572:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <__sfp+0x8c>)
 8004574:	3058      	adds	r0, #88	; 0x58
 8004576:	60e3      	str	r3, [r4, #12]
 8004578:	6665      	str	r5, [r4, #100]	; 0x64
 800457a:	f000 f847 	bl	800460c <__retarget_lock_init_recursive>
 800457e:	f7ff ff8d 	bl	800449c <__sfp_lock_release>
 8004582:	0020      	movs	r0, r4
 8004584:	2208      	movs	r2, #8
 8004586:	0029      	movs	r1, r5
 8004588:	6025      	str	r5, [r4, #0]
 800458a:	60a5      	str	r5, [r4, #8]
 800458c:	6065      	str	r5, [r4, #4]
 800458e:	6125      	str	r5, [r4, #16]
 8004590:	6165      	str	r5, [r4, #20]
 8004592:	61a5      	str	r5, [r4, #24]
 8004594:	305c      	adds	r0, #92	; 0x5c
 8004596:	f7ff ff15 	bl	80043c4 <memset>
 800459a:	6365      	str	r5, [r4, #52]	; 0x34
 800459c:	63a5      	str	r5, [r4, #56]	; 0x38
 800459e:	64a5      	str	r5, [r4, #72]	; 0x48
 80045a0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80045a2:	0020      	movs	r0, r4
 80045a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045a6:	3468      	adds	r4, #104	; 0x68
 80045a8:	e7d7      	b.n	800455a <__sfp+0x1e>
 80045aa:	2104      	movs	r1, #4
 80045ac:	0038      	movs	r0, r7
 80045ae:	f7ff ff57 	bl	8004460 <__sfmoreglue>
 80045b2:	1e04      	subs	r4, r0, #0
 80045b4:	6030      	str	r0, [r6, #0]
 80045b6:	d1d5      	bne.n	8004564 <__sfp+0x28>
 80045b8:	f7ff ff70 	bl	800449c <__sfp_lock_release>
 80045bc:	230c      	movs	r3, #12
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	e7ef      	b.n	80045a2 <__sfp+0x66>
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	080055b4 	.word	0x080055b4
 80045c8:	ffff0001 	.word	0xffff0001

080045cc <_fwalk_reent>:
 80045cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045ce:	0004      	movs	r4, r0
 80045d0:	0006      	movs	r6, r0
 80045d2:	2700      	movs	r7, #0
 80045d4:	9101      	str	r1, [sp, #4]
 80045d6:	3448      	adds	r4, #72	; 0x48
 80045d8:	6863      	ldr	r3, [r4, #4]
 80045da:	68a5      	ldr	r5, [r4, #8]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	9b00      	ldr	r3, [sp, #0]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	d504      	bpl.n	80045f0 <_fwalk_reent+0x24>
 80045e6:	6824      	ldr	r4, [r4, #0]
 80045e8:	2c00      	cmp	r4, #0
 80045ea:	d1f5      	bne.n	80045d8 <_fwalk_reent+0xc>
 80045ec:	0038      	movs	r0, r7
 80045ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80045f0:	89ab      	ldrh	r3, [r5, #12]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d908      	bls.n	8004608 <_fwalk_reent+0x3c>
 80045f6:	220e      	movs	r2, #14
 80045f8:	5eab      	ldrsh	r3, [r5, r2]
 80045fa:	3301      	adds	r3, #1
 80045fc:	d004      	beq.n	8004608 <_fwalk_reent+0x3c>
 80045fe:	0029      	movs	r1, r5
 8004600:	0030      	movs	r0, r6
 8004602:	9b01      	ldr	r3, [sp, #4]
 8004604:	4798      	blx	r3
 8004606:	4307      	orrs	r7, r0
 8004608:	3568      	adds	r5, #104	; 0x68
 800460a:	e7e8      	b.n	80045de <_fwalk_reent+0x12>

0800460c <__retarget_lock_init_recursive>:
 800460c:	4770      	bx	lr

0800460e <__retarget_lock_acquire_recursive>:
 800460e:	4770      	bx	lr

08004610 <__retarget_lock_release_recursive>:
 8004610:	4770      	bx	lr
	...

08004614 <sbrk_aligned>:
 8004614:	b570      	push	{r4, r5, r6, lr}
 8004616:	4e0f      	ldr	r6, [pc, #60]	; (8004654 <sbrk_aligned+0x40>)
 8004618:	000d      	movs	r5, r1
 800461a:	6831      	ldr	r1, [r6, #0]
 800461c:	0004      	movs	r4, r0
 800461e:	2900      	cmp	r1, #0
 8004620:	d102      	bne.n	8004628 <sbrk_aligned+0x14>
 8004622:	f000 fb73 	bl	8004d0c <_sbrk_r>
 8004626:	6030      	str	r0, [r6, #0]
 8004628:	0029      	movs	r1, r5
 800462a:	0020      	movs	r0, r4
 800462c:	f000 fb6e 	bl	8004d0c <_sbrk_r>
 8004630:	1c43      	adds	r3, r0, #1
 8004632:	d00a      	beq.n	800464a <sbrk_aligned+0x36>
 8004634:	2303      	movs	r3, #3
 8004636:	1cc5      	adds	r5, r0, #3
 8004638:	439d      	bics	r5, r3
 800463a:	42a8      	cmp	r0, r5
 800463c:	d007      	beq.n	800464e <sbrk_aligned+0x3a>
 800463e:	1a29      	subs	r1, r5, r0
 8004640:	0020      	movs	r0, r4
 8004642:	f000 fb63 	bl	8004d0c <_sbrk_r>
 8004646:	1c43      	adds	r3, r0, #1
 8004648:	d101      	bne.n	800464e <sbrk_aligned+0x3a>
 800464a:	2501      	movs	r5, #1
 800464c:	426d      	negs	r5, r5
 800464e:	0028      	movs	r0, r5
 8004650:	bd70      	pop	{r4, r5, r6, pc}
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	200001cc 	.word	0x200001cc

08004658 <_malloc_r>:
 8004658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800465a:	2203      	movs	r2, #3
 800465c:	1ccb      	adds	r3, r1, #3
 800465e:	4393      	bics	r3, r2
 8004660:	3308      	adds	r3, #8
 8004662:	0006      	movs	r6, r0
 8004664:	001f      	movs	r7, r3
 8004666:	2b0c      	cmp	r3, #12
 8004668:	d232      	bcs.n	80046d0 <_malloc_r+0x78>
 800466a:	270c      	movs	r7, #12
 800466c:	42b9      	cmp	r1, r7
 800466e:	d831      	bhi.n	80046d4 <_malloc_r+0x7c>
 8004670:	0030      	movs	r0, r6
 8004672:	f000 fdf5 	bl	8005260 <__malloc_lock>
 8004676:	4d32      	ldr	r5, [pc, #200]	; (8004740 <_malloc_r+0xe8>)
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	001c      	movs	r4, r3
 800467c:	2c00      	cmp	r4, #0
 800467e:	d12e      	bne.n	80046de <_malloc_r+0x86>
 8004680:	0039      	movs	r1, r7
 8004682:	0030      	movs	r0, r6
 8004684:	f7ff ffc6 	bl	8004614 <sbrk_aligned>
 8004688:	0004      	movs	r4, r0
 800468a:	1c43      	adds	r3, r0, #1
 800468c:	d11e      	bne.n	80046cc <_malloc_r+0x74>
 800468e:	682c      	ldr	r4, [r5, #0]
 8004690:	0025      	movs	r5, r4
 8004692:	2d00      	cmp	r5, #0
 8004694:	d14a      	bne.n	800472c <_malloc_r+0xd4>
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	0029      	movs	r1, r5
 800469a:	18e3      	adds	r3, r4, r3
 800469c:	0030      	movs	r0, r6
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	f000 fb34 	bl	8004d0c <_sbrk_r>
 80046a4:	9b01      	ldr	r3, [sp, #4]
 80046a6:	4283      	cmp	r3, r0
 80046a8:	d143      	bne.n	8004732 <_malloc_r+0xda>
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	3703      	adds	r7, #3
 80046ae:	1aff      	subs	r7, r7, r3
 80046b0:	2303      	movs	r3, #3
 80046b2:	439f      	bics	r7, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	2f0c      	cmp	r7, #12
 80046b8:	d200      	bcs.n	80046bc <_malloc_r+0x64>
 80046ba:	270c      	movs	r7, #12
 80046bc:	0039      	movs	r1, r7
 80046be:	0030      	movs	r0, r6
 80046c0:	f7ff ffa8 	bl	8004614 <sbrk_aligned>
 80046c4:	1c43      	adds	r3, r0, #1
 80046c6:	d034      	beq.n	8004732 <_malloc_r+0xda>
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	19df      	adds	r7, r3, r7
 80046cc:	6027      	str	r7, [r4, #0]
 80046ce:	e013      	b.n	80046f8 <_malloc_r+0xa0>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	dacb      	bge.n	800466c <_malloc_r+0x14>
 80046d4:	230c      	movs	r3, #12
 80046d6:	2500      	movs	r5, #0
 80046d8:	6033      	str	r3, [r6, #0]
 80046da:	0028      	movs	r0, r5
 80046dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046de:	6822      	ldr	r2, [r4, #0]
 80046e0:	1bd1      	subs	r1, r2, r7
 80046e2:	d420      	bmi.n	8004726 <_malloc_r+0xce>
 80046e4:	290b      	cmp	r1, #11
 80046e6:	d917      	bls.n	8004718 <_malloc_r+0xc0>
 80046e8:	19e2      	adds	r2, r4, r7
 80046ea:	6027      	str	r7, [r4, #0]
 80046ec:	42a3      	cmp	r3, r4
 80046ee:	d111      	bne.n	8004714 <_malloc_r+0xbc>
 80046f0:	602a      	str	r2, [r5, #0]
 80046f2:	6863      	ldr	r3, [r4, #4]
 80046f4:	6011      	str	r1, [r2, #0]
 80046f6:	6053      	str	r3, [r2, #4]
 80046f8:	0030      	movs	r0, r6
 80046fa:	0025      	movs	r5, r4
 80046fc:	f000 fdb8 	bl	8005270 <__malloc_unlock>
 8004700:	2207      	movs	r2, #7
 8004702:	350b      	adds	r5, #11
 8004704:	1d23      	adds	r3, r4, #4
 8004706:	4395      	bics	r5, r2
 8004708:	1aea      	subs	r2, r5, r3
 800470a:	429d      	cmp	r5, r3
 800470c:	d0e5      	beq.n	80046da <_malloc_r+0x82>
 800470e:	1b5b      	subs	r3, r3, r5
 8004710:	50a3      	str	r3, [r4, r2]
 8004712:	e7e2      	b.n	80046da <_malloc_r+0x82>
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	e7ec      	b.n	80046f2 <_malloc_r+0x9a>
 8004718:	6862      	ldr	r2, [r4, #4]
 800471a:	42a3      	cmp	r3, r4
 800471c:	d101      	bne.n	8004722 <_malloc_r+0xca>
 800471e:	602a      	str	r2, [r5, #0]
 8004720:	e7ea      	b.n	80046f8 <_malloc_r+0xa0>
 8004722:	605a      	str	r2, [r3, #4]
 8004724:	e7e8      	b.n	80046f8 <_malloc_r+0xa0>
 8004726:	0023      	movs	r3, r4
 8004728:	6864      	ldr	r4, [r4, #4]
 800472a:	e7a7      	b.n	800467c <_malloc_r+0x24>
 800472c:	002c      	movs	r4, r5
 800472e:	686d      	ldr	r5, [r5, #4]
 8004730:	e7af      	b.n	8004692 <_malloc_r+0x3a>
 8004732:	230c      	movs	r3, #12
 8004734:	0030      	movs	r0, r6
 8004736:	6033      	str	r3, [r6, #0]
 8004738:	f000 fd9a 	bl	8005270 <__malloc_unlock>
 800473c:	e7cd      	b.n	80046da <_malloc_r+0x82>
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	200001c8 	.word	0x200001c8

08004744 <__sfputc_r>:
 8004744:	6893      	ldr	r3, [r2, #8]
 8004746:	b510      	push	{r4, lr}
 8004748:	3b01      	subs	r3, #1
 800474a:	6093      	str	r3, [r2, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	da04      	bge.n	800475a <__sfputc_r+0x16>
 8004750:	6994      	ldr	r4, [r2, #24]
 8004752:	42a3      	cmp	r3, r4
 8004754:	db07      	blt.n	8004766 <__sfputc_r+0x22>
 8004756:	290a      	cmp	r1, #10
 8004758:	d005      	beq.n	8004766 <__sfputc_r+0x22>
 800475a:	6813      	ldr	r3, [r2, #0]
 800475c:	1c58      	adds	r0, r3, #1
 800475e:	6010      	str	r0, [r2, #0]
 8004760:	7019      	strb	r1, [r3, #0]
 8004762:	0008      	movs	r0, r1
 8004764:	bd10      	pop	{r4, pc}
 8004766:	f000 fb2f 	bl	8004dc8 <__swbuf_r>
 800476a:	0001      	movs	r1, r0
 800476c:	e7f9      	b.n	8004762 <__sfputc_r+0x1e>

0800476e <__sfputs_r>:
 800476e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004770:	0006      	movs	r6, r0
 8004772:	000f      	movs	r7, r1
 8004774:	0014      	movs	r4, r2
 8004776:	18d5      	adds	r5, r2, r3
 8004778:	42ac      	cmp	r4, r5
 800477a:	d101      	bne.n	8004780 <__sfputs_r+0x12>
 800477c:	2000      	movs	r0, #0
 800477e:	e007      	b.n	8004790 <__sfputs_r+0x22>
 8004780:	7821      	ldrb	r1, [r4, #0]
 8004782:	003a      	movs	r2, r7
 8004784:	0030      	movs	r0, r6
 8004786:	f7ff ffdd 	bl	8004744 <__sfputc_r>
 800478a:	3401      	adds	r4, #1
 800478c:	1c43      	adds	r3, r0, #1
 800478e:	d1f3      	bne.n	8004778 <__sfputs_r+0xa>
 8004790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004794 <_vfiprintf_r>:
 8004794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004796:	b0a1      	sub	sp, #132	; 0x84
 8004798:	0006      	movs	r6, r0
 800479a:	000c      	movs	r4, r1
 800479c:	001f      	movs	r7, r3
 800479e:	9203      	str	r2, [sp, #12]
 80047a0:	2800      	cmp	r0, #0
 80047a2:	d004      	beq.n	80047ae <_vfiprintf_r+0x1a>
 80047a4:	6983      	ldr	r3, [r0, #24]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <_vfiprintf_r+0x1a>
 80047aa:	f7ff fe8f 	bl	80044cc <__sinit>
 80047ae:	4b8e      	ldr	r3, [pc, #568]	; (80049e8 <_vfiprintf_r+0x254>)
 80047b0:	429c      	cmp	r4, r3
 80047b2:	d11c      	bne.n	80047ee <_vfiprintf_r+0x5a>
 80047b4:	6874      	ldr	r4, [r6, #4]
 80047b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047b8:	07db      	lsls	r3, r3, #31
 80047ba:	d405      	bmi.n	80047c8 <_vfiprintf_r+0x34>
 80047bc:	89a3      	ldrh	r3, [r4, #12]
 80047be:	059b      	lsls	r3, r3, #22
 80047c0:	d402      	bmi.n	80047c8 <_vfiprintf_r+0x34>
 80047c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047c4:	f7ff ff23 	bl	800460e <__retarget_lock_acquire_recursive>
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	071b      	lsls	r3, r3, #28
 80047cc:	d502      	bpl.n	80047d4 <_vfiprintf_r+0x40>
 80047ce:	6923      	ldr	r3, [r4, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d11d      	bne.n	8004810 <_vfiprintf_r+0x7c>
 80047d4:	0021      	movs	r1, r4
 80047d6:	0030      	movs	r0, r6
 80047d8:	f000 fb60 	bl	8004e9c <__swsetup_r>
 80047dc:	2800      	cmp	r0, #0
 80047de:	d017      	beq.n	8004810 <_vfiprintf_r+0x7c>
 80047e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047e2:	07db      	lsls	r3, r3, #31
 80047e4:	d50d      	bpl.n	8004802 <_vfiprintf_r+0x6e>
 80047e6:	2001      	movs	r0, #1
 80047e8:	4240      	negs	r0, r0
 80047ea:	b021      	add	sp, #132	; 0x84
 80047ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047ee:	4b7f      	ldr	r3, [pc, #508]	; (80049ec <_vfiprintf_r+0x258>)
 80047f0:	429c      	cmp	r4, r3
 80047f2:	d101      	bne.n	80047f8 <_vfiprintf_r+0x64>
 80047f4:	68b4      	ldr	r4, [r6, #8]
 80047f6:	e7de      	b.n	80047b6 <_vfiprintf_r+0x22>
 80047f8:	4b7d      	ldr	r3, [pc, #500]	; (80049f0 <_vfiprintf_r+0x25c>)
 80047fa:	429c      	cmp	r4, r3
 80047fc:	d1db      	bne.n	80047b6 <_vfiprintf_r+0x22>
 80047fe:	68f4      	ldr	r4, [r6, #12]
 8004800:	e7d9      	b.n	80047b6 <_vfiprintf_r+0x22>
 8004802:	89a3      	ldrh	r3, [r4, #12]
 8004804:	059b      	lsls	r3, r3, #22
 8004806:	d4ee      	bmi.n	80047e6 <_vfiprintf_r+0x52>
 8004808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800480a:	f7ff ff01 	bl	8004610 <__retarget_lock_release_recursive>
 800480e:	e7ea      	b.n	80047e6 <_vfiprintf_r+0x52>
 8004810:	2300      	movs	r3, #0
 8004812:	ad08      	add	r5, sp, #32
 8004814:	616b      	str	r3, [r5, #20]
 8004816:	3320      	adds	r3, #32
 8004818:	766b      	strb	r3, [r5, #25]
 800481a:	3310      	adds	r3, #16
 800481c:	76ab      	strb	r3, [r5, #26]
 800481e:	9707      	str	r7, [sp, #28]
 8004820:	9f03      	ldr	r7, [sp, #12]
 8004822:	783b      	ldrb	r3, [r7, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <_vfiprintf_r+0x98>
 8004828:	2b25      	cmp	r3, #37	; 0x25
 800482a:	d14e      	bne.n	80048ca <_vfiprintf_r+0x136>
 800482c:	9b03      	ldr	r3, [sp, #12]
 800482e:	1afb      	subs	r3, r7, r3
 8004830:	9305      	str	r3, [sp, #20]
 8004832:	9b03      	ldr	r3, [sp, #12]
 8004834:	429f      	cmp	r7, r3
 8004836:	d00d      	beq.n	8004854 <_vfiprintf_r+0xc0>
 8004838:	9b05      	ldr	r3, [sp, #20]
 800483a:	0021      	movs	r1, r4
 800483c:	0030      	movs	r0, r6
 800483e:	9a03      	ldr	r2, [sp, #12]
 8004840:	f7ff ff95 	bl	800476e <__sfputs_r>
 8004844:	1c43      	adds	r3, r0, #1
 8004846:	d100      	bne.n	800484a <_vfiprintf_r+0xb6>
 8004848:	e0b5      	b.n	80049b6 <_vfiprintf_r+0x222>
 800484a:	696a      	ldr	r2, [r5, #20]
 800484c:	9b05      	ldr	r3, [sp, #20]
 800484e:	4694      	mov	ip, r2
 8004850:	4463      	add	r3, ip
 8004852:	616b      	str	r3, [r5, #20]
 8004854:	783b      	ldrb	r3, [r7, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d100      	bne.n	800485c <_vfiprintf_r+0xc8>
 800485a:	e0ac      	b.n	80049b6 <_vfiprintf_r+0x222>
 800485c:	2201      	movs	r2, #1
 800485e:	1c7b      	adds	r3, r7, #1
 8004860:	9303      	str	r3, [sp, #12]
 8004862:	2300      	movs	r3, #0
 8004864:	4252      	negs	r2, r2
 8004866:	606a      	str	r2, [r5, #4]
 8004868:	a904      	add	r1, sp, #16
 800486a:	3254      	adds	r2, #84	; 0x54
 800486c:	1852      	adds	r2, r2, r1
 800486e:	602b      	str	r3, [r5, #0]
 8004870:	60eb      	str	r3, [r5, #12]
 8004872:	60ab      	str	r3, [r5, #8]
 8004874:	7013      	strb	r3, [r2, #0]
 8004876:	65ab      	str	r3, [r5, #88]	; 0x58
 8004878:	9b03      	ldr	r3, [sp, #12]
 800487a:	2205      	movs	r2, #5
 800487c:	7819      	ldrb	r1, [r3, #0]
 800487e:	485d      	ldr	r0, [pc, #372]	; (80049f4 <_vfiprintf_r+0x260>)
 8004880:	f000 fce2 	bl	8005248 <memchr>
 8004884:	9b03      	ldr	r3, [sp, #12]
 8004886:	1c5f      	adds	r7, r3, #1
 8004888:	2800      	cmp	r0, #0
 800488a:	d120      	bne.n	80048ce <_vfiprintf_r+0x13a>
 800488c:	682a      	ldr	r2, [r5, #0]
 800488e:	06d3      	lsls	r3, r2, #27
 8004890:	d504      	bpl.n	800489c <_vfiprintf_r+0x108>
 8004892:	2353      	movs	r3, #83	; 0x53
 8004894:	a904      	add	r1, sp, #16
 8004896:	185b      	adds	r3, r3, r1
 8004898:	2120      	movs	r1, #32
 800489a:	7019      	strb	r1, [r3, #0]
 800489c:	0713      	lsls	r3, r2, #28
 800489e:	d504      	bpl.n	80048aa <_vfiprintf_r+0x116>
 80048a0:	2353      	movs	r3, #83	; 0x53
 80048a2:	a904      	add	r1, sp, #16
 80048a4:	185b      	adds	r3, r3, r1
 80048a6:	212b      	movs	r1, #43	; 0x2b
 80048a8:	7019      	strb	r1, [r3, #0]
 80048aa:	9b03      	ldr	r3, [sp, #12]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b2a      	cmp	r3, #42	; 0x2a
 80048b0:	d016      	beq.n	80048e0 <_vfiprintf_r+0x14c>
 80048b2:	2100      	movs	r1, #0
 80048b4:	68eb      	ldr	r3, [r5, #12]
 80048b6:	9f03      	ldr	r7, [sp, #12]
 80048b8:	783a      	ldrb	r2, [r7, #0]
 80048ba:	1c78      	adds	r0, r7, #1
 80048bc:	3a30      	subs	r2, #48	; 0x30
 80048be:	4684      	mov	ip, r0
 80048c0:	2a09      	cmp	r2, #9
 80048c2:	d94f      	bls.n	8004964 <_vfiprintf_r+0x1d0>
 80048c4:	2900      	cmp	r1, #0
 80048c6:	d111      	bne.n	80048ec <_vfiprintf_r+0x158>
 80048c8:	e017      	b.n	80048fa <_vfiprintf_r+0x166>
 80048ca:	3701      	adds	r7, #1
 80048cc:	e7a9      	b.n	8004822 <_vfiprintf_r+0x8e>
 80048ce:	4b49      	ldr	r3, [pc, #292]	; (80049f4 <_vfiprintf_r+0x260>)
 80048d0:	682a      	ldr	r2, [r5, #0]
 80048d2:	1ac0      	subs	r0, r0, r3
 80048d4:	2301      	movs	r3, #1
 80048d6:	4083      	lsls	r3, r0
 80048d8:	4313      	orrs	r3, r2
 80048da:	602b      	str	r3, [r5, #0]
 80048dc:	9703      	str	r7, [sp, #12]
 80048de:	e7cb      	b.n	8004878 <_vfiprintf_r+0xe4>
 80048e0:	9b07      	ldr	r3, [sp, #28]
 80048e2:	1d19      	adds	r1, r3, #4
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	9107      	str	r1, [sp, #28]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	db01      	blt.n	80048f0 <_vfiprintf_r+0x15c>
 80048ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80048ee:	e004      	b.n	80048fa <_vfiprintf_r+0x166>
 80048f0:	425b      	negs	r3, r3
 80048f2:	60eb      	str	r3, [r5, #12]
 80048f4:	2302      	movs	r3, #2
 80048f6:	4313      	orrs	r3, r2
 80048f8:	602b      	str	r3, [r5, #0]
 80048fa:	783b      	ldrb	r3, [r7, #0]
 80048fc:	2b2e      	cmp	r3, #46	; 0x2e
 80048fe:	d10a      	bne.n	8004916 <_vfiprintf_r+0x182>
 8004900:	787b      	ldrb	r3, [r7, #1]
 8004902:	2b2a      	cmp	r3, #42	; 0x2a
 8004904:	d137      	bne.n	8004976 <_vfiprintf_r+0x1e2>
 8004906:	9b07      	ldr	r3, [sp, #28]
 8004908:	3702      	adds	r7, #2
 800490a:	1d1a      	adds	r2, r3, #4
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	9207      	str	r2, [sp, #28]
 8004910:	2b00      	cmp	r3, #0
 8004912:	db2d      	blt.n	8004970 <_vfiprintf_r+0x1dc>
 8004914:	9309      	str	r3, [sp, #36]	; 0x24
 8004916:	2203      	movs	r2, #3
 8004918:	7839      	ldrb	r1, [r7, #0]
 800491a:	4837      	ldr	r0, [pc, #220]	; (80049f8 <_vfiprintf_r+0x264>)
 800491c:	f000 fc94 	bl	8005248 <memchr>
 8004920:	2800      	cmp	r0, #0
 8004922:	d007      	beq.n	8004934 <_vfiprintf_r+0x1a0>
 8004924:	4b34      	ldr	r3, [pc, #208]	; (80049f8 <_vfiprintf_r+0x264>)
 8004926:	682a      	ldr	r2, [r5, #0]
 8004928:	1ac0      	subs	r0, r0, r3
 800492a:	2340      	movs	r3, #64	; 0x40
 800492c:	4083      	lsls	r3, r0
 800492e:	4313      	orrs	r3, r2
 8004930:	3701      	adds	r7, #1
 8004932:	602b      	str	r3, [r5, #0]
 8004934:	7839      	ldrb	r1, [r7, #0]
 8004936:	1c7b      	adds	r3, r7, #1
 8004938:	2206      	movs	r2, #6
 800493a:	4830      	ldr	r0, [pc, #192]	; (80049fc <_vfiprintf_r+0x268>)
 800493c:	9303      	str	r3, [sp, #12]
 800493e:	7629      	strb	r1, [r5, #24]
 8004940:	f000 fc82 	bl	8005248 <memchr>
 8004944:	2800      	cmp	r0, #0
 8004946:	d045      	beq.n	80049d4 <_vfiprintf_r+0x240>
 8004948:	4b2d      	ldr	r3, [pc, #180]	; (8004a00 <_vfiprintf_r+0x26c>)
 800494a:	2b00      	cmp	r3, #0
 800494c:	d127      	bne.n	800499e <_vfiprintf_r+0x20a>
 800494e:	2207      	movs	r2, #7
 8004950:	9b07      	ldr	r3, [sp, #28]
 8004952:	3307      	adds	r3, #7
 8004954:	4393      	bics	r3, r2
 8004956:	3308      	adds	r3, #8
 8004958:	9307      	str	r3, [sp, #28]
 800495a:	696b      	ldr	r3, [r5, #20]
 800495c:	9a04      	ldr	r2, [sp, #16]
 800495e:	189b      	adds	r3, r3, r2
 8004960:	616b      	str	r3, [r5, #20]
 8004962:	e75d      	b.n	8004820 <_vfiprintf_r+0x8c>
 8004964:	210a      	movs	r1, #10
 8004966:	434b      	muls	r3, r1
 8004968:	4667      	mov	r7, ip
 800496a:	189b      	adds	r3, r3, r2
 800496c:	3909      	subs	r1, #9
 800496e:	e7a3      	b.n	80048b8 <_vfiprintf_r+0x124>
 8004970:	2301      	movs	r3, #1
 8004972:	425b      	negs	r3, r3
 8004974:	e7ce      	b.n	8004914 <_vfiprintf_r+0x180>
 8004976:	2300      	movs	r3, #0
 8004978:	001a      	movs	r2, r3
 800497a:	3701      	adds	r7, #1
 800497c:	606b      	str	r3, [r5, #4]
 800497e:	7839      	ldrb	r1, [r7, #0]
 8004980:	1c78      	adds	r0, r7, #1
 8004982:	3930      	subs	r1, #48	; 0x30
 8004984:	4684      	mov	ip, r0
 8004986:	2909      	cmp	r1, #9
 8004988:	d903      	bls.n	8004992 <_vfiprintf_r+0x1fe>
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0c3      	beq.n	8004916 <_vfiprintf_r+0x182>
 800498e:	9209      	str	r2, [sp, #36]	; 0x24
 8004990:	e7c1      	b.n	8004916 <_vfiprintf_r+0x182>
 8004992:	230a      	movs	r3, #10
 8004994:	435a      	muls	r2, r3
 8004996:	4667      	mov	r7, ip
 8004998:	1852      	adds	r2, r2, r1
 800499a:	3b09      	subs	r3, #9
 800499c:	e7ef      	b.n	800497e <_vfiprintf_r+0x1ea>
 800499e:	ab07      	add	r3, sp, #28
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	0022      	movs	r2, r4
 80049a4:	0029      	movs	r1, r5
 80049a6:	0030      	movs	r0, r6
 80049a8:	4b16      	ldr	r3, [pc, #88]	; (8004a04 <_vfiprintf_r+0x270>)
 80049aa:	e000      	b.n	80049ae <_vfiprintf_r+0x21a>
 80049ac:	bf00      	nop
 80049ae:	9004      	str	r0, [sp, #16]
 80049b0:	9b04      	ldr	r3, [sp, #16]
 80049b2:	3301      	adds	r3, #1
 80049b4:	d1d1      	bne.n	800495a <_vfiprintf_r+0x1c6>
 80049b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049b8:	07db      	lsls	r3, r3, #31
 80049ba:	d405      	bmi.n	80049c8 <_vfiprintf_r+0x234>
 80049bc:	89a3      	ldrh	r3, [r4, #12]
 80049be:	059b      	lsls	r3, r3, #22
 80049c0:	d402      	bmi.n	80049c8 <_vfiprintf_r+0x234>
 80049c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049c4:	f7ff fe24 	bl	8004610 <__retarget_lock_release_recursive>
 80049c8:	89a3      	ldrh	r3, [r4, #12]
 80049ca:	065b      	lsls	r3, r3, #25
 80049cc:	d500      	bpl.n	80049d0 <_vfiprintf_r+0x23c>
 80049ce:	e70a      	b.n	80047e6 <_vfiprintf_r+0x52>
 80049d0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80049d2:	e70a      	b.n	80047ea <_vfiprintf_r+0x56>
 80049d4:	ab07      	add	r3, sp, #28
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	0022      	movs	r2, r4
 80049da:	0029      	movs	r1, r5
 80049dc:	0030      	movs	r0, r6
 80049de:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <_vfiprintf_r+0x270>)
 80049e0:	f000 f882 	bl	8004ae8 <_printf_i>
 80049e4:	e7e3      	b.n	80049ae <_vfiprintf_r+0x21a>
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	080055d8 	.word	0x080055d8
 80049ec:	080055f8 	.word	0x080055f8
 80049f0:	080055b8 	.word	0x080055b8
 80049f4:	08005618 	.word	0x08005618
 80049f8:	0800561e 	.word	0x0800561e
 80049fc:	08005622 	.word	0x08005622
 8004a00:	00000000 	.word	0x00000000
 8004a04:	0800476f 	.word	0x0800476f

08004a08 <_printf_common>:
 8004a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a0a:	0015      	movs	r5, r2
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	688a      	ldr	r2, [r1, #8]
 8004a10:	690b      	ldr	r3, [r1, #16]
 8004a12:	000c      	movs	r4, r1
 8004a14:	9000      	str	r0, [sp, #0]
 8004a16:	4293      	cmp	r3, r2
 8004a18:	da00      	bge.n	8004a1c <_printf_common+0x14>
 8004a1a:	0013      	movs	r3, r2
 8004a1c:	0022      	movs	r2, r4
 8004a1e:	602b      	str	r3, [r5, #0]
 8004a20:	3243      	adds	r2, #67	; 0x43
 8004a22:	7812      	ldrb	r2, [r2, #0]
 8004a24:	2a00      	cmp	r2, #0
 8004a26:	d001      	beq.n	8004a2c <_printf_common+0x24>
 8004a28:	3301      	adds	r3, #1
 8004a2a:	602b      	str	r3, [r5, #0]
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	069b      	lsls	r3, r3, #26
 8004a30:	d502      	bpl.n	8004a38 <_printf_common+0x30>
 8004a32:	682b      	ldr	r3, [r5, #0]
 8004a34:	3302      	adds	r3, #2
 8004a36:	602b      	str	r3, [r5, #0]
 8004a38:	6822      	ldr	r2, [r4, #0]
 8004a3a:	2306      	movs	r3, #6
 8004a3c:	0017      	movs	r7, r2
 8004a3e:	401f      	ands	r7, r3
 8004a40:	421a      	tst	r2, r3
 8004a42:	d027      	beq.n	8004a94 <_printf_common+0x8c>
 8004a44:	0023      	movs	r3, r4
 8004a46:	3343      	adds	r3, #67	; 0x43
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	1e5a      	subs	r2, r3, #1
 8004a4c:	4193      	sbcs	r3, r2
 8004a4e:	6822      	ldr	r2, [r4, #0]
 8004a50:	0692      	lsls	r2, r2, #26
 8004a52:	d430      	bmi.n	8004ab6 <_printf_common+0xae>
 8004a54:	0022      	movs	r2, r4
 8004a56:	9901      	ldr	r1, [sp, #4]
 8004a58:	9800      	ldr	r0, [sp, #0]
 8004a5a:	9e08      	ldr	r6, [sp, #32]
 8004a5c:	3243      	adds	r2, #67	; 0x43
 8004a5e:	47b0      	blx	r6
 8004a60:	1c43      	adds	r3, r0, #1
 8004a62:	d025      	beq.n	8004ab0 <_printf_common+0xa8>
 8004a64:	2306      	movs	r3, #6
 8004a66:	6820      	ldr	r0, [r4, #0]
 8004a68:	682a      	ldr	r2, [r5, #0]
 8004a6a:	68e1      	ldr	r1, [r4, #12]
 8004a6c:	2500      	movs	r5, #0
 8004a6e:	4003      	ands	r3, r0
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d103      	bne.n	8004a7c <_printf_common+0x74>
 8004a74:	1a8d      	subs	r5, r1, r2
 8004a76:	43eb      	mvns	r3, r5
 8004a78:	17db      	asrs	r3, r3, #31
 8004a7a:	401d      	ands	r5, r3
 8004a7c:	68a3      	ldr	r3, [r4, #8]
 8004a7e:	6922      	ldr	r2, [r4, #16]
 8004a80:	4293      	cmp	r3, r2
 8004a82:	dd01      	ble.n	8004a88 <_printf_common+0x80>
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	18ed      	adds	r5, r5, r3
 8004a88:	2700      	movs	r7, #0
 8004a8a:	42bd      	cmp	r5, r7
 8004a8c:	d120      	bne.n	8004ad0 <_printf_common+0xc8>
 8004a8e:	2000      	movs	r0, #0
 8004a90:	e010      	b.n	8004ab4 <_printf_common+0xac>
 8004a92:	3701      	adds	r7, #1
 8004a94:	68e3      	ldr	r3, [r4, #12]
 8004a96:	682a      	ldr	r2, [r5, #0]
 8004a98:	1a9b      	subs	r3, r3, r2
 8004a9a:	42bb      	cmp	r3, r7
 8004a9c:	ddd2      	ble.n	8004a44 <_printf_common+0x3c>
 8004a9e:	0022      	movs	r2, r4
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	9901      	ldr	r1, [sp, #4]
 8004aa4:	9800      	ldr	r0, [sp, #0]
 8004aa6:	9e08      	ldr	r6, [sp, #32]
 8004aa8:	3219      	adds	r2, #25
 8004aaa:	47b0      	blx	r6
 8004aac:	1c43      	adds	r3, r0, #1
 8004aae:	d1f0      	bne.n	8004a92 <_printf_common+0x8a>
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	4240      	negs	r0, r0
 8004ab4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ab6:	2030      	movs	r0, #48	; 0x30
 8004ab8:	18e1      	adds	r1, r4, r3
 8004aba:	3143      	adds	r1, #67	; 0x43
 8004abc:	7008      	strb	r0, [r1, #0]
 8004abe:	0021      	movs	r1, r4
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	3145      	adds	r1, #69	; 0x45
 8004ac4:	7809      	ldrb	r1, [r1, #0]
 8004ac6:	18a2      	adds	r2, r4, r2
 8004ac8:	3243      	adds	r2, #67	; 0x43
 8004aca:	3302      	adds	r3, #2
 8004acc:	7011      	strb	r1, [r2, #0]
 8004ace:	e7c1      	b.n	8004a54 <_printf_common+0x4c>
 8004ad0:	0022      	movs	r2, r4
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	9901      	ldr	r1, [sp, #4]
 8004ad6:	9800      	ldr	r0, [sp, #0]
 8004ad8:	9e08      	ldr	r6, [sp, #32]
 8004ada:	321a      	adds	r2, #26
 8004adc:	47b0      	blx	r6
 8004ade:	1c43      	adds	r3, r0, #1
 8004ae0:	d0e6      	beq.n	8004ab0 <_printf_common+0xa8>
 8004ae2:	3701      	adds	r7, #1
 8004ae4:	e7d1      	b.n	8004a8a <_printf_common+0x82>
	...

08004ae8 <_printf_i>:
 8004ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aea:	b08b      	sub	sp, #44	; 0x2c
 8004aec:	9206      	str	r2, [sp, #24]
 8004aee:	000a      	movs	r2, r1
 8004af0:	3243      	adds	r2, #67	; 0x43
 8004af2:	9307      	str	r3, [sp, #28]
 8004af4:	9005      	str	r0, [sp, #20]
 8004af6:	9204      	str	r2, [sp, #16]
 8004af8:	7e0a      	ldrb	r2, [r1, #24]
 8004afa:	000c      	movs	r4, r1
 8004afc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004afe:	2a78      	cmp	r2, #120	; 0x78
 8004b00:	d807      	bhi.n	8004b12 <_printf_i+0x2a>
 8004b02:	2a62      	cmp	r2, #98	; 0x62
 8004b04:	d809      	bhi.n	8004b1a <_printf_i+0x32>
 8004b06:	2a00      	cmp	r2, #0
 8004b08:	d100      	bne.n	8004b0c <_printf_i+0x24>
 8004b0a:	e0c1      	b.n	8004c90 <_printf_i+0x1a8>
 8004b0c:	2a58      	cmp	r2, #88	; 0x58
 8004b0e:	d100      	bne.n	8004b12 <_printf_i+0x2a>
 8004b10:	e08c      	b.n	8004c2c <_printf_i+0x144>
 8004b12:	0026      	movs	r6, r4
 8004b14:	3642      	adds	r6, #66	; 0x42
 8004b16:	7032      	strb	r2, [r6, #0]
 8004b18:	e022      	b.n	8004b60 <_printf_i+0x78>
 8004b1a:	0010      	movs	r0, r2
 8004b1c:	3863      	subs	r0, #99	; 0x63
 8004b1e:	2815      	cmp	r0, #21
 8004b20:	d8f7      	bhi.n	8004b12 <_printf_i+0x2a>
 8004b22:	f7fb faef 	bl	8000104 <__gnu_thumb1_case_shi>
 8004b26:	0016      	.short	0x0016
 8004b28:	fff6001f 	.word	0xfff6001f
 8004b2c:	fff6fff6 	.word	0xfff6fff6
 8004b30:	001ffff6 	.word	0x001ffff6
 8004b34:	fff6fff6 	.word	0xfff6fff6
 8004b38:	fff6fff6 	.word	0xfff6fff6
 8004b3c:	003600a8 	.word	0x003600a8
 8004b40:	fff6009a 	.word	0xfff6009a
 8004b44:	00b9fff6 	.word	0x00b9fff6
 8004b48:	0036fff6 	.word	0x0036fff6
 8004b4c:	fff6fff6 	.word	0xfff6fff6
 8004b50:	009e      	.short	0x009e
 8004b52:	0026      	movs	r6, r4
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	3642      	adds	r6, #66	; 0x42
 8004b58:	1d11      	adds	r1, r2, #4
 8004b5a:	6019      	str	r1, [r3, #0]
 8004b5c:	6813      	ldr	r3, [r2, #0]
 8004b5e:	7033      	strb	r3, [r6, #0]
 8004b60:	2301      	movs	r3, #1
 8004b62:	e0a7      	b.n	8004cb4 <_printf_i+0x1cc>
 8004b64:	6808      	ldr	r0, [r1, #0]
 8004b66:	6819      	ldr	r1, [r3, #0]
 8004b68:	1d0a      	adds	r2, r1, #4
 8004b6a:	0605      	lsls	r5, r0, #24
 8004b6c:	d50b      	bpl.n	8004b86 <_printf_i+0x9e>
 8004b6e:	680d      	ldr	r5, [r1, #0]
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	2d00      	cmp	r5, #0
 8004b74:	da03      	bge.n	8004b7e <_printf_i+0x96>
 8004b76:	232d      	movs	r3, #45	; 0x2d
 8004b78:	9a04      	ldr	r2, [sp, #16]
 8004b7a:	426d      	negs	r5, r5
 8004b7c:	7013      	strb	r3, [r2, #0]
 8004b7e:	4b61      	ldr	r3, [pc, #388]	; (8004d04 <_printf_i+0x21c>)
 8004b80:	270a      	movs	r7, #10
 8004b82:	9303      	str	r3, [sp, #12]
 8004b84:	e01b      	b.n	8004bbe <_printf_i+0xd6>
 8004b86:	680d      	ldr	r5, [r1, #0]
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	0641      	lsls	r1, r0, #25
 8004b8c:	d5f1      	bpl.n	8004b72 <_printf_i+0x8a>
 8004b8e:	b22d      	sxth	r5, r5
 8004b90:	e7ef      	b.n	8004b72 <_printf_i+0x8a>
 8004b92:	680d      	ldr	r5, [r1, #0]
 8004b94:	6819      	ldr	r1, [r3, #0]
 8004b96:	1d08      	adds	r0, r1, #4
 8004b98:	6018      	str	r0, [r3, #0]
 8004b9a:	062e      	lsls	r6, r5, #24
 8004b9c:	d501      	bpl.n	8004ba2 <_printf_i+0xba>
 8004b9e:	680d      	ldr	r5, [r1, #0]
 8004ba0:	e003      	b.n	8004baa <_printf_i+0xc2>
 8004ba2:	066d      	lsls	r5, r5, #25
 8004ba4:	d5fb      	bpl.n	8004b9e <_printf_i+0xb6>
 8004ba6:	680d      	ldr	r5, [r1, #0]
 8004ba8:	b2ad      	uxth	r5, r5
 8004baa:	4b56      	ldr	r3, [pc, #344]	; (8004d04 <_printf_i+0x21c>)
 8004bac:	2708      	movs	r7, #8
 8004bae:	9303      	str	r3, [sp, #12]
 8004bb0:	2a6f      	cmp	r2, #111	; 0x6f
 8004bb2:	d000      	beq.n	8004bb6 <_printf_i+0xce>
 8004bb4:	3702      	adds	r7, #2
 8004bb6:	0023      	movs	r3, r4
 8004bb8:	2200      	movs	r2, #0
 8004bba:	3343      	adds	r3, #67	; 0x43
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	6863      	ldr	r3, [r4, #4]
 8004bc0:	60a3      	str	r3, [r4, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	db03      	blt.n	8004bce <_printf_i+0xe6>
 8004bc6:	2204      	movs	r2, #4
 8004bc8:	6821      	ldr	r1, [r4, #0]
 8004bca:	4391      	bics	r1, r2
 8004bcc:	6021      	str	r1, [r4, #0]
 8004bce:	2d00      	cmp	r5, #0
 8004bd0:	d102      	bne.n	8004bd8 <_printf_i+0xf0>
 8004bd2:	9e04      	ldr	r6, [sp, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00c      	beq.n	8004bf2 <_printf_i+0x10a>
 8004bd8:	9e04      	ldr	r6, [sp, #16]
 8004bda:	0028      	movs	r0, r5
 8004bdc:	0039      	movs	r1, r7
 8004bde:	f7fb fb21 	bl	8000224 <__aeabi_uidivmod>
 8004be2:	9b03      	ldr	r3, [sp, #12]
 8004be4:	3e01      	subs	r6, #1
 8004be6:	5c5b      	ldrb	r3, [r3, r1]
 8004be8:	7033      	strb	r3, [r6, #0]
 8004bea:	002b      	movs	r3, r5
 8004bec:	0005      	movs	r5, r0
 8004bee:	429f      	cmp	r7, r3
 8004bf0:	d9f3      	bls.n	8004bda <_printf_i+0xf2>
 8004bf2:	2f08      	cmp	r7, #8
 8004bf4:	d109      	bne.n	8004c0a <_printf_i+0x122>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	07db      	lsls	r3, r3, #31
 8004bfa:	d506      	bpl.n	8004c0a <_printf_i+0x122>
 8004bfc:	6863      	ldr	r3, [r4, #4]
 8004bfe:	6922      	ldr	r2, [r4, #16]
 8004c00:	4293      	cmp	r3, r2
 8004c02:	dc02      	bgt.n	8004c0a <_printf_i+0x122>
 8004c04:	2330      	movs	r3, #48	; 0x30
 8004c06:	3e01      	subs	r6, #1
 8004c08:	7033      	strb	r3, [r6, #0]
 8004c0a:	9b04      	ldr	r3, [sp, #16]
 8004c0c:	1b9b      	subs	r3, r3, r6
 8004c0e:	6123      	str	r3, [r4, #16]
 8004c10:	9b07      	ldr	r3, [sp, #28]
 8004c12:	0021      	movs	r1, r4
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	9805      	ldr	r0, [sp, #20]
 8004c18:	9b06      	ldr	r3, [sp, #24]
 8004c1a:	aa09      	add	r2, sp, #36	; 0x24
 8004c1c:	f7ff fef4 	bl	8004a08 <_printf_common>
 8004c20:	1c43      	adds	r3, r0, #1
 8004c22:	d14c      	bne.n	8004cbe <_printf_i+0x1d6>
 8004c24:	2001      	movs	r0, #1
 8004c26:	4240      	negs	r0, r0
 8004c28:	b00b      	add	sp, #44	; 0x2c
 8004c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c2c:	3145      	adds	r1, #69	; 0x45
 8004c2e:	700a      	strb	r2, [r1, #0]
 8004c30:	4a34      	ldr	r2, [pc, #208]	; (8004d04 <_printf_i+0x21c>)
 8004c32:	9203      	str	r2, [sp, #12]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	6821      	ldr	r1, [r4, #0]
 8004c38:	ca20      	ldmia	r2!, {r5}
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	0608      	lsls	r0, r1, #24
 8004c3e:	d516      	bpl.n	8004c6e <_printf_i+0x186>
 8004c40:	07cb      	lsls	r3, r1, #31
 8004c42:	d502      	bpl.n	8004c4a <_printf_i+0x162>
 8004c44:	2320      	movs	r3, #32
 8004c46:	4319      	orrs	r1, r3
 8004c48:	6021      	str	r1, [r4, #0]
 8004c4a:	2710      	movs	r7, #16
 8004c4c:	2d00      	cmp	r5, #0
 8004c4e:	d1b2      	bne.n	8004bb6 <_printf_i+0xce>
 8004c50:	2320      	movs	r3, #32
 8004c52:	6822      	ldr	r2, [r4, #0]
 8004c54:	439a      	bics	r2, r3
 8004c56:	6022      	str	r2, [r4, #0]
 8004c58:	e7ad      	b.n	8004bb6 <_printf_i+0xce>
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	6809      	ldr	r1, [r1, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	6022      	str	r2, [r4, #0]
 8004c62:	0022      	movs	r2, r4
 8004c64:	2178      	movs	r1, #120	; 0x78
 8004c66:	3245      	adds	r2, #69	; 0x45
 8004c68:	7011      	strb	r1, [r2, #0]
 8004c6a:	4a27      	ldr	r2, [pc, #156]	; (8004d08 <_printf_i+0x220>)
 8004c6c:	e7e1      	b.n	8004c32 <_printf_i+0x14a>
 8004c6e:	0648      	lsls	r0, r1, #25
 8004c70:	d5e6      	bpl.n	8004c40 <_printf_i+0x158>
 8004c72:	b2ad      	uxth	r5, r5
 8004c74:	e7e4      	b.n	8004c40 <_printf_i+0x158>
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	680d      	ldr	r5, [r1, #0]
 8004c7a:	1d10      	adds	r0, r2, #4
 8004c7c:	6949      	ldr	r1, [r1, #20]
 8004c7e:	6018      	str	r0, [r3, #0]
 8004c80:	6813      	ldr	r3, [r2, #0]
 8004c82:	062e      	lsls	r6, r5, #24
 8004c84:	d501      	bpl.n	8004c8a <_printf_i+0x1a2>
 8004c86:	6019      	str	r1, [r3, #0]
 8004c88:	e002      	b.n	8004c90 <_printf_i+0x1a8>
 8004c8a:	066d      	lsls	r5, r5, #25
 8004c8c:	d5fb      	bpl.n	8004c86 <_printf_i+0x19e>
 8004c8e:	8019      	strh	r1, [r3, #0]
 8004c90:	2300      	movs	r3, #0
 8004c92:	9e04      	ldr	r6, [sp, #16]
 8004c94:	6123      	str	r3, [r4, #16]
 8004c96:	e7bb      	b.n	8004c10 <_printf_i+0x128>
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	1d11      	adds	r1, r2, #4
 8004c9c:	6019      	str	r1, [r3, #0]
 8004c9e:	6816      	ldr	r6, [r2, #0]
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	0030      	movs	r0, r6
 8004ca4:	6862      	ldr	r2, [r4, #4]
 8004ca6:	f000 facf 	bl	8005248 <memchr>
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d001      	beq.n	8004cb2 <_printf_i+0x1ca>
 8004cae:	1b80      	subs	r0, r0, r6
 8004cb0:	6060      	str	r0, [r4, #4]
 8004cb2:	6863      	ldr	r3, [r4, #4]
 8004cb4:	6123      	str	r3, [r4, #16]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	9a04      	ldr	r2, [sp, #16]
 8004cba:	7013      	strb	r3, [r2, #0]
 8004cbc:	e7a8      	b.n	8004c10 <_printf_i+0x128>
 8004cbe:	6923      	ldr	r3, [r4, #16]
 8004cc0:	0032      	movs	r2, r6
 8004cc2:	9906      	ldr	r1, [sp, #24]
 8004cc4:	9805      	ldr	r0, [sp, #20]
 8004cc6:	9d07      	ldr	r5, [sp, #28]
 8004cc8:	47a8      	blx	r5
 8004cca:	1c43      	adds	r3, r0, #1
 8004ccc:	d0aa      	beq.n	8004c24 <_printf_i+0x13c>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	079b      	lsls	r3, r3, #30
 8004cd2:	d415      	bmi.n	8004d00 <_printf_i+0x218>
 8004cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd6:	68e0      	ldr	r0, [r4, #12]
 8004cd8:	4298      	cmp	r0, r3
 8004cda:	daa5      	bge.n	8004c28 <_printf_i+0x140>
 8004cdc:	0018      	movs	r0, r3
 8004cde:	e7a3      	b.n	8004c28 <_printf_i+0x140>
 8004ce0:	0022      	movs	r2, r4
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	9906      	ldr	r1, [sp, #24]
 8004ce6:	9805      	ldr	r0, [sp, #20]
 8004ce8:	9e07      	ldr	r6, [sp, #28]
 8004cea:	3219      	adds	r2, #25
 8004cec:	47b0      	blx	r6
 8004cee:	1c43      	adds	r3, r0, #1
 8004cf0:	d098      	beq.n	8004c24 <_printf_i+0x13c>
 8004cf2:	3501      	adds	r5, #1
 8004cf4:	68e3      	ldr	r3, [r4, #12]
 8004cf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cf8:	1a9b      	subs	r3, r3, r2
 8004cfa:	42ab      	cmp	r3, r5
 8004cfc:	dcf0      	bgt.n	8004ce0 <_printf_i+0x1f8>
 8004cfe:	e7e9      	b.n	8004cd4 <_printf_i+0x1ec>
 8004d00:	2500      	movs	r5, #0
 8004d02:	e7f7      	b.n	8004cf4 <_printf_i+0x20c>
 8004d04:	08005629 	.word	0x08005629
 8004d08:	0800563a 	.word	0x0800563a

08004d0c <_sbrk_r>:
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	b570      	push	{r4, r5, r6, lr}
 8004d10:	4d06      	ldr	r5, [pc, #24]	; (8004d2c <_sbrk_r+0x20>)
 8004d12:	0004      	movs	r4, r0
 8004d14:	0008      	movs	r0, r1
 8004d16:	602b      	str	r3, [r5, #0]
 8004d18:	f7fc f99c 	bl	8001054 <_sbrk>
 8004d1c:	1c43      	adds	r3, r0, #1
 8004d1e:	d103      	bne.n	8004d28 <_sbrk_r+0x1c>
 8004d20:	682b      	ldr	r3, [r5, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d000      	beq.n	8004d28 <_sbrk_r+0x1c>
 8004d26:	6023      	str	r3, [r4, #0]
 8004d28:	bd70      	pop	{r4, r5, r6, pc}
 8004d2a:	46c0      	nop			; (mov r8, r8)
 8004d2c:	200001d0 	.word	0x200001d0

08004d30 <__sread>:
 8004d30:	b570      	push	{r4, r5, r6, lr}
 8004d32:	000c      	movs	r4, r1
 8004d34:	250e      	movs	r5, #14
 8004d36:	5f49      	ldrsh	r1, [r1, r5]
 8004d38:	f000 faec 	bl	8005314 <_read_r>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	db03      	blt.n	8004d48 <__sread+0x18>
 8004d40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d42:	181b      	adds	r3, r3, r0
 8004d44:	6563      	str	r3, [r4, #84]	; 0x54
 8004d46:	bd70      	pop	{r4, r5, r6, pc}
 8004d48:	89a3      	ldrh	r3, [r4, #12]
 8004d4a:	4a02      	ldr	r2, [pc, #8]	; (8004d54 <__sread+0x24>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	81a3      	strh	r3, [r4, #12]
 8004d50:	e7f9      	b.n	8004d46 <__sread+0x16>
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	ffffefff 	.word	0xffffefff

08004d58 <__swrite>:
 8004d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5a:	001f      	movs	r7, r3
 8004d5c:	898b      	ldrh	r3, [r1, #12]
 8004d5e:	0005      	movs	r5, r0
 8004d60:	000c      	movs	r4, r1
 8004d62:	0016      	movs	r6, r2
 8004d64:	05db      	lsls	r3, r3, #23
 8004d66:	d505      	bpl.n	8004d74 <__swrite+0x1c>
 8004d68:	230e      	movs	r3, #14
 8004d6a:	5ec9      	ldrsh	r1, [r1, r3]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2302      	movs	r3, #2
 8004d70:	f000 f9ea 	bl	8005148 <_lseek_r>
 8004d74:	89a3      	ldrh	r3, [r4, #12]
 8004d76:	4a05      	ldr	r2, [pc, #20]	; (8004d8c <__swrite+0x34>)
 8004d78:	0028      	movs	r0, r5
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	81a3      	strh	r3, [r4, #12]
 8004d7e:	0032      	movs	r2, r6
 8004d80:	230e      	movs	r3, #14
 8004d82:	5ee1      	ldrsh	r1, [r4, r3]
 8004d84:	003b      	movs	r3, r7
 8004d86:	f000 f875 	bl	8004e74 <_write_r>
 8004d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d8c:	ffffefff 	.word	0xffffefff

08004d90 <__sseek>:
 8004d90:	b570      	push	{r4, r5, r6, lr}
 8004d92:	000c      	movs	r4, r1
 8004d94:	250e      	movs	r5, #14
 8004d96:	5f49      	ldrsh	r1, [r1, r5]
 8004d98:	f000 f9d6 	bl	8005148 <_lseek_r>
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	1c42      	adds	r2, r0, #1
 8004da0:	d103      	bne.n	8004daa <__sseek+0x1a>
 8004da2:	4a05      	ldr	r2, [pc, #20]	; (8004db8 <__sseek+0x28>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	81a3      	strh	r3, [r4, #12]
 8004da8:	bd70      	pop	{r4, r5, r6, pc}
 8004daa:	2280      	movs	r2, #128	; 0x80
 8004dac:	0152      	lsls	r2, r2, #5
 8004dae:	4313      	orrs	r3, r2
 8004db0:	81a3      	strh	r3, [r4, #12]
 8004db2:	6560      	str	r0, [r4, #84]	; 0x54
 8004db4:	e7f8      	b.n	8004da8 <__sseek+0x18>
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	ffffefff 	.word	0xffffefff

08004dbc <__sclose>:
 8004dbc:	b510      	push	{r4, lr}
 8004dbe:	230e      	movs	r3, #14
 8004dc0:	5ec9      	ldrsh	r1, [r1, r3]
 8004dc2:	f000 f8e3 	bl	8004f8c <_close_r>
 8004dc6:	bd10      	pop	{r4, pc}

08004dc8 <__swbuf_r>:
 8004dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dca:	0005      	movs	r5, r0
 8004dcc:	000e      	movs	r6, r1
 8004dce:	0014      	movs	r4, r2
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d004      	beq.n	8004dde <__swbuf_r+0x16>
 8004dd4:	6983      	ldr	r3, [r0, #24]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <__swbuf_r+0x16>
 8004dda:	f7ff fb77 	bl	80044cc <__sinit>
 8004dde:	4b22      	ldr	r3, [pc, #136]	; (8004e68 <__swbuf_r+0xa0>)
 8004de0:	429c      	cmp	r4, r3
 8004de2:	d12e      	bne.n	8004e42 <__swbuf_r+0x7a>
 8004de4:	686c      	ldr	r4, [r5, #4]
 8004de6:	69a3      	ldr	r3, [r4, #24]
 8004de8:	60a3      	str	r3, [r4, #8]
 8004dea:	89a3      	ldrh	r3, [r4, #12]
 8004dec:	071b      	lsls	r3, r3, #28
 8004dee:	d532      	bpl.n	8004e56 <__swbuf_r+0x8e>
 8004df0:	6923      	ldr	r3, [r4, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d02f      	beq.n	8004e56 <__swbuf_r+0x8e>
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	6922      	ldr	r2, [r4, #16]
 8004dfa:	b2f7      	uxtb	r7, r6
 8004dfc:	1a98      	subs	r0, r3, r2
 8004dfe:	6963      	ldr	r3, [r4, #20]
 8004e00:	b2f6      	uxtb	r6, r6
 8004e02:	4283      	cmp	r3, r0
 8004e04:	dc05      	bgt.n	8004e12 <__swbuf_r+0x4a>
 8004e06:	0021      	movs	r1, r4
 8004e08:	0028      	movs	r0, r5
 8004e0a:	f000 f95d 	bl	80050c8 <_fflush_r>
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	d127      	bne.n	8004e62 <__swbuf_r+0x9a>
 8004e12:	68a3      	ldr	r3, [r4, #8]
 8004e14:	3001      	adds	r0, #1
 8004e16:	3b01      	subs	r3, #1
 8004e18:	60a3      	str	r3, [r4, #8]
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	6022      	str	r2, [r4, #0]
 8004e20:	701f      	strb	r7, [r3, #0]
 8004e22:	6963      	ldr	r3, [r4, #20]
 8004e24:	4283      	cmp	r3, r0
 8004e26:	d004      	beq.n	8004e32 <__swbuf_r+0x6a>
 8004e28:	89a3      	ldrh	r3, [r4, #12]
 8004e2a:	07db      	lsls	r3, r3, #31
 8004e2c:	d507      	bpl.n	8004e3e <__swbuf_r+0x76>
 8004e2e:	2e0a      	cmp	r6, #10
 8004e30:	d105      	bne.n	8004e3e <__swbuf_r+0x76>
 8004e32:	0021      	movs	r1, r4
 8004e34:	0028      	movs	r0, r5
 8004e36:	f000 f947 	bl	80050c8 <_fflush_r>
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	d111      	bne.n	8004e62 <__swbuf_r+0x9a>
 8004e3e:	0030      	movs	r0, r6
 8004e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e42:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <__swbuf_r+0xa4>)
 8004e44:	429c      	cmp	r4, r3
 8004e46:	d101      	bne.n	8004e4c <__swbuf_r+0x84>
 8004e48:	68ac      	ldr	r4, [r5, #8]
 8004e4a:	e7cc      	b.n	8004de6 <__swbuf_r+0x1e>
 8004e4c:	4b08      	ldr	r3, [pc, #32]	; (8004e70 <__swbuf_r+0xa8>)
 8004e4e:	429c      	cmp	r4, r3
 8004e50:	d1c9      	bne.n	8004de6 <__swbuf_r+0x1e>
 8004e52:	68ec      	ldr	r4, [r5, #12]
 8004e54:	e7c7      	b.n	8004de6 <__swbuf_r+0x1e>
 8004e56:	0021      	movs	r1, r4
 8004e58:	0028      	movs	r0, r5
 8004e5a:	f000 f81f 	bl	8004e9c <__swsetup_r>
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	d0c9      	beq.n	8004df6 <__swbuf_r+0x2e>
 8004e62:	2601      	movs	r6, #1
 8004e64:	4276      	negs	r6, r6
 8004e66:	e7ea      	b.n	8004e3e <__swbuf_r+0x76>
 8004e68:	080055d8 	.word	0x080055d8
 8004e6c:	080055f8 	.word	0x080055f8
 8004e70:	080055b8 	.word	0x080055b8

08004e74 <_write_r>:
 8004e74:	b570      	push	{r4, r5, r6, lr}
 8004e76:	0004      	movs	r4, r0
 8004e78:	0008      	movs	r0, r1
 8004e7a:	0011      	movs	r1, r2
 8004e7c:	001a      	movs	r2, r3
 8004e7e:	2300      	movs	r3, #0
 8004e80:	4d05      	ldr	r5, [pc, #20]	; (8004e98 <_write_r+0x24>)
 8004e82:	602b      	str	r3, [r5, #0]
 8004e84:	f7fc f89d 	bl	8000fc2 <_write>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d103      	bne.n	8004e94 <_write_r+0x20>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d000      	beq.n	8004e94 <_write_r+0x20>
 8004e92:	6023      	str	r3, [r4, #0]
 8004e94:	bd70      	pop	{r4, r5, r6, pc}
 8004e96:	46c0      	nop			; (mov r8, r8)
 8004e98:	200001d0 	.word	0x200001d0

08004e9c <__swsetup_r>:
 8004e9c:	4b37      	ldr	r3, [pc, #220]	; (8004f7c <__swsetup_r+0xe0>)
 8004e9e:	b570      	push	{r4, r5, r6, lr}
 8004ea0:	681d      	ldr	r5, [r3, #0]
 8004ea2:	0006      	movs	r6, r0
 8004ea4:	000c      	movs	r4, r1
 8004ea6:	2d00      	cmp	r5, #0
 8004ea8:	d005      	beq.n	8004eb6 <__swsetup_r+0x1a>
 8004eaa:	69ab      	ldr	r3, [r5, #24]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d102      	bne.n	8004eb6 <__swsetup_r+0x1a>
 8004eb0:	0028      	movs	r0, r5
 8004eb2:	f7ff fb0b 	bl	80044cc <__sinit>
 8004eb6:	4b32      	ldr	r3, [pc, #200]	; (8004f80 <__swsetup_r+0xe4>)
 8004eb8:	429c      	cmp	r4, r3
 8004eba:	d10f      	bne.n	8004edc <__swsetup_r+0x40>
 8004ebc:	686c      	ldr	r4, [r5, #4]
 8004ebe:	230c      	movs	r3, #12
 8004ec0:	5ee2      	ldrsh	r2, [r4, r3]
 8004ec2:	b293      	uxth	r3, r2
 8004ec4:	0711      	lsls	r1, r2, #28
 8004ec6:	d42d      	bmi.n	8004f24 <__swsetup_r+0x88>
 8004ec8:	06d9      	lsls	r1, r3, #27
 8004eca:	d411      	bmi.n	8004ef0 <__swsetup_r+0x54>
 8004ecc:	2309      	movs	r3, #9
 8004ece:	2001      	movs	r0, #1
 8004ed0:	6033      	str	r3, [r6, #0]
 8004ed2:	3337      	adds	r3, #55	; 0x37
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	81a3      	strh	r3, [r4, #12]
 8004ed8:	4240      	negs	r0, r0
 8004eda:	bd70      	pop	{r4, r5, r6, pc}
 8004edc:	4b29      	ldr	r3, [pc, #164]	; (8004f84 <__swsetup_r+0xe8>)
 8004ede:	429c      	cmp	r4, r3
 8004ee0:	d101      	bne.n	8004ee6 <__swsetup_r+0x4a>
 8004ee2:	68ac      	ldr	r4, [r5, #8]
 8004ee4:	e7eb      	b.n	8004ebe <__swsetup_r+0x22>
 8004ee6:	4b28      	ldr	r3, [pc, #160]	; (8004f88 <__swsetup_r+0xec>)
 8004ee8:	429c      	cmp	r4, r3
 8004eea:	d1e8      	bne.n	8004ebe <__swsetup_r+0x22>
 8004eec:	68ec      	ldr	r4, [r5, #12]
 8004eee:	e7e6      	b.n	8004ebe <__swsetup_r+0x22>
 8004ef0:	075b      	lsls	r3, r3, #29
 8004ef2:	d513      	bpl.n	8004f1c <__swsetup_r+0x80>
 8004ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ef6:	2900      	cmp	r1, #0
 8004ef8:	d008      	beq.n	8004f0c <__swsetup_r+0x70>
 8004efa:	0023      	movs	r3, r4
 8004efc:	3344      	adds	r3, #68	; 0x44
 8004efe:	4299      	cmp	r1, r3
 8004f00:	d002      	beq.n	8004f08 <__swsetup_r+0x6c>
 8004f02:	0030      	movs	r0, r6
 8004f04:	f000 f9bc 	bl	8005280 <_free_r>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	6363      	str	r3, [r4, #52]	; 0x34
 8004f0c:	2224      	movs	r2, #36	; 0x24
 8004f0e:	89a3      	ldrh	r3, [r4, #12]
 8004f10:	4393      	bics	r3, r2
 8004f12:	81a3      	strh	r3, [r4, #12]
 8004f14:	2300      	movs	r3, #0
 8004f16:	6063      	str	r3, [r4, #4]
 8004f18:	6923      	ldr	r3, [r4, #16]
 8004f1a:	6023      	str	r3, [r4, #0]
 8004f1c:	2308      	movs	r3, #8
 8004f1e:	89a2      	ldrh	r2, [r4, #12]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	81a3      	strh	r3, [r4, #12]
 8004f24:	6923      	ldr	r3, [r4, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10b      	bne.n	8004f42 <__swsetup_r+0xa6>
 8004f2a:	21a0      	movs	r1, #160	; 0xa0
 8004f2c:	2280      	movs	r2, #128	; 0x80
 8004f2e:	89a3      	ldrh	r3, [r4, #12]
 8004f30:	0089      	lsls	r1, r1, #2
 8004f32:	0092      	lsls	r2, r2, #2
 8004f34:	400b      	ands	r3, r1
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d003      	beq.n	8004f42 <__swsetup_r+0xa6>
 8004f3a:	0021      	movs	r1, r4
 8004f3c:	0030      	movs	r0, r6
 8004f3e:	f000 f93f 	bl	80051c0 <__smakebuf_r>
 8004f42:	220c      	movs	r2, #12
 8004f44:	5ea3      	ldrsh	r3, [r4, r2]
 8004f46:	2001      	movs	r0, #1
 8004f48:	001a      	movs	r2, r3
 8004f4a:	b299      	uxth	r1, r3
 8004f4c:	4002      	ands	r2, r0
 8004f4e:	4203      	tst	r3, r0
 8004f50:	d00f      	beq.n	8004f72 <__swsetup_r+0xd6>
 8004f52:	2200      	movs	r2, #0
 8004f54:	60a2      	str	r2, [r4, #8]
 8004f56:	6962      	ldr	r2, [r4, #20]
 8004f58:	4252      	negs	r2, r2
 8004f5a:	61a2      	str	r2, [r4, #24]
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	6922      	ldr	r2, [r4, #16]
 8004f60:	4282      	cmp	r2, r0
 8004f62:	d1ba      	bne.n	8004eda <__swsetup_r+0x3e>
 8004f64:	060a      	lsls	r2, r1, #24
 8004f66:	d5b8      	bpl.n	8004eda <__swsetup_r+0x3e>
 8004f68:	2240      	movs	r2, #64	; 0x40
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	81a3      	strh	r3, [r4, #12]
 8004f6e:	3801      	subs	r0, #1
 8004f70:	e7b3      	b.n	8004eda <__swsetup_r+0x3e>
 8004f72:	0788      	lsls	r0, r1, #30
 8004f74:	d400      	bmi.n	8004f78 <__swsetup_r+0xdc>
 8004f76:	6962      	ldr	r2, [r4, #20]
 8004f78:	60a2      	str	r2, [r4, #8]
 8004f7a:	e7ef      	b.n	8004f5c <__swsetup_r+0xc0>
 8004f7c:	20000028 	.word	0x20000028
 8004f80:	080055d8 	.word	0x080055d8
 8004f84:	080055f8 	.word	0x080055f8
 8004f88:	080055b8 	.word	0x080055b8

08004f8c <_close_r>:
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	b570      	push	{r4, r5, r6, lr}
 8004f90:	4d06      	ldr	r5, [pc, #24]	; (8004fac <_close_r+0x20>)
 8004f92:	0004      	movs	r4, r0
 8004f94:	0008      	movs	r0, r1
 8004f96:	602b      	str	r3, [r5, #0]
 8004f98:	f7fc f82f 	bl	8000ffa <_close>
 8004f9c:	1c43      	adds	r3, r0, #1
 8004f9e:	d103      	bne.n	8004fa8 <_close_r+0x1c>
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d000      	beq.n	8004fa8 <_close_r+0x1c>
 8004fa6:	6023      	str	r3, [r4, #0]
 8004fa8:	bd70      	pop	{r4, r5, r6, pc}
 8004faa:	46c0      	nop			; (mov r8, r8)
 8004fac:	200001d0 	.word	0x200001d0

08004fb0 <__sflush_r>:
 8004fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fb2:	898b      	ldrh	r3, [r1, #12]
 8004fb4:	0005      	movs	r5, r0
 8004fb6:	000c      	movs	r4, r1
 8004fb8:	071a      	lsls	r2, r3, #28
 8004fba:	d45f      	bmi.n	800507c <__sflush_r+0xcc>
 8004fbc:	684a      	ldr	r2, [r1, #4]
 8004fbe:	2a00      	cmp	r2, #0
 8004fc0:	dc04      	bgt.n	8004fcc <__sflush_r+0x1c>
 8004fc2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004fc4:	2a00      	cmp	r2, #0
 8004fc6:	dc01      	bgt.n	8004fcc <__sflush_r+0x1c>
 8004fc8:	2000      	movs	r0, #0
 8004fca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004fcc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004fce:	2f00      	cmp	r7, #0
 8004fd0:	d0fa      	beq.n	8004fc8 <__sflush_r+0x18>
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2180      	movs	r1, #128	; 0x80
 8004fd6:	682e      	ldr	r6, [r5, #0]
 8004fd8:	602a      	str	r2, [r5, #0]
 8004fda:	001a      	movs	r2, r3
 8004fdc:	0149      	lsls	r1, r1, #5
 8004fde:	400a      	ands	r2, r1
 8004fe0:	420b      	tst	r3, r1
 8004fe2:	d034      	beq.n	800504e <__sflush_r+0x9e>
 8004fe4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fe6:	89a3      	ldrh	r3, [r4, #12]
 8004fe8:	075b      	lsls	r3, r3, #29
 8004fea:	d506      	bpl.n	8004ffa <__sflush_r+0x4a>
 8004fec:	6863      	ldr	r3, [r4, #4]
 8004fee:	1ac0      	subs	r0, r0, r3
 8004ff0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <__sflush_r+0x4a>
 8004ff6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ff8:	1ac0      	subs	r0, r0, r3
 8004ffa:	0002      	movs	r2, r0
 8004ffc:	6a21      	ldr	r1, [r4, #32]
 8004ffe:	2300      	movs	r3, #0
 8005000:	0028      	movs	r0, r5
 8005002:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005004:	47b8      	blx	r7
 8005006:	89a1      	ldrh	r1, [r4, #12]
 8005008:	1c43      	adds	r3, r0, #1
 800500a:	d106      	bne.n	800501a <__sflush_r+0x6a>
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	2b1d      	cmp	r3, #29
 8005010:	d831      	bhi.n	8005076 <__sflush_r+0xc6>
 8005012:	4a2c      	ldr	r2, [pc, #176]	; (80050c4 <__sflush_r+0x114>)
 8005014:	40da      	lsrs	r2, r3
 8005016:	07d3      	lsls	r3, r2, #31
 8005018:	d52d      	bpl.n	8005076 <__sflush_r+0xc6>
 800501a:	2300      	movs	r3, #0
 800501c:	6063      	str	r3, [r4, #4]
 800501e:	6923      	ldr	r3, [r4, #16]
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	04cb      	lsls	r3, r1, #19
 8005024:	d505      	bpl.n	8005032 <__sflush_r+0x82>
 8005026:	1c43      	adds	r3, r0, #1
 8005028:	d102      	bne.n	8005030 <__sflush_r+0x80>
 800502a:	682b      	ldr	r3, [r5, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d100      	bne.n	8005032 <__sflush_r+0x82>
 8005030:	6560      	str	r0, [r4, #84]	; 0x54
 8005032:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005034:	602e      	str	r6, [r5, #0]
 8005036:	2900      	cmp	r1, #0
 8005038:	d0c6      	beq.n	8004fc8 <__sflush_r+0x18>
 800503a:	0023      	movs	r3, r4
 800503c:	3344      	adds	r3, #68	; 0x44
 800503e:	4299      	cmp	r1, r3
 8005040:	d002      	beq.n	8005048 <__sflush_r+0x98>
 8005042:	0028      	movs	r0, r5
 8005044:	f000 f91c 	bl	8005280 <_free_r>
 8005048:	2000      	movs	r0, #0
 800504a:	6360      	str	r0, [r4, #52]	; 0x34
 800504c:	e7bd      	b.n	8004fca <__sflush_r+0x1a>
 800504e:	2301      	movs	r3, #1
 8005050:	0028      	movs	r0, r5
 8005052:	6a21      	ldr	r1, [r4, #32]
 8005054:	47b8      	blx	r7
 8005056:	1c43      	adds	r3, r0, #1
 8005058:	d1c5      	bne.n	8004fe6 <__sflush_r+0x36>
 800505a:	682b      	ldr	r3, [r5, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0c2      	beq.n	8004fe6 <__sflush_r+0x36>
 8005060:	2b1d      	cmp	r3, #29
 8005062:	d001      	beq.n	8005068 <__sflush_r+0xb8>
 8005064:	2b16      	cmp	r3, #22
 8005066:	d101      	bne.n	800506c <__sflush_r+0xbc>
 8005068:	602e      	str	r6, [r5, #0]
 800506a:	e7ad      	b.n	8004fc8 <__sflush_r+0x18>
 800506c:	2340      	movs	r3, #64	; 0x40
 800506e:	89a2      	ldrh	r2, [r4, #12]
 8005070:	4313      	orrs	r3, r2
 8005072:	81a3      	strh	r3, [r4, #12]
 8005074:	e7a9      	b.n	8004fca <__sflush_r+0x1a>
 8005076:	2340      	movs	r3, #64	; 0x40
 8005078:	430b      	orrs	r3, r1
 800507a:	e7fa      	b.n	8005072 <__sflush_r+0xc2>
 800507c:	690f      	ldr	r7, [r1, #16]
 800507e:	2f00      	cmp	r7, #0
 8005080:	d0a2      	beq.n	8004fc8 <__sflush_r+0x18>
 8005082:	680a      	ldr	r2, [r1, #0]
 8005084:	600f      	str	r7, [r1, #0]
 8005086:	1bd2      	subs	r2, r2, r7
 8005088:	9201      	str	r2, [sp, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	079b      	lsls	r3, r3, #30
 800508e:	d100      	bne.n	8005092 <__sflush_r+0xe2>
 8005090:	694a      	ldr	r2, [r1, #20]
 8005092:	60a2      	str	r2, [r4, #8]
 8005094:	9b01      	ldr	r3, [sp, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	dc00      	bgt.n	800509c <__sflush_r+0xec>
 800509a:	e795      	b.n	8004fc8 <__sflush_r+0x18>
 800509c:	003a      	movs	r2, r7
 800509e:	0028      	movs	r0, r5
 80050a0:	9b01      	ldr	r3, [sp, #4]
 80050a2:	6a21      	ldr	r1, [r4, #32]
 80050a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050a6:	47b0      	blx	r6
 80050a8:	2800      	cmp	r0, #0
 80050aa:	dc06      	bgt.n	80050ba <__sflush_r+0x10a>
 80050ac:	2340      	movs	r3, #64	; 0x40
 80050ae:	2001      	movs	r0, #1
 80050b0:	89a2      	ldrh	r2, [r4, #12]
 80050b2:	4240      	negs	r0, r0
 80050b4:	4313      	orrs	r3, r2
 80050b6:	81a3      	strh	r3, [r4, #12]
 80050b8:	e787      	b.n	8004fca <__sflush_r+0x1a>
 80050ba:	9b01      	ldr	r3, [sp, #4]
 80050bc:	183f      	adds	r7, r7, r0
 80050be:	1a1b      	subs	r3, r3, r0
 80050c0:	9301      	str	r3, [sp, #4]
 80050c2:	e7e7      	b.n	8005094 <__sflush_r+0xe4>
 80050c4:	20400001 	.word	0x20400001

080050c8 <_fflush_r>:
 80050c8:	690b      	ldr	r3, [r1, #16]
 80050ca:	b570      	push	{r4, r5, r6, lr}
 80050cc:	0005      	movs	r5, r0
 80050ce:	000c      	movs	r4, r1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d102      	bne.n	80050da <_fflush_r+0x12>
 80050d4:	2500      	movs	r5, #0
 80050d6:	0028      	movs	r0, r5
 80050d8:	bd70      	pop	{r4, r5, r6, pc}
 80050da:	2800      	cmp	r0, #0
 80050dc:	d004      	beq.n	80050e8 <_fflush_r+0x20>
 80050de:	6983      	ldr	r3, [r0, #24]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <_fflush_r+0x20>
 80050e4:	f7ff f9f2 	bl	80044cc <__sinit>
 80050e8:	4b14      	ldr	r3, [pc, #80]	; (800513c <_fflush_r+0x74>)
 80050ea:	429c      	cmp	r4, r3
 80050ec:	d11b      	bne.n	8005126 <_fflush_r+0x5e>
 80050ee:	686c      	ldr	r4, [r5, #4]
 80050f0:	220c      	movs	r2, #12
 80050f2:	5ea3      	ldrsh	r3, [r4, r2]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0ed      	beq.n	80050d4 <_fflush_r+0xc>
 80050f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050fa:	07d2      	lsls	r2, r2, #31
 80050fc:	d404      	bmi.n	8005108 <_fflush_r+0x40>
 80050fe:	059b      	lsls	r3, r3, #22
 8005100:	d402      	bmi.n	8005108 <_fflush_r+0x40>
 8005102:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005104:	f7ff fa83 	bl	800460e <__retarget_lock_acquire_recursive>
 8005108:	0028      	movs	r0, r5
 800510a:	0021      	movs	r1, r4
 800510c:	f7ff ff50 	bl	8004fb0 <__sflush_r>
 8005110:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005112:	0005      	movs	r5, r0
 8005114:	07db      	lsls	r3, r3, #31
 8005116:	d4de      	bmi.n	80050d6 <_fflush_r+0xe>
 8005118:	89a3      	ldrh	r3, [r4, #12]
 800511a:	059b      	lsls	r3, r3, #22
 800511c:	d4db      	bmi.n	80050d6 <_fflush_r+0xe>
 800511e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005120:	f7ff fa76 	bl	8004610 <__retarget_lock_release_recursive>
 8005124:	e7d7      	b.n	80050d6 <_fflush_r+0xe>
 8005126:	4b06      	ldr	r3, [pc, #24]	; (8005140 <_fflush_r+0x78>)
 8005128:	429c      	cmp	r4, r3
 800512a:	d101      	bne.n	8005130 <_fflush_r+0x68>
 800512c:	68ac      	ldr	r4, [r5, #8]
 800512e:	e7df      	b.n	80050f0 <_fflush_r+0x28>
 8005130:	4b04      	ldr	r3, [pc, #16]	; (8005144 <_fflush_r+0x7c>)
 8005132:	429c      	cmp	r4, r3
 8005134:	d1dc      	bne.n	80050f0 <_fflush_r+0x28>
 8005136:	68ec      	ldr	r4, [r5, #12]
 8005138:	e7da      	b.n	80050f0 <_fflush_r+0x28>
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	080055d8 	.word	0x080055d8
 8005140:	080055f8 	.word	0x080055f8
 8005144:	080055b8 	.word	0x080055b8

08005148 <_lseek_r>:
 8005148:	b570      	push	{r4, r5, r6, lr}
 800514a:	0004      	movs	r4, r0
 800514c:	0008      	movs	r0, r1
 800514e:	0011      	movs	r1, r2
 8005150:	001a      	movs	r2, r3
 8005152:	2300      	movs	r3, #0
 8005154:	4d05      	ldr	r5, [pc, #20]	; (800516c <_lseek_r+0x24>)
 8005156:	602b      	str	r3, [r5, #0]
 8005158:	f7fb ff70 	bl	800103c <_lseek>
 800515c:	1c43      	adds	r3, r0, #1
 800515e:	d103      	bne.n	8005168 <_lseek_r+0x20>
 8005160:	682b      	ldr	r3, [r5, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d000      	beq.n	8005168 <_lseek_r+0x20>
 8005166:	6023      	str	r3, [r4, #0]
 8005168:	bd70      	pop	{r4, r5, r6, pc}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	200001d0 	.word	0x200001d0

08005170 <__swhatbuf_r>:
 8005170:	b570      	push	{r4, r5, r6, lr}
 8005172:	000e      	movs	r6, r1
 8005174:	001d      	movs	r5, r3
 8005176:	230e      	movs	r3, #14
 8005178:	5ec9      	ldrsh	r1, [r1, r3]
 800517a:	0014      	movs	r4, r2
 800517c:	b096      	sub	sp, #88	; 0x58
 800517e:	2900      	cmp	r1, #0
 8005180:	da08      	bge.n	8005194 <__swhatbuf_r+0x24>
 8005182:	220c      	movs	r2, #12
 8005184:	5eb3      	ldrsh	r3, [r6, r2]
 8005186:	2200      	movs	r2, #0
 8005188:	602a      	str	r2, [r5, #0]
 800518a:	061b      	lsls	r3, r3, #24
 800518c:	d411      	bmi.n	80051b2 <__swhatbuf_r+0x42>
 800518e:	2380      	movs	r3, #128	; 0x80
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	e00f      	b.n	80051b4 <__swhatbuf_r+0x44>
 8005194:	466a      	mov	r2, sp
 8005196:	f000 f8d1 	bl	800533c <_fstat_r>
 800519a:	2800      	cmp	r0, #0
 800519c:	dbf1      	blt.n	8005182 <__swhatbuf_r+0x12>
 800519e:	23f0      	movs	r3, #240	; 0xf0
 80051a0:	9901      	ldr	r1, [sp, #4]
 80051a2:	021b      	lsls	r3, r3, #8
 80051a4:	4019      	ands	r1, r3
 80051a6:	4b05      	ldr	r3, [pc, #20]	; (80051bc <__swhatbuf_r+0x4c>)
 80051a8:	18c9      	adds	r1, r1, r3
 80051aa:	424b      	negs	r3, r1
 80051ac:	4159      	adcs	r1, r3
 80051ae:	6029      	str	r1, [r5, #0]
 80051b0:	e7ed      	b.n	800518e <__swhatbuf_r+0x1e>
 80051b2:	2340      	movs	r3, #64	; 0x40
 80051b4:	2000      	movs	r0, #0
 80051b6:	6023      	str	r3, [r4, #0]
 80051b8:	b016      	add	sp, #88	; 0x58
 80051ba:	bd70      	pop	{r4, r5, r6, pc}
 80051bc:	ffffe000 	.word	0xffffe000

080051c0 <__smakebuf_r>:
 80051c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051c2:	2602      	movs	r6, #2
 80051c4:	898b      	ldrh	r3, [r1, #12]
 80051c6:	0005      	movs	r5, r0
 80051c8:	000c      	movs	r4, r1
 80051ca:	4233      	tst	r3, r6
 80051cc:	d006      	beq.n	80051dc <__smakebuf_r+0x1c>
 80051ce:	0023      	movs	r3, r4
 80051d0:	3347      	adds	r3, #71	; 0x47
 80051d2:	6023      	str	r3, [r4, #0]
 80051d4:	6123      	str	r3, [r4, #16]
 80051d6:	2301      	movs	r3, #1
 80051d8:	6163      	str	r3, [r4, #20]
 80051da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80051dc:	466a      	mov	r2, sp
 80051de:	ab01      	add	r3, sp, #4
 80051e0:	f7ff ffc6 	bl	8005170 <__swhatbuf_r>
 80051e4:	9900      	ldr	r1, [sp, #0]
 80051e6:	0007      	movs	r7, r0
 80051e8:	0028      	movs	r0, r5
 80051ea:	f7ff fa35 	bl	8004658 <_malloc_r>
 80051ee:	2800      	cmp	r0, #0
 80051f0:	d108      	bne.n	8005204 <__smakebuf_r+0x44>
 80051f2:	220c      	movs	r2, #12
 80051f4:	5ea3      	ldrsh	r3, [r4, r2]
 80051f6:	059a      	lsls	r2, r3, #22
 80051f8:	d4ef      	bmi.n	80051da <__smakebuf_r+0x1a>
 80051fa:	2203      	movs	r2, #3
 80051fc:	4393      	bics	r3, r2
 80051fe:	431e      	orrs	r6, r3
 8005200:	81a6      	strh	r6, [r4, #12]
 8005202:	e7e4      	b.n	80051ce <__smakebuf_r+0xe>
 8005204:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <__smakebuf_r+0x84>)
 8005206:	62ab      	str	r3, [r5, #40]	; 0x28
 8005208:	2380      	movs	r3, #128	; 0x80
 800520a:	89a2      	ldrh	r2, [r4, #12]
 800520c:	6020      	str	r0, [r4, #0]
 800520e:	4313      	orrs	r3, r2
 8005210:	81a3      	strh	r3, [r4, #12]
 8005212:	9b00      	ldr	r3, [sp, #0]
 8005214:	6120      	str	r0, [r4, #16]
 8005216:	6163      	str	r3, [r4, #20]
 8005218:	9b01      	ldr	r3, [sp, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00d      	beq.n	800523a <__smakebuf_r+0x7a>
 800521e:	0028      	movs	r0, r5
 8005220:	230e      	movs	r3, #14
 8005222:	5ee1      	ldrsh	r1, [r4, r3]
 8005224:	f000 f89c 	bl	8005360 <_isatty_r>
 8005228:	2800      	cmp	r0, #0
 800522a:	d006      	beq.n	800523a <__smakebuf_r+0x7a>
 800522c:	2203      	movs	r2, #3
 800522e:	89a3      	ldrh	r3, [r4, #12]
 8005230:	4393      	bics	r3, r2
 8005232:	001a      	movs	r2, r3
 8005234:	2301      	movs	r3, #1
 8005236:	4313      	orrs	r3, r2
 8005238:	81a3      	strh	r3, [r4, #12]
 800523a:	89a0      	ldrh	r0, [r4, #12]
 800523c:	4307      	orrs	r7, r0
 800523e:	81a7      	strh	r7, [r4, #12]
 8005240:	e7cb      	b.n	80051da <__smakebuf_r+0x1a>
 8005242:	46c0      	nop			; (mov r8, r8)
 8005244:	08004451 	.word	0x08004451

08005248 <memchr>:
 8005248:	b2c9      	uxtb	r1, r1
 800524a:	1882      	adds	r2, r0, r2
 800524c:	4290      	cmp	r0, r2
 800524e:	d101      	bne.n	8005254 <memchr+0xc>
 8005250:	2000      	movs	r0, #0
 8005252:	4770      	bx	lr
 8005254:	7803      	ldrb	r3, [r0, #0]
 8005256:	428b      	cmp	r3, r1
 8005258:	d0fb      	beq.n	8005252 <memchr+0xa>
 800525a:	3001      	adds	r0, #1
 800525c:	e7f6      	b.n	800524c <memchr+0x4>
	...

08005260 <__malloc_lock>:
 8005260:	b510      	push	{r4, lr}
 8005262:	4802      	ldr	r0, [pc, #8]	; (800526c <__malloc_lock+0xc>)
 8005264:	f7ff f9d3 	bl	800460e <__retarget_lock_acquire_recursive>
 8005268:	bd10      	pop	{r4, pc}
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	200001c4 	.word	0x200001c4

08005270 <__malloc_unlock>:
 8005270:	b510      	push	{r4, lr}
 8005272:	4802      	ldr	r0, [pc, #8]	; (800527c <__malloc_unlock+0xc>)
 8005274:	f7ff f9cc 	bl	8004610 <__retarget_lock_release_recursive>
 8005278:	bd10      	pop	{r4, pc}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	200001c4 	.word	0x200001c4

08005280 <_free_r>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	0005      	movs	r5, r0
 8005284:	2900      	cmp	r1, #0
 8005286:	d010      	beq.n	80052aa <_free_r+0x2a>
 8005288:	1f0c      	subs	r4, r1, #4
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	da00      	bge.n	8005292 <_free_r+0x12>
 8005290:	18e4      	adds	r4, r4, r3
 8005292:	0028      	movs	r0, r5
 8005294:	f7ff ffe4 	bl	8005260 <__malloc_lock>
 8005298:	4a1d      	ldr	r2, [pc, #116]	; (8005310 <_free_r+0x90>)
 800529a:	6813      	ldr	r3, [r2, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d105      	bne.n	80052ac <_free_r+0x2c>
 80052a0:	6063      	str	r3, [r4, #4]
 80052a2:	6014      	str	r4, [r2, #0]
 80052a4:	0028      	movs	r0, r5
 80052a6:	f7ff ffe3 	bl	8005270 <__malloc_unlock>
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
 80052ac:	42a3      	cmp	r3, r4
 80052ae:	d908      	bls.n	80052c2 <_free_r+0x42>
 80052b0:	6821      	ldr	r1, [r4, #0]
 80052b2:	1860      	adds	r0, r4, r1
 80052b4:	4283      	cmp	r3, r0
 80052b6:	d1f3      	bne.n	80052a0 <_free_r+0x20>
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	1841      	adds	r1, r0, r1
 80052be:	6021      	str	r1, [r4, #0]
 80052c0:	e7ee      	b.n	80052a0 <_free_r+0x20>
 80052c2:	001a      	movs	r2, r3
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <_free_r+0x4e>
 80052ca:	42a3      	cmp	r3, r4
 80052cc:	d9f9      	bls.n	80052c2 <_free_r+0x42>
 80052ce:	6811      	ldr	r1, [r2, #0]
 80052d0:	1850      	adds	r0, r2, r1
 80052d2:	42a0      	cmp	r0, r4
 80052d4:	d10b      	bne.n	80052ee <_free_r+0x6e>
 80052d6:	6820      	ldr	r0, [r4, #0]
 80052d8:	1809      	adds	r1, r1, r0
 80052da:	1850      	adds	r0, r2, r1
 80052dc:	6011      	str	r1, [r2, #0]
 80052de:	4283      	cmp	r3, r0
 80052e0:	d1e0      	bne.n	80052a4 <_free_r+0x24>
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	1841      	adds	r1, r0, r1
 80052e8:	6011      	str	r1, [r2, #0]
 80052ea:	6053      	str	r3, [r2, #4]
 80052ec:	e7da      	b.n	80052a4 <_free_r+0x24>
 80052ee:	42a0      	cmp	r0, r4
 80052f0:	d902      	bls.n	80052f8 <_free_r+0x78>
 80052f2:	230c      	movs	r3, #12
 80052f4:	602b      	str	r3, [r5, #0]
 80052f6:	e7d5      	b.n	80052a4 <_free_r+0x24>
 80052f8:	6821      	ldr	r1, [r4, #0]
 80052fa:	1860      	adds	r0, r4, r1
 80052fc:	4283      	cmp	r3, r0
 80052fe:	d103      	bne.n	8005308 <_free_r+0x88>
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	1841      	adds	r1, r0, r1
 8005306:	6021      	str	r1, [r4, #0]
 8005308:	6063      	str	r3, [r4, #4]
 800530a:	6054      	str	r4, [r2, #4]
 800530c:	e7ca      	b.n	80052a4 <_free_r+0x24>
 800530e:	46c0      	nop			; (mov r8, r8)
 8005310:	200001c8 	.word	0x200001c8

08005314 <_read_r>:
 8005314:	b570      	push	{r4, r5, r6, lr}
 8005316:	0004      	movs	r4, r0
 8005318:	0008      	movs	r0, r1
 800531a:	0011      	movs	r1, r2
 800531c:	001a      	movs	r2, r3
 800531e:	2300      	movs	r3, #0
 8005320:	4d05      	ldr	r5, [pc, #20]	; (8005338 <_read_r+0x24>)
 8005322:	602b      	str	r3, [r5, #0]
 8005324:	f7fb fe30 	bl	8000f88 <_read>
 8005328:	1c43      	adds	r3, r0, #1
 800532a:	d103      	bne.n	8005334 <_read_r+0x20>
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d000      	beq.n	8005334 <_read_r+0x20>
 8005332:	6023      	str	r3, [r4, #0]
 8005334:	bd70      	pop	{r4, r5, r6, pc}
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	200001d0 	.word	0x200001d0

0800533c <_fstat_r>:
 800533c:	2300      	movs	r3, #0
 800533e:	b570      	push	{r4, r5, r6, lr}
 8005340:	4d06      	ldr	r5, [pc, #24]	; (800535c <_fstat_r+0x20>)
 8005342:	0004      	movs	r4, r0
 8005344:	0008      	movs	r0, r1
 8005346:	0011      	movs	r1, r2
 8005348:	602b      	str	r3, [r5, #0]
 800534a:	f7fb fe60 	bl	800100e <_fstat>
 800534e:	1c43      	adds	r3, r0, #1
 8005350:	d103      	bne.n	800535a <_fstat_r+0x1e>
 8005352:	682b      	ldr	r3, [r5, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d000      	beq.n	800535a <_fstat_r+0x1e>
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	bd70      	pop	{r4, r5, r6, pc}
 800535c:	200001d0 	.word	0x200001d0

08005360 <_isatty_r>:
 8005360:	2300      	movs	r3, #0
 8005362:	b570      	push	{r4, r5, r6, lr}
 8005364:	4d06      	ldr	r5, [pc, #24]	; (8005380 <_isatty_r+0x20>)
 8005366:	0004      	movs	r4, r0
 8005368:	0008      	movs	r0, r1
 800536a:	602b      	str	r3, [r5, #0]
 800536c:	f7fb fe5d 	bl	800102a <_isatty>
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	d103      	bne.n	800537c <_isatty_r+0x1c>
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d000      	beq.n	800537c <_isatty_r+0x1c>
 800537a:	6023      	str	r3, [r4, #0]
 800537c:	bd70      	pop	{r4, r5, r6, pc}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	200001d0 	.word	0x200001d0

08005384 <_init>:
 8005384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538a:	bc08      	pop	{r3}
 800538c:	469e      	mov	lr, r3
 800538e:	4770      	bx	lr

08005390 <_fini>:
 8005390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005396:	bc08      	pop	{r3}
 8005398:	469e      	mov	lr, r3
 800539a:	4770      	bx	lr
