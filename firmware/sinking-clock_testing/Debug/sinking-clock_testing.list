
sinking-clock_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000479c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08004858  08004858  00014858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800497c  0800497c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800497c  0800497c  0001497c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004984  08004984  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004984  08004984  00014984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004988  08004988  00014988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800498c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000070  080049fc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  080049fc  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109e2  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002385  00000000  00000000  00030a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00032e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  00033be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bc3  00000000  00000000  000348e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011412  00000000  00000000  0004c4ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093603  00000000  00000000  0005d8bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0ec0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003994  00000000  00000000  000f0f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004840 	.word	0x08004840

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08004840 	.word	0x08004840

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	469b      	mov	fp, r3
 80002a6:	d433      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a8:	465a      	mov	r2, fp
 80002aa:	4653      	mov	r3, sl
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83a      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e078      	b.n	80003b4 <__udivmoddi4+0x144>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e075      	b.n	80003ba <__udivmoddi4+0x14a>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e028      	b.n	800033a <__udivmoddi4+0xca>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	2320      	movs	r3, #32
 8000314:	1a9b      	subs	r3, r3, r2
 8000316:	4652      	mov	r2, sl
 8000318:	40da      	lsrs	r2, r3
 800031a:	4641      	mov	r1, r8
 800031c:	0013      	movs	r3, r2
 800031e:	464a      	mov	r2, r9
 8000320:	408a      	lsls	r2, r1
 8000322:	0017      	movs	r7, r2
 8000324:	4642      	mov	r2, r8
 8000326:	431f      	orrs	r7, r3
 8000328:	4653      	mov	r3, sl
 800032a:	4093      	lsls	r3, r2
 800032c:	001e      	movs	r6, r3
 800032e:	42af      	cmp	r7, r5
 8000330:	d9c4      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0d9      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000340:	07fb      	lsls	r3, r7, #31
 8000342:	0872      	lsrs	r2, r6, #1
 8000344:	431a      	orrs	r2, r3
 8000346:	4646      	mov	r6, r8
 8000348:	087b      	lsrs	r3, r7, #1
 800034a:	e00e      	b.n	800036a <__udivmoddi4+0xfa>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d101      	bne.n	8000354 <__udivmoddi4+0xe4>
 8000350:	42a2      	cmp	r2, r4
 8000352:	d80c      	bhi.n	800036e <__udivmoddi4+0xfe>
 8000354:	1aa4      	subs	r4, r4, r2
 8000356:	419d      	sbcs	r5, r3
 8000358:	2001      	movs	r0, #1
 800035a:	1924      	adds	r4, r4, r4
 800035c:	416d      	adcs	r5, r5
 800035e:	2100      	movs	r1, #0
 8000360:	3e01      	subs	r6, #1
 8000362:	1824      	adds	r4, r4, r0
 8000364:	414d      	adcs	r5, r1
 8000366:	2e00      	cmp	r6, #0
 8000368:	d006      	beq.n	8000378 <__udivmoddi4+0x108>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d9ee      	bls.n	800034c <__udivmoddi4+0xdc>
 800036e:	3e01      	subs	r6, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2e00      	cmp	r6, #0
 8000376:	d1f8      	bne.n	800036a <__udivmoddi4+0xfa>
 8000378:	9800      	ldr	r0, [sp, #0]
 800037a:	9901      	ldr	r1, [sp, #4]
 800037c:	465b      	mov	r3, fp
 800037e:	1900      	adds	r0, r0, r4
 8000380:	4169      	adcs	r1, r5
 8000382:	2b00      	cmp	r3, #0
 8000384:	db24      	blt.n	80003d0 <__udivmoddi4+0x160>
 8000386:	002b      	movs	r3, r5
 8000388:	465a      	mov	r2, fp
 800038a:	4644      	mov	r4, r8
 800038c:	40d3      	lsrs	r3, r2
 800038e:	002a      	movs	r2, r5
 8000390:	40e2      	lsrs	r2, r4
 8000392:	001c      	movs	r4, r3
 8000394:	465b      	mov	r3, fp
 8000396:	0015      	movs	r5, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	db2a      	blt.n	80003f2 <__udivmoddi4+0x182>
 800039c:	0026      	movs	r6, r4
 800039e:	409e      	lsls	r6, r3
 80003a0:	0033      	movs	r3, r6
 80003a2:	0026      	movs	r6, r4
 80003a4:	4647      	mov	r7, r8
 80003a6:	40be      	lsls	r6, r7
 80003a8:	0032      	movs	r2, r6
 80003aa:	1a80      	subs	r0, r0, r2
 80003ac:	4199      	sbcs	r1, r3
 80003ae:	9000      	str	r0, [sp, #0]
 80003b0:	9101      	str	r1, [sp, #4]
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b4:	42a3      	cmp	r3, r4
 80003b6:	d8bc      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80003b8:	e783      	b.n	80002c2 <__udivmoddi4+0x52>
 80003ba:	4642      	mov	r2, r8
 80003bc:	2320      	movs	r3, #32
 80003be:	2100      	movs	r1, #0
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	2200      	movs	r2, #0
 80003c4:	9100      	str	r1, [sp, #0]
 80003c6:	9201      	str	r2, [sp, #4]
 80003c8:	2201      	movs	r2, #1
 80003ca:	40da      	lsrs	r2, r3
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	e786      	b.n	80002de <__udivmoddi4+0x6e>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	1a9b      	subs	r3, r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	4646      	mov	r6, r8
 80003da:	409a      	lsls	r2, r3
 80003dc:	0023      	movs	r3, r4
 80003de:	40f3      	lsrs	r3, r6
 80003e0:	4644      	mov	r4, r8
 80003e2:	4313      	orrs	r3, r2
 80003e4:	002a      	movs	r2, r5
 80003e6:	40e2      	lsrs	r2, r4
 80003e8:	001c      	movs	r4, r3
 80003ea:	465b      	mov	r3, fp
 80003ec:	0015      	movs	r5, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dad4      	bge.n	800039c <__udivmoddi4+0x12c>
 80003f2:	4642      	mov	r2, r8
 80003f4:	002f      	movs	r7, r5
 80003f6:	2320      	movs	r3, #32
 80003f8:	0026      	movs	r6, r4
 80003fa:	4097      	lsls	r7, r2
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	40de      	lsrs	r6, r3
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7cd      	b.n	80003a2 <__udivmoddi4+0x132>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000464:	2301      	movs	r3, #1
 8000466:	425b      	negs	r3, r3
 8000468:	1d39      	adds	r1, r7, #4
 800046a:	4804      	ldr	r0, [pc, #16]	; (800047c <__io_putchar+0x20>)
 800046c:	2201      	movs	r2, #1
 800046e:	f002 fcff 	bl	8002e70 <HAL_UART_Transmit>
  return ch;
 8000472:	687b      	ldr	r3, [r7, #4]
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}
 800047c:	2000010c 	.word	0x2000010c

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b590      	push	{r4, r7, lr}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000486:	f000 fd37 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048a:	f000 f837 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048e:	f000 f9a1 	bl	80007d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000492:	f000 f96b 	bl	800076c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000496:	f000 f8bd 	bl	8000614 <MX_RTC_Init>
  MX_I2C1_Init();
 800049a:	f000 f87b 	bl	8000594 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOA, snoozeButtonPin);
 800049e:	2380      	movs	r3, #128	; 0x80
 80004a0:	011a      	lsls	r2, r3, #4
 80004a2:	1dfc      	adds	r4, r7, #7
 80004a4:	23a0      	movs	r3, #160	; 0xa0
 80004a6:	05db      	lsls	r3, r3, #23
 80004a8:	0011      	movs	r1, r2
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 f810 	bl	80014d0 <HAL_GPIO_ReadPin>
 80004b0:	0003      	movs	r3, r0
 80004b2:	7023      	strb	r3, [r4, #0]
	  if(pinState == GPIO_PIN_RESET) {
 80004b4:	1dfb      	adds	r3, r7, #7
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d10b      	bne.n	80004d4 <main+0x54>
	   		  HAL_GPIO_WritePin(GPIOB, displayLEDPin, GPIO_PIN_RESET);
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <main+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 f821 	bl	800150a <HAL_GPIO_WritePin>
	   		  printf("Pin State = %d\n\r", 0);
 80004c8:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <main+0x78>)
 80004ca:	2100      	movs	r1, #0
 80004cc:	0018      	movs	r0, r3
 80004ce:	f003 f9df 	bl	8003890 <iprintf>
 80004d2:	e00a      	b.n	80004ea <main+0x6a>
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOB, displayLEDPin, GPIO_PIN_SET);
 80004d4:	2180      	movs	r1, #128	; 0x80
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <main+0x74>)
 80004d8:	2201      	movs	r2, #1
 80004da:	0018      	movs	r0, r3
 80004dc:	f001 f815 	bl	800150a <HAL_GPIO_WritePin>
		  printf("Pin State = %d\n\r", 1);
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <main+0x78>)
 80004e2:	2101      	movs	r1, #1
 80004e4:	0018      	movs	r0, r3
 80004e6:	f003 f9d3 	bl	8003890 <iprintf>
	  }
	  HAL_Delay(100);
 80004ea:	2064      	movs	r0, #100	; 0x64
 80004ec:	f000 fd8a 	bl	8001004 <HAL_Delay>
  {
 80004f0:	e7d5      	b.n	800049e <main+0x1e>
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	50000400 	.word	0x50000400
 80004f8:	08004858 	.word	0x08004858

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b093      	sub	sp, #76	; 0x4c
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	2410      	movs	r4, #16
 8000504:	193b      	adds	r3, r7, r4
 8000506:	0018      	movs	r0, r3
 8000508:	2338      	movs	r3, #56	; 0x38
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f003 f9b7 	bl	8003880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000512:	003b      	movs	r3, r7
 8000514:	0018      	movs	r0, r3
 8000516:	2310      	movs	r3, #16
 8000518:	001a      	movs	r2, r3
 800051a:	2100      	movs	r1, #0
 800051c:	f003 f9b0 	bl	8003880 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	0018      	movs	r0, r3
 8000526:	f001 f98b 	bl	8001840 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	220a      	movs	r2, #10
 800052e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000530:	193b      	adds	r3, r7, r4
 8000532:	2280      	movs	r2, #128	; 0x80
 8000534:	0052      	lsls	r2, r2, #1
 8000536:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000538:	0021      	movs	r1, r4
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2240      	movs	r2, #64	; 0x40
 8000544:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2201      	movs	r2, #1
 800054a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000552:	187b      	adds	r3, r7, r1
 8000554:	0018      	movs	r0, r3
 8000556:	f001 f9bf 	bl	80018d8 <HAL_RCC_OscConfig>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800055e:	f000 fa97 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000562:	003b      	movs	r3, r7
 8000564:	2207      	movs	r2, #7
 8000566:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000568:	003b      	movs	r3, r7
 800056a:	2200      	movs	r2, #0
 800056c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056e:	003b      	movs	r3, r7
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000574:	003b      	movs	r3, r7
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800057a:	003b      	movs	r3, r7
 800057c:	2100      	movs	r1, #0
 800057e:	0018      	movs	r0, r3
 8000580:	f001 fcc4 	bl	8001f0c <HAL_RCC_ClockConfig>
 8000584:	1e03      	subs	r3, r0, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000588:	f000 fa82 	bl	8000a90 <Error_Handler>
  }
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b013      	add	sp, #76	; 0x4c
 8000592:	bd90      	pop	{r4, r7, pc}

08000594 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <MX_I2C1_Init+0x74>)
 800059a:	4a1c      	ldr	r2, [pc, #112]	; (800060c <MX_I2C1_Init+0x78>)
 800059c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MX_I2C1_Init+0x74>)
 80005a0:	4a1b      	ldr	r2, [pc, #108]	; (8000610 <MX_I2C1_Init+0x7c>)
 80005a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <MX_I2C1_Init+0x74>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_I2C1_Init+0x74>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <MX_I2C1_Init+0x74>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_I2C1_Init+0x74>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <MX_I2C1_Init+0x74>)
 80005be:	2200      	movs	r2, #0
 80005c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_I2C1_Init+0x74>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_I2C1_Init+0x74>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_I2C1_Init+0x74>)
 80005d0:	0018      	movs	r0, r3
 80005d2:	f001 f807 	bl	80015e4 <HAL_I2C_Init>
 80005d6:	1e03      	subs	r3, r0, #0
 80005d8:	d001      	beq.n	80005de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005da:	f000 fa59 	bl	8000a90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <MX_I2C1_Init+0x74>)
 80005e0:	2100      	movs	r1, #0
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 f894 	bl	8001710 <HAL_I2CEx_ConfigAnalogFilter>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005ec:	f000 fa50 	bl	8000a90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <MX_I2C1_Init+0x74>)
 80005f2:	2100      	movs	r1, #0
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 f8d7 	bl	80017a8 <HAL_I2CEx_ConfigDigitalFilter>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005fe:	f000 fa47 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	2000008c 	.word	0x2000008c
 800060c:	40005400 	.word	0x40005400
 8000610:	0010061a 	.word	0x0010061a

08000614 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b090      	sub	sp, #64	; 0x40
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800061a:	232c      	movs	r3, #44	; 0x2c
 800061c:	18fb      	adds	r3, r7, r3
 800061e:	0018      	movs	r0, r3
 8000620:	2314      	movs	r3, #20
 8000622:	001a      	movs	r2, r3
 8000624:	2100      	movs	r1, #0
 8000626:	f003 f92b 	bl	8003880 <memset>
  RTC_DateTypeDef sDate = {0};
 800062a:	2328      	movs	r3, #40	; 0x28
 800062c:	18fb      	adds	r3, r7, r3
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000632:	003b      	movs	r3, r7
 8000634:	0018      	movs	r0, r3
 8000636:	2328      	movs	r3, #40	; 0x28
 8000638:	001a      	movs	r2, r3
 800063a:	2100      	movs	r1, #0
 800063c:	f003 f920 	bl	8003880 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000640:	4b47      	ldr	r3, [pc, #284]	; (8000760 <MX_RTC_Init+0x14c>)
 8000642:	4a48      	ldr	r2, [pc, #288]	; (8000764 <MX_RTC_Init+0x150>)
 8000644:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000646:	4b46      	ldr	r3, [pc, #280]	; (8000760 <MX_RTC_Init+0x14c>)
 8000648:	2240      	movs	r2, #64	; 0x40
 800064a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800064c:	4b44      	ldr	r3, [pc, #272]	; (8000760 <MX_RTC_Init+0x14c>)
 800064e:	227f      	movs	r2, #127	; 0x7f
 8000650:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000652:	4b43      	ldr	r3, [pc, #268]	; (8000760 <MX_RTC_Init+0x14c>)
 8000654:	22ff      	movs	r2, #255	; 0xff
 8000656:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000658:	4b41      	ldr	r3, [pc, #260]	; (8000760 <MX_RTC_Init+0x14c>)
 800065a:	2200      	movs	r2, #0
 800065c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800065e:	4b40      	ldr	r3, [pc, #256]	; (8000760 <MX_RTC_Init+0x14c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000664:	4b3e      	ldr	r3, [pc, #248]	; (8000760 <MX_RTC_Init+0x14c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800066a:	4b3d      	ldr	r3, [pc, #244]	; (8000760 <MX_RTC_Init+0x14c>)
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	05d2      	lsls	r2, r2, #23
 8000670:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000672:	4b3b      	ldr	r3, [pc, #236]	; (8000760 <MX_RTC_Init+0x14c>)
 8000674:	2200      	movs	r2, #0
 8000676:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000678:	4b39      	ldr	r3, [pc, #228]	; (8000760 <MX_RTC_Init+0x14c>)
 800067a:	0018      	movs	r0, r3
 800067c:	f001 ff6a 	bl	8002554 <HAL_RTC_Init>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d001      	beq.n	8000688 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000684:	f000 fa04 	bl	8000a90 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000688:	212c      	movs	r1, #44	; 0x2c
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2200      	movs	r2, #0
 8000694:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2200      	movs	r2, #0
 800069a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006b4:	1879      	adds	r1, r7, r1
 80006b6:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <MX_RTC_Init+0x14c>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	0018      	movs	r0, r3
 80006bc:	f001 ffec 	bl	8002698 <HAL_RTC_SetTime>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d001      	beq.n	80006c8 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 80006c4:	f000 f9e4 	bl	8000a90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006c8:	2128      	movs	r1, #40	; 0x28
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2201      	movs	r2, #1
 80006d4:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2201      	movs	r2, #1
 80006da:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2200      	movs	r2, #0
 80006e0:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80006e2:	1879      	adds	r1, r7, r1
 80006e4:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_RTC_Init+0x14c>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	0018      	movs	r0, r3
 80006ea:	f002 f87d 	bl	80027e8 <HAL_RTC_SetDate>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 80006f2:	f000 f9cd 	bl	8000a90 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 80006f6:	003b      	movs	r3, r7
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80006fc:	003b      	movs	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 8000702:	003b      	movs	r3, r7
 8000704:	2201      	movs	r2, #1
 8000706:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000708:	003b      	movs	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800070e:	003b      	movs	r3, r7
 8000710:	2200      	movs	r2, #0
 8000712:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000714:	003b      	movs	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800071a:	003b      	movs	r3, r7
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000720:	003b      	movs	r3, r7
 8000722:	4a11      	ldr	r2, [pc, #68]	; (8000768 <MX_RTC_Init+0x154>)
 8000724:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000726:	003b      	movs	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800072c:	003b      	movs	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000732:	003b      	movs	r3, r7
 8000734:	2220      	movs	r2, #32
 8000736:	2101      	movs	r1, #1
 8000738:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800073a:	003b      	movs	r3, r7
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000742:	0039      	movs	r1, r7
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_RTC_Init+0x14c>)
 8000746:	2201      	movs	r2, #1
 8000748:	0018      	movs	r0, r3
 800074a:	f002 f8df 	bl	800290c <HAL_RTC_SetAlarm_IT>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <MX_RTC_Init+0x142>
  {
    Error_Handler();
 8000752:	f000 f99d 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b010      	add	sp, #64	; 0x40
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	200000e0 	.word	0x200000e0
 8000764:	40002800 	.word	0x40002800
 8000768:	80808000 	.word	0x80808000

0800076c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_USART2_UART_Init+0x60>)
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <MX_USART2_UART_Init+0x64>)
 8000774:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_USART2_UART_Init+0x60>)
 8000778:	22e1      	movs	r2, #225	; 0xe1
 800077a:	0252      	lsls	r2, r2, #9
 800077c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_USART2_UART_Init+0x60>)
 8000780:	2280      	movs	r2, #128	; 0x80
 8000782:	0152      	lsls	r2, r2, #5
 8000784:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART2_UART_Init+0x60>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_USART2_UART_Init+0x60>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART2_UART_Init+0x60>)
 8000794:	220c      	movs	r2, #12
 8000796:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART2_UART_Init+0x60>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART2_UART_Init+0x60>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART2_UART_Init+0x60>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART2_UART_Init+0x60>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART2_UART_Init+0x60>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <MX_USART2_UART_Init+0x60>)
 80007b8:	0018      	movs	r0, r3
 80007ba:	f002 fb03 	bl	8002dc4 <HAL_UART_Init>
 80007be:	1e03      	subs	r3, r0, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80007c2:	f000 f965 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2000010c 	.word	0x2000010c
 80007d0:	40004400 	.word	0x40004400

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b08b      	sub	sp, #44	; 0x2c
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	2414      	movs	r4, #20
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	0018      	movs	r0, r3
 80007e0:	2314      	movs	r3, #20
 80007e2:	001a      	movs	r2, r3
 80007e4:	2100      	movs	r1, #0
 80007e6:	f003 f84b 	bl	8003880 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	4b72      	ldr	r3, [pc, #456]	; (80009b4 <MX_GPIO_Init+0x1e0>)
 80007ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ee:	4b71      	ldr	r3, [pc, #452]	; (80009b4 <MX_GPIO_Init+0x1e0>)
 80007f0:	2102      	movs	r1, #2
 80007f2:	430a      	orrs	r2, r1
 80007f4:	635a      	str	r2, [r3, #52]	; 0x34
 80007f6:	4b6f      	ldr	r3, [pc, #444]	; (80009b4 <MX_GPIO_Init+0x1e0>)
 80007f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007fa:	2202      	movs	r2, #2
 80007fc:	4013      	ands	r3, r2
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b6c      	ldr	r3, [pc, #432]	; (80009b4 <MX_GPIO_Init+0x1e0>)
 8000804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000806:	4b6b      	ldr	r3, [pc, #428]	; (80009b4 <MX_GPIO_Init+0x1e0>)
 8000808:	2104      	movs	r1, #4
 800080a:	430a      	orrs	r2, r1
 800080c:	635a      	str	r2, [r3, #52]	; 0x34
 800080e:	4b69      	ldr	r3, [pc, #420]	; (80009b4 <MX_GPIO_Init+0x1e0>)
 8000810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000812:	2204      	movs	r2, #4
 8000814:	4013      	ands	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800081a:	4b66      	ldr	r3, [pc, #408]	; (80009b4 <MX_GPIO_Init+0x1e0>)
 800081c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800081e:	4b65      	ldr	r3, [pc, #404]	; (80009b4 <MX_GPIO_Init+0x1e0>)
 8000820:	2120      	movs	r1, #32
 8000822:	430a      	orrs	r2, r1
 8000824:	635a      	str	r2, [r3, #52]	; 0x34
 8000826:	4b63      	ldr	r3, [pc, #396]	; (80009b4 <MX_GPIO_Init+0x1e0>)
 8000828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800082a:	2220      	movs	r2, #32
 800082c:	4013      	ands	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b60      	ldr	r3, [pc, #384]	; (80009b4 <MX_GPIO_Init+0x1e0>)
 8000834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000836:	4b5f      	ldr	r3, [pc, #380]	; (80009b4 <MX_GPIO_Init+0x1e0>)
 8000838:	2101      	movs	r1, #1
 800083a:	430a      	orrs	r2, r1
 800083c:	635a      	str	r2, [r3, #52]	; 0x34
 800083e:	4b5d      	ldr	r3, [pc, #372]	; (80009b4 <MX_GPIO_Init+0x1e0>)
 8000840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000842:	2201      	movs	r2, #1
 8000844:	4013      	ands	r3, r2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RTC_Interrupt_LED_Pin|Minute_Set_LED_Pin|Hour_Set_LED_Pin, GPIO_PIN_RESET);
 800084a:	23c8      	movs	r3, #200	; 0xc8
 800084c:	00d9      	lsls	r1, r3, #3
 800084e:	23a0      	movs	r3, #160	; 0xa0
 8000850:	05db      	lsls	r3, r3, #23
 8000852:	2200      	movs	r2, #0
 8000854:	0018      	movs	r0, r3
 8000856:	f000 fe58 	bl	800150a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Snooze_LED_Pin|Alarm_Set_LED_Pin|Alarm_Enable_LED_Pin|Display_LED_Pin, GPIO_PIN_RESET);
 800085a:	4b57      	ldr	r3, [pc, #348]	; (80009b8 <MX_GPIO_Init+0x1e4>)
 800085c:	2200      	movs	r2, #0
 800085e:	21c3      	movs	r1, #195	; 0xc3
 8000860:	0018      	movs	r0, r3
 8000862:	f000 fe52 	bl	800150a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000866:	4b55      	ldr	r3, [pc, #340]	; (80009bc <MX_GPIO_Init+0x1e8>)
 8000868:	2200      	movs	r2, #0
 800086a:	2140      	movs	r1, #64	; 0x40
 800086c:	0018      	movs	r0, r3
 800086e:	f000 fe4c 	bl	800150a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000872:	193b      	adds	r3, r7, r4
 8000874:	2204      	movs	r2, #4
 8000876:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	2288      	movs	r2, #136	; 0x88
 800087c:	0352      	lsls	r2, r2, #13
 800087e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000886:	193b      	adds	r3, r7, r4
 8000888:	4a4d      	ldr	r2, [pc, #308]	; (80009c0 <MX_GPIO_Init+0x1ec>)
 800088a:	0019      	movs	r1, r3
 800088c:	0010      	movs	r0, r2
 800088e:	f000 fcbb 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_Button_Pin Alarm_Enable_Button_Pin Alarm_Set_Button_Pin Hour_Set_Button_Pin
                           Snooze_Button_Pin Minute_Set_Button_Pin */
  GPIO_InitStruct.Pin = Display_Button_Pin|Alarm_Enable_Button_Pin|Alarm_Set_Button_Pin|Hour_Set_Button_Pin
 8000892:	193b      	adds	r3, r7, r4
 8000894:	4a4b      	ldr	r2, [pc, #300]	; (80009c4 <MX_GPIO_Init+0x1f0>)
 8000896:	601a      	str	r2, [r3, #0]
                          |Snooze_Button_Pin|Minute_Set_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000898:	193b      	adds	r3, r7, r4
 800089a:	2284      	movs	r2, #132	; 0x84
 800089c:	0392      	lsls	r2, r2, #14
 800089e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	2201      	movs	r2, #1
 80008a4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	193a      	adds	r2, r7, r4
 80008a8:	23a0      	movs	r3, #160	; 0xa0
 80008aa:	05db      	lsls	r3, r3, #23
 80008ac:	0011      	movs	r1, r2
 80008ae:	0018      	movs	r0, r3
 80008b0:	f000 fcaa 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTC_Interrupt_LED_Pin Minute_Set_LED_Pin Hour_Set_LED_Pin */
  GPIO_InitStruct.Pin = RTC_Interrupt_LED_Pin|Minute_Set_LED_Pin|Hour_Set_LED_Pin;
 80008b4:	0021      	movs	r1, r4
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	22c8      	movs	r2, #200	; 0xc8
 80008ba:	00d2      	lsls	r2, r2, #3
 80008bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	000c      	movs	r4, r1
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	2201      	movs	r2, #1
 80008c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	193a      	adds	r2, r7, r4
 80008d4:	23a0      	movs	r3, #160	; 0xa0
 80008d6:	05db      	lsls	r3, r3, #23
 80008d8:	0011      	movs	r1, r2
 80008da:	0018      	movs	r0, r3
 80008dc:	f000 fc94 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : Snooze_LED_Pin Alarm_Set_LED_Pin Alarm_Enable_LED_Pin Display_LED_Pin */
  GPIO_InitStruct.Pin = Snooze_LED_Pin|Alarm_Set_LED_Pin|Alarm_Enable_LED_Pin|Display_LED_Pin;
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	22c3      	movs	r2, #195	; 0xc3
 80008e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	2201      	movs	r2, #1
 80008ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	4a2f      	ldr	r2, [pc, #188]	; (80009b8 <MX_GPIO_Init+0x1e4>)
 80008fc:	0019      	movs	r1, r3
 80008fe:	0010      	movs	r0, r2
 8000900:	f000 fc82 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000904:	0021      	movs	r1, r4
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2240      	movs	r2, #64	; 0x40
 800090a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2201      	movs	r2, #1
 8000910:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800091e:	187b      	adds	r3, r7, r1
 8000920:	4a26      	ldr	r2, [pc, #152]	; (80009bc <MX_GPIO_Init+0x1e8>)
 8000922:	0019      	movs	r1, r3
 8000924:	0010      	movs	r0, r2
 8000926:	f000 fc6f 	bl	8001208 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	2005      	movs	r0, #5
 8000930:	f000 fc38 	bl	80011a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000934:	2005      	movs	r0, #5
 8000936:	f000 fc4a 	bl	80011ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	2006      	movs	r0, #6
 8000940:	f000 fc30 	bl	80011a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000944:	2006      	movs	r0, #6
 8000946:	f000 fc42 	bl	80011ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	2007      	movs	r0, #7
 8000950:	f000 fc28 	bl	80011a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000954:	2007      	movs	r0, #7
 8000956:	f000 fc3a 	bl	80011ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  // Initialize all output pins to low
	HAL_GPIO_WritePin(GPIOB, displayLEDPin, 0);
 800095a:	2180      	movs	r1, #128	; 0x80
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <MX_GPIO_Init+0x1e4>)
 800095e:	2200      	movs	r2, #0
 8000960:	0018      	movs	r0, r3
 8000962:	f000 fdd2 	bl	800150a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, alarmEnableLEDPin, 0);
 8000966:	2140      	movs	r1, #64	; 0x40
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_GPIO_Init+0x1e4>)
 800096a:	2200      	movs	r2, #0
 800096c:	0018      	movs	r0, r3
 800096e:	f000 fdcc 	bl	800150a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, alarmSetLEDPin, 0);
 8000972:	2102      	movs	r1, #2
 8000974:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <MX_GPIO_Init+0x1e4>)
 8000976:	2200      	movs	r2, #0
 8000978:	0018      	movs	r0, r3
 800097a:	f000 fdc6 	bl	800150a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, hourSetLEDPin, 0);
 800097e:	2380      	movs	r3, #128	; 0x80
 8000980:	00d9      	lsls	r1, r3, #3
 8000982:	23a0      	movs	r3, #160	; 0xa0
 8000984:	05db      	lsls	r3, r3, #23
 8000986:	2200      	movs	r2, #0
 8000988:	0018      	movs	r0, r3
 800098a:	f000 fdbe 	bl	800150a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, minuteSetLEDPin, 0);
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	0099      	lsls	r1, r3, #2
 8000992:	23a0      	movs	r3, #160	; 0xa0
 8000994:	05db      	lsls	r3, r3, #23
 8000996:	2200      	movs	r2, #0
 8000998:	0018      	movs	r0, r3
 800099a:	f000 fdb6 	bl	800150a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, snoozeButtonLEDPin, 0);
 800099e:	2101      	movs	r1, #1
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <MX_GPIO_Init+0x1e4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	0018      	movs	r0, r3
 80009a6:	f000 fdb0 	bl	800150a <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b00b      	add	sp, #44	; 0x2c
 80009b0:	bd90      	pop	{r4, r7, pc}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	40021000 	.word	0x40021000
 80009b8:	50000400 	.word	0x50000400
 80009bc:	50000800 	.word	0x50000800
 80009c0:	50001400 	.word	0x50001400
 80009c4:	00001833 	.word	0x00001833

080009c8 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	0002      	movs	r2, r0
 80009d0:	1dbb      	adds	r3, r7, #6
 80009d2:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == displayButtonPin) {
 80009d4:	2201      	movs	r2, #1
 80009d6:	1dbb      	adds	r3, r7, #6
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	4293      	cmp	r3, r2
 80009dc:	d106      	bne.n	80009ec <HAL_GPIO_EXTI_Falling_Callback+0x24>
		HAL_GPIO_TogglePin(GPIOB, displayLEDPin);
 80009de:	2280      	movs	r2, #128	; 0x80
 80009e0:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 80009e2:	0011      	movs	r1, r2
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 fdad 	bl	8001544 <HAL_GPIO_TogglePin>
//    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
//    printf("ISR Entered\n");
//  } else {
//      __NOP();
//  }
}
 80009ea:	e042      	b.n	8000a72 <HAL_GPIO_EXTI_Falling_Callback+0xaa>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 80009ec:	2202      	movs	r2, #2
 80009ee:	1dbb      	adds	r3, r7, #6
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d106      	bne.n	8000a04 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		HAL_GPIO_TogglePin(GPIOB, alarmEnableLEDPin);
 80009f6:	2240      	movs	r2, #64	; 0x40
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 80009fa:	0011      	movs	r1, r2
 80009fc:	0018      	movs	r0, r3
 80009fe:	f000 fda1 	bl	8001544 <HAL_GPIO_TogglePin>
}
 8000a02:	e036      	b.n	8000a72 <HAL_GPIO_EXTI_Falling_Callback+0xaa>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8000a04:	2210      	movs	r2, #16
 8000a06:	1dbb      	adds	r3, r7, #6
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d106      	bne.n	8000a1c <HAL_GPIO_EXTI_Falling_Callback+0x54>
		HAL_GPIO_TogglePin(GPIOB, alarmSetLEDPin);
 8000a0e:	2202      	movs	r2, #2
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 8000a12:	0011      	movs	r1, r2
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 fd95 	bl	8001544 <HAL_GPIO_TogglePin>
}
 8000a1a:	e02a      	b.n	8000a72 <HAL_GPIO_EXTI_Falling_Callback+0xaa>
	else if(GPIO_Pin == hourSetButtonPin) {
 8000a1c:	2220      	movs	r2, #32
 8000a1e:	1dbb      	adds	r3, r7, #6
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d108      	bne.n	8000a38 <HAL_GPIO_EXTI_Falling_Callback+0x70>
		HAL_GPIO_TogglePin(GPIOA, hourSetLEDPin);
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	00da      	lsls	r2, r3, #3
 8000a2a:	23a0      	movs	r3, #160	; 0xa0
 8000a2c:	05db      	lsls	r3, r3, #23
 8000a2e:	0011      	movs	r1, r2
 8000a30:	0018      	movs	r0, r3
 8000a32:	f000 fd87 	bl	8001544 <HAL_GPIO_TogglePin>
}
 8000a36:	e01c      	b.n	8000a72 <HAL_GPIO_EXTI_Falling_Callback+0xaa>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	015b      	lsls	r3, r3, #5
 8000a3c:	1dba      	adds	r2, r7, #6
 8000a3e:	8812      	ldrh	r2, [r2, #0]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d108      	bne.n	8000a56 <HAL_GPIO_EXTI_Falling_Callback+0x8e>
		HAL_GPIO_TogglePin(GPIOA, minuteSetLEDPin);
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	009a      	lsls	r2, r3, #2
 8000a48:	23a0      	movs	r3, #160	; 0xa0
 8000a4a:	05db      	lsls	r3, r3, #23
 8000a4c:	0011      	movs	r1, r2
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 fd78 	bl	8001544 <HAL_GPIO_TogglePin>
}
 8000a54:	e00d      	b.n	8000a72 <HAL_GPIO_EXTI_Falling_Callback+0xaa>
	else if(GPIO_Pin == snoozeButtonPin) {
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	1dba      	adds	r2, r7, #6
 8000a5c:	8812      	ldrh	r2, [r2, #0]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d106      	bne.n	8000a70 <HAL_GPIO_EXTI_Falling_Callback+0xa8>
		HAL_GPIO_TogglePin(GPIOB, snoozeButtonLEDPin);
 8000a62:	2201      	movs	r2, #1
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 8000a66:	0011      	movs	r1, r2
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f000 fd6b 	bl	8001544 <HAL_GPIO_TogglePin>
}
 8000a6e:	e000      	b.n	8000a72 <HAL_GPIO_EXTI_Falling_Callback+0xaa>
		__NOP();
 8000a70:	46c0      	nop			; (mov r8, r8)
}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b002      	add	sp, #8
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	50000400 	.word	0x50000400

08000a80 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
    HAL_GPIO_TogglePin(GPIOA, RTCInterruptLEDPin);

  printf("Current time: %d : %d : %d\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);*/

}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b002      	add	sp, #8
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <HAL_MspInit+0x44>)
 8000aa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_MspInit+0x44>)
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	641a      	str	r2, [r3, #64]	; 0x40
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <HAL_MspInit+0x44>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_MspInit+0x44>)
 8000abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <HAL_MspInit+0x44>)
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	0549      	lsls	r1, r1, #21
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_MspInit+0x44>)
 8000aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	055b      	lsls	r3, r3, #21
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b002      	add	sp, #8
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b095      	sub	sp, #84	; 0x54
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	233c      	movs	r3, #60	; 0x3c
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	0018      	movs	r0, r3
 8000af2:	2314      	movs	r3, #20
 8000af4:	001a      	movs	r2, r3
 8000af6:	2100      	movs	r1, #0
 8000af8:	f002 fec2 	bl	8003880 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000afc:	2414      	movs	r4, #20
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	0018      	movs	r0, r3
 8000b02:	2328      	movs	r3, #40	; 0x28
 8000b04:	001a      	movs	r2, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	f002 feba 	bl	8003880 <memset>
  if(hi2c->Instance==I2C1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a22      	ldr	r2, [pc, #136]	; (8000b9c <HAL_I2C_MspInit+0xb8>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d13e      	bne.n	8000b94 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	2220      	movs	r2, #32
 8000b1a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	0018      	movs	r0, r3
 8000b26:	f001 fb9b 	bl	8002260 <HAL_RCCEx_PeriphCLKConfig>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b2e:	f7ff ffaf 	bl	8000a90 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <HAL_I2C_MspInit+0xbc>)
 8000b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <HAL_I2C_MspInit+0xbc>)
 8000b38:	2102      	movs	r1, #2
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_I2C_MspInit+0xbc>)
 8000b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b42:	2202      	movs	r2, #2
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000b4a:	213c      	movs	r1, #60	; 0x3c
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	22c0      	movs	r2, #192	; 0xc0
 8000b50:	0092      	lsls	r2, r2, #2
 8000b52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2212      	movs	r2, #18
 8000b58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2206      	movs	r2, #6
 8000b6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	4a0d      	ldr	r2, [pc, #52]	; (8000ba4 <HAL_I2C_MspInit+0xc0>)
 8000b70:	0019      	movs	r1, r3
 8000b72:	0010      	movs	r0, r2
 8000b74:	f000 fb48 	bl	8001208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_I2C_MspInit+0xbc>)
 8000b7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_I2C_MspInit+0xbc>)
 8000b7e:	2180      	movs	r1, #128	; 0x80
 8000b80:	0389      	lsls	r1, r1, #14
 8000b82:	430a      	orrs	r2, r1
 8000b84:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_I2C_MspInit+0xbc>)
 8000b88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	039b      	lsls	r3, r3, #14
 8000b8e:	4013      	ands	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b015      	add	sp, #84	; 0x54
 8000b9a:	bd90      	pop	{r4, r7, pc}
 8000b9c:	40005400 	.word	0x40005400
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	50000400 	.word	0x50000400

08000ba8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b08f      	sub	sp, #60	; 0x3c
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb0:	2410      	movs	r4, #16
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	2328      	movs	r3, #40	; 0x28
 8000bb8:	001a      	movs	r2, r3
 8000bba:	2100      	movs	r1, #0
 8000bbc:	f002 fe60 	bl	8003880 <memset>
  if(hrtc->Instance==RTC)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a19      	ldr	r2, [pc, #100]	; (8000c2c <HAL_RTC_MspInit+0x84>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d12c      	bne.n	8000c24 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	2280      	movs	r2, #128	; 0x80
 8000bce:	0292      	lsls	r2, r2, #10
 8000bd0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	2280      	movs	r2, #128	; 0x80
 8000bd6:	0092      	lsls	r2, r2, #2
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f001 fb3f 	bl	8002260 <HAL_RCCEx_PeriphCLKConfig>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000be6:	f7ff ff53 	bl	8000a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <HAL_RTC_MspInit+0x88>)
 8000bec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <HAL_RTC_MspInit+0x88>)
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	0209      	lsls	r1, r1, #8
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <HAL_RTC_MspInit+0x88>)
 8000bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <HAL_RTC_MspInit+0x88>)
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	00c9      	lsls	r1, r1, #3
 8000c02:	430a      	orrs	r2, r1
 8000c04:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_RTC_MspInit+0x88>)
 8000c08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	4013      	ands	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2100      	movs	r1, #0
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f000 fac3 	bl	80011a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000c1e:	2002      	movs	r0, #2
 8000c20:	f000 fad5 	bl	80011ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b00f      	add	sp, #60	; 0x3c
 8000c2a:	bd90      	pop	{r4, r7, pc}
 8000c2c:	40002800 	.word	0x40002800
 8000c30:	40021000 	.word	0x40021000

08000c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b08b      	sub	sp, #44	; 0x2c
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	2414      	movs	r4, #20
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	0018      	movs	r0, r3
 8000c42:	2314      	movs	r3, #20
 8000c44:	001a      	movs	r2, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	f002 fe1a 	bl	8003880 <memset>
  if(huart->Instance==USART2)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a1b      	ldr	r2, [pc, #108]	; (8000cc0 <HAL_UART_MspInit+0x8c>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d130      	bne.n	8000cb8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c56:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <HAL_UART_MspInit+0x90>)
 8000c58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <HAL_UART_MspInit+0x90>)
 8000c5c:	2180      	movs	r1, #128	; 0x80
 8000c5e:	0289      	lsls	r1, r1, #10
 8000c60:	430a      	orrs	r2, r1
 8000c62:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <HAL_UART_MspInit+0x90>)
 8000c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	029b      	lsls	r3, r3, #10
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <HAL_UART_MspInit+0x90>)
 8000c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c76:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <HAL_UART_MspInit+0x90>)
 8000c78:	2101      	movs	r1, #1
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_UART_MspInit+0x90>)
 8000c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c82:	2201      	movs	r2, #1
 8000c84:	4013      	ands	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000c8a:	0021      	movs	r1, r4
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	220c      	movs	r2, #12
 8000c90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	2202      	movs	r2, #2
 8000c96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	187a      	adds	r2, r7, r1
 8000cac:	23a0      	movs	r3, #160	; 0xa0
 8000cae:	05db      	lsls	r3, r3, #23
 8000cb0:	0011      	movs	r1, r2
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f000 faa8 	bl	8001208 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b00b      	add	sp, #44	; 0x2c
 8000cbe:	bd90      	pop	{r4, r7, pc}
 8000cc0:	40004400 	.word	0x40004400
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <NMI_Handler+0x4>

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cec:	f000 f96e 	bl	8000fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <RTC_TAMP_IRQHandler+0x14>)
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f001 ff44 	bl	8002b8c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	200000e0 	.word	0x200000e0

08000d10 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */



  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Display_Button_Pin);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f000 fc31 	bl	800157c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Enable_Button_Pin);
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	f000 fc2e 	bl	800157c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  //NOT the interrupt part for GPIO pin 1 (I think)

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000d20:	46c0      	nop			; (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_NRST_Pin);
 8000d2a:	2004      	movs	r0, #4
 8000d2c:	f000 fc26 	bl	800157c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alarm_Set_Button_Pin);
 8000d3a:	2010      	movs	r0, #16
 8000d3c:	f000 fc1e 	bl	800157c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Hour_Set_Button_Pin);
 8000d40:	2020      	movs	r0, #32
 8000d42:	f000 fc1b 	bl	800157c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Snooze_Button_Pin);
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	011b      	lsls	r3, r3, #4
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 fc16 	bl	800157c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Minute_Set_Button_Pin);
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	015b      	lsls	r3, r3, #5
 8000d54:	0018      	movs	r0, r3
 8000d56:	f000 fc11 	bl	800157c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	e00a      	b.n	8000d88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d72:	e000      	b.n	8000d76 <_read+0x16>
 8000d74:	bf00      	nop
 8000d76:	0001      	movs	r1, r0
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	1c5a      	adds	r2, r3, #1
 8000d7c:	60ba      	str	r2, [r7, #8]
 8000d7e:	b2ca      	uxtb	r2, r1
 8000d80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3301      	adds	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	dbf0      	blt.n	8000d72 <_read+0x12>
  }

  return len;
 8000d90:	687b      	ldr	r3, [r7, #4]
}
 8000d92:	0018      	movs	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b006      	add	sp, #24
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	60f8      	str	r0, [r7, #12]
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	e009      	b.n	8000dc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	1c5a      	adds	r2, r3, #1
 8000db0:	60ba      	str	r2, [r7, #8]
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff fb51 	bl	800045c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dbf1      	blt.n	8000dac <_write+0x12>
  }
  return len;
 8000dc8:	687b      	ldr	r3, [r7, #4]
}
 8000dca:	0018      	movs	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b006      	add	sp, #24
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <_close>:

int _close(int file)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	425b      	negs	r3, r3
}
 8000dde:	0018      	movs	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b002      	add	sp, #8
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	2280      	movs	r2, #128	; 0x80
 8000df4:	0192      	lsls	r2, r2, #6
 8000df6:	605a      	str	r2, [r3, #4]
  return 0;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b002      	add	sp, #8
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <_isatty>:

int _isatty(int file)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b002      	add	sp, #8
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	0018      	movs	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b004      	add	sp, #16
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e34:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <_sbrk+0x5c>)
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <_sbrk+0x60>)
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <_sbrk+0x64>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <_sbrk+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	18d3      	adds	r3, r2, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d207      	bcs.n	8000e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e5c:	f002 fce6 	bl	800382c <__errno>
 8000e60:	0003      	movs	r3, r0
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e66:	2301      	movs	r3, #1
 8000e68:	425b      	negs	r3, r3
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	18d2      	adds	r2, r2, r3
 8000e7a:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <_sbrk+0x64>)
 8000e7c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b006      	add	sp, #24
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20002000 	.word	0x20002000
 8000e8c:	00000400 	.word	0x00000400
 8000e90:	200001a0 	.word	0x200001a0
 8000e94:	200001b8 	.word	0x200001b8

08000e98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ea6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ea8:	f7ff fff6 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eae:	490d      	ldr	r1, [pc, #52]	; (8000ee4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <LoopForever+0xe>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ec4:	4c0a      	ldr	r4, [pc, #40]	; (8000ef0 <LoopForever+0x16>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ed2:	f002 fcb1 	bl	8003838 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ed6:	f7ff fad3 	bl	8000480 <main>

08000eda <LoopForever>:

LoopForever:
  b LoopForever
 8000eda:	e7fe      	b.n	8000eda <LoopForever>
  ldr   r0, =_estack
 8000edc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ee8:	0800498c 	.word	0x0800498c
  ldr r2, =_sbss
 8000eec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ef0:	200001b8 	.word	0x200001b8

08000ef4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC1_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_Init+0x3c>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_Init+0x3c>)
 8000f0a:	2180      	movs	r1, #128	; 0x80
 8000f0c:	0049      	lsls	r1, r1, #1
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f12:	2000      	movs	r0, #0
 8000f14:	f000 f810 	bl	8000f38 <HAL_InitTick>
 8000f18:	1e03      	subs	r3, r0, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f1c:	1dfb      	adds	r3, r7, #7
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	e001      	b.n	8000f28 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f24:	f7ff fdba 	bl	8000a9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f28:	1dfb      	adds	r3, r7, #7
 8000f2a:	781b      	ldrb	r3, [r3, #0]
}
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b002      	add	sp, #8
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40022000 	.word	0x40022000

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f40:	230f      	movs	r3, #15
 8000f42:	18fb      	adds	r3, r7, r3
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f48:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <HAL_InitTick+0x88>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d02b      	beq.n	8000fa8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000f50:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <HAL_InitTick+0x8c>)
 8000f52:	681c      	ldr	r4, [r3, #0]
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <HAL_InitTick+0x88>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	0019      	movs	r1, r3
 8000f5a:	23fa      	movs	r3, #250	; 0xfa
 8000f5c:	0098      	lsls	r0, r3, #2
 8000f5e:	f7ff f8db 	bl	8000118 <__udivsi3>
 8000f62:	0003      	movs	r3, r0
 8000f64:	0019      	movs	r1, r3
 8000f66:	0020      	movs	r0, r4
 8000f68:	f7ff f8d6 	bl	8000118 <__udivsi3>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f000 f93d 	bl	80011ee <HAL_SYSTICK_Config>
 8000f74:	1e03      	subs	r3, r0, #0
 8000f76:	d112      	bne.n	8000f9e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d80a      	bhi.n	8000f94 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	2301      	movs	r3, #1
 8000f82:	425b      	negs	r3, r3
 8000f84:	2200      	movs	r2, #0
 8000f86:	0018      	movs	r0, r3
 8000f88:	f000 f90c 	bl	80011a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_InitTick+0x90>)
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	e00d      	b.n	8000fb0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f94:	230f      	movs	r3, #15
 8000f96:	18fb      	adds	r3, r7, r3
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
 8000f9c:	e008      	b.n	8000fb0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f9e:	230f      	movs	r3, #15
 8000fa0:	18fb      	adds	r3, r7, r3
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
 8000fa6:	e003      	b.n	8000fb0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fa8:	230f      	movs	r3, #15
 8000faa:	18fb      	adds	r3, r7, r3
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	781b      	ldrb	r3, [r3, #0]
}
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b005      	add	sp, #20
 8000fbc:	bd90      	pop	{r4, r7, pc}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	20000004 	.word	0x20000004

08000fcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <HAL_IncTick+0x1c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	001a      	movs	r2, r3
 8000fd6:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_IncTick+0x20>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	18d2      	adds	r2, r2, r3
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <HAL_IncTick+0x20>)
 8000fde:	601a      	str	r2, [r3, #0]
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	200001a4 	.word	0x200001a4

08000ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff4:	4b02      	ldr	r3, [pc, #8]	; (8001000 <HAL_GetTick+0x10>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	200001a4 	.word	0x200001a4

08001004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800100c:	f7ff fff0 	bl	8000ff0 <HAL_GetTick>
 8001010:	0003      	movs	r3, r0
 8001012:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3301      	adds	r3, #1
 800101c:	d005      	beq.n	800102a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_Delay+0x44>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	001a      	movs	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	189b      	adds	r3, r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	f7ff ffe0 	bl	8000ff0 <HAL_GetTick>
 8001030:	0002      	movs	r2, r0
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	429a      	cmp	r2, r3
 800103a:	d8f7      	bhi.n	800102c <HAL_Delay+0x28>
  {
  }
}
 800103c:	46c0      	nop			; (mov r8, r8)
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b004      	add	sp, #16
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	20000008 	.word	0x20000008

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	0002      	movs	r2, r0
 8001054:	1dfb      	adds	r3, r7, #7
 8001056:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b7f      	cmp	r3, #127	; 0x7f
 800105e:	d809      	bhi.n	8001074 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001060:	1dfb      	adds	r3, r7, #7
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	001a      	movs	r2, r3
 8001066:	231f      	movs	r3, #31
 8001068:	401a      	ands	r2, r3
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <__NVIC_EnableIRQ+0x30>)
 800106c:	2101      	movs	r1, #1
 800106e:	4091      	lsls	r1, r2
 8001070:	000a      	movs	r2, r1
 8001072:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b002      	add	sp, #8
 800107a:	bd80      	pop	{r7, pc}
 800107c:	e000e100 	.word	0xe000e100

08001080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	0002      	movs	r2, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b7f      	cmp	r3, #127	; 0x7f
 8001094:	d828      	bhi.n	80010e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001096:	4a2f      	ldr	r2, [pc, #188]	; (8001154 <__NVIC_SetPriority+0xd4>)
 8001098:	1dfb      	adds	r3, r7, #7
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b25b      	sxtb	r3, r3
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	33c0      	adds	r3, #192	; 0xc0
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	589b      	ldr	r3, [r3, r2]
 80010a6:	1dfa      	adds	r2, r7, #7
 80010a8:	7812      	ldrb	r2, [r2, #0]
 80010aa:	0011      	movs	r1, r2
 80010ac:	2203      	movs	r2, #3
 80010ae:	400a      	ands	r2, r1
 80010b0:	00d2      	lsls	r2, r2, #3
 80010b2:	21ff      	movs	r1, #255	; 0xff
 80010b4:	4091      	lsls	r1, r2
 80010b6:	000a      	movs	r2, r1
 80010b8:	43d2      	mvns	r2, r2
 80010ba:	401a      	ands	r2, r3
 80010bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	019b      	lsls	r3, r3, #6
 80010c2:	22ff      	movs	r2, #255	; 0xff
 80010c4:	401a      	ands	r2, r3
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	0018      	movs	r0, r3
 80010cc:	2303      	movs	r3, #3
 80010ce:	4003      	ands	r3, r0
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d4:	481f      	ldr	r0, [pc, #124]	; (8001154 <__NVIC_SetPriority+0xd4>)
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	430a      	orrs	r2, r1
 80010e0:	33c0      	adds	r3, #192	; 0xc0
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010e6:	e031      	b.n	800114c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e8:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <__NVIC_SetPriority+0xd8>)
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	0019      	movs	r1, r3
 80010f0:	230f      	movs	r3, #15
 80010f2:	400b      	ands	r3, r1
 80010f4:	3b08      	subs	r3, #8
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3306      	adds	r3, #6
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	18d3      	adds	r3, r2, r3
 80010fe:	3304      	adds	r3, #4
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	1dfa      	adds	r2, r7, #7
 8001104:	7812      	ldrb	r2, [r2, #0]
 8001106:	0011      	movs	r1, r2
 8001108:	2203      	movs	r2, #3
 800110a:	400a      	ands	r2, r1
 800110c:	00d2      	lsls	r2, r2, #3
 800110e:	21ff      	movs	r1, #255	; 0xff
 8001110:	4091      	lsls	r1, r2
 8001112:	000a      	movs	r2, r1
 8001114:	43d2      	mvns	r2, r2
 8001116:	401a      	ands	r2, r3
 8001118:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	019b      	lsls	r3, r3, #6
 800111e:	22ff      	movs	r2, #255	; 0xff
 8001120:	401a      	ands	r2, r3
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	0018      	movs	r0, r3
 8001128:	2303      	movs	r3, #3
 800112a:	4003      	ands	r3, r0
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001130:	4809      	ldr	r0, [pc, #36]	; (8001158 <__NVIC_SetPriority+0xd8>)
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	001c      	movs	r4, r3
 8001138:	230f      	movs	r3, #15
 800113a:	4023      	ands	r3, r4
 800113c:	3b08      	subs	r3, #8
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	430a      	orrs	r2, r1
 8001142:	3306      	adds	r3, #6
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	18c3      	adds	r3, r0, r3
 8001148:	3304      	adds	r3, #4
 800114a:	601a      	str	r2, [r3, #0]
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b003      	add	sp, #12
 8001152:	bd90      	pop	{r4, r7, pc}
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	1e5a      	subs	r2, r3, #1
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	045b      	lsls	r3, r3, #17
 800116c:	429a      	cmp	r2, r3
 800116e:	d301      	bcc.n	8001174 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001170:	2301      	movs	r3, #1
 8001172:	e010      	b.n	8001196 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <SysTick_Config+0x44>)
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	3a01      	subs	r2, #1
 800117a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117c:	2301      	movs	r3, #1
 800117e:	425b      	negs	r3, r3
 8001180:	2103      	movs	r1, #3
 8001182:	0018      	movs	r0, r3
 8001184:	f7ff ff7c 	bl	8001080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <SysTick_Config+0x44>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <SysTick_Config+0x44>)
 8001190:	2207      	movs	r2, #7
 8001192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001194:	2300      	movs	r3, #0
}
 8001196:	0018      	movs	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	e000e010 	.word	0xe000e010

080011a4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	210f      	movs	r1, #15
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	1c02      	adds	r2, r0, #0
 80011b4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	0011      	movs	r1, r2
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff ff5d 	bl	8001080 <__NVIC_SetPriority>
}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b004      	add	sp, #16
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	0002      	movs	r2, r0
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7ff ff33 	bl	800104c <__NVIC_EnableIRQ>
}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b002      	add	sp, #8
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	0018      	movs	r0, r3
 80011fa:	f7ff ffaf 	bl	800115c <SysTick_Config>
 80011fe:	0003      	movs	r3, r0
}
 8001200:	0018      	movs	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	b002      	add	sp, #8
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001216:	e147      	b.n	80014a8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2101      	movs	r1, #1
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	4091      	lsls	r1, r2
 8001222:	000a      	movs	r2, r1
 8001224:	4013      	ands	r3, r2
 8001226:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d100      	bne.n	8001230 <HAL_GPIO_Init+0x28>
 800122e:	e138      	b.n	80014a2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2203      	movs	r2, #3
 8001236:	4013      	ands	r3, r2
 8001238:	2b01      	cmp	r3, #1
 800123a:	d005      	beq.n	8001248 <HAL_GPIO_Init+0x40>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2203      	movs	r2, #3
 8001242:	4013      	ands	r3, r2
 8001244:	2b02      	cmp	r3, #2
 8001246:	d130      	bne.n	80012aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	409a      	lsls	r2, r3
 8001256:	0013      	movs	r3, r2
 8001258:	43da      	mvns	r2, r3
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	409a      	lsls	r2, r3
 800126a:	0013      	movs	r3, r2
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800127e:	2201      	movs	r2, #1
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
 8001284:	0013      	movs	r3, r2
 8001286:	43da      	mvns	r2, r3
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	091b      	lsrs	r3, r3, #4
 8001294:	2201      	movs	r2, #1
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
 800129c:	0013      	movs	r3, r2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2203      	movs	r2, #3
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d017      	beq.n	80012e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2203      	movs	r2, #3
 80012c2:	409a      	lsls	r2, r3
 80012c4:	0013      	movs	r3, r2
 80012c6:	43da      	mvns	r2, r3
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	409a      	lsls	r2, r3
 80012d8:	0013      	movs	r3, r2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2203      	movs	r2, #3
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d123      	bne.n	800133a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3208      	adds	r2, #8
 80012fa:	0092      	lsls	r2, r2, #2
 80012fc:	58d3      	ldr	r3, [r2, r3]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	2207      	movs	r2, #7
 8001304:	4013      	ands	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	220f      	movs	r2, #15
 800130a:	409a      	lsls	r2, r3
 800130c:	0013      	movs	r3, r2
 800130e:	43da      	mvns	r2, r3
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	691a      	ldr	r2, [r3, #16]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	2107      	movs	r1, #7
 800131e:	400b      	ands	r3, r1
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	409a      	lsls	r2, r3
 8001324:	0013      	movs	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	08da      	lsrs	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3208      	adds	r2, #8
 8001334:	0092      	lsls	r2, r2, #2
 8001336:	6939      	ldr	r1, [r7, #16]
 8001338:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	409a      	lsls	r2, r3
 8001348:	0013      	movs	r3, r2
 800134a:	43da      	mvns	r2, r3
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2203      	movs	r2, #3
 8001358:	401a      	ands	r2, r3
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	409a      	lsls	r2, r3
 8001360:	0013      	movs	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	23c0      	movs	r3, #192	; 0xc0
 8001374:	029b      	lsls	r3, r3, #10
 8001376:	4013      	ands	r3, r2
 8001378:	d100      	bne.n	800137c <HAL_GPIO_Init+0x174>
 800137a:	e092      	b.n	80014a2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800137c:	4a50      	ldr	r2, [pc, #320]	; (80014c0 <HAL_GPIO_Init+0x2b8>)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3318      	adds	r3, #24
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	589b      	ldr	r3, [r3, r2]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2203      	movs	r2, #3
 800138e:	4013      	ands	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	220f      	movs	r2, #15
 8001394:	409a      	lsls	r2, r3
 8001396:	0013      	movs	r3, r2
 8001398:	43da      	mvns	r2, r3
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	23a0      	movs	r3, #160	; 0xa0
 80013a4:	05db      	lsls	r3, r3, #23
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0x1ca>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a45      	ldr	r2, [pc, #276]	; (80014c4 <HAL_GPIO_Init+0x2bc>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00d      	beq.n	80013ce <HAL_GPIO_Init+0x1c6>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a44      	ldr	r2, [pc, #272]	; (80014c8 <HAL_GPIO_Init+0x2c0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0x1c2>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a43      	ldr	r2, [pc, #268]	; (80014cc <HAL_GPIO_Init+0x2c4>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_GPIO_Init+0x1be>
 80013c2:	2303      	movs	r3, #3
 80013c4:	e006      	b.n	80013d4 <HAL_GPIO_Init+0x1cc>
 80013c6:	2305      	movs	r3, #5
 80013c8:	e004      	b.n	80013d4 <HAL_GPIO_Init+0x1cc>
 80013ca:	2302      	movs	r3, #2
 80013cc:	e002      	b.n	80013d4 <HAL_GPIO_Init+0x1cc>
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <HAL_GPIO_Init+0x1cc>
 80013d2:	2300      	movs	r3, #0
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	2103      	movs	r1, #3
 80013d8:	400a      	ands	r2, r1
 80013da:	00d2      	lsls	r2, r2, #3
 80013dc:	4093      	lsls	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80013e4:	4936      	ldr	r1, [pc, #216]	; (80014c0 <HAL_GPIO_Init+0x2b8>)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	3318      	adds	r3, #24
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013f2:	4b33      	ldr	r3, [pc, #204]	; (80014c0 <HAL_GPIO_Init+0x2b8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43da      	mvns	r2, r3
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	035b      	lsls	r3, r3, #13
 800140a:	4013      	ands	r3, r2
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001416:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <HAL_GPIO_Init+0x2b8>)
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800141c:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <HAL_GPIO_Init+0x2b8>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43da      	mvns	r2, r3
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	039b      	lsls	r3, r3, #14
 8001434:	4013      	ands	r3, r2
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001440:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <HAL_GPIO_Init+0x2b8>)
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001446:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <HAL_GPIO_Init+0x2b8>)
 8001448:	2384      	movs	r3, #132	; 0x84
 800144a:	58d3      	ldr	r3, [r2, r3]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	43da      	mvns	r2, r3
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	029b      	lsls	r3, r3, #10
 8001460:	4013      	ands	r3, r2
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800146c:	4914      	ldr	r1, [pc, #80]	; (80014c0 <HAL_GPIO_Init+0x2b8>)
 800146e:	2284      	movs	r2, #132	; 0x84
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001474:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <HAL_GPIO_Init+0x2b8>)
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	58d3      	ldr	r3, [r2, r3]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	43da      	mvns	r2, r3
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	025b      	lsls	r3, r3, #9
 800148e:	4013      	ands	r3, r2
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800149a:	4909      	ldr	r1, [pc, #36]	; (80014c0 <HAL_GPIO_Init+0x2b8>)
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3301      	adds	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	40da      	lsrs	r2, r3
 80014b0:	1e13      	subs	r3, r2, #0
 80014b2:	d000      	beq.n	80014b6 <HAL_GPIO_Init+0x2ae>
 80014b4:	e6b0      	b.n	8001218 <HAL_GPIO_Init+0x10>
  }
}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b006      	add	sp, #24
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40021800 	.word	0x40021800
 80014c4:	50000400 	.word	0x50000400
 80014c8:	50000800 	.word	0x50000800
 80014cc:	50000c00 	.word	0x50000c00

080014d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	000a      	movs	r2, r1
 80014da:	1cbb      	adds	r3, r7, #2
 80014dc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	1cba      	adds	r2, r7, #2
 80014e4:	8812      	ldrh	r2, [r2, #0]
 80014e6:	4013      	ands	r3, r2
 80014e8:	d004      	beq.n	80014f4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80014ea:	230f      	movs	r3, #15
 80014ec:	18fb      	adds	r3, r7, r3
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	e003      	b.n	80014fc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014f4:	230f      	movs	r3, #15
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80014fc:	230f      	movs	r3, #15
 80014fe:	18fb      	adds	r3, r7, r3
 8001500:	781b      	ldrb	r3, [r3, #0]
}
 8001502:	0018      	movs	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	b004      	add	sp, #16
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	0008      	movs	r0, r1
 8001514:	0011      	movs	r1, r2
 8001516:	1cbb      	adds	r3, r7, #2
 8001518:	1c02      	adds	r2, r0, #0
 800151a:	801a      	strh	r2, [r3, #0]
 800151c:	1c7b      	adds	r3, r7, #1
 800151e:	1c0a      	adds	r2, r1, #0
 8001520:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001522:	1c7b      	adds	r3, r7, #1
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d004      	beq.n	8001534 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800152a:	1cbb      	adds	r3, r7, #2
 800152c:	881a      	ldrh	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001532:	e003      	b.n	800153c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001534:	1cbb      	adds	r3, r7, #2
 8001536:	881a      	ldrh	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	b002      	add	sp, #8
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	000a      	movs	r2, r1
 800154e:	1cbb      	adds	r3, r7, #2
 8001550:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001558:	1cbb      	adds	r3, r7, #2
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4013      	ands	r3, r2
 8001560:	041a      	lsls	r2, r3, #16
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	43db      	mvns	r3, r3
 8001566:	1cb9      	adds	r1, r7, #2
 8001568:	8809      	ldrh	r1, [r1, #0]
 800156a:	400b      	ands	r3, r1
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	619a      	str	r2, [r3, #24]
}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	46bd      	mov	sp, r7
 8001576:	b004      	add	sp, #16
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	0002      	movs	r2, r0
 8001584:	1dbb      	adds	r3, r7, #6
 8001586:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001588:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	1dba      	adds	r2, r7, #6
 800158e:	8812      	ldrh	r2, [r2, #0]
 8001590:	4013      	ands	r3, r2
 8001592:	d008      	beq.n	80015a6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001596:	1dba      	adds	r2, r7, #6
 8001598:	8812      	ldrh	r2, [r2, #0]
 800159a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800159c:	1dbb      	adds	r3, r7, #6
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	0018      	movs	r0, r3
 80015a2:	f000 f815 	bl	80015d0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	1dba      	adds	r2, r7, #6
 80015ac:	8812      	ldrh	r2, [r2, #0]
 80015ae:	4013      	ands	r3, r2
 80015b0:	d008      	beq.n	80015c4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015b4:	1dba      	adds	r2, r7, #6
 80015b6:	8812      	ldrh	r2, [r2, #0]
 80015b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80015ba:	1dbb      	adds	r3, r7, #6
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	0018      	movs	r0, r3
 80015c0:	f7ff fa02 	bl	80009c8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80015c4:	46c0      	nop			; (mov r8, r8)
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b002      	add	sp, #8
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40021800 	.word	0x40021800

080015d0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	0002      	movs	r2, r0
 80015d8:	1dbb      	adds	r3, r7, #6
 80015da:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80015dc:	46c0      	nop			; (mov r8, r8)
 80015de:	46bd      	mov	sp, r7
 80015e0:	b002      	add	sp, #8
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e082      	b.n	80016fc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2241      	movs	r2, #65	; 0x41
 80015fa:	5c9b      	ldrb	r3, [r3, r2]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d107      	bne.n	8001612 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2240      	movs	r2, #64	; 0x40
 8001606:	2100      	movs	r1, #0
 8001608:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	0018      	movs	r0, r3
 800160e:	f7ff fa69 	bl	8000ae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2241      	movs	r2, #65	; 0x41
 8001616:	2124      	movs	r1, #36	; 0x24
 8001618:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2101      	movs	r1, #1
 8001626:	438a      	bics	r2, r1
 8001628:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4934      	ldr	r1, [pc, #208]	; (8001704 <HAL_I2C_Init+0x120>)
 8001634:	400a      	ands	r2, r1
 8001636:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4931      	ldr	r1, [pc, #196]	; (8001708 <HAL_I2C_Init+0x124>)
 8001644:	400a      	ands	r2, r1
 8001646:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d108      	bne.n	8001662 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	0209      	lsls	r1, r1, #8
 800165c:	430a      	orrs	r2, r1
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	e007      	b.n	8001672 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2184      	movs	r1, #132	; 0x84
 800166c:	0209      	lsls	r1, r1, #8
 800166e:	430a      	orrs	r2, r1
 8001670:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d104      	bne.n	8001684 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2280      	movs	r2, #128	; 0x80
 8001680:	0112      	lsls	r2, r2, #4
 8001682:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	491f      	ldr	r1, [pc, #124]	; (800170c <HAL_I2C_Init+0x128>)
 8001690:	430a      	orrs	r2, r1
 8001692:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	491a      	ldr	r1, [pc, #104]	; (8001708 <HAL_I2C_Init+0x124>)
 80016a0:	400a      	ands	r2, r1
 80016a2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	431a      	orrs	r2, r3
 80016ae:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69d9      	ldr	r1, [r3, #28]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1a      	ldr	r2, [r3, #32]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2101      	movs	r1, #1
 80016da:	430a      	orrs	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2241      	movs	r2, #65	; 0x41
 80016e8:	2120      	movs	r1, #32
 80016ea:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2242      	movs	r2, #66	; 0x42
 80016f6:	2100      	movs	r1, #0
 80016f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	0018      	movs	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	b002      	add	sp, #8
 8001702:	bd80      	pop	{r7, pc}
 8001704:	f0ffffff 	.word	0xf0ffffff
 8001708:	ffff7fff 	.word	0xffff7fff
 800170c:	02008000 	.word	0x02008000

08001710 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2241      	movs	r2, #65	; 0x41
 800171e:	5c9b      	ldrb	r3, [r3, r2]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b20      	cmp	r3, #32
 8001724:	d138      	bne.n	8001798 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2240      	movs	r2, #64	; 0x40
 800172a:	5c9b      	ldrb	r3, [r3, r2]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d101      	bne.n	8001734 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001730:	2302      	movs	r3, #2
 8001732:	e032      	b.n	800179a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2240      	movs	r2, #64	; 0x40
 8001738:	2101      	movs	r1, #1
 800173a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2241      	movs	r2, #65	; 0x41
 8001740:	2124      	movs	r1, #36	; 0x24
 8001742:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2101      	movs	r1, #1
 8001750:	438a      	bics	r2, r1
 8001752:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4911      	ldr	r1, [pc, #68]	; (80017a4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001760:	400a      	ands	r2, r1
 8001762:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6819      	ldr	r1, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2101      	movs	r1, #1
 8001780:	430a      	orrs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2241      	movs	r2, #65	; 0x41
 8001788:	2120      	movs	r1, #32
 800178a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2240      	movs	r2, #64	; 0x40
 8001790:	2100      	movs	r1, #0
 8001792:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	e000      	b.n	800179a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001798:	2302      	movs	r3, #2
  }
}
 800179a:	0018      	movs	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	b002      	add	sp, #8
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	ffffefff 	.word	0xffffefff

080017a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2241      	movs	r2, #65	; 0x41
 80017b6:	5c9b      	ldrb	r3, [r3, r2]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b20      	cmp	r3, #32
 80017bc:	d139      	bne.n	8001832 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2240      	movs	r2, #64	; 0x40
 80017c2:	5c9b      	ldrb	r3, [r3, r2]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d101      	bne.n	80017cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e033      	b.n	8001834 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2240      	movs	r2, #64	; 0x40
 80017d0:	2101      	movs	r1, #1
 80017d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2241      	movs	r2, #65	; 0x41
 80017d8:	2124      	movs	r1, #36	; 0x24
 80017da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2101      	movs	r1, #1
 80017e8:	438a      	bics	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4a11      	ldr	r2, [pc, #68]	; (800183c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2101      	movs	r1, #1
 800181a:	430a      	orrs	r2, r1
 800181c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2241      	movs	r2, #65	; 0x41
 8001822:	2120      	movs	r1, #32
 8001824:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2240      	movs	r2, #64	; 0x40
 800182a:	2100      	movs	r1, #0
 800182c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	e000      	b.n	8001834 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001832:	2302      	movs	r3, #2
  }
}
 8001834:	0018      	movs	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	b004      	add	sp, #16
 800183a:	bd80      	pop	{r7, pc}
 800183c:	fffff0ff 	.word	0xfffff0ff

08001840 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800184e:	4013      	ands	r3, r2
 8001850:	0019      	movs	r1, r3
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	430a      	orrs	r2, r1
 8001858:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	429a      	cmp	r2, r3
 8001862:	d11f      	bne.n	80018a4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	0013      	movs	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	189b      	adds	r3, r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4912      	ldr	r1, [pc, #72]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001872:	0018      	movs	r0, r3
 8001874:	f7fe fc50 	bl	8000118 <__udivsi3>
 8001878:	0003      	movs	r3, r0
 800187a:	3301      	adds	r3, #1
 800187c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800187e:	e008      	b.n	8001892 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3b01      	subs	r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	e001      	b.n	8001892 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e009      	b.n	80018a6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	401a      	ands	r2, r3
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d0ed      	beq.n	8001880 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	0018      	movs	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b004      	add	sp, #16
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	40007000 	.word	0x40007000
 80018b4:	fffff9ff 	.word	0xfffff9ff
 80018b8:	20000000 	.word	0x20000000
 80018bc:	000f4240 	.word	0x000f4240

080018c0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	23e0      	movs	r3, #224	; 0xe0
 80018ca:	01db      	lsls	r3, r3, #7
 80018cc:	4013      	ands	r3, r2
}
 80018ce:	0018      	movs	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000

080018d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e2fe      	b.n	8001ee8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2201      	movs	r2, #1
 80018f0:	4013      	ands	r3, r2
 80018f2:	d100      	bne.n	80018f6 <HAL_RCC_OscConfig+0x1e>
 80018f4:	e07c      	b.n	80019f0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018f6:	4bc3      	ldr	r3, [pc, #780]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2238      	movs	r2, #56	; 0x38
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001900:	4bc0      	ldr	r3, [pc, #768]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2203      	movs	r2, #3
 8001906:	4013      	ands	r3, r2
 8001908:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	2b10      	cmp	r3, #16
 800190e:	d102      	bne.n	8001916 <HAL_RCC_OscConfig+0x3e>
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	2b03      	cmp	r3, #3
 8001914:	d002      	beq.n	800191c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2b08      	cmp	r3, #8
 800191a:	d10b      	bne.n	8001934 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	4bb9      	ldr	r3, [pc, #740]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	029b      	lsls	r3, r3, #10
 8001924:	4013      	ands	r3, r2
 8001926:	d062      	beq.n	80019ee <HAL_RCC_OscConfig+0x116>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d15e      	bne.n	80019ee <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e2d9      	b.n	8001ee8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	025b      	lsls	r3, r3, #9
 800193c:	429a      	cmp	r2, r3
 800193e:	d107      	bne.n	8001950 <HAL_RCC_OscConfig+0x78>
 8001940:	4bb0      	ldr	r3, [pc, #704]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4baf      	ldr	r3, [pc, #700]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	0249      	lsls	r1, r1, #9
 800194a:	430a      	orrs	r2, r1
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	e020      	b.n	8001992 <HAL_RCC_OscConfig+0xba>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	23a0      	movs	r3, #160	; 0xa0
 8001956:	02db      	lsls	r3, r3, #11
 8001958:	429a      	cmp	r2, r3
 800195a:	d10e      	bne.n	800197a <HAL_RCC_OscConfig+0xa2>
 800195c:	4ba9      	ldr	r3, [pc, #676]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4ba8      	ldr	r3, [pc, #672]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001962:	2180      	movs	r1, #128	; 0x80
 8001964:	02c9      	lsls	r1, r1, #11
 8001966:	430a      	orrs	r2, r1
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	4ba6      	ldr	r3, [pc, #664]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4ba5      	ldr	r3, [pc, #660]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	0249      	lsls	r1, r1, #9
 8001974:	430a      	orrs	r2, r1
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	e00b      	b.n	8001992 <HAL_RCC_OscConfig+0xba>
 800197a:	4ba2      	ldr	r3, [pc, #648]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4ba1      	ldr	r3, [pc, #644]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001980:	49a1      	ldr	r1, [pc, #644]	; (8001c08 <HAL_RCC_OscConfig+0x330>)
 8001982:	400a      	ands	r2, r1
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	4b9f      	ldr	r3, [pc, #636]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4b9e      	ldr	r3, [pc, #632]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 800198c:	499f      	ldr	r1, [pc, #636]	; (8001c0c <HAL_RCC_OscConfig+0x334>)
 800198e:	400a      	ands	r2, r1
 8001990:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d014      	beq.n	80019c4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199a:	f7ff fb29 	bl	8000ff0 <HAL_GetTick>
 800199e:	0003      	movs	r3, r0
 80019a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff fb24 	bl	8000ff0 <HAL_GetTick>
 80019a8:	0002      	movs	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	; 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e298      	b.n	8001ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019b6:	4b93      	ldr	r3, [pc, #588]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	029b      	lsls	r3, r3, #10
 80019be:	4013      	ands	r3, r2
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0xcc>
 80019c2:	e015      	b.n	80019f0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fb14 	bl	8000ff0 <HAL_GetTick>
 80019c8:	0003      	movs	r3, r0
 80019ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ce:	f7ff fb0f 	bl	8000ff0 <HAL_GetTick>
 80019d2:	0002      	movs	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b64      	cmp	r3, #100	; 0x64
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e283      	b.n	8001ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019e0:	4b88      	ldr	r3, [pc, #544]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	029b      	lsls	r3, r3, #10
 80019e8:	4013      	ands	r3, r2
 80019ea:	d1f0      	bne.n	80019ce <HAL_RCC_OscConfig+0xf6>
 80019ec:	e000      	b.n	80019f0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2202      	movs	r2, #2
 80019f6:	4013      	ands	r3, r2
 80019f8:	d100      	bne.n	80019fc <HAL_RCC_OscConfig+0x124>
 80019fa:	e099      	b.n	8001b30 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019fc:	4b81      	ldr	r3, [pc, #516]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2238      	movs	r2, #56	; 0x38
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a06:	4b7f      	ldr	r3, [pc, #508]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2b10      	cmp	r3, #16
 8001a14:	d102      	bne.n	8001a1c <HAL_RCC_OscConfig+0x144>
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d002      	beq.n	8001a22 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d135      	bne.n	8001a8e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a22:	4b78      	ldr	r3, [pc, #480]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d005      	beq.n	8001a3a <HAL_RCC_OscConfig+0x162>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e256      	b.n	8001ee8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3a:	4b72      	ldr	r3, [pc, #456]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4a74      	ldr	r2, [pc, #464]	; (8001c10 <HAL_RCC_OscConfig+0x338>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	021a      	lsls	r2, r3, #8
 8001a4a:	4b6e      	ldr	r3, [pc, #440]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d112      	bne.n	8001a7c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a56:	4b6b      	ldr	r3, [pc, #428]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a6e      	ldr	r2, [pc, #440]	; (8001c14 <HAL_RCC_OscConfig+0x33c>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	0019      	movs	r1, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	4b67      	ldr	r3, [pc, #412]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001a66:	430a      	orrs	r2, r1
 8001a68:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a6a:	4b66      	ldr	r3, [pc, #408]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	0adb      	lsrs	r3, r3, #11
 8001a70:	2207      	movs	r2, #7
 8001a72:	4013      	ands	r3, r2
 8001a74:	4a68      	ldr	r2, [pc, #416]	; (8001c18 <HAL_RCC_OscConfig+0x340>)
 8001a76:	40da      	lsrs	r2, r3
 8001a78:	4b68      	ldr	r3, [pc, #416]	; (8001c1c <HAL_RCC_OscConfig+0x344>)
 8001a7a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a7c:	4b68      	ldr	r3, [pc, #416]	; (8001c20 <HAL_RCC_OscConfig+0x348>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	0018      	movs	r0, r3
 8001a82:	f7ff fa59 	bl	8000f38 <HAL_InitTick>
 8001a86:	1e03      	subs	r3, r0, #0
 8001a88:	d051      	beq.n	8001b2e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e22c      	b.n	8001ee8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d030      	beq.n	8001af8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a96:	4b5b      	ldr	r3, [pc, #364]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a5e      	ldr	r2, [pc, #376]	; (8001c14 <HAL_RCC_OscConfig+0x33c>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691a      	ldr	r2, [r3, #16]
 8001aa4:	4b57      	ldr	r3, [pc, #348]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001aaa:	4b56      	ldr	r3, [pc, #344]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4b55      	ldr	r3, [pc, #340]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	0049      	lsls	r1, r1, #1
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fa9a 	bl	8000ff0 <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac2:	f7ff fa95 	bl	8000ff0 <HAL_GetTick>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e209      	b.n	8001ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad4:	4b4b      	ldr	r3, [pc, #300]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	4013      	ands	r3, r2
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae0:	4b48      	ldr	r3, [pc, #288]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4a4a      	ldr	r2, [pc, #296]	; (8001c10 <HAL_RCC_OscConfig+0x338>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	0019      	movs	r1, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	021a      	lsls	r2, r3, #8
 8001af0:	4b44      	ldr	r3, [pc, #272]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001af2:	430a      	orrs	r2, r1
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	e01b      	b.n	8001b30 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001af8:	4b42      	ldr	r3, [pc, #264]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001afe:	4949      	ldr	r1, [pc, #292]	; (8001c24 <HAL_RCC_OscConfig+0x34c>)
 8001b00:	400a      	ands	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff fa74 	bl	8000ff0 <HAL_GetTick>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0e:	f7ff fa6f 	bl	8000ff0 <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e1e3      	b.n	8001ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b20:	4b38      	ldr	r3, [pc, #224]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d1f0      	bne.n	8001b0e <HAL_RCC_OscConfig+0x236>
 8001b2c:	e000      	b.n	8001b30 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b2e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2208      	movs	r2, #8
 8001b36:	4013      	ands	r3, r2
 8001b38:	d047      	beq.n	8001bca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b3a:	4b32      	ldr	r3, [pc, #200]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2238      	movs	r2, #56	; 0x38
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b18      	cmp	r3, #24
 8001b44:	d10a      	bne.n	8001b5c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b46:	4b2f      	ldr	r3, [pc, #188]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d03c      	beq.n	8001bca <HAL_RCC_OscConfig+0x2f2>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d138      	bne.n	8001bca <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e1c5      	b.n	8001ee8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d019      	beq.n	8001b98 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b64:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001b66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b68:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b70:	f7ff fa3e 	bl	8000ff0 <HAL_GetTick>
 8001b74:	0003      	movs	r3, r0
 8001b76:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa39 	bl	8000ff0 <HAL_GetTick>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1ad      	b.n	8001ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b90:	2202      	movs	r2, #2
 8001b92:	4013      	ands	r3, r2
 8001b94:	d0f1      	beq.n	8001b7a <HAL_RCC_OscConfig+0x2a2>
 8001b96:	e018      	b.n	8001bca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001b9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	438a      	bics	r2, r1
 8001ba2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fa24 	bl	8000ff0 <HAL_GetTick>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bae:	f7ff fa1f 	bl	8000ff0 <HAL_GetTick>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e193      	b.n	8001ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d1f1      	bne.n	8001bae <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2204      	movs	r2, #4
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d100      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x2fe>
 8001bd4:	e0c6      	b.n	8001d64 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd6:	231f      	movs	r3, #31
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2238      	movs	r2, #56	; 0x38
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	d11e      	bne.n	8001c28 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_RCC_OscConfig+0x32c>)
 8001bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bee:	2202      	movs	r2, #2
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d100      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x31e>
 8001bf4:	e0b6      	b.n	8001d64 <HAL_RCC_OscConfig+0x48c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d000      	beq.n	8001c00 <HAL_RCC_OscConfig+0x328>
 8001bfe:	e0b1      	b.n	8001d64 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e171      	b.n	8001ee8 <HAL_RCC_OscConfig+0x610>
 8001c04:	40021000 	.word	0x40021000
 8001c08:	fffeffff 	.word	0xfffeffff
 8001c0c:	fffbffff 	.word	0xfffbffff
 8001c10:	ffff80ff 	.word	0xffff80ff
 8001c14:	ffffc7ff 	.word	0xffffc7ff
 8001c18:	00f42400 	.word	0x00f42400
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20000004 	.word	0x20000004
 8001c24:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c28:	4bb1      	ldr	r3, [pc, #708]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	055b      	lsls	r3, r3, #21
 8001c30:	4013      	ands	r3, r2
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_OscConfig+0x360>
 8001c34:	2301      	movs	r3, #1
 8001c36:	e000      	b.n	8001c3a <HAL_RCC_OscConfig+0x362>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d011      	beq.n	8001c62 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	4bac      	ldr	r3, [pc, #688]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001c40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c42:	4bab      	ldr	r3, [pc, #684]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001c44:	2180      	movs	r1, #128	; 0x80
 8001c46:	0549      	lsls	r1, r1, #21
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c4c:	4ba8      	ldr	r3, [pc, #672]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	055b      	lsls	r3, r3, #21
 8001c54:	4013      	ands	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001c5a:	231f      	movs	r3, #31
 8001c5c:	18fb      	adds	r3, r7, r3
 8001c5e:	2201      	movs	r2, #1
 8001c60:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c62:	4ba4      	ldr	r3, [pc, #656]	; (8001ef4 <HAL_RCC_OscConfig+0x61c>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d11a      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c6e:	4ba1      	ldr	r3, [pc, #644]	; (8001ef4 <HAL_RCC_OscConfig+0x61c>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4ba0      	ldr	r3, [pc, #640]	; (8001ef4 <HAL_RCC_OscConfig+0x61c>)
 8001c74:	2180      	movs	r1, #128	; 0x80
 8001c76:	0049      	lsls	r1, r1, #1
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff f9b8 	bl	8000ff0 <HAL_GetTick>
 8001c80:	0003      	movs	r3, r0
 8001c82:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c86:	f7ff f9b3 	bl	8000ff0 <HAL_GetTick>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e127      	b.n	8001ee8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c98:	4b96      	ldr	r3, [pc, #600]	; (8001ef4 <HAL_RCC_OscConfig+0x61c>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d106      	bne.n	8001cba <HAL_RCC_OscConfig+0x3e2>
 8001cac:	4b90      	ldr	r3, [pc, #576]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001cae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cb0:	4b8f      	ldr	r3, [pc, #572]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cb8:	e01c      	b.n	8001cf4 <HAL_RCC_OscConfig+0x41c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b05      	cmp	r3, #5
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x404>
 8001cc2:	4b8b      	ldr	r3, [pc, #556]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001cc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cc6:	4b8a      	ldr	r3, [pc, #552]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001cc8:	2104      	movs	r1, #4
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cce:	4b88      	ldr	r3, [pc, #544]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001cd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cd2:	4b87      	ldr	r3, [pc, #540]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cda:	e00b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x41c>
 8001cdc:	4b84      	ldr	r3, [pc, #528]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001cde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ce0:	4b83      	ldr	r3, [pc, #524]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	438a      	bics	r2, r1
 8001ce6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ce8:	4b81      	ldr	r3, [pc, #516]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001cea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cec:	4b80      	ldr	r3, [pc, #512]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001cee:	2104      	movs	r1, #4
 8001cf0:	438a      	bics	r2, r1
 8001cf2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d014      	beq.n	8001d26 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7ff f978 	bl	8000ff0 <HAL_GetTick>
 8001d00:	0003      	movs	r3, r0
 8001d02:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d04:	e009      	b.n	8001d1a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d06:	f7ff f973 	bl	8000ff0 <HAL_GetTick>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	4a79      	ldr	r2, [pc, #484]	; (8001ef8 <HAL_RCC_OscConfig+0x620>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e0e6      	b.n	8001ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d1a:	4b75      	ldr	r3, [pc, #468]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1e:	2202      	movs	r2, #2
 8001d20:	4013      	ands	r3, r2
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x42e>
 8001d24:	e013      	b.n	8001d4e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d26:	f7ff f963 	bl	8000ff0 <HAL_GetTick>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d2e:	e009      	b.n	8001d44 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d30:	f7ff f95e 	bl	8000ff0 <HAL_GetTick>
 8001d34:	0002      	movs	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	4a6f      	ldr	r2, [pc, #444]	; (8001ef8 <HAL_RCC_OscConfig+0x620>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e0d1      	b.n	8001ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d44:	4b6a      	ldr	r3, [pc, #424]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d48:	2202      	movs	r2, #2
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d4e:	231f      	movs	r3, #31
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d105      	bne.n	8001d64 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d58:	4b65      	ldr	r3, [pc, #404]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d5c:	4b64      	ldr	r3, [pc, #400]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001d5e:	4967      	ldr	r1, [pc, #412]	; (8001efc <HAL_RCC_OscConfig+0x624>)
 8001d60:	400a      	ands	r2, r1
 8001d62:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d100      	bne.n	8001d6e <HAL_RCC_OscConfig+0x496>
 8001d6c:	e0bb      	b.n	8001ee6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d6e:	4b60      	ldr	r3, [pc, #384]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2238      	movs	r2, #56	; 0x38
 8001d74:	4013      	ands	r3, r2
 8001d76:	2b10      	cmp	r3, #16
 8001d78:	d100      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4a4>
 8001d7a:	e07b      	b.n	8001e74 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d156      	bne.n	8001e32 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d84:	4b5a      	ldr	r3, [pc, #360]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b59      	ldr	r3, [pc, #356]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001d8a:	495d      	ldr	r1, [pc, #372]	; (8001f00 <HAL_RCC_OscConfig+0x628>)
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d90:	f7ff f92e 	bl	8000ff0 <HAL_GetTick>
 8001d94:	0003      	movs	r3, r0
 8001d96:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9a:	f7ff f929 	bl	8000ff0 <HAL_GetTick>
 8001d9e:	0002      	movs	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e09d      	b.n	8001ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dac:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	049b      	lsls	r3, r3, #18
 8001db4:	4013      	ands	r3, r2
 8001db6:	d1f0      	bne.n	8001d9a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db8:	4b4d      	ldr	r3, [pc, #308]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	4a51      	ldr	r2, [pc, #324]	; (8001f04 <HAL_RCC_OscConfig+0x62c>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1a      	ldr	r2, [r3, #32]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de4:	431a      	orrs	r2, r3
 8001de6:	4b42      	ldr	r3, [pc, #264]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001de8:	430a      	orrs	r2, r1
 8001dea:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dec:	4b40      	ldr	r3, [pc, #256]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001df2:	2180      	movs	r1, #128	; 0x80
 8001df4:	0449      	lsls	r1, r1, #17
 8001df6:	430a      	orrs	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001dfa:	4b3d      	ldr	r3, [pc, #244]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	4b3c      	ldr	r3, [pc, #240]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001e00:	2180      	movs	r1, #128	; 0x80
 8001e02:	0549      	lsls	r1, r1, #21
 8001e04:	430a      	orrs	r2, r1
 8001e06:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff f8f2 	bl	8000ff0 <HAL_GetTick>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e12:	f7ff f8ed 	bl	8000ff0 <HAL_GetTick>
 8001e16:	0002      	movs	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e061      	b.n	8001ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e24:	4b32      	ldr	r3, [pc, #200]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	049b      	lsls	r3, r3, #18
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x53a>
 8001e30:	e059      	b.n	8001ee6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e32:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4b2e      	ldr	r3, [pc, #184]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001e38:	4931      	ldr	r1, [pc, #196]	; (8001f00 <HAL_RCC_OscConfig+0x628>)
 8001e3a:	400a      	ands	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3e:	f7ff f8d7 	bl	8000ff0 <HAL_GetTick>
 8001e42:	0003      	movs	r3, r0
 8001e44:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e48:	f7ff f8d2 	bl	8000ff0 <HAL_GetTick>
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e046      	b.n	8001ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e5a:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	049b      	lsls	r3, r3, #18
 8001e62:	4013      	ands	r3, r2
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001e66:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001e6c:	4926      	ldr	r1, [pc, #152]	; (8001f08 <HAL_RCC_OscConfig+0x630>)
 8001e6e:	400a      	ands	r2, r1
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	e038      	b.n	8001ee6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e033      	b.n	8001ee8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_RCC_OscConfig+0x618>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2203      	movs	r2, #3
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d126      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2270      	movs	r2, #112	; 0x70
 8001e98:	401a      	ands	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d11f      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	23fe      	movs	r3, #254	; 0xfe
 8001ea6:	01db      	lsls	r3, r3, #7
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eae:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d116      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	23f8      	movs	r3, #248	; 0xf8
 8001eb8:	039b      	lsls	r3, r3, #14
 8001eba:	401a      	ands	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d10e      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	23e0      	movs	r3, #224	; 0xe0
 8001ec8:	051b      	lsls	r3, r3, #20
 8001eca:	401a      	ands	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	0f5b      	lsrs	r3, r3, #29
 8001ed8:	075a      	lsls	r2, r3, #29
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	0018      	movs	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b008      	add	sp, #32
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	00001388 	.word	0x00001388
 8001efc:	efffffff 	.word	0xefffffff
 8001f00:	feffffff 	.word	0xfeffffff
 8001f04:	11c1808c 	.word	0x11c1808c
 8001f08:	eefefffc 	.word	0xeefefffc

08001f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0e9      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b76      	ldr	r3, [pc, #472]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2207      	movs	r2, #7
 8001f26:	4013      	ands	r3, r2
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d91e      	bls.n	8001f6c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b73      	ldr	r3, [pc, #460]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2207      	movs	r2, #7
 8001f34:	4393      	bics	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	4b70      	ldr	r3, [pc, #448]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f40:	f7ff f856 	bl	8000ff0 <HAL_GetTick>
 8001f44:	0003      	movs	r3, r0
 8001f46:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f48:	e009      	b.n	8001f5e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4a:	f7ff f851 	bl	8000ff0 <HAL_GetTick>
 8001f4e:	0002      	movs	r2, r0
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	4a6a      	ldr	r2, [pc, #424]	; (8002100 <HAL_RCC_ClockConfig+0x1f4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e0ca      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f5e:	4b67      	ldr	r3, [pc, #412]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2207      	movs	r2, #7
 8001f64:	4013      	ands	r3, r2
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d1ee      	bne.n	8001f4a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2202      	movs	r2, #2
 8001f72:	4013      	ands	r3, r2
 8001f74:	d015      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d006      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f80:	4b60      	ldr	r3, [pc, #384]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	4b5f      	ldr	r3, [pc, #380]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 8001f86:	21e0      	movs	r1, #224	; 0xe0
 8001f88:	01c9      	lsls	r1, r1, #7
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8e:	4b5d      	ldr	r3, [pc, #372]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	4a5d      	ldr	r2, [pc, #372]	; (8002108 <HAL_RCC_ClockConfig+0x1fc>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	0019      	movs	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	4b59      	ldr	r3, [pc, #356]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d057      	beq.n	800205c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d107      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb4:	4b53      	ldr	r3, [pc, #332]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	029b      	lsls	r3, r3, #10
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d12b      	bne.n	8002018 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e097      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d107      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fcc:	4b4d      	ldr	r3, [pc, #308]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	049b      	lsls	r3, r3, #18
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d11f      	bne.n	8002018 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e08b      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d107      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fe4:	4b47      	ldr	r3, [pc, #284]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4013      	ands	r3, r2
 8001fee:	d113      	bne.n	8002018 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e07f      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ffc:	4b41      	ldr	r3, [pc, #260]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 8001ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002000:	2202      	movs	r2, #2
 8002002:	4013      	ands	r3, r2
 8002004:	d108      	bne.n	8002018 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e074      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200a:	4b3e      	ldr	r3, [pc, #248]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 800200c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200e:	2202      	movs	r2, #2
 8002010:	4013      	ands	r3, r2
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e06d      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002018:	4b3a      	ldr	r3, [pc, #232]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2207      	movs	r2, #7
 800201e:	4393      	bics	r3, r2
 8002020:	0019      	movs	r1, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	4b37      	ldr	r3, [pc, #220]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 8002028:	430a      	orrs	r2, r1
 800202a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800202c:	f7fe ffe0 	bl	8000ff0 <HAL_GetTick>
 8002030:	0003      	movs	r3, r0
 8002032:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002034:	e009      	b.n	800204a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002036:	f7fe ffdb 	bl	8000ff0 <HAL_GetTick>
 800203a:	0002      	movs	r2, r0
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	4a2f      	ldr	r2, [pc, #188]	; (8002100 <HAL_RCC_ClockConfig+0x1f4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e054      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	4b2e      	ldr	r3, [pc, #184]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2238      	movs	r2, #56	; 0x38
 8002050:	401a      	ands	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	429a      	cmp	r2, r3
 800205a:	d1ec      	bne.n	8002036 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800205c:	4b27      	ldr	r3, [pc, #156]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2207      	movs	r2, #7
 8002062:	4013      	ands	r3, r2
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d21e      	bcs.n	80020a8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2207      	movs	r2, #7
 8002070:	4393      	bics	r3, r2
 8002072:	0019      	movs	r1, r3
 8002074:	4b21      	ldr	r3, [pc, #132]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800207c:	f7fe ffb8 	bl	8000ff0 <HAL_GetTick>
 8002080:	0003      	movs	r3, r0
 8002082:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002084:	e009      	b.n	800209a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002086:	f7fe ffb3 	bl	8000ff0 <HAL_GetTick>
 800208a:	0002      	movs	r2, r0
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	4a1b      	ldr	r2, [pc, #108]	; (8002100 <HAL_RCC_ClockConfig+0x1f4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e02c      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2207      	movs	r2, #7
 80020a0:	4013      	ands	r3, r2
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d1ee      	bne.n	8002086 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2204      	movs	r2, #4
 80020ae:	4013      	ands	r3, r2
 80020b0:	d009      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020b2:	4b14      	ldr	r3, [pc, #80]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	4a15      	ldr	r2, [pc, #84]	; (800210c <HAL_RCC_ClockConfig+0x200>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	0019      	movs	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	4b10      	ldr	r3, [pc, #64]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 80020c2:	430a      	orrs	r2, r1
 80020c4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020c6:	f000 f829 	bl	800211c <HAL_RCC_GetSysClockFreq>
 80020ca:	0001      	movs	r1, r0
 80020cc:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	220f      	movs	r2, #15
 80020d4:	401a      	ands	r2, r3
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <HAL_RCC_ClockConfig+0x204>)
 80020d8:	0092      	lsls	r2, r2, #2
 80020da:	58d3      	ldr	r3, [r2, r3]
 80020dc:	221f      	movs	r2, #31
 80020de:	4013      	ands	r3, r2
 80020e0:	000a      	movs	r2, r1
 80020e2:	40da      	lsrs	r2, r3
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_ClockConfig+0x208>)
 80020e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_ClockConfig+0x20c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f7fe ff23 	bl	8000f38 <HAL_InitTick>
 80020f2:	0003      	movs	r3, r0
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b004      	add	sp, #16
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40022000 	.word	0x40022000
 8002100:	00001388 	.word	0x00001388
 8002104:	40021000 	.word	0x40021000
 8002108:	fffff0ff 	.word	0xfffff0ff
 800210c:	ffff8fff 	.word	0xffff8fff
 8002110:	0800486c 	.word	0x0800486c
 8002114:	20000000 	.word	0x20000000
 8002118:	20000004 	.word	0x20000004

0800211c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002122:	4b3c      	ldr	r3, [pc, #240]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2238      	movs	r2, #56	; 0x38
 8002128:	4013      	ands	r3, r2
 800212a:	d10f      	bne.n	800214c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800212c:	4b39      	ldr	r3, [pc, #228]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	0adb      	lsrs	r3, r3, #11
 8002132:	2207      	movs	r2, #7
 8002134:	4013      	ands	r3, r2
 8002136:	2201      	movs	r2, #1
 8002138:	409a      	lsls	r2, r3
 800213a:	0013      	movs	r3, r2
 800213c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800213e:	6839      	ldr	r1, [r7, #0]
 8002140:	4835      	ldr	r0, [pc, #212]	; (8002218 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002142:	f7fd ffe9 	bl	8000118 <__udivsi3>
 8002146:	0003      	movs	r3, r0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	e05d      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800214c:	4b31      	ldr	r3, [pc, #196]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2238      	movs	r2, #56	; 0x38
 8002152:	4013      	ands	r3, r2
 8002154:	2b08      	cmp	r3, #8
 8002156:	d102      	bne.n	800215e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002158:	4b30      	ldr	r3, [pc, #192]	; (800221c <HAL_RCC_GetSysClockFreq+0x100>)
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	e054      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800215e:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2238      	movs	r2, #56	; 0x38
 8002164:	4013      	ands	r3, r2
 8002166:	2b10      	cmp	r3, #16
 8002168:	d138      	bne.n	80021dc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2203      	movs	r2, #3
 8002170:	4013      	ands	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002174:	4b27      	ldr	r3, [pc, #156]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	2207      	movs	r2, #7
 800217c:	4013      	ands	r3, r2
 800217e:	3301      	adds	r3, #1
 8002180:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d10d      	bne.n	80021a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	4824      	ldr	r0, [pc, #144]	; (800221c <HAL_RCC_GetSysClockFreq+0x100>)
 800218c:	f7fd ffc4 	bl	8000118 <__udivsi3>
 8002190:	0003      	movs	r3, r0
 8002192:	0019      	movs	r1, r3
 8002194:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	227f      	movs	r2, #127	; 0x7f
 800219c:	4013      	ands	r3, r2
 800219e:	434b      	muls	r3, r1
 80021a0:	617b      	str	r3, [r7, #20]
        break;
 80021a2:	e00d      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	481c      	ldr	r0, [pc, #112]	; (8002218 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021a8:	f7fd ffb6 	bl	8000118 <__udivsi3>
 80021ac:	0003      	movs	r3, r0
 80021ae:	0019      	movs	r1, r3
 80021b0:	4b18      	ldr	r3, [pc, #96]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	227f      	movs	r2, #127	; 0x7f
 80021b8:	4013      	ands	r3, r2
 80021ba:	434b      	muls	r3, r1
 80021bc:	617b      	str	r3, [r7, #20]
        break;
 80021be:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80021c0:	4b14      	ldr	r3, [pc, #80]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	0f5b      	lsrs	r3, r3, #29
 80021c6:	2207      	movs	r2, #7
 80021c8:	4013      	ands	r3, r2
 80021ca:	3301      	adds	r3, #1
 80021cc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	6978      	ldr	r0, [r7, #20]
 80021d2:	f7fd ffa1 	bl	8000118 <__udivsi3>
 80021d6:	0003      	movs	r3, r0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	e015      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2238      	movs	r2, #56	; 0x38
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b20      	cmp	r3, #32
 80021e6:	d103      	bne.n	80021f0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2238      	movs	r2, #56	; 0x38
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b18      	cmp	r3, #24
 80021fa:	d103      	bne.n	8002204 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80021fc:	23fa      	movs	r3, #250	; 0xfa
 80021fe:	01db      	lsls	r3, r3, #7
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	e001      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002208:	693b      	ldr	r3, [r7, #16]
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b006      	add	sp, #24
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	40021000 	.word	0x40021000
 8002218:	00f42400 	.word	0x00f42400
 800221c:	007a1200 	.word	0x007a1200

08002220 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002224:	4b02      	ldr	r3, [pc, #8]	; (8002230 <HAL_RCC_GetHCLKFreq+0x10>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	0018      	movs	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	20000000 	.word	0x20000000

08002234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002234:	b5b0      	push	{r4, r5, r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002238:	f7ff fff2 	bl	8002220 <HAL_RCC_GetHCLKFreq>
 800223c:	0004      	movs	r4, r0
 800223e:	f7ff fb3f 	bl	80018c0 <LL_RCC_GetAPB1Prescaler>
 8002242:	0003      	movs	r3, r0
 8002244:	0b1a      	lsrs	r2, r3, #12
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002248:	0092      	lsls	r2, r2, #2
 800224a:	58d3      	ldr	r3, [r2, r3]
 800224c:	221f      	movs	r2, #31
 800224e:	4013      	ands	r3, r2
 8002250:	40dc      	lsrs	r4, r3
 8002252:	0023      	movs	r3, r4
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	bdb0      	pop	{r4, r5, r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	080048ac 	.word	0x080048ac

08002260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002268:	2313      	movs	r3, #19
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002270:	2312      	movs	r3, #18
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	029b      	lsls	r3, r3, #10
 8002280:	4013      	ands	r3, r2
 8002282:	d100      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002284:	e0a3      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002286:	2011      	movs	r0, #17
 8002288:	183b      	adds	r3, r7, r0
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228e:	4ba5      	ldr	r3, [pc, #660]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002290:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	055b      	lsls	r3, r3, #21
 8002296:	4013      	ands	r3, r2
 8002298:	d110      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	4ba2      	ldr	r3, [pc, #648]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800229c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800229e:	4ba1      	ldr	r3, [pc, #644]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	0549      	lsls	r1, r1, #21
 80022a4:	430a      	orrs	r2, r1
 80022a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80022a8:	4b9e      	ldr	r3, [pc, #632]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	055b      	lsls	r3, r3, #21
 80022b0:	4013      	ands	r3, r2
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b6:	183b      	adds	r3, r7, r0
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022bc:	4b9a      	ldr	r3, [pc, #616]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b99      	ldr	r3, [pc, #612]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80022c2:	2180      	movs	r1, #128	; 0x80
 80022c4:	0049      	lsls	r1, r1, #1
 80022c6:	430a      	orrs	r2, r1
 80022c8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022ca:	f7fe fe91 	bl	8000ff0 <HAL_GetTick>
 80022ce:	0003      	movs	r3, r0
 80022d0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022d2:	e00b      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d4:	f7fe fe8c 	bl	8000ff0 <HAL_GetTick>
 80022d8:	0002      	movs	r2, r0
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d904      	bls.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80022e2:	2313      	movs	r3, #19
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	2203      	movs	r2, #3
 80022e8:	701a      	strb	r2, [r3, #0]
        break;
 80022ea:	e005      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022ec:	4b8e      	ldr	r3, [pc, #568]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4013      	ands	r3, r2
 80022f6:	d0ed      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80022f8:	2313      	movs	r3, #19
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d154      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002302:	4b88      	ldr	r3, [pc, #544]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002304:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002306:	23c0      	movs	r3, #192	; 0xc0
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4013      	ands	r3, r2
 800230c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d019      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	429a      	cmp	r2, r3
 800231c:	d014      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800231e:	4b81      	ldr	r3, [pc, #516]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002322:	4a82      	ldr	r2, [pc, #520]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002324:	4013      	ands	r3, r2
 8002326:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002328:	4b7e      	ldr	r3, [pc, #504]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800232a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800232c:	4b7d      	ldr	r3, [pc, #500]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800232e:	2180      	movs	r1, #128	; 0x80
 8002330:	0249      	lsls	r1, r1, #9
 8002332:	430a      	orrs	r2, r1
 8002334:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002336:	4b7b      	ldr	r3, [pc, #492]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002338:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800233a:	4b7a      	ldr	r3, [pc, #488]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800233c:	497c      	ldr	r1, [pc, #496]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800233e:	400a      	ands	r2, r1
 8002340:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002342:	4b78      	ldr	r3, [pc, #480]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	2201      	movs	r2, #1
 800234c:	4013      	ands	r3, r2
 800234e:	d016      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7fe fe4e 	bl	8000ff0 <HAL_GetTick>
 8002354:	0003      	movs	r3, r0
 8002356:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002358:	e00c      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7fe fe49 	bl	8000ff0 <HAL_GetTick>
 800235e:	0002      	movs	r2, r0
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	4a73      	ldr	r2, [pc, #460]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d904      	bls.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800236a:	2313      	movs	r3, #19
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	2203      	movs	r2, #3
 8002370:	701a      	strb	r2, [r3, #0]
            break;
 8002372:	e004      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002374:	4b6b      	ldr	r3, [pc, #428]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002378:	2202      	movs	r2, #2
 800237a:	4013      	ands	r3, r2
 800237c:	d0ed      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800237e:	2313      	movs	r3, #19
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10a      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002388:	4b66      	ldr	r3, [pc, #408]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800238a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238c:	4a67      	ldr	r2, [pc, #412]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800238e:	4013      	ands	r3, r2
 8002390:	0019      	movs	r1, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002396:	4b63      	ldr	r3, [pc, #396]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002398:	430a      	orrs	r2, r1
 800239a:	65da      	str	r2, [r3, #92]	; 0x5c
 800239c:	e00c      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800239e:	2312      	movs	r3, #18
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	2213      	movs	r2, #19
 80023a4:	18ba      	adds	r2, r7, r2
 80023a6:	7812      	ldrb	r2, [r2, #0]
 80023a8:	701a      	strb	r2, [r3, #0]
 80023aa:	e005      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023ac:	2312      	movs	r3, #18
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	2213      	movs	r2, #19
 80023b2:	18ba      	adds	r2, r7, r2
 80023b4:	7812      	ldrb	r2, [r2, #0]
 80023b6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023b8:	2311      	movs	r3, #17
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d105      	bne.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c2:	4b58      	ldr	r3, [pc, #352]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023c6:	4b57      	ldr	r3, [pc, #348]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023c8:	495b      	ldr	r1, [pc, #364]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80023ca:	400a      	ands	r2, r1
 80023cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2201      	movs	r2, #1
 80023d4:	4013      	ands	r3, r2
 80023d6:	d009      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023d8:	4b52      	ldr	r3, [pc, #328]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023dc:	2203      	movs	r2, #3
 80023de:	4393      	bics	r3, r2
 80023e0:	0019      	movs	r1, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	4b4f      	ldr	r3, [pc, #316]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023e8:	430a      	orrs	r2, r1
 80023ea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2210      	movs	r2, #16
 80023f2:	4013      	ands	r3, r2
 80023f4:	d009      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023f6:	4b4b      	ldr	r3, [pc, #300]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	4a50      	ldr	r2, [pc, #320]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	0019      	movs	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	4b47      	ldr	r3, [pc, #284]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002406:	430a      	orrs	r2, r1
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4013      	ands	r3, r2
 8002414:	d009      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002416:	4b43      	ldr	r3, [pc, #268]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	4a49      	ldr	r2, [pc, #292]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800241c:	4013      	ands	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	4b3f      	ldr	r3, [pc, #252]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002426:	430a      	orrs	r2, r1
 8002428:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4013      	ands	r3, r2
 8002434:	d009      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002436:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243a:	4a42      	ldr	r2, [pc, #264]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800243c:	4013      	ands	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699a      	ldr	r2, [r3, #24]
 8002444:	4b37      	ldr	r3, [pc, #220]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002446:	430a      	orrs	r2, r1
 8002448:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2220      	movs	r2, #32
 8002450:	4013      	ands	r3, r2
 8002452:	d009      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002454:	4b33      	ldr	r3, [pc, #204]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002458:	4a3b      	ldr	r2, [pc, #236]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800245a:	4013      	ands	r3, r2
 800245c:	0019      	movs	r1, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	4b30      	ldr	r3, [pc, #192]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002464:	430a      	orrs	r2, r1
 8002466:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	01db      	lsls	r3, r3, #7
 8002470:	4013      	ands	r3, r2
 8002472:	d015      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002474:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	0899      	lsrs	r1, r3, #2
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69da      	ldr	r2, [r3, #28]
 8002480:	4b28      	ldr	r3, [pc, #160]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002482:	430a      	orrs	r2, r1
 8002484:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69da      	ldr	r2, [r3, #28]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	05db      	lsls	r3, r3, #23
 800248e:	429a      	cmp	r2, r3
 8002490:	d106      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002492:	4b24      	ldr	r3, [pc, #144]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	4b23      	ldr	r3, [pc, #140]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002498:	2180      	movs	r1, #128	; 0x80
 800249a:	0249      	lsls	r1, r1, #9
 800249c:	430a      	orrs	r2, r1
 800249e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	039b      	lsls	r3, r3, #14
 80024a8:	4013      	ands	r3, r2
 80024aa:	d016      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024ac:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b0:	4a26      	ldr	r2, [pc, #152]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1a      	ldr	r2, [r3, #32]
 80024ba:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024bc:	430a      	orrs	r2, r1
 80024be:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1a      	ldr	r2, [r3, #32]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	03db      	lsls	r3, r3, #15
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d106      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80024cc:	4b15      	ldr	r3, [pc, #84]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	4b14      	ldr	r3, [pc, #80]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024d2:	2180      	movs	r1, #128	; 0x80
 80024d4:	0449      	lsls	r1, r1, #17
 80024d6:	430a      	orrs	r2, r1
 80024d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	4013      	ands	r3, r2
 80024e4:	d016      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ea:	4a19      	ldr	r2, [pc, #100]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	0019      	movs	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024f6:	430a      	orrs	r2, r1
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	01db      	lsls	r3, r3, #7
 8002502:	429a      	cmp	r2, r3
 8002504:	d106      	bne.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002506:	4b07      	ldr	r3, [pc, #28]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800250c:	2180      	movs	r1, #128	; 0x80
 800250e:	0249      	lsls	r1, r1, #9
 8002510:	430a      	orrs	r2, r1
 8002512:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002514:	2312      	movs	r3, #18
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	781b      	ldrb	r3, [r3, #0]
}
 800251a:	0018      	movs	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	b006      	add	sp, #24
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	40021000 	.word	0x40021000
 8002528:	40007000 	.word	0x40007000
 800252c:	fffffcff 	.word	0xfffffcff
 8002530:	fffeffff 	.word	0xfffeffff
 8002534:	00001388 	.word	0x00001388
 8002538:	efffffff 	.word	0xefffffff
 800253c:	fffff3ff 	.word	0xfffff3ff
 8002540:	fff3ffff 	.word	0xfff3ffff
 8002544:	ffcfffff 	.word	0xffcfffff
 8002548:	ffffcfff 	.word	0xffffcfff
 800254c:	ffbfffff 	.word	0xffbfffff
 8002550:	ffff3fff 	.word	0xffff3fff

08002554 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002554:	b5b0      	push	{r4, r5, r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800255c:	230f      	movs	r3, #15
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d100      	bne.n	800256c <HAL_RTC_Init+0x18>
 800256a:	e08c      	b.n	8002686 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2229      	movs	r2, #41	; 0x29
 8002570:	5c9b      	ldrb	r3, [r3, r2]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10b      	bne.n	8002590 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2228      	movs	r2, #40	; 0x28
 800257c:	2100      	movs	r1, #0
 800257e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2288      	movs	r2, #136	; 0x88
 8002584:	0212      	lsls	r2, r2, #8
 8002586:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	0018      	movs	r0, r3
 800258c:	f7fe fb0c 	bl	8000ba8 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2229      	movs	r2, #41	; 0x29
 8002594:	2102      	movs	r1, #2
 8002596:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2210      	movs	r2, #16
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b10      	cmp	r3, #16
 80025a4:	d062      	beq.n	800266c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	22ca      	movs	r2, #202	; 0xca
 80025ac:	625a      	str	r2, [r3, #36]	; 0x24
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2253      	movs	r2, #83	; 0x53
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80025b6:	250f      	movs	r5, #15
 80025b8:	197c      	adds	r4, r7, r5
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	0018      	movs	r0, r3
 80025be:	f000 fb4a 	bl	8002c56 <RTC_EnterInitMode>
 80025c2:	0003      	movs	r3, r0
 80025c4:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80025c6:	0028      	movs	r0, r5
 80025c8:	183b      	adds	r3, r7, r0
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d12c      	bne.n	800262a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699a      	ldr	r2, [r3, #24]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	492e      	ldr	r1, [pc, #184]	; (8002694 <HAL_RTC_Init+0x140>)
 80025dc:	400a      	ands	r2, r1
 80025de:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6999      	ldr	r1, [r3, #24]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6912      	ldr	r2, [r2, #16]
 8002606:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6919      	ldr	r1, [r3, #16]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	041a      	lsls	r2, r3, #16
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800261c:	183c      	adds	r4, r7, r0
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	0018      	movs	r0, r3
 8002622:	f000 fb5b 	bl	8002cdc <RTC_ExitInitMode>
 8002626:	0003      	movs	r3, r0
 8002628:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800262a:	230f      	movs	r3, #15
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d116      	bne.n	8002662 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	00d2      	lsls	r2, r2, #3
 8002640:	08d2      	lsrs	r2, r2, #3
 8002642:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6999      	ldr	r1, [r3, #24]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	22ff      	movs	r2, #255	; 0xff
 8002668:	625a      	str	r2, [r3, #36]	; 0x24
 800266a:	e003      	b.n	8002674 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800266c:	230f      	movs	r3, #15
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002674:	230f      	movs	r3, #15
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d103      	bne.n	8002686 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2229      	movs	r2, #41	; 0x29
 8002682:	2101      	movs	r1, #1
 8002684:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002686:	230f      	movs	r3, #15
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	781b      	ldrb	r3, [r3, #0]
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	b004      	add	sp, #16
 8002692:	bdb0      	pop	{r4, r5, r7, pc}
 8002694:	fb8fffbf 	.word	0xfb8fffbf

08002698 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002698:	b5b0      	push	{r4, r5, r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2228      	movs	r2, #40	; 0x28
 80026a8:	5c9b      	ldrb	r3, [r3, r2]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_RTC_SetTime+0x1a>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e092      	b.n	80027d8 <HAL_RTC_SetTime+0x140>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2228      	movs	r2, #40	; 0x28
 80026b6:	2101      	movs	r1, #1
 80026b8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2229      	movs	r2, #41	; 0x29
 80026be:	2102      	movs	r1, #2
 80026c0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	22ca      	movs	r2, #202	; 0xca
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2253      	movs	r2, #83	; 0x53
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80026d2:	2513      	movs	r5, #19
 80026d4:	197c      	adds	r4, r7, r5
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 fabc 	bl	8002c56 <RTC_EnterInitMode>
 80026de:	0003      	movs	r3, r0
 80026e0:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80026e2:	197b      	adds	r3, r7, r5
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d162      	bne.n	80027b0 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d125      	bne.n	800273c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	2240      	movs	r2, #64	; 0x40
 80026f8:	4013      	ands	r3, r2
 80026fa:	d102      	bne.n	8002702 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2200      	movs	r2, #0
 8002700:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	0018      	movs	r0, r3
 8002708:	f000 fb2c 	bl	8002d64 <RTC_ByteToBcd2>
 800270c:	0003      	movs	r3, r0
 800270e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	785b      	ldrb	r3, [r3, #1]
 8002714:	0018      	movs	r0, r3
 8002716:	f000 fb25 	bl	8002d64 <RTC_ByteToBcd2>
 800271a:	0003      	movs	r3, r0
 800271c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800271e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	789b      	ldrb	r3, [r3, #2]
 8002724:	0018      	movs	r0, r3
 8002726:	f000 fb1d 	bl	8002d64 <RTC_ByteToBcd2>
 800272a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800272c:	0022      	movs	r2, r4
 800272e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	78db      	ldrb	r3, [r3, #3]
 8002734:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002736:	4313      	orrs	r3, r2
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	e017      	b.n	800276c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	2240      	movs	r2, #64	; 0x40
 8002744:	4013      	ands	r3, r2
 8002746:	d102      	bne.n	800274e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2200      	movs	r2, #0
 800274c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	785b      	ldrb	r3, [r3, #1]
 8002758:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800275a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002760:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	78db      	ldrb	r3, [r3, #3]
 8002766:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	491b      	ldr	r1, [pc, #108]	; (80027e0 <HAL_RTC_SetTime+0x148>)
 8002774:	400a      	ands	r2, r1
 8002776:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699a      	ldr	r2, [r3, #24]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4918      	ldr	r1, [pc, #96]	; (80027e4 <HAL_RTC_SetTime+0x14c>)
 8002784:	400a      	ands	r2, r1
 8002786:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6999      	ldr	r1, [r3, #24]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	431a      	orrs	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80027a0:	2313      	movs	r3, #19
 80027a2:	18fc      	adds	r4, r7, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	0018      	movs	r0, r3
 80027a8:	f000 fa98 	bl	8002cdc <RTC_ExitInitMode>
 80027ac:	0003      	movs	r3, r0
 80027ae:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	22ff      	movs	r2, #255	; 0xff
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80027b8:	2313      	movs	r3, #19
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d103      	bne.n	80027ca <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2229      	movs	r2, #41	; 0x29
 80027c6:	2101      	movs	r1, #1
 80027c8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2228      	movs	r2, #40	; 0x28
 80027ce:	2100      	movs	r1, #0
 80027d0:	5499      	strb	r1, [r3, r2]

  return status;
 80027d2:	2313      	movs	r3, #19
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	781b      	ldrb	r3, [r3, #0]
}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b006      	add	sp, #24
 80027de:	bdb0      	pop	{r4, r5, r7, pc}
 80027e0:	007f7f7f 	.word	0x007f7f7f
 80027e4:	fffbffff 	.word	0xfffbffff

080027e8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80027e8:	b5b0      	push	{r4, r5, r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2228      	movs	r2, #40	; 0x28
 80027f8:	5c9b      	ldrb	r3, [r3, r2]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_RTC_SetDate+0x1a>
 80027fe:	2302      	movs	r3, #2
 8002800:	e07e      	b.n	8002900 <HAL_RTC_SetDate+0x118>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2228      	movs	r2, #40	; 0x28
 8002806:	2101      	movs	r1, #1
 8002808:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2229      	movs	r2, #41	; 0x29
 800280e:	2102      	movs	r1, #2
 8002810:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10e      	bne.n	8002836 <HAL_RTC_SetDate+0x4e>
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	785b      	ldrb	r3, [r3, #1]
 800281c:	001a      	movs	r2, r3
 800281e:	2310      	movs	r3, #16
 8002820:	4013      	ands	r3, r2
 8002822:	d008      	beq.n	8002836 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	785b      	ldrb	r3, [r3, #1]
 8002828:	2210      	movs	r2, #16
 800282a:	4393      	bics	r3, r2
 800282c:	b2db      	uxtb	r3, r3
 800282e:	330a      	adds	r3, #10
 8002830:	b2da      	uxtb	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d11c      	bne.n	8002876 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	78db      	ldrb	r3, [r3, #3]
 8002840:	0018      	movs	r0, r3
 8002842:	f000 fa8f 	bl	8002d64 <RTC_ByteToBcd2>
 8002846:	0003      	movs	r3, r0
 8002848:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	785b      	ldrb	r3, [r3, #1]
 800284e:	0018      	movs	r0, r3
 8002850:	f000 fa88 	bl	8002d64 <RTC_ByteToBcd2>
 8002854:	0003      	movs	r3, r0
 8002856:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002858:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	789b      	ldrb	r3, [r3, #2]
 800285e:	0018      	movs	r0, r3
 8002860:	f000 fa80 	bl	8002d64 <RTC_ByteToBcd2>
 8002864:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002866:	0022      	movs	r2, r4
 8002868:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	e00e      	b.n	8002894 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	78db      	ldrb	r3, [r3, #3]
 800287a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	785b      	ldrb	r3, [r3, #1]
 8002880:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002882:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002888:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	22ca      	movs	r2, #202	; 0xca
 800289a:	625a      	str	r2, [r3, #36]	; 0x24
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2253      	movs	r2, #83	; 0x53
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80028a4:	2513      	movs	r5, #19
 80028a6:	197c      	adds	r4, r7, r5
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	0018      	movs	r0, r3
 80028ac:	f000 f9d3 	bl	8002c56 <RTC_EnterInitMode>
 80028b0:	0003      	movs	r3, r0
 80028b2:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80028b4:	0028      	movs	r0, r5
 80028b6:	183b      	adds	r3, r7, r0
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10c      	bne.n	80028d8 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4910      	ldr	r1, [pc, #64]	; (8002908 <HAL_RTC_SetDate+0x120>)
 80028c6:	400a      	ands	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80028ca:	183c      	adds	r4, r7, r0
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	0018      	movs	r0, r3
 80028d0:	f000 fa04 	bl	8002cdc <RTC_ExitInitMode>
 80028d4:	0003      	movs	r3, r0
 80028d6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	22ff      	movs	r2, #255	; 0xff
 80028de:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80028e0:	2313      	movs	r3, #19
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d103      	bne.n	80028f2 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2229      	movs	r2, #41	; 0x29
 80028ee:	2101      	movs	r1, #1
 80028f0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2228      	movs	r2, #40	; 0x28
 80028f6:	2100      	movs	r1, #0
 80028f8:	5499      	strb	r1, [r3, r2]

  return status;
 80028fa:	2313      	movs	r3, #19
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	781b      	ldrb	r3, [r3, #0]
}
 8002900:	0018      	movs	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	b006      	add	sp, #24
 8002906:	bdb0      	pop	{r4, r5, r7, pc}
 8002908:	00ffff3f 	.word	0x00ffff3f

0800290c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2228      	movs	r2, #40	; 0x28
 800291c:	5c9b      	ldrb	r3, [r3, r2]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_RTC_SetAlarm_IT+0x1a>
 8002922:	2302      	movs	r3, #2
 8002924:	e127      	b.n	8002b76 <HAL_RTC_SetAlarm_IT+0x26a>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2228      	movs	r2, #40	; 0x28
 800292a:	2101      	movs	r1, #1
 800292c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2229      	movs	r2, #41	; 0x29
 8002932:	2102      	movs	r1, #2
 8002934:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d136      	bne.n	80029aa <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	2240      	movs	r2, #64	; 0x40
 8002944:	4013      	ands	r3, r2
 8002946:	d102      	bne.n	800294e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2200      	movs	r2, #0
 800294c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	0018      	movs	r0, r3
 8002954:	f000 fa06 	bl	8002d64 <RTC_ByteToBcd2>
 8002958:	0003      	movs	r3, r0
 800295a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	785b      	ldrb	r3, [r3, #1]
 8002960:	0018      	movs	r0, r3
 8002962:	f000 f9ff 	bl	8002d64 <RTC_ByteToBcd2>
 8002966:	0003      	movs	r3, r0
 8002968:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800296a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	789b      	ldrb	r3, [r3, #2]
 8002970:	0018      	movs	r0, r3
 8002972:	f000 f9f7 	bl	8002d64 <RTC_ByteToBcd2>
 8002976:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002978:	0022      	movs	r2, r4
 800297a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	78db      	ldrb	r3, [r3, #3]
 8002980:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002982:	431a      	orrs	r2, r3
 8002984:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2220      	movs	r2, #32
 800298a:	5c9b      	ldrb	r3, [r3, r2]
 800298c:	0018      	movs	r0, r3
 800298e:	f000 f9e9 	bl	8002d64 <RTC_ByteToBcd2>
 8002992:	0003      	movs	r3, r0
 8002994:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002996:	0022      	movs	r2, r4
 8002998:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800299e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	e022      	b.n	80029f0 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2240      	movs	r2, #64	; 0x40
 80029b2:	4013      	ands	r3, r2
 80029b4:	d102      	bne.n	80029bc <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2200      	movs	r2, #0
 80029ba:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	785b      	ldrb	r3, [r3, #1]
 80029c6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80029c8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80029ce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	78db      	ldrb	r3, [r3, #3]
 80029d4:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80029d6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2120      	movs	r1, #32
 80029dc:	5c5b      	ldrb	r3, [r3, r1]
 80029de:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80029e0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80029e6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	22ca      	movs	r2, #202	; 0xca
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2253      	movs	r2, #83	; 0x53
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a10:	2380      	movs	r3, #128	; 0x80
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d14c      	bne.n	8002ab2 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4957      	ldr	r1, [pc, #348]	; (8002b80 <HAL_RTC_SetAlarm_IT+0x274>)
 8002a24:	400a      	ands	r2, r1
 8002a26:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2101      	movs	r1, #1
 8002a34:	430a      	orrs	r2, r1
 8002a36:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8002a38:	f7fe fada 	bl	8000ff0 <HAL_GetTick>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002a40:	e016      	b.n	8002a70 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002a42:	f7fe fad5 	bl	8000ff0 <HAL_GetTick>
 8002a46:	0002      	movs	r2, r0
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	1ad2      	subs	r2, r2, r3
 8002a4c:	23fa      	movs	r3, #250	; 0xfa
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d90d      	bls.n	8002a70 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	22ff      	movs	r2, #255	; 0xff
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2229      	movs	r2, #41	; 0x29
 8002a60:	2103      	movs	r1, #3
 8002a62:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2228      	movs	r2, #40	; 0x28
 8002a68:	2100      	movs	r1, #0
 8002a6a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e082      	b.n	8002b76 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d0e2      	beq.n	8002a42 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69fa      	ldr	r2, [r7, #28]
 8002a82:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2180      	movs	r1, #128	; 0x80
 8002a98:	0049      	lsls	r1, r1, #1
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699a      	ldr	r2, [r3, #24]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	0149      	lsls	r1, r1, #5
 8002aac:	430a      	orrs	r2, r1
 8002aae:	619a      	str	r2, [r3, #24]
 8002ab0:	e04b      	b.n	8002b4a <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	699a      	ldr	r2, [r3, #24]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4931      	ldr	r1, [pc, #196]	; (8002b84 <HAL_RTC_SetAlarm_IT+0x278>)
 8002abe:	400a      	ands	r2, r1
 8002ac0:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2102      	movs	r1, #2
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8002ad2:	f7fe fa8d 	bl	8000ff0 <HAL_GetTick>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002ada:	e016      	b.n	8002b0a <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002adc:	f7fe fa88 	bl	8000ff0 <HAL_GetTick>
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	1ad2      	subs	r2, r2, r3
 8002ae6:	23fa      	movs	r3, #250	; 0xfa
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d90d      	bls.n	8002b0a <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	22ff      	movs	r2, #255	; 0xff
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2229      	movs	r2, #41	; 0x29
 8002afa:	2103      	movs	r1, #3
 8002afc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2228      	movs	r2, #40	; 0x28
 8002b02:	2100      	movs	r1, #0
 8002b04:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e035      	b.n	8002b76 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2202      	movs	r2, #2
 8002b12:	4013      	ands	r3, r2
 8002b14:	d0e2      	beq.n	8002adc <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699a      	ldr	r2, [r3, #24]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2180      	movs	r1, #128	; 0x80
 8002b32:	0089      	lsls	r1, r1, #2
 8002b34:	430a      	orrs	r2, r1
 8002b36:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2180      	movs	r1, #128	; 0x80
 8002b44:	0189      	lsls	r1, r1, #6
 8002b46:	430a      	orrs	r2, r1
 8002b48:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002b4a:	4a0f      	ldr	r2, [pc, #60]	; (8002b88 <HAL_RTC_SetAlarm_IT+0x27c>)
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	58d3      	ldr	r3, [r2, r3]
 8002b50:	490d      	ldr	r1, [pc, #52]	; (8002b88 <HAL_RTC_SetAlarm_IT+0x27c>)
 8002b52:	2280      	movs	r2, #128	; 0x80
 8002b54:	0312      	lsls	r2, r2, #12
 8002b56:	4313      	orrs	r3, r2
 8002b58:	2280      	movs	r2, #128	; 0x80
 8002b5a:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	22ff      	movs	r2, #255	; 0xff
 8002b62:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2229      	movs	r2, #41	; 0x29
 8002b68:	2101      	movs	r1, #1
 8002b6a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2228      	movs	r2, #40	; 0x28
 8002b70:	2100      	movs	r1, #0
 8002b72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	0018      	movs	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b009      	add	sp, #36	; 0x24
 8002b7c:	bd90      	pop	{r4, r7, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	fffffeff 	.word	0xfffffeff
 8002b84:	fffffdff 	.word	0xfffffdff
 8002b88:	40021800 	.word	0x40021800

08002b8c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	015b      	lsls	r3, r3, #5
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d011      	beq.n	8002bc6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba8:	2201      	movs	r2, #1
 8002baa:	4013      	ands	r3, r2
 8002bac:	d00b      	beq.n	8002bc6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2101      	movs	r1, #1
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f7fd ff5d 	bl	8000a80 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699a      	ldr	r2, [r3, #24]
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	019b      	lsls	r3, r3, #6
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d011      	beq.n	8002bf8 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bda:	2202      	movs	r2, #2
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d00b      	beq.n	8002bf8 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2102      	movs	r1, #2
 8002bec:	430a      	orrs	r2, r1
 8002bee:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f000 f8de 	bl	8002db4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2229      	movs	r2, #41	; 0x29
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	5499      	strb	r1, [r3, r2]
}
 8002c00:	46c0      	nop			; (mov r8, r8)
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b002      	add	sp, #8
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	21a0      	movs	r1, #160	; 0xa0
 8002c1c:	438a      	bics	r2, r1
 8002c1e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002c20:	f7fe f9e6 	bl	8000ff0 <HAL_GetTick>
 8002c24:	0003      	movs	r3, r0
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002c28:	e00a      	b.n	8002c40 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002c2a:	f7fe f9e1 	bl	8000ff0 <HAL_GetTick>
 8002c2e:	0002      	movs	r2, r0
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1ad2      	subs	r2, r2, r3
 8002c34:	23fa      	movs	r3, #250	; 0xfa
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d901      	bls.n	8002c40 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e006      	b.n	8002c4e <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d0ee      	beq.n	8002c2a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	0018      	movs	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b004      	add	sp, #16
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002c5e:	230f      	movs	r3, #15
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	2240      	movs	r2, #64	; 0x40
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d12c      	bne.n	8002ccc <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002c82:	f7fe f9b5 	bl	8000ff0 <HAL_GetTick>
 8002c86:	0003      	movs	r3, r0
 8002c88:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002c8a:	e014      	b.n	8002cb6 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002c8c:	f7fe f9b0 	bl	8000ff0 <HAL_GetTick>
 8002c90:	0002      	movs	r2, r0
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	1ad2      	subs	r2, r2, r3
 8002c96:	200f      	movs	r0, #15
 8002c98:	183b      	adds	r3, r7, r0
 8002c9a:	1839      	adds	r1, r7, r0
 8002c9c:	7809      	ldrb	r1, [r1, #0]
 8002c9e:	7019      	strb	r1, [r3, #0]
 8002ca0:	23fa      	movs	r3, #250	; 0xfa
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d906      	bls.n	8002cb6 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002ca8:	183b      	adds	r3, r7, r0
 8002caa:	2203      	movs	r2, #3
 8002cac:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2229      	movs	r2, #41	; 0x29
 8002cb2:	2103      	movs	r1, #3
 8002cb4:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	2240      	movs	r2, #64	; 0x40
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d104      	bne.n	8002ccc <RTC_EnterInitMode+0x76>
 8002cc2:	230f      	movs	r3, #15
 8002cc4:	18fb      	adds	r3, r7, r3
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d1df      	bne.n	8002c8c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002ccc:	230f      	movs	r3, #15
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	781b      	ldrb	r3, [r3, #0]
}
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b004      	add	sp, #16
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002cdc:	b590      	push	{r4, r7, lr}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce4:	240f      	movs	r4, #15
 8002ce6:	193b      	adds	r3, r7, r4
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002cec:	4b1c      	ldr	r3, [pc, #112]	; (8002d60 <RTC_ExitInitMode+0x84>)
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <RTC_ExitInitMode+0x84>)
 8002cf2:	2180      	movs	r1, #128	; 0x80
 8002cf4:	438a      	bics	r2, r1
 8002cf6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <RTC_ExitInitMode+0x84>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d10d      	bne.n	8002d1e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f7ff ff7f 	bl	8002c08 <HAL_RTC_WaitForSynchro>
 8002d0a:	1e03      	subs	r3, r0, #0
 8002d0c:	d021      	beq.n	8002d52 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2229      	movs	r2, #41	; 0x29
 8002d12:	2103      	movs	r1, #3
 8002d14:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002d16:	193b      	adds	r3, r7, r4
 8002d18:	2203      	movs	r2, #3
 8002d1a:	701a      	strb	r2, [r3, #0]
 8002d1c:	e019      	b.n	8002d52 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <RTC_ExitInitMode+0x84>)
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <RTC_ExitInitMode+0x84>)
 8002d24:	2120      	movs	r1, #32
 8002d26:	438a      	bics	r2, r1
 8002d28:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f7ff ff6b 	bl	8002c08 <HAL_RTC_WaitForSynchro>
 8002d32:	1e03      	subs	r3, r0, #0
 8002d34:	d007      	beq.n	8002d46 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2229      	movs	r2, #41	; 0x29
 8002d3a:	2103      	movs	r1, #3
 8002d3c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002d3e:	230f      	movs	r3, #15
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	2203      	movs	r2, #3
 8002d44:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002d46:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <RTC_ExitInitMode+0x84>)
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <RTC_ExitInitMode+0x84>)
 8002d4c:	2120      	movs	r1, #32
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002d52:	230f      	movs	r3, #15
 8002d54:	18fb      	adds	r3, r7, r3
 8002d56:	781b      	ldrb	r3, [r3, #0]
}
 8002d58:	0018      	movs	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b005      	add	sp, #20
 8002d5e:	bd90      	pop	{r4, r7, pc}
 8002d60:	40002800 	.word	0x40002800

08002d64 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	0002      	movs	r2, r0
 8002d6c:	1dfb      	adds	r3, r7, #7
 8002d6e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002d74:	230b      	movs	r3, #11
 8002d76:	18fb      	adds	r3, r7, r3
 8002d78:	1dfa      	adds	r2, r7, #7
 8002d7a:	7812      	ldrb	r2, [r2, #0]
 8002d7c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8002d7e:	e008      	b.n	8002d92 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3301      	adds	r3, #1
 8002d84:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002d86:	220b      	movs	r2, #11
 8002d88:	18bb      	adds	r3, r7, r2
 8002d8a:	18ba      	adds	r2, r7, r2
 8002d8c:	7812      	ldrb	r2, [r2, #0]
 8002d8e:	3a0a      	subs	r2, #10
 8002d90:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8002d92:	210b      	movs	r1, #11
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b09      	cmp	r3, #9
 8002d9a:	d8f1      	bhi.n	8002d80 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	187b      	adds	r3, r7, r1
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	b2db      	uxtb	r3, r3
}
 8002dac:	0018      	movs	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b004      	add	sp, #16
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b002      	add	sp, #8
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e046      	b.n	8002e64 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2288      	movs	r2, #136	; 0x88
 8002dda:	589b      	ldr	r3, [r3, r2]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d107      	bne.n	8002df0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2284      	movs	r2, #132	; 0x84
 8002de4:	2100      	movs	r1, #0
 8002de6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0018      	movs	r0, r3
 8002dec:	f7fd ff22 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2288      	movs	r2, #136	; 0x88
 8002df4:	2124      	movs	r1, #36	; 0x24
 8002df6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2101      	movs	r1, #1
 8002e04:	438a      	bics	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f000 f8cc 	bl	8002fa8 <UART_SetConfig>
 8002e10:	0003      	movs	r3, r0
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e024      	b.n	8002e64 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f000 fb37 	bl	8003498 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	490d      	ldr	r1, [pc, #52]	; (8002e6c <HAL_UART_Init+0xa8>)
 8002e36:	400a      	ands	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	212a      	movs	r1, #42	; 0x2a
 8002e46:	438a      	bics	r2, r1
 8002e48:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2101      	movs	r1, #1
 8002e56:	430a      	orrs	r2, r1
 8002e58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f000 fbcf 	bl	8003600 <UART_CheckIdleState>
 8002e62:	0003      	movs	r3, r0
}
 8002e64:	0018      	movs	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b002      	add	sp, #8
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	ffffb7ff 	.word	0xffffb7ff

08002e70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	; 0x28
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	1dbb      	adds	r3, r7, #6
 8002e7e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2288      	movs	r2, #136	; 0x88
 8002e84:	589b      	ldr	r3, [r3, r2]
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d000      	beq.n	8002e8c <HAL_UART_Transmit+0x1c>
 8002e8a:	e088      	b.n	8002f9e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_UART_Transmit+0x2a>
 8002e92:	1dbb      	adds	r3, r7, #6
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e080      	b.n	8002fa0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	015b      	lsls	r3, r3, #5
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d109      	bne.n	8002ebe <HAL_UART_Transmit+0x4e>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d105      	bne.n	8002ebe <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d001      	beq.n	8002ebe <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e070      	b.n	8002fa0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2290      	movs	r2, #144	; 0x90
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2288      	movs	r2, #136	; 0x88
 8002eca:	2121      	movs	r1, #33	; 0x21
 8002ecc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ece:	f7fe f88f 	bl	8000ff0 <HAL_GetTick>
 8002ed2:	0003      	movs	r3, r0
 8002ed4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1dba      	adds	r2, r7, #6
 8002eda:	2154      	movs	r1, #84	; 0x54
 8002edc:	8812      	ldrh	r2, [r2, #0]
 8002ede:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1dba      	adds	r2, r7, #6
 8002ee4:	2156      	movs	r1, #86	; 0x56
 8002ee6:	8812      	ldrh	r2, [r2, #0]
 8002ee8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	015b      	lsls	r3, r3, #5
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d108      	bne.n	8002f08 <HAL_UART_Transmit+0x98>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d104      	bne.n	8002f08 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	e003      	b.n	8002f10 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f10:	e02c      	b.n	8002f6c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	0013      	movs	r3, r2
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2180      	movs	r1, #128	; 0x80
 8002f20:	f000 fbbc 	bl	800369c <UART_WaitOnFlagUntilTimeout>
 8002f24:	1e03      	subs	r3, r0, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e039      	b.n	8002fa0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10b      	bne.n	8002f4a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	001a      	movs	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	05d2      	lsls	r2, r2, #23
 8002f3e:	0dd2      	lsrs	r2, r2, #23
 8002f40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	3302      	adds	r3, #2
 8002f46:	61bb      	str	r3, [r7, #24]
 8002f48:	e007      	b.n	8002f5a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	781a      	ldrb	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	3301      	adds	r3, #1
 8002f58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2256      	movs	r2, #86	; 0x56
 8002f5e:	5a9b      	ldrh	r3, [r3, r2]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b299      	uxth	r1, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2256      	movs	r2, #86	; 0x56
 8002f6a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2256      	movs	r2, #86	; 0x56
 8002f70:	5a9b      	ldrh	r3, [r3, r2]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1cc      	bne.n	8002f12 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	0013      	movs	r3, r2
 8002f82:	2200      	movs	r2, #0
 8002f84:	2140      	movs	r1, #64	; 0x40
 8002f86:	f000 fb89 	bl	800369c <UART_WaitOnFlagUntilTimeout>
 8002f8a:	1e03      	subs	r3, r0, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e006      	b.n	8002fa0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2288      	movs	r2, #136	; 0x88
 8002f96:	2120      	movs	r1, #32
 8002f98:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e000      	b.n	8002fa0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002f9e:	2302      	movs	r3, #2
  }
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b008      	add	sp, #32
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fa8:	b5b0      	push	{r4, r5, r7, lr}
 8002faa:	b090      	sub	sp, #64	; 0x40
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fb0:	231a      	movs	r3, #26
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	189b      	adds	r3, r3, r2
 8002fb6:	19db      	adds	r3, r3, r7
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4ac4      	ldr	r2, [pc, #784]	; (80032ec <UART_SetConfig+0x344>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	4abf      	ldr	r2, [pc, #764]	; (80032f0 <UART_SetConfig+0x348>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	68d9      	ldr	r1, [r3, #12]
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	0003      	movs	r3, r0
 8003000:	430b      	orrs	r3, r1
 8003002:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4ab9      	ldr	r2, [pc, #740]	; (80032f4 <UART_SetConfig+0x34c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d004      	beq.n	800301e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800301a:	4313      	orrs	r3, r2
 800301c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4ab4      	ldr	r2, [pc, #720]	; (80032f8 <UART_SetConfig+0x350>)
 8003026:	4013      	ands	r3, r2
 8003028:	0019      	movs	r1, r3
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003030:	430b      	orrs	r3, r1
 8003032:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	220f      	movs	r2, #15
 800303c:	4393      	bics	r3, r2
 800303e:	0018      	movs	r0, r3
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	0003      	movs	r3, r0
 800304a:	430b      	orrs	r3, r1
 800304c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4aaa      	ldr	r2, [pc, #680]	; (80032fc <UART_SetConfig+0x354>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d131      	bne.n	80030bc <UART_SetConfig+0x114>
 8003058:	4ba9      	ldr	r3, [pc, #676]	; (8003300 <UART_SetConfig+0x358>)
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	2203      	movs	r2, #3
 800305e:	4013      	ands	r3, r2
 8003060:	2b03      	cmp	r3, #3
 8003062:	d01d      	beq.n	80030a0 <UART_SetConfig+0xf8>
 8003064:	d823      	bhi.n	80030ae <UART_SetConfig+0x106>
 8003066:	2b02      	cmp	r3, #2
 8003068:	d00c      	beq.n	8003084 <UART_SetConfig+0xdc>
 800306a:	d820      	bhi.n	80030ae <UART_SetConfig+0x106>
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <UART_SetConfig+0xce>
 8003070:	2b01      	cmp	r3, #1
 8003072:	d00e      	beq.n	8003092 <UART_SetConfig+0xea>
 8003074:	e01b      	b.n	80030ae <UART_SetConfig+0x106>
 8003076:	231b      	movs	r3, #27
 8003078:	2220      	movs	r2, #32
 800307a:	189b      	adds	r3, r3, r2
 800307c:	19db      	adds	r3, r3, r7
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
 8003082:	e071      	b.n	8003168 <UART_SetConfig+0x1c0>
 8003084:	231b      	movs	r3, #27
 8003086:	2220      	movs	r2, #32
 8003088:	189b      	adds	r3, r3, r2
 800308a:	19db      	adds	r3, r3, r7
 800308c:	2202      	movs	r2, #2
 800308e:	701a      	strb	r2, [r3, #0]
 8003090:	e06a      	b.n	8003168 <UART_SetConfig+0x1c0>
 8003092:	231b      	movs	r3, #27
 8003094:	2220      	movs	r2, #32
 8003096:	189b      	adds	r3, r3, r2
 8003098:	19db      	adds	r3, r3, r7
 800309a:	2204      	movs	r2, #4
 800309c:	701a      	strb	r2, [r3, #0]
 800309e:	e063      	b.n	8003168 <UART_SetConfig+0x1c0>
 80030a0:	231b      	movs	r3, #27
 80030a2:	2220      	movs	r2, #32
 80030a4:	189b      	adds	r3, r3, r2
 80030a6:	19db      	adds	r3, r3, r7
 80030a8:	2208      	movs	r2, #8
 80030aa:	701a      	strb	r2, [r3, #0]
 80030ac:	e05c      	b.n	8003168 <UART_SetConfig+0x1c0>
 80030ae:	231b      	movs	r3, #27
 80030b0:	2220      	movs	r2, #32
 80030b2:	189b      	adds	r3, r3, r2
 80030b4:	19db      	adds	r3, r3, r7
 80030b6:	2210      	movs	r2, #16
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	e055      	b.n	8003168 <UART_SetConfig+0x1c0>
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a90      	ldr	r2, [pc, #576]	; (8003304 <UART_SetConfig+0x35c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d106      	bne.n	80030d4 <UART_SetConfig+0x12c>
 80030c6:	231b      	movs	r3, #27
 80030c8:	2220      	movs	r2, #32
 80030ca:	189b      	adds	r3, r3, r2
 80030cc:	19db      	adds	r3, r3, r7
 80030ce:	2200      	movs	r2, #0
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	e049      	b.n	8003168 <UART_SetConfig+0x1c0>
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a86      	ldr	r2, [pc, #536]	; (80032f4 <UART_SetConfig+0x34c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d13e      	bne.n	800315c <UART_SetConfig+0x1b4>
 80030de:	4b88      	ldr	r3, [pc, #544]	; (8003300 <UART_SetConfig+0x358>)
 80030e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030e2:	23c0      	movs	r3, #192	; 0xc0
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	4013      	ands	r3, r2
 80030e8:	22c0      	movs	r2, #192	; 0xc0
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d027      	beq.n	8003140 <UART_SetConfig+0x198>
 80030f0:	22c0      	movs	r2, #192	; 0xc0
 80030f2:	0112      	lsls	r2, r2, #4
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d82a      	bhi.n	800314e <UART_SetConfig+0x1a6>
 80030f8:	2280      	movs	r2, #128	; 0x80
 80030fa:	0112      	lsls	r2, r2, #4
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d011      	beq.n	8003124 <UART_SetConfig+0x17c>
 8003100:	2280      	movs	r2, #128	; 0x80
 8003102:	0112      	lsls	r2, r2, #4
 8003104:	4293      	cmp	r3, r2
 8003106:	d822      	bhi.n	800314e <UART_SetConfig+0x1a6>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d004      	beq.n	8003116 <UART_SetConfig+0x16e>
 800310c:	2280      	movs	r2, #128	; 0x80
 800310e:	00d2      	lsls	r2, r2, #3
 8003110:	4293      	cmp	r3, r2
 8003112:	d00e      	beq.n	8003132 <UART_SetConfig+0x18a>
 8003114:	e01b      	b.n	800314e <UART_SetConfig+0x1a6>
 8003116:	231b      	movs	r3, #27
 8003118:	2220      	movs	r2, #32
 800311a:	189b      	adds	r3, r3, r2
 800311c:	19db      	adds	r3, r3, r7
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	e021      	b.n	8003168 <UART_SetConfig+0x1c0>
 8003124:	231b      	movs	r3, #27
 8003126:	2220      	movs	r2, #32
 8003128:	189b      	adds	r3, r3, r2
 800312a:	19db      	adds	r3, r3, r7
 800312c:	2202      	movs	r2, #2
 800312e:	701a      	strb	r2, [r3, #0]
 8003130:	e01a      	b.n	8003168 <UART_SetConfig+0x1c0>
 8003132:	231b      	movs	r3, #27
 8003134:	2220      	movs	r2, #32
 8003136:	189b      	adds	r3, r3, r2
 8003138:	19db      	adds	r3, r3, r7
 800313a:	2204      	movs	r2, #4
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	e013      	b.n	8003168 <UART_SetConfig+0x1c0>
 8003140:	231b      	movs	r3, #27
 8003142:	2220      	movs	r2, #32
 8003144:	189b      	adds	r3, r3, r2
 8003146:	19db      	adds	r3, r3, r7
 8003148:	2208      	movs	r2, #8
 800314a:	701a      	strb	r2, [r3, #0]
 800314c:	e00c      	b.n	8003168 <UART_SetConfig+0x1c0>
 800314e:	231b      	movs	r3, #27
 8003150:	2220      	movs	r2, #32
 8003152:	189b      	adds	r3, r3, r2
 8003154:	19db      	adds	r3, r3, r7
 8003156:	2210      	movs	r2, #16
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	e005      	b.n	8003168 <UART_SetConfig+0x1c0>
 800315c:	231b      	movs	r3, #27
 800315e:	2220      	movs	r2, #32
 8003160:	189b      	adds	r3, r3, r2
 8003162:	19db      	adds	r3, r3, r7
 8003164:	2210      	movs	r2, #16
 8003166:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a61      	ldr	r2, [pc, #388]	; (80032f4 <UART_SetConfig+0x34c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d000      	beq.n	8003174 <UART_SetConfig+0x1cc>
 8003172:	e092      	b.n	800329a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003174:	231b      	movs	r3, #27
 8003176:	2220      	movs	r2, #32
 8003178:	189b      	adds	r3, r3, r2
 800317a:	19db      	adds	r3, r3, r7
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b08      	cmp	r3, #8
 8003180:	d015      	beq.n	80031ae <UART_SetConfig+0x206>
 8003182:	dc18      	bgt.n	80031b6 <UART_SetConfig+0x20e>
 8003184:	2b04      	cmp	r3, #4
 8003186:	d00d      	beq.n	80031a4 <UART_SetConfig+0x1fc>
 8003188:	dc15      	bgt.n	80031b6 <UART_SetConfig+0x20e>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <UART_SetConfig+0x1ec>
 800318e:	2b02      	cmp	r3, #2
 8003190:	d005      	beq.n	800319e <UART_SetConfig+0x1f6>
 8003192:	e010      	b.n	80031b6 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003194:	f7ff f84e 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8003198:	0003      	movs	r3, r0
 800319a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800319c:	e014      	b.n	80031c8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800319e:	4b5a      	ldr	r3, [pc, #360]	; (8003308 <UART_SetConfig+0x360>)
 80031a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031a2:	e011      	b.n	80031c8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031a4:	f7fe ffba 	bl	800211c <HAL_RCC_GetSysClockFreq>
 80031a8:	0003      	movs	r3, r0
 80031aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031ac:	e00c      	b.n	80031c8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ae:	2380      	movs	r3, #128	; 0x80
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031b4:	e008      	b.n	80031c8 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80031ba:	231a      	movs	r3, #26
 80031bc:	2220      	movs	r2, #32
 80031be:	189b      	adds	r3, r3, r2
 80031c0:	19db      	adds	r3, r3, r7
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
        break;
 80031c6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d100      	bne.n	80031d0 <UART_SetConfig+0x228>
 80031ce:	e147      	b.n	8003460 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031d4:	4b4d      	ldr	r3, [pc, #308]	; (800330c <UART_SetConfig+0x364>)
 80031d6:	0052      	lsls	r2, r2, #1
 80031d8:	5ad3      	ldrh	r3, [r2, r3]
 80031da:	0019      	movs	r1, r3
 80031dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031de:	f7fc ff9b 	bl	8000118 <__udivsi3>
 80031e2:	0003      	movs	r3, r0
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	0013      	movs	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	189b      	adds	r3, r3, r2
 80031f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d305      	bcc.n	8003202 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031fe:	429a      	cmp	r2, r3
 8003200:	d906      	bls.n	8003210 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8003202:	231a      	movs	r3, #26
 8003204:	2220      	movs	r2, #32
 8003206:	189b      	adds	r3, r3, r2
 8003208:	19db      	adds	r3, r3, r7
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	e127      	b.n	8003460 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003212:	61bb      	str	r3, [r7, #24]
 8003214:	2300      	movs	r3, #0
 8003216:	61fb      	str	r3, [r7, #28]
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800321c:	4b3b      	ldr	r3, [pc, #236]	; (800330c <UART_SetConfig+0x364>)
 800321e:	0052      	lsls	r2, r2, #1
 8003220:	5ad3      	ldrh	r3, [r2, r3]
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	69b8      	ldr	r0, [r7, #24]
 800322e:	69f9      	ldr	r1, [r7, #28]
 8003230:	f7fc fffe 	bl	8000230 <__aeabi_uldivmod>
 8003234:	0002      	movs	r2, r0
 8003236:	000b      	movs	r3, r1
 8003238:	0e11      	lsrs	r1, r2, #24
 800323a:	021d      	lsls	r5, r3, #8
 800323c:	430d      	orrs	r5, r1
 800323e:	0214      	lsls	r4, r2, #8
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	085b      	lsrs	r3, r3, #1
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	2300      	movs	r3, #0
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68b8      	ldr	r0, [r7, #8]
 800324e:	68f9      	ldr	r1, [r7, #12]
 8003250:	1900      	adds	r0, r0, r4
 8003252:	4169      	adcs	r1, r5
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	603b      	str	r3, [r7, #0]
 800325a:	2300      	movs	r3, #0
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f7fc ffe5 	bl	8000230 <__aeabi_uldivmod>
 8003266:	0002      	movs	r2, r0
 8003268:	000b      	movs	r3, r1
 800326a:	0013      	movs	r3, r2
 800326c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800326e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003270:	23c0      	movs	r3, #192	; 0xc0
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	429a      	cmp	r2, r3
 8003276:	d309      	bcc.n	800328c <UART_SetConfig+0x2e4>
 8003278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	035b      	lsls	r3, r3, #13
 800327e:	429a      	cmp	r2, r3
 8003280:	d204      	bcs.n	800328c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003288:	60da      	str	r2, [r3, #12]
 800328a:	e0e9      	b.n	8003460 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800328c:	231a      	movs	r3, #26
 800328e:	2220      	movs	r2, #32
 8003290:	189b      	adds	r3, r3, r2
 8003292:	19db      	adds	r3, r3, r7
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
 8003298:	e0e2      	b.n	8003460 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	69da      	ldr	r2, [r3, #28]
 800329e:	2380      	movs	r3, #128	; 0x80
 80032a0:	021b      	lsls	r3, r3, #8
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d000      	beq.n	80032a8 <UART_SetConfig+0x300>
 80032a6:	e083      	b.n	80033b0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80032a8:	231b      	movs	r3, #27
 80032aa:	2220      	movs	r2, #32
 80032ac:	189b      	adds	r3, r3, r2
 80032ae:	19db      	adds	r3, r3, r7
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d015      	beq.n	80032e2 <UART_SetConfig+0x33a>
 80032b6:	dc2b      	bgt.n	8003310 <UART_SetConfig+0x368>
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d00d      	beq.n	80032d8 <UART_SetConfig+0x330>
 80032bc:	dc28      	bgt.n	8003310 <UART_SetConfig+0x368>
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <UART_SetConfig+0x320>
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d005      	beq.n	80032d2 <UART_SetConfig+0x32a>
 80032c6:	e023      	b.n	8003310 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c8:	f7fe ffb4 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 80032cc:	0003      	movs	r3, r0
 80032ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032d0:	e027      	b.n	8003322 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d2:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <UART_SetConfig+0x360>)
 80032d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032d6:	e024      	b.n	8003322 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032d8:	f7fe ff20 	bl	800211c <HAL_RCC_GetSysClockFreq>
 80032dc:	0003      	movs	r3, r0
 80032de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032e0:	e01f      	b.n	8003322 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032e2:	2380      	movs	r3, #128	; 0x80
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032e8:	e01b      	b.n	8003322 <UART_SetConfig+0x37a>
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	cfff69f3 	.word	0xcfff69f3
 80032f0:	ffffcfff 	.word	0xffffcfff
 80032f4:	40008000 	.word	0x40008000
 80032f8:	11fff4ff 	.word	0x11fff4ff
 80032fc:	40013800 	.word	0x40013800
 8003300:	40021000 	.word	0x40021000
 8003304:	40004400 	.word	0x40004400
 8003308:	00f42400 	.word	0x00f42400
 800330c:	080048cc 	.word	0x080048cc
      default:
        pclk = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003314:	231a      	movs	r3, #26
 8003316:	2220      	movs	r2, #32
 8003318:	189b      	adds	r3, r3, r2
 800331a:	19db      	adds	r3, r3, r7
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]
        break;
 8003320:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003324:	2b00      	cmp	r3, #0
 8003326:	d100      	bne.n	800332a <UART_SetConfig+0x382>
 8003328:	e09a      	b.n	8003460 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800332e:	4b58      	ldr	r3, [pc, #352]	; (8003490 <UART_SetConfig+0x4e8>)
 8003330:	0052      	lsls	r2, r2, #1
 8003332:	5ad3      	ldrh	r3, [r2, r3]
 8003334:	0019      	movs	r1, r3
 8003336:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003338:	f7fc feee 	bl	8000118 <__udivsi3>
 800333c:	0003      	movs	r3, r0
 800333e:	005a      	lsls	r2, r3, #1
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	18d2      	adds	r2, r2, r3
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	0019      	movs	r1, r3
 800334e:	0010      	movs	r0, r2
 8003350:	f7fc fee2 	bl	8000118 <__udivsi3>
 8003354:	0003      	movs	r3, r0
 8003356:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335a:	2b0f      	cmp	r3, #15
 800335c:	d921      	bls.n	80033a2 <UART_SetConfig+0x3fa>
 800335e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	025b      	lsls	r3, r3, #9
 8003364:	429a      	cmp	r2, r3
 8003366:	d21c      	bcs.n	80033a2 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336a:	b29a      	uxth	r2, r3
 800336c:	200e      	movs	r0, #14
 800336e:	2420      	movs	r4, #32
 8003370:	1903      	adds	r3, r0, r4
 8003372:	19db      	adds	r3, r3, r7
 8003374:	210f      	movs	r1, #15
 8003376:	438a      	bics	r2, r1
 8003378:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337c:	085b      	lsrs	r3, r3, #1
 800337e:	b29b      	uxth	r3, r3
 8003380:	2207      	movs	r2, #7
 8003382:	4013      	ands	r3, r2
 8003384:	b299      	uxth	r1, r3
 8003386:	1903      	adds	r3, r0, r4
 8003388:	19db      	adds	r3, r3, r7
 800338a:	1902      	adds	r2, r0, r4
 800338c:	19d2      	adds	r2, r2, r7
 800338e:	8812      	ldrh	r2, [r2, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	1902      	adds	r2, r0, r4
 800339a:	19d2      	adds	r2, r2, r7
 800339c:	8812      	ldrh	r2, [r2, #0]
 800339e:	60da      	str	r2, [r3, #12]
 80033a0:	e05e      	b.n	8003460 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80033a2:	231a      	movs	r3, #26
 80033a4:	2220      	movs	r2, #32
 80033a6:	189b      	adds	r3, r3, r2
 80033a8:	19db      	adds	r3, r3, r7
 80033aa:	2201      	movs	r2, #1
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	e057      	b.n	8003460 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033b0:	231b      	movs	r3, #27
 80033b2:	2220      	movs	r2, #32
 80033b4:	189b      	adds	r3, r3, r2
 80033b6:	19db      	adds	r3, r3, r7
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d015      	beq.n	80033ea <UART_SetConfig+0x442>
 80033be:	dc18      	bgt.n	80033f2 <UART_SetConfig+0x44a>
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d00d      	beq.n	80033e0 <UART_SetConfig+0x438>
 80033c4:	dc15      	bgt.n	80033f2 <UART_SetConfig+0x44a>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <UART_SetConfig+0x428>
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d005      	beq.n	80033da <UART_SetConfig+0x432>
 80033ce:	e010      	b.n	80033f2 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d0:	f7fe ff30 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 80033d4:	0003      	movs	r3, r0
 80033d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033d8:	e014      	b.n	8003404 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033da:	4b2e      	ldr	r3, [pc, #184]	; (8003494 <UART_SetConfig+0x4ec>)
 80033dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033de:	e011      	b.n	8003404 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e0:	f7fe fe9c 	bl	800211c <HAL_RCC_GetSysClockFreq>
 80033e4:	0003      	movs	r3, r0
 80033e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033e8:	e00c      	b.n	8003404 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ea:	2380      	movs	r3, #128	; 0x80
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033f0:	e008      	b.n	8003404 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80033f6:	231a      	movs	r3, #26
 80033f8:	2220      	movs	r2, #32
 80033fa:	189b      	adds	r3, r3, r2
 80033fc:	19db      	adds	r3, r3, r7
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]
        break;
 8003402:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003406:	2b00      	cmp	r3, #0
 8003408:	d02a      	beq.n	8003460 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800340e:	4b20      	ldr	r3, [pc, #128]	; (8003490 <UART_SetConfig+0x4e8>)
 8003410:	0052      	lsls	r2, r2, #1
 8003412:	5ad3      	ldrh	r3, [r2, r3]
 8003414:	0019      	movs	r1, r3
 8003416:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003418:	f7fc fe7e 	bl	8000118 <__udivsi3>
 800341c:	0003      	movs	r3, r0
 800341e:	001a      	movs	r2, r3
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	085b      	lsrs	r3, r3, #1
 8003426:	18d2      	adds	r2, r2, r3
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	0019      	movs	r1, r3
 800342e:	0010      	movs	r0, r2
 8003430:	f7fc fe72 	bl	8000118 <__udivsi3>
 8003434:	0003      	movs	r3, r0
 8003436:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	2b0f      	cmp	r3, #15
 800343c:	d90a      	bls.n	8003454 <UART_SetConfig+0x4ac>
 800343e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	025b      	lsls	r3, r3, #9
 8003444:	429a      	cmp	r2, r3
 8003446:	d205      	bcs.n	8003454 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	b29a      	uxth	r2, r3
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60da      	str	r2, [r3, #12]
 8003452:	e005      	b.n	8003460 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003454:	231a      	movs	r3, #26
 8003456:	2220      	movs	r2, #32
 8003458:	189b      	adds	r3, r3, r2
 800345a:	19db      	adds	r3, r3, r7
 800345c:	2201      	movs	r2, #1
 800345e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	226a      	movs	r2, #106	; 0x6a
 8003464:	2101      	movs	r1, #1
 8003466:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	2268      	movs	r2, #104	; 0x68
 800346c:	2101      	movs	r1, #1
 800346e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	2200      	movs	r2, #0
 8003474:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	2200      	movs	r2, #0
 800347a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800347c:	231a      	movs	r3, #26
 800347e:	2220      	movs	r2, #32
 8003480:	189b      	adds	r3, r3, r2
 8003482:	19db      	adds	r3, r3, r7
 8003484:	781b      	ldrb	r3, [r3, #0]
}
 8003486:	0018      	movs	r0, r3
 8003488:	46bd      	mov	sp, r7
 800348a:	b010      	add	sp, #64	; 0x40
 800348c:	bdb0      	pop	{r4, r5, r7, pc}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	080048cc 	.word	0x080048cc
 8003494:	00f42400 	.word	0x00f42400

08003498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	2201      	movs	r2, #1
 80034a6:	4013      	ands	r3, r2
 80034a8:	d00b      	beq.n	80034c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	4a4a      	ldr	r2, [pc, #296]	; (80035dc <UART_AdvFeatureConfig+0x144>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	0019      	movs	r1, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	2202      	movs	r2, #2
 80034c8:	4013      	ands	r3, r2
 80034ca:	d00b      	beq.n	80034e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4a43      	ldr	r2, [pc, #268]	; (80035e0 <UART_AdvFeatureConfig+0x148>)
 80034d4:	4013      	ands	r3, r2
 80034d6:	0019      	movs	r1, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e8:	2204      	movs	r2, #4
 80034ea:	4013      	ands	r3, r2
 80034ec:	d00b      	beq.n	8003506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4a3b      	ldr	r2, [pc, #236]	; (80035e4 <UART_AdvFeatureConfig+0x14c>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	0019      	movs	r1, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	2208      	movs	r2, #8
 800350c:	4013      	ands	r3, r2
 800350e:	d00b      	beq.n	8003528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	4a34      	ldr	r2, [pc, #208]	; (80035e8 <UART_AdvFeatureConfig+0x150>)
 8003518:	4013      	ands	r3, r2
 800351a:	0019      	movs	r1, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	2210      	movs	r2, #16
 800352e:	4013      	ands	r3, r2
 8003530:	d00b      	beq.n	800354a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4a2c      	ldr	r2, [pc, #176]	; (80035ec <UART_AdvFeatureConfig+0x154>)
 800353a:	4013      	ands	r3, r2
 800353c:	0019      	movs	r1, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	2220      	movs	r2, #32
 8003550:	4013      	ands	r3, r2
 8003552:	d00b      	beq.n	800356c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	4a25      	ldr	r2, [pc, #148]	; (80035f0 <UART_AdvFeatureConfig+0x158>)
 800355c:	4013      	ands	r3, r2
 800355e:	0019      	movs	r1, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003570:	2240      	movs	r2, #64	; 0x40
 8003572:	4013      	ands	r3, r2
 8003574:	d01d      	beq.n	80035b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4a1d      	ldr	r2, [pc, #116]	; (80035f4 <UART_AdvFeatureConfig+0x15c>)
 800357e:	4013      	ands	r3, r2
 8003580:	0019      	movs	r1, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	035b      	lsls	r3, r3, #13
 8003596:	429a      	cmp	r2, r3
 8003598:	d10b      	bne.n	80035b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	4a15      	ldr	r2, [pc, #84]	; (80035f8 <UART_AdvFeatureConfig+0x160>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	0019      	movs	r1, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b6:	2280      	movs	r2, #128	; 0x80
 80035b8:	4013      	ands	r3, r2
 80035ba:	d00b      	beq.n	80035d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	4a0e      	ldr	r2, [pc, #56]	; (80035fc <UART_AdvFeatureConfig+0x164>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	0019      	movs	r1, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	605a      	str	r2, [r3, #4]
  }
}
 80035d4:	46c0      	nop			; (mov r8, r8)
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b002      	add	sp, #8
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	fffdffff 	.word	0xfffdffff
 80035e0:	fffeffff 	.word	0xfffeffff
 80035e4:	fffbffff 	.word	0xfffbffff
 80035e8:	ffff7fff 	.word	0xffff7fff
 80035ec:	ffffefff 	.word	0xffffefff
 80035f0:	ffffdfff 	.word	0xffffdfff
 80035f4:	ffefffff 	.word	0xffefffff
 80035f8:	ff9fffff 	.word	0xff9fffff
 80035fc:	fff7ffff 	.word	0xfff7ffff

08003600 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af02      	add	r7, sp, #8
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2290      	movs	r2, #144	; 0x90
 800360c:	2100      	movs	r1, #0
 800360e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003610:	f7fd fcee 	bl	8000ff0 <HAL_GetTick>
 8003614:	0003      	movs	r3, r0
 8003616:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2208      	movs	r2, #8
 8003620:	4013      	ands	r3, r2
 8003622:	2b08      	cmp	r3, #8
 8003624:	d10c      	bne.n	8003640 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2280      	movs	r2, #128	; 0x80
 800362a:	0391      	lsls	r1, r2, #14
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	4a1a      	ldr	r2, [pc, #104]	; (8003698 <UART_CheckIdleState+0x98>)
 8003630:	9200      	str	r2, [sp, #0]
 8003632:	2200      	movs	r2, #0
 8003634:	f000 f832 	bl	800369c <UART_WaitOnFlagUntilTimeout>
 8003638:	1e03      	subs	r3, r0, #0
 800363a:	d001      	beq.n	8003640 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e026      	b.n	800368e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2204      	movs	r2, #4
 8003648:	4013      	ands	r3, r2
 800364a:	2b04      	cmp	r3, #4
 800364c:	d10c      	bne.n	8003668 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2280      	movs	r2, #128	; 0x80
 8003652:	03d1      	lsls	r1, r2, #15
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	4a10      	ldr	r2, [pc, #64]	; (8003698 <UART_CheckIdleState+0x98>)
 8003658:	9200      	str	r2, [sp, #0]
 800365a:	2200      	movs	r2, #0
 800365c:	f000 f81e 	bl	800369c <UART_WaitOnFlagUntilTimeout>
 8003660:	1e03      	subs	r3, r0, #0
 8003662:	d001      	beq.n	8003668 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e012      	b.n	800368e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2288      	movs	r2, #136	; 0x88
 800366c:	2120      	movs	r1, #32
 800366e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	228c      	movs	r2, #140	; 0x8c
 8003674:	2120      	movs	r1, #32
 8003676:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2284      	movs	r2, #132	; 0x84
 8003688:	2100      	movs	r1, #0
 800368a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	0018      	movs	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	b004      	add	sp, #16
 8003694:	bd80      	pop	{r7, pc}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	01ffffff 	.word	0x01ffffff

0800369c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b094      	sub	sp, #80	; 0x50
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	1dfb      	adds	r3, r7, #7
 80036aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ac:	e0a7      	b.n	80037fe <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036b0:	3301      	adds	r3, #1
 80036b2:	d100      	bne.n	80036b6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80036b4:	e0a3      	b.n	80037fe <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b6:	f7fd fc9b 	bl	8000ff0 <HAL_GetTick>
 80036ba:	0002      	movs	r2, r0
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d302      	bcc.n	80036cc <UART_WaitOnFlagUntilTimeout+0x30>
 80036c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d13f      	bne.n	800374c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036cc:	f3ef 8310 	mrs	r3, PRIMASK
 80036d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80036d4:	647b      	str	r3, [r7, #68]	; 0x44
 80036d6:	2301      	movs	r3, #1
 80036d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036dc:	f383 8810 	msr	PRIMASK, r3
}
 80036e0:	46c0      	nop			; (mov r8, r8)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	494e      	ldr	r1, [pc, #312]	; (8003828 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80036ee:	400a      	ands	r2, r1
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036f4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f8:	f383 8810 	msr	PRIMASK, r3
}
 80036fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003702:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003706:	643b      	str	r3, [r7, #64]	; 0x40
 8003708:	2301      	movs	r3, #1
 800370a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370e:	f383 8810 	msr	PRIMASK, r3
}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2101      	movs	r1, #1
 8003720:	438a      	bics	r2, r1
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003726:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800372a:	f383 8810 	msr	PRIMASK, r3
}
 800372e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2288      	movs	r2, #136	; 0x88
 8003734:	2120      	movs	r1, #32
 8003736:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	228c      	movs	r2, #140	; 0x8c
 800373c:	2120      	movs	r1, #32
 800373e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2284      	movs	r2, #132	; 0x84
 8003744:	2100      	movs	r1, #0
 8003746:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e069      	b.n	8003820 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2204      	movs	r2, #4
 8003754:	4013      	ands	r3, r2
 8003756:	d052      	beq.n	80037fe <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	2380      	movs	r3, #128	; 0x80
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	401a      	ands	r2, r3
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	429a      	cmp	r2, r3
 800376a:	d148      	bne.n	80037fe <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2280      	movs	r2, #128	; 0x80
 8003772:	0112      	lsls	r2, r2, #4
 8003774:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003776:	f3ef 8310 	mrs	r3, PRIMASK
 800377a:	613b      	str	r3, [r7, #16]
  return(result);
 800377c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800377e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003780:	2301      	movs	r3, #1
 8003782:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f383 8810 	msr	PRIMASK, r3
}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4924      	ldr	r1, [pc, #144]	; (8003828 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003798:	400a      	ands	r2, r1
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f383 8810 	msr	PRIMASK, r3
}
 80037a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a8:	f3ef 8310 	mrs	r3, PRIMASK
 80037ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80037ae:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80037b2:	2301      	movs	r3, #1
 80037b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	f383 8810 	msr	PRIMASK, r3
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2101      	movs	r1, #1
 80037ca:	438a      	bics	r2, r1
 80037cc:	609a      	str	r2, [r3, #8]
 80037ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	f383 8810 	msr	PRIMASK, r3
}
 80037d8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2288      	movs	r2, #136	; 0x88
 80037de:	2120      	movs	r1, #32
 80037e0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	228c      	movs	r2, #140	; 0x8c
 80037e6:	2120      	movs	r1, #32
 80037e8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2290      	movs	r2, #144	; 0x90
 80037ee:	2120      	movs	r1, #32
 80037f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2284      	movs	r2, #132	; 0x84
 80037f6:	2100      	movs	r1, #0
 80037f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e010      	b.n	8003820 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	4013      	ands	r3, r2
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	425a      	negs	r2, r3
 800380e:	4153      	adcs	r3, r2
 8003810:	b2db      	uxtb	r3, r3
 8003812:	001a      	movs	r2, r3
 8003814:	1dfb      	adds	r3, r7, #7
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d100      	bne.n	800381e <UART_WaitOnFlagUntilTimeout+0x182>
 800381c:	e747      	b.n	80036ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	0018      	movs	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	b014      	add	sp, #80	; 0x50
 8003826:	bd80      	pop	{r7, pc}
 8003828:	fffffe5f 	.word	0xfffffe5f

0800382c <__errno>:
 800382c:	4b01      	ldr	r3, [pc, #4]	; (8003834 <__errno+0x8>)
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	4770      	bx	lr
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	2000000c 	.word	0x2000000c

08003838 <__libc_init_array>:
 8003838:	b570      	push	{r4, r5, r6, lr}
 800383a:	2600      	movs	r6, #0
 800383c:	4d0c      	ldr	r5, [pc, #48]	; (8003870 <__libc_init_array+0x38>)
 800383e:	4c0d      	ldr	r4, [pc, #52]	; (8003874 <__libc_init_array+0x3c>)
 8003840:	1b64      	subs	r4, r4, r5
 8003842:	10a4      	asrs	r4, r4, #2
 8003844:	42a6      	cmp	r6, r4
 8003846:	d109      	bne.n	800385c <__libc_init_array+0x24>
 8003848:	2600      	movs	r6, #0
 800384a:	f000 fff9 	bl	8004840 <_init>
 800384e:	4d0a      	ldr	r5, [pc, #40]	; (8003878 <__libc_init_array+0x40>)
 8003850:	4c0a      	ldr	r4, [pc, #40]	; (800387c <__libc_init_array+0x44>)
 8003852:	1b64      	subs	r4, r4, r5
 8003854:	10a4      	asrs	r4, r4, #2
 8003856:	42a6      	cmp	r6, r4
 8003858:	d105      	bne.n	8003866 <__libc_init_array+0x2e>
 800385a:	bd70      	pop	{r4, r5, r6, pc}
 800385c:	00b3      	lsls	r3, r6, #2
 800385e:	58eb      	ldr	r3, [r5, r3]
 8003860:	4798      	blx	r3
 8003862:	3601      	adds	r6, #1
 8003864:	e7ee      	b.n	8003844 <__libc_init_array+0xc>
 8003866:	00b3      	lsls	r3, r6, #2
 8003868:	58eb      	ldr	r3, [r5, r3]
 800386a:	4798      	blx	r3
 800386c:	3601      	adds	r6, #1
 800386e:	e7f2      	b.n	8003856 <__libc_init_array+0x1e>
 8003870:	08004984 	.word	0x08004984
 8003874:	08004984 	.word	0x08004984
 8003878:	08004984 	.word	0x08004984
 800387c:	08004988 	.word	0x08004988

08003880 <memset>:
 8003880:	0003      	movs	r3, r0
 8003882:	1882      	adds	r2, r0, r2
 8003884:	4293      	cmp	r3, r2
 8003886:	d100      	bne.n	800388a <memset+0xa>
 8003888:	4770      	bx	lr
 800388a:	7019      	strb	r1, [r3, #0]
 800388c:	3301      	adds	r3, #1
 800388e:	e7f9      	b.n	8003884 <memset+0x4>

08003890 <iprintf>:
 8003890:	b40f      	push	{r0, r1, r2, r3}
 8003892:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <iprintf+0x30>)
 8003894:	b513      	push	{r0, r1, r4, lr}
 8003896:	681c      	ldr	r4, [r3, #0]
 8003898:	2c00      	cmp	r4, #0
 800389a:	d005      	beq.n	80038a8 <iprintf+0x18>
 800389c:	69a3      	ldr	r3, [r4, #24]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <iprintf+0x18>
 80038a2:	0020      	movs	r0, r4
 80038a4:	f000 f870 	bl	8003988 <__sinit>
 80038a8:	ab05      	add	r3, sp, #20
 80038aa:	0020      	movs	r0, r4
 80038ac:	9a04      	ldr	r2, [sp, #16]
 80038ae:	68a1      	ldr	r1, [r4, #8]
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	f000 f9cd 	bl	8003c50 <_vfiprintf_r>
 80038b6:	bc16      	pop	{r1, r2, r4}
 80038b8:	bc08      	pop	{r3}
 80038ba:	b004      	add	sp, #16
 80038bc:	4718      	bx	r3
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	2000000c 	.word	0x2000000c

080038c4 <std>:
 80038c4:	2300      	movs	r3, #0
 80038c6:	b510      	push	{r4, lr}
 80038c8:	0004      	movs	r4, r0
 80038ca:	6003      	str	r3, [r0, #0]
 80038cc:	6043      	str	r3, [r0, #4]
 80038ce:	6083      	str	r3, [r0, #8]
 80038d0:	8181      	strh	r1, [r0, #12]
 80038d2:	6643      	str	r3, [r0, #100]	; 0x64
 80038d4:	0019      	movs	r1, r3
 80038d6:	81c2      	strh	r2, [r0, #14]
 80038d8:	6103      	str	r3, [r0, #16]
 80038da:	6143      	str	r3, [r0, #20]
 80038dc:	6183      	str	r3, [r0, #24]
 80038de:	2208      	movs	r2, #8
 80038e0:	305c      	adds	r0, #92	; 0x5c
 80038e2:	f7ff ffcd 	bl	8003880 <memset>
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <std+0x38>)
 80038e8:	6224      	str	r4, [r4, #32]
 80038ea:	6263      	str	r3, [r4, #36]	; 0x24
 80038ec:	4b04      	ldr	r3, [pc, #16]	; (8003900 <std+0x3c>)
 80038ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <std+0x40>)
 80038f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038f4:	4b04      	ldr	r3, [pc, #16]	; (8003908 <std+0x44>)
 80038f6:	6323      	str	r3, [r4, #48]	; 0x30
 80038f8:	bd10      	pop	{r4, pc}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	080041ed 	.word	0x080041ed
 8003900:	08004215 	.word	0x08004215
 8003904:	0800424d 	.word	0x0800424d
 8003908:	08004279 	.word	0x08004279

0800390c <_cleanup_r>:
 800390c:	b510      	push	{r4, lr}
 800390e:	4902      	ldr	r1, [pc, #8]	; (8003918 <_cleanup_r+0xc>)
 8003910:	f000 f8ba 	bl	8003a88 <_fwalk_reent>
 8003914:	bd10      	pop	{r4, pc}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	08004585 	.word	0x08004585

0800391c <__sfmoreglue>:
 800391c:	b570      	push	{r4, r5, r6, lr}
 800391e:	2568      	movs	r5, #104	; 0x68
 8003920:	1e4a      	subs	r2, r1, #1
 8003922:	4355      	muls	r5, r2
 8003924:	000e      	movs	r6, r1
 8003926:	0029      	movs	r1, r5
 8003928:	3174      	adds	r1, #116	; 0x74
 800392a:	f000 f8f3 	bl	8003b14 <_malloc_r>
 800392e:	1e04      	subs	r4, r0, #0
 8003930:	d008      	beq.n	8003944 <__sfmoreglue+0x28>
 8003932:	2100      	movs	r1, #0
 8003934:	002a      	movs	r2, r5
 8003936:	6001      	str	r1, [r0, #0]
 8003938:	6046      	str	r6, [r0, #4]
 800393a:	300c      	adds	r0, #12
 800393c:	60a0      	str	r0, [r4, #8]
 800393e:	3268      	adds	r2, #104	; 0x68
 8003940:	f7ff ff9e 	bl	8003880 <memset>
 8003944:	0020      	movs	r0, r4
 8003946:	bd70      	pop	{r4, r5, r6, pc}

08003948 <__sfp_lock_acquire>:
 8003948:	b510      	push	{r4, lr}
 800394a:	4802      	ldr	r0, [pc, #8]	; (8003954 <__sfp_lock_acquire+0xc>)
 800394c:	f000 f8bd 	bl	8003aca <__retarget_lock_acquire_recursive>
 8003950:	bd10      	pop	{r4, pc}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	200001a9 	.word	0x200001a9

08003958 <__sfp_lock_release>:
 8003958:	b510      	push	{r4, lr}
 800395a:	4802      	ldr	r0, [pc, #8]	; (8003964 <__sfp_lock_release+0xc>)
 800395c:	f000 f8b6 	bl	8003acc <__retarget_lock_release_recursive>
 8003960:	bd10      	pop	{r4, pc}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	200001a9 	.word	0x200001a9

08003968 <__sinit_lock_acquire>:
 8003968:	b510      	push	{r4, lr}
 800396a:	4802      	ldr	r0, [pc, #8]	; (8003974 <__sinit_lock_acquire+0xc>)
 800396c:	f000 f8ad 	bl	8003aca <__retarget_lock_acquire_recursive>
 8003970:	bd10      	pop	{r4, pc}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	200001aa 	.word	0x200001aa

08003978 <__sinit_lock_release>:
 8003978:	b510      	push	{r4, lr}
 800397a:	4802      	ldr	r0, [pc, #8]	; (8003984 <__sinit_lock_release+0xc>)
 800397c:	f000 f8a6 	bl	8003acc <__retarget_lock_release_recursive>
 8003980:	bd10      	pop	{r4, pc}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	200001aa 	.word	0x200001aa

08003988 <__sinit>:
 8003988:	b513      	push	{r0, r1, r4, lr}
 800398a:	0004      	movs	r4, r0
 800398c:	f7ff ffec 	bl	8003968 <__sinit_lock_acquire>
 8003990:	69a3      	ldr	r3, [r4, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <__sinit+0x14>
 8003996:	f7ff ffef 	bl	8003978 <__sinit_lock_release>
 800399a:	bd13      	pop	{r0, r1, r4, pc}
 800399c:	64a3      	str	r3, [r4, #72]	; 0x48
 800399e:	64e3      	str	r3, [r4, #76]	; 0x4c
 80039a0:	6523      	str	r3, [r4, #80]	; 0x50
 80039a2:	4b13      	ldr	r3, [pc, #76]	; (80039f0 <__sinit+0x68>)
 80039a4:	4a13      	ldr	r2, [pc, #76]	; (80039f4 <__sinit+0x6c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	42a3      	cmp	r3, r4
 80039ae:	d101      	bne.n	80039b4 <__sinit+0x2c>
 80039b0:	2301      	movs	r3, #1
 80039b2:	61a3      	str	r3, [r4, #24]
 80039b4:	0020      	movs	r0, r4
 80039b6:	f000 f81f 	bl	80039f8 <__sfp>
 80039ba:	6060      	str	r0, [r4, #4]
 80039bc:	0020      	movs	r0, r4
 80039be:	f000 f81b 	bl	80039f8 <__sfp>
 80039c2:	60a0      	str	r0, [r4, #8]
 80039c4:	0020      	movs	r0, r4
 80039c6:	f000 f817 	bl	80039f8 <__sfp>
 80039ca:	2200      	movs	r2, #0
 80039cc:	2104      	movs	r1, #4
 80039ce:	60e0      	str	r0, [r4, #12]
 80039d0:	6860      	ldr	r0, [r4, #4]
 80039d2:	f7ff ff77 	bl	80038c4 <std>
 80039d6:	2201      	movs	r2, #1
 80039d8:	2109      	movs	r1, #9
 80039da:	68a0      	ldr	r0, [r4, #8]
 80039dc:	f7ff ff72 	bl	80038c4 <std>
 80039e0:	2202      	movs	r2, #2
 80039e2:	2112      	movs	r1, #18
 80039e4:	68e0      	ldr	r0, [r4, #12]
 80039e6:	f7ff ff6d 	bl	80038c4 <std>
 80039ea:	2301      	movs	r3, #1
 80039ec:	61a3      	str	r3, [r4, #24]
 80039ee:	e7d2      	b.n	8003996 <__sinit+0xe>
 80039f0:	080048e4 	.word	0x080048e4
 80039f4:	0800390d 	.word	0x0800390d

080039f8 <__sfp>:
 80039f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fa:	0007      	movs	r7, r0
 80039fc:	f7ff ffa4 	bl	8003948 <__sfp_lock_acquire>
 8003a00:	4b1f      	ldr	r3, [pc, #124]	; (8003a80 <__sfp+0x88>)
 8003a02:	681e      	ldr	r6, [r3, #0]
 8003a04:	69b3      	ldr	r3, [r6, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d102      	bne.n	8003a10 <__sfp+0x18>
 8003a0a:	0030      	movs	r0, r6
 8003a0c:	f7ff ffbc 	bl	8003988 <__sinit>
 8003a10:	3648      	adds	r6, #72	; 0x48
 8003a12:	68b4      	ldr	r4, [r6, #8]
 8003a14:	6873      	ldr	r3, [r6, #4]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	d504      	bpl.n	8003a24 <__sfp+0x2c>
 8003a1a:	6833      	ldr	r3, [r6, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d022      	beq.n	8003a66 <__sfp+0x6e>
 8003a20:	6836      	ldr	r6, [r6, #0]
 8003a22:	e7f6      	b.n	8003a12 <__sfp+0x1a>
 8003a24:	220c      	movs	r2, #12
 8003a26:	5ea5      	ldrsh	r5, [r4, r2]
 8003a28:	2d00      	cmp	r5, #0
 8003a2a:	d11a      	bne.n	8003a62 <__sfp+0x6a>
 8003a2c:	0020      	movs	r0, r4
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <__sfp+0x8c>)
 8003a30:	3058      	adds	r0, #88	; 0x58
 8003a32:	60e3      	str	r3, [r4, #12]
 8003a34:	6665      	str	r5, [r4, #100]	; 0x64
 8003a36:	f000 f847 	bl	8003ac8 <__retarget_lock_init_recursive>
 8003a3a:	f7ff ff8d 	bl	8003958 <__sfp_lock_release>
 8003a3e:	0020      	movs	r0, r4
 8003a40:	2208      	movs	r2, #8
 8003a42:	0029      	movs	r1, r5
 8003a44:	6025      	str	r5, [r4, #0]
 8003a46:	60a5      	str	r5, [r4, #8]
 8003a48:	6065      	str	r5, [r4, #4]
 8003a4a:	6125      	str	r5, [r4, #16]
 8003a4c:	6165      	str	r5, [r4, #20]
 8003a4e:	61a5      	str	r5, [r4, #24]
 8003a50:	305c      	adds	r0, #92	; 0x5c
 8003a52:	f7ff ff15 	bl	8003880 <memset>
 8003a56:	6365      	str	r5, [r4, #52]	; 0x34
 8003a58:	63a5      	str	r5, [r4, #56]	; 0x38
 8003a5a:	64a5      	str	r5, [r4, #72]	; 0x48
 8003a5c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003a5e:	0020      	movs	r0, r4
 8003a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a62:	3468      	adds	r4, #104	; 0x68
 8003a64:	e7d7      	b.n	8003a16 <__sfp+0x1e>
 8003a66:	2104      	movs	r1, #4
 8003a68:	0038      	movs	r0, r7
 8003a6a:	f7ff ff57 	bl	800391c <__sfmoreglue>
 8003a6e:	1e04      	subs	r4, r0, #0
 8003a70:	6030      	str	r0, [r6, #0]
 8003a72:	d1d5      	bne.n	8003a20 <__sfp+0x28>
 8003a74:	f7ff ff70 	bl	8003958 <__sfp_lock_release>
 8003a78:	230c      	movs	r3, #12
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	e7ef      	b.n	8003a5e <__sfp+0x66>
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	080048e4 	.word	0x080048e4
 8003a84:	ffff0001 	.word	0xffff0001

08003a88 <_fwalk_reent>:
 8003a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a8a:	0004      	movs	r4, r0
 8003a8c:	0006      	movs	r6, r0
 8003a8e:	2700      	movs	r7, #0
 8003a90:	9101      	str	r1, [sp, #4]
 8003a92:	3448      	adds	r4, #72	; 0x48
 8003a94:	6863      	ldr	r3, [r4, #4]
 8003a96:	68a5      	ldr	r5, [r4, #8]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	9b00      	ldr	r3, [sp, #0]
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	d504      	bpl.n	8003aac <_fwalk_reent+0x24>
 8003aa2:	6824      	ldr	r4, [r4, #0]
 8003aa4:	2c00      	cmp	r4, #0
 8003aa6:	d1f5      	bne.n	8003a94 <_fwalk_reent+0xc>
 8003aa8:	0038      	movs	r0, r7
 8003aaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003aac:	89ab      	ldrh	r3, [r5, #12]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d908      	bls.n	8003ac4 <_fwalk_reent+0x3c>
 8003ab2:	220e      	movs	r2, #14
 8003ab4:	5eab      	ldrsh	r3, [r5, r2]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	d004      	beq.n	8003ac4 <_fwalk_reent+0x3c>
 8003aba:	0029      	movs	r1, r5
 8003abc:	0030      	movs	r0, r6
 8003abe:	9b01      	ldr	r3, [sp, #4]
 8003ac0:	4798      	blx	r3
 8003ac2:	4307      	orrs	r7, r0
 8003ac4:	3568      	adds	r5, #104	; 0x68
 8003ac6:	e7e8      	b.n	8003a9a <_fwalk_reent+0x12>

08003ac8 <__retarget_lock_init_recursive>:
 8003ac8:	4770      	bx	lr

08003aca <__retarget_lock_acquire_recursive>:
 8003aca:	4770      	bx	lr

08003acc <__retarget_lock_release_recursive>:
 8003acc:	4770      	bx	lr
	...

08003ad0 <sbrk_aligned>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	4e0f      	ldr	r6, [pc, #60]	; (8003b10 <sbrk_aligned+0x40>)
 8003ad4:	000d      	movs	r5, r1
 8003ad6:	6831      	ldr	r1, [r6, #0]
 8003ad8:	0004      	movs	r4, r0
 8003ada:	2900      	cmp	r1, #0
 8003adc:	d102      	bne.n	8003ae4 <sbrk_aligned+0x14>
 8003ade:	f000 fb73 	bl	80041c8 <_sbrk_r>
 8003ae2:	6030      	str	r0, [r6, #0]
 8003ae4:	0029      	movs	r1, r5
 8003ae6:	0020      	movs	r0, r4
 8003ae8:	f000 fb6e 	bl	80041c8 <_sbrk_r>
 8003aec:	1c43      	adds	r3, r0, #1
 8003aee:	d00a      	beq.n	8003b06 <sbrk_aligned+0x36>
 8003af0:	2303      	movs	r3, #3
 8003af2:	1cc5      	adds	r5, r0, #3
 8003af4:	439d      	bics	r5, r3
 8003af6:	42a8      	cmp	r0, r5
 8003af8:	d007      	beq.n	8003b0a <sbrk_aligned+0x3a>
 8003afa:	1a29      	subs	r1, r5, r0
 8003afc:	0020      	movs	r0, r4
 8003afe:	f000 fb63 	bl	80041c8 <_sbrk_r>
 8003b02:	1c43      	adds	r3, r0, #1
 8003b04:	d101      	bne.n	8003b0a <sbrk_aligned+0x3a>
 8003b06:	2501      	movs	r5, #1
 8003b08:	426d      	negs	r5, r5
 8003b0a:	0028      	movs	r0, r5
 8003b0c:	bd70      	pop	{r4, r5, r6, pc}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	200001b0 	.word	0x200001b0

08003b14 <_malloc_r>:
 8003b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b16:	2203      	movs	r2, #3
 8003b18:	1ccb      	adds	r3, r1, #3
 8003b1a:	4393      	bics	r3, r2
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	0006      	movs	r6, r0
 8003b20:	001f      	movs	r7, r3
 8003b22:	2b0c      	cmp	r3, #12
 8003b24:	d232      	bcs.n	8003b8c <_malloc_r+0x78>
 8003b26:	270c      	movs	r7, #12
 8003b28:	42b9      	cmp	r1, r7
 8003b2a:	d831      	bhi.n	8003b90 <_malloc_r+0x7c>
 8003b2c:	0030      	movs	r0, r6
 8003b2e:	f000 fdf5 	bl	800471c <__malloc_lock>
 8003b32:	4d32      	ldr	r5, [pc, #200]	; (8003bfc <_malloc_r+0xe8>)
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	001c      	movs	r4, r3
 8003b38:	2c00      	cmp	r4, #0
 8003b3a:	d12e      	bne.n	8003b9a <_malloc_r+0x86>
 8003b3c:	0039      	movs	r1, r7
 8003b3e:	0030      	movs	r0, r6
 8003b40:	f7ff ffc6 	bl	8003ad0 <sbrk_aligned>
 8003b44:	0004      	movs	r4, r0
 8003b46:	1c43      	adds	r3, r0, #1
 8003b48:	d11e      	bne.n	8003b88 <_malloc_r+0x74>
 8003b4a:	682c      	ldr	r4, [r5, #0]
 8003b4c:	0025      	movs	r5, r4
 8003b4e:	2d00      	cmp	r5, #0
 8003b50:	d14a      	bne.n	8003be8 <_malloc_r+0xd4>
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	0029      	movs	r1, r5
 8003b56:	18e3      	adds	r3, r4, r3
 8003b58:	0030      	movs	r0, r6
 8003b5a:	9301      	str	r3, [sp, #4]
 8003b5c:	f000 fb34 	bl	80041c8 <_sbrk_r>
 8003b60:	9b01      	ldr	r3, [sp, #4]
 8003b62:	4283      	cmp	r3, r0
 8003b64:	d143      	bne.n	8003bee <_malloc_r+0xda>
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	3703      	adds	r7, #3
 8003b6a:	1aff      	subs	r7, r7, r3
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	439f      	bics	r7, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	2f0c      	cmp	r7, #12
 8003b74:	d200      	bcs.n	8003b78 <_malloc_r+0x64>
 8003b76:	270c      	movs	r7, #12
 8003b78:	0039      	movs	r1, r7
 8003b7a:	0030      	movs	r0, r6
 8003b7c:	f7ff ffa8 	bl	8003ad0 <sbrk_aligned>
 8003b80:	1c43      	adds	r3, r0, #1
 8003b82:	d034      	beq.n	8003bee <_malloc_r+0xda>
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	19df      	adds	r7, r3, r7
 8003b88:	6027      	str	r7, [r4, #0]
 8003b8a:	e013      	b.n	8003bb4 <_malloc_r+0xa0>
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	dacb      	bge.n	8003b28 <_malloc_r+0x14>
 8003b90:	230c      	movs	r3, #12
 8003b92:	2500      	movs	r5, #0
 8003b94:	6033      	str	r3, [r6, #0]
 8003b96:	0028      	movs	r0, r5
 8003b98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b9a:	6822      	ldr	r2, [r4, #0]
 8003b9c:	1bd1      	subs	r1, r2, r7
 8003b9e:	d420      	bmi.n	8003be2 <_malloc_r+0xce>
 8003ba0:	290b      	cmp	r1, #11
 8003ba2:	d917      	bls.n	8003bd4 <_malloc_r+0xc0>
 8003ba4:	19e2      	adds	r2, r4, r7
 8003ba6:	6027      	str	r7, [r4, #0]
 8003ba8:	42a3      	cmp	r3, r4
 8003baa:	d111      	bne.n	8003bd0 <_malloc_r+0xbc>
 8003bac:	602a      	str	r2, [r5, #0]
 8003bae:	6863      	ldr	r3, [r4, #4]
 8003bb0:	6011      	str	r1, [r2, #0]
 8003bb2:	6053      	str	r3, [r2, #4]
 8003bb4:	0030      	movs	r0, r6
 8003bb6:	0025      	movs	r5, r4
 8003bb8:	f000 fdb8 	bl	800472c <__malloc_unlock>
 8003bbc:	2207      	movs	r2, #7
 8003bbe:	350b      	adds	r5, #11
 8003bc0:	1d23      	adds	r3, r4, #4
 8003bc2:	4395      	bics	r5, r2
 8003bc4:	1aea      	subs	r2, r5, r3
 8003bc6:	429d      	cmp	r5, r3
 8003bc8:	d0e5      	beq.n	8003b96 <_malloc_r+0x82>
 8003bca:	1b5b      	subs	r3, r3, r5
 8003bcc:	50a3      	str	r3, [r4, r2]
 8003bce:	e7e2      	b.n	8003b96 <_malloc_r+0x82>
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	e7ec      	b.n	8003bae <_malloc_r+0x9a>
 8003bd4:	6862      	ldr	r2, [r4, #4]
 8003bd6:	42a3      	cmp	r3, r4
 8003bd8:	d101      	bne.n	8003bde <_malloc_r+0xca>
 8003bda:	602a      	str	r2, [r5, #0]
 8003bdc:	e7ea      	b.n	8003bb4 <_malloc_r+0xa0>
 8003bde:	605a      	str	r2, [r3, #4]
 8003be0:	e7e8      	b.n	8003bb4 <_malloc_r+0xa0>
 8003be2:	0023      	movs	r3, r4
 8003be4:	6864      	ldr	r4, [r4, #4]
 8003be6:	e7a7      	b.n	8003b38 <_malloc_r+0x24>
 8003be8:	002c      	movs	r4, r5
 8003bea:	686d      	ldr	r5, [r5, #4]
 8003bec:	e7af      	b.n	8003b4e <_malloc_r+0x3a>
 8003bee:	230c      	movs	r3, #12
 8003bf0:	0030      	movs	r0, r6
 8003bf2:	6033      	str	r3, [r6, #0]
 8003bf4:	f000 fd9a 	bl	800472c <__malloc_unlock>
 8003bf8:	e7cd      	b.n	8003b96 <_malloc_r+0x82>
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	200001ac 	.word	0x200001ac

08003c00 <__sfputc_r>:
 8003c00:	6893      	ldr	r3, [r2, #8]
 8003c02:	b510      	push	{r4, lr}
 8003c04:	3b01      	subs	r3, #1
 8003c06:	6093      	str	r3, [r2, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	da04      	bge.n	8003c16 <__sfputc_r+0x16>
 8003c0c:	6994      	ldr	r4, [r2, #24]
 8003c0e:	42a3      	cmp	r3, r4
 8003c10:	db07      	blt.n	8003c22 <__sfputc_r+0x22>
 8003c12:	290a      	cmp	r1, #10
 8003c14:	d005      	beq.n	8003c22 <__sfputc_r+0x22>
 8003c16:	6813      	ldr	r3, [r2, #0]
 8003c18:	1c58      	adds	r0, r3, #1
 8003c1a:	6010      	str	r0, [r2, #0]
 8003c1c:	7019      	strb	r1, [r3, #0]
 8003c1e:	0008      	movs	r0, r1
 8003c20:	bd10      	pop	{r4, pc}
 8003c22:	f000 fb2f 	bl	8004284 <__swbuf_r>
 8003c26:	0001      	movs	r1, r0
 8003c28:	e7f9      	b.n	8003c1e <__sfputc_r+0x1e>

08003c2a <__sfputs_r>:
 8003c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2c:	0006      	movs	r6, r0
 8003c2e:	000f      	movs	r7, r1
 8003c30:	0014      	movs	r4, r2
 8003c32:	18d5      	adds	r5, r2, r3
 8003c34:	42ac      	cmp	r4, r5
 8003c36:	d101      	bne.n	8003c3c <__sfputs_r+0x12>
 8003c38:	2000      	movs	r0, #0
 8003c3a:	e007      	b.n	8003c4c <__sfputs_r+0x22>
 8003c3c:	7821      	ldrb	r1, [r4, #0]
 8003c3e:	003a      	movs	r2, r7
 8003c40:	0030      	movs	r0, r6
 8003c42:	f7ff ffdd 	bl	8003c00 <__sfputc_r>
 8003c46:	3401      	adds	r4, #1
 8003c48:	1c43      	adds	r3, r0, #1
 8003c4a:	d1f3      	bne.n	8003c34 <__sfputs_r+0xa>
 8003c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c50 <_vfiprintf_r>:
 8003c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c52:	b0a1      	sub	sp, #132	; 0x84
 8003c54:	0006      	movs	r6, r0
 8003c56:	000c      	movs	r4, r1
 8003c58:	001f      	movs	r7, r3
 8003c5a:	9203      	str	r2, [sp, #12]
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	d004      	beq.n	8003c6a <_vfiprintf_r+0x1a>
 8003c60:	6983      	ldr	r3, [r0, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <_vfiprintf_r+0x1a>
 8003c66:	f7ff fe8f 	bl	8003988 <__sinit>
 8003c6a:	4b8e      	ldr	r3, [pc, #568]	; (8003ea4 <_vfiprintf_r+0x254>)
 8003c6c:	429c      	cmp	r4, r3
 8003c6e:	d11c      	bne.n	8003caa <_vfiprintf_r+0x5a>
 8003c70:	6874      	ldr	r4, [r6, #4]
 8003c72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c74:	07db      	lsls	r3, r3, #31
 8003c76:	d405      	bmi.n	8003c84 <_vfiprintf_r+0x34>
 8003c78:	89a3      	ldrh	r3, [r4, #12]
 8003c7a:	059b      	lsls	r3, r3, #22
 8003c7c:	d402      	bmi.n	8003c84 <_vfiprintf_r+0x34>
 8003c7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c80:	f7ff ff23 	bl	8003aca <__retarget_lock_acquire_recursive>
 8003c84:	89a3      	ldrh	r3, [r4, #12]
 8003c86:	071b      	lsls	r3, r3, #28
 8003c88:	d502      	bpl.n	8003c90 <_vfiprintf_r+0x40>
 8003c8a:	6923      	ldr	r3, [r4, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d11d      	bne.n	8003ccc <_vfiprintf_r+0x7c>
 8003c90:	0021      	movs	r1, r4
 8003c92:	0030      	movs	r0, r6
 8003c94:	f000 fb60 	bl	8004358 <__swsetup_r>
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	d017      	beq.n	8003ccc <_vfiprintf_r+0x7c>
 8003c9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c9e:	07db      	lsls	r3, r3, #31
 8003ca0:	d50d      	bpl.n	8003cbe <_vfiprintf_r+0x6e>
 8003ca2:	2001      	movs	r0, #1
 8003ca4:	4240      	negs	r0, r0
 8003ca6:	b021      	add	sp, #132	; 0x84
 8003ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003caa:	4b7f      	ldr	r3, [pc, #508]	; (8003ea8 <_vfiprintf_r+0x258>)
 8003cac:	429c      	cmp	r4, r3
 8003cae:	d101      	bne.n	8003cb4 <_vfiprintf_r+0x64>
 8003cb0:	68b4      	ldr	r4, [r6, #8]
 8003cb2:	e7de      	b.n	8003c72 <_vfiprintf_r+0x22>
 8003cb4:	4b7d      	ldr	r3, [pc, #500]	; (8003eac <_vfiprintf_r+0x25c>)
 8003cb6:	429c      	cmp	r4, r3
 8003cb8:	d1db      	bne.n	8003c72 <_vfiprintf_r+0x22>
 8003cba:	68f4      	ldr	r4, [r6, #12]
 8003cbc:	e7d9      	b.n	8003c72 <_vfiprintf_r+0x22>
 8003cbe:	89a3      	ldrh	r3, [r4, #12]
 8003cc0:	059b      	lsls	r3, r3, #22
 8003cc2:	d4ee      	bmi.n	8003ca2 <_vfiprintf_r+0x52>
 8003cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cc6:	f7ff ff01 	bl	8003acc <__retarget_lock_release_recursive>
 8003cca:	e7ea      	b.n	8003ca2 <_vfiprintf_r+0x52>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	ad08      	add	r5, sp, #32
 8003cd0:	616b      	str	r3, [r5, #20]
 8003cd2:	3320      	adds	r3, #32
 8003cd4:	766b      	strb	r3, [r5, #25]
 8003cd6:	3310      	adds	r3, #16
 8003cd8:	76ab      	strb	r3, [r5, #26]
 8003cda:	9707      	str	r7, [sp, #28]
 8003cdc:	9f03      	ldr	r7, [sp, #12]
 8003cde:	783b      	ldrb	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <_vfiprintf_r+0x98>
 8003ce4:	2b25      	cmp	r3, #37	; 0x25
 8003ce6:	d14e      	bne.n	8003d86 <_vfiprintf_r+0x136>
 8003ce8:	9b03      	ldr	r3, [sp, #12]
 8003cea:	1afb      	subs	r3, r7, r3
 8003cec:	9305      	str	r3, [sp, #20]
 8003cee:	9b03      	ldr	r3, [sp, #12]
 8003cf0:	429f      	cmp	r7, r3
 8003cf2:	d00d      	beq.n	8003d10 <_vfiprintf_r+0xc0>
 8003cf4:	9b05      	ldr	r3, [sp, #20]
 8003cf6:	0021      	movs	r1, r4
 8003cf8:	0030      	movs	r0, r6
 8003cfa:	9a03      	ldr	r2, [sp, #12]
 8003cfc:	f7ff ff95 	bl	8003c2a <__sfputs_r>
 8003d00:	1c43      	adds	r3, r0, #1
 8003d02:	d100      	bne.n	8003d06 <_vfiprintf_r+0xb6>
 8003d04:	e0b5      	b.n	8003e72 <_vfiprintf_r+0x222>
 8003d06:	696a      	ldr	r2, [r5, #20]
 8003d08:	9b05      	ldr	r3, [sp, #20]
 8003d0a:	4694      	mov	ip, r2
 8003d0c:	4463      	add	r3, ip
 8003d0e:	616b      	str	r3, [r5, #20]
 8003d10:	783b      	ldrb	r3, [r7, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d100      	bne.n	8003d18 <_vfiprintf_r+0xc8>
 8003d16:	e0ac      	b.n	8003e72 <_vfiprintf_r+0x222>
 8003d18:	2201      	movs	r2, #1
 8003d1a:	1c7b      	adds	r3, r7, #1
 8003d1c:	9303      	str	r3, [sp, #12]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	4252      	negs	r2, r2
 8003d22:	606a      	str	r2, [r5, #4]
 8003d24:	a904      	add	r1, sp, #16
 8003d26:	3254      	adds	r2, #84	; 0x54
 8003d28:	1852      	adds	r2, r2, r1
 8003d2a:	602b      	str	r3, [r5, #0]
 8003d2c:	60eb      	str	r3, [r5, #12]
 8003d2e:	60ab      	str	r3, [r5, #8]
 8003d30:	7013      	strb	r3, [r2, #0]
 8003d32:	65ab      	str	r3, [r5, #88]	; 0x58
 8003d34:	9b03      	ldr	r3, [sp, #12]
 8003d36:	2205      	movs	r2, #5
 8003d38:	7819      	ldrb	r1, [r3, #0]
 8003d3a:	485d      	ldr	r0, [pc, #372]	; (8003eb0 <_vfiprintf_r+0x260>)
 8003d3c:	f000 fce2 	bl	8004704 <memchr>
 8003d40:	9b03      	ldr	r3, [sp, #12]
 8003d42:	1c5f      	adds	r7, r3, #1
 8003d44:	2800      	cmp	r0, #0
 8003d46:	d120      	bne.n	8003d8a <_vfiprintf_r+0x13a>
 8003d48:	682a      	ldr	r2, [r5, #0]
 8003d4a:	06d3      	lsls	r3, r2, #27
 8003d4c:	d504      	bpl.n	8003d58 <_vfiprintf_r+0x108>
 8003d4e:	2353      	movs	r3, #83	; 0x53
 8003d50:	a904      	add	r1, sp, #16
 8003d52:	185b      	adds	r3, r3, r1
 8003d54:	2120      	movs	r1, #32
 8003d56:	7019      	strb	r1, [r3, #0]
 8003d58:	0713      	lsls	r3, r2, #28
 8003d5a:	d504      	bpl.n	8003d66 <_vfiprintf_r+0x116>
 8003d5c:	2353      	movs	r3, #83	; 0x53
 8003d5e:	a904      	add	r1, sp, #16
 8003d60:	185b      	adds	r3, r3, r1
 8003d62:	212b      	movs	r1, #43	; 0x2b
 8003d64:	7019      	strb	r1, [r3, #0]
 8003d66:	9b03      	ldr	r3, [sp, #12]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d6c:	d016      	beq.n	8003d9c <_vfiprintf_r+0x14c>
 8003d6e:	2100      	movs	r1, #0
 8003d70:	68eb      	ldr	r3, [r5, #12]
 8003d72:	9f03      	ldr	r7, [sp, #12]
 8003d74:	783a      	ldrb	r2, [r7, #0]
 8003d76:	1c78      	adds	r0, r7, #1
 8003d78:	3a30      	subs	r2, #48	; 0x30
 8003d7a:	4684      	mov	ip, r0
 8003d7c:	2a09      	cmp	r2, #9
 8003d7e:	d94f      	bls.n	8003e20 <_vfiprintf_r+0x1d0>
 8003d80:	2900      	cmp	r1, #0
 8003d82:	d111      	bne.n	8003da8 <_vfiprintf_r+0x158>
 8003d84:	e017      	b.n	8003db6 <_vfiprintf_r+0x166>
 8003d86:	3701      	adds	r7, #1
 8003d88:	e7a9      	b.n	8003cde <_vfiprintf_r+0x8e>
 8003d8a:	4b49      	ldr	r3, [pc, #292]	; (8003eb0 <_vfiprintf_r+0x260>)
 8003d8c:	682a      	ldr	r2, [r5, #0]
 8003d8e:	1ac0      	subs	r0, r0, r3
 8003d90:	2301      	movs	r3, #1
 8003d92:	4083      	lsls	r3, r0
 8003d94:	4313      	orrs	r3, r2
 8003d96:	602b      	str	r3, [r5, #0]
 8003d98:	9703      	str	r7, [sp, #12]
 8003d9a:	e7cb      	b.n	8003d34 <_vfiprintf_r+0xe4>
 8003d9c:	9b07      	ldr	r3, [sp, #28]
 8003d9e:	1d19      	adds	r1, r3, #4
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	9107      	str	r1, [sp, #28]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	db01      	blt.n	8003dac <_vfiprintf_r+0x15c>
 8003da8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003daa:	e004      	b.n	8003db6 <_vfiprintf_r+0x166>
 8003dac:	425b      	negs	r3, r3
 8003dae:	60eb      	str	r3, [r5, #12]
 8003db0:	2302      	movs	r3, #2
 8003db2:	4313      	orrs	r3, r2
 8003db4:	602b      	str	r3, [r5, #0]
 8003db6:	783b      	ldrb	r3, [r7, #0]
 8003db8:	2b2e      	cmp	r3, #46	; 0x2e
 8003dba:	d10a      	bne.n	8003dd2 <_vfiprintf_r+0x182>
 8003dbc:	787b      	ldrb	r3, [r7, #1]
 8003dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8003dc0:	d137      	bne.n	8003e32 <_vfiprintf_r+0x1e2>
 8003dc2:	9b07      	ldr	r3, [sp, #28]
 8003dc4:	3702      	adds	r7, #2
 8003dc6:	1d1a      	adds	r2, r3, #4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	9207      	str	r2, [sp, #28]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	db2d      	blt.n	8003e2c <_vfiprintf_r+0x1dc>
 8003dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	7839      	ldrb	r1, [r7, #0]
 8003dd6:	4837      	ldr	r0, [pc, #220]	; (8003eb4 <_vfiprintf_r+0x264>)
 8003dd8:	f000 fc94 	bl	8004704 <memchr>
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	d007      	beq.n	8003df0 <_vfiprintf_r+0x1a0>
 8003de0:	4b34      	ldr	r3, [pc, #208]	; (8003eb4 <_vfiprintf_r+0x264>)
 8003de2:	682a      	ldr	r2, [r5, #0]
 8003de4:	1ac0      	subs	r0, r0, r3
 8003de6:	2340      	movs	r3, #64	; 0x40
 8003de8:	4083      	lsls	r3, r0
 8003dea:	4313      	orrs	r3, r2
 8003dec:	3701      	adds	r7, #1
 8003dee:	602b      	str	r3, [r5, #0]
 8003df0:	7839      	ldrb	r1, [r7, #0]
 8003df2:	1c7b      	adds	r3, r7, #1
 8003df4:	2206      	movs	r2, #6
 8003df6:	4830      	ldr	r0, [pc, #192]	; (8003eb8 <_vfiprintf_r+0x268>)
 8003df8:	9303      	str	r3, [sp, #12]
 8003dfa:	7629      	strb	r1, [r5, #24]
 8003dfc:	f000 fc82 	bl	8004704 <memchr>
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d045      	beq.n	8003e90 <_vfiprintf_r+0x240>
 8003e04:	4b2d      	ldr	r3, [pc, #180]	; (8003ebc <_vfiprintf_r+0x26c>)
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d127      	bne.n	8003e5a <_vfiprintf_r+0x20a>
 8003e0a:	2207      	movs	r2, #7
 8003e0c:	9b07      	ldr	r3, [sp, #28]
 8003e0e:	3307      	adds	r3, #7
 8003e10:	4393      	bics	r3, r2
 8003e12:	3308      	adds	r3, #8
 8003e14:	9307      	str	r3, [sp, #28]
 8003e16:	696b      	ldr	r3, [r5, #20]
 8003e18:	9a04      	ldr	r2, [sp, #16]
 8003e1a:	189b      	adds	r3, r3, r2
 8003e1c:	616b      	str	r3, [r5, #20]
 8003e1e:	e75d      	b.n	8003cdc <_vfiprintf_r+0x8c>
 8003e20:	210a      	movs	r1, #10
 8003e22:	434b      	muls	r3, r1
 8003e24:	4667      	mov	r7, ip
 8003e26:	189b      	adds	r3, r3, r2
 8003e28:	3909      	subs	r1, #9
 8003e2a:	e7a3      	b.n	8003d74 <_vfiprintf_r+0x124>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	425b      	negs	r3, r3
 8003e30:	e7ce      	b.n	8003dd0 <_vfiprintf_r+0x180>
 8003e32:	2300      	movs	r3, #0
 8003e34:	001a      	movs	r2, r3
 8003e36:	3701      	adds	r7, #1
 8003e38:	606b      	str	r3, [r5, #4]
 8003e3a:	7839      	ldrb	r1, [r7, #0]
 8003e3c:	1c78      	adds	r0, r7, #1
 8003e3e:	3930      	subs	r1, #48	; 0x30
 8003e40:	4684      	mov	ip, r0
 8003e42:	2909      	cmp	r1, #9
 8003e44:	d903      	bls.n	8003e4e <_vfiprintf_r+0x1fe>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0c3      	beq.n	8003dd2 <_vfiprintf_r+0x182>
 8003e4a:	9209      	str	r2, [sp, #36]	; 0x24
 8003e4c:	e7c1      	b.n	8003dd2 <_vfiprintf_r+0x182>
 8003e4e:	230a      	movs	r3, #10
 8003e50:	435a      	muls	r2, r3
 8003e52:	4667      	mov	r7, ip
 8003e54:	1852      	adds	r2, r2, r1
 8003e56:	3b09      	subs	r3, #9
 8003e58:	e7ef      	b.n	8003e3a <_vfiprintf_r+0x1ea>
 8003e5a:	ab07      	add	r3, sp, #28
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	0022      	movs	r2, r4
 8003e60:	0029      	movs	r1, r5
 8003e62:	0030      	movs	r0, r6
 8003e64:	4b16      	ldr	r3, [pc, #88]	; (8003ec0 <_vfiprintf_r+0x270>)
 8003e66:	e000      	b.n	8003e6a <_vfiprintf_r+0x21a>
 8003e68:	bf00      	nop
 8003e6a:	9004      	str	r0, [sp, #16]
 8003e6c:	9b04      	ldr	r3, [sp, #16]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	d1d1      	bne.n	8003e16 <_vfiprintf_r+0x1c6>
 8003e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e74:	07db      	lsls	r3, r3, #31
 8003e76:	d405      	bmi.n	8003e84 <_vfiprintf_r+0x234>
 8003e78:	89a3      	ldrh	r3, [r4, #12]
 8003e7a:	059b      	lsls	r3, r3, #22
 8003e7c:	d402      	bmi.n	8003e84 <_vfiprintf_r+0x234>
 8003e7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e80:	f7ff fe24 	bl	8003acc <__retarget_lock_release_recursive>
 8003e84:	89a3      	ldrh	r3, [r4, #12]
 8003e86:	065b      	lsls	r3, r3, #25
 8003e88:	d500      	bpl.n	8003e8c <_vfiprintf_r+0x23c>
 8003e8a:	e70a      	b.n	8003ca2 <_vfiprintf_r+0x52>
 8003e8c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003e8e:	e70a      	b.n	8003ca6 <_vfiprintf_r+0x56>
 8003e90:	ab07      	add	r3, sp, #28
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	0022      	movs	r2, r4
 8003e96:	0029      	movs	r1, r5
 8003e98:	0030      	movs	r0, r6
 8003e9a:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <_vfiprintf_r+0x270>)
 8003e9c:	f000 f882 	bl	8003fa4 <_printf_i>
 8003ea0:	e7e3      	b.n	8003e6a <_vfiprintf_r+0x21a>
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	08004908 	.word	0x08004908
 8003ea8:	08004928 	.word	0x08004928
 8003eac:	080048e8 	.word	0x080048e8
 8003eb0:	08004948 	.word	0x08004948
 8003eb4:	0800494e 	.word	0x0800494e
 8003eb8:	08004952 	.word	0x08004952
 8003ebc:	00000000 	.word	0x00000000
 8003ec0:	08003c2b 	.word	0x08003c2b

08003ec4 <_printf_common>:
 8003ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ec6:	0015      	movs	r5, r2
 8003ec8:	9301      	str	r3, [sp, #4]
 8003eca:	688a      	ldr	r2, [r1, #8]
 8003ecc:	690b      	ldr	r3, [r1, #16]
 8003ece:	000c      	movs	r4, r1
 8003ed0:	9000      	str	r0, [sp, #0]
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	da00      	bge.n	8003ed8 <_printf_common+0x14>
 8003ed6:	0013      	movs	r3, r2
 8003ed8:	0022      	movs	r2, r4
 8003eda:	602b      	str	r3, [r5, #0]
 8003edc:	3243      	adds	r2, #67	; 0x43
 8003ede:	7812      	ldrb	r2, [r2, #0]
 8003ee0:	2a00      	cmp	r2, #0
 8003ee2:	d001      	beq.n	8003ee8 <_printf_common+0x24>
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	602b      	str	r3, [r5, #0]
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	069b      	lsls	r3, r3, #26
 8003eec:	d502      	bpl.n	8003ef4 <_printf_common+0x30>
 8003eee:	682b      	ldr	r3, [r5, #0]
 8003ef0:	3302      	adds	r3, #2
 8003ef2:	602b      	str	r3, [r5, #0]
 8003ef4:	6822      	ldr	r2, [r4, #0]
 8003ef6:	2306      	movs	r3, #6
 8003ef8:	0017      	movs	r7, r2
 8003efa:	401f      	ands	r7, r3
 8003efc:	421a      	tst	r2, r3
 8003efe:	d027      	beq.n	8003f50 <_printf_common+0x8c>
 8003f00:	0023      	movs	r3, r4
 8003f02:	3343      	adds	r3, #67	; 0x43
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	1e5a      	subs	r2, r3, #1
 8003f08:	4193      	sbcs	r3, r2
 8003f0a:	6822      	ldr	r2, [r4, #0]
 8003f0c:	0692      	lsls	r2, r2, #26
 8003f0e:	d430      	bmi.n	8003f72 <_printf_common+0xae>
 8003f10:	0022      	movs	r2, r4
 8003f12:	9901      	ldr	r1, [sp, #4]
 8003f14:	9800      	ldr	r0, [sp, #0]
 8003f16:	9e08      	ldr	r6, [sp, #32]
 8003f18:	3243      	adds	r2, #67	; 0x43
 8003f1a:	47b0      	blx	r6
 8003f1c:	1c43      	adds	r3, r0, #1
 8003f1e:	d025      	beq.n	8003f6c <_printf_common+0xa8>
 8003f20:	2306      	movs	r3, #6
 8003f22:	6820      	ldr	r0, [r4, #0]
 8003f24:	682a      	ldr	r2, [r5, #0]
 8003f26:	68e1      	ldr	r1, [r4, #12]
 8003f28:	2500      	movs	r5, #0
 8003f2a:	4003      	ands	r3, r0
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d103      	bne.n	8003f38 <_printf_common+0x74>
 8003f30:	1a8d      	subs	r5, r1, r2
 8003f32:	43eb      	mvns	r3, r5
 8003f34:	17db      	asrs	r3, r3, #31
 8003f36:	401d      	ands	r5, r3
 8003f38:	68a3      	ldr	r3, [r4, #8]
 8003f3a:	6922      	ldr	r2, [r4, #16]
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	dd01      	ble.n	8003f44 <_printf_common+0x80>
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	18ed      	adds	r5, r5, r3
 8003f44:	2700      	movs	r7, #0
 8003f46:	42bd      	cmp	r5, r7
 8003f48:	d120      	bne.n	8003f8c <_printf_common+0xc8>
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	e010      	b.n	8003f70 <_printf_common+0xac>
 8003f4e:	3701      	adds	r7, #1
 8003f50:	68e3      	ldr	r3, [r4, #12]
 8003f52:	682a      	ldr	r2, [r5, #0]
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	42bb      	cmp	r3, r7
 8003f58:	ddd2      	ble.n	8003f00 <_printf_common+0x3c>
 8003f5a:	0022      	movs	r2, r4
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	9901      	ldr	r1, [sp, #4]
 8003f60:	9800      	ldr	r0, [sp, #0]
 8003f62:	9e08      	ldr	r6, [sp, #32]
 8003f64:	3219      	adds	r2, #25
 8003f66:	47b0      	blx	r6
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	d1f0      	bne.n	8003f4e <_printf_common+0x8a>
 8003f6c:	2001      	movs	r0, #1
 8003f6e:	4240      	negs	r0, r0
 8003f70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f72:	2030      	movs	r0, #48	; 0x30
 8003f74:	18e1      	adds	r1, r4, r3
 8003f76:	3143      	adds	r1, #67	; 0x43
 8003f78:	7008      	strb	r0, [r1, #0]
 8003f7a:	0021      	movs	r1, r4
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	3145      	adds	r1, #69	; 0x45
 8003f80:	7809      	ldrb	r1, [r1, #0]
 8003f82:	18a2      	adds	r2, r4, r2
 8003f84:	3243      	adds	r2, #67	; 0x43
 8003f86:	3302      	adds	r3, #2
 8003f88:	7011      	strb	r1, [r2, #0]
 8003f8a:	e7c1      	b.n	8003f10 <_printf_common+0x4c>
 8003f8c:	0022      	movs	r2, r4
 8003f8e:	2301      	movs	r3, #1
 8003f90:	9901      	ldr	r1, [sp, #4]
 8003f92:	9800      	ldr	r0, [sp, #0]
 8003f94:	9e08      	ldr	r6, [sp, #32]
 8003f96:	321a      	adds	r2, #26
 8003f98:	47b0      	blx	r6
 8003f9a:	1c43      	adds	r3, r0, #1
 8003f9c:	d0e6      	beq.n	8003f6c <_printf_common+0xa8>
 8003f9e:	3701      	adds	r7, #1
 8003fa0:	e7d1      	b.n	8003f46 <_printf_common+0x82>
	...

08003fa4 <_printf_i>:
 8003fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa6:	b08b      	sub	sp, #44	; 0x2c
 8003fa8:	9206      	str	r2, [sp, #24]
 8003faa:	000a      	movs	r2, r1
 8003fac:	3243      	adds	r2, #67	; 0x43
 8003fae:	9307      	str	r3, [sp, #28]
 8003fb0:	9005      	str	r0, [sp, #20]
 8003fb2:	9204      	str	r2, [sp, #16]
 8003fb4:	7e0a      	ldrb	r2, [r1, #24]
 8003fb6:	000c      	movs	r4, r1
 8003fb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003fba:	2a78      	cmp	r2, #120	; 0x78
 8003fbc:	d807      	bhi.n	8003fce <_printf_i+0x2a>
 8003fbe:	2a62      	cmp	r2, #98	; 0x62
 8003fc0:	d809      	bhi.n	8003fd6 <_printf_i+0x32>
 8003fc2:	2a00      	cmp	r2, #0
 8003fc4:	d100      	bne.n	8003fc8 <_printf_i+0x24>
 8003fc6:	e0c1      	b.n	800414c <_printf_i+0x1a8>
 8003fc8:	2a58      	cmp	r2, #88	; 0x58
 8003fca:	d100      	bne.n	8003fce <_printf_i+0x2a>
 8003fcc:	e08c      	b.n	80040e8 <_printf_i+0x144>
 8003fce:	0026      	movs	r6, r4
 8003fd0:	3642      	adds	r6, #66	; 0x42
 8003fd2:	7032      	strb	r2, [r6, #0]
 8003fd4:	e022      	b.n	800401c <_printf_i+0x78>
 8003fd6:	0010      	movs	r0, r2
 8003fd8:	3863      	subs	r0, #99	; 0x63
 8003fda:	2815      	cmp	r0, #21
 8003fdc:	d8f7      	bhi.n	8003fce <_printf_i+0x2a>
 8003fde:	f7fc f891 	bl	8000104 <__gnu_thumb1_case_shi>
 8003fe2:	0016      	.short	0x0016
 8003fe4:	fff6001f 	.word	0xfff6001f
 8003fe8:	fff6fff6 	.word	0xfff6fff6
 8003fec:	001ffff6 	.word	0x001ffff6
 8003ff0:	fff6fff6 	.word	0xfff6fff6
 8003ff4:	fff6fff6 	.word	0xfff6fff6
 8003ff8:	003600a8 	.word	0x003600a8
 8003ffc:	fff6009a 	.word	0xfff6009a
 8004000:	00b9fff6 	.word	0x00b9fff6
 8004004:	0036fff6 	.word	0x0036fff6
 8004008:	fff6fff6 	.word	0xfff6fff6
 800400c:	009e      	.short	0x009e
 800400e:	0026      	movs	r6, r4
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	3642      	adds	r6, #66	; 0x42
 8004014:	1d11      	adds	r1, r2, #4
 8004016:	6019      	str	r1, [r3, #0]
 8004018:	6813      	ldr	r3, [r2, #0]
 800401a:	7033      	strb	r3, [r6, #0]
 800401c:	2301      	movs	r3, #1
 800401e:	e0a7      	b.n	8004170 <_printf_i+0x1cc>
 8004020:	6808      	ldr	r0, [r1, #0]
 8004022:	6819      	ldr	r1, [r3, #0]
 8004024:	1d0a      	adds	r2, r1, #4
 8004026:	0605      	lsls	r5, r0, #24
 8004028:	d50b      	bpl.n	8004042 <_printf_i+0x9e>
 800402a:	680d      	ldr	r5, [r1, #0]
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	2d00      	cmp	r5, #0
 8004030:	da03      	bge.n	800403a <_printf_i+0x96>
 8004032:	232d      	movs	r3, #45	; 0x2d
 8004034:	9a04      	ldr	r2, [sp, #16]
 8004036:	426d      	negs	r5, r5
 8004038:	7013      	strb	r3, [r2, #0]
 800403a:	4b61      	ldr	r3, [pc, #388]	; (80041c0 <_printf_i+0x21c>)
 800403c:	270a      	movs	r7, #10
 800403e:	9303      	str	r3, [sp, #12]
 8004040:	e01b      	b.n	800407a <_printf_i+0xd6>
 8004042:	680d      	ldr	r5, [r1, #0]
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	0641      	lsls	r1, r0, #25
 8004048:	d5f1      	bpl.n	800402e <_printf_i+0x8a>
 800404a:	b22d      	sxth	r5, r5
 800404c:	e7ef      	b.n	800402e <_printf_i+0x8a>
 800404e:	680d      	ldr	r5, [r1, #0]
 8004050:	6819      	ldr	r1, [r3, #0]
 8004052:	1d08      	adds	r0, r1, #4
 8004054:	6018      	str	r0, [r3, #0]
 8004056:	062e      	lsls	r6, r5, #24
 8004058:	d501      	bpl.n	800405e <_printf_i+0xba>
 800405a:	680d      	ldr	r5, [r1, #0]
 800405c:	e003      	b.n	8004066 <_printf_i+0xc2>
 800405e:	066d      	lsls	r5, r5, #25
 8004060:	d5fb      	bpl.n	800405a <_printf_i+0xb6>
 8004062:	680d      	ldr	r5, [r1, #0]
 8004064:	b2ad      	uxth	r5, r5
 8004066:	4b56      	ldr	r3, [pc, #344]	; (80041c0 <_printf_i+0x21c>)
 8004068:	2708      	movs	r7, #8
 800406a:	9303      	str	r3, [sp, #12]
 800406c:	2a6f      	cmp	r2, #111	; 0x6f
 800406e:	d000      	beq.n	8004072 <_printf_i+0xce>
 8004070:	3702      	adds	r7, #2
 8004072:	0023      	movs	r3, r4
 8004074:	2200      	movs	r2, #0
 8004076:	3343      	adds	r3, #67	; 0x43
 8004078:	701a      	strb	r2, [r3, #0]
 800407a:	6863      	ldr	r3, [r4, #4]
 800407c:	60a3      	str	r3, [r4, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	db03      	blt.n	800408a <_printf_i+0xe6>
 8004082:	2204      	movs	r2, #4
 8004084:	6821      	ldr	r1, [r4, #0]
 8004086:	4391      	bics	r1, r2
 8004088:	6021      	str	r1, [r4, #0]
 800408a:	2d00      	cmp	r5, #0
 800408c:	d102      	bne.n	8004094 <_printf_i+0xf0>
 800408e:	9e04      	ldr	r6, [sp, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00c      	beq.n	80040ae <_printf_i+0x10a>
 8004094:	9e04      	ldr	r6, [sp, #16]
 8004096:	0028      	movs	r0, r5
 8004098:	0039      	movs	r1, r7
 800409a:	f7fc f8c3 	bl	8000224 <__aeabi_uidivmod>
 800409e:	9b03      	ldr	r3, [sp, #12]
 80040a0:	3e01      	subs	r6, #1
 80040a2:	5c5b      	ldrb	r3, [r3, r1]
 80040a4:	7033      	strb	r3, [r6, #0]
 80040a6:	002b      	movs	r3, r5
 80040a8:	0005      	movs	r5, r0
 80040aa:	429f      	cmp	r7, r3
 80040ac:	d9f3      	bls.n	8004096 <_printf_i+0xf2>
 80040ae:	2f08      	cmp	r7, #8
 80040b0:	d109      	bne.n	80040c6 <_printf_i+0x122>
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	07db      	lsls	r3, r3, #31
 80040b6:	d506      	bpl.n	80040c6 <_printf_i+0x122>
 80040b8:	6863      	ldr	r3, [r4, #4]
 80040ba:	6922      	ldr	r2, [r4, #16]
 80040bc:	4293      	cmp	r3, r2
 80040be:	dc02      	bgt.n	80040c6 <_printf_i+0x122>
 80040c0:	2330      	movs	r3, #48	; 0x30
 80040c2:	3e01      	subs	r6, #1
 80040c4:	7033      	strb	r3, [r6, #0]
 80040c6:	9b04      	ldr	r3, [sp, #16]
 80040c8:	1b9b      	subs	r3, r3, r6
 80040ca:	6123      	str	r3, [r4, #16]
 80040cc:	9b07      	ldr	r3, [sp, #28]
 80040ce:	0021      	movs	r1, r4
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	9805      	ldr	r0, [sp, #20]
 80040d4:	9b06      	ldr	r3, [sp, #24]
 80040d6:	aa09      	add	r2, sp, #36	; 0x24
 80040d8:	f7ff fef4 	bl	8003ec4 <_printf_common>
 80040dc:	1c43      	adds	r3, r0, #1
 80040de:	d14c      	bne.n	800417a <_printf_i+0x1d6>
 80040e0:	2001      	movs	r0, #1
 80040e2:	4240      	negs	r0, r0
 80040e4:	b00b      	add	sp, #44	; 0x2c
 80040e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040e8:	3145      	adds	r1, #69	; 0x45
 80040ea:	700a      	strb	r2, [r1, #0]
 80040ec:	4a34      	ldr	r2, [pc, #208]	; (80041c0 <_printf_i+0x21c>)
 80040ee:	9203      	str	r2, [sp, #12]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	6821      	ldr	r1, [r4, #0]
 80040f4:	ca20      	ldmia	r2!, {r5}
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	0608      	lsls	r0, r1, #24
 80040fa:	d516      	bpl.n	800412a <_printf_i+0x186>
 80040fc:	07cb      	lsls	r3, r1, #31
 80040fe:	d502      	bpl.n	8004106 <_printf_i+0x162>
 8004100:	2320      	movs	r3, #32
 8004102:	4319      	orrs	r1, r3
 8004104:	6021      	str	r1, [r4, #0]
 8004106:	2710      	movs	r7, #16
 8004108:	2d00      	cmp	r5, #0
 800410a:	d1b2      	bne.n	8004072 <_printf_i+0xce>
 800410c:	2320      	movs	r3, #32
 800410e:	6822      	ldr	r2, [r4, #0]
 8004110:	439a      	bics	r2, r3
 8004112:	6022      	str	r2, [r4, #0]
 8004114:	e7ad      	b.n	8004072 <_printf_i+0xce>
 8004116:	2220      	movs	r2, #32
 8004118:	6809      	ldr	r1, [r1, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	6022      	str	r2, [r4, #0]
 800411e:	0022      	movs	r2, r4
 8004120:	2178      	movs	r1, #120	; 0x78
 8004122:	3245      	adds	r2, #69	; 0x45
 8004124:	7011      	strb	r1, [r2, #0]
 8004126:	4a27      	ldr	r2, [pc, #156]	; (80041c4 <_printf_i+0x220>)
 8004128:	e7e1      	b.n	80040ee <_printf_i+0x14a>
 800412a:	0648      	lsls	r0, r1, #25
 800412c:	d5e6      	bpl.n	80040fc <_printf_i+0x158>
 800412e:	b2ad      	uxth	r5, r5
 8004130:	e7e4      	b.n	80040fc <_printf_i+0x158>
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	680d      	ldr	r5, [r1, #0]
 8004136:	1d10      	adds	r0, r2, #4
 8004138:	6949      	ldr	r1, [r1, #20]
 800413a:	6018      	str	r0, [r3, #0]
 800413c:	6813      	ldr	r3, [r2, #0]
 800413e:	062e      	lsls	r6, r5, #24
 8004140:	d501      	bpl.n	8004146 <_printf_i+0x1a2>
 8004142:	6019      	str	r1, [r3, #0]
 8004144:	e002      	b.n	800414c <_printf_i+0x1a8>
 8004146:	066d      	lsls	r5, r5, #25
 8004148:	d5fb      	bpl.n	8004142 <_printf_i+0x19e>
 800414a:	8019      	strh	r1, [r3, #0]
 800414c:	2300      	movs	r3, #0
 800414e:	9e04      	ldr	r6, [sp, #16]
 8004150:	6123      	str	r3, [r4, #16]
 8004152:	e7bb      	b.n	80040cc <_printf_i+0x128>
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	1d11      	adds	r1, r2, #4
 8004158:	6019      	str	r1, [r3, #0]
 800415a:	6816      	ldr	r6, [r2, #0]
 800415c:	2100      	movs	r1, #0
 800415e:	0030      	movs	r0, r6
 8004160:	6862      	ldr	r2, [r4, #4]
 8004162:	f000 facf 	bl	8004704 <memchr>
 8004166:	2800      	cmp	r0, #0
 8004168:	d001      	beq.n	800416e <_printf_i+0x1ca>
 800416a:	1b80      	subs	r0, r0, r6
 800416c:	6060      	str	r0, [r4, #4]
 800416e:	6863      	ldr	r3, [r4, #4]
 8004170:	6123      	str	r3, [r4, #16]
 8004172:	2300      	movs	r3, #0
 8004174:	9a04      	ldr	r2, [sp, #16]
 8004176:	7013      	strb	r3, [r2, #0]
 8004178:	e7a8      	b.n	80040cc <_printf_i+0x128>
 800417a:	6923      	ldr	r3, [r4, #16]
 800417c:	0032      	movs	r2, r6
 800417e:	9906      	ldr	r1, [sp, #24]
 8004180:	9805      	ldr	r0, [sp, #20]
 8004182:	9d07      	ldr	r5, [sp, #28]
 8004184:	47a8      	blx	r5
 8004186:	1c43      	adds	r3, r0, #1
 8004188:	d0aa      	beq.n	80040e0 <_printf_i+0x13c>
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	079b      	lsls	r3, r3, #30
 800418e:	d415      	bmi.n	80041bc <_printf_i+0x218>
 8004190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004192:	68e0      	ldr	r0, [r4, #12]
 8004194:	4298      	cmp	r0, r3
 8004196:	daa5      	bge.n	80040e4 <_printf_i+0x140>
 8004198:	0018      	movs	r0, r3
 800419a:	e7a3      	b.n	80040e4 <_printf_i+0x140>
 800419c:	0022      	movs	r2, r4
 800419e:	2301      	movs	r3, #1
 80041a0:	9906      	ldr	r1, [sp, #24]
 80041a2:	9805      	ldr	r0, [sp, #20]
 80041a4:	9e07      	ldr	r6, [sp, #28]
 80041a6:	3219      	adds	r2, #25
 80041a8:	47b0      	blx	r6
 80041aa:	1c43      	adds	r3, r0, #1
 80041ac:	d098      	beq.n	80040e0 <_printf_i+0x13c>
 80041ae:	3501      	adds	r5, #1
 80041b0:	68e3      	ldr	r3, [r4, #12]
 80041b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041b4:	1a9b      	subs	r3, r3, r2
 80041b6:	42ab      	cmp	r3, r5
 80041b8:	dcf0      	bgt.n	800419c <_printf_i+0x1f8>
 80041ba:	e7e9      	b.n	8004190 <_printf_i+0x1ec>
 80041bc:	2500      	movs	r5, #0
 80041be:	e7f7      	b.n	80041b0 <_printf_i+0x20c>
 80041c0:	08004959 	.word	0x08004959
 80041c4:	0800496a 	.word	0x0800496a

080041c8 <_sbrk_r>:
 80041c8:	2300      	movs	r3, #0
 80041ca:	b570      	push	{r4, r5, r6, lr}
 80041cc:	4d06      	ldr	r5, [pc, #24]	; (80041e8 <_sbrk_r+0x20>)
 80041ce:	0004      	movs	r4, r0
 80041d0:	0008      	movs	r0, r1
 80041d2:	602b      	str	r3, [r5, #0]
 80041d4:	f7fc fe2a 	bl	8000e2c <_sbrk>
 80041d8:	1c43      	adds	r3, r0, #1
 80041da:	d103      	bne.n	80041e4 <_sbrk_r+0x1c>
 80041dc:	682b      	ldr	r3, [r5, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d000      	beq.n	80041e4 <_sbrk_r+0x1c>
 80041e2:	6023      	str	r3, [r4, #0]
 80041e4:	bd70      	pop	{r4, r5, r6, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	200001b4 	.word	0x200001b4

080041ec <__sread>:
 80041ec:	b570      	push	{r4, r5, r6, lr}
 80041ee:	000c      	movs	r4, r1
 80041f0:	250e      	movs	r5, #14
 80041f2:	5f49      	ldrsh	r1, [r1, r5]
 80041f4:	f000 faec 	bl	80047d0 <_read_r>
 80041f8:	2800      	cmp	r0, #0
 80041fa:	db03      	blt.n	8004204 <__sread+0x18>
 80041fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80041fe:	181b      	adds	r3, r3, r0
 8004200:	6563      	str	r3, [r4, #84]	; 0x54
 8004202:	bd70      	pop	{r4, r5, r6, pc}
 8004204:	89a3      	ldrh	r3, [r4, #12]
 8004206:	4a02      	ldr	r2, [pc, #8]	; (8004210 <__sread+0x24>)
 8004208:	4013      	ands	r3, r2
 800420a:	81a3      	strh	r3, [r4, #12]
 800420c:	e7f9      	b.n	8004202 <__sread+0x16>
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	ffffefff 	.word	0xffffefff

08004214 <__swrite>:
 8004214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004216:	001f      	movs	r7, r3
 8004218:	898b      	ldrh	r3, [r1, #12]
 800421a:	0005      	movs	r5, r0
 800421c:	000c      	movs	r4, r1
 800421e:	0016      	movs	r6, r2
 8004220:	05db      	lsls	r3, r3, #23
 8004222:	d505      	bpl.n	8004230 <__swrite+0x1c>
 8004224:	230e      	movs	r3, #14
 8004226:	5ec9      	ldrsh	r1, [r1, r3]
 8004228:	2200      	movs	r2, #0
 800422a:	2302      	movs	r3, #2
 800422c:	f000 f9ea 	bl	8004604 <_lseek_r>
 8004230:	89a3      	ldrh	r3, [r4, #12]
 8004232:	4a05      	ldr	r2, [pc, #20]	; (8004248 <__swrite+0x34>)
 8004234:	0028      	movs	r0, r5
 8004236:	4013      	ands	r3, r2
 8004238:	81a3      	strh	r3, [r4, #12]
 800423a:	0032      	movs	r2, r6
 800423c:	230e      	movs	r3, #14
 800423e:	5ee1      	ldrsh	r1, [r4, r3]
 8004240:	003b      	movs	r3, r7
 8004242:	f000 f875 	bl	8004330 <_write_r>
 8004246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004248:	ffffefff 	.word	0xffffefff

0800424c <__sseek>:
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	000c      	movs	r4, r1
 8004250:	250e      	movs	r5, #14
 8004252:	5f49      	ldrsh	r1, [r1, r5]
 8004254:	f000 f9d6 	bl	8004604 <_lseek_r>
 8004258:	89a3      	ldrh	r3, [r4, #12]
 800425a:	1c42      	adds	r2, r0, #1
 800425c:	d103      	bne.n	8004266 <__sseek+0x1a>
 800425e:	4a05      	ldr	r2, [pc, #20]	; (8004274 <__sseek+0x28>)
 8004260:	4013      	ands	r3, r2
 8004262:	81a3      	strh	r3, [r4, #12]
 8004264:	bd70      	pop	{r4, r5, r6, pc}
 8004266:	2280      	movs	r2, #128	; 0x80
 8004268:	0152      	lsls	r2, r2, #5
 800426a:	4313      	orrs	r3, r2
 800426c:	81a3      	strh	r3, [r4, #12]
 800426e:	6560      	str	r0, [r4, #84]	; 0x54
 8004270:	e7f8      	b.n	8004264 <__sseek+0x18>
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	ffffefff 	.word	0xffffefff

08004278 <__sclose>:
 8004278:	b510      	push	{r4, lr}
 800427a:	230e      	movs	r3, #14
 800427c:	5ec9      	ldrsh	r1, [r1, r3]
 800427e:	f000 f8e3 	bl	8004448 <_close_r>
 8004282:	bd10      	pop	{r4, pc}

08004284 <__swbuf_r>:
 8004284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004286:	0005      	movs	r5, r0
 8004288:	000e      	movs	r6, r1
 800428a:	0014      	movs	r4, r2
 800428c:	2800      	cmp	r0, #0
 800428e:	d004      	beq.n	800429a <__swbuf_r+0x16>
 8004290:	6983      	ldr	r3, [r0, #24]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <__swbuf_r+0x16>
 8004296:	f7ff fb77 	bl	8003988 <__sinit>
 800429a:	4b22      	ldr	r3, [pc, #136]	; (8004324 <__swbuf_r+0xa0>)
 800429c:	429c      	cmp	r4, r3
 800429e:	d12e      	bne.n	80042fe <__swbuf_r+0x7a>
 80042a0:	686c      	ldr	r4, [r5, #4]
 80042a2:	69a3      	ldr	r3, [r4, #24]
 80042a4:	60a3      	str	r3, [r4, #8]
 80042a6:	89a3      	ldrh	r3, [r4, #12]
 80042a8:	071b      	lsls	r3, r3, #28
 80042aa:	d532      	bpl.n	8004312 <__swbuf_r+0x8e>
 80042ac:	6923      	ldr	r3, [r4, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d02f      	beq.n	8004312 <__swbuf_r+0x8e>
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	6922      	ldr	r2, [r4, #16]
 80042b6:	b2f7      	uxtb	r7, r6
 80042b8:	1a98      	subs	r0, r3, r2
 80042ba:	6963      	ldr	r3, [r4, #20]
 80042bc:	b2f6      	uxtb	r6, r6
 80042be:	4283      	cmp	r3, r0
 80042c0:	dc05      	bgt.n	80042ce <__swbuf_r+0x4a>
 80042c2:	0021      	movs	r1, r4
 80042c4:	0028      	movs	r0, r5
 80042c6:	f000 f95d 	bl	8004584 <_fflush_r>
 80042ca:	2800      	cmp	r0, #0
 80042cc:	d127      	bne.n	800431e <__swbuf_r+0x9a>
 80042ce:	68a3      	ldr	r3, [r4, #8]
 80042d0:	3001      	adds	r0, #1
 80042d2:	3b01      	subs	r3, #1
 80042d4:	60a3      	str	r3, [r4, #8]
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	6022      	str	r2, [r4, #0]
 80042dc:	701f      	strb	r7, [r3, #0]
 80042de:	6963      	ldr	r3, [r4, #20]
 80042e0:	4283      	cmp	r3, r0
 80042e2:	d004      	beq.n	80042ee <__swbuf_r+0x6a>
 80042e4:	89a3      	ldrh	r3, [r4, #12]
 80042e6:	07db      	lsls	r3, r3, #31
 80042e8:	d507      	bpl.n	80042fa <__swbuf_r+0x76>
 80042ea:	2e0a      	cmp	r6, #10
 80042ec:	d105      	bne.n	80042fa <__swbuf_r+0x76>
 80042ee:	0021      	movs	r1, r4
 80042f0:	0028      	movs	r0, r5
 80042f2:	f000 f947 	bl	8004584 <_fflush_r>
 80042f6:	2800      	cmp	r0, #0
 80042f8:	d111      	bne.n	800431e <__swbuf_r+0x9a>
 80042fa:	0030      	movs	r0, r6
 80042fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042fe:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <__swbuf_r+0xa4>)
 8004300:	429c      	cmp	r4, r3
 8004302:	d101      	bne.n	8004308 <__swbuf_r+0x84>
 8004304:	68ac      	ldr	r4, [r5, #8]
 8004306:	e7cc      	b.n	80042a2 <__swbuf_r+0x1e>
 8004308:	4b08      	ldr	r3, [pc, #32]	; (800432c <__swbuf_r+0xa8>)
 800430a:	429c      	cmp	r4, r3
 800430c:	d1c9      	bne.n	80042a2 <__swbuf_r+0x1e>
 800430e:	68ec      	ldr	r4, [r5, #12]
 8004310:	e7c7      	b.n	80042a2 <__swbuf_r+0x1e>
 8004312:	0021      	movs	r1, r4
 8004314:	0028      	movs	r0, r5
 8004316:	f000 f81f 	bl	8004358 <__swsetup_r>
 800431a:	2800      	cmp	r0, #0
 800431c:	d0c9      	beq.n	80042b2 <__swbuf_r+0x2e>
 800431e:	2601      	movs	r6, #1
 8004320:	4276      	negs	r6, r6
 8004322:	e7ea      	b.n	80042fa <__swbuf_r+0x76>
 8004324:	08004908 	.word	0x08004908
 8004328:	08004928 	.word	0x08004928
 800432c:	080048e8 	.word	0x080048e8

08004330 <_write_r>:
 8004330:	b570      	push	{r4, r5, r6, lr}
 8004332:	0004      	movs	r4, r0
 8004334:	0008      	movs	r0, r1
 8004336:	0011      	movs	r1, r2
 8004338:	001a      	movs	r2, r3
 800433a:	2300      	movs	r3, #0
 800433c:	4d05      	ldr	r5, [pc, #20]	; (8004354 <_write_r+0x24>)
 800433e:	602b      	str	r3, [r5, #0]
 8004340:	f7fc fd2b 	bl	8000d9a <_write>
 8004344:	1c43      	adds	r3, r0, #1
 8004346:	d103      	bne.n	8004350 <_write_r+0x20>
 8004348:	682b      	ldr	r3, [r5, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d000      	beq.n	8004350 <_write_r+0x20>
 800434e:	6023      	str	r3, [r4, #0]
 8004350:	bd70      	pop	{r4, r5, r6, pc}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	200001b4 	.word	0x200001b4

08004358 <__swsetup_r>:
 8004358:	4b37      	ldr	r3, [pc, #220]	; (8004438 <__swsetup_r+0xe0>)
 800435a:	b570      	push	{r4, r5, r6, lr}
 800435c:	681d      	ldr	r5, [r3, #0]
 800435e:	0006      	movs	r6, r0
 8004360:	000c      	movs	r4, r1
 8004362:	2d00      	cmp	r5, #0
 8004364:	d005      	beq.n	8004372 <__swsetup_r+0x1a>
 8004366:	69ab      	ldr	r3, [r5, #24]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d102      	bne.n	8004372 <__swsetup_r+0x1a>
 800436c:	0028      	movs	r0, r5
 800436e:	f7ff fb0b 	bl	8003988 <__sinit>
 8004372:	4b32      	ldr	r3, [pc, #200]	; (800443c <__swsetup_r+0xe4>)
 8004374:	429c      	cmp	r4, r3
 8004376:	d10f      	bne.n	8004398 <__swsetup_r+0x40>
 8004378:	686c      	ldr	r4, [r5, #4]
 800437a:	230c      	movs	r3, #12
 800437c:	5ee2      	ldrsh	r2, [r4, r3]
 800437e:	b293      	uxth	r3, r2
 8004380:	0711      	lsls	r1, r2, #28
 8004382:	d42d      	bmi.n	80043e0 <__swsetup_r+0x88>
 8004384:	06d9      	lsls	r1, r3, #27
 8004386:	d411      	bmi.n	80043ac <__swsetup_r+0x54>
 8004388:	2309      	movs	r3, #9
 800438a:	2001      	movs	r0, #1
 800438c:	6033      	str	r3, [r6, #0]
 800438e:	3337      	adds	r3, #55	; 0x37
 8004390:	4313      	orrs	r3, r2
 8004392:	81a3      	strh	r3, [r4, #12]
 8004394:	4240      	negs	r0, r0
 8004396:	bd70      	pop	{r4, r5, r6, pc}
 8004398:	4b29      	ldr	r3, [pc, #164]	; (8004440 <__swsetup_r+0xe8>)
 800439a:	429c      	cmp	r4, r3
 800439c:	d101      	bne.n	80043a2 <__swsetup_r+0x4a>
 800439e:	68ac      	ldr	r4, [r5, #8]
 80043a0:	e7eb      	b.n	800437a <__swsetup_r+0x22>
 80043a2:	4b28      	ldr	r3, [pc, #160]	; (8004444 <__swsetup_r+0xec>)
 80043a4:	429c      	cmp	r4, r3
 80043a6:	d1e8      	bne.n	800437a <__swsetup_r+0x22>
 80043a8:	68ec      	ldr	r4, [r5, #12]
 80043aa:	e7e6      	b.n	800437a <__swsetup_r+0x22>
 80043ac:	075b      	lsls	r3, r3, #29
 80043ae:	d513      	bpl.n	80043d8 <__swsetup_r+0x80>
 80043b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043b2:	2900      	cmp	r1, #0
 80043b4:	d008      	beq.n	80043c8 <__swsetup_r+0x70>
 80043b6:	0023      	movs	r3, r4
 80043b8:	3344      	adds	r3, #68	; 0x44
 80043ba:	4299      	cmp	r1, r3
 80043bc:	d002      	beq.n	80043c4 <__swsetup_r+0x6c>
 80043be:	0030      	movs	r0, r6
 80043c0:	f000 f9bc 	bl	800473c <_free_r>
 80043c4:	2300      	movs	r3, #0
 80043c6:	6363      	str	r3, [r4, #52]	; 0x34
 80043c8:	2224      	movs	r2, #36	; 0x24
 80043ca:	89a3      	ldrh	r3, [r4, #12]
 80043cc:	4393      	bics	r3, r2
 80043ce:	81a3      	strh	r3, [r4, #12]
 80043d0:	2300      	movs	r3, #0
 80043d2:	6063      	str	r3, [r4, #4]
 80043d4:	6923      	ldr	r3, [r4, #16]
 80043d6:	6023      	str	r3, [r4, #0]
 80043d8:	2308      	movs	r3, #8
 80043da:	89a2      	ldrh	r2, [r4, #12]
 80043dc:	4313      	orrs	r3, r2
 80043de:	81a3      	strh	r3, [r4, #12]
 80043e0:	6923      	ldr	r3, [r4, #16]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10b      	bne.n	80043fe <__swsetup_r+0xa6>
 80043e6:	21a0      	movs	r1, #160	; 0xa0
 80043e8:	2280      	movs	r2, #128	; 0x80
 80043ea:	89a3      	ldrh	r3, [r4, #12]
 80043ec:	0089      	lsls	r1, r1, #2
 80043ee:	0092      	lsls	r2, r2, #2
 80043f0:	400b      	ands	r3, r1
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d003      	beq.n	80043fe <__swsetup_r+0xa6>
 80043f6:	0021      	movs	r1, r4
 80043f8:	0030      	movs	r0, r6
 80043fa:	f000 f93f 	bl	800467c <__smakebuf_r>
 80043fe:	220c      	movs	r2, #12
 8004400:	5ea3      	ldrsh	r3, [r4, r2]
 8004402:	2001      	movs	r0, #1
 8004404:	001a      	movs	r2, r3
 8004406:	b299      	uxth	r1, r3
 8004408:	4002      	ands	r2, r0
 800440a:	4203      	tst	r3, r0
 800440c:	d00f      	beq.n	800442e <__swsetup_r+0xd6>
 800440e:	2200      	movs	r2, #0
 8004410:	60a2      	str	r2, [r4, #8]
 8004412:	6962      	ldr	r2, [r4, #20]
 8004414:	4252      	negs	r2, r2
 8004416:	61a2      	str	r2, [r4, #24]
 8004418:	2000      	movs	r0, #0
 800441a:	6922      	ldr	r2, [r4, #16]
 800441c:	4282      	cmp	r2, r0
 800441e:	d1ba      	bne.n	8004396 <__swsetup_r+0x3e>
 8004420:	060a      	lsls	r2, r1, #24
 8004422:	d5b8      	bpl.n	8004396 <__swsetup_r+0x3e>
 8004424:	2240      	movs	r2, #64	; 0x40
 8004426:	4313      	orrs	r3, r2
 8004428:	81a3      	strh	r3, [r4, #12]
 800442a:	3801      	subs	r0, #1
 800442c:	e7b3      	b.n	8004396 <__swsetup_r+0x3e>
 800442e:	0788      	lsls	r0, r1, #30
 8004430:	d400      	bmi.n	8004434 <__swsetup_r+0xdc>
 8004432:	6962      	ldr	r2, [r4, #20]
 8004434:	60a2      	str	r2, [r4, #8]
 8004436:	e7ef      	b.n	8004418 <__swsetup_r+0xc0>
 8004438:	2000000c 	.word	0x2000000c
 800443c:	08004908 	.word	0x08004908
 8004440:	08004928 	.word	0x08004928
 8004444:	080048e8 	.word	0x080048e8

08004448 <_close_r>:
 8004448:	2300      	movs	r3, #0
 800444a:	b570      	push	{r4, r5, r6, lr}
 800444c:	4d06      	ldr	r5, [pc, #24]	; (8004468 <_close_r+0x20>)
 800444e:	0004      	movs	r4, r0
 8004450:	0008      	movs	r0, r1
 8004452:	602b      	str	r3, [r5, #0]
 8004454:	f7fc fcbd 	bl	8000dd2 <_close>
 8004458:	1c43      	adds	r3, r0, #1
 800445a:	d103      	bne.n	8004464 <_close_r+0x1c>
 800445c:	682b      	ldr	r3, [r5, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d000      	beq.n	8004464 <_close_r+0x1c>
 8004462:	6023      	str	r3, [r4, #0]
 8004464:	bd70      	pop	{r4, r5, r6, pc}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	200001b4 	.word	0x200001b4

0800446c <__sflush_r>:
 800446c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800446e:	898b      	ldrh	r3, [r1, #12]
 8004470:	0005      	movs	r5, r0
 8004472:	000c      	movs	r4, r1
 8004474:	071a      	lsls	r2, r3, #28
 8004476:	d45f      	bmi.n	8004538 <__sflush_r+0xcc>
 8004478:	684a      	ldr	r2, [r1, #4]
 800447a:	2a00      	cmp	r2, #0
 800447c:	dc04      	bgt.n	8004488 <__sflush_r+0x1c>
 800447e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004480:	2a00      	cmp	r2, #0
 8004482:	dc01      	bgt.n	8004488 <__sflush_r+0x1c>
 8004484:	2000      	movs	r0, #0
 8004486:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004488:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800448a:	2f00      	cmp	r7, #0
 800448c:	d0fa      	beq.n	8004484 <__sflush_r+0x18>
 800448e:	2200      	movs	r2, #0
 8004490:	2180      	movs	r1, #128	; 0x80
 8004492:	682e      	ldr	r6, [r5, #0]
 8004494:	602a      	str	r2, [r5, #0]
 8004496:	001a      	movs	r2, r3
 8004498:	0149      	lsls	r1, r1, #5
 800449a:	400a      	ands	r2, r1
 800449c:	420b      	tst	r3, r1
 800449e:	d034      	beq.n	800450a <__sflush_r+0x9e>
 80044a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044a2:	89a3      	ldrh	r3, [r4, #12]
 80044a4:	075b      	lsls	r3, r3, #29
 80044a6:	d506      	bpl.n	80044b6 <__sflush_r+0x4a>
 80044a8:	6863      	ldr	r3, [r4, #4]
 80044aa:	1ac0      	subs	r0, r0, r3
 80044ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <__sflush_r+0x4a>
 80044b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044b4:	1ac0      	subs	r0, r0, r3
 80044b6:	0002      	movs	r2, r0
 80044b8:	6a21      	ldr	r1, [r4, #32]
 80044ba:	2300      	movs	r3, #0
 80044bc:	0028      	movs	r0, r5
 80044be:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80044c0:	47b8      	blx	r7
 80044c2:	89a1      	ldrh	r1, [r4, #12]
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	d106      	bne.n	80044d6 <__sflush_r+0x6a>
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	2b1d      	cmp	r3, #29
 80044cc:	d831      	bhi.n	8004532 <__sflush_r+0xc6>
 80044ce:	4a2c      	ldr	r2, [pc, #176]	; (8004580 <__sflush_r+0x114>)
 80044d0:	40da      	lsrs	r2, r3
 80044d2:	07d3      	lsls	r3, r2, #31
 80044d4:	d52d      	bpl.n	8004532 <__sflush_r+0xc6>
 80044d6:	2300      	movs	r3, #0
 80044d8:	6063      	str	r3, [r4, #4]
 80044da:	6923      	ldr	r3, [r4, #16]
 80044dc:	6023      	str	r3, [r4, #0]
 80044de:	04cb      	lsls	r3, r1, #19
 80044e0:	d505      	bpl.n	80044ee <__sflush_r+0x82>
 80044e2:	1c43      	adds	r3, r0, #1
 80044e4:	d102      	bne.n	80044ec <__sflush_r+0x80>
 80044e6:	682b      	ldr	r3, [r5, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d100      	bne.n	80044ee <__sflush_r+0x82>
 80044ec:	6560      	str	r0, [r4, #84]	; 0x54
 80044ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044f0:	602e      	str	r6, [r5, #0]
 80044f2:	2900      	cmp	r1, #0
 80044f4:	d0c6      	beq.n	8004484 <__sflush_r+0x18>
 80044f6:	0023      	movs	r3, r4
 80044f8:	3344      	adds	r3, #68	; 0x44
 80044fa:	4299      	cmp	r1, r3
 80044fc:	d002      	beq.n	8004504 <__sflush_r+0x98>
 80044fe:	0028      	movs	r0, r5
 8004500:	f000 f91c 	bl	800473c <_free_r>
 8004504:	2000      	movs	r0, #0
 8004506:	6360      	str	r0, [r4, #52]	; 0x34
 8004508:	e7bd      	b.n	8004486 <__sflush_r+0x1a>
 800450a:	2301      	movs	r3, #1
 800450c:	0028      	movs	r0, r5
 800450e:	6a21      	ldr	r1, [r4, #32]
 8004510:	47b8      	blx	r7
 8004512:	1c43      	adds	r3, r0, #1
 8004514:	d1c5      	bne.n	80044a2 <__sflush_r+0x36>
 8004516:	682b      	ldr	r3, [r5, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0c2      	beq.n	80044a2 <__sflush_r+0x36>
 800451c:	2b1d      	cmp	r3, #29
 800451e:	d001      	beq.n	8004524 <__sflush_r+0xb8>
 8004520:	2b16      	cmp	r3, #22
 8004522:	d101      	bne.n	8004528 <__sflush_r+0xbc>
 8004524:	602e      	str	r6, [r5, #0]
 8004526:	e7ad      	b.n	8004484 <__sflush_r+0x18>
 8004528:	2340      	movs	r3, #64	; 0x40
 800452a:	89a2      	ldrh	r2, [r4, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	81a3      	strh	r3, [r4, #12]
 8004530:	e7a9      	b.n	8004486 <__sflush_r+0x1a>
 8004532:	2340      	movs	r3, #64	; 0x40
 8004534:	430b      	orrs	r3, r1
 8004536:	e7fa      	b.n	800452e <__sflush_r+0xc2>
 8004538:	690f      	ldr	r7, [r1, #16]
 800453a:	2f00      	cmp	r7, #0
 800453c:	d0a2      	beq.n	8004484 <__sflush_r+0x18>
 800453e:	680a      	ldr	r2, [r1, #0]
 8004540:	600f      	str	r7, [r1, #0]
 8004542:	1bd2      	subs	r2, r2, r7
 8004544:	9201      	str	r2, [sp, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	079b      	lsls	r3, r3, #30
 800454a:	d100      	bne.n	800454e <__sflush_r+0xe2>
 800454c:	694a      	ldr	r2, [r1, #20]
 800454e:	60a2      	str	r2, [r4, #8]
 8004550:	9b01      	ldr	r3, [sp, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	dc00      	bgt.n	8004558 <__sflush_r+0xec>
 8004556:	e795      	b.n	8004484 <__sflush_r+0x18>
 8004558:	003a      	movs	r2, r7
 800455a:	0028      	movs	r0, r5
 800455c:	9b01      	ldr	r3, [sp, #4]
 800455e:	6a21      	ldr	r1, [r4, #32]
 8004560:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004562:	47b0      	blx	r6
 8004564:	2800      	cmp	r0, #0
 8004566:	dc06      	bgt.n	8004576 <__sflush_r+0x10a>
 8004568:	2340      	movs	r3, #64	; 0x40
 800456a:	2001      	movs	r0, #1
 800456c:	89a2      	ldrh	r2, [r4, #12]
 800456e:	4240      	negs	r0, r0
 8004570:	4313      	orrs	r3, r2
 8004572:	81a3      	strh	r3, [r4, #12]
 8004574:	e787      	b.n	8004486 <__sflush_r+0x1a>
 8004576:	9b01      	ldr	r3, [sp, #4]
 8004578:	183f      	adds	r7, r7, r0
 800457a:	1a1b      	subs	r3, r3, r0
 800457c:	9301      	str	r3, [sp, #4]
 800457e:	e7e7      	b.n	8004550 <__sflush_r+0xe4>
 8004580:	20400001 	.word	0x20400001

08004584 <_fflush_r>:
 8004584:	690b      	ldr	r3, [r1, #16]
 8004586:	b570      	push	{r4, r5, r6, lr}
 8004588:	0005      	movs	r5, r0
 800458a:	000c      	movs	r4, r1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d102      	bne.n	8004596 <_fflush_r+0x12>
 8004590:	2500      	movs	r5, #0
 8004592:	0028      	movs	r0, r5
 8004594:	bd70      	pop	{r4, r5, r6, pc}
 8004596:	2800      	cmp	r0, #0
 8004598:	d004      	beq.n	80045a4 <_fflush_r+0x20>
 800459a:	6983      	ldr	r3, [r0, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <_fflush_r+0x20>
 80045a0:	f7ff f9f2 	bl	8003988 <__sinit>
 80045a4:	4b14      	ldr	r3, [pc, #80]	; (80045f8 <_fflush_r+0x74>)
 80045a6:	429c      	cmp	r4, r3
 80045a8:	d11b      	bne.n	80045e2 <_fflush_r+0x5e>
 80045aa:	686c      	ldr	r4, [r5, #4]
 80045ac:	220c      	movs	r2, #12
 80045ae:	5ea3      	ldrsh	r3, [r4, r2]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0ed      	beq.n	8004590 <_fflush_r+0xc>
 80045b4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045b6:	07d2      	lsls	r2, r2, #31
 80045b8:	d404      	bmi.n	80045c4 <_fflush_r+0x40>
 80045ba:	059b      	lsls	r3, r3, #22
 80045bc:	d402      	bmi.n	80045c4 <_fflush_r+0x40>
 80045be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045c0:	f7ff fa83 	bl	8003aca <__retarget_lock_acquire_recursive>
 80045c4:	0028      	movs	r0, r5
 80045c6:	0021      	movs	r1, r4
 80045c8:	f7ff ff50 	bl	800446c <__sflush_r>
 80045cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045ce:	0005      	movs	r5, r0
 80045d0:	07db      	lsls	r3, r3, #31
 80045d2:	d4de      	bmi.n	8004592 <_fflush_r+0xe>
 80045d4:	89a3      	ldrh	r3, [r4, #12]
 80045d6:	059b      	lsls	r3, r3, #22
 80045d8:	d4db      	bmi.n	8004592 <_fflush_r+0xe>
 80045da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045dc:	f7ff fa76 	bl	8003acc <__retarget_lock_release_recursive>
 80045e0:	e7d7      	b.n	8004592 <_fflush_r+0xe>
 80045e2:	4b06      	ldr	r3, [pc, #24]	; (80045fc <_fflush_r+0x78>)
 80045e4:	429c      	cmp	r4, r3
 80045e6:	d101      	bne.n	80045ec <_fflush_r+0x68>
 80045e8:	68ac      	ldr	r4, [r5, #8]
 80045ea:	e7df      	b.n	80045ac <_fflush_r+0x28>
 80045ec:	4b04      	ldr	r3, [pc, #16]	; (8004600 <_fflush_r+0x7c>)
 80045ee:	429c      	cmp	r4, r3
 80045f0:	d1dc      	bne.n	80045ac <_fflush_r+0x28>
 80045f2:	68ec      	ldr	r4, [r5, #12]
 80045f4:	e7da      	b.n	80045ac <_fflush_r+0x28>
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	08004908 	.word	0x08004908
 80045fc:	08004928 	.word	0x08004928
 8004600:	080048e8 	.word	0x080048e8

08004604 <_lseek_r>:
 8004604:	b570      	push	{r4, r5, r6, lr}
 8004606:	0004      	movs	r4, r0
 8004608:	0008      	movs	r0, r1
 800460a:	0011      	movs	r1, r2
 800460c:	001a      	movs	r2, r3
 800460e:	2300      	movs	r3, #0
 8004610:	4d05      	ldr	r5, [pc, #20]	; (8004628 <_lseek_r+0x24>)
 8004612:	602b      	str	r3, [r5, #0]
 8004614:	f7fc fbfe 	bl	8000e14 <_lseek>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d103      	bne.n	8004624 <_lseek_r+0x20>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d000      	beq.n	8004624 <_lseek_r+0x20>
 8004622:	6023      	str	r3, [r4, #0]
 8004624:	bd70      	pop	{r4, r5, r6, pc}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	200001b4 	.word	0x200001b4

0800462c <__swhatbuf_r>:
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	000e      	movs	r6, r1
 8004630:	001d      	movs	r5, r3
 8004632:	230e      	movs	r3, #14
 8004634:	5ec9      	ldrsh	r1, [r1, r3]
 8004636:	0014      	movs	r4, r2
 8004638:	b096      	sub	sp, #88	; 0x58
 800463a:	2900      	cmp	r1, #0
 800463c:	da08      	bge.n	8004650 <__swhatbuf_r+0x24>
 800463e:	220c      	movs	r2, #12
 8004640:	5eb3      	ldrsh	r3, [r6, r2]
 8004642:	2200      	movs	r2, #0
 8004644:	602a      	str	r2, [r5, #0]
 8004646:	061b      	lsls	r3, r3, #24
 8004648:	d411      	bmi.n	800466e <__swhatbuf_r+0x42>
 800464a:	2380      	movs	r3, #128	; 0x80
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	e00f      	b.n	8004670 <__swhatbuf_r+0x44>
 8004650:	466a      	mov	r2, sp
 8004652:	f000 f8d1 	bl	80047f8 <_fstat_r>
 8004656:	2800      	cmp	r0, #0
 8004658:	dbf1      	blt.n	800463e <__swhatbuf_r+0x12>
 800465a:	23f0      	movs	r3, #240	; 0xf0
 800465c:	9901      	ldr	r1, [sp, #4]
 800465e:	021b      	lsls	r3, r3, #8
 8004660:	4019      	ands	r1, r3
 8004662:	4b05      	ldr	r3, [pc, #20]	; (8004678 <__swhatbuf_r+0x4c>)
 8004664:	18c9      	adds	r1, r1, r3
 8004666:	424b      	negs	r3, r1
 8004668:	4159      	adcs	r1, r3
 800466a:	6029      	str	r1, [r5, #0]
 800466c:	e7ed      	b.n	800464a <__swhatbuf_r+0x1e>
 800466e:	2340      	movs	r3, #64	; 0x40
 8004670:	2000      	movs	r0, #0
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	b016      	add	sp, #88	; 0x58
 8004676:	bd70      	pop	{r4, r5, r6, pc}
 8004678:	ffffe000 	.word	0xffffe000

0800467c <__smakebuf_r>:
 800467c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800467e:	2602      	movs	r6, #2
 8004680:	898b      	ldrh	r3, [r1, #12]
 8004682:	0005      	movs	r5, r0
 8004684:	000c      	movs	r4, r1
 8004686:	4233      	tst	r3, r6
 8004688:	d006      	beq.n	8004698 <__smakebuf_r+0x1c>
 800468a:	0023      	movs	r3, r4
 800468c:	3347      	adds	r3, #71	; 0x47
 800468e:	6023      	str	r3, [r4, #0]
 8004690:	6123      	str	r3, [r4, #16]
 8004692:	2301      	movs	r3, #1
 8004694:	6163      	str	r3, [r4, #20]
 8004696:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004698:	466a      	mov	r2, sp
 800469a:	ab01      	add	r3, sp, #4
 800469c:	f7ff ffc6 	bl	800462c <__swhatbuf_r>
 80046a0:	9900      	ldr	r1, [sp, #0]
 80046a2:	0007      	movs	r7, r0
 80046a4:	0028      	movs	r0, r5
 80046a6:	f7ff fa35 	bl	8003b14 <_malloc_r>
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d108      	bne.n	80046c0 <__smakebuf_r+0x44>
 80046ae:	220c      	movs	r2, #12
 80046b0:	5ea3      	ldrsh	r3, [r4, r2]
 80046b2:	059a      	lsls	r2, r3, #22
 80046b4:	d4ef      	bmi.n	8004696 <__smakebuf_r+0x1a>
 80046b6:	2203      	movs	r2, #3
 80046b8:	4393      	bics	r3, r2
 80046ba:	431e      	orrs	r6, r3
 80046bc:	81a6      	strh	r6, [r4, #12]
 80046be:	e7e4      	b.n	800468a <__smakebuf_r+0xe>
 80046c0:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <__smakebuf_r+0x84>)
 80046c2:	62ab      	str	r3, [r5, #40]	; 0x28
 80046c4:	2380      	movs	r3, #128	; 0x80
 80046c6:	89a2      	ldrh	r2, [r4, #12]
 80046c8:	6020      	str	r0, [r4, #0]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	81a3      	strh	r3, [r4, #12]
 80046ce:	9b00      	ldr	r3, [sp, #0]
 80046d0:	6120      	str	r0, [r4, #16]
 80046d2:	6163      	str	r3, [r4, #20]
 80046d4:	9b01      	ldr	r3, [sp, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00d      	beq.n	80046f6 <__smakebuf_r+0x7a>
 80046da:	0028      	movs	r0, r5
 80046dc:	230e      	movs	r3, #14
 80046de:	5ee1      	ldrsh	r1, [r4, r3]
 80046e0:	f000 f89c 	bl	800481c <_isatty_r>
 80046e4:	2800      	cmp	r0, #0
 80046e6:	d006      	beq.n	80046f6 <__smakebuf_r+0x7a>
 80046e8:	2203      	movs	r2, #3
 80046ea:	89a3      	ldrh	r3, [r4, #12]
 80046ec:	4393      	bics	r3, r2
 80046ee:	001a      	movs	r2, r3
 80046f0:	2301      	movs	r3, #1
 80046f2:	4313      	orrs	r3, r2
 80046f4:	81a3      	strh	r3, [r4, #12]
 80046f6:	89a0      	ldrh	r0, [r4, #12]
 80046f8:	4307      	orrs	r7, r0
 80046fa:	81a7      	strh	r7, [r4, #12]
 80046fc:	e7cb      	b.n	8004696 <__smakebuf_r+0x1a>
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	0800390d 	.word	0x0800390d

08004704 <memchr>:
 8004704:	b2c9      	uxtb	r1, r1
 8004706:	1882      	adds	r2, r0, r2
 8004708:	4290      	cmp	r0, r2
 800470a:	d101      	bne.n	8004710 <memchr+0xc>
 800470c:	2000      	movs	r0, #0
 800470e:	4770      	bx	lr
 8004710:	7803      	ldrb	r3, [r0, #0]
 8004712:	428b      	cmp	r3, r1
 8004714:	d0fb      	beq.n	800470e <memchr+0xa>
 8004716:	3001      	adds	r0, #1
 8004718:	e7f6      	b.n	8004708 <memchr+0x4>
	...

0800471c <__malloc_lock>:
 800471c:	b510      	push	{r4, lr}
 800471e:	4802      	ldr	r0, [pc, #8]	; (8004728 <__malloc_lock+0xc>)
 8004720:	f7ff f9d3 	bl	8003aca <__retarget_lock_acquire_recursive>
 8004724:	bd10      	pop	{r4, pc}
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	200001a8 	.word	0x200001a8

0800472c <__malloc_unlock>:
 800472c:	b510      	push	{r4, lr}
 800472e:	4802      	ldr	r0, [pc, #8]	; (8004738 <__malloc_unlock+0xc>)
 8004730:	f7ff f9cc 	bl	8003acc <__retarget_lock_release_recursive>
 8004734:	bd10      	pop	{r4, pc}
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	200001a8 	.word	0x200001a8

0800473c <_free_r>:
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	0005      	movs	r5, r0
 8004740:	2900      	cmp	r1, #0
 8004742:	d010      	beq.n	8004766 <_free_r+0x2a>
 8004744:	1f0c      	subs	r4, r1, #4
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	da00      	bge.n	800474e <_free_r+0x12>
 800474c:	18e4      	adds	r4, r4, r3
 800474e:	0028      	movs	r0, r5
 8004750:	f7ff ffe4 	bl	800471c <__malloc_lock>
 8004754:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <_free_r+0x90>)
 8004756:	6813      	ldr	r3, [r2, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d105      	bne.n	8004768 <_free_r+0x2c>
 800475c:	6063      	str	r3, [r4, #4]
 800475e:	6014      	str	r4, [r2, #0]
 8004760:	0028      	movs	r0, r5
 8004762:	f7ff ffe3 	bl	800472c <__malloc_unlock>
 8004766:	bd70      	pop	{r4, r5, r6, pc}
 8004768:	42a3      	cmp	r3, r4
 800476a:	d908      	bls.n	800477e <_free_r+0x42>
 800476c:	6821      	ldr	r1, [r4, #0]
 800476e:	1860      	adds	r0, r4, r1
 8004770:	4283      	cmp	r3, r0
 8004772:	d1f3      	bne.n	800475c <_free_r+0x20>
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	1841      	adds	r1, r0, r1
 800477a:	6021      	str	r1, [r4, #0]
 800477c:	e7ee      	b.n	800475c <_free_r+0x20>
 800477e:	001a      	movs	r2, r3
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <_free_r+0x4e>
 8004786:	42a3      	cmp	r3, r4
 8004788:	d9f9      	bls.n	800477e <_free_r+0x42>
 800478a:	6811      	ldr	r1, [r2, #0]
 800478c:	1850      	adds	r0, r2, r1
 800478e:	42a0      	cmp	r0, r4
 8004790:	d10b      	bne.n	80047aa <_free_r+0x6e>
 8004792:	6820      	ldr	r0, [r4, #0]
 8004794:	1809      	adds	r1, r1, r0
 8004796:	1850      	adds	r0, r2, r1
 8004798:	6011      	str	r1, [r2, #0]
 800479a:	4283      	cmp	r3, r0
 800479c:	d1e0      	bne.n	8004760 <_free_r+0x24>
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	1841      	adds	r1, r0, r1
 80047a4:	6011      	str	r1, [r2, #0]
 80047a6:	6053      	str	r3, [r2, #4]
 80047a8:	e7da      	b.n	8004760 <_free_r+0x24>
 80047aa:	42a0      	cmp	r0, r4
 80047ac:	d902      	bls.n	80047b4 <_free_r+0x78>
 80047ae:	230c      	movs	r3, #12
 80047b0:	602b      	str	r3, [r5, #0]
 80047b2:	e7d5      	b.n	8004760 <_free_r+0x24>
 80047b4:	6821      	ldr	r1, [r4, #0]
 80047b6:	1860      	adds	r0, r4, r1
 80047b8:	4283      	cmp	r3, r0
 80047ba:	d103      	bne.n	80047c4 <_free_r+0x88>
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	1841      	adds	r1, r0, r1
 80047c2:	6021      	str	r1, [r4, #0]
 80047c4:	6063      	str	r3, [r4, #4]
 80047c6:	6054      	str	r4, [r2, #4]
 80047c8:	e7ca      	b.n	8004760 <_free_r+0x24>
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	200001ac 	.word	0x200001ac

080047d0 <_read_r>:
 80047d0:	b570      	push	{r4, r5, r6, lr}
 80047d2:	0004      	movs	r4, r0
 80047d4:	0008      	movs	r0, r1
 80047d6:	0011      	movs	r1, r2
 80047d8:	001a      	movs	r2, r3
 80047da:	2300      	movs	r3, #0
 80047dc:	4d05      	ldr	r5, [pc, #20]	; (80047f4 <_read_r+0x24>)
 80047de:	602b      	str	r3, [r5, #0]
 80047e0:	f7fc fabe 	bl	8000d60 <_read>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d103      	bne.n	80047f0 <_read_r+0x20>
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d000      	beq.n	80047f0 <_read_r+0x20>
 80047ee:	6023      	str	r3, [r4, #0]
 80047f0:	bd70      	pop	{r4, r5, r6, pc}
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	200001b4 	.word	0x200001b4

080047f8 <_fstat_r>:
 80047f8:	2300      	movs	r3, #0
 80047fa:	b570      	push	{r4, r5, r6, lr}
 80047fc:	4d06      	ldr	r5, [pc, #24]	; (8004818 <_fstat_r+0x20>)
 80047fe:	0004      	movs	r4, r0
 8004800:	0008      	movs	r0, r1
 8004802:	0011      	movs	r1, r2
 8004804:	602b      	str	r3, [r5, #0]
 8004806:	f7fc faee 	bl	8000de6 <_fstat>
 800480a:	1c43      	adds	r3, r0, #1
 800480c:	d103      	bne.n	8004816 <_fstat_r+0x1e>
 800480e:	682b      	ldr	r3, [r5, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d000      	beq.n	8004816 <_fstat_r+0x1e>
 8004814:	6023      	str	r3, [r4, #0]
 8004816:	bd70      	pop	{r4, r5, r6, pc}
 8004818:	200001b4 	.word	0x200001b4

0800481c <_isatty_r>:
 800481c:	2300      	movs	r3, #0
 800481e:	b570      	push	{r4, r5, r6, lr}
 8004820:	4d06      	ldr	r5, [pc, #24]	; (800483c <_isatty_r+0x20>)
 8004822:	0004      	movs	r4, r0
 8004824:	0008      	movs	r0, r1
 8004826:	602b      	str	r3, [r5, #0]
 8004828:	f7fc faeb 	bl	8000e02 <_isatty>
 800482c:	1c43      	adds	r3, r0, #1
 800482e:	d103      	bne.n	8004838 <_isatty_r+0x1c>
 8004830:	682b      	ldr	r3, [r5, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d000      	beq.n	8004838 <_isatty_r+0x1c>
 8004836:	6023      	str	r3, [r4, #0]
 8004838:	bd70      	pop	{r4, r5, r6, pc}
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	200001b4 	.word	0x200001b4

08004840 <_init>:
 8004840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004846:	bc08      	pop	{r3}
 8004848:	469e      	mov	lr, r3
 800484a:	4770      	bx	lr

0800484c <_fini>:
 800484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004852:	bc08      	pop	{r3}
 8004854:	469e      	mov	lr, r3
 8004856:	4770      	bx	lr
