
sinking-clock_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005234  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080052f0  080052f0  000152f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005438  08005438  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08005438  08005438  00015438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005440  08005440  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005440  08005440  00015440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005444  08005444  00015444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000080  080054c8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080054c8  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ba1  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a1  00000000  00000000  00030c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00032ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00033de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bc3  00000000  00000000  00034ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001146b  00000000  00000000  0004c6ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093717  00000000  00000000  0005db16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f122d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a3c  00000000  00000000  000f1280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000080 	.word	0x20000080
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080052d8 	.word	0x080052d8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000084 	.word	0x20000084
 8000100:	080052d8 	.word	0x080052d8

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	469b      	mov	fp, r3
 80002a6:	d433      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a8:	465a      	mov	r2, fp
 80002aa:	4653      	mov	r3, sl
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83a      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e078      	b.n	80003b4 <__udivmoddi4+0x144>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e075      	b.n	80003ba <__udivmoddi4+0x14a>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e028      	b.n	800033a <__udivmoddi4+0xca>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	2320      	movs	r3, #32
 8000314:	1a9b      	subs	r3, r3, r2
 8000316:	4652      	mov	r2, sl
 8000318:	40da      	lsrs	r2, r3
 800031a:	4641      	mov	r1, r8
 800031c:	0013      	movs	r3, r2
 800031e:	464a      	mov	r2, r9
 8000320:	408a      	lsls	r2, r1
 8000322:	0017      	movs	r7, r2
 8000324:	4642      	mov	r2, r8
 8000326:	431f      	orrs	r7, r3
 8000328:	4653      	mov	r3, sl
 800032a:	4093      	lsls	r3, r2
 800032c:	001e      	movs	r6, r3
 800032e:	42af      	cmp	r7, r5
 8000330:	d9c4      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0d9      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000340:	07fb      	lsls	r3, r7, #31
 8000342:	0872      	lsrs	r2, r6, #1
 8000344:	431a      	orrs	r2, r3
 8000346:	4646      	mov	r6, r8
 8000348:	087b      	lsrs	r3, r7, #1
 800034a:	e00e      	b.n	800036a <__udivmoddi4+0xfa>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d101      	bne.n	8000354 <__udivmoddi4+0xe4>
 8000350:	42a2      	cmp	r2, r4
 8000352:	d80c      	bhi.n	800036e <__udivmoddi4+0xfe>
 8000354:	1aa4      	subs	r4, r4, r2
 8000356:	419d      	sbcs	r5, r3
 8000358:	2001      	movs	r0, #1
 800035a:	1924      	adds	r4, r4, r4
 800035c:	416d      	adcs	r5, r5
 800035e:	2100      	movs	r1, #0
 8000360:	3e01      	subs	r6, #1
 8000362:	1824      	adds	r4, r4, r0
 8000364:	414d      	adcs	r5, r1
 8000366:	2e00      	cmp	r6, #0
 8000368:	d006      	beq.n	8000378 <__udivmoddi4+0x108>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d9ee      	bls.n	800034c <__udivmoddi4+0xdc>
 800036e:	3e01      	subs	r6, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2e00      	cmp	r6, #0
 8000376:	d1f8      	bne.n	800036a <__udivmoddi4+0xfa>
 8000378:	9800      	ldr	r0, [sp, #0]
 800037a:	9901      	ldr	r1, [sp, #4]
 800037c:	465b      	mov	r3, fp
 800037e:	1900      	adds	r0, r0, r4
 8000380:	4169      	adcs	r1, r5
 8000382:	2b00      	cmp	r3, #0
 8000384:	db24      	blt.n	80003d0 <__udivmoddi4+0x160>
 8000386:	002b      	movs	r3, r5
 8000388:	465a      	mov	r2, fp
 800038a:	4644      	mov	r4, r8
 800038c:	40d3      	lsrs	r3, r2
 800038e:	002a      	movs	r2, r5
 8000390:	40e2      	lsrs	r2, r4
 8000392:	001c      	movs	r4, r3
 8000394:	465b      	mov	r3, fp
 8000396:	0015      	movs	r5, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	db2a      	blt.n	80003f2 <__udivmoddi4+0x182>
 800039c:	0026      	movs	r6, r4
 800039e:	409e      	lsls	r6, r3
 80003a0:	0033      	movs	r3, r6
 80003a2:	0026      	movs	r6, r4
 80003a4:	4647      	mov	r7, r8
 80003a6:	40be      	lsls	r6, r7
 80003a8:	0032      	movs	r2, r6
 80003aa:	1a80      	subs	r0, r0, r2
 80003ac:	4199      	sbcs	r1, r3
 80003ae:	9000      	str	r0, [sp, #0]
 80003b0:	9101      	str	r1, [sp, #4]
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b4:	42a3      	cmp	r3, r4
 80003b6:	d8bc      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80003b8:	e783      	b.n	80002c2 <__udivmoddi4+0x52>
 80003ba:	4642      	mov	r2, r8
 80003bc:	2320      	movs	r3, #32
 80003be:	2100      	movs	r1, #0
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	2200      	movs	r2, #0
 80003c4:	9100      	str	r1, [sp, #0]
 80003c6:	9201      	str	r2, [sp, #4]
 80003c8:	2201      	movs	r2, #1
 80003ca:	40da      	lsrs	r2, r3
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	e786      	b.n	80002de <__udivmoddi4+0x6e>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	1a9b      	subs	r3, r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	4646      	mov	r6, r8
 80003da:	409a      	lsls	r2, r3
 80003dc:	0023      	movs	r3, r4
 80003de:	40f3      	lsrs	r3, r6
 80003e0:	4644      	mov	r4, r8
 80003e2:	4313      	orrs	r3, r2
 80003e4:	002a      	movs	r2, r5
 80003e6:	40e2      	lsrs	r2, r4
 80003e8:	001c      	movs	r4, r3
 80003ea:	465b      	mov	r3, fp
 80003ec:	0015      	movs	r5, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dad4      	bge.n	800039c <__udivmoddi4+0x12c>
 80003f2:	4642      	mov	r2, r8
 80003f4:	002f      	movs	r7, r5
 80003f6:	2320      	movs	r3, #32
 80003f8:	0026      	movs	r6, r4
 80003fa:	4097      	lsls	r7, r2
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	40de      	lsrs	r6, r3
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7cd      	b.n	80003a2 <__udivmoddi4+0x132>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000464:	2301      	movs	r3, #1
 8000466:	425b      	negs	r3, r3
 8000468:	1d39      	adds	r1, r7, #4
 800046a:	4804      	ldr	r0, [pc, #16]	; (800047c <__io_putchar+0x20>)
 800046c:	2201      	movs	r2, #1
 800046e:	f003 f9ed 	bl	800384c <HAL_UART_Transmit>
  return ch;
 8000472:	687b      	ldr	r3, [r7, #4]
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}
 800047c:	2000011c 	.word	0x2000011c

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000484:	f000 fdbc 	bl	8001000 <HAL_Init>

  /* USER CODE BEGIN Init */

  sevSeg_I2C1_Init();			//Initialize 7-segment display to test mode
 8000488:	f000 fb16 	bl	8000ab8 <sevSeg_I2C1_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048c:	f000 f809 	bl	80004a2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000490:	f000 f974 	bl	800077c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000494:	f000 f93e 	bl	8000714 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000498:	f000 f890 	bl	80005bc <MX_RTC_Init>
  MX_I2C1_Init();
 800049c:	f000 f84e 	bl	800053c <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <main+0x20>

080004a2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a2:	b590      	push	{r4, r7, lr}
 80004a4:	b093      	sub	sp, #76	; 0x4c
 80004a6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a8:	2410      	movs	r4, #16
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	0018      	movs	r0, r3
 80004ae:	2338      	movs	r3, #56	; 0x38
 80004b0:	001a      	movs	r2, r3
 80004b2:	2100      	movs	r1, #0
 80004b4:	f003 fed2 	bl	800425c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b8:	003b      	movs	r3, r7
 80004ba:	0018      	movs	r0, r3
 80004bc:	2310      	movs	r3, #16
 80004be:	001a      	movs	r2, r3
 80004c0:	2100      	movs	r1, #0
 80004c2:	f003 fecb 	bl	800425c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004c6:	2380      	movs	r3, #128	; 0x80
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 fd18 	bl	8001f00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	220a      	movs	r2, #10
 80004d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2280      	movs	r2, #128	; 0x80
 80004da:	0052      	lsls	r2, r2, #1
 80004dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004de:	0021      	movs	r1, r4
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	2240      	movs	r2, #64	; 0x40
 80004ea:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	2201      	movs	r2, #1
 80004f0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2200      	movs	r2, #0
 80004f6:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	0018      	movs	r0, r3
 80004fc:	f001 fd4c 	bl	8001f98 <HAL_RCC_OscConfig>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d001      	beq.n	8000508 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000504:	f000 fb48 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000508:	003b      	movs	r3, r7
 800050a:	2207      	movs	r2, #7
 800050c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800050e:	003b      	movs	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000514:	003b      	movs	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800051a:	003b      	movs	r3, r7
 800051c:	2200      	movs	r2, #0
 800051e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000520:	003b      	movs	r3, r7
 8000522:	2100      	movs	r1, #0
 8000524:	0018      	movs	r0, r3
 8000526:	f002 f851 	bl	80025cc <HAL_RCC_ClockConfig>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800052e:	f000 fb33 	bl	8000b98 <Error_Handler>
  }
}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b013      	add	sp, #76	; 0x4c
 8000538:	bd90      	pop	{r4, r7, pc}
	...

0800053c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000542:	4a1c      	ldr	r2, [pc, #112]	; (80005b4 <MX_I2C1_Init+0x78>)
 8000544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000548:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <MX_I2C1_Init+0x7c>)
 800054a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <MX_I2C1_Init+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000554:	2201      	movs	r2, #1
 8000556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <MX_I2C1_Init+0x74>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_I2C1_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000578:	0018      	movs	r0, r3
 800057a:	f001 f875 	bl	8001668 <HAL_I2C_Init>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000582:	f000 fb09 	bl	8000b98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000588:	2100      	movs	r1, #0
 800058a:	0018      	movs	r0, r3
 800058c:	f001 fc20 	bl	8001dd0 <HAL_I2CEx_ConfigAnalogFilter>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000594:	f000 fb00 	bl	8000b98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <MX_I2C1_Init+0x74>)
 800059a:	2100      	movs	r1, #0
 800059c:	0018      	movs	r0, r3
 800059e:	f001 fc63 	bl	8001e68 <HAL_I2CEx_ConfigDigitalFilter>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005a6:	f000 faf7 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	2000009c 	.word	0x2000009c
 80005b4:	40005400 	.word	0x40005400
 80005b8:	0010061a 	.word	0x0010061a

080005bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b090      	sub	sp, #64	; 0x40
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005c2:	232c      	movs	r3, #44	; 0x2c
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	0018      	movs	r0, r3
 80005c8:	2314      	movs	r3, #20
 80005ca:	001a      	movs	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	f003 fe45 	bl	800425c <memset>
  RTC_DateTypeDef sDate = {0};
 80005d2:	2328      	movs	r3, #40	; 0x28
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80005da:	003b      	movs	r3, r7
 80005dc:	0018      	movs	r0, r3
 80005de:	2328      	movs	r3, #40	; 0x28
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f003 fe3a 	bl	800425c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005e8:	4b47      	ldr	r3, [pc, #284]	; (8000708 <MX_RTC_Init+0x14c>)
 80005ea:	4a48      	ldr	r2, [pc, #288]	; (800070c <MX_RTC_Init+0x150>)
 80005ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80005ee:	4b46      	ldr	r3, [pc, #280]	; (8000708 <MX_RTC_Init+0x14c>)
 80005f0:	2240      	movs	r2, #64	; 0x40
 80005f2:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80005f4:	4b44      	ldr	r3, [pc, #272]	; (8000708 <MX_RTC_Init+0x14c>)
 80005f6:	227f      	movs	r2, #127	; 0x7f
 80005f8:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80005fa:	4b43      	ldr	r3, [pc, #268]	; (8000708 <MX_RTC_Init+0x14c>)
 80005fc:	22ff      	movs	r2, #255	; 0xff
 80005fe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000600:	4b41      	ldr	r3, [pc, #260]	; (8000708 <MX_RTC_Init+0x14c>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000606:	4b40      	ldr	r3, [pc, #256]	; (8000708 <MX_RTC_Init+0x14c>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800060c:	4b3e      	ldr	r3, [pc, #248]	; (8000708 <MX_RTC_Init+0x14c>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000612:	4b3d      	ldr	r3, [pc, #244]	; (8000708 <MX_RTC_Init+0x14c>)
 8000614:	2280      	movs	r2, #128	; 0x80
 8000616:	05d2      	lsls	r2, r2, #23
 8000618:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800061a:	4b3b      	ldr	r3, [pc, #236]	; (8000708 <MX_RTC_Init+0x14c>)
 800061c:	2200      	movs	r2, #0
 800061e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000620:	4b39      	ldr	r3, [pc, #228]	; (8000708 <MX_RTC_Init+0x14c>)
 8000622:	0018      	movs	r0, r3
 8000624:	f002 faf6 	bl	8002c14 <HAL_RTC_Init>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 800062c:	f000 fab4 	bl	8000b98 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000630:	212c      	movs	r1, #44	; 0x2c
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2201      	movs	r2, #1
 8000636:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800065c:	1879      	adds	r1, r7, r1
 800065e:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <MX_RTC_Init+0x14c>)
 8000660:	2201      	movs	r2, #1
 8000662:	0018      	movs	r0, r3
 8000664:	f002 fb78 	bl	8002d58 <HAL_RTC_SetTime>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 800066c:	f000 fa94 	bl	8000b98 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000670:	2128      	movs	r1, #40	; 0x28
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2201      	movs	r2, #1
 8000676:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2201      	movs	r2, #1
 800067c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2201      	movs	r2, #1
 8000682:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2200      	movs	r2, #0
 8000688:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800068a:	1879      	adds	r1, r7, r1
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <MX_RTC_Init+0x14c>)
 800068e:	2201      	movs	r2, #1
 8000690:	0018      	movs	r0, r3
 8000692:	f002 fc65 	bl	8002f60 <HAL_RTC_SetDate>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 800069a:	f000 fa7d 	bl	8000b98 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 800069e:	003b      	movs	r3, r7
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80006a4:	003b      	movs	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 80006aa:	003b      	movs	r3, r7
 80006ac:	2201      	movs	r2, #1
 80006ae:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80006b0:	003b      	movs	r3, r7
 80006b2:	2200      	movs	r2, #0
 80006b4:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80006b6:	003b      	movs	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006bc:	003b      	movs	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006c2:	003b      	movs	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80006c8:	003b      	movs	r3, r7
 80006ca:	4a11      	ldr	r2, [pc, #68]	; (8000710 <MX_RTC_Init+0x154>)
 80006cc:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80006ce:	003b      	movs	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80006d4:	003b      	movs	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80006da:	003b      	movs	r3, r7
 80006dc:	2220      	movs	r2, #32
 80006de:	2101      	movs	r1, #1
 80006e0:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80006e2:	003b      	movs	r3, r7
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	0052      	lsls	r2, r2, #1
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80006ea:	0039      	movs	r1, r7
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_RTC_Init+0x14c>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	0018      	movs	r0, r3
 80006f2:	f002 fd15 	bl	8003120 <HAL_RTC_SetAlarm_IT>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <MX_RTC_Init+0x142>
  {
    Error_Handler();
 80006fa:	f000 fa4d 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b010      	add	sp, #64	; 0x40
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	200000f0 	.word	0x200000f0
 800070c:	40002800 	.word	0x40002800
 8000710:	80808000 	.word	0x80808000

08000714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_USART2_UART_Init+0x60>)
 800071a:	4a17      	ldr	r2, [pc, #92]	; (8000778 <MX_USART2_UART_Init+0x64>)
 800071c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000720:	22e1      	movs	r2, #225	; 0xe1
 8000722:	0252      	lsls	r2, r2, #9
 8000724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	0152      	lsls	r2, r2, #5
 800072c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART2_UART_Init+0x60>)
 800073c:	220c      	movs	r2, #12
 800073e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART2_UART_Init+0x60>)
 800074e:	2200      	movs	r2, #0
 8000750:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000754:	2200      	movs	r2, #0
 8000756:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART2_UART_Init+0x60>)
 800075a:	2200      	movs	r2, #0
 800075c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <MX_USART2_UART_Init+0x60>)
 8000760:	0018      	movs	r0, r3
 8000762:	f003 f81d 	bl	80037a0 <HAL_UART_Init>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800076a:	f000 fa15 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000011c 	.word	0x2000011c
 8000778:	40004400 	.word	0x40004400

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b08b      	sub	sp, #44	; 0x2c
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	2414      	movs	r4, #20
 8000784:	193b      	adds	r3, r7, r4
 8000786:	0018      	movs	r0, r3
 8000788:	2314      	movs	r3, #20
 800078a:	001a      	movs	r2, r3
 800078c:	2100      	movs	r1, #0
 800078e:	f003 fd65 	bl	800425c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b72      	ldr	r3, [pc, #456]	; (800095c <MX_GPIO_Init+0x1e0>)
 8000794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000796:	4b71      	ldr	r3, [pc, #452]	; (800095c <MX_GPIO_Init+0x1e0>)
 8000798:	2102      	movs	r1, #2
 800079a:	430a      	orrs	r2, r1
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
 800079e:	4b6f      	ldr	r3, [pc, #444]	; (800095c <MX_GPIO_Init+0x1e0>)
 80007a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007a2:	2202      	movs	r2, #2
 80007a4:	4013      	ands	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b6c      	ldr	r3, [pc, #432]	; (800095c <MX_GPIO_Init+0x1e0>)
 80007ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ae:	4b6b      	ldr	r3, [pc, #428]	; (800095c <MX_GPIO_Init+0x1e0>)
 80007b0:	2104      	movs	r1, #4
 80007b2:	430a      	orrs	r2, r1
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
 80007b6:	4b69      	ldr	r3, [pc, #420]	; (800095c <MX_GPIO_Init+0x1e0>)
 80007b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ba:	2204      	movs	r2, #4
 80007bc:	4013      	ands	r3, r2
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007c2:	4b66      	ldr	r3, [pc, #408]	; (800095c <MX_GPIO_Init+0x1e0>)
 80007c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c6:	4b65      	ldr	r3, [pc, #404]	; (800095c <MX_GPIO_Init+0x1e0>)
 80007c8:	2120      	movs	r1, #32
 80007ca:	430a      	orrs	r2, r1
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
 80007ce:	4b63      	ldr	r3, [pc, #396]	; (800095c <MX_GPIO_Init+0x1e0>)
 80007d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d2:	2220      	movs	r2, #32
 80007d4:	4013      	ands	r3, r2
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b60      	ldr	r3, [pc, #384]	; (800095c <MX_GPIO_Init+0x1e0>)
 80007dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007de:	4b5f      	ldr	r3, [pc, #380]	; (800095c <MX_GPIO_Init+0x1e0>)
 80007e0:	2101      	movs	r1, #1
 80007e2:	430a      	orrs	r2, r1
 80007e4:	635a      	str	r2, [r3, #52]	; 0x34
 80007e6:	4b5d      	ldr	r3, [pc, #372]	; (800095c <MX_GPIO_Init+0x1e0>)
 80007e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ea:	2201      	movs	r2, #1
 80007ec:	4013      	ands	r3, r2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RTC_Interrupt_LED_Pin|Minute_Set_LED_Pin|Hour_Set_LED_Pin, GPIO_PIN_RESET);
 80007f2:	23c8      	movs	r3, #200	; 0xc8
 80007f4:	00d9      	lsls	r1, r3, #3
 80007f6:	23a0      	movs	r3, #160	; 0xa0
 80007f8:	05db      	lsls	r3, r3, #23
 80007fa:	2200      	movs	r2, #0
 80007fc:	0018      	movs	r0, r3
 80007fe:	f000 fec7 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Snooze_LED_Pin|Alarm_Set_LED_Pin|Alarm_Enable_LED_Pin|Display_LED_Pin, GPIO_PIN_RESET);
 8000802:	4b57      	ldr	r3, [pc, #348]	; (8000960 <MX_GPIO_Init+0x1e4>)
 8000804:	2200      	movs	r2, #0
 8000806:	21c3      	movs	r1, #195	; 0xc3
 8000808:	0018      	movs	r0, r3
 800080a:	f000 fec1 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800080e:	4b55      	ldr	r3, [pc, #340]	; (8000964 <MX_GPIO_Init+0x1e8>)
 8000810:	2200      	movs	r2, #0
 8000812:	2140      	movs	r1, #64	; 0x40
 8000814:	0018      	movs	r0, r3
 8000816:	f000 febb 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 800081a:	193b      	adds	r3, r7, r4
 800081c:	2204      	movs	r2, #4
 800081e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000820:	193b      	adds	r3, r7, r4
 8000822:	2288      	movs	r2, #136	; 0x88
 8000824:	0352      	lsls	r2, r2, #13
 8000826:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	193b      	adds	r3, r7, r4
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 800082e:	193b      	adds	r3, r7, r4
 8000830:	4a4d      	ldr	r2, [pc, #308]	; (8000968 <MX_GPIO_Init+0x1ec>)
 8000832:	0019      	movs	r1, r3
 8000834:	0010      	movs	r0, r2
 8000836:	f000 fd47 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_Button_Pin Alarm_Enable_Button_Pin Alarm_Set_Button_Pin Hour_Set_Button_Pin
                           Snooze_Button_Pin Minute_Set_Button_Pin */
  GPIO_InitStruct.Pin = Display_Button_Pin|Alarm_Enable_Button_Pin|Alarm_Set_Button_Pin|Hour_Set_Button_Pin
 800083a:	193b      	adds	r3, r7, r4
 800083c:	4a4b      	ldr	r2, [pc, #300]	; (800096c <MX_GPIO_Init+0x1f0>)
 800083e:	601a      	str	r2, [r3, #0]
                          |Snooze_Button_Pin|Minute_Set_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2284      	movs	r2, #132	; 0x84
 8000844:	0392      	lsls	r2, r2, #14
 8000846:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2201      	movs	r2, #1
 800084c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	193a      	adds	r2, r7, r4
 8000850:	23a0      	movs	r3, #160	; 0xa0
 8000852:	05db      	lsls	r3, r3, #23
 8000854:	0011      	movs	r1, r2
 8000856:	0018      	movs	r0, r3
 8000858:	f000 fd36 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTC_Interrupt_LED_Pin Minute_Set_LED_Pin Hour_Set_LED_Pin */
  GPIO_InitStruct.Pin = RTC_Interrupt_LED_Pin|Minute_Set_LED_Pin|Hour_Set_LED_Pin;
 800085c:	0021      	movs	r1, r4
 800085e:	187b      	adds	r3, r7, r1
 8000860:	22c8      	movs	r2, #200	; 0xc8
 8000862:	00d2      	lsls	r2, r2, #3
 8000864:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	000c      	movs	r4, r1
 8000868:	193b      	adds	r3, r7, r4
 800086a:	2201      	movs	r2, #1
 800086c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	193b      	adds	r3, r7, r4
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	193a      	adds	r2, r7, r4
 800087c:	23a0      	movs	r3, #160	; 0xa0
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	0011      	movs	r1, r2
 8000882:	0018      	movs	r0, r3
 8000884:	f000 fd20 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Snooze_LED_Pin Alarm_Set_LED_Pin Alarm_Enable_LED_Pin Display_LED_Pin */
  GPIO_InitStruct.Pin = Snooze_LED_Pin|Alarm_Set_LED_Pin|Alarm_Enable_LED_Pin|Display_LED_Pin;
 8000888:	193b      	adds	r3, r7, r4
 800088a:	22c3      	movs	r2, #195	; 0xc3
 800088c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2201      	movs	r2, #1
 8000892:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	4a2f      	ldr	r2, [pc, #188]	; (8000960 <MX_GPIO_Init+0x1e4>)
 80008a4:	0019      	movs	r1, r3
 80008a6:	0010      	movs	r0, r2
 80008a8:	f000 fd0e 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80008ac:	0021      	movs	r1, r4
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2240      	movs	r2, #64	; 0x40
 80008b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2201      	movs	r2, #1
 80008b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	4a26      	ldr	r2, [pc, #152]	; (8000964 <MX_GPIO_Init+0x1e8>)
 80008ca:	0019      	movs	r1, r3
 80008cc:	0010      	movs	r0, r2
 80008ce:	f000 fcfb 	bl	80012c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	2005      	movs	r0, #5
 80008d8:	f000 fcc4 	bl	8001264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80008dc:	2005      	movs	r0, #5
 80008de:	f000 fcd6 	bl	800128e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	2006      	movs	r0, #6
 80008e8:	f000 fcbc 	bl	8001264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80008ec:	2006      	movs	r0, #6
 80008ee:	f000 fcce 	bl	800128e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	2007      	movs	r0, #7
 80008f8:	f000 fcb4 	bl	8001264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80008fc:	2007      	movs	r0, #7
 80008fe:	f000 fcc6 	bl	800128e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  // Initialize all output pins to low
	HAL_GPIO_WritePin(GPIOB, displayLEDPin, 0);
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_GPIO_Init+0x1e4>)
 8000906:	2200      	movs	r2, #0
 8000908:	0018      	movs	r0, r3
 800090a:	f000 fe41 	bl	8001590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, alarmEnableLEDPin, 0);
 800090e:	2140      	movs	r1, #64	; 0x40
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_GPIO_Init+0x1e4>)
 8000912:	2200      	movs	r2, #0
 8000914:	0018      	movs	r0, r3
 8000916:	f000 fe3b 	bl	8001590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, alarmSetLEDPin, 0);
 800091a:	2102      	movs	r1, #2
 800091c:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_GPIO_Init+0x1e4>)
 800091e:	2200      	movs	r2, #0
 8000920:	0018      	movs	r0, r3
 8000922:	f000 fe35 	bl	8001590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, hourSetLEDPin, 0);
 8000926:	2380      	movs	r3, #128	; 0x80
 8000928:	00d9      	lsls	r1, r3, #3
 800092a:	23a0      	movs	r3, #160	; 0xa0
 800092c:	05db      	lsls	r3, r3, #23
 800092e:	2200      	movs	r2, #0
 8000930:	0018      	movs	r0, r3
 8000932:	f000 fe2d 	bl	8001590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, minuteSetLEDPin, 0);
 8000936:	2380      	movs	r3, #128	; 0x80
 8000938:	0099      	lsls	r1, r3, #2
 800093a:	23a0      	movs	r3, #160	; 0xa0
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	2200      	movs	r2, #0
 8000940:	0018      	movs	r0, r3
 8000942:	f000 fe25 	bl	8001590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, snoozeButtonLEDPin, 0);
 8000946:	2101      	movs	r1, #1
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <MX_GPIO_Init+0x1e4>)
 800094a:	2200      	movs	r2, #0
 800094c:	0018      	movs	r0, r3
 800094e:	f000 fe1f 	bl	8001590 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b00b      	add	sp, #44	; 0x2c
 8000958:	bd90      	pop	{r4, r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	40021000 	.word	0x40021000
 8000960:	50000400 	.word	0x50000400
 8000964:	50000800 	.word	0x50000800
 8000968:	50001400 	.word	0x50001400
 800096c:	00001833 	.word	0x00001833

08000970 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	0002      	movs	r2, r0
 8000978:	1dbb      	adds	r3, r7, #6
 800097a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == displayButtonPin) {
 800097c:	2201      	movs	r2, #1
 800097e:	1dbb      	adds	r3, r7, #6
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	4293      	cmp	r3, r2
 8000984:	d106      	bne.n	8000994 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		HAL_GPIO_TogglePin(GPIOB, displayLEDPin);
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 800098a:	0011      	movs	r1, r2
 800098c:	0018      	movs	r0, r3
 800098e:	f000 fe1c 	bl	80015ca <HAL_GPIO_TogglePin>
//    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
//    printf("ISR Entered\n");
//  } else {
//      __NOP();
//  }
}
 8000992:	e042      	b.n	8000a1a <HAL_GPIO_EXTI_Falling_Callback+0xaa>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8000994:	2202      	movs	r2, #2
 8000996:	1dbb      	adds	r3, r7, #6
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	4293      	cmp	r3, r2
 800099c:	d106      	bne.n	80009ac <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		HAL_GPIO_TogglePin(GPIOB, alarmEnableLEDPin);
 800099e:	2240      	movs	r2, #64	; 0x40
 80009a0:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 80009a2:	0011      	movs	r1, r2
 80009a4:	0018      	movs	r0, r3
 80009a6:	f000 fe10 	bl	80015ca <HAL_GPIO_TogglePin>
}
 80009aa:	e036      	b.n	8000a1a <HAL_GPIO_EXTI_Falling_Callback+0xaa>
	else if(GPIO_Pin == alarmSetButtonPin) {
 80009ac:	2210      	movs	r2, #16
 80009ae:	1dbb      	adds	r3, r7, #6
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d106      	bne.n	80009c4 <HAL_GPIO_EXTI_Falling_Callback+0x54>
		HAL_GPIO_TogglePin(GPIOB, alarmSetLEDPin);
 80009b6:	2202      	movs	r2, #2
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 80009ba:	0011      	movs	r1, r2
 80009bc:	0018      	movs	r0, r3
 80009be:	f000 fe04 	bl	80015ca <HAL_GPIO_TogglePin>
}
 80009c2:	e02a      	b.n	8000a1a <HAL_GPIO_EXTI_Falling_Callback+0xaa>
	else if(GPIO_Pin == hourSetButtonPin) {
 80009c4:	2220      	movs	r2, #32
 80009c6:	1dbb      	adds	r3, r7, #6
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d108      	bne.n	80009e0 <HAL_GPIO_EXTI_Falling_Callback+0x70>
		HAL_GPIO_TogglePin(GPIOA, hourSetLEDPin);
 80009ce:	2380      	movs	r3, #128	; 0x80
 80009d0:	00da      	lsls	r2, r3, #3
 80009d2:	23a0      	movs	r3, #160	; 0xa0
 80009d4:	05db      	lsls	r3, r3, #23
 80009d6:	0011      	movs	r1, r2
 80009d8:	0018      	movs	r0, r3
 80009da:	f000 fdf6 	bl	80015ca <HAL_GPIO_TogglePin>
}
 80009de:	e01c      	b.n	8000a1a <HAL_GPIO_EXTI_Falling_Callback+0xaa>
	else if(GPIO_Pin == minuteSetButtonPin) {
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	015b      	lsls	r3, r3, #5
 80009e4:	1dba      	adds	r2, r7, #6
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d108      	bne.n	80009fe <HAL_GPIO_EXTI_Falling_Callback+0x8e>
		HAL_GPIO_TogglePin(GPIOA, minuteSetLEDPin);
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	009a      	lsls	r2, r3, #2
 80009f0:	23a0      	movs	r3, #160	; 0xa0
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fde7 	bl	80015ca <HAL_GPIO_TogglePin>
}
 80009fc:	e00d      	b.n	8000a1a <HAL_GPIO_EXTI_Falling_Callback+0xaa>
	else if(GPIO_Pin == snoozeButtonPin) {
 80009fe:	2380      	movs	r3, #128	; 0x80
 8000a00:	011b      	lsls	r3, r3, #4
 8000a02:	1dba      	adds	r2, r7, #6
 8000a04:	8812      	ldrh	r2, [r2, #0]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d106      	bne.n	8000a18 <HAL_GPIO_EXTI_Falling_Callback+0xa8>
		HAL_GPIO_TogglePin(GPIOB, snoozeButtonLEDPin);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 8000a0e:	0011      	movs	r1, r2
 8000a10:	0018      	movs	r0, r3
 8000a12:	f000 fdda 	bl	80015ca <HAL_GPIO_TogglePin>
}
 8000a16:	e000      	b.n	8000a1a <HAL_GPIO_EXTI_Falling_Callback+0xaa>
		__NOP();
 8000a18:	46c0      	nop			; (mov r8, r8)
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b002      	add	sp, #8
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	50000400 	.word	0x50000400

08000a28 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b093      	sub	sp, #76	; 0x4c
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	005a      	lsls	r2, r3, #1
 8000a34:	2420      	movs	r4, #32
 8000a36:	1939      	adds	r1, r7, r4
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f002 fcb0 	bl	80033a0 <HAL_RTC_GetAlarm>

  printf("Enter alarm interrupt");
 8000a40:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f003 fc12 	bl	800426c <iprintf>
  printf("\n");
 8000a48:	200a      	movs	r0, #10
 8000a4a:	f003 fc29 	bl	80042a0 <putchar>

  RTC_TimeTypeDef currTime;
  RTC_DateTypeDef currDate;
  HAL_RTC_GetTime(hrtc, &currTime, RTC_FORMAT_BIN);
 8000a4e:	230c      	movs	r3, #12
 8000a50:	18f9      	adds	r1, r7, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	0018      	movs	r0, r3
 8000a58:	f002 fa26 	bl	8002ea8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(hrtc, &currDate, RTC_FORMAT_BIN);
 8000a5c:	2308      	movs	r3, #8
 8000a5e:	18f9      	adds	r1, r7, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	0018      	movs	r0, r3
 8000a66:	f002 fb0d 	bl	8003084 <HAL_RTC_GetDate>

  if(sAlarm.AlarmTime.Seconds>58) {
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	789b      	ldrb	r3, [r3, #2]
 8000a6e:	2b3a      	cmp	r3, #58	; 0x3a
 8000a70:	d903      	bls.n	8000a7a <HAL_RTC_AlarmAEventCallback+0x52>
    sAlarm.AlarmTime.Seconds=0;
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2200      	movs	r2, #0
 8000a76:	709a      	strb	r2, [r3, #2]
 8000a78:	e006      	b.n	8000a88 <HAL_RTC_AlarmAEventCallback+0x60>
  } else {
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	789b      	ldrb	r3, [r3, #2]
 8000a80:	3301      	adds	r3, #1
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	2320      	movs	r3, #32
 8000a8c:	18f9      	adds	r1, r7, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2200      	movs	r2, #0
 8000a92:	0018      	movs	r0, r3
 8000a94:	f002 fb44 	bl	8003120 <HAL_RTC_SetAlarm_IT>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d1f6      	bne.n	8000a8a <HAL_RTC_AlarmAEventCallback+0x62>
    HAL_GPIO_TogglePin(GPIOA, RTCInterruptLEDPin);
 8000a9c:	2240      	movs	r2, #64	; 0x40
 8000a9e:	23a0      	movs	r3, #160	; 0xa0
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f000 fd90 	bl	80015ca <HAL_GPIO_TogglePin>
}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b013      	add	sp, #76	; 0x4c
 8000ab0:	bd90      	pop	{r4, r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	080052f0 	.word	0x080052f0

08000ab8 <sevSeg_I2C1_Init>:

static void sevSeg_I2C1_Init(void) {
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af02      	add	r7, sp, #8
	 */

	HAL_StatusTypeDef HalRet;

	//Set display to decode hex data inputs
	HalRet = HAL_I2C_Master_Transmit(&hi2c1, (sevSeg_addr << 1), sevSeg_decodeBuffer, 2, HAL_MAX_DELAY);
 8000abe:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <sevSeg_I2C1_Init+0xc4>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	18db      	adds	r3, r3, r3
 8000ac6:	b299      	uxth	r1, r3
 8000ac8:	1dfc      	adds	r4, r7, #7
 8000aca:	4a2d      	ldr	r2, [pc, #180]	; (8000b80 <sevSeg_I2C1_Init+0xc8>)
 8000acc:	482d      	ldr	r0, [pc, #180]	; (8000b84 <sevSeg_I2C1_Init+0xcc>)
 8000ace:	2301      	movs	r3, #1
 8000ad0:	425b      	negs	r3, r3
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	f000 fe5d 	bl	8001794 <HAL_I2C_Master_Transmit>
 8000ada:	0003      	movs	r3, r0
 8000adc:	7023      	strb	r3, [r4, #0]

	if(HalRet != HAL_OK) {		//check HAL
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d004      	beq.n	8000af0 <sevSeg_I2C1_Init+0x38>
		printf("HAL Not OK :( \n\r");
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <sevSeg_I2C1_Init+0xd0>)
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f003 fbbf 	bl	800426c <iprintf>
 8000aee:	e003      	b.n	8000af8 <sevSeg_I2C1_Init+0x40>
	} else{
		printf("HAL OK :)");
 8000af0:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <sevSeg_I2C1_Init+0xd4>)
 8000af2:	0018      	movs	r0, r3
 8000af4:	f003 fbba 	bl	800426c <iprintf>
	}

	//Disable shutdown mode
	HalRet = HAL_I2C_Master_Transmit(&hi2c1, (sevSeg_addr << 1), sevSeg_SD_OFFBuff, 2, HAL_MAX_DELAY);
 8000af8:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <sevSeg_I2C1_Init+0xc4>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	18db      	adds	r3, r3, r3
 8000b00:	b299      	uxth	r1, r3
 8000b02:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <sevSeg_I2C1_Init+0xd8>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	001a      	movs	r2, r3
 8000b08:	1dfc      	adds	r4, r7, #7
 8000b0a:	481e      	ldr	r0, [pc, #120]	; (8000b84 <sevSeg_I2C1_Init+0xcc>)
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	425b      	negs	r3, r3
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2302      	movs	r3, #2
 8000b14:	f000 fe3e 	bl	8001794 <HAL_I2C_Master_Transmit>
 8000b18:	0003      	movs	r3, r0
 8000b1a:	7023      	strb	r3, [r4, #0]

	if(HalRet != HAL_OK) {		//check HAL
 8000b1c:	1dfb      	adds	r3, r7, #7
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d004      	beq.n	8000b2e <sevSeg_I2C1_Init+0x76>
		printf("HAL Not OK :( \n\r");
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <sevSeg_I2C1_Init+0xd0>)
 8000b26:	0018      	movs	r0, r3
 8000b28:	f003 fba0 	bl	800426c <iprintf>
 8000b2c:	e003      	b.n	8000b36 <sevSeg_I2C1_Init+0x7e>
	} else {
		printf("HAL OK :)");
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <sevSeg_I2C1_Init+0xd4>)
 8000b30:	0018      	movs	r0, r3
 8000b32:	f003 fb9b 	bl	800426c <iprintf>
	}

	//Set to test mode
	HalRet = HAL_I2C_Master_Transmit(&hi2c1, (sevSeg_addr << 1), sevSeg_testONBuff, 2, HAL_MAX_DELAY);
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <sevSeg_I2C1_Init+0xc4>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	18db      	adds	r3, r3, r3
 8000b3e:	b299      	uxth	r1, r3
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <sevSeg_I2C1_Init+0xdc>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	001a      	movs	r2, r3
 8000b46:	1dfc      	adds	r4, r7, #7
 8000b48:	480e      	ldr	r0, [pc, #56]	; (8000b84 <sevSeg_I2C1_Init+0xcc>)
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	425b      	negs	r3, r3
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2302      	movs	r3, #2
 8000b52:	f000 fe1f 	bl	8001794 <HAL_I2C_Master_Transmit>
 8000b56:	0003      	movs	r3, r0
 8000b58:	7023      	strb	r3, [r4, #0]

	if(HalRet != HAL_OK) {		//check HAL
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d004      	beq.n	8000b6c <sevSeg_I2C1_Init+0xb4>
		printf("HAL Not OK :( \n\r");
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <sevSeg_I2C1_Init+0xd0>)
 8000b64:	0018      	movs	r0, r3
 8000b66:	f003 fb81 	bl	800426c <iprintf>
	} else {
		printf("HAL OK :)");
	}

	return;
 8000b6a:	e004      	b.n	8000b76 <sevSeg_I2C1_Init+0xbe>
		printf("HAL OK :)");
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <sevSeg_I2C1_Init+0xd4>)
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f003 fb7c 	bl	800426c <iprintf>
	return;
 8000b74:	46c0      	nop			; (mov r8, r8)

}
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b003      	add	sp, #12
 8000b7a:	bd90      	pop	{r4, r7, pc}
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	20000004 	.word	0x20000004
 8000b84:	2000009c 	.word	0x2000009c
 8000b88:	08005308 	.word	0x08005308
 8000b8c:	0800531c 	.word	0x0800531c
 8000b90:	2000000e 	.word	0x2000000e
 8000b94:	2000000f 	.word	0x2000000f

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x8>
	...

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <HAL_MspInit+0x44>)
 8000bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <HAL_MspInit+0x44>)
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	641a      	str	r2, [r3, #64]	; 0x40
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <HAL_MspInit+0x44>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_MspInit+0x44>)
 8000bc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_MspInit+0x44>)
 8000bc8:	2180      	movs	r1, #128	; 0x80
 8000bca:	0549      	lsls	r1, r1, #21
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_MspInit+0x44>)
 8000bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bd4:	2380      	movs	r3, #128	; 0x80
 8000bd6:	055b      	lsls	r3, r3, #21
 8000bd8:	4013      	ands	r3, r2
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b002      	add	sp, #8
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	40021000 	.word	0x40021000

08000bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b095      	sub	sp, #84	; 0x54
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	233c      	movs	r3, #60	; 0x3c
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	2314      	movs	r3, #20
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	2100      	movs	r1, #0
 8000c00:	f003 fb2c 	bl	800425c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c04:	2414      	movs	r4, #20
 8000c06:	193b      	adds	r3, r7, r4
 8000c08:	0018      	movs	r0, r3
 8000c0a:	2328      	movs	r3, #40	; 0x28
 8000c0c:	001a      	movs	r2, r3
 8000c0e:	2100      	movs	r1, #0
 8000c10:	f003 fb24 	bl	800425c <memset>
  if(hi2c->Instance==I2C1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a22      	ldr	r2, [pc, #136]	; (8000ca4 <HAL_I2C_MspInit+0xb8>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d13e      	bne.n	8000c9c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	2220      	movs	r2, #32
 8000c22:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f001 fe77 	bl	8002920 <HAL_RCCEx_PeriphCLKConfig>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c36:	f7ff ffaf 	bl	8000b98 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <HAL_I2C_MspInit+0xbc>)
 8000c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <HAL_I2C_MspInit+0xbc>)
 8000c40:	2102      	movs	r1, #2
 8000c42:	430a      	orrs	r2, r1
 8000c44:	635a      	str	r2, [r3, #52]	; 0x34
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <HAL_I2C_MspInit+0xbc>)
 8000c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000c52:	213c      	movs	r1, #60	; 0x3c
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	22c0      	movs	r2, #192	; 0xc0
 8000c58:	0092      	lsls	r2, r2, #2
 8000c5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2212      	movs	r2, #18
 8000c60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2206      	movs	r2, #6
 8000c72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <HAL_I2C_MspInit+0xc0>)
 8000c78:	0019      	movs	r1, r3
 8000c7a:	0010      	movs	r0, r2
 8000c7c:	f000 fb24 	bl	80012c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <HAL_I2C_MspInit+0xbc>)
 8000c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_I2C_MspInit+0xbc>)
 8000c86:	2180      	movs	r1, #128	; 0x80
 8000c88:	0389      	lsls	r1, r1, #14
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_I2C_MspInit+0xbc>)
 8000c90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	039b      	lsls	r3, r3, #14
 8000c96:	4013      	ands	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b015      	add	sp, #84	; 0x54
 8000ca2:	bd90      	pop	{r4, r7, pc}
 8000ca4:	40005400 	.word	0x40005400
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	50000400 	.word	0x50000400

08000cb0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b08f      	sub	sp, #60	; 0x3c
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb8:	2410      	movs	r4, #16
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	2328      	movs	r3, #40	; 0x28
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f003 faca 	bl	800425c <memset>
  if(hrtc->Instance==RTC)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a19      	ldr	r2, [pc, #100]	; (8000d34 <HAL_RTC_MspInit+0x84>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d12c      	bne.n	8000d2c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	0292      	lsls	r2, r2, #10
 8000cd8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	2280      	movs	r2, #128	; 0x80
 8000cde:	0092      	lsls	r2, r2, #2
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f001 fe1b 	bl	8002920 <HAL_RCCEx_PeriphCLKConfig>
 8000cea:	1e03      	subs	r3, r0, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000cee:	f7ff ff53 	bl	8000b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <HAL_RTC_MspInit+0x88>)
 8000cf4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <HAL_RTC_MspInit+0x88>)
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	0209      	lsls	r1, r1, #8
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000d00:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <HAL_RTC_MspInit+0x88>)
 8000d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <HAL_RTC_MspInit+0x88>)
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	00c9      	lsls	r1, r1, #3
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_RTC_MspInit+0x88>)
 8000d10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	4013      	ands	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2002      	movs	r0, #2
 8000d22:	f000 fa9f 	bl	8001264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000d26:	2002      	movs	r0, #2
 8000d28:	f000 fab1 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b00f      	add	sp, #60	; 0x3c
 8000d32:	bd90      	pop	{r4, r7, pc}
 8000d34:	40002800 	.word	0x40002800
 8000d38:	40021000 	.word	0x40021000

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b08b      	sub	sp, #44	; 0x2c
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	2414      	movs	r4, #20
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	0018      	movs	r0, r3
 8000d4a:	2314      	movs	r3, #20
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f003 fa84 	bl	800425c <memset>
  if(huart->Instance==USART2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a1b      	ldr	r2, [pc, #108]	; (8000dc8 <HAL_UART_MspInit+0x8c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d130      	bne.n	8000dc0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <HAL_UART_MspInit+0x90>)
 8000d60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <HAL_UART_MspInit+0x90>)
 8000d64:	2180      	movs	r1, #128	; 0x80
 8000d66:	0289      	lsls	r1, r1, #10
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_UART_MspInit+0x90>)
 8000d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	029b      	lsls	r3, r3, #10
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_UART_MspInit+0x90>)
 8000d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <HAL_UART_MspInit+0x90>)
 8000d80:	2101      	movs	r1, #1
 8000d82:	430a      	orrs	r2, r1
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_UART_MspInit+0x90>)
 8000d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000d92:	0021      	movs	r1, r4
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	220c      	movs	r2, #12
 8000d98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2201      	movs	r2, #1
 8000da4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2200      	movs	r2, #0
 8000daa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2201      	movs	r2, #1
 8000db0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	187a      	adds	r2, r7, r1
 8000db4:	23a0      	movs	r3, #160	; 0xa0
 8000db6:	05db      	lsls	r3, r3, #23
 8000db8:	0011      	movs	r1, r2
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f000 fa84 	bl	80012c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b00b      	add	sp, #44	; 0x2c
 8000dc6:	bd90      	pop	{r4, r7, pc}
 8000dc8:	40004400 	.word	0x40004400
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f96e 	bl	80010d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <RTC_TAMP_IRQHandler+0x14>)
 8000e06:	0018      	movs	r0, r3
 8000e08:	f002 fb90 	bl	800352c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	200000f0 	.word	0x200000f0

08000e18 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */



  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Display_Button_Pin);
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f000 fbef 	bl	8001600 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Enable_Button_Pin);
 8000e22:	2002      	movs	r0, #2
 8000e24:	f000 fbec 	bl	8001600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  //NOT the interrupt part for GPIO pin 1 (I think)

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000e28:	46c0      	nop			; (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_NRST_Pin);
 8000e32:	2004      	movs	r0, #4
 8000e34:	f000 fbe4 	bl	8001600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alarm_Set_Button_Pin);
 8000e42:	2010      	movs	r0, #16
 8000e44:	f000 fbdc 	bl	8001600 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Hour_Set_Button_Pin);
 8000e48:	2020      	movs	r0, #32
 8000e4a:	f000 fbd9 	bl	8001600 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Snooze_Button_Pin);
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	0018      	movs	r0, r3
 8000e54:	f000 fbd4 	bl	8001600 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Minute_Set_Button_Pin);
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	015b      	lsls	r3, r3, #5
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f000 fbcf 	bl	8001600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	e00a      	b.n	8000e90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e7a:	e000      	b.n	8000e7e <_read+0x16>
 8000e7c:	bf00      	nop
 8000e7e:	0001      	movs	r1, r0
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	60ba      	str	r2, [r7, #8]
 8000e86:	b2ca      	uxtb	r2, r1
 8000e88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	dbf0      	blt.n	8000e7a <_read+0x12>
  }

  return len;
 8000e98:	687b      	ldr	r3, [r7, #4]
}
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b006      	add	sp, #24
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	60f8      	str	r0, [r7, #12]
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	e009      	b.n	8000ec8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	60ba      	str	r2, [r7, #8]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f7ff facd 	bl	800045c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	dbf1      	blt.n	8000eb4 <_write+0x12>
  }
  return len;
 8000ed0:	687b      	ldr	r3, [r7, #4]
}
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b006      	add	sp, #24
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_close>:

int _close(int file)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	425b      	negs	r3, r3
}
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b002      	add	sp, #8
 8000eec:	bd80      	pop	{r7, pc}

08000eee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	2280      	movs	r2, #128	; 0x80
 8000efc:	0192      	lsls	r2, r2, #6
 8000efe:	605a      	str	r2, [r3, #4]
  return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	0018      	movs	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b002      	add	sp, #8
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <_isatty>:

int _isatty(int file)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	0018      	movs	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b002      	add	sp, #8
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b004      	add	sp, #16
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f3c:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <_sbrk+0x5c>)
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <_sbrk+0x60>)
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <_sbrk+0x64>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <_sbrk+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	18d3      	adds	r3, r2, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d207      	bcs.n	8000f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f64:	f003 f950 	bl	8004208 <__errno>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	425b      	negs	r3, r3
 8000f72:	e009      	b.n	8000f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	18d2      	adds	r2, r2, r3
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <_sbrk+0x64>)
 8000f84:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b006      	add	sp, #24
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20002000 	.word	0x20002000
 8000f94:	00000400 	.word	0x00000400
 8000f98:	200001b0 	.word	0x200001b0
 8000f9c:	200001c8 	.word	0x200001c8

08000fa0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb0:	f7ff fff6 	bl	8000fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fb6:	490d      	ldr	r1, [pc, #52]	; (8000fec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <LoopForever+0xe>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fcc:	4c0a      	ldr	r4, [pc, #40]	; (8000ff8 <LoopForever+0x16>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fda:	f003 f91b 	bl	8004214 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fde:	f7ff fa4f 	bl	8000480 <main>

08000fe2 <LoopForever>:

LoopForever:
  b LoopForever
 8000fe2:	e7fe      	b.n	8000fe2 <LoopForever>
  ldr   r0, =_estack
 8000fe4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000ff0:	08005448 	.word	0x08005448
  ldr r2, =_sbss
 8000ff4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000ff8:	200001c8 	.word	0x200001c8

08000ffc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC1_IRQHandler>
	...

08001000 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001006:	1dfb      	adds	r3, r7, #7
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_Init+0x3c>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_Init+0x3c>)
 8001012:	2180      	movs	r1, #128	; 0x80
 8001014:	0049      	lsls	r1, r1, #1
 8001016:	430a      	orrs	r2, r1
 8001018:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800101a:	2000      	movs	r0, #0
 800101c:	f000 f810 	bl	8001040 <HAL_InitTick>
 8001020:	1e03      	subs	r3, r0, #0
 8001022:	d003      	beq.n	800102c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001024:	1dfb      	adds	r3, r7, #7
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
 800102a:	e001      	b.n	8001030 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800102c:	f7ff fdba 	bl	8000ba4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001030:	1dfb      	adds	r3, r7, #7
 8001032:	781b      	ldrb	r3, [r3, #0]
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	b002      	add	sp, #8
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40022000 	.word	0x40022000

08001040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001048:	230f      	movs	r3, #15
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <HAL_InitTick+0x88>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d02b      	beq.n	80010b0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <HAL_InitTick+0x8c>)
 800105a:	681c      	ldr	r4, [r3, #0]
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <HAL_InitTick+0x88>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	0019      	movs	r1, r3
 8001062:	23fa      	movs	r3, #250	; 0xfa
 8001064:	0098      	lsls	r0, r3, #2
 8001066:	f7ff f857 	bl	8000118 <__udivsi3>
 800106a:	0003      	movs	r3, r0
 800106c:	0019      	movs	r1, r3
 800106e:	0020      	movs	r0, r4
 8001070:	f7ff f852 	bl	8000118 <__udivsi3>
 8001074:	0003      	movs	r3, r0
 8001076:	0018      	movs	r0, r3
 8001078:	f000 f919 	bl	80012ae <HAL_SYSTICK_Config>
 800107c:	1e03      	subs	r3, r0, #0
 800107e:	d112      	bne.n	80010a6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b03      	cmp	r3, #3
 8001084:	d80a      	bhi.n	800109c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	2301      	movs	r3, #1
 800108a:	425b      	negs	r3, r3
 800108c:	2200      	movs	r2, #0
 800108e:	0018      	movs	r0, r3
 8001090:	f000 f8e8 	bl	8001264 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_InitTick+0x90>)
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	e00d      	b.n	80010b8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800109c:	230f      	movs	r3, #15
 800109e:	18fb      	adds	r3, r7, r3
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
 80010a4:	e008      	b.n	80010b8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010a6:	230f      	movs	r3, #15
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	e003      	b.n	80010b8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010b0:	230f      	movs	r3, #15
 80010b2:	18fb      	adds	r3, r7, r3
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80010b8:	230f      	movs	r3, #15
 80010ba:	18fb      	adds	r3, r7, r3
 80010bc:	781b      	ldrb	r3, [r3, #0]
}
 80010be:	0018      	movs	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b005      	add	sp, #20
 80010c4:	bd90      	pop	{r4, r7, pc}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	20000018 	.word	0x20000018
 80010cc:	20000010 	.word	0x20000010
 80010d0:	20000014 	.word	0x20000014

080010d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_IncTick+0x1c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	001a      	movs	r2, r3
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <HAL_IncTick+0x20>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	18d2      	adds	r2, r2, r3
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_IncTick+0x20>)
 80010e6:	601a      	str	r2, [r3, #0]
}
 80010e8:	46c0      	nop			; (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	20000018 	.word	0x20000018
 80010f4:	200001b4 	.word	0x200001b4

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b02      	ldr	r3, [pc, #8]	; (8001108 <HAL_GetTick+0x10>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	0018      	movs	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	200001b4 	.word	0x200001b4

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	0002      	movs	r2, r0
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001118:	1dfb      	adds	r3, r7, #7
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b7f      	cmp	r3, #127	; 0x7f
 800111e:	d809      	bhi.n	8001134 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001120:	1dfb      	adds	r3, r7, #7
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	001a      	movs	r2, r3
 8001126:	231f      	movs	r3, #31
 8001128:	401a      	ands	r2, r3
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <__NVIC_EnableIRQ+0x30>)
 800112c:	2101      	movs	r1, #1
 800112e:	4091      	lsls	r1, r2
 8001130:	000a      	movs	r2, r1
 8001132:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b002      	add	sp, #8
 800113a:	bd80      	pop	{r7, pc}
 800113c:	e000e100 	.word	0xe000e100

08001140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	0002      	movs	r2, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b7f      	cmp	r3, #127	; 0x7f
 8001154:	d828      	bhi.n	80011a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001156:	4a2f      	ldr	r2, [pc, #188]	; (8001214 <__NVIC_SetPriority+0xd4>)
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b25b      	sxtb	r3, r3
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	33c0      	adds	r3, #192	; 0xc0
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	589b      	ldr	r3, [r3, r2]
 8001166:	1dfa      	adds	r2, r7, #7
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	0011      	movs	r1, r2
 800116c:	2203      	movs	r2, #3
 800116e:	400a      	ands	r2, r1
 8001170:	00d2      	lsls	r2, r2, #3
 8001172:	21ff      	movs	r1, #255	; 0xff
 8001174:	4091      	lsls	r1, r2
 8001176:	000a      	movs	r2, r1
 8001178:	43d2      	mvns	r2, r2
 800117a:	401a      	ands	r2, r3
 800117c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	019b      	lsls	r3, r3, #6
 8001182:	22ff      	movs	r2, #255	; 0xff
 8001184:	401a      	ands	r2, r3
 8001186:	1dfb      	adds	r3, r7, #7
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	0018      	movs	r0, r3
 800118c:	2303      	movs	r3, #3
 800118e:	4003      	ands	r3, r0
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001194:	481f      	ldr	r0, [pc, #124]	; (8001214 <__NVIC_SetPriority+0xd4>)
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	b25b      	sxtb	r3, r3
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	430a      	orrs	r2, r1
 80011a0:	33c0      	adds	r3, #192	; 0xc0
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011a6:	e031      	b.n	800120c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a8:	4a1b      	ldr	r2, [pc, #108]	; (8001218 <__NVIC_SetPriority+0xd8>)
 80011aa:	1dfb      	adds	r3, r7, #7
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	0019      	movs	r1, r3
 80011b0:	230f      	movs	r3, #15
 80011b2:	400b      	ands	r3, r1
 80011b4:	3b08      	subs	r3, #8
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	3306      	adds	r3, #6
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	18d3      	adds	r3, r2, r3
 80011be:	3304      	adds	r3, #4
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	1dfa      	adds	r2, r7, #7
 80011c4:	7812      	ldrb	r2, [r2, #0]
 80011c6:	0011      	movs	r1, r2
 80011c8:	2203      	movs	r2, #3
 80011ca:	400a      	ands	r2, r1
 80011cc:	00d2      	lsls	r2, r2, #3
 80011ce:	21ff      	movs	r1, #255	; 0xff
 80011d0:	4091      	lsls	r1, r2
 80011d2:	000a      	movs	r2, r1
 80011d4:	43d2      	mvns	r2, r2
 80011d6:	401a      	ands	r2, r3
 80011d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	019b      	lsls	r3, r3, #6
 80011de:	22ff      	movs	r2, #255	; 0xff
 80011e0:	401a      	ands	r2, r3
 80011e2:	1dfb      	adds	r3, r7, #7
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	0018      	movs	r0, r3
 80011e8:	2303      	movs	r3, #3
 80011ea:	4003      	ands	r3, r0
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011f0:	4809      	ldr	r0, [pc, #36]	; (8001218 <__NVIC_SetPriority+0xd8>)
 80011f2:	1dfb      	adds	r3, r7, #7
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	001c      	movs	r4, r3
 80011f8:	230f      	movs	r3, #15
 80011fa:	4023      	ands	r3, r4
 80011fc:	3b08      	subs	r3, #8
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	430a      	orrs	r2, r1
 8001202:	3306      	adds	r3, #6
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	18c3      	adds	r3, r0, r3
 8001208:	3304      	adds	r3, #4
 800120a:	601a      	str	r2, [r3, #0]
}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	b003      	add	sp, #12
 8001212:	bd90      	pop	{r4, r7, pc}
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	1e5a      	subs	r2, r3, #1
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	045b      	lsls	r3, r3, #17
 800122c:	429a      	cmp	r2, r3
 800122e:	d301      	bcc.n	8001234 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001230:	2301      	movs	r3, #1
 8001232:	e010      	b.n	8001256 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <SysTick_Config+0x44>)
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	3a01      	subs	r2, #1
 800123a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123c:	2301      	movs	r3, #1
 800123e:	425b      	negs	r3, r3
 8001240:	2103      	movs	r1, #3
 8001242:	0018      	movs	r0, r3
 8001244:	f7ff ff7c 	bl	8001140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <SysTick_Config+0x44>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <SysTick_Config+0x44>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	0018      	movs	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	b002      	add	sp, #8
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	210f      	movs	r1, #15
 8001270:	187b      	adds	r3, r7, r1
 8001272:	1c02      	adds	r2, r0, #0
 8001274:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	187b      	adds	r3, r7, r1
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b25b      	sxtb	r3, r3
 800127e:	0011      	movs	r1, r2
 8001280:	0018      	movs	r0, r3
 8001282:	f7ff ff5d 	bl	8001140 <__NVIC_SetPriority>
}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	46bd      	mov	sp, r7
 800128a:	b004      	add	sp, #16
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	0002      	movs	r2, r0
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	0018      	movs	r0, r3
 80012a2:	f7ff ff33 	bl	800110c <__NVIC_EnableIRQ>
}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b002      	add	sp, #8
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	0018      	movs	r0, r3
 80012ba:	f7ff ffaf 	bl	800121c <SysTick_Config>
 80012be:	0003      	movs	r3, r0
}
 80012c0:	0018      	movs	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b002      	add	sp, #8
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d6:	e147      	b.n	8001568 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2101      	movs	r1, #1
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	4091      	lsls	r1, r2
 80012e2:	000a      	movs	r2, r1
 80012e4:	4013      	ands	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d100      	bne.n	80012f0 <HAL_GPIO_Init+0x28>
 80012ee:	e138      	b.n	8001562 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2203      	movs	r2, #3
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d005      	beq.n	8001308 <HAL_GPIO_Init+0x40>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2203      	movs	r2, #3
 8001302:	4013      	ands	r3, r2
 8001304:	2b02      	cmp	r3, #2
 8001306:	d130      	bne.n	800136a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	409a      	lsls	r2, r3
 8001316:	0013      	movs	r3, r2
 8001318:	43da      	mvns	r2, r3
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	409a      	lsls	r2, r3
 800132a:	0013      	movs	r3, r2
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800133e:	2201      	movs	r2, #1
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	409a      	lsls	r2, r3
 8001344:	0013      	movs	r3, r2
 8001346:	43da      	mvns	r2, r3
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	2201      	movs	r2, #1
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2203      	movs	r2, #3
 8001370:	4013      	ands	r3, r2
 8001372:	2b03      	cmp	r3, #3
 8001374:	d017      	beq.n	80013a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	2203      	movs	r2, #3
 8001382:	409a      	lsls	r2, r3
 8001384:	0013      	movs	r3, r2
 8001386:	43da      	mvns	r2, r3
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	409a      	lsls	r2, r3
 8001398:	0013      	movs	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2203      	movs	r2, #3
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d123      	bne.n	80013fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	08da      	lsrs	r2, r3, #3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3208      	adds	r2, #8
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	58d3      	ldr	r3, [r2, r3]
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	2207      	movs	r2, #7
 80013c4:	4013      	ands	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	220f      	movs	r2, #15
 80013ca:	409a      	lsls	r2, r3
 80013cc:	0013      	movs	r3, r2
 80013ce:	43da      	mvns	r2, r3
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	691a      	ldr	r2, [r3, #16]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	2107      	movs	r1, #7
 80013de:	400b      	ands	r3, r1
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	409a      	lsls	r2, r3
 80013e4:	0013      	movs	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	08da      	lsrs	r2, r3, #3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3208      	adds	r2, #8
 80013f4:	0092      	lsls	r2, r2, #2
 80013f6:	6939      	ldr	r1, [r7, #16]
 80013f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	2203      	movs	r2, #3
 8001406:	409a      	lsls	r2, r3
 8001408:	0013      	movs	r3, r2
 800140a:	43da      	mvns	r2, r3
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2203      	movs	r2, #3
 8001418:	401a      	ands	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	409a      	lsls	r2, r3
 8001420:	0013      	movs	r3, r2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	23c0      	movs	r3, #192	; 0xc0
 8001434:	029b      	lsls	r3, r3, #10
 8001436:	4013      	ands	r3, r2
 8001438:	d100      	bne.n	800143c <HAL_GPIO_Init+0x174>
 800143a:	e092      	b.n	8001562 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800143c:	4a50      	ldr	r2, [pc, #320]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	3318      	adds	r3, #24
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	589b      	ldr	r3, [r3, r2]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	2203      	movs	r2, #3
 800144e:	4013      	ands	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	220f      	movs	r2, #15
 8001454:	409a      	lsls	r2, r3
 8001456:	0013      	movs	r3, r2
 8001458:	43da      	mvns	r2, r3
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	23a0      	movs	r3, #160	; 0xa0
 8001464:	05db      	lsls	r3, r3, #23
 8001466:	429a      	cmp	r2, r3
 8001468:	d013      	beq.n	8001492 <HAL_GPIO_Init+0x1ca>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a45      	ldr	r2, [pc, #276]	; (8001584 <HAL_GPIO_Init+0x2bc>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d00d      	beq.n	800148e <HAL_GPIO_Init+0x1c6>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a44      	ldr	r2, [pc, #272]	; (8001588 <HAL_GPIO_Init+0x2c0>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d007      	beq.n	800148a <HAL_GPIO_Init+0x1c2>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a43      	ldr	r2, [pc, #268]	; (800158c <HAL_GPIO_Init+0x2c4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d101      	bne.n	8001486 <HAL_GPIO_Init+0x1be>
 8001482:	2303      	movs	r3, #3
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x1cc>
 8001486:	2305      	movs	r3, #5
 8001488:	e004      	b.n	8001494 <HAL_GPIO_Init+0x1cc>
 800148a:	2302      	movs	r3, #2
 800148c:	e002      	b.n	8001494 <HAL_GPIO_Init+0x1cc>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <HAL_GPIO_Init+0x1cc>
 8001492:	2300      	movs	r3, #0
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	2103      	movs	r1, #3
 8001498:	400a      	ands	r2, r1
 800149a:	00d2      	lsls	r2, r2, #3
 800149c:	4093      	lsls	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80014a4:	4936      	ldr	r1, [pc, #216]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	3318      	adds	r3, #24
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014b2:	4b33      	ldr	r3, [pc, #204]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	43da      	mvns	r2, r3
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	035b      	lsls	r3, r3, #13
 80014ca:	4013      	ands	r3, r2
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014d6:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80014dc:	4b28      	ldr	r3, [pc, #160]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	43da      	mvns	r2, r3
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	039b      	lsls	r3, r3, #14
 80014f4:	4013      	ands	r3, r2
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001500:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001506:	4a1e      	ldr	r2, [pc, #120]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 8001508:	2384      	movs	r3, #132	; 0x84
 800150a:	58d3      	ldr	r3, [r2, r3]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	43da      	mvns	r2, r3
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	029b      	lsls	r3, r3, #10
 8001520:	4013      	ands	r3, r2
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800152c:	4914      	ldr	r1, [pc, #80]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 800152e:	2284      	movs	r2, #132	; 0x84
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001534:	4a12      	ldr	r2, [pc, #72]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	58d3      	ldr	r3, [r2, r3]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43da      	mvns	r2, r3
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	025b      	lsls	r3, r3, #9
 800154e:	4013      	ands	r3, r2
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800155a:	4909      	ldr	r1, [pc, #36]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	40da      	lsrs	r2, r3
 8001570:	1e13      	subs	r3, r2, #0
 8001572:	d000      	beq.n	8001576 <HAL_GPIO_Init+0x2ae>
 8001574:	e6b0      	b.n	80012d8 <HAL_GPIO_Init+0x10>
  }
}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	46c0      	nop			; (mov r8, r8)
 800157a:	46bd      	mov	sp, r7
 800157c:	b006      	add	sp, #24
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40021800 	.word	0x40021800
 8001584:	50000400 	.word	0x50000400
 8001588:	50000800 	.word	0x50000800
 800158c:	50000c00 	.word	0x50000c00

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	0008      	movs	r0, r1
 800159a:	0011      	movs	r1, r2
 800159c:	1cbb      	adds	r3, r7, #2
 800159e:	1c02      	adds	r2, r0, #0
 80015a0:	801a      	strh	r2, [r3, #0]
 80015a2:	1c7b      	adds	r3, r7, #1
 80015a4:	1c0a      	adds	r2, r1, #0
 80015a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015a8:	1c7b      	adds	r3, r7, #1
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d004      	beq.n	80015ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015b0:	1cbb      	adds	r3, r7, #2
 80015b2:	881a      	ldrh	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015b8:	e003      	b.n	80015c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ba:	1cbb      	adds	r3, r7, #2
 80015bc:	881a      	ldrh	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b002      	add	sp, #8
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	000a      	movs	r2, r1
 80015d4:	1cbb      	adds	r3, r7, #2
 80015d6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015de:	1cbb      	adds	r3, r7, #2
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4013      	ands	r3, r2
 80015e6:	041a      	lsls	r2, r3, #16
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	1cb9      	adds	r1, r7, #2
 80015ee:	8809      	ldrh	r1, [r1, #0]
 80015f0:	400b      	ands	r3, r1
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	619a      	str	r2, [r3, #24]
}
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b004      	add	sp, #16
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	0002      	movs	r2, r0
 8001608:	1dbb      	adds	r3, r7, #6
 800160a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	1dba      	adds	r2, r7, #6
 8001612:	8812      	ldrh	r2, [r2, #0]
 8001614:	4013      	ands	r3, r2
 8001616:	d008      	beq.n	800162a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001618:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800161a:	1dba      	adds	r2, r7, #6
 800161c:	8812      	ldrh	r2, [r2, #0]
 800161e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001620:	1dbb      	adds	r3, r7, #6
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	0018      	movs	r0, r3
 8001626:	f000 f815 	bl	8001654 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	1dba      	adds	r2, r7, #6
 8001630:	8812      	ldrh	r2, [r2, #0]
 8001632:	4013      	ands	r3, r2
 8001634:	d008      	beq.n	8001648 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001638:	1dba      	adds	r2, r7, #6
 800163a:	8812      	ldrh	r2, [r2, #0]
 800163c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800163e:	1dbb      	adds	r3, r7, #6
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	0018      	movs	r0, r3
 8001644:	f7ff f994 	bl	8000970 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001648:	46c0      	nop			; (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	b002      	add	sp, #8
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021800 	.word	0x40021800

08001654 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	0002      	movs	r2, r0
 800165c:	1dbb      	adds	r3, r7, #6
 800165e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001660:	46c0      	nop			; (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	b002      	add	sp, #8
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e082      	b.n	8001780 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2241      	movs	r2, #65	; 0x41
 800167e:	5c9b      	ldrb	r3, [r3, r2]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d107      	bne.n	8001696 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2240      	movs	r2, #64	; 0x40
 800168a:	2100      	movs	r1, #0
 800168c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	0018      	movs	r0, r3
 8001692:	f7ff faab 	bl	8000bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2241      	movs	r2, #65	; 0x41
 800169a:	2124      	movs	r1, #36	; 0x24
 800169c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2101      	movs	r1, #1
 80016aa:	438a      	bics	r2, r1
 80016ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4934      	ldr	r1, [pc, #208]	; (8001788 <HAL_I2C_Init+0x120>)
 80016b8:	400a      	ands	r2, r1
 80016ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4931      	ldr	r1, [pc, #196]	; (800178c <HAL_I2C_Init+0x124>)
 80016c8:	400a      	ands	r2, r1
 80016ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d108      	bne.n	80016e6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	0209      	lsls	r1, r1, #8
 80016e0:	430a      	orrs	r2, r1
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	e007      	b.n	80016f6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2184      	movs	r1, #132	; 0x84
 80016f0:	0209      	lsls	r1, r1, #8
 80016f2:	430a      	orrs	r2, r1
 80016f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d104      	bne.n	8001708 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2280      	movs	r2, #128	; 0x80
 8001704:	0112      	lsls	r2, r2, #4
 8001706:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	491f      	ldr	r1, [pc, #124]	; (8001790 <HAL_I2C_Init+0x128>)
 8001714:	430a      	orrs	r2, r1
 8001716:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	491a      	ldr	r1, [pc, #104]	; (800178c <HAL_I2C_Init+0x124>)
 8001724:	400a      	ands	r2, r1
 8001726:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691a      	ldr	r2, [r3, #16]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	431a      	orrs	r2, r3
 8001732:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69d9      	ldr	r1, [r3, #28]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1a      	ldr	r2, [r3, #32]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2101      	movs	r1, #1
 800175e:	430a      	orrs	r2, r1
 8001760:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2241      	movs	r2, #65	; 0x41
 800176c:	2120      	movs	r1, #32
 800176e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2242      	movs	r2, #66	; 0x42
 800177a:	2100      	movs	r1, #0
 800177c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	0018      	movs	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	b002      	add	sp, #8
 8001786:	bd80      	pop	{r7, pc}
 8001788:	f0ffffff 	.word	0xf0ffffff
 800178c:	ffff7fff 	.word	0xffff7fff
 8001790:	02008000 	.word	0x02008000

08001794 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af02      	add	r7, sp, #8
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	0008      	movs	r0, r1
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	0019      	movs	r1, r3
 80017a2:	230a      	movs	r3, #10
 80017a4:	18fb      	adds	r3, r7, r3
 80017a6:	1c02      	adds	r2, r0, #0
 80017a8:	801a      	strh	r2, [r3, #0]
 80017aa:	2308      	movs	r3, #8
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	1c0a      	adds	r2, r1, #0
 80017b0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2241      	movs	r2, #65	; 0x41
 80017b6:	5c9b      	ldrb	r3, [r3, r2]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b20      	cmp	r3, #32
 80017bc:	d000      	beq.n	80017c0 <HAL_I2C_Master_Transmit+0x2c>
 80017be:	e0e7      	b.n	8001990 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2240      	movs	r2, #64	; 0x40
 80017c4:	5c9b      	ldrb	r3, [r3, r2]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_I2C_Master_Transmit+0x3a>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e0e1      	b.n	8001992 <HAL_I2C_Master_Transmit+0x1fe>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2240      	movs	r2, #64	; 0x40
 80017d2:	2101      	movs	r1, #1
 80017d4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017d6:	f7ff fc8f 	bl	80010f8 <HAL_GetTick>
 80017da:	0003      	movs	r3, r0
 80017dc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	0219      	lsls	r1, r3, #8
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	2319      	movs	r3, #25
 80017ea:	2201      	movs	r2, #1
 80017ec:	f000 f8fc 	bl	80019e8 <I2C_WaitOnFlagUntilTimeout>
 80017f0:	1e03      	subs	r3, r0, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0cc      	b.n	8001992 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2241      	movs	r2, #65	; 0x41
 80017fc:	2121      	movs	r1, #33	; 0x21
 80017fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2242      	movs	r2, #66	; 0x42
 8001804:	2110      	movs	r1, #16
 8001806:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2208      	movs	r2, #8
 8001818:	18ba      	adds	r2, r7, r2
 800181a:	8812      	ldrh	r2, [r2, #0]
 800181c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001828:	b29b      	uxth	r3, r3
 800182a:	2bff      	cmp	r3, #255	; 0xff
 800182c:	d911      	bls.n	8001852 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	22ff      	movs	r2, #255	; 0xff
 8001832:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001838:	b2da      	uxtb	r2, r3
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	045c      	lsls	r4, r3, #17
 800183e:	230a      	movs	r3, #10
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	8819      	ldrh	r1, [r3, #0]
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	4b55      	ldr	r3, [pc, #340]	; (800199c <HAL_I2C_Master_Transmit+0x208>)
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	0023      	movs	r3, r4
 800184c:	f000 fa86 	bl	8001d5c <I2C_TransferConfig>
 8001850:	e075      	b.n	800193e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001856:	b29a      	uxth	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001860:	b2da      	uxtb	r2, r3
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	049c      	lsls	r4, r3, #18
 8001866:	230a      	movs	r3, #10
 8001868:	18fb      	adds	r3, r7, r3
 800186a:	8819      	ldrh	r1, [r3, #0]
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	4b4b      	ldr	r3, [pc, #300]	; (800199c <HAL_I2C_Master_Transmit+0x208>)
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	0023      	movs	r3, r4
 8001874:	f000 fa72 	bl	8001d5c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001878:	e061      	b.n	800193e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	0018      	movs	r0, r3
 8001882:	f000 f8f0 	bl	8001a66 <I2C_WaitOnTXISFlagUntilTimeout>
 8001886:	1e03      	subs	r3, r0, #0
 8001888:	d001      	beq.n	800188e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e081      	b.n	8001992 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001892:	781a      	ldrb	r2, [r3, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	3b01      	subs	r3, #1
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b6:	3b01      	subs	r3, #1
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d03a      	beq.n	800193e <HAL_I2C_Master_Transmit+0x1aa>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d136      	bne.n	800193e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	0013      	movs	r3, r2
 80018da:	2200      	movs	r2, #0
 80018dc:	2180      	movs	r1, #128	; 0x80
 80018de:	f000 f883 	bl	80019e8 <I2C_WaitOnFlagUntilTimeout>
 80018e2:	1e03      	subs	r3, r0, #0
 80018e4:	d001      	beq.n	80018ea <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e053      	b.n	8001992 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	2bff      	cmp	r3, #255	; 0xff
 80018f2:	d911      	bls.n	8001918 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	22ff      	movs	r2, #255	; 0xff
 80018f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	045c      	lsls	r4, r3, #17
 8001904:	230a      	movs	r3, #10
 8001906:	18fb      	adds	r3, r7, r3
 8001908:	8819      	ldrh	r1, [r3, #0]
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	2300      	movs	r3, #0
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	0023      	movs	r3, r4
 8001912:	f000 fa23 	bl	8001d5c <I2C_TransferConfig>
 8001916:	e012      	b.n	800193e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001926:	b2da      	uxtb	r2, r3
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	049c      	lsls	r4, r3, #18
 800192c:	230a      	movs	r3, #10
 800192e:	18fb      	adds	r3, r7, r3
 8001930:	8819      	ldrh	r1, [r3, #0]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	2300      	movs	r3, #0
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	0023      	movs	r3, r4
 800193a:	f000 fa0f 	bl	8001d5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001942:	b29b      	uxth	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	d198      	bne.n	800187a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	0018      	movs	r0, r3
 8001950:	f000 f8c8 	bl	8001ae4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001954:	1e03      	subs	r3, r0, #0
 8001956:	d001      	beq.n	800195c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e01a      	b.n	8001992 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2220      	movs	r2, #32
 8001962:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	490c      	ldr	r1, [pc, #48]	; (80019a0 <HAL_I2C_Master_Transmit+0x20c>)
 8001970:	400a      	ands	r2, r1
 8001972:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2241      	movs	r2, #65	; 0x41
 8001978:	2120      	movs	r1, #32
 800197a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2242      	movs	r2, #66	; 0x42
 8001980:	2100      	movs	r1, #0
 8001982:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2240      	movs	r2, #64	; 0x40
 8001988:	2100      	movs	r1, #0
 800198a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	e000      	b.n	8001992 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001990:	2302      	movs	r3, #2
  }
}
 8001992:	0018      	movs	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	b007      	add	sp, #28
 8001998:	bd90      	pop	{r4, r7, pc}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	80002000 	.word	0x80002000
 80019a0:	fe00e800 	.word	0xfe00e800

080019a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	2202      	movs	r2, #2
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d103      	bne.n	80019c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2200      	movs	r2, #0
 80019c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	2201      	movs	r2, #1
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d007      	beq.n	80019e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	699a      	ldr	r2, [r3, #24]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2101      	movs	r1, #1
 80019dc:	430a      	orrs	r2, r1
 80019de:	619a      	str	r2, [r3, #24]
  }
}
 80019e0:	46c0      	nop			; (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b002      	add	sp, #8
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	1dfb      	adds	r3, r7, #7
 80019f6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019f8:	e021      	b.n	8001a3e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	3301      	adds	r3, #1
 80019fe:	d01e      	beq.n	8001a3e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a00:	f7ff fb7a 	bl	80010f8 <HAL_GetTick>
 8001a04:	0002      	movs	r2, r0
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d302      	bcc.n	8001a16 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d113      	bne.n	8001a3e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2241      	movs	r2, #65	; 0x41
 8001a26:	2120      	movs	r1, #32
 8001a28:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2242      	movs	r2, #66	; 0x42
 8001a2e:	2100      	movs	r1, #0
 8001a30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2240      	movs	r2, #64	; 0x40
 8001a36:	2100      	movs	r1, #0
 8001a38:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00f      	b.n	8001a5e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	4013      	ands	r3, r2
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	425a      	negs	r2, r3
 8001a4e:	4153      	adcs	r3, r2
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	001a      	movs	r2, r3
 8001a54:	1dfb      	adds	r3, r7, #7
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d0ce      	beq.n	80019fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	0018      	movs	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b004      	add	sp, #16
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a72:	e02b      	b.n	8001acc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	68b9      	ldr	r1, [r7, #8]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f000 f86e 	bl	8001b5c <I2C_IsErrorOccurred>
 8001a80:	1e03      	subs	r3, r0, #0
 8001a82:	d001      	beq.n	8001a88 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e029      	b.n	8001adc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	d01e      	beq.n	8001acc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a8e:	f7ff fb33 	bl	80010f8 <HAL_GetTick>
 8001a92:	0002      	movs	r2, r0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d302      	bcc.n	8001aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d113      	bne.n	8001acc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2241      	movs	r2, #65	; 0x41
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2242      	movs	r2, #66	; 0x42
 8001abc:	2100      	movs	r1, #0
 8001abe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2240      	movs	r2, #64	; 0x40
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e007      	b.n	8001adc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d1cc      	bne.n	8001a74 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	0018      	movs	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b004      	add	sp, #16
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001af0:	e028      	b.n	8001b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	0018      	movs	r0, r3
 8001afa:	f000 f82f 	bl	8001b5c <I2C_IsErrorOccurred>
 8001afe:	1e03      	subs	r3, r0, #0
 8001b00:	d001      	beq.n	8001b06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e026      	b.n	8001b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b06:	f7ff faf7 	bl	80010f8 <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d302      	bcc.n	8001b1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d113      	bne.n	8001b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b20:	2220      	movs	r2, #32
 8001b22:	431a      	orrs	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2241      	movs	r2, #65	; 0x41
 8001b2c:	2120      	movs	r1, #32
 8001b2e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2242      	movs	r2, #66	; 0x42
 8001b34:	2100      	movs	r1, #0
 8001b36:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2240      	movs	r2, #64	; 0x40
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e007      	b.n	8001b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b20      	cmp	r3, #32
 8001b50:	d1cf      	bne.n	8001af2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	0018      	movs	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b004      	add	sp, #16
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b08b      	sub	sp, #44	; 0x2c
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b68:	2327      	movs	r3, #39	; 0x27
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2210      	movs	r2, #16
 8001b84:	4013      	ands	r3, r2
 8001b86:	d100      	bne.n	8001b8a <I2C_IsErrorOccurred+0x2e>
 8001b88:	e082      	b.n	8001c90 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2210      	movs	r2, #16
 8001b90:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b92:	e060      	b.n	8001c56 <I2C_IsErrorOccurred+0xfa>
 8001b94:	2427      	movs	r4, #39	; 0x27
 8001b96:	193b      	adds	r3, r7, r4
 8001b98:	193a      	adds	r2, r7, r4
 8001b9a:	7812      	ldrb	r2, [r2, #0]
 8001b9c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	d058      	beq.n	8001c56 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ba4:	f7ff faa8 	bl	80010f8 <HAL_GetTick>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d306      	bcc.n	8001bc2 <I2C_IsErrorOccurred+0x66>
 8001bb4:	193b      	adds	r3, r7, r4
 8001bb6:	193a      	adds	r2, r7, r4
 8001bb8:	7812      	ldrb	r2, [r2, #0]
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d149      	bne.n	8001c56 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	01db      	lsls	r3, r3, #7
 8001bcc:	4013      	ands	r3, r2
 8001bce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001bd0:	2013      	movs	r0, #19
 8001bd2:	183b      	adds	r3, r7, r0
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	2142      	movs	r1, #66	; 0x42
 8001bd8:	5c52      	ldrb	r2, [r2, r1]
 8001bda:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699a      	ldr	r2, [r3, #24]
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	401a      	ands	r2, r3
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d126      	bne.n	8001c3e <I2C_IsErrorOccurred+0xe2>
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	01db      	lsls	r3, r3, #7
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d021      	beq.n	8001c3e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001bfa:	183b      	adds	r3, r7, r0
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b20      	cmp	r3, #32
 8001c00:	d01d      	beq.n	8001c3e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2180      	movs	r1, #128	; 0x80
 8001c0e:	01c9      	lsls	r1, r1, #7
 8001c10:	430a      	orrs	r2, r1
 8001c12:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c14:	f7ff fa70 	bl	80010f8 <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c1c:	e00f      	b.n	8001c3e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c1e:	f7ff fa6b 	bl	80010f8 <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b19      	cmp	r3, #25
 8001c2a:	d908      	bls.n	8001c3e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	4313      	orrs	r3, r2
 8001c32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c34:	2327      	movs	r3, #39	; 0x27
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]

              break;
 8001c3c:	e00b      	b.n	8001c56 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2220      	movs	r2, #32
 8001c46:	4013      	ands	r3, r2
 8001c48:	2127      	movs	r1, #39	; 0x27
 8001c4a:	187a      	adds	r2, r7, r1
 8001c4c:	1879      	adds	r1, r7, r1
 8001c4e:	7809      	ldrb	r1, [r1, #0]
 8001c50:	7011      	strb	r1, [r2, #0]
 8001c52:	2b20      	cmp	r3, #32
 8001c54:	d1e3      	bne.n	8001c1e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b20      	cmp	r3, #32
 8001c62:	d004      	beq.n	8001c6e <I2C_IsErrorOccurred+0x112>
 8001c64:	2327      	movs	r3, #39	; 0x27
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d092      	beq.n	8001b94 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c6e:	2327      	movs	r3, #39	; 0x27
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d103      	bne.n	8001c80 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	2204      	movs	r2, #4
 8001c84:	4313      	orrs	r3, r2
 8001c86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c88:	2327      	movs	r3, #39	; 0x27
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d00c      	beq.n	8001cbc <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2280      	movs	r2, #128	; 0x80
 8001cb0:	0052      	lsls	r2, r2, #1
 8001cb2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cb4:	2327      	movs	r3, #39	; 0x27
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d00c      	beq.n	8001ce0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	2208      	movs	r2, #8
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2280      	movs	r2, #128	; 0x80
 8001cd4:	00d2      	lsls	r2, r2, #3
 8001cd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cd8:	2327      	movs	r3, #39	; 0x27
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	2201      	movs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d00c      	beq.n	8001d04 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	2202      	movs	r2, #2
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2280      	movs	r2, #128	; 0x80
 8001cf8:	0092      	lsls	r2, r2, #2
 8001cfa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cfc:	2327      	movs	r3, #39	; 0x27
 8001cfe:	18fb      	adds	r3, r7, r3
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001d04:	2327      	movs	r3, #39	; 0x27
 8001d06:	18fb      	adds	r3, r7, r3
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d01d      	beq.n	8001d4a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7ff fe47 	bl	80019a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	490d      	ldr	r1, [pc, #52]	; (8001d58 <I2C_IsErrorOccurred+0x1fc>)
 8001d22:	400a      	ands	r2, r1
 8001d24:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2241      	movs	r2, #65	; 0x41
 8001d36:	2120      	movs	r1, #32
 8001d38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2242      	movs	r2, #66	; 0x42
 8001d3e:	2100      	movs	r1, #0
 8001d40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2240      	movs	r2, #64	; 0x40
 8001d46:	2100      	movs	r1, #0
 8001d48:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001d4a:	2327      	movs	r3, #39	; 0x27
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	781b      	ldrb	r3, [r3, #0]
}
 8001d50:	0018      	movs	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b00b      	add	sp, #44	; 0x2c
 8001d56:	bd90      	pop	{r4, r7, pc}
 8001d58:	fe00e800 	.word	0xfe00e800

08001d5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	0008      	movs	r0, r1
 8001d66:	0011      	movs	r1, r2
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	240a      	movs	r4, #10
 8001d6c:	193b      	adds	r3, r7, r4
 8001d6e:	1c02      	adds	r2, r0, #0
 8001d70:	801a      	strh	r2, [r3, #0]
 8001d72:	2009      	movs	r0, #9
 8001d74:	183b      	adds	r3, r7, r0
 8001d76:	1c0a      	adds	r2, r1, #0
 8001d78:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d7a:	193b      	adds	r3, r7, r4
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	059b      	lsls	r3, r3, #22
 8001d80:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d82:	183b      	adds	r3, r7, r0
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	0419      	lsls	r1, r3, #16
 8001d88:	23ff      	movs	r3, #255	; 0xff
 8001d8a:	041b      	lsls	r3, r3, #16
 8001d8c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d8e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d96:	4313      	orrs	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	085b      	lsrs	r3, r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001da6:	0d51      	lsrs	r1, r2, #21
 8001da8:	2280      	movs	r2, #128	; 0x80
 8001daa:	00d2      	lsls	r2, r2, #3
 8001dac:	400a      	ands	r2, r1
 8001dae:	4907      	ldr	r1, [pc, #28]	; (8001dcc <I2C_TransferConfig+0x70>)
 8001db0:	430a      	orrs	r2, r1
 8001db2:	43d2      	mvns	r2, r2
 8001db4:	401a      	ands	r2, r3
 8001db6:	0011      	movs	r1, r2
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b007      	add	sp, #28
 8001dc8:	bd90      	pop	{r4, r7, pc}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	03ff63ff 	.word	0x03ff63ff

08001dd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2241      	movs	r2, #65	; 0x41
 8001dde:	5c9b      	ldrb	r3, [r3, r2]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b20      	cmp	r3, #32
 8001de4:	d138      	bne.n	8001e58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2240      	movs	r2, #64	; 0x40
 8001dea:	5c9b      	ldrb	r3, [r3, r2]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e032      	b.n	8001e5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2240      	movs	r2, #64	; 0x40
 8001df8:	2101      	movs	r1, #1
 8001dfa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2241      	movs	r2, #65	; 0x41
 8001e00:	2124      	movs	r1, #36	; 0x24
 8001e02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2101      	movs	r1, #1
 8001e10:	438a      	bics	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4911      	ldr	r1, [pc, #68]	; (8001e64 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e20:	400a      	ands	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6819      	ldr	r1, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2101      	movs	r1, #1
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2241      	movs	r2, #65	; 0x41
 8001e48:	2120      	movs	r1, #32
 8001e4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2240      	movs	r2, #64	; 0x40
 8001e50:	2100      	movs	r1, #0
 8001e52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e000      	b.n	8001e5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e58:	2302      	movs	r3, #2
  }
}
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b002      	add	sp, #8
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	ffffefff 	.word	0xffffefff

08001e68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2241      	movs	r2, #65	; 0x41
 8001e76:	5c9b      	ldrb	r3, [r3, r2]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	d139      	bne.n	8001ef2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2240      	movs	r2, #64	; 0x40
 8001e82:	5c9b      	ldrb	r3, [r3, r2]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e033      	b.n	8001ef4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2240      	movs	r2, #64	; 0x40
 8001e90:	2101      	movs	r1, #1
 8001e92:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2241      	movs	r2, #65	; 0x41
 8001e98:	2124      	movs	r1, #36	; 0x24
 8001e9a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	438a      	bics	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4a11      	ldr	r2, [pc, #68]	; (8001efc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2101      	movs	r1, #1
 8001eda:	430a      	orrs	r2, r1
 8001edc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2241      	movs	r2, #65	; 0x41
 8001ee2:	2120      	movs	r1, #32
 8001ee4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2240      	movs	r2, #64	; 0x40
 8001eea:	2100      	movs	r1, #0
 8001eec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e000      	b.n	8001ef4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ef2:	2302      	movs	r3, #2
  }
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b004      	add	sp, #16
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	fffff0ff 	.word	0xfffff0ff

08001f00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	0019      	movs	r1, r3
 8001f12:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d11f      	bne.n	8001f64 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001f24:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	0013      	movs	r3, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	189b      	adds	r3, r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4912      	ldr	r1, [pc, #72]	; (8001f7c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001f32:	0018      	movs	r0, r3
 8001f34:	f7fe f8f0 	bl	8000118 <__udivsi3>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f3e:	e008      	b.n	8001f52 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	e001      	b.n	8001f52 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e009      	b.n	8001f66 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d0ed      	beq.n	8001f40 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	0018      	movs	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	b004      	add	sp, #16
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	40007000 	.word	0x40007000
 8001f74:	fffff9ff 	.word	0xfffff9ff
 8001f78:	20000010 	.word	0x20000010
 8001f7c:	000f4240 	.word	0x000f4240

08001f80 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	23e0      	movs	r3, #224	; 0xe0
 8001f8a:	01db      	lsls	r3, r3, #7
 8001f8c:	4013      	ands	r3, r2
}
 8001f8e:	0018      	movs	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000

08001f98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e2fe      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d100      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x1e>
 8001fb4:	e07c      	b.n	80020b0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fb6:	4bc3      	ldr	r3, [pc, #780]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2238      	movs	r2, #56	; 0x38
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc0:	4bc0      	ldr	r3, [pc, #768]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b10      	cmp	r3, #16
 8001fce:	d102      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x3e>
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d002      	beq.n	8001fdc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d10b      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fdc:	4bb9      	ldr	r3, [pc, #740]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	029b      	lsls	r3, r3, #10
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d062      	beq.n	80020ae <HAL_RCC_OscConfig+0x116>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d15e      	bne.n	80020ae <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e2d9      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	025b      	lsls	r3, r3, #9
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_OscConfig+0x78>
 8002000:	4bb0      	ldr	r3, [pc, #704]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4baf      	ldr	r3, [pc, #700]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 8002006:	2180      	movs	r1, #128	; 0x80
 8002008:	0249      	lsls	r1, r1, #9
 800200a:	430a      	orrs	r2, r1
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	e020      	b.n	8002052 <HAL_RCC_OscConfig+0xba>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	23a0      	movs	r3, #160	; 0xa0
 8002016:	02db      	lsls	r3, r3, #11
 8002018:	429a      	cmp	r2, r3
 800201a:	d10e      	bne.n	800203a <HAL_RCC_OscConfig+0xa2>
 800201c:	4ba9      	ldr	r3, [pc, #676]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4ba8      	ldr	r3, [pc, #672]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 8002022:	2180      	movs	r1, #128	; 0x80
 8002024:	02c9      	lsls	r1, r1, #11
 8002026:	430a      	orrs	r2, r1
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	4ba6      	ldr	r3, [pc, #664]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4ba5      	ldr	r3, [pc, #660]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 8002030:	2180      	movs	r1, #128	; 0x80
 8002032:	0249      	lsls	r1, r1, #9
 8002034:	430a      	orrs	r2, r1
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	e00b      	b.n	8002052 <HAL_RCC_OscConfig+0xba>
 800203a:	4ba2      	ldr	r3, [pc, #648]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4ba1      	ldr	r3, [pc, #644]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 8002040:	49a1      	ldr	r1, [pc, #644]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 8002042:	400a      	ands	r2, r1
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	4b9f      	ldr	r3, [pc, #636]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b9e      	ldr	r3, [pc, #632]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 800204c:	499f      	ldr	r1, [pc, #636]	; (80022cc <HAL_RCC_OscConfig+0x334>)
 800204e:	400a      	ands	r2, r1
 8002050:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d014      	beq.n	8002084 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205a:	f7ff f84d 	bl	80010f8 <HAL_GetTick>
 800205e:	0003      	movs	r3, r0
 8002060:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002064:	f7ff f848 	bl	80010f8 <HAL_GetTick>
 8002068:	0002      	movs	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	; 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e298      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002076:	4b93      	ldr	r3, [pc, #588]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	029b      	lsls	r3, r3, #10
 800207e:	4013      	ands	r3, r2
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0xcc>
 8002082:	e015      	b.n	80020b0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7ff f838 	bl	80010f8 <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800208e:	f7ff f833 	bl	80010f8 <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b64      	cmp	r3, #100	; 0x64
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e283      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020a0:	4b88      	ldr	r3, [pc, #544]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	029b      	lsls	r3, r3, #10
 80020a8:	4013      	ands	r3, r2
 80020aa:	d1f0      	bne.n	800208e <HAL_RCC_OscConfig+0xf6>
 80020ac:	e000      	b.n	80020b0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2202      	movs	r2, #2
 80020b6:	4013      	ands	r3, r2
 80020b8:	d100      	bne.n	80020bc <HAL_RCC_OscConfig+0x124>
 80020ba:	e099      	b.n	80021f0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020bc:	4b81      	ldr	r3, [pc, #516]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2238      	movs	r2, #56	; 0x38
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c6:	4b7f      	ldr	r3, [pc, #508]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2203      	movs	r2, #3
 80020cc:	4013      	ands	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2b10      	cmp	r3, #16
 80020d4:	d102      	bne.n	80020dc <HAL_RCC_OscConfig+0x144>
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d002      	beq.n	80020e2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d135      	bne.n	800214e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020e2:	4b78      	ldr	r3, [pc, #480]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4013      	ands	r3, r2
 80020ec:	d005      	beq.n	80020fa <HAL_RCC_OscConfig+0x162>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e256      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fa:	4b72      	ldr	r3, [pc, #456]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4a74      	ldr	r2, [pc, #464]	; (80022d0 <HAL_RCC_OscConfig+0x338>)
 8002100:	4013      	ands	r3, r2
 8002102:	0019      	movs	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	021a      	lsls	r2, r3, #8
 800210a:	4b6e      	ldr	r3, [pc, #440]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 800210c:	430a      	orrs	r2, r1
 800210e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d112      	bne.n	800213c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002116:	4b6b      	ldr	r3, [pc, #428]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a6e      	ldr	r2, [pc, #440]	; (80022d4 <HAL_RCC_OscConfig+0x33c>)
 800211c:	4013      	ands	r3, r2
 800211e:	0019      	movs	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	4b67      	ldr	r3, [pc, #412]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 8002126:	430a      	orrs	r2, r1
 8002128:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800212a:	4b66      	ldr	r3, [pc, #408]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	0adb      	lsrs	r3, r3, #11
 8002130:	2207      	movs	r2, #7
 8002132:	4013      	ands	r3, r2
 8002134:	4a68      	ldr	r2, [pc, #416]	; (80022d8 <HAL_RCC_OscConfig+0x340>)
 8002136:	40da      	lsrs	r2, r3
 8002138:	4b68      	ldr	r3, [pc, #416]	; (80022dc <HAL_RCC_OscConfig+0x344>)
 800213a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800213c:	4b68      	ldr	r3, [pc, #416]	; (80022e0 <HAL_RCC_OscConfig+0x348>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	0018      	movs	r0, r3
 8002142:	f7fe ff7d 	bl	8001040 <HAL_InitTick>
 8002146:	1e03      	subs	r3, r0, #0
 8002148:	d051      	beq.n	80021ee <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e22c      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d030      	beq.n	80021b8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002156:	4b5b      	ldr	r3, [pc, #364]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a5e      	ldr	r2, [pc, #376]	; (80022d4 <HAL_RCC_OscConfig+0x33c>)
 800215c:	4013      	ands	r3, r2
 800215e:	0019      	movs	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	4b57      	ldr	r3, [pc, #348]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 8002166:	430a      	orrs	r2, r1
 8002168:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800216a:	4b56      	ldr	r3, [pc, #344]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4b55      	ldr	r3, [pc, #340]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 8002170:	2180      	movs	r1, #128	; 0x80
 8002172:	0049      	lsls	r1, r1, #1
 8002174:	430a      	orrs	r2, r1
 8002176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002178:	f7fe ffbe 	bl	80010f8 <HAL_GetTick>
 800217c:	0003      	movs	r3, r0
 800217e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002182:	f7fe ffb9 	bl	80010f8 <HAL_GetTick>
 8002186:	0002      	movs	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e209      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002194:	4b4b      	ldr	r3, [pc, #300]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4013      	ands	r3, r2
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a0:	4b48      	ldr	r3, [pc, #288]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4a4a      	ldr	r2, [pc, #296]	; (80022d0 <HAL_RCC_OscConfig+0x338>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	0019      	movs	r1, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	021a      	lsls	r2, r3, #8
 80021b0:	4b44      	ldr	r3, [pc, #272]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 80021b2:	430a      	orrs	r2, r1
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	e01b      	b.n	80021f0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80021b8:	4b42      	ldr	r3, [pc, #264]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b41      	ldr	r3, [pc, #260]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 80021be:	4949      	ldr	r1, [pc, #292]	; (80022e4 <HAL_RCC_OscConfig+0x34c>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7fe ff98 	bl	80010f8 <HAL_GetTick>
 80021c8:	0003      	movs	r3, r0
 80021ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ce:	f7fe ff93 	bl	80010f8 <HAL_GetTick>
 80021d2:	0002      	movs	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e1e3      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021e0:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4013      	ands	r3, r2
 80021ea:	d1f0      	bne.n	80021ce <HAL_RCC_OscConfig+0x236>
 80021ec:	e000      	b.n	80021f0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2208      	movs	r2, #8
 80021f6:	4013      	ands	r3, r2
 80021f8:	d047      	beq.n	800228a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80021fa:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2238      	movs	r2, #56	; 0x38
 8002200:	4013      	ands	r3, r2
 8002202:	2b18      	cmp	r3, #24
 8002204:	d10a      	bne.n	800221c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002206:	4b2f      	ldr	r3, [pc, #188]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 8002208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220a:	2202      	movs	r2, #2
 800220c:	4013      	ands	r3, r2
 800220e:	d03c      	beq.n	800228a <HAL_RCC_OscConfig+0x2f2>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d138      	bne.n	800228a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e1c5      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d019      	beq.n	8002258 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002224:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 8002226:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002228:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 800222a:	2101      	movs	r1, #1
 800222c:	430a      	orrs	r2, r1
 800222e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe ff62 	bl	80010f8 <HAL_GetTick>
 8002234:	0003      	movs	r3, r0
 8002236:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223a:	f7fe ff5d 	bl	80010f8 <HAL_GetTick>
 800223e:	0002      	movs	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e1ad      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800224c:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 800224e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002250:	2202      	movs	r2, #2
 8002252:	4013      	ands	r3, r2
 8002254:	d0f1      	beq.n	800223a <HAL_RCC_OscConfig+0x2a2>
 8002256:	e018      	b.n	800228a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002258:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 800225a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 800225e:	2101      	movs	r1, #1
 8002260:	438a      	bics	r2, r1
 8002262:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe ff48 	bl	80010f8 <HAL_GetTick>
 8002268:	0003      	movs	r3, r0
 800226a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800226e:	f7fe ff43 	bl	80010f8 <HAL_GetTick>
 8002272:	0002      	movs	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e193      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002280:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 8002282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002284:	2202      	movs	r2, #2
 8002286:	4013      	ands	r3, r2
 8002288:	d1f1      	bne.n	800226e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2204      	movs	r2, #4
 8002290:	4013      	ands	r3, r2
 8002292:	d100      	bne.n	8002296 <HAL_RCC_OscConfig+0x2fe>
 8002294:	e0c6      	b.n	8002424 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002296:	231f      	movs	r3, #31
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800229e:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2238      	movs	r2, #56	; 0x38
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	d11e      	bne.n	80022e8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_RCC_OscConfig+0x32c>)
 80022ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ae:	2202      	movs	r2, #2
 80022b0:	4013      	ands	r3, r2
 80022b2:	d100      	bne.n	80022b6 <HAL_RCC_OscConfig+0x31e>
 80022b4:	e0b6      	b.n	8002424 <HAL_RCC_OscConfig+0x48c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d000      	beq.n	80022c0 <HAL_RCC_OscConfig+0x328>
 80022be:	e0b1      	b.n	8002424 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e171      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
 80022c4:	40021000 	.word	0x40021000
 80022c8:	fffeffff 	.word	0xfffeffff
 80022cc:	fffbffff 	.word	0xfffbffff
 80022d0:	ffff80ff 	.word	0xffff80ff
 80022d4:	ffffc7ff 	.word	0xffffc7ff
 80022d8:	00f42400 	.word	0x00f42400
 80022dc:	20000010 	.word	0x20000010
 80022e0:	20000014 	.word	0x20000014
 80022e4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022e8:	4bb1      	ldr	r3, [pc, #708]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 80022ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	055b      	lsls	r3, r3, #21
 80022f0:	4013      	ands	r3, r2
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_OscConfig+0x360>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <HAL_RCC_OscConfig+0x362>
 80022f8:	2300      	movs	r3, #0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d011      	beq.n	8002322 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80022fe:	4bac      	ldr	r3, [pc, #688]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 8002300:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002302:	4bab      	ldr	r3, [pc, #684]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 8002304:	2180      	movs	r1, #128	; 0x80
 8002306:	0549      	lsls	r1, r1, #21
 8002308:	430a      	orrs	r2, r1
 800230a:	63da      	str	r2, [r3, #60]	; 0x3c
 800230c:	4ba8      	ldr	r3, [pc, #672]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 800230e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	055b      	lsls	r3, r3, #21
 8002314:	4013      	ands	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800231a:	231f      	movs	r3, #31
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002322:	4ba4      	ldr	r3, [pc, #656]	; (80025b4 <HAL_RCC_OscConfig+0x61c>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4013      	ands	r3, r2
 800232c:	d11a      	bne.n	8002364 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800232e:	4ba1      	ldr	r3, [pc, #644]	; (80025b4 <HAL_RCC_OscConfig+0x61c>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4ba0      	ldr	r3, [pc, #640]	; (80025b4 <HAL_RCC_OscConfig+0x61c>)
 8002334:	2180      	movs	r1, #128	; 0x80
 8002336:	0049      	lsls	r1, r1, #1
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800233c:	f7fe fedc 	bl	80010f8 <HAL_GetTick>
 8002340:	0003      	movs	r3, r0
 8002342:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002346:	f7fe fed7 	bl	80010f8 <HAL_GetTick>
 800234a:	0002      	movs	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e127      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002358:	4b96      	ldr	r3, [pc, #600]	; (80025b4 <HAL_RCC_OscConfig+0x61c>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4013      	ands	r3, r2
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d106      	bne.n	800237a <HAL_RCC_OscConfig+0x3e2>
 800236c:	4b90      	ldr	r3, [pc, #576]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 800236e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002370:	4b8f      	ldr	r3, [pc, #572]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 8002372:	2101      	movs	r1, #1
 8002374:	430a      	orrs	r2, r1
 8002376:	65da      	str	r2, [r3, #92]	; 0x5c
 8002378:	e01c      	b.n	80023b4 <HAL_RCC_OscConfig+0x41c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b05      	cmp	r3, #5
 8002380:	d10c      	bne.n	800239c <HAL_RCC_OscConfig+0x404>
 8002382:	4b8b      	ldr	r3, [pc, #556]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 8002384:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002386:	4b8a      	ldr	r3, [pc, #552]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 8002388:	2104      	movs	r1, #4
 800238a:	430a      	orrs	r2, r1
 800238c:	65da      	str	r2, [r3, #92]	; 0x5c
 800238e:	4b88      	ldr	r3, [pc, #544]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 8002390:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002392:	4b87      	ldr	r3, [pc, #540]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 8002394:	2101      	movs	r1, #1
 8002396:	430a      	orrs	r2, r1
 8002398:	65da      	str	r2, [r3, #92]	; 0x5c
 800239a:	e00b      	b.n	80023b4 <HAL_RCC_OscConfig+0x41c>
 800239c:	4b84      	ldr	r3, [pc, #528]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 800239e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023a0:	4b83      	ldr	r3, [pc, #524]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 80023a2:	2101      	movs	r1, #1
 80023a4:	438a      	bics	r2, r1
 80023a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80023a8:	4b81      	ldr	r3, [pc, #516]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 80023aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023ac:	4b80      	ldr	r3, [pc, #512]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 80023ae:	2104      	movs	r1, #4
 80023b0:	438a      	bics	r2, r1
 80023b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d014      	beq.n	80023e6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7fe fe9c 	bl	80010f8 <HAL_GetTick>
 80023c0:	0003      	movs	r3, r0
 80023c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c4:	e009      	b.n	80023da <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c6:	f7fe fe97 	bl	80010f8 <HAL_GetTick>
 80023ca:	0002      	movs	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	4a79      	ldr	r2, [pc, #484]	; (80025b8 <HAL_RCC_OscConfig+0x620>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e0e6      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023da:	4b75      	ldr	r3, [pc, #468]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 80023dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023de:	2202      	movs	r2, #2
 80023e0:	4013      	ands	r3, r2
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x42e>
 80023e4:	e013      	b.n	800240e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e6:	f7fe fe87 	bl	80010f8 <HAL_GetTick>
 80023ea:	0003      	movs	r3, r0
 80023ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023ee:	e009      	b.n	8002404 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f0:	f7fe fe82 	bl	80010f8 <HAL_GetTick>
 80023f4:	0002      	movs	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	4a6f      	ldr	r2, [pc, #444]	; (80025b8 <HAL_RCC_OscConfig+0x620>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e0d1      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002404:	4b6a      	ldr	r3, [pc, #424]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 8002406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002408:	2202      	movs	r2, #2
 800240a:	4013      	ands	r3, r2
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800240e:	231f      	movs	r3, #31
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d105      	bne.n	8002424 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002418:	4b65      	ldr	r3, [pc, #404]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 800241a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800241c:	4b64      	ldr	r3, [pc, #400]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 800241e:	4967      	ldr	r1, [pc, #412]	; (80025bc <HAL_RCC_OscConfig+0x624>)
 8002420:	400a      	ands	r2, r1
 8002422:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d100      	bne.n	800242e <HAL_RCC_OscConfig+0x496>
 800242c:	e0bb      	b.n	80025a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800242e:	4b60      	ldr	r3, [pc, #384]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2238      	movs	r2, #56	; 0x38
 8002434:	4013      	ands	r3, r2
 8002436:	2b10      	cmp	r3, #16
 8002438:	d100      	bne.n	800243c <HAL_RCC_OscConfig+0x4a4>
 800243a:	e07b      	b.n	8002534 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	2b02      	cmp	r3, #2
 8002442:	d156      	bne.n	80024f2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002444:	4b5a      	ldr	r3, [pc, #360]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b59      	ldr	r3, [pc, #356]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 800244a:	495d      	ldr	r1, [pc, #372]	; (80025c0 <HAL_RCC_OscConfig+0x628>)
 800244c:	400a      	ands	r2, r1
 800244e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe fe52 	bl	80010f8 <HAL_GetTick>
 8002454:	0003      	movs	r3, r0
 8002456:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245a:	f7fe fe4d 	bl	80010f8 <HAL_GetTick>
 800245e:	0002      	movs	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e09d      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800246c:	4b50      	ldr	r3, [pc, #320]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	049b      	lsls	r3, r3, #18
 8002474:	4013      	ands	r3, r2
 8002476:	d1f0      	bne.n	800245a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002478:	4b4d      	ldr	r3, [pc, #308]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4a51      	ldr	r2, [pc, #324]	; (80025c4 <HAL_RCC_OscConfig+0x62c>)
 800247e:	4013      	ands	r3, r2
 8002480:	0019      	movs	r1, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1a      	ldr	r2, [r3, #32]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a4:	431a      	orrs	r2, r3
 80024a6:	4b42      	ldr	r3, [pc, #264]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 80024a8:	430a      	orrs	r2, r1
 80024aa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ac:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b3f      	ldr	r3, [pc, #252]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 80024b2:	2180      	movs	r1, #128	; 0x80
 80024b4:	0449      	lsls	r1, r1, #17
 80024b6:	430a      	orrs	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80024ba:	4b3d      	ldr	r3, [pc, #244]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	4b3c      	ldr	r3, [pc, #240]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 80024c0:	2180      	movs	r1, #128	; 0x80
 80024c2:	0549      	lsls	r1, r1, #21
 80024c4:	430a      	orrs	r2, r1
 80024c6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe fe16 	bl	80010f8 <HAL_GetTick>
 80024cc:	0003      	movs	r3, r0
 80024ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d2:	f7fe fe11 	bl	80010f8 <HAL_GetTick>
 80024d6:	0002      	movs	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e061      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e4:	4b32      	ldr	r3, [pc, #200]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	049b      	lsls	r3, r3, #18
 80024ec:	4013      	ands	r3, r2
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x53a>
 80024f0:	e059      	b.n	80025a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f2:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 80024f8:	4931      	ldr	r1, [pc, #196]	; (80025c0 <HAL_RCC_OscConfig+0x628>)
 80024fa:	400a      	ands	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fe:	f7fe fdfb 	bl	80010f8 <HAL_GetTick>
 8002502:	0003      	movs	r3, r0
 8002504:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002508:	f7fe fdf6 	bl	80010f8 <HAL_GetTick>
 800250c:	0002      	movs	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e046      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800251a:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	049b      	lsls	r3, r3, #18
 8002522:	4013      	ands	r3, r2
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002526:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 800252c:	4926      	ldr	r1, [pc, #152]	; (80025c8 <HAL_RCC_OscConfig+0x630>)
 800252e:	400a      	ands	r2, r1
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	e038      	b.n	80025a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e033      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_RCC_OscConfig+0x618>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2203      	movs	r2, #3
 800254a:	401a      	ands	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	429a      	cmp	r2, r3
 8002552:	d126      	bne.n	80025a2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2270      	movs	r2, #112	; 0x70
 8002558:	401a      	ands	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d11f      	bne.n	80025a2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	23fe      	movs	r3, #254	; 0xfe
 8002566:	01db      	lsls	r3, r3, #7
 8002568:	401a      	ands	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002570:	429a      	cmp	r2, r3
 8002572:	d116      	bne.n	80025a2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	23f8      	movs	r3, #248	; 0xf8
 8002578:	039b      	lsls	r3, r3, #14
 800257a:	401a      	ands	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002580:	429a      	cmp	r2, r3
 8002582:	d10e      	bne.n	80025a2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	23e0      	movs	r3, #224	; 0xe0
 8002588:	051b      	lsls	r3, r3, #20
 800258a:	401a      	ands	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	0f5b      	lsrs	r3, r3, #29
 8002598:	075a      	lsls	r2, r3, #29
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b008      	add	sp, #32
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40007000 	.word	0x40007000
 80025b8:	00001388 	.word	0x00001388
 80025bc:	efffffff 	.word	0xefffffff
 80025c0:	feffffff 	.word	0xfeffffff
 80025c4:	11c1808c 	.word	0x11c1808c
 80025c8:	eefefffc 	.word	0xeefefffc

080025cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0e9      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e0:	4b76      	ldr	r3, [pc, #472]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2207      	movs	r2, #7
 80025e6:	4013      	ands	r3, r2
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d91e      	bls.n	800262c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	4b73      	ldr	r3, [pc, #460]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2207      	movs	r2, #7
 80025f4:	4393      	bics	r3, r2
 80025f6:	0019      	movs	r1, r3
 80025f8:	4b70      	ldr	r3, [pc, #448]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002600:	f7fe fd7a 	bl	80010f8 <HAL_GetTick>
 8002604:	0003      	movs	r3, r0
 8002606:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002608:	e009      	b.n	800261e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260a:	f7fe fd75 	bl	80010f8 <HAL_GetTick>
 800260e:	0002      	movs	r2, r0
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	4a6a      	ldr	r2, [pc, #424]	; (80027c0 <HAL_RCC_ClockConfig+0x1f4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e0ca      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800261e:	4b67      	ldr	r3, [pc, #412]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2207      	movs	r2, #7
 8002624:	4013      	ands	r3, r2
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d1ee      	bne.n	800260a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2202      	movs	r2, #2
 8002632:	4013      	ands	r3, r2
 8002634:	d015      	beq.n	8002662 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2204      	movs	r2, #4
 800263c:	4013      	ands	r3, r2
 800263e:	d006      	beq.n	800264e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002640:	4b60      	ldr	r3, [pc, #384]	; (80027c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	4b5f      	ldr	r3, [pc, #380]	; (80027c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002646:	21e0      	movs	r1, #224	; 0xe0
 8002648:	01c9      	lsls	r1, r1, #7
 800264a:	430a      	orrs	r2, r1
 800264c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800264e:	4b5d      	ldr	r3, [pc, #372]	; (80027c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	4a5d      	ldr	r2, [pc, #372]	; (80027c8 <HAL_RCC_ClockConfig+0x1fc>)
 8002654:	4013      	ands	r3, r2
 8002656:	0019      	movs	r1, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	4b59      	ldr	r3, [pc, #356]	; (80027c4 <HAL_RCC_ClockConfig+0x1f8>)
 800265e:	430a      	orrs	r2, r1
 8002660:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2201      	movs	r2, #1
 8002668:	4013      	ands	r3, r2
 800266a:	d057      	beq.n	800271c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d107      	bne.n	8002684 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002674:	4b53      	ldr	r3, [pc, #332]	; (80027c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	029b      	lsls	r3, r3, #10
 800267c:	4013      	ands	r3, r2
 800267e:	d12b      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e097      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d107      	bne.n	800269c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800268c:	4b4d      	ldr	r3, [pc, #308]	; (80027c4 <HAL_RCC_ClockConfig+0x1f8>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	049b      	lsls	r3, r3, #18
 8002694:	4013      	ands	r3, r2
 8002696:	d11f      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e08b      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d107      	bne.n	80026b4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026a4:	4b47      	ldr	r3, [pc, #284]	; (80027c4 <HAL_RCC_ClockConfig+0x1f8>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4013      	ands	r3, r2
 80026ae:	d113      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e07f      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026bc:	4b41      	ldr	r3, [pc, #260]	; (80027c4 <HAL_RCC_ClockConfig+0x1f8>)
 80026be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c0:	2202      	movs	r2, #2
 80026c2:	4013      	ands	r3, r2
 80026c4:	d108      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e074      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ca:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <HAL_RCC_ClockConfig+0x1f8>)
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	2202      	movs	r2, #2
 80026d0:	4013      	ands	r3, r2
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e06d      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026d8:	4b3a      	ldr	r3, [pc, #232]	; (80027c4 <HAL_RCC_ClockConfig+0x1f8>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2207      	movs	r2, #7
 80026de:	4393      	bics	r3, r2
 80026e0:	0019      	movs	r1, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	4b37      	ldr	r3, [pc, #220]	; (80027c4 <HAL_RCC_ClockConfig+0x1f8>)
 80026e8:	430a      	orrs	r2, r1
 80026ea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ec:	f7fe fd04 	bl	80010f8 <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f4:	e009      	b.n	800270a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f6:	f7fe fcff 	bl	80010f8 <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	4a2f      	ldr	r2, [pc, #188]	; (80027c0 <HAL_RCC_ClockConfig+0x1f4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e054      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270a:	4b2e      	ldr	r3, [pc, #184]	; (80027c4 <HAL_RCC_ClockConfig+0x1f8>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2238      	movs	r2, #56	; 0x38
 8002710:	401a      	ands	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	429a      	cmp	r2, r3
 800271a:	d1ec      	bne.n	80026f6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800271c:	4b27      	ldr	r3, [pc, #156]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2207      	movs	r2, #7
 8002722:	4013      	ands	r3, r2
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d21e      	bcs.n	8002768 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b24      	ldr	r3, [pc, #144]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2207      	movs	r2, #7
 8002730:	4393      	bics	r3, r2
 8002732:	0019      	movs	r1, r3
 8002734:	4b21      	ldr	r3, [pc, #132]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800273c:	f7fe fcdc 	bl	80010f8 <HAL_GetTick>
 8002740:	0003      	movs	r3, r0
 8002742:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002744:	e009      	b.n	800275a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002746:	f7fe fcd7 	bl	80010f8 <HAL_GetTick>
 800274a:	0002      	movs	r2, r0
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	4a1b      	ldr	r2, [pc, #108]	; (80027c0 <HAL_RCC_ClockConfig+0x1f4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e02c      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800275a:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_RCC_ClockConfig+0x1f0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2207      	movs	r2, #7
 8002760:	4013      	ands	r3, r2
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d1ee      	bne.n	8002746 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2204      	movs	r2, #4
 800276e:	4013      	ands	r3, r2
 8002770:	d009      	beq.n	8002786 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002772:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4a15      	ldr	r2, [pc, #84]	; (80027cc <HAL_RCC_ClockConfig+0x200>)
 8002778:	4013      	ands	r3, r2
 800277a:	0019      	movs	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002782:	430a      	orrs	r2, r1
 8002784:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002786:	f000 f829 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 800278a:	0001      	movs	r1, r0
 800278c:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_RCC_ClockConfig+0x1f8>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	0a1b      	lsrs	r3, r3, #8
 8002792:	220f      	movs	r2, #15
 8002794:	401a      	ands	r2, r3
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_RCC_ClockConfig+0x204>)
 8002798:	0092      	lsls	r2, r2, #2
 800279a:	58d3      	ldr	r3, [r2, r3]
 800279c:	221f      	movs	r2, #31
 800279e:	4013      	ands	r3, r2
 80027a0:	000a      	movs	r2, r1
 80027a2:	40da      	lsrs	r2, r3
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_RCC_ClockConfig+0x208>)
 80027a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_ClockConfig+0x20c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	0018      	movs	r0, r3
 80027ae:	f7fe fc47 	bl	8001040 <HAL_InitTick>
 80027b2:	0003      	movs	r3, r0
}
 80027b4:	0018      	movs	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b004      	add	sp, #16
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40022000 	.word	0x40022000
 80027c0:	00001388 	.word	0x00001388
 80027c4:	40021000 	.word	0x40021000
 80027c8:	fffff0ff 	.word	0xfffff0ff
 80027cc:	ffff8fff 	.word	0xffff8fff
 80027d0:	08005328 	.word	0x08005328
 80027d4:	20000010 	.word	0x20000010
 80027d8:	20000014 	.word	0x20000014

080027dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027e2:	4b3c      	ldr	r3, [pc, #240]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2238      	movs	r2, #56	; 0x38
 80027e8:	4013      	ands	r3, r2
 80027ea:	d10f      	bne.n	800280c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80027ec:	4b39      	ldr	r3, [pc, #228]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	0adb      	lsrs	r3, r3, #11
 80027f2:	2207      	movs	r2, #7
 80027f4:	4013      	ands	r3, r2
 80027f6:	2201      	movs	r2, #1
 80027f8:	409a      	lsls	r2, r3
 80027fa:	0013      	movs	r3, r2
 80027fc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80027fe:	6839      	ldr	r1, [r7, #0]
 8002800:	4835      	ldr	r0, [pc, #212]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002802:	f7fd fc89 	bl	8000118 <__udivsi3>
 8002806:	0003      	movs	r3, r0
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	e05d      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800280c:	4b31      	ldr	r3, [pc, #196]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2238      	movs	r2, #56	; 0x38
 8002812:	4013      	ands	r3, r2
 8002814:	2b08      	cmp	r3, #8
 8002816:	d102      	bne.n	800281e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002818:	4b30      	ldr	r3, [pc, #192]	; (80028dc <HAL_RCC_GetSysClockFreq+0x100>)
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	e054      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800281e:	4b2d      	ldr	r3, [pc, #180]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2238      	movs	r2, #56	; 0x38
 8002824:	4013      	ands	r3, r2
 8002826:	2b10      	cmp	r3, #16
 8002828:	d138      	bne.n	800289c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800282a:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2203      	movs	r2, #3
 8002830:	4013      	ands	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002834:	4b27      	ldr	r3, [pc, #156]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	2207      	movs	r2, #7
 800283c:	4013      	ands	r3, r2
 800283e:	3301      	adds	r3, #1
 8002840:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b03      	cmp	r3, #3
 8002846:	d10d      	bne.n	8002864 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	4824      	ldr	r0, [pc, #144]	; (80028dc <HAL_RCC_GetSysClockFreq+0x100>)
 800284c:	f7fd fc64 	bl	8000118 <__udivsi3>
 8002850:	0003      	movs	r3, r0
 8002852:	0019      	movs	r1, r3
 8002854:	4b1f      	ldr	r3, [pc, #124]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	227f      	movs	r2, #127	; 0x7f
 800285c:	4013      	ands	r3, r2
 800285e:	434b      	muls	r3, r1
 8002860:	617b      	str	r3, [r7, #20]
        break;
 8002862:	e00d      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002864:	68b9      	ldr	r1, [r7, #8]
 8002866:	481c      	ldr	r0, [pc, #112]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002868:	f7fd fc56 	bl	8000118 <__udivsi3>
 800286c:	0003      	movs	r3, r0
 800286e:	0019      	movs	r1, r3
 8002870:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	0a1b      	lsrs	r3, r3, #8
 8002876:	227f      	movs	r2, #127	; 0x7f
 8002878:	4013      	ands	r3, r2
 800287a:	434b      	muls	r3, r1
 800287c:	617b      	str	r3, [r7, #20]
        break;
 800287e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002880:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	0f5b      	lsrs	r3, r3, #29
 8002886:	2207      	movs	r2, #7
 8002888:	4013      	ands	r3, r2
 800288a:	3301      	adds	r3, #1
 800288c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	6978      	ldr	r0, [r7, #20]
 8002892:	f7fd fc41 	bl	8000118 <__udivsi3>
 8002896:	0003      	movs	r3, r0
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	e015      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800289c:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2238      	movs	r2, #56	; 0x38
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d103      	bne.n	80028b0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	021b      	lsls	r3, r3, #8
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	e00b      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2238      	movs	r2, #56	; 0x38
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b18      	cmp	r3, #24
 80028ba:	d103      	bne.n	80028c4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80028bc:	23fa      	movs	r3, #250	; 0xfa
 80028be:	01db      	lsls	r3, r3, #7
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	e001      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028c8:	693b      	ldr	r3, [r7, #16]
}
 80028ca:	0018      	movs	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b006      	add	sp, #24
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	40021000 	.word	0x40021000
 80028d8:	00f42400 	.word	0x00f42400
 80028dc:	007a1200 	.word	0x007a1200

080028e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e4:	4b02      	ldr	r3, [pc, #8]	; (80028f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80028e6:	681b      	ldr	r3, [r3, #0]
}
 80028e8:	0018      	movs	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	20000010 	.word	0x20000010

080028f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f4:	b5b0      	push	{r4, r5, r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80028f8:	f7ff fff2 	bl	80028e0 <HAL_RCC_GetHCLKFreq>
 80028fc:	0004      	movs	r4, r0
 80028fe:	f7ff fb3f 	bl	8001f80 <LL_RCC_GetAPB1Prescaler>
 8002902:	0003      	movs	r3, r0
 8002904:	0b1a      	lsrs	r2, r3, #12
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002908:	0092      	lsls	r2, r2, #2
 800290a:	58d3      	ldr	r3, [r2, r3]
 800290c:	221f      	movs	r2, #31
 800290e:	4013      	ands	r3, r2
 8002910:	40dc      	lsrs	r4, r3
 8002912:	0023      	movs	r3, r4
}
 8002914:	0018      	movs	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	bdb0      	pop	{r4, r5, r7, pc}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	08005368 	.word	0x08005368

08002920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002928:	2313      	movs	r3, #19
 800292a:	18fb      	adds	r3, r7, r3
 800292c:	2200      	movs	r2, #0
 800292e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002930:	2312      	movs	r3, #18
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	029b      	lsls	r3, r3, #10
 8002940:	4013      	ands	r3, r2
 8002942:	d100      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002944:	e0a3      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002946:	2011      	movs	r0, #17
 8002948:	183b      	adds	r3, r7, r0
 800294a:	2200      	movs	r2, #0
 800294c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294e:	4ba5      	ldr	r3, [pc, #660]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002950:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	055b      	lsls	r3, r3, #21
 8002956:	4013      	ands	r3, r2
 8002958:	d110      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800295a:	4ba2      	ldr	r3, [pc, #648]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800295c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800295e:	4ba1      	ldr	r3, [pc, #644]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002960:	2180      	movs	r1, #128	; 0x80
 8002962:	0549      	lsls	r1, r1, #21
 8002964:	430a      	orrs	r2, r1
 8002966:	63da      	str	r2, [r3, #60]	; 0x3c
 8002968:	4b9e      	ldr	r3, [pc, #632]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800296a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	055b      	lsls	r3, r3, #21
 8002970:	4013      	ands	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002976:	183b      	adds	r3, r7, r0
 8002978:	2201      	movs	r2, #1
 800297a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800297c:	4b9a      	ldr	r3, [pc, #616]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b99      	ldr	r3, [pc, #612]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002982:	2180      	movs	r1, #128	; 0x80
 8002984:	0049      	lsls	r1, r1, #1
 8002986:	430a      	orrs	r2, r1
 8002988:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800298a:	f7fe fbb5 	bl	80010f8 <HAL_GetTick>
 800298e:	0003      	movs	r3, r0
 8002990:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002992:	e00b      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002994:	f7fe fbb0 	bl	80010f8 <HAL_GetTick>
 8002998:	0002      	movs	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d904      	bls.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80029a2:	2313      	movs	r3, #19
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	2203      	movs	r2, #3
 80029a8:	701a      	strb	r2, [r3, #0]
        break;
 80029aa:	e005      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029ac:	4b8e      	ldr	r3, [pc, #568]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4013      	ands	r3, r2
 80029b6:	d0ed      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80029b8:	2313      	movs	r3, #19
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d154      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029c2:	4b88      	ldr	r3, [pc, #544]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029c6:	23c0      	movs	r3, #192	; 0xc0
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4013      	ands	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d019      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d014      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029de:	4b81      	ldr	r3, [pc, #516]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	4a82      	ldr	r2, [pc, #520]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029e8:	4b7e      	ldr	r3, [pc, #504]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029ec:	4b7d      	ldr	r3, [pc, #500]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029ee:	2180      	movs	r1, #128	; 0x80
 80029f0:	0249      	lsls	r1, r1, #9
 80029f2:	430a      	orrs	r2, r1
 80029f4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029f6:	4b7b      	ldr	r3, [pc, #492]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029fa:	4b7a      	ldr	r3, [pc, #488]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029fc:	497c      	ldr	r1, [pc, #496]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80029fe:	400a      	ands	r2, r1
 8002a00:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a02:	4b78      	ldr	r3, [pc, #480]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d016      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7fe fb72 	bl	80010f8 <HAL_GetTick>
 8002a14:	0003      	movs	r3, r0
 8002a16:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a18:	e00c      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1a:	f7fe fb6d 	bl	80010f8 <HAL_GetTick>
 8002a1e:	0002      	movs	r2, r0
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	4a73      	ldr	r2, [pc, #460]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d904      	bls.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002a2a:	2313      	movs	r3, #19
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	2203      	movs	r2, #3
 8002a30:	701a      	strb	r2, [r3, #0]
            break;
 8002a32:	e004      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a34:	4b6b      	ldr	r3, [pc, #428]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a38:	2202      	movs	r2, #2
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d0ed      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002a3e:	2313      	movs	r3, #19
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10a      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a48:	4b66      	ldr	r3, [pc, #408]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4c:	4a67      	ldr	r2, [pc, #412]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	0019      	movs	r1, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a56:	4b63      	ldr	r3, [pc, #396]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a5c:	e00c      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a5e:	2312      	movs	r3, #18
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	2213      	movs	r2, #19
 8002a64:	18ba      	adds	r2, r7, r2
 8002a66:	7812      	ldrb	r2, [r2, #0]
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	e005      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a6c:	2312      	movs	r3, #18
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	2213      	movs	r2, #19
 8002a72:	18ba      	adds	r2, r7, r2
 8002a74:	7812      	ldrb	r2, [r2, #0]
 8002a76:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a78:	2311      	movs	r3, #17
 8002a7a:	18fb      	adds	r3, r7, r3
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d105      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a82:	4b58      	ldr	r3, [pc, #352]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a86:	4b57      	ldr	r3, [pc, #348]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a88:	495b      	ldr	r1, [pc, #364]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002a8a:	400a      	ands	r2, r1
 8002a8c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2201      	movs	r2, #1
 8002a94:	4013      	ands	r3, r2
 8002a96:	d009      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a98:	4b52      	ldr	r3, [pc, #328]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	4393      	bics	r3, r2
 8002aa0:	0019      	movs	r1, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	4b4f      	ldr	r3, [pc, #316]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2210      	movs	r2, #16
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d009      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ab6:	4b4b      	ldr	r3, [pc, #300]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aba:	4a50      	ldr	r2, [pc, #320]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	0019      	movs	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	2380      	movs	r3, #128	; 0x80
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d009      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ad6:	4b43      	ldr	r3, [pc, #268]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ada:	4a49      	ldr	r2, [pc, #292]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	0019      	movs	r1, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	695a      	ldr	r2, [r3, #20]
 8002ae4:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4013      	ands	r3, r2
 8002af4:	d009      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002af6:	4b3b      	ldr	r3, [pc, #236]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afa:	4a42      	ldr	r2, [pc, #264]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	0019      	movs	r1, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699a      	ldr	r2, [r3, #24]
 8002b04:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b06:	430a      	orrs	r2, r1
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	4013      	ands	r3, r2
 8002b12:	d009      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b14:	4b33      	ldr	r3, [pc, #204]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b18:	4a3b      	ldr	r2, [pc, #236]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	4b30      	ldr	r3, [pc, #192]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b24:	430a      	orrs	r2, r1
 8002b26:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	01db      	lsls	r3, r3, #7
 8002b30:	4013      	ands	r3, r2
 8002b32:	d015      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b34:	4b2b      	ldr	r3, [pc, #172]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	0899      	lsrs	r1, r3, #2
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69da      	ldr	r2, [r3, #28]
 8002b40:	4b28      	ldr	r3, [pc, #160]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b42:	430a      	orrs	r2, r1
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	05db      	lsls	r3, r3, #23
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d106      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b52:	4b24      	ldr	r3, [pc, #144]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b58:	2180      	movs	r1, #128	; 0x80
 8002b5a:	0249      	lsls	r1, r1, #9
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	2380      	movs	r3, #128	; 0x80
 8002b66:	039b      	lsls	r3, r3, #14
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d016      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b6c:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b70:	4a26      	ldr	r2, [pc, #152]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1a      	ldr	r2, [r3, #32]
 8002b7a:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1a      	ldr	r2, [r3, #32]
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	03db      	lsls	r3, r3, #15
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d106      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b8c:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b92:	2180      	movs	r1, #128	; 0x80
 8002b94:	0449      	lsls	r1, r1, #17
 8002b96:	430a      	orrs	r2, r1
 8002b98:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d016      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002ba6:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002baa:	4a19      	ldr	r2, [pc, #100]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	0019      	movs	r1, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691a      	ldr	r2, [r3, #16]
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	01db      	lsls	r3, r3, #7
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d106      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bcc:	2180      	movs	r1, #128	; 0x80
 8002bce:	0249      	lsls	r1, r1, #9
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002bd4:	2312      	movs	r3, #18
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	781b      	ldrb	r3, [r3, #0]
}
 8002bda:	0018      	movs	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b006      	add	sp, #24
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40007000 	.word	0x40007000
 8002bec:	fffffcff 	.word	0xfffffcff
 8002bf0:	fffeffff 	.word	0xfffeffff
 8002bf4:	00001388 	.word	0x00001388
 8002bf8:	efffffff 	.word	0xefffffff
 8002bfc:	fffff3ff 	.word	0xfffff3ff
 8002c00:	fff3ffff 	.word	0xfff3ffff
 8002c04:	ffcfffff 	.word	0xffcfffff
 8002c08:	ffffcfff 	.word	0xffffcfff
 8002c0c:	ffbfffff 	.word	0xffbfffff
 8002c10:	ffff3fff 	.word	0xffff3fff

08002c14 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c14:	b5b0      	push	{r4, r5, r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c1c:	230f      	movs	r3, #15
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d100      	bne.n	8002c2c <HAL_RTC_Init+0x18>
 8002c2a:	e08c      	b.n	8002d46 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2229      	movs	r2, #41	; 0x29
 8002c30:	5c9b      	ldrb	r3, [r3, r2]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10b      	bne.n	8002c50 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2228      	movs	r2, #40	; 0x28
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2288      	movs	r2, #136	; 0x88
 8002c44:	0212      	lsls	r2, r2, #8
 8002c46:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f7fe f830 	bl	8000cb0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2229      	movs	r2, #41	; 0x29
 8002c54:	2102      	movs	r1, #2
 8002c56:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2210      	movs	r2, #16
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b10      	cmp	r3, #16
 8002c64:	d062      	beq.n	8002d2c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	22ca      	movs	r2, #202	; 0xca
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2253      	movs	r2, #83	; 0x53
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002c76:	250f      	movs	r5, #15
 8002c78:	197c      	adds	r4, r7, r5
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f000 fcba 	bl	80035f6 <RTC_EnterInitMode>
 8002c82:	0003      	movs	r3, r0
 8002c84:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002c86:	0028      	movs	r0, r5
 8002c88:	183b      	adds	r3, r7, r0
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d12c      	bne.n	8002cea <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699a      	ldr	r2, [r3, #24]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	492e      	ldr	r1, [pc, #184]	; (8002d54 <HAL_RTC_Init+0x140>)
 8002c9c:	400a      	ands	r2, r1
 8002c9e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6999      	ldr	r1, [r3, #24]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6912      	ldr	r2, [r2, #16]
 8002cc6:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6919      	ldr	r1, [r3, #16]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	041a      	lsls	r2, r3, #16
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002cdc:	183c      	adds	r4, r7, r0
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f000 fccb 	bl	800367c <RTC_ExitInitMode>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002cea:	230f      	movs	r3, #15
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d116      	bne.n	8002d22 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	00d2      	lsls	r2, r2, #3
 8002d00:	08d2      	lsrs	r2, r2, #3
 8002d02:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6999      	ldr	r1, [r3, #24]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	22ff      	movs	r2, #255	; 0xff
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24
 8002d2a:	e003      	b.n	8002d34 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002d2c:	230f      	movs	r3, #15
 8002d2e:	18fb      	adds	r3, r7, r3
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002d34:	230f      	movs	r3, #15
 8002d36:	18fb      	adds	r3, r7, r3
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d103      	bne.n	8002d46 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2229      	movs	r2, #41	; 0x29
 8002d42:	2101      	movs	r1, #1
 8002d44:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002d46:	230f      	movs	r3, #15
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	781b      	ldrb	r3, [r3, #0]
}
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b004      	add	sp, #16
 8002d52:	bdb0      	pop	{r4, r5, r7, pc}
 8002d54:	fb8fffbf 	.word	0xfb8fffbf

08002d58 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d58:	b5b0      	push	{r4, r5, r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2228      	movs	r2, #40	; 0x28
 8002d68:	5c9b      	ldrb	r3, [r3, r2]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_RTC_SetTime+0x1a>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e092      	b.n	8002e98 <HAL_RTC_SetTime+0x140>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2228      	movs	r2, #40	; 0x28
 8002d76:	2101      	movs	r1, #1
 8002d78:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2229      	movs	r2, #41	; 0x29
 8002d7e:	2102      	movs	r1, #2
 8002d80:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	22ca      	movs	r2, #202	; 0xca
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2253      	movs	r2, #83	; 0x53
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d92:	2513      	movs	r5, #19
 8002d94:	197c      	adds	r4, r7, r5
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f000 fc2c 	bl	80035f6 <RTC_EnterInitMode>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002da2:	197b      	adds	r3, r7, r5
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d162      	bne.n	8002e70 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d125      	bne.n	8002dfc <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	2240      	movs	r2, #64	; 0x40
 8002db8:	4013      	ands	r3, r2
 8002dba:	d102      	bne.n	8002dc2 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f000 fc9c 	bl	8003704 <RTC_ByteToBcd2>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	785b      	ldrb	r3, [r3, #1]
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f000 fc95 	bl	8003704 <RTC_ByteToBcd2>
 8002dda:	0003      	movs	r3, r0
 8002ddc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002dde:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	789b      	ldrb	r3, [r3, #2]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f000 fc8d 	bl	8003704 <RTC_ByteToBcd2>
 8002dea:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002dec:	0022      	movs	r2, r4
 8002dee:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	78db      	ldrb	r3, [r3, #3]
 8002df4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	e017      	b.n	8002e2c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2240      	movs	r2, #64	; 0x40
 8002e04:	4013      	ands	r3, r2
 8002e06:	d102      	bne.n	8002e0e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	785b      	ldrb	r3, [r3, #1]
 8002e18:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e1a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e20:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	78db      	ldrb	r3, [r3, #3]
 8002e26:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	491b      	ldr	r1, [pc, #108]	; (8002ea0 <HAL_RTC_SetTime+0x148>)
 8002e34:	400a      	ands	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4918      	ldr	r1, [pc, #96]	; (8002ea4 <HAL_RTC_SetTime+0x14c>)
 8002e44:	400a      	ands	r2, r1
 8002e46:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6999      	ldr	r1, [r3, #24]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e60:	2313      	movs	r3, #19
 8002e62:	18fc      	adds	r4, r7, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	0018      	movs	r0, r3
 8002e68:	f000 fc08 	bl	800367c <RTC_ExitInitMode>
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	22ff      	movs	r2, #255	; 0xff
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8002e78:	2313      	movs	r3, #19
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d103      	bne.n	8002e8a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2229      	movs	r2, #41	; 0x29
 8002e86:	2101      	movs	r1, #1
 8002e88:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2228      	movs	r2, #40	; 0x28
 8002e8e:	2100      	movs	r1, #0
 8002e90:	5499      	strb	r1, [r3, r2]

  return status;
 8002e92:	2313      	movs	r3, #19
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	781b      	ldrb	r3, [r3, #0]
}
 8002e98:	0018      	movs	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b006      	add	sp, #24
 8002e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8002ea0:	007f7f7f 	.word	0x007f7f7f
 8002ea4:	fffbffff 	.word	0xfffbffff

08002ea8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	045b      	lsls	r3, r3, #17
 8002ec6:	0c5a      	lsrs	r2, r3, #17
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a22      	ldr	r2, [pc, #136]	; (8002f5c <HAL_RTC_GetTime+0xb4>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	0c1b      	lsrs	r3, r3, #16
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	223f      	movs	r2, #63	; 0x3f
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	0a1b      	lsrs	r3, r3, #8
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	227f      	movs	r2, #127	; 0x7f
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	227f      	movs	r2, #127	; 0x7f
 8002efe:	4013      	ands	r3, r2
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	0d9b      	lsrs	r3, r3, #22
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	4013      	ands	r3, r2
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d11a      	bne.n	8002f52 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f000 fc17 	bl	8003754 <RTC_Bcd2ToByte>
 8002f26:	0003      	movs	r3, r0
 8002f28:	001a      	movs	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	785b      	ldrb	r3, [r3, #1]
 8002f32:	0018      	movs	r0, r3
 8002f34:	f000 fc0e 	bl	8003754 <RTC_Bcd2ToByte>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	001a      	movs	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	789b      	ldrb	r3, [r3, #2]
 8002f44:	0018      	movs	r0, r3
 8002f46:	f000 fc05 	bl	8003754 <RTC_Bcd2ToByte>
 8002f4a:	0003      	movs	r3, r0
 8002f4c:	001a      	movs	r2, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b006      	add	sp, #24
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	007f7f7f 	.word	0x007f7f7f

08002f60 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f60:	b5b0      	push	{r4, r5, r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2228      	movs	r2, #40	; 0x28
 8002f70:	5c9b      	ldrb	r3, [r3, r2]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_RTC_SetDate+0x1a>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e07e      	b.n	8003078 <HAL_RTC_SetDate+0x118>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2228      	movs	r2, #40	; 0x28
 8002f7e:	2101      	movs	r1, #1
 8002f80:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2229      	movs	r2, #41	; 0x29
 8002f86:	2102      	movs	r1, #2
 8002f88:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10e      	bne.n	8002fae <HAL_RTC_SetDate+0x4e>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	785b      	ldrb	r3, [r3, #1]
 8002f94:	001a      	movs	r2, r3
 8002f96:	2310      	movs	r3, #16
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d008      	beq.n	8002fae <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	785b      	ldrb	r3, [r3, #1]
 8002fa0:	2210      	movs	r2, #16
 8002fa2:	4393      	bics	r3, r2
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	330a      	adds	r3, #10
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d11c      	bne.n	8002fee <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	78db      	ldrb	r3, [r3, #3]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f000 fba3 	bl	8003704 <RTC_ByteToBcd2>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	785b      	ldrb	r3, [r3, #1]
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f000 fb9c 	bl	8003704 <RTC_ByteToBcd2>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fd0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	789b      	ldrb	r3, [r3, #2]
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f000 fb94 	bl	8003704 <RTC_ByteToBcd2>
 8002fdc:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fde:	0022      	movs	r2, r4
 8002fe0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	e00e      	b.n	800300c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	78db      	ldrb	r3, [r3, #3]
 8002ff2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	785b      	ldrb	r3, [r3, #1]
 8002ff8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ffa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003000:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	22ca      	movs	r2, #202	; 0xca
 8003012:	625a      	str	r2, [r3, #36]	; 0x24
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2253      	movs	r2, #83	; 0x53
 800301a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800301c:	2513      	movs	r5, #19
 800301e:	197c      	adds	r4, r7, r5
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	0018      	movs	r0, r3
 8003024:	f000 fae7 	bl	80035f6 <RTC_EnterInitMode>
 8003028:	0003      	movs	r3, r0
 800302a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800302c:	0028      	movs	r0, r5
 800302e:	183b      	adds	r3, r7, r0
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10c      	bne.n	8003050 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4910      	ldr	r1, [pc, #64]	; (8003080 <HAL_RTC_SetDate+0x120>)
 800303e:	400a      	ands	r2, r1
 8003040:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003042:	183c      	adds	r4, r7, r0
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	0018      	movs	r0, r3
 8003048:	f000 fb18 	bl	800367c <RTC_ExitInitMode>
 800304c:	0003      	movs	r3, r0
 800304e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	22ff      	movs	r2, #255	; 0xff
 8003056:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003058:	2313      	movs	r3, #19
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d103      	bne.n	800306a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2229      	movs	r2, #41	; 0x29
 8003066:	2101      	movs	r1, #1
 8003068:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2228      	movs	r2, #40	; 0x28
 800306e:	2100      	movs	r1, #0
 8003070:	5499      	strb	r1, [r3, r2]

  return status;
 8003072:	2313      	movs	r3, #19
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	781b      	ldrb	r3, [r3, #0]
}
 8003078:	0018      	movs	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	b006      	add	sp, #24
 800307e:	bdb0      	pop	{r4, r5, r7, pc}
 8003080:	00ffff3f 	.word	0x00ffff3f

08003084 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	4a21      	ldr	r2, [pc, #132]	; (800311c <HAL_RTC_GetDate+0x98>)
 8003098:	4013      	ands	r3, r2
 800309a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	0c1b      	lsrs	r3, r3, #16
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	0a1b      	lsrs	r3, r3, #8
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	221f      	movs	r2, #31
 80030ae:	4013      	ands	r3, r2
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	223f      	movs	r2, #63	; 0x3f
 80030bc:	4013      	ands	r3, r2
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	0b5b      	lsrs	r3, r3, #13
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2207      	movs	r2, #7
 80030cc:	4013      	ands	r3, r2
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d11a      	bne.n	8003110 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	78db      	ldrb	r3, [r3, #3]
 80030de:	0018      	movs	r0, r3
 80030e0:	f000 fb38 	bl	8003754 <RTC_Bcd2ToByte>
 80030e4:	0003      	movs	r3, r0
 80030e6:	001a      	movs	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	785b      	ldrb	r3, [r3, #1]
 80030f0:	0018      	movs	r0, r3
 80030f2:	f000 fb2f 	bl	8003754 <RTC_Bcd2ToByte>
 80030f6:	0003      	movs	r3, r0
 80030f8:	001a      	movs	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	789b      	ldrb	r3, [r3, #2]
 8003102:	0018      	movs	r0, r3
 8003104:	f000 fb26 	bl	8003754 <RTC_Bcd2ToByte>
 8003108:	0003      	movs	r3, r0
 800310a:	001a      	movs	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	0018      	movs	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	b006      	add	sp, #24
 8003118:	bd80      	pop	{r7, pc}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	00ffff3f 	.word	0x00ffff3f

08003120 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b089      	sub	sp, #36	; 0x24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2228      	movs	r2, #40	; 0x28
 8003130:	5c9b      	ldrb	r3, [r3, r2]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_RTC_SetAlarm_IT+0x1a>
 8003136:	2302      	movs	r3, #2
 8003138:	e127      	b.n	800338a <HAL_RTC_SetAlarm_IT+0x26a>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2228      	movs	r2, #40	; 0x28
 800313e:	2101      	movs	r1, #1
 8003140:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2229      	movs	r2, #41	; 0x29
 8003146:	2102      	movs	r1, #2
 8003148:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d136      	bne.n	80031be <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2240      	movs	r2, #64	; 0x40
 8003158:	4013      	ands	r3, r2
 800315a:	d102      	bne.n	8003162 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2200      	movs	r2, #0
 8003160:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	0018      	movs	r0, r3
 8003168:	f000 facc 	bl	8003704 <RTC_ByteToBcd2>
 800316c:	0003      	movs	r3, r0
 800316e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	785b      	ldrb	r3, [r3, #1]
 8003174:	0018      	movs	r0, r3
 8003176:	f000 fac5 	bl	8003704 <RTC_ByteToBcd2>
 800317a:	0003      	movs	r3, r0
 800317c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800317e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	789b      	ldrb	r3, [r3, #2]
 8003184:	0018      	movs	r0, r3
 8003186:	f000 fabd 	bl	8003704 <RTC_ByteToBcd2>
 800318a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800318c:	0022      	movs	r2, r4
 800318e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	78db      	ldrb	r3, [r3, #3]
 8003194:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003196:	431a      	orrs	r2, r3
 8003198:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2220      	movs	r2, #32
 800319e:	5c9b      	ldrb	r3, [r3, r2]
 80031a0:	0018      	movs	r0, r3
 80031a2:	f000 faaf 	bl	8003704 <RTC_ByteToBcd2>
 80031a6:	0003      	movs	r3, r0
 80031a8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80031aa:	0022      	movs	r2, r4
 80031ac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80031b2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	e022      	b.n	8003204 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2240      	movs	r2, #64	; 0x40
 80031c6:	4013      	ands	r3, r2
 80031c8:	d102      	bne.n	80031d0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2200      	movs	r2, #0
 80031ce:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	785b      	ldrb	r3, [r3, #1]
 80031da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80031dc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80031e2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	78db      	ldrb	r3, [r3, #3]
 80031e8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80031ea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2120      	movs	r1, #32
 80031f0:	5c5b      	ldrb	r3, [r3, r1]
 80031f2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80031f4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80031fa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003200:	4313      	orrs	r3, r2
 8003202:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	4313      	orrs	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	22ca      	movs	r2, #202	; 0xca
 8003216:	625a      	str	r2, [r3, #36]	; 0x24
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2253      	movs	r2, #83	; 0x53
 800321e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003224:	2380      	movs	r3, #128	; 0x80
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	429a      	cmp	r2, r3
 800322a:	d14c      	bne.n	80032c6 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4957      	ldr	r1, [pc, #348]	; (8003394 <HAL_RTC_SetAlarm_IT+0x274>)
 8003238:	400a      	ands	r2, r1
 800323a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2101      	movs	r1, #1
 8003248:	430a      	orrs	r2, r1
 800324a:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800324c:	f7fd ff54 	bl	80010f8 <HAL_GetTick>
 8003250:	0003      	movs	r3, r0
 8003252:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003254:	e016      	b.n	8003284 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003256:	f7fd ff4f 	bl	80010f8 <HAL_GetTick>
 800325a:	0002      	movs	r2, r0
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	1ad2      	subs	r2, r2, r3
 8003260:	23fa      	movs	r3, #250	; 0xfa
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	429a      	cmp	r2, r3
 8003266:	d90d      	bls.n	8003284 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	22ff      	movs	r2, #255	; 0xff
 800326e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2229      	movs	r2, #41	; 0x29
 8003274:	2103      	movs	r1, #3
 8003276:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2228      	movs	r2, #40	; 0x28
 800327c:	2100      	movs	r1, #0
 800327e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e082      	b.n	800338a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	4013      	ands	r3, r2
 800328e:	d0e2      	beq.n	8003256 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2180      	movs	r1, #128	; 0x80
 80032ac:	0049      	lsls	r1, r1, #1
 80032ae:	430a      	orrs	r2, r1
 80032b0:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699a      	ldr	r2, [r3, #24]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2180      	movs	r1, #128	; 0x80
 80032be:	0149      	lsls	r1, r1, #5
 80032c0:	430a      	orrs	r2, r1
 80032c2:	619a      	str	r2, [r3, #24]
 80032c4:	e04b      	b.n	800335e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	699a      	ldr	r2, [r3, #24]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4931      	ldr	r1, [pc, #196]	; (8003398 <HAL_RTC_SetAlarm_IT+0x278>)
 80032d2:	400a      	ands	r2, r1
 80032d4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2102      	movs	r1, #2
 80032e2:	430a      	orrs	r2, r1
 80032e4:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80032e6:	f7fd ff07 	bl	80010f8 <HAL_GetTick>
 80032ea:	0003      	movs	r3, r0
 80032ec:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80032ee:	e016      	b.n	800331e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80032f0:	f7fd ff02 	bl	80010f8 <HAL_GetTick>
 80032f4:	0002      	movs	r2, r0
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	1ad2      	subs	r2, r2, r3
 80032fa:	23fa      	movs	r3, #250	; 0xfa
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	429a      	cmp	r2, r3
 8003300:	d90d      	bls.n	800331e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	22ff      	movs	r2, #255	; 0xff
 8003308:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2229      	movs	r2, #41	; 0x29
 800330e:	2103      	movs	r1, #3
 8003310:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2228      	movs	r2, #40	; 0x28
 8003316:	2100      	movs	r1, #0
 8003318:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e035      	b.n	800338a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2202      	movs	r2, #2
 8003326:	4013      	ands	r3, r2
 8003328:	d0e2      	beq.n	80032f0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699a      	ldr	r2, [r3, #24]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2180      	movs	r1, #128	; 0x80
 8003346:	0089      	lsls	r1, r1, #2
 8003348:	430a      	orrs	r2, r1
 800334a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2180      	movs	r1, #128	; 0x80
 8003358:	0189      	lsls	r1, r1, #6
 800335a:	430a      	orrs	r2, r1
 800335c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800335e:	4a0f      	ldr	r2, [pc, #60]	; (800339c <HAL_RTC_SetAlarm_IT+0x27c>)
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	58d3      	ldr	r3, [r2, r3]
 8003364:	490d      	ldr	r1, [pc, #52]	; (800339c <HAL_RTC_SetAlarm_IT+0x27c>)
 8003366:	2280      	movs	r2, #128	; 0x80
 8003368:	0312      	lsls	r2, r2, #12
 800336a:	4313      	orrs	r3, r2
 800336c:	2280      	movs	r2, #128	; 0x80
 800336e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	22ff      	movs	r2, #255	; 0xff
 8003376:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2229      	movs	r2, #41	; 0x29
 800337c:	2101      	movs	r1, #1
 800337e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2228      	movs	r2, #40	; 0x28
 8003384:	2100      	movs	r1, #0
 8003386:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	0018      	movs	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	b009      	add	sp, #36	; 0x24
 8003390:	bd90      	pop	{r4, r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	fffffeff 	.word	0xfffffeff
 8003398:	fffffdff 	.word	0xfffffdff
 800339c:	40021800 	.word	0x40021800

080033a0 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	2380      	movs	r3, #128	; 0x80
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d144      	bne.n	8003442 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2280      	movs	r2, #128	; 0x80
 80033bc:	0052      	lsls	r2, r2, #1
 80033be:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	045b      	lsls	r3, r3, #17
 80033d0:	0c5b      	lsrs	r3, r3, #17
 80033d2:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	0c1b      	lsrs	r3, r3, #16
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	223f      	movs	r2, #63	; 0x3f
 80033dc:	4013      	ands	r3, r2
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	0a1b      	lsrs	r3, r3, #8
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	227f      	movs	r2, #127	; 0x7f
 80033ec:	4013      	ands	r3, r2
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	227f      	movs	r2, #127	; 0x7f
 80033fa:	4013      	ands	r3, r2
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	0d9b      	lsrs	r3, r3, #22
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2201      	movs	r2, #1
 800340a:	4013      	ands	r3, r2
 800340c:	b2da      	uxtb	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	0e1b      	lsrs	r3, r3, #24
 800341c:	b2db      	uxtb	r3, r3
 800341e:	223f      	movs	r2, #63	; 0x3f
 8003420:	4013      	ands	r3, r2
 8003422:	b2d9      	uxtb	r1, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2220      	movs	r2, #32
 8003428:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	05db      	lsls	r3, r3, #23
 8003430:	401a      	ands	r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	4a3b      	ldr	r2, [pc, #236]	; (8003528 <HAL_RTC_GetAlarm+0x188>)
 800343a:	401a      	ands	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	615a      	str	r2, [r3, #20]
 8003440:	e043      	b.n	80034ca <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2280      	movs	r2, #128	; 0x80
 8003446:	0092      	lsls	r2, r2, #2
 8003448:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003450:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003458:	045b      	lsls	r3, r3, #17
 800345a:	0c5b      	lsrs	r3, r3, #17
 800345c:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	0c1b      	lsrs	r3, r3, #16
 8003462:	b2db      	uxtb	r3, r3
 8003464:	223f      	movs	r2, #63	; 0x3f
 8003466:	4013      	ands	r3, r2
 8003468:	b2da      	uxtb	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	b2db      	uxtb	r3, r3
 8003474:	227f      	movs	r2, #127	; 0x7f
 8003476:	4013      	ands	r3, r2
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	227f      	movs	r2, #127	; 0x7f
 8003484:	4013      	ands	r3, r2
 8003486:	b2da      	uxtb	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	0d9b      	lsrs	r3, r3, #22
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2201      	movs	r2, #1
 8003494:	4013      	ands	r3, r2
 8003496:	b2da      	uxtb	r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	0e1b      	lsrs	r3, r3, #24
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	223f      	movs	r2, #63	; 0x3f
 80034aa:	4013      	ands	r3, r2
 80034ac:	b2d9      	uxtb	r1, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2220      	movs	r2, #32
 80034b2:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	2380      	movs	r3, #128	; 0x80
 80034b8:	05db      	lsls	r3, r3, #23
 80034ba:	401a      	ands	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	4a19      	ldr	r2, [pc, #100]	; (8003528 <HAL_RTC_GetAlarm+0x188>)
 80034c4:	401a      	ands	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d125      	bne.n	800351c <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	0018      	movs	r0, r3
 80034d6:	f000 f93d 	bl	8003754 <RTC_Bcd2ToByte>
 80034da:	0003      	movs	r3, r0
 80034dc:	001a      	movs	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	785b      	ldrb	r3, [r3, #1]
 80034e6:	0018      	movs	r0, r3
 80034e8:	f000 f934 	bl	8003754 <RTC_Bcd2ToByte>
 80034ec:	0003      	movs	r3, r0
 80034ee:	001a      	movs	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	789b      	ldrb	r3, [r3, #2]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f000 f92b 	bl	8003754 <RTC_Bcd2ToByte>
 80034fe:	0003      	movs	r3, r0
 8003500:	001a      	movs	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2220      	movs	r2, #32
 800350a:	5c9b      	ldrb	r3, [r3, r2]
 800350c:	0018      	movs	r0, r3
 800350e:	f000 f921 	bl	8003754 <RTC_Bcd2ToByte>
 8003512:	0003      	movs	r3, r0
 8003514:	0019      	movs	r1, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2220      	movs	r2, #32
 800351a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	0018      	movs	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	b006      	add	sp, #24
 8003524:	bd80      	pop	{r7, pc}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	80808080 	.word	0x80808080

0800352c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699a      	ldr	r2, [r3, #24]
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	015b      	lsls	r3, r3, #5
 800353e:	4013      	ands	r3, r2
 8003540:	d011      	beq.n	8003566 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003548:	2201      	movs	r2, #1
 800354a:	4013      	ands	r3, r2
 800354c:	d00b      	beq.n	8003566 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2101      	movs	r1, #1
 800355a:	430a      	orrs	r2, r1
 800355c:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	0018      	movs	r0, r3
 8003562:	f7fd fa61 	bl	8000a28 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	019b      	lsls	r3, r3, #6
 8003570:	4013      	ands	r3, r2
 8003572:	d011      	beq.n	8003598 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357a:	2202      	movs	r2, #2
 800357c:	4013      	ands	r3, r2
 800357e:	d00b      	beq.n	8003598 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2102      	movs	r1, #2
 800358c:	430a      	orrs	r2, r1
 800358e:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	0018      	movs	r0, r3
 8003594:	f000 f8fb 	bl	800378e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2229      	movs	r2, #41	; 0x29
 800359c:	2101      	movs	r1, #1
 800359e:	5499      	strb	r1, [r3, r2]
}
 80035a0:	46c0      	nop			; (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b002      	add	sp, #8
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	21a0      	movs	r1, #160	; 0xa0
 80035bc:	438a      	bics	r2, r1
 80035be:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80035c0:	f7fd fd9a 	bl	80010f8 <HAL_GetTick>
 80035c4:	0003      	movs	r3, r0
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80035c8:	e00a      	b.n	80035e0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80035ca:	f7fd fd95 	bl	80010f8 <HAL_GetTick>
 80035ce:	0002      	movs	r2, r0
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1ad2      	subs	r2, r2, r3
 80035d4:	23fa      	movs	r3, #250	; 0xfa
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	429a      	cmp	r2, r3
 80035da:	d901      	bls.n	80035e0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e006      	b.n	80035ee <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	4013      	ands	r3, r2
 80035ea:	d0ee      	beq.n	80035ca <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b004      	add	sp, #16
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80035fe:	230f      	movs	r3, #15
 8003600:	18fb      	adds	r3, r7, r3
 8003602:	2200      	movs	r2, #0
 8003604:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2240      	movs	r2, #64	; 0x40
 800360e:	4013      	ands	r3, r2
 8003610:	d12c      	bne.n	800366c <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2180      	movs	r1, #128	; 0x80
 800361e:	430a      	orrs	r2, r1
 8003620:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003622:	f7fd fd69 	bl	80010f8 <HAL_GetTick>
 8003626:	0003      	movs	r3, r0
 8003628:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800362a:	e014      	b.n	8003656 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800362c:	f7fd fd64 	bl	80010f8 <HAL_GetTick>
 8003630:	0002      	movs	r2, r0
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	1ad2      	subs	r2, r2, r3
 8003636:	200f      	movs	r0, #15
 8003638:	183b      	adds	r3, r7, r0
 800363a:	1839      	adds	r1, r7, r0
 800363c:	7809      	ldrb	r1, [r1, #0]
 800363e:	7019      	strb	r1, [r3, #0]
 8003640:	23fa      	movs	r3, #250	; 0xfa
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	429a      	cmp	r2, r3
 8003646:	d906      	bls.n	8003656 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8003648:	183b      	adds	r3, r7, r0
 800364a:	2203      	movs	r2, #3
 800364c:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2229      	movs	r2, #41	; 0x29
 8003652:	2103      	movs	r1, #3
 8003654:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2240      	movs	r2, #64	; 0x40
 800365e:	4013      	ands	r3, r2
 8003660:	d104      	bne.n	800366c <RTC_EnterInitMode+0x76>
 8003662:	230f      	movs	r3, #15
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b03      	cmp	r3, #3
 800366a:	d1df      	bne.n	800362c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800366c:	230f      	movs	r3, #15
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	781b      	ldrb	r3, [r3, #0]
}
 8003672:	0018      	movs	r0, r3
 8003674:	46bd      	mov	sp, r7
 8003676:	b004      	add	sp, #16
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800367c:	b590      	push	{r4, r7, lr}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003684:	240f      	movs	r4, #15
 8003686:	193b      	adds	r3, r7, r4
 8003688:	2200      	movs	r2, #0
 800368a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800368c:	4b1c      	ldr	r3, [pc, #112]	; (8003700 <RTC_ExitInitMode+0x84>)
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <RTC_ExitInitMode+0x84>)
 8003692:	2180      	movs	r1, #128	; 0x80
 8003694:	438a      	bics	r2, r1
 8003696:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003698:	4b19      	ldr	r3, [pc, #100]	; (8003700 <RTC_ExitInitMode+0x84>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2220      	movs	r2, #32
 800369e:	4013      	ands	r3, r2
 80036a0:	d10d      	bne.n	80036be <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	0018      	movs	r0, r3
 80036a6:	f7ff ff7f 	bl	80035a8 <HAL_RTC_WaitForSynchro>
 80036aa:	1e03      	subs	r3, r0, #0
 80036ac:	d021      	beq.n	80036f2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2229      	movs	r2, #41	; 0x29
 80036b2:	2103      	movs	r1, #3
 80036b4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80036b6:	193b      	adds	r3, r7, r4
 80036b8:	2203      	movs	r2, #3
 80036ba:	701a      	strb	r2, [r3, #0]
 80036bc:	e019      	b.n	80036f2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80036be:	4b10      	ldr	r3, [pc, #64]	; (8003700 <RTC_ExitInitMode+0x84>)
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <RTC_ExitInitMode+0x84>)
 80036c4:	2120      	movs	r1, #32
 80036c6:	438a      	bics	r2, r1
 80036c8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7ff ff6b 	bl	80035a8 <HAL_RTC_WaitForSynchro>
 80036d2:	1e03      	subs	r3, r0, #0
 80036d4:	d007      	beq.n	80036e6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2229      	movs	r2, #41	; 0x29
 80036da:	2103      	movs	r1, #3
 80036dc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80036de:	230f      	movs	r3, #15
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	2203      	movs	r2, #3
 80036e4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <RTC_ExitInitMode+0x84>)
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	4b05      	ldr	r3, [pc, #20]	; (8003700 <RTC_ExitInitMode+0x84>)
 80036ec:	2120      	movs	r1, #32
 80036ee:	430a      	orrs	r2, r1
 80036f0:	619a      	str	r2, [r3, #24]
  }

  return status;
 80036f2:	230f      	movs	r3, #15
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	781b      	ldrb	r3, [r3, #0]
}
 80036f8:	0018      	movs	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b005      	add	sp, #20
 80036fe:	bd90      	pop	{r4, r7, pc}
 8003700:	40002800 	.word	0x40002800

08003704 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	0002      	movs	r2, r0
 800370c:	1dfb      	adds	r3, r7, #7
 800370e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003714:	230b      	movs	r3, #11
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	1dfa      	adds	r2, r7, #7
 800371a:	7812      	ldrb	r2, [r2, #0]
 800371c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800371e:	e008      	b.n	8003732 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3301      	adds	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003726:	220b      	movs	r2, #11
 8003728:	18bb      	adds	r3, r7, r2
 800372a:	18ba      	adds	r2, r7, r2
 800372c:	7812      	ldrb	r2, [r2, #0]
 800372e:	3a0a      	subs	r2, #10
 8003730:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8003732:	210b      	movs	r1, #11
 8003734:	187b      	adds	r3, r7, r1
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b09      	cmp	r3, #9
 800373a:	d8f1      	bhi.n	8003720 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	b2da      	uxtb	r2, r3
 8003744:	187b      	adds	r3, r7, r1
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	4313      	orrs	r3, r2
 800374a:	b2db      	uxtb	r3, r3
}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b004      	add	sp, #16
 8003752:	bd80      	pop	{r7, pc}

08003754 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	0002      	movs	r2, r0
 800375c:	1dfb      	adds	r3, r7, #7
 800375e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003760:	1dfb      	adds	r3, r7, #7
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	091b      	lsrs	r3, r3, #4
 8003766:	b2db      	uxtb	r3, r3
 8003768:	001a      	movs	r2, r3
 800376a:	0013      	movs	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	189b      	adds	r3, r3, r2
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	b2da      	uxtb	r2, r3
 8003778:	1dfb      	adds	r3, r7, #7
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	210f      	movs	r1, #15
 800377e:	400b      	ands	r3, r1
 8003780:	b2db      	uxtb	r3, r3
 8003782:	18d3      	adds	r3, r2, r3
 8003784:	b2db      	uxtb	r3, r3
}
 8003786:	0018      	movs	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	b004      	add	sp, #16
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	46bd      	mov	sp, r7
 800379a:	b002      	add	sp, #8
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e046      	b.n	8003840 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2288      	movs	r2, #136	; 0x88
 80037b6:	589b      	ldr	r3, [r3, r2]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d107      	bne.n	80037cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2284      	movs	r2, #132	; 0x84
 80037c0:	2100      	movs	r1, #0
 80037c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	0018      	movs	r0, r3
 80037c8:	f7fd fab8 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2288      	movs	r2, #136	; 0x88
 80037d0:	2124      	movs	r1, #36	; 0x24
 80037d2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2101      	movs	r1, #1
 80037e0:	438a      	bics	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f000 f8cc 	bl	8003984 <UART_SetConfig>
 80037ec:	0003      	movs	r3, r0
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e024      	b.n	8003840 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	0018      	movs	r0, r3
 8003802:	f000 fb37 	bl	8003e74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	490d      	ldr	r1, [pc, #52]	; (8003848 <HAL_UART_Init+0xa8>)
 8003812:	400a      	ands	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	212a      	movs	r1, #42	; 0x2a
 8003822:	438a      	bics	r2, r1
 8003824:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2101      	movs	r1, #1
 8003832:	430a      	orrs	r2, r1
 8003834:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	0018      	movs	r0, r3
 800383a:	f000 fbcf 	bl	8003fdc <UART_CheckIdleState>
 800383e:	0003      	movs	r3, r0
}
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	b002      	add	sp, #8
 8003846:	bd80      	pop	{r7, pc}
 8003848:	ffffb7ff 	.word	0xffffb7ff

0800384c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	; 0x28
 8003850:	af02      	add	r7, sp, #8
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	603b      	str	r3, [r7, #0]
 8003858:	1dbb      	adds	r3, r7, #6
 800385a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2288      	movs	r2, #136	; 0x88
 8003860:	589b      	ldr	r3, [r3, r2]
 8003862:	2b20      	cmp	r3, #32
 8003864:	d000      	beq.n	8003868 <HAL_UART_Transmit+0x1c>
 8003866:	e088      	b.n	800397a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_UART_Transmit+0x2a>
 800386e:	1dbb      	adds	r3, r7, #6
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e080      	b.n	800397c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	2380      	movs	r3, #128	; 0x80
 8003880:	015b      	lsls	r3, r3, #5
 8003882:	429a      	cmp	r2, r3
 8003884:	d109      	bne.n	800389a <HAL_UART_Transmit+0x4e>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d105      	bne.n	800389a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2201      	movs	r2, #1
 8003892:	4013      	ands	r3, r2
 8003894:	d001      	beq.n	800389a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e070      	b.n	800397c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2290      	movs	r2, #144	; 0x90
 800389e:	2100      	movs	r1, #0
 80038a0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2288      	movs	r2, #136	; 0x88
 80038a6:	2121      	movs	r1, #33	; 0x21
 80038a8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038aa:	f7fd fc25 	bl	80010f8 <HAL_GetTick>
 80038ae:	0003      	movs	r3, r0
 80038b0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1dba      	adds	r2, r7, #6
 80038b6:	2154      	movs	r1, #84	; 0x54
 80038b8:	8812      	ldrh	r2, [r2, #0]
 80038ba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	1dba      	adds	r2, r7, #6
 80038c0:	2156      	movs	r1, #86	; 0x56
 80038c2:	8812      	ldrh	r2, [r2, #0]
 80038c4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	2380      	movs	r3, #128	; 0x80
 80038cc:	015b      	lsls	r3, r3, #5
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d108      	bne.n	80038e4 <HAL_UART_Transmit+0x98>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d104      	bne.n	80038e4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	e003      	b.n	80038ec <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038ec:	e02c      	b.n	8003948 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	0013      	movs	r3, r2
 80038f8:	2200      	movs	r2, #0
 80038fa:	2180      	movs	r1, #128	; 0x80
 80038fc:	f000 fbbc 	bl	8004078 <UART_WaitOnFlagUntilTimeout>
 8003900:	1e03      	subs	r3, r0, #0
 8003902:	d001      	beq.n	8003908 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e039      	b.n	800397c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10b      	bne.n	8003926 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	001a      	movs	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	05d2      	lsls	r2, r2, #23
 800391a:	0dd2      	lsrs	r2, r2, #23
 800391c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	3302      	adds	r3, #2
 8003922:	61bb      	str	r3, [r7, #24]
 8003924:	e007      	b.n	8003936 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	781a      	ldrb	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	3301      	adds	r3, #1
 8003934:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2256      	movs	r2, #86	; 0x56
 800393a:	5a9b      	ldrh	r3, [r3, r2]
 800393c:	b29b      	uxth	r3, r3
 800393e:	3b01      	subs	r3, #1
 8003940:	b299      	uxth	r1, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2256      	movs	r2, #86	; 0x56
 8003946:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2256      	movs	r2, #86	; 0x56
 800394c:	5a9b      	ldrh	r3, [r3, r2]
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1cc      	bne.n	80038ee <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	0013      	movs	r3, r2
 800395e:	2200      	movs	r2, #0
 8003960:	2140      	movs	r1, #64	; 0x40
 8003962:	f000 fb89 	bl	8004078 <UART_WaitOnFlagUntilTimeout>
 8003966:	1e03      	subs	r3, r0, #0
 8003968:	d001      	beq.n	800396e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e006      	b.n	800397c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2288      	movs	r2, #136	; 0x88
 8003972:	2120      	movs	r1, #32
 8003974:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	e000      	b.n	800397c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800397a:	2302      	movs	r3, #2
  }
}
 800397c:	0018      	movs	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	b008      	add	sp, #32
 8003982:	bd80      	pop	{r7, pc}

08003984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003984:	b5b0      	push	{r4, r5, r7, lr}
 8003986:	b090      	sub	sp, #64	; 0x40
 8003988:	af00      	add	r7, sp, #0
 800398a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800398c:	231a      	movs	r3, #26
 800398e:	2220      	movs	r2, #32
 8003990:	189b      	adds	r3, r3, r2
 8003992:	19db      	adds	r3, r3, r7
 8003994:	2200      	movs	r2, #0
 8003996:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4ac4      	ldr	r2, [pc, #784]	; (8003cc8 <UART_SetConfig+0x344>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	0019      	movs	r1, r3
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c2:	430b      	orrs	r3, r1
 80039c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	4abf      	ldr	r2, [pc, #764]	; (8003ccc <UART_SetConfig+0x348>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	0018      	movs	r0, r3
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	68d9      	ldr	r1, [r3, #12]
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	0003      	movs	r3, r0
 80039dc:	430b      	orrs	r3, r1
 80039de:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4ab9      	ldr	r2, [pc, #740]	; (8003cd0 <UART_SetConfig+0x34c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d004      	beq.n	80039fa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039f6:	4313      	orrs	r3, r2
 80039f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4ab4      	ldr	r2, [pc, #720]	; (8003cd4 <UART_SetConfig+0x350>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	0019      	movs	r1, r3
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a16:	220f      	movs	r2, #15
 8003a18:	4393      	bics	r3, r2
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	0003      	movs	r3, r0
 8003a26:	430b      	orrs	r3, r1
 8003a28:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4aaa      	ldr	r2, [pc, #680]	; (8003cd8 <UART_SetConfig+0x354>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d131      	bne.n	8003a98 <UART_SetConfig+0x114>
 8003a34:	4ba9      	ldr	r3, [pc, #676]	; (8003cdc <UART_SetConfig+0x358>)
 8003a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a38:	2203      	movs	r2, #3
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d01d      	beq.n	8003a7c <UART_SetConfig+0xf8>
 8003a40:	d823      	bhi.n	8003a8a <UART_SetConfig+0x106>
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d00c      	beq.n	8003a60 <UART_SetConfig+0xdc>
 8003a46:	d820      	bhi.n	8003a8a <UART_SetConfig+0x106>
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <UART_SetConfig+0xce>
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d00e      	beq.n	8003a6e <UART_SetConfig+0xea>
 8003a50:	e01b      	b.n	8003a8a <UART_SetConfig+0x106>
 8003a52:	231b      	movs	r3, #27
 8003a54:	2220      	movs	r2, #32
 8003a56:	189b      	adds	r3, r3, r2
 8003a58:	19db      	adds	r3, r3, r7
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	701a      	strb	r2, [r3, #0]
 8003a5e:	e071      	b.n	8003b44 <UART_SetConfig+0x1c0>
 8003a60:	231b      	movs	r3, #27
 8003a62:	2220      	movs	r2, #32
 8003a64:	189b      	adds	r3, r3, r2
 8003a66:	19db      	adds	r3, r3, r7
 8003a68:	2202      	movs	r2, #2
 8003a6a:	701a      	strb	r2, [r3, #0]
 8003a6c:	e06a      	b.n	8003b44 <UART_SetConfig+0x1c0>
 8003a6e:	231b      	movs	r3, #27
 8003a70:	2220      	movs	r2, #32
 8003a72:	189b      	adds	r3, r3, r2
 8003a74:	19db      	adds	r3, r3, r7
 8003a76:	2204      	movs	r2, #4
 8003a78:	701a      	strb	r2, [r3, #0]
 8003a7a:	e063      	b.n	8003b44 <UART_SetConfig+0x1c0>
 8003a7c:	231b      	movs	r3, #27
 8003a7e:	2220      	movs	r2, #32
 8003a80:	189b      	adds	r3, r3, r2
 8003a82:	19db      	adds	r3, r3, r7
 8003a84:	2208      	movs	r2, #8
 8003a86:	701a      	strb	r2, [r3, #0]
 8003a88:	e05c      	b.n	8003b44 <UART_SetConfig+0x1c0>
 8003a8a:	231b      	movs	r3, #27
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	189b      	adds	r3, r3, r2
 8003a90:	19db      	adds	r3, r3, r7
 8003a92:	2210      	movs	r2, #16
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	e055      	b.n	8003b44 <UART_SetConfig+0x1c0>
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a90      	ldr	r2, [pc, #576]	; (8003ce0 <UART_SetConfig+0x35c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d106      	bne.n	8003ab0 <UART_SetConfig+0x12c>
 8003aa2:	231b      	movs	r3, #27
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	189b      	adds	r3, r3, r2
 8003aa8:	19db      	adds	r3, r3, r7
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
 8003aae:	e049      	b.n	8003b44 <UART_SetConfig+0x1c0>
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a86      	ldr	r2, [pc, #536]	; (8003cd0 <UART_SetConfig+0x34c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d13e      	bne.n	8003b38 <UART_SetConfig+0x1b4>
 8003aba:	4b88      	ldr	r3, [pc, #544]	; (8003cdc <UART_SetConfig+0x358>)
 8003abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003abe:	23c0      	movs	r3, #192	; 0xc0
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	22c0      	movs	r2, #192	; 0xc0
 8003ac6:	0112      	lsls	r2, r2, #4
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d027      	beq.n	8003b1c <UART_SetConfig+0x198>
 8003acc:	22c0      	movs	r2, #192	; 0xc0
 8003ace:	0112      	lsls	r2, r2, #4
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d82a      	bhi.n	8003b2a <UART_SetConfig+0x1a6>
 8003ad4:	2280      	movs	r2, #128	; 0x80
 8003ad6:	0112      	lsls	r2, r2, #4
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d011      	beq.n	8003b00 <UART_SetConfig+0x17c>
 8003adc:	2280      	movs	r2, #128	; 0x80
 8003ade:	0112      	lsls	r2, r2, #4
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d822      	bhi.n	8003b2a <UART_SetConfig+0x1a6>
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d004      	beq.n	8003af2 <UART_SetConfig+0x16e>
 8003ae8:	2280      	movs	r2, #128	; 0x80
 8003aea:	00d2      	lsls	r2, r2, #3
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d00e      	beq.n	8003b0e <UART_SetConfig+0x18a>
 8003af0:	e01b      	b.n	8003b2a <UART_SetConfig+0x1a6>
 8003af2:	231b      	movs	r3, #27
 8003af4:	2220      	movs	r2, #32
 8003af6:	189b      	adds	r3, r3, r2
 8003af8:	19db      	adds	r3, r3, r7
 8003afa:	2200      	movs	r2, #0
 8003afc:	701a      	strb	r2, [r3, #0]
 8003afe:	e021      	b.n	8003b44 <UART_SetConfig+0x1c0>
 8003b00:	231b      	movs	r3, #27
 8003b02:	2220      	movs	r2, #32
 8003b04:	189b      	adds	r3, r3, r2
 8003b06:	19db      	adds	r3, r3, r7
 8003b08:	2202      	movs	r2, #2
 8003b0a:	701a      	strb	r2, [r3, #0]
 8003b0c:	e01a      	b.n	8003b44 <UART_SetConfig+0x1c0>
 8003b0e:	231b      	movs	r3, #27
 8003b10:	2220      	movs	r2, #32
 8003b12:	189b      	adds	r3, r3, r2
 8003b14:	19db      	adds	r3, r3, r7
 8003b16:	2204      	movs	r2, #4
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	e013      	b.n	8003b44 <UART_SetConfig+0x1c0>
 8003b1c:	231b      	movs	r3, #27
 8003b1e:	2220      	movs	r2, #32
 8003b20:	189b      	adds	r3, r3, r2
 8003b22:	19db      	adds	r3, r3, r7
 8003b24:	2208      	movs	r2, #8
 8003b26:	701a      	strb	r2, [r3, #0]
 8003b28:	e00c      	b.n	8003b44 <UART_SetConfig+0x1c0>
 8003b2a:	231b      	movs	r3, #27
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	189b      	adds	r3, r3, r2
 8003b30:	19db      	adds	r3, r3, r7
 8003b32:	2210      	movs	r2, #16
 8003b34:	701a      	strb	r2, [r3, #0]
 8003b36:	e005      	b.n	8003b44 <UART_SetConfig+0x1c0>
 8003b38:	231b      	movs	r3, #27
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	189b      	adds	r3, r3, r2
 8003b3e:	19db      	adds	r3, r3, r7
 8003b40:	2210      	movs	r2, #16
 8003b42:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a61      	ldr	r2, [pc, #388]	; (8003cd0 <UART_SetConfig+0x34c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d000      	beq.n	8003b50 <UART_SetConfig+0x1cc>
 8003b4e:	e092      	b.n	8003c76 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b50:	231b      	movs	r3, #27
 8003b52:	2220      	movs	r2, #32
 8003b54:	189b      	adds	r3, r3, r2
 8003b56:	19db      	adds	r3, r3, r7
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	d015      	beq.n	8003b8a <UART_SetConfig+0x206>
 8003b5e:	dc18      	bgt.n	8003b92 <UART_SetConfig+0x20e>
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d00d      	beq.n	8003b80 <UART_SetConfig+0x1fc>
 8003b64:	dc15      	bgt.n	8003b92 <UART_SetConfig+0x20e>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <UART_SetConfig+0x1ec>
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d005      	beq.n	8003b7a <UART_SetConfig+0x1f6>
 8003b6e:	e010      	b.n	8003b92 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b70:	f7fe fec0 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 8003b74:	0003      	movs	r3, r0
 8003b76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b78:	e014      	b.n	8003ba4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b7a:	4b5a      	ldr	r3, [pc, #360]	; (8003ce4 <UART_SetConfig+0x360>)
 8003b7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b7e:	e011      	b.n	8003ba4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b80:	f7fe fe2c 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 8003b84:	0003      	movs	r3, r0
 8003b86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b88:	e00c      	b.n	8003ba4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	021b      	lsls	r3, r3, #8
 8003b8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b90:	e008      	b.n	8003ba4 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003b96:	231a      	movs	r3, #26
 8003b98:	2220      	movs	r2, #32
 8003b9a:	189b      	adds	r3, r3, r2
 8003b9c:	19db      	adds	r3, r3, r7
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
        break;
 8003ba2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d100      	bne.n	8003bac <UART_SetConfig+0x228>
 8003baa:	e147      	b.n	8003e3c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bb0:	4b4d      	ldr	r3, [pc, #308]	; (8003ce8 <UART_SetConfig+0x364>)
 8003bb2:	0052      	lsls	r2, r2, #1
 8003bb4:	5ad3      	ldrh	r3, [r2, r3]
 8003bb6:	0019      	movs	r1, r3
 8003bb8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003bba:	f7fc faad 	bl	8000118 <__udivsi3>
 8003bbe:	0003      	movs	r3, r0
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	0013      	movs	r3, r2
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	189b      	adds	r3, r3, r2
 8003bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d305      	bcc.n	8003bde <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d906      	bls.n	8003bec <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8003bde:	231a      	movs	r3, #26
 8003be0:	2220      	movs	r2, #32
 8003be2:	189b      	adds	r3, r3, r2
 8003be4:	19db      	adds	r3, r3, r7
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	e127      	b.n	8003e3c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bf8:	4b3b      	ldr	r3, [pc, #236]	; (8003ce8 <UART_SetConfig+0x364>)
 8003bfa:	0052      	lsls	r2, r2, #1
 8003bfc:	5ad3      	ldrh	r3, [r2, r3]
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	69b8      	ldr	r0, [r7, #24]
 8003c0a:	69f9      	ldr	r1, [r7, #28]
 8003c0c:	f7fc fb10 	bl	8000230 <__aeabi_uldivmod>
 8003c10:	0002      	movs	r2, r0
 8003c12:	000b      	movs	r3, r1
 8003c14:	0e11      	lsrs	r1, r2, #24
 8003c16:	021d      	lsls	r5, r3, #8
 8003c18:	430d      	orrs	r5, r1
 8003c1a:	0214      	lsls	r4, r2, #8
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	085b      	lsrs	r3, r3, #1
 8003c22:	60bb      	str	r3, [r7, #8]
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	68b8      	ldr	r0, [r7, #8]
 8003c2a:	68f9      	ldr	r1, [r7, #12]
 8003c2c:	1900      	adds	r0, r0, r4
 8003c2e:	4169      	adcs	r1, r5
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	603b      	str	r3, [r7, #0]
 8003c36:	2300      	movs	r3, #0
 8003c38:	607b      	str	r3, [r7, #4]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f7fc faf7 	bl	8000230 <__aeabi_uldivmod>
 8003c42:	0002      	movs	r2, r0
 8003c44:	000b      	movs	r3, r1
 8003c46:	0013      	movs	r3, r2
 8003c48:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c4c:	23c0      	movs	r3, #192	; 0xc0
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d309      	bcc.n	8003c68 <UART_SetConfig+0x2e4>
 8003c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	035b      	lsls	r3, r3, #13
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d204      	bcs.n	8003c68 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c64:	60da      	str	r2, [r3, #12]
 8003c66:	e0e9      	b.n	8003e3c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8003c68:	231a      	movs	r3, #26
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	189b      	adds	r3, r3, r2
 8003c6e:	19db      	adds	r3, r3, r7
 8003c70:	2201      	movs	r2, #1
 8003c72:	701a      	strb	r2, [r3, #0]
 8003c74:	e0e2      	b.n	8003e3c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	69da      	ldr	r2, [r3, #28]
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	021b      	lsls	r3, r3, #8
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d000      	beq.n	8003c84 <UART_SetConfig+0x300>
 8003c82:	e083      	b.n	8003d8c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003c84:	231b      	movs	r3, #27
 8003c86:	2220      	movs	r2, #32
 8003c88:	189b      	adds	r3, r3, r2
 8003c8a:	19db      	adds	r3, r3, r7
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d015      	beq.n	8003cbe <UART_SetConfig+0x33a>
 8003c92:	dc2b      	bgt.n	8003cec <UART_SetConfig+0x368>
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d00d      	beq.n	8003cb4 <UART_SetConfig+0x330>
 8003c98:	dc28      	bgt.n	8003cec <UART_SetConfig+0x368>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <UART_SetConfig+0x320>
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d005      	beq.n	8003cae <UART_SetConfig+0x32a>
 8003ca2:	e023      	b.n	8003cec <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ca4:	f7fe fe26 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 8003ca8:	0003      	movs	r3, r0
 8003caa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cac:	e027      	b.n	8003cfe <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cae:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <UART_SetConfig+0x360>)
 8003cb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cb2:	e024      	b.n	8003cfe <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cb4:	f7fe fd92 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 8003cb8:	0003      	movs	r3, r0
 8003cba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cbc:	e01f      	b.n	8003cfe <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cbe:	2380      	movs	r3, #128	; 0x80
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cc4:	e01b      	b.n	8003cfe <UART_SetConfig+0x37a>
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	cfff69f3 	.word	0xcfff69f3
 8003ccc:	ffffcfff 	.word	0xffffcfff
 8003cd0:	40008000 	.word	0x40008000
 8003cd4:	11fff4ff 	.word	0x11fff4ff
 8003cd8:	40013800 	.word	0x40013800
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40004400 	.word	0x40004400
 8003ce4:	00f42400 	.word	0x00f42400
 8003ce8:	08005388 	.word	0x08005388
      default:
        pclk = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003cf0:	231a      	movs	r3, #26
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	189b      	adds	r3, r3, r2
 8003cf6:	19db      	adds	r3, r3, r7
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	701a      	strb	r2, [r3, #0]
        break;
 8003cfc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d100      	bne.n	8003d06 <UART_SetConfig+0x382>
 8003d04:	e09a      	b.n	8003e3c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d0a:	4b58      	ldr	r3, [pc, #352]	; (8003e6c <UART_SetConfig+0x4e8>)
 8003d0c:	0052      	lsls	r2, r2, #1
 8003d0e:	5ad3      	ldrh	r3, [r2, r3]
 8003d10:	0019      	movs	r1, r3
 8003d12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003d14:	f7fc fa00 	bl	8000118 <__udivsi3>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	005a      	lsls	r2, r3, #1
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	085b      	lsrs	r3, r3, #1
 8003d22:	18d2      	adds	r2, r2, r3
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	0019      	movs	r1, r3
 8003d2a:	0010      	movs	r0, r2
 8003d2c:	f7fc f9f4 	bl	8000118 <__udivsi3>
 8003d30:	0003      	movs	r3, r0
 8003d32:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d36:	2b0f      	cmp	r3, #15
 8003d38:	d921      	bls.n	8003d7e <UART_SetConfig+0x3fa>
 8003d3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d3c:	2380      	movs	r3, #128	; 0x80
 8003d3e:	025b      	lsls	r3, r3, #9
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d21c      	bcs.n	8003d7e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	200e      	movs	r0, #14
 8003d4a:	2420      	movs	r4, #32
 8003d4c:	1903      	adds	r3, r0, r4
 8003d4e:	19db      	adds	r3, r3, r7
 8003d50:	210f      	movs	r1, #15
 8003d52:	438a      	bics	r2, r1
 8003d54:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	085b      	lsrs	r3, r3, #1
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2207      	movs	r2, #7
 8003d5e:	4013      	ands	r3, r2
 8003d60:	b299      	uxth	r1, r3
 8003d62:	1903      	adds	r3, r0, r4
 8003d64:	19db      	adds	r3, r3, r7
 8003d66:	1902      	adds	r2, r0, r4
 8003d68:	19d2      	adds	r2, r2, r7
 8003d6a:	8812      	ldrh	r2, [r2, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	1902      	adds	r2, r0, r4
 8003d76:	19d2      	adds	r2, r2, r7
 8003d78:	8812      	ldrh	r2, [r2, #0]
 8003d7a:	60da      	str	r2, [r3, #12]
 8003d7c:	e05e      	b.n	8003e3c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d7e:	231a      	movs	r3, #26
 8003d80:	2220      	movs	r2, #32
 8003d82:	189b      	adds	r3, r3, r2
 8003d84:	19db      	adds	r3, r3, r7
 8003d86:	2201      	movs	r2, #1
 8003d88:	701a      	strb	r2, [r3, #0]
 8003d8a:	e057      	b.n	8003e3c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d8c:	231b      	movs	r3, #27
 8003d8e:	2220      	movs	r2, #32
 8003d90:	189b      	adds	r3, r3, r2
 8003d92:	19db      	adds	r3, r3, r7
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d015      	beq.n	8003dc6 <UART_SetConfig+0x442>
 8003d9a:	dc18      	bgt.n	8003dce <UART_SetConfig+0x44a>
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d00d      	beq.n	8003dbc <UART_SetConfig+0x438>
 8003da0:	dc15      	bgt.n	8003dce <UART_SetConfig+0x44a>
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <UART_SetConfig+0x428>
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d005      	beq.n	8003db6 <UART_SetConfig+0x432>
 8003daa:	e010      	b.n	8003dce <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dac:	f7fe fda2 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 8003db0:	0003      	movs	r3, r0
 8003db2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003db4:	e014      	b.n	8003de0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003db6:	4b2e      	ldr	r3, [pc, #184]	; (8003e70 <UART_SetConfig+0x4ec>)
 8003db8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003dba:	e011      	b.n	8003de0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dbc:	f7fe fd0e 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 8003dc0:	0003      	movs	r3, r0
 8003dc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003dc4:	e00c      	b.n	8003de0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dc6:	2380      	movs	r3, #128	; 0x80
 8003dc8:	021b      	lsls	r3, r3, #8
 8003dca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003dcc:	e008      	b.n	8003de0 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003dd2:	231a      	movs	r3, #26
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	189b      	adds	r3, r3, r2
 8003dd8:	19db      	adds	r3, r3, r7
 8003dda:	2201      	movs	r2, #1
 8003ddc:	701a      	strb	r2, [r3, #0]
        break;
 8003dde:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d02a      	beq.n	8003e3c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dea:	4b20      	ldr	r3, [pc, #128]	; (8003e6c <UART_SetConfig+0x4e8>)
 8003dec:	0052      	lsls	r2, r2, #1
 8003dee:	5ad3      	ldrh	r3, [r2, r3]
 8003df0:	0019      	movs	r1, r3
 8003df2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003df4:	f7fc f990 	bl	8000118 <__udivsi3>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	085b      	lsrs	r3, r3, #1
 8003e02:	18d2      	adds	r2, r2, r3
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	0019      	movs	r1, r3
 8003e0a:	0010      	movs	r0, r2
 8003e0c:	f7fc f984 	bl	8000118 <__udivsi3>
 8003e10:	0003      	movs	r3, r0
 8003e12:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	2b0f      	cmp	r3, #15
 8003e18:	d90a      	bls.n	8003e30 <UART_SetConfig+0x4ac>
 8003e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e1c:	2380      	movs	r3, #128	; 0x80
 8003e1e:	025b      	lsls	r3, r3, #9
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d205      	bcs.n	8003e30 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60da      	str	r2, [r3, #12]
 8003e2e:	e005      	b.n	8003e3c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003e30:	231a      	movs	r3, #26
 8003e32:	2220      	movs	r2, #32
 8003e34:	189b      	adds	r3, r3, r2
 8003e36:	19db      	adds	r3, r3, r7
 8003e38:	2201      	movs	r2, #1
 8003e3a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	226a      	movs	r2, #106	; 0x6a
 8003e40:	2101      	movs	r1, #1
 8003e42:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	2268      	movs	r2, #104	; 0x68
 8003e48:	2101      	movs	r1, #1
 8003e4a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	2200      	movs	r2, #0
 8003e50:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	2200      	movs	r2, #0
 8003e56:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003e58:	231a      	movs	r3, #26
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	189b      	adds	r3, r3, r2
 8003e5e:	19db      	adds	r3, r3, r7
 8003e60:	781b      	ldrb	r3, [r3, #0]
}
 8003e62:	0018      	movs	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b010      	add	sp, #64	; 0x40
 8003e68:	bdb0      	pop	{r4, r5, r7, pc}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	08005388 	.word	0x08005388
 8003e70:	00f42400 	.word	0x00f42400

08003e74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e80:	2201      	movs	r2, #1
 8003e82:	4013      	ands	r3, r2
 8003e84:	d00b      	beq.n	8003e9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	4a4a      	ldr	r2, [pc, #296]	; (8003fb8 <UART_AdvFeatureConfig+0x144>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	0019      	movs	r1, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d00b      	beq.n	8003ec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	4a43      	ldr	r2, [pc, #268]	; (8003fbc <UART_AdvFeatureConfig+0x148>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d00b      	beq.n	8003ee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	4a3b      	ldr	r2, [pc, #236]	; (8003fc0 <UART_AdvFeatureConfig+0x14c>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	0019      	movs	r1, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	2208      	movs	r2, #8
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d00b      	beq.n	8003f04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	4a34      	ldr	r2, [pc, #208]	; (8003fc4 <UART_AdvFeatureConfig+0x150>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	0019      	movs	r1, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	2210      	movs	r2, #16
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d00b      	beq.n	8003f26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4a2c      	ldr	r2, [pc, #176]	; (8003fc8 <UART_AdvFeatureConfig+0x154>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	0019      	movs	r1, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d00b      	beq.n	8003f48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	4a25      	ldr	r2, [pc, #148]	; (8003fcc <UART_AdvFeatureConfig+0x158>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	0019      	movs	r1, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	2240      	movs	r2, #64	; 0x40
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d01d      	beq.n	8003f8e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	4a1d      	ldr	r2, [pc, #116]	; (8003fd0 <UART_AdvFeatureConfig+0x15c>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	0019      	movs	r1, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f6e:	2380      	movs	r3, #128	; 0x80
 8003f70:	035b      	lsls	r3, r3, #13
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d10b      	bne.n	8003f8e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	4a15      	ldr	r2, [pc, #84]	; (8003fd4 <UART_AdvFeatureConfig+0x160>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	0019      	movs	r1, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	2280      	movs	r2, #128	; 0x80
 8003f94:	4013      	ands	r3, r2
 8003f96:	d00b      	beq.n	8003fb0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	4a0e      	ldr	r2, [pc, #56]	; (8003fd8 <UART_AdvFeatureConfig+0x164>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	0019      	movs	r1, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	605a      	str	r2, [r3, #4]
  }
}
 8003fb0:	46c0      	nop			; (mov r8, r8)
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b002      	add	sp, #8
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	fffdffff 	.word	0xfffdffff
 8003fbc:	fffeffff 	.word	0xfffeffff
 8003fc0:	fffbffff 	.word	0xfffbffff
 8003fc4:	ffff7fff 	.word	0xffff7fff
 8003fc8:	ffffefff 	.word	0xffffefff
 8003fcc:	ffffdfff 	.word	0xffffdfff
 8003fd0:	ffefffff 	.word	0xffefffff
 8003fd4:	ff9fffff 	.word	0xff9fffff
 8003fd8:	fff7ffff 	.word	0xfff7ffff

08003fdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2290      	movs	r2, #144	; 0x90
 8003fe8:	2100      	movs	r1, #0
 8003fea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fec:	f7fd f884 	bl	80010f8 <HAL_GetTick>
 8003ff0:	0003      	movs	r3, r0
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2208      	movs	r2, #8
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d10c      	bne.n	800401c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2280      	movs	r2, #128	; 0x80
 8004006:	0391      	lsls	r1, r2, #14
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	4a1a      	ldr	r2, [pc, #104]	; (8004074 <UART_CheckIdleState+0x98>)
 800400c:	9200      	str	r2, [sp, #0]
 800400e:	2200      	movs	r2, #0
 8004010:	f000 f832 	bl	8004078 <UART_WaitOnFlagUntilTimeout>
 8004014:	1e03      	subs	r3, r0, #0
 8004016:	d001      	beq.n	800401c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e026      	b.n	800406a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2204      	movs	r2, #4
 8004024:	4013      	ands	r3, r2
 8004026:	2b04      	cmp	r3, #4
 8004028:	d10c      	bne.n	8004044 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2280      	movs	r2, #128	; 0x80
 800402e:	03d1      	lsls	r1, r2, #15
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	4a10      	ldr	r2, [pc, #64]	; (8004074 <UART_CheckIdleState+0x98>)
 8004034:	9200      	str	r2, [sp, #0]
 8004036:	2200      	movs	r2, #0
 8004038:	f000 f81e 	bl	8004078 <UART_WaitOnFlagUntilTimeout>
 800403c:	1e03      	subs	r3, r0, #0
 800403e:	d001      	beq.n	8004044 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e012      	b.n	800406a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2288      	movs	r2, #136	; 0x88
 8004048:	2120      	movs	r1, #32
 800404a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	228c      	movs	r2, #140	; 0x8c
 8004050:	2120      	movs	r1, #32
 8004052:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2284      	movs	r2, #132	; 0x84
 8004064:	2100      	movs	r1, #0
 8004066:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	0018      	movs	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	b004      	add	sp, #16
 8004070:	bd80      	pop	{r7, pc}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	01ffffff 	.word	0x01ffffff

08004078 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b094      	sub	sp, #80	; 0x50
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	603b      	str	r3, [r7, #0]
 8004084:	1dfb      	adds	r3, r7, #7
 8004086:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004088:	e0a7      	b.n	80041da <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800408c:	3301      	adds	r3, #1
 800408e:	d100      	bne.n	8004092 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004090:	e0a3      	b.n	80041da <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004092:	f7fd f831 	bl	80010f8 <HAL_GetTick>
 8004096:	0002      	movs	r2, r0
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800409e:	429a      	cmp	r2, r3
 80040a0:	d302      	bcc.n	80040a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80040a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d13f      	bne.n	8004128 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a8:	f3ef 8310 	mrs	r3, PRIMASK
 80040ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80040ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80040b0:	647b      	str	r3, [r7, #68]	; 0x44
 80040b2:	2301      	movs	r3, #1
 80040b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b8:	f383 8810 	msr	PRIMASK, r3
}
 80040bc:	46c0      	nop			; (mov r8, r8)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	494e      	ldr	r1, [pc, #312]	; (8004204 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80040ca:	400a      	ands	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	f383 8810 	msr	PRIMASK, r3
}
 80040d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040da:	f3ef 8310 	mrs	r3, PRIMASK
 80040de:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80040e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e2:	643b      	str	r3, [r7, #64]	; 0x40
 80040e4:	2301      	movs	r3, #1
 80040e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ea:	f383 8810 	msr	PRIMASK, r3
}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2101      	movs	r1, #1
 80040fc:	438a      	bics	r2, r1
 80040fe:	609a      	str	r2, [r3, #8]
 8004100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004102:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004106:	f383 8810 	msr	PRIMASK, r3
}
 800410a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2288      	movs	r2, #136	; 0x88
 8004110:	2120      	movs	r1, #32
 8004112:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	228c      	movs	r2, #140	; 0x8c
 8004118:	2120      	movs	r1, #32
 800411a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2284      	movs	r2, #132	; 0x84
 8004120:	2100      	movs	r1, #0
 8004122:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e069      	b.n	80041fc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2204      	movs	r2, #4
 8004130:	4013      	ands	r3, r2
 8004132:	d052      	beq.n	80041da <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	69da      	ldr	r2, [r3, #28]
 800413a:	2380      	movs	r3, #128	; 0x80
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	401a      	ands	r2, r3
 8004140:	2380      	movs	r3, #128	; 0x80
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	429a      	cmp	r2, r3
 8004146:	d148      	bne.n	80041da <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2280      	movs	r2, #128	; 0x80
 800414e:	0112      	lsls	r2, r2, #4
 8004150:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004152:	f3ef 8310 	mrs	r3, PRIMASK
 8004156:	613b      	str	r3, [r7, #16]
  return(result);
 8004158:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800415a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800415c:	2301      	movs	r3, #1
 800415e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f383 8810 	msr	PRIMASK, r3
}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4924      	ldr	r1, [pc, #144]	; (8004204 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004174:	400a      	ands	r2, r1
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800417a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	f383 8810 	msr	PRIMASK, r3
}
 8004182:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004184:	f3ef 8310 	mrs	r3, PRIMASK
 8004188:	61fb      	str	r3, [r7, #28]
  return(result);
 800418a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418c:	64bb      	str	r3, [r7, #72]	; 0x48
 800418e:	2301      	movs	r3, #1
 8004190:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	f383 8810 	msr	PRIMASK, r3
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2101      	movs	r1, #1
 80041a6:	438a      	bics	r2, r1
 80041a8:	609a      	str	r2, [r3, #8]
 80041aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	f383 8810 	msr	PRIMASK, r3
}
 80041b4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2288      	movs	r2, #136	; 0x88
 80041ba:	2120      	movs	r1, #32
 80041bc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	228c      	movs	r2, #140	; 0x8c
 80041c2:	2120      	movs	r1, #32
 80041c4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2290      	movs	r2, #144	; 0x90
 80041ca:	2120      	movs	r1, #32
 80041cc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2284      	movs	r2, #132	; 0x84
 80041d2:	2100      	movs	r1, #0
 80041d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e010      	b.n	80041fc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	4013      	ands	r3, r2
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	425a      	negs	r2, r3
 80041ea:	4153      	adcs	r3, r2
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	001a      	movs	r2, r3
 80041f0:	1dfb      	adds	r3, r7, #7
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d100      	bne.n	80041fa <UART_WaitOnFlagUntilTimeout+0x182>
 80041f8:	e747      	b.n	800408a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	0018      	movs	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	b014      	add	sp, #80	; 0x50
 8004202:	bd80      	pop	{r7, pc}
 8004204:	fffffe5f 	.word	0xfffffe5f

08004208 <__errno>:
 8004208:	4b01      	ldr	r3, [pc, #4]	; (8004210 <__errno+0x8>)
 800420a:	6818      	ldr	r0, [r3, #0]
 800420c:	4770      	bx	lr
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	2000001c 	.word	0x2000001c

08004214 <__libc_init_array>:
 8004214:	b570      	push	{r4, r5, r6, lr}
 8004216:	2600      	movs	r6, #0
 8004218:	4d0c      	ldr	r5, [pc, #48]	; (800424c <__libc_init_array+0x38>)
 800421a:	4c0d      	ldr	r4, [pc, #52]	; (8004250 <__libc_init_array+0x3c>)
 800421c:	1b64      	subs	r4, r4, r5
 800421e:	10a4      	asrs	r4, r4, #2
 8004220:	42a6      	cmp	r6, r4
 8004222:	d109      	bne.n	8004238 <__libc_init_array+0x24>
 8004224:	2600      	movs	r6, #0
 8004226:	f001 f857 	bl	80052d8 <_init>
 800422a:	4d0a      	ldr	r5, [pc, #40]	; (8004254 <__libc_init_array+0x40>)
 800422c:	4c0a      	ldr	r4, [pc, #40]	; (8004258 <__libc_init_array+0x44>)
 800422e:	1b64      	subs	r4, r4, r5
 8004230:	10a4      	asrs	r4, r4, #2
 8004232:	42a6      	cmp	r6, r4
 8004234:	d105      	bne.n	8004242 <__libc_init_array+0x2e>
 8004236:	bd70      	pop	{r4, r5, r6, pc}
 8004238:	00b3      	lsls	r3, r6, #2
 800423a:	58eb      	ldr	r3, [r5, r3]
 800423c:	4798      	blx	r3
 800423e:	3601      	adds	r6, #1
 8004240:	e7ee      	b.n	8004220 <__libc_init_array+0xc>
 8004242:	00b3      	lsls	r3, r6, #2
 8004244:	58eb      	ldr	r3, [r5, r3]
 8004246:	4798      	blx	r3
 8004248:	3601      	adds	r6, #1
 800424a:	e7f2      	b.n	8004232 <__libc_init_array+0x1e>
 800424c:	08005440 	.word	0x08005440
 8004250:	08005440 	.word	0x08005440
 8004254:	08005440 	.word	0x08005440
 8004258:	08005444 	.word	0x08005444

0800425c <memset>:
 800425c:	0003      	movs	r3, r0
 800425e:	1882      	adds	r2, r0, r2
 8004260:	4293      	cmp	r3, r2
 8004262:	d100      	bne.n	8004266 <memset+0xa>
 8004264:	4770      	bx	lr
 8004266:	7019      	strb	r1, [r3, #0]
 8004268:	3301      	adds	r3, #1
 800426a:	e7f9      	b.n	8004260 <memset+0x4>

0800426c <iprintf>:
 800426c:	b40f      	push	{r0, r1, r2, r3}
 800426e:	4b0b      	ldr	r3, [pc, #44]	; (800429c <iprintf+0x30>)
 8004270:	b513      	push	{r0, r1, r4, lr}
 8004272:	681c      	ldr	r4, [r3, #0]
 8004274:	2c00      	cmp	r4, #0
 8004276:	d005      	beq.n	8004284 <iprintf+0x18>
 8004278:	69a3      	ldr	r3, [r4, #24]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d102      	bne.n	8004284 <iprintf+0x18>
 800427e:	0020      	movs	r0, r4
 8004280:	f000 f884 	bl	800438c <__sinit>
 8004284:	ab05      	add	r3, sp, #20
 8004286:	0020      	movs	r0, r4
 8004288:	9a04      	ldr	r2, [sp, #16]
 800428a:	68a1      	ldr	r1, [r4, #8]
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	f000 f9e1 	bl	8004654 <_vfiprintf_r>
 8004292:	bc16      	pop	{r1, r2, r4}
 8004294:	bc08      	pop	{r3}
 8004296:	b004      	add	sp, #16
 8004298:	4718      	bx	r3
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	2000001c 	.word	0x2000001c

080042a0 <putchar>:
 80042a0:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <putchar+0x24>)
 80042a2:	b570      	push	{r4, r5, r6, lr}
 80042a4:	681c      	ldr	r4, [r3, #0]
 80042a6:	0005      	movs	r5, r0
 80042a8:	2c00      	cmp	r4, #0
 80042aa:	d005      	beq.n	80042b8 <putchar+0x18>
 80042ac:	69a3      	ldr	r3, [r4, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d102      	bne.n	80042b8 <putchar+0x18>
 80042b2:	0020      	movs	r0, r4
 80042b4:	f000 f86a 	bl	800438c <__sinit>
 80042b8:	0029      	movs	r1, r5
 80042ba:	0020      	movs	r0, r4
 80042bc:	68a2      	ldr	r2, [r4, #8]
 80042be:	f000 fc85 	bl	8004bcc <_putc_r>
 80042c2:	bd70      	pop	{r4, r5, r6, pc}
 80042c4:	2000001c 	.word	0x2000001c

080042c8 <std>:
 80042c8:	2300      	movs	r3, #0
 80042ca:	b510      	push	{r4, lr}
 80042cc:	0004      	movs	r4, r0
 80042ce:	6003      	str	r3, [r0, #0]
 80042d0:	6043      	str	r3, [r0, #4]
 80042d2:	6083      	str	r3, [r0, #8]
 80042d4:	8181      	strh	r1, [r0, #12]
 80042d6:	6643      	str	r3, [r0, #100]	; 0x64
 80042d8:	0019      	movs	r1, r3
 80042da:	81c2      	strh	r2, [r0, #14]
 80042dc:	6103      	str	r3, [r0, #16]
 80042de:	6143      	str	r3, [r0, #20]
 80042e0:	6183      	str	r3, [r0, #24]
 80042e2:	2208      	movs	r2, #8
 80042e4:	305c      	adds	r0, #92	; 0x5c
 80042e6:	f7ff ffb9 	bl	800425c <memset>
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <std+0x38>)
 80042ec:	6224      	str	r4, [r4, #32]
 80042ee:	6263      	str	r3, [r4, #36]	; 0x24
 80042f0:	4b04      	ldr	r3, [pc, #16]	; (8004304 <std+0x3c>)
 80042f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80042f4:	4b04      	ldr	r3, [pc, #16]	; (8004308 <std+0x40>)
 80042f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <std+0x44>)
 80042fa:	6323      	str	r3, [r4, #48]	; 0x30
 80042fc:	bd10      	pop	{r4, pc}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	08004c85 	.word	0x08004c85
 8004304:	08004cad 	.word	0x08004cad
 8004308:	08004ce5 	.word	0x08004ce5
 800430c:	08004d11 	.word	0x08004d11

08004310 <_cleanup_r>:
 8004310:	b510      	push	{r4, lr}
 8004312:	4902      	ldr	r1, [pc, #8]	; (800431c <_cleanup_r+0xc>)
 8004314:	f000 f8ba 	bl	800448c <_fwalk_reent>
 8004318:	bd10      	pop	{r4, pc}
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	0800501d 	.word	0x0800501d

08004320 <__sfmoreglue>:
 8004320:	b570      	push	{r4, r5, r6, lr}
 8004322:	2568      	movs	r5, #104	; 0x68
 8004324:	1e4a      	subs	r2, r1, #1
 8004326:	4355      	muls	r5, r2
 8004328:	000e      	movs	r6, r1
 800432a:	0029      	movs	r1, r5
 800432c:	3174      	adds	r1, #116	; 0x74
 800432e:	f000 f8f3 	bl	8004518 <_malloc_r>
 8004332:	1e04      	subs	r4, r0, #0
 8004334:	d008      	beq.n	8004348 <__sfmoreglue+0x28>
 8004336:	2100      	movs	r1, #0
 8004338:	002a      	movs	r2, r5
 800433a:	6001      	str	r1, [r0, #0]
 800433c:	6046      	str	r6, [r0, #4]
 800433e:	300c      	adds	r0, #12
 8004340:	60a0      	str	r0, [r4, #8]
 8004342:	3268      	adds	r2, #104	; 0x68
 8004344:	f7ff ff8a 	bl	800425c <memset>
 8004348:	0020      	movs	r0, r4
 800434a:	bd70      	pop	{r4, r5, r6, pc}

0800434c <__sfp_lock_acquire>:
 800434c:	b510      	push	{r4, lr}
 800434e:	4802      	ldr	r0, [pc, #8]	; (8004358 <__sfp_lock_acquire+0xc>)
 8004350:	f000 f8bd 	bl	80044ce <__retarget_lock_acquire_recursive>
 8004354:	bd10      	pop	{r4, pc}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	200001b9 	.word	0x200001b9

0800435c <__sfp_lock_release>:
 800435c:	b510      	push	{r4, lr}
 800435e:	4802      	ldr	r0, [pc, #8]	; (8004368 <__sfp_lock_release+0xc>)
 8004360:	f000 f8b6 	bl	80044d0 <__retarget_lock_release_recursive>
 8004364:	bd10      	pop	{r4, pc}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	200001b9 	.word	0x200001b9

0800436c <__sinit_lock_acquire>:
 800436c:	b510      	push	{r4, lr}
 800436e:	4802      	ldr	r0, [pc, #8]	; (8004378 <__sinit_lock_acquire+0xc>)
 8004370:	f000 f8ad 	bl	80044ce <__retarget_lock_acquire_recursive>
 8004374:	bd10      	pop	{r4, pc}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	200001ba 	.word	0x200001ba

0800437c <__sinit_lock_release>:
 800437c:	b510      	push	{r4, lr}
 800437e:	4802      	ldr	r0, [pc, #8]	; (8004388 <__sinit_lock_release+0xc>)
 8004380:	f000 f8a6 	bl	80044d0 <__retarget_lock_release_recursive>
 8004384:	bd10      	pop	{r4, pc}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	200001ba 	.word	0x200001ba

0800438c <__sinit>:
 800438c:	b513      	push	{r0, r1, r4, lr}
 800438e:	0004      	movs	r4, r0
 8004390:	f7ff ffec 	bl	800436c <__sinit_lock_acquire>
 8004394:	69a3      	ldr	r3, [r4, #24]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <__sinit+0x14>
 800439a:	f7ff ffef 	bl	800437c <__sinit_lock_release>
 800439e:	bd13      	pop	{r0, r1, r4, pc}
 80043a0:	64a3      	str	r3, [r4, #72]	; 0x48
 80043a2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80043a4:	6523      	str	r3, [r4, #80]	; 0x50
 80043a6:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <__sinit+0x68>)
 80043a8:	4a13      	ldr	r2, [pc, #76]	; (80043f8 <__sinit+0x6c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80043ae:	9301      	str	r3, [sp, #4]
 80043b0:	42a3      	cmp	r3, r4
 80043b2:	d101      	bne.n	80043b8 <__sinit+0x2c>
 80043b4:	2301      	movs	r3, #1
 80043b6:	61a3      	str	r3, [r4, #24]
 80043b8:	0020      	movs	r0, r4
 80043ba:	f000 f81f 	bl	80043fc <__sfp>
 80043be:	6060      	str	r0, [r4, #4]
 80043c0:	0020      	movs	r0, r4
 80043c2:	f000 f81b 	bl	80043fc <__sfp>
 80043c6:	60a0      	str	r0, [r4, #8]
 80043c8:	0020      	movs	r0, r4
 80043ca:	f000 f817 	bl	80043fc <__sfp>
 80043ce:	2200      	movs	r2, #0
 80043d0:	2104      	movs	r1, #4
 80043d2:	60e0      	str	r0, [r4, #12]
 80043d4:	6860      	ldr	r0, [r4, #4]
 80043d6:	f7ff ff77 	bl	80042c8 <std>
 80043da:	2201      	movs	r2, #1
 80043dc:	2109      	movs	r1, #9
 80043de:	68a0      	ldr	r0, [r4, #8]
 80043e0:	f7ff ff72 	bl	80042c8 <std>
 80043e4:	2202      	movs	r2, #2
 80043e6:	2112      	movs	r1, #18
 80043e8:	68e0      	ldr	r0, [r4, #12]
 80043ea:	f7ff ff6d 	bl	80042c8 <std>
 80043ee:	2301      	movs	r3, #1
 80043f0:	61a3      	str	r3, [r4, #24]
 80043f2:	e7d2      	b.n	800439a <__sinit+0xe>
 80043f4:	080053a0 	.word	0x080053a0
 80043f8:	08004311 	.word	0x08004311

080043fc <__sfp>:
 80043fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fe:	0007      	movs	r7, r0
 8004400:	f7ff ffa4 	bl	800434c <__sfp_lock_acquire>
 8004404:	4b1f      	ldr	r3, [pc, #124]	; (8004484 <__sfp+0x88>)
 8004406:	681e      	ldr	r6, [r3, #0]
 8004408:	69b3      	ldr	r3, [r6, #24]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d102      	bne.n	8004414 <__sfp+0x18>
 800440e:	0030      	movs	r0, r6
 8004410:	f7ff ffbc 	bl	800438c <__sinit>
 8004414:	3648      	adds	r6, #72	; 0x48
 8004416:	68b4      	ldr	r4, [r6, #8]
 8004418:	6873      	ldr	r3, [r6, #4]
 800441a:	3b01      	subs	r3, #1
 800441c:	d504      	bpl.n	8004428 <__sfp+0x2c>
 800441e:	6833      	ldr	r3, [r6, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d022      	beq.n	800446a <__sfp+0x6e>
 8004424:	6836      	ldr	r6, [r6, #0]
 8004426:	e7f6      	b.n	8004416 <__sfp+0x1a>
 8004428:	220c      	movs	r2, #12
 800442a:	5ea5      	ldrsh	r5, [r4, r2]
 800442c:	2d00      	cmp	r5, #0
 800442e:	d11a      	bne.n	8004466 <__sfp+0x6a>
 8004430:	0020      	movs	r0, r4
 8004432:	4b15      	ldr	r3, [pc, #84]	; (8004488 <__sfp+0x8c>)
 8004434:	3058      	adds	r0, #88	; 0x58
 8004436:	60e3      	str	r3, [r4, #12]
 8004438:	6665      	str	r5, [r4, #100]	; 0x64
 800443a:	f000 f847 	bl	80044cc <__retarget_lock_init_recursive>
 800443e:	f7ff ff8d 	bl	800435c <__sfp_lock_release>
 8004442:	0020      	movs	r0, r4
 8004444:	2208      	movs	r2, #8
 8004446:	0029      	movs	r1, r5
 8004448:	6025      	str	r5, [r4, #0]
 800444a:	60a5      	str	r5, [r4, #8]
 800444c:	6065      	str	r5, [r4, #4]
 800444e:	6125      	str	r5, [r4, #16]
 8004450:	6165      	str	r5, [r4, #20]
 8004452:	61a5      	str	r5, [r4, #24]
 8004454:	305c      	adds	r0, #92	; 0x5c
 8004456:	f7ff ff01 	bl	800425c <memset>
 800445a:	6365      	str	r5, [r4, #52]	; 0x34
 800445c:	63a5      	str	r5, [r4, #56]	; 0x38
 800445e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004460:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004462:	0020      	movs	r0, r4
 8004464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004466:	3468      	adds	r4, #104	; 0x68
 8004468:	e7d7      	b.n	800441a <__sfp+0x1e>
 800446a:	2104      	movs	r1, #4
 800446c:	0038      	movs	r0, r7
 800446e:	f7ff ff57 	bl	8004320 <__sfmoreglue>
 8004472:	1e04      	subs	r4, r0, #0
 8004474:	6030      	str	r0, [r6, #0]
 8004476:	d1d5      	bne.n	8004424 <__sfp+0x28>
 8004478:	f7ff ff70 	bl	800435c <__sfp_lock_release>
 800447c:	230c      	movs	r3, #12
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	e7ef      	b.n	8004462 <__sfp+0x66>
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	080053a0 	.word	0x080053a0
 8004488:	ffff0001 	.word	0xffff0001

0800448c <_fwalk_reent>:
 800448c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800448e:	0004      	movs	r4, r0
 8004490:	0006      	movs	r6, r0
 8004492:	2700      	movs	r7, #0
 8004494:	9101      	str	r1, [sp, #4]
 8004496:	3448      	adds	r4, #72	; 0x48
 8004498:	6863      	ldr	r3, [r4, #4]
 800449a:	68a5      	ldr	r5, [r4, #8]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	9b00      	ldr	r3, [sp, #0]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	d504      	bpl.n	80044b0 <_fwalk_reent+0x24>
 80044a6:	6824      	ldr	r4, [r4, #0]
 80044a8:	2c00      	cmp	r4, #0
 80044aa:	d1f5      	bne.n	8004498 <_fwalk_reent+0xc>
 80044ac:	0038      	movs	r0, r7
 80044ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80044b0:	89ab      	ldrh	r3, [r5, #12]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d908      	bls.n	80044c8 <_fwalk_reent+0x3c>
 80044b6:	220e      	movs	r2, #14
 80044b8:	5eab      	ldrsh	r3, [r5, r2]
 80044ba:	3301      	adds	r3, #1
 80044bc:	d004      	beq.n	80044c8 <_fwalk_reent+0x3c>
 80044be:	0029      	movs	r1, r5
 80044c0:	0030      	movs	r0, r6
 80044c2:	9b01      	ldr	r3, [sp, #4]
 80044c4:	4798      	blx	r3
 80044c6:	4307      	orrs	r7, r0
 80044c8:	3568      	adds	r5, #104	; 0x68
 80044ca:	e7e8      	b.n	800449e <_fwalk_reent+0x12>

080044cc <__retarget_lock_init_recursive>:
 80044cc:	4770      	bx	lr

080044ce <__retarget_lock_acquire_recursive>:
 80044ce:	4770      	bx	lr

080044d0 <__retarget_lock_release_recursive>:
 80044d0:	4770      	bx	lr
	...

080044d4 <sbrk_aligned>:
 80044d4:	b570      	push	{r4, r5, r6, lr}
 80044d6:	4e0f      	ldr	r6, [pc, #60]	; (8004514 <sbrk_aligned+0x40>)
 80044d8:	000d      	movs	r5, r1
 80044da:	6831      	ldr	r1, [r6, #0]
 80044dc:	0004      	movs	r4, r0
 80044de:	2900      	cmp	r1, #0
 80044e0:	d102      	bne.n	80044e8 <sbrk_aligned+0x14>
 80044e2:	f000 fbbd 	bl	8004c60 <_sbrk_r>
 80044e6:	6030      	str	r0, [r6, #0]
 80044e8:	0029      	movs	r1, r5
 80044ea:	0020      	movs	r0, r4
 80044ec:	f000 fbb8 	bl	8004c60 <_sbrk_r>
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	d00a      	beq.n	800450a <sbrk_aligned+0x36>
 80044f4:	2303      	movs	r3, #3
 80044f6:	1cc5      	adds	r5, r0, #3
 80044f8:	439d      	bics	r5, r3
 80044fa:	42a8      	cmp	r0, r5
 80044fc:	d007      	beq.n	800450e <sbrk_aligned+0x3a>
 80044fe:	1a29      	subs	r1, r5, r0
 8004500:	0020      	movs	r0, r4
 8004502:	f000 fbad 	bl	8004c60 <_sbrk_r>
 8004506:	1c43      	adds	r3, r0, #1
 8004508:	d101      	bne.n	800450e <sbrk_aligned+0x3a>
 800450a:	2501      	movs	r5, #1
 800450c:	426d      	negs	r5, r5
 800450e:	0028      	movs	r0, r5
 8004510:	bd70      	pop	{r4, r5, r6, pc}
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	200001c0 	.word	0x200001c0

08004518 <_malloc_r>:
 8004518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800451a:	2203      	movs	r2, #3
 800451c:	1ccb      	adds	r3, r1, #3
 800451e:	4393      	bics	r3, r2
 8004520:	3308      	adds	r3, #8
 8004522:	0006      	movs	r6, r0
 8004524:	001f      	movs	r7, r3
 8004526:	2b0c      	cmp	r3, #12
 8004528:	d232      	bcs.n	8004590 <_malloc_r+0x78>
 800452a:	270c      	movs	r7, #12
 800452c:	42b9      	cmp	r1, r7
 800452e:	d831      	bhi.n	8004594 <_malloc_r+0x7c>
 8004530:	0030      	movs	r0, r6
 8004532:	f000 fe3f 	bl	80051b4 <__malloc_lock>
 8004536:	4d32      	ldr	r5, [pc, #200]	; (8004600 <_malloc_r+0xe8>)
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	001c      	movs	r4, r3
 800453c:	2c00      	cmp	r4, #0
 800453e:	d12e      	bne.n	800459e <_malloc_r+0x86>
 8004540:	0039      	movs	r1, r7
 8004542:	0030      	movs	r0, r6
 8004544:	f7ff ffc6 	bl	80044d4 <sbrk_aligned>
 8004548:	0004      	movs	r4, r0
 800454a:	1c43      	adds	r3, r0, #1
 800454c:	d11e      	bne.n	800458c <_malloc_r+0x74>
 800454e:	682c      	ldr	r4, [r5, #0]
 8004550:	0025      	movs	r5, r4
 8004552:	2d00      	cmp	r5, #0
 8004554:	d14a      	bne.n	80045ec <_malloc_r+0xd4>
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	0029      	movs	r1, r5
 800455a:	18e3      	adds	r3, r4, r3
 800455c:	0030      	movs	r0, r6
 800455e:	9301      	str	r3, [sp, #4]
 8004560:	f000 fb7e 	bl	8004c60 <_sbrk_r>
 8004564:	9b01      	ldr	r3, [sp, #4]
 8004566:	4283      	cmp	r3, r0
 8004568:	d143      	bne.n	80045f2 <_malloc_r+0xda>
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	3703      	adds	r7, #3
 800456e:	1aff      	subs	r7, r7, r3
 8004570:	2303      	movs	r3, #3
 8004572:	439f      	bics	r7, r3
 8004574:	3708      	adds	r7, #8
 8004576:	2f0c      	cmp	r7, #12
 8004578:	d200      	bcs.n	800457c <_malloc_r+0x64>
 800457a:	270c      	movs	r7, #12
 800457c:	0039      	movs	r1, r7
 800457e:	0030      	movs	r0, r6
 8004580:	f7ff ffa8 	bl	80044d4 <sbrk_aligned>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d034      	beq.n	80045f2 <_malloc_r+0xda>
 8004588:	6823      	ldr	r3, [r4, #0]
 800458a:	19df      	adds	r7, r3, r7
 800458c:	6027      	str	r7, [r4, #0]
 800458e:	e013      	b.n	80045b8 <_malloc_r+0xa0>
 8004590:	2b00      	cmp	r3, #0
 8004592:	dacb      	bge.n	800452c <_malloc_r+0x14>
 8004594:	230c      	movs	r3, #12
 8004596:	2500      	movs	r5, #0
 8004598:	6033      	str	r3, [r6, #0]
 800459a:	0028      	movs	r0, r5
 800459c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800459e:	6822      	ldr	r2, [r4, #0]
 80045a0:	1bd1      	subs	r1, r2, r7
 80045a2:	d420      	bmi.n	80045e6 <_malloc_r+0xce>
 80045a4:	290b      	cmp	r1, #11
 80045a6:	d917      	bls.n	80045d8 <_malloc_r+0xc0>
 80045a8:	19e2      	adds	r2, r4, r7
 80045aa:	6027      	str	r7, [r4, #0]
 80045ac:	42a3      	cmp	r3, r4
 80045ae:	d111      	bne.n	80045d4 <_malloc_r+0xbc>
 80045b0:	602a      	str	r2, [r5, #0]
 80045b2:	6863      	ldr	r3, [r4, #4]
 80045b4:	6011      	str	r1, [r2, #0]
 80045b6:	6053      	str	r3, [r2, #4]
 80045b8:	0030      	movs	r0, r6
 80045ba:	0025      	movs	r5, r4
 80045bc:	f000 fe02 	bl	80051c4 <__malloc_unlock>
 80045c0:	2207      	movs	r2, #7
 80045c2:	350b      	adds	r5, #11
 80045c4:	1d23      	adds	r3, r4, #4
 80045c6:	4395      	bics	r5, r2
 80045c8:	1aea      	subs	r2, r5, r3
 80045ca:	429d      	cmp	r5, r3
 80045cc:	d0e5      	beq.n	800459a <_malloc_r+0x82>
 80045ce:	1b5b      	subs	r3, r3, r5
 80045d0:	50a3      	str	r3, [r4, r2]
 80045d2:	e7e2      	b.n	800459a <_malloc_r+0x82>
 80045d4:	605a      	str	r2, [r3, #4]
 80045d6:	e7ec      	b.n	80045b2 <_malloc_r+0x9a>
 80045d8:	6862      	ldr	r2, [r4, #4]
 80045da:	42a3      	cmp	r3, r4
 80045dc:	d101      	bne.n	80045e2 <_malloc_r+0xca>
 80045de:	602a      	str	r2, [r5, #0]
 80045e0:	e7ea      	b.n	80045b8 <_malloc_r+0xa0>
 80045e2:	605a      	str	r2, [r3, #4]
 80045e4:	e7e8      	b.n	80045b8 <_malloc_r+0xa0>
 80045e6:	0023      	movs	r3, r4
 80045e8:	6864      	ldr	r4, [r4, #4]
 80045ea:	e7a7      	b.n	800453c <_malloc_r+0x24>
 80045ec:	002c      	movs	r4, r5
 80045ee:	686d      	ldr	r5, [r5, #4]
 80045f0:	e7af      	b.n	8004552 <_malloc_r+0x3a>
 80045f2:	230c      	movs	r3, #12
 80045f4:	0030      	movs	r0, r6
 80045f6:	6033      	str	r3, [r6, #0]
 80045f8:	f000 fde4 	bl	80051c4 <__malloc_unlock>
 80045fc:	e7cd      	b.n	800459a <_malloc_r+0x82>
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	200001bc 	.word	0x200001bc

08004604 <__sfputc_r>:
 8004604:	6893      	ldr	r3, [r2, #8]
 8004606:	b510      	push	{r4, lr}
 8004608:	3b01      	subs	r3, #1
 800460a:	6093      	str	r3, [r2, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	da04      	bge.n	800461a <__sfputc_r+0x16>
 8004610:	6994      	ldr	r4, [r2, #24]
 8004612:	42a3      	cmp	r3, r4
 8004614:	db07      	blt.n	8004626 <__sfputc_r+0x22>
 8004616:	290a      	cmp	r1, #10
 8004618:	d005      	beq.n	8004626 <__sfputc_r+0x22>
 800461a:	6813      	ldr	r3, [r2, #0]
 800461c:	1c58      	adds	r0, r3, #1
 800461e:	6010      	str	r0, [r2, #0]
 8004620:	7019      	strb	r1, [r3, #0]
 8004622:	0008      	movs	r0, r1
 8004624:	bd10      	pop	{r4, pc}
 8004626:	f000 fb79 	bl	8004d1c <__swbuf_r>
 800462a:	0001      	movs	r1, r0
 800462c:	e7f9      	b.n	8004622 <__sfputc_r+0x1e>

0800462e <__sfputs_r>:
 800462e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004630:	0006      	movs	r6, r0
 8004632:	000f      	movs	r7, r1
 8004634:	0014      	movs	r4, r2
 8004636:	18d5      	adds	r5, r2, r3
 8004638:	42ac      	cmp	r4, r5
 800463a:	d101      	bne.n	8004640 <__sfputs_r+0x12>
 800463c:	2000      	movs	r0, #0
 800463e:	e007      	b.n	8004650 <__sfputs_r+0x22>
 8004640:	7821      	ldrb	r1, [r4, #0]
 8004642:	003a      	movs	r2, r7
 8004644:	0030      	movs	r0, r6
 8004646:	f7ff ffdd 	bl	8004604 <__sfputc_r>
 800464a:	3401      	adds	r4, #1
 800464c:	1c43      	adds	r3, r0, #1
 800464e:	d1f3      	bne.n	8004638 <__sfputs_r+0xa>
 8004650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004654 <_vfiprintf_r>:
 8004654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004656:	b0a1      	sub	sp, #132	; 0x84
 8004658:	0006      	movs	r6, r0
 800465a:	000c      	movs	r4, r1
 800465c:	001f      	movs	r7, r3
 800465e:	9203      	str	r2, [sp, #12]
 8004660:	2800      	cmp	r0, #0
 8004662:	d004      	beq.n	800466e <_vfiprintf_r+0x1a>
 8004664:	6983      	ldr	r3, [r0, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <_vfiprintf_r+0x1a>
 800466a:	f7ff fe8f 	bl	800438c <__sinit>
 800466e:	4b8e      	ldr	r3, [pc, #568]	; (80048a8 <_vfiprintf_r+0x254>)
 8004670:	429c      	cmp	r4, r3
 8004672:	d11c      	bne.n	80046ae <_vfiprintf_r+0x5a>
 8004674:	6874      	ldr	r4, [r6, #4]
 8004676:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004678:	07db      	lsls	r3, r3, #31
 800467a:	d405      	bmi.n	8004688 <_vfiprintf_r+0x34>
 800467c:	89a3      	ldrh	r3, [r4, #12]
 800467e:	059b      	lsls	r3, r3, #22
 8004680:	d402      	bmi.n	8004688 <_vfiprintf_r+0x34>
 8004682:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004684:	f7ff ff23 	bl	80044ce <__retarget_lock_acquire_recursive>
 8004688:	89a3      	ldrh	r3, [r4, #12]
 800468a:	071b      	lsls	r3, r3, #28
 800468c:	d502      	bpl.n	8004694 <_vfiprintf_r+0x40>
 800468e:	6923      	ldr	r3, [r4, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d11d      	bne.n	80046d0 <_vfiprintf_r+0x7c>
 8004694:	0021      	movs	r1, r4
 8004696:	0030      	movs	r0, r6
 8004698:	f000 fbaa 	bl	8004df0 <__swsetup_r>
 800469c:	2800      	cmp	r0, #0
 800469e:	d017      	beq.n	80046d0 <_vfiprintf_r+0x7c>
 80046a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046a2:	07db      	lsls	r3, r3, #31
 80046a4:	d50d      	bpl.n	80046c2 <_vfiprintf_r+0x6e>
 80046a6:	2001      	movs	r0, #1
 80046a8:	4240      	negs	r0, r0
 80046aa:	b021      	add	sp, #132	; 0x84
 80046ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ae:	4b7f      	ldr	r3, [pc, #508]	; (80048ac <_vfiprintf_r+0x258>)
 80046b0:	429c      	cmp	r4, r3
 80046b2:	d101      	bne.n	80046b8 <_vfiprintf_r+0x64>
 80046b4:	68b4      	ldr	r4, [r6, #8]
 80046b6:	e7de      	b.n	8004676 <_vfiprintf_r+0x22>
 80046b8:	4b7d      	ldr	r3, [pc, #500]	; (80048b0 <_vfiprintf_r+0x25c>)
 80046ba:	429c      	cmp	r4, r3
 80046bc:	d1db      	bne.n	8004676 <_vfiprintf_r+0x22>
 80046be:	68f4      	ldr	r4, [r6, #12]
 80046c0:	e7d9      	b.n	8004676 <_vfiprintf_r+0x22>
 80046c2:	89a3      	ldrh	r3, [r4, #12]
 80046c4:	059b      	lsls	r3, r3, #22
 80046c6:	d4ee      	bmi.n	80046a6 <_vfiprintf_r+0x52>
 80046c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046ca:	f7ff ff01 	bl	80044d0 <__retarget_lock_release_recursive>
 80046ce:	e7ea      	b.n	80046a6 <_vfiprintf_r+0x52>
 80046d0:	2300      	movs	r3, #0
 80046d2:	ad08      	add	r5, sp, #32
 80046d4:	616b      	str	r3, [r5, #20]
 80046d6:	3320      	adds	r3, #32
 80046d8:	766b      	strb	r3, [r5, #25]
 80046da:	3310      	adds	r3, #16
 80046dc:	76ab      	strb	r3, [r5, #26]
 80046de:	9707      	str	r7, [sp, #28]
 80046e0:	9f03      	ldr	r7, [sp, #12]
 80046e2:	783b      	ldrb	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <_vfiprintf_r+0x98>
 80046e8:	2b25      	cmp	r3, #37	; 0x25
 80046ea:	d14e      	bne.n	800478a <_vfiprintf_r+0x136>
 80046ec:	9b03      	ldr	r3, [sp, #12]
 80046ee:	1afb      	subs	r3, r7, r3
 80046f0:	9305      	str	r3, [sp, #20]
 80046f2:	9b03      	ldr	r3, [sp, #12]
 80046f4:	429f      	cmp	r7, r3
 80046f6:	d00d      	beq.n	8004714 <_vfiprintf_r+0xc0>
 80046f8:	9b05      	ldr	r3, [sp, #20]
 80046fa:	0021      	movs	r1, r4
 80046fc:	0030      	movs	r0, r6
 80046fe:	9a03      	ldr	r2, [sp, #12]
 8004700:	f7ff ff95 	bl	800462e <__sfputs_r>
 8004704:	1c43      	adds	r3, r0, #1
 8004706:	d100      	bne.n	800470a <_vfiprintf_r+0xb6>
 8004708:	e0b5      	b.n	8004876 <_vfiprintf_r+0x222>
 800470a:	696a      	ldr	r2, [r5, #20]
 800470c:	9b05      	ldr	r3, [sp, #20]
 800470e:	4694      	mov	ip, r2
 8004710:	4463      	add	r3, ip
 8004712:	616b      	str	r3, [r5, #20]
 8004714:	783b      	ldrb	r3, [r7, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d100      	bne.n	800471c <_vfiprintf_r+0xc8>
 800471a:	e0ac      	b.n	8004876 <_vfiprintf_r+0x222>
 800471c:	2201      	movs	r2, #1
 800471e:	1c7b      	adds	r3, r7, #1
 8004720:	9303      	str	r3, [sp, #12]
 8004722:	2300      	movs	r3, #0
 8004724:	4252      	negs	r2, r2
 8004726:	606a      	str	r2, [r5, #4]
 8004728:	a904      	add	r1, sp, #16
 800472a:	3254      	adds	r2, #84	; 0x54
 800472c:	1852      	adds	r2, r2, r1
 800472e:	602b      	str	r3, [r5, #0]
 8004730:	60eb      	str	r3, [r5, #12]
 8004732:	60ab      	str	r3, [r5, #8]
 8004734:	7013      	strb	r3, [r2, #0]
 8004736:	65ab      	str	r3, [r5, #88]	; 0x58
 8004738:	9b03      	ldr	r3, [sp, #12]
 800473a:	2205      	movs	r2, #5
 800473c:	7819      	ldrb	r1, [r3, #0]
 800473e:	485d      	ldr	r0, [pc, #372]	; (80048b4 <_vfiprintf_r+0x260>)
 8004740:	f000 fd2c 	bl	800519c <memchr>
 8004744:	9b03      	ldr	r3, [sp, #12]
 8004746:	1c5f      	adds	r7, r3, #1
 8004748:	2800      	cmp	r0, #0
 800474a:	d120      	bne.n	800478e <_vfiprintf_r+0x13a>
 800474c:	682a      	ldr	r2, [r5, #0]
 800474e:	06d3      	lsls	r3, r2, #27
 8004750:	d504      	bpl.n	800475c <_vfiprintf_r+0x108>
 8004752:	2353      	movs	r3, #83	; 0x53
 8004754:	a904      	add	r1, sp, #16
 8004756:	185b      	adds	r3, r3, r1
 8004758:	2120      	movs	r1, #32
 800475a:	7019      	strb	r1, [r3, #0]
 800475c:	0713      	lsls	r3, r2, #28
 800475e:	d504      	bpl.n	800476a <_vfiprintf_r+0x116>
 8004760:	2353      	movs	r3, #83	; 0x53
 8004762:	a904      	add	r1, sp, #16
 8004764:	185b      	adds	r3, r3, r1
 8004766:	212b      	movs	r1, #43	; 0x2b
 8004768:	7019      	strb	r1, [r3, #0]
 800476a:	9b03      	ldr	r3, [sp, #12]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b2a      	cmp	r3, #42	; 0x2a
 8004770:	d016      	beq.n	80047a0 <_vfiprintf_r+0x14c>
 8004772:	2100      	movs	r1, #0
 8004774:	68eb      	ldr	r3, [r5, #12]
 8004776:	9f03      	ldr	r7, [sp, #12]
 8004778:	783a      	ldrb	r2, [r7, #0]
 800477a:	1c78      	adds	r0, r7, #1
 800477c:	3a30      	subs	r2, #48	; 0x30
 800477e:	4684      	mov	ip, r0
 8004780:	2a09      	cmp	r2, #9
 8004782:	d94f      	bls.n	8004824 <_vfiprintf_r+0x1d0>
 8004784:	2900      	cmp	r1, #0
 8004786:	d111      	bne.n	80047ac <_vfiprintf_r+0x158>
 8004788:	e017      	b.n	80047ba <_vfiprintf_r+0x166>
 800478a:	3701      	adds	r7, #1
 800478c:	e7a9      	b.n	80046e2 <_vfiprintf_r+0x8e>
 800478e:	4b49      	ldr	r3, [pc, #292]	; (80048b4 <_vfiprintf_r+0x260>)
 8004790:	682a      	ldr	r2, [r5, #0]
 8004792:	1ac0      	subs	r0, r0, r3
 8004794:	2301      	movs	r3, #1
 8004796:	4083      	lsls	r3, r0
 8004798:	4313      	orrs	r3, r2
 800479a:	602b      	str	r3, [r5, #0]
 800479c:	9703      	str	r7, [sp, #12]
 800479e:	e7cb      	b.n	8004738 <_vfiprintf_r+0xe4>
 80047a0:	9b07      	ldr	r3, [sp, #28]
 80047a2:	1d19      	adds	r1, r3, #4
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	9107      	str	r1, [sp, #28]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	db01      	blt.n	80047b0 <_vfiprintf_r+0x15c>
 80047ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80047ae:	e004      	b.n	80047ba <_vfiprintf_r+0x166>
 80047b0:	425b      	negs	r3, r3
 80047b2:	60eb      	str	r3, [r5, #12]
 80047b4:	2302      	movs	r3, #2
 80047b6:	4313      	orrs	r3, r2
 80047b8:	602b      	str	r3, [r5, #0]
 80047ba:	783b      	ldrb	r3, [r7, #0]
 80047bc:	2b2e      	cmp	r3, #46	; 0x2e
 80047be:	d10a      	bne.n	80047d6 <_vfiprintf_r+0x182>
 80047c0:	787b      	ldrb	r3, [r7, #1]
 80047c2:	2b2a      	cmp	r3, #42	; 0x2a
 80047c4:	d137      	bne.n	8004836 <_vfiprintf_r+0x1e2>
 80047c6:	9b07      	ldr	r3, [sp, #28]
 80047c8:	3702      	adds	r7, #2
 80047ca:	1d1a      	adds	r2, r3, #4
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	9207      	str	r2, [sp, #28]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	db2d      	blt.n	8004830 <_vfiprintf_r+0x1dc>
 80047d4:	9309      	str	r3, [sp, #36]	; 0x24
 80047d6:	2203      	movs	r2, #3
 80047d8:	7839      	ldrb	r1, [r7, #0]
 80047da:	4837      	ldr	r0, [pc, #220]	; (80048b8 <_vfiprintf_r+0x264>)
 80047dc:	f000 fcde 	bl	800519c <memchr>
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d007      	beq.n	80047f4 <_vfiprintf_r+0x1a0>
 80047e4:	4b34      	ldr	r3, [pc, #208]	; (80048b8 <_vfiprintf_r+0x264>)
 80047e6:	682a      	ldr	r2, [r5, #0]
 80047e8:	1ac0      	subs	r0, r0, r3
 80047ea:	2340      	movs	r3, #64	; 0x40
 80047ec:	4083      	lsls	r3, r0
 80047ee:	4313      	orrs	r3, r2
 80047f0:	3701      	adds	r7, #1
 80047f2:	602b      	str	r3, [r5, #0]
 80047f4:	7839      	ldrb	r1, [r7, #0]
 80047f6:	1c7b      	adds	r3, r7, #1
 80047f8:	2206      	movs	r2, #6
 80047fa:	4830      	ldr	r0, [pc, #192]	; (80048bc <_vfiprintf_r+0x268>)
 80047fc:	9303      	str	r3, [sp, #12]
 80047fe:	7629      	strb	r1, [r5, #24]
 8004800:	f000 fccc 	bl	800519c <memchr>
 8004804:	2800      	cmp	r0, #0
 8004806:	d045      	beq.n	8004894 <_vfiprintf_r+0x240>
 8004808:	4b2d      	ldr	r3, [pc, #180]	; (80048c0 <_vfiprintf_r+0x26c>)
 800480a:	2b00      	cmp	r3, #0
 800480c:	d127      	bne.n	800485e <_vfiprintf_r+0x20a>
 800480e:	2207      	movs	r2, #7
 8004810:	9b07      	ldr	r3, [sp, #28]
 8004812:	3307      	adds	r3, #7
 8004814:	4393      	bics	r3, r2
 8004816:	3308      	adds	r3, #8
 8004818:	9307      	str	r3, [sp, #28]
 800481a:	696b      	ldr	r3, [r5, #20]
 800481c:	9a04      	ldr	r2, [sp, #16]
 800481e:	189b      	adds	r3, r3, r2
 8004820:	616b      	str	r3, [r5, #20]
 8004822:	e75d      	b.n	80046e0 <_vfiprintf_r+0x8c>
 8004824:	210a      	movs	r1, #10
 8004826:	434b      	muls	r3, r1
 8004828:	4667      	mov	r7, ip
 800482a:	189b      	adds	r3, r3, r2
 800482c:	3909      	subs	r1, #9
 800482e:	e7a3      	b.n	8004778 <_vfiprintf_r+0x124>
 8004830:	2301      	movs	r3, #1
 8004832:	425b      	negs	r3, r3
 8004834:	e7ce      	b.n	80047d4 <_vfiprintf_r+0x180>
 8004836:	2300      	movs	r3, #0
 8004838:	001a      	movs	r2, r3
 800483a:	3701      	adds	r7, #1
 800483c:	606b      	str	r3, [r5, #4]
 800483e:	7839      	ldrb	r1, [r7, #0]
 8004840:	1c78      	adds	r0, r7, #1
 8004842:	3930      	subs	r1, #48	; 0x30
 8004844:	4684      	mov	ip, r0
 8004846:	2909      	cmp	r1, #9
 8004848:	d903      	bls.n	8004852 <_vfiprintf_r+0x1fe>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0c3      	beq.n	80047d6 <_vfiprintf_r+0x182>
 800484e:	9209      	str	r2, [sp, #36]	; 0x24
 8004850:	e7c1      	b.n	80047d6 <_vfiprintf_r+0x182>
 8004852:	230a      	movs	r3, #10
 8004854:	435a      	muls	r2, r3
 8004856:	4667      	mov	r7, ip
 8004858:	1852      	adds	r2, r2, r1
 800485a:	3b09      	subs	r3, #9
 800485c:	e7ef      	b.n	800483e <_vfiprintf_r+0x1ea>
 800485e:	ab07      	add	r3, sp, #28
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	0022      	movs	r2, r4
 8004864:	0029      	movs	r1, r5
 8004866:	0030      	movs	r0, r6
 8004868:	4b16      	ldr	r3, [pc, #88]	; (80048c4 <_vfiprintf_r+0x270>)
 800486a:	e000      	b.n	800486e <_vfiprintf_r+0x21a>
 800486c:	bf00      	nop
 800486e:	9004      	str	r0, [sp, #16]
 8004870:	9b04      	ldr	r3, [sp, #16]
 8004872:	3301      	adds	r3, #1
 8004874:	d1d1      	bne.n	800481a <_vfiprintf_r+0x1c6>
 8004876:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004878:	07db      	lsls	r3, r3, #31
 800487a:	d405      	bmi.n	8004888 <_vfiprintf_r+0x234>
 800487c:	89a3      	ldrh	r3, [r4, #12]
 800487e:	059b      	lsls	r3, r3, #22
 8004880:	d402      	bmi.n	8004888 <_vfiprintf_r+0x234>
 8004882:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004884:	f7ff fe24 	bl	80044d0 <__retarget_lock_release_recursive>
 8004888:	89a3      	ldrh	r3, [r4, #12]
 800488a:	065b      	lsls	r3, r3, #25
 800488c:	d500      	bpl.n	8004890 <_vfiprintf_r+0x23c>
 800488e:	e70a      	b.n	80046a6 <_vfiprintf_r+0x52>
 8004890:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004892:	e70a      	b.n	80046aa <_vfiprintf_r+0x56>
 8004894:	ab07      	add	r3, sp, #28
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	0022      	movs	r2, r4
 800489a:	0029      	movs	r1, r5
 800489c:	0030      	movs	r0, r6
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <_vfiprintf_r+0x270>)
 80048a0:	f000 f882 	bl	80049a8 <_printf_i>
 80048a4:	e7e3      	b.n	800486e <_vfiprintf_r+0x21a>
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	080053c4 	.word	0x080053c4
 80048ac:	080053e4 	.word	0x080053e4
 80048b0:	080053a4 	.word	0x080053a4
 80048b4:	08005404 	.word	0x08005404
 80048b8:	0800540a 	.word	0x0800540a
 80048bc:	0800540e 	.word	0x0800540e
 80048c0:	00000000 	.word	0x00000000
 80048c4:	0800462f 	.word	0x0800462f

080048c8 <_printf_common>:
 80048c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048ca:	0015      	movs	r5, r2
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	688a      	ldr	r2, [r1, #8]
 80048d0:	690b      	ldr	r3, [r1, #16]
 80048d2:	000c      	movs	r4, r1
 80048d4:	9000      	str	r0, [sp, #0]
 80048d6:	4293      	cmp	r3, r2
 80048d8:	da00      	bge.n	80048dc <_printf_common+0x14>
 80048da:	0013      	movs	r3, r2
 80048dc:	0022      	movs	r2, r4
 80048de:	602b      	str	r3, [r5, #0]
 80048e0:	3243      	adds	r2, #67	; 0x43
 80048e2:	7812      	ldrb	r2, [r2, #0]
 80048e4:	2a00      	cmp	r2, #0
 80048e6:	d001      	beq.n	80048ec <_printf_common+0x24>
 80048e8:	3301      	adds	r3, #1
 80048ea:	602b      	str	r3, [r5, #0]
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	069b      	lsls	r3, r3, #26
 80048f0:	d502      	bpl.n	80048f8 <_printf_common+0x30>
 80048f2:	682b      	ldr	r3, [r5, #0]
 80048f4:	3302      	adds	r3, #2
 80048f6:	602b      	str	r3, [r5, #0]
 80048f8:	6822      	ldr	r2, [r4, #0]
 80048fa:	2306      	movs	r3, #6
 80048fc:	0017      	movs	r7, r2
 80048fe:	401f      	ands	r7, r3
 8004900:	421a      	tst	r2, r3
 8004902:	d027      	beq.n	8004954 <_printf_common+0x8c>
 8004904:	0023      	movs	r3, r4
 8004906:	3343      	adds	r3, #67	; 0x43
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	1e5a      	subs	r2, r3, #1
 800490c:	4193      	sbcs	r3, r2
 800490e:	6822      	ldr	r2, [r4, #0]
 8004910:	0692      	lsls	r2, r2, #26
 8004912:	d430      	bmi.n	8004976 <_printf_common+0xae>
 8004914:	0022      	movs	r2, r4
 8004916:	9901      	ldr	r1, [sp, #4]
 8004918:	9800      	ldr	r0, [sp, #0]
 800491a:	9e08      	ldr	r6, [sp, #32]
 800491c:	3243      	adds	r2, #67	; 0x43
 800491e:	47b0      	blx	r6
 8004920:	1c43      	adds	r3, r0, #1
 8004922:	d025      	beq.n	8004970 <_printf_common+0xa8>
 8004924:	2306      	movs	r3, #6
 8004926:	6820      	ldr	r0, [r4, #0]
 8004928:	682a      	ldr	r2, [r5, #0]
 800492a:	68e1      	ldr	r1, [r4, #12]
 800492c:	2500      	movs	r5, #0
 800492e:	4003      	ands	r3, r0
 8004930:	2b04      	cmp	r3, #4
 8004932:	d103      	bne.n	800493c <_printf_common+0x74>
 8004934:	1a8d      	subs	r5, r1, r2
 8004936:	43eb      	mvns	r3, r5
 8004938:	17db      	asrs	r3, r3, #31
 800493a:	401d      	ands	r5, r3
 800493c:	68a3      	ldr	r3, [r4, #8]
 800493e:	6922      	ldr	r2, [r4, #16]
 8004940:	4293      	cmp	r3, r2
 8004942:	dd01      	ble.n	8004948 <_printf_common+0x80>
 8004944:	1a9b      	subs	r3, r3, r2
 8004946:	18ed      	adds	r5, r5, r3
 8004948:	2700      	movs	r7, #0
 800494a:	42bd      	cmp	r5, r7
 800494c:	d120      	bne.n	8004990 <_printf_common+0xc8>
 800494e:	2000      	movs	r0, #0
 8004950:	e010      	b.n	8004974 <_printf_common+0xac>
 8004952:	3701      	adds	r7, #1
 8004954:	68e3      	ldr	r3, [r4, #12]
 8004956:	682a      	ldr	r2, [r5, #0]
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	42bb      	cmp	r3, r7
 800495c:	ddd2      	ble.n	8004904 <_printf_common+0x3c>
 800495e:	0022      	movs	r2, r4
 8004960:	2301      	movs	r3, #1
 8004962:	9901      	ldr	r1, [sp, #4]
 8004964:	9800      	ldr	r0, [sp, #0]
 8004966:	9e08      	ldr	r6, [sp, #32]
 8004968:	3219      	adds	r2, #25
 800496a:	47b0      	blx	r6
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	d1f0      	bne.n	8004952 <_printf_common+0x8a>
 8004970:	2001      	movs	r0, #1
 8004972:	4240      	negs	r0, r0
 8004974:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004976:	2030      	movs	r0, #48	; 0x30
 8004978:	18e1      	adds	r1, r4, r3
 800497a:	3143      	adds	r1, #67	; 0x43
 800497c:	7008      	strb	r0, [r1, #0]
 800497e:	0021      	movs	r1, r4
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	3145      	adds	r1, #69	; 0x45
 8004984:	7809      	ldrb	r1, [r1, #0]
 8004986:	18a2      	adds	r2, r4, r2
 8004988:	3243      	adds	r2, #67	; 0x43
 800498a:	3302      	adds	r3, #2
 800498c:	7011      	strb	r1, [r2, #0]
 800498e:	e7c1      	b.n	8004914 <_printf_common+0x4c>
 8004990:	0022      	movs	r2, r4
 8004992:	2301      	movs	r3, #1
 8004994:	9901      	ldr	r1, [sp, #4]
 8004996:	9800      	ldr	r0, [sp, #0]
 8004998:	9e08      	ldr	r6, [sp, #32]
 800499a:	321a      	adds	r2, #26
 800499c:	47b0      	blx	r6
 800499e:	1c43      	adds	r3, r0, #1
 80049a0:	d0e6      	beq.n	8004970 <_printf_common+0xa8>
 80049a2:	3701      	adds	r7, #1
 80049a4:	e7d1      	b.n	800494a <_printf_common+0x82>
	...

080049a8 <_printf_i>:
 80049a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049aa:	b08b      	sub	sp, #44	; 0x2c
 80049ac:	9206      	str	r2, [sp, #24]
 80049ae:	000a      	movs	r2, r1
 80049b0:	3243      	adds	r2, #67	; 0x43
 80049b2:	9307      	str	r3, [sp, #28]
 80049b4:	9005      	str	r0, [sp, #20]
 80049b6:	9204      	str	r2, [sp, #16]
 80049b8:	7e0a      	ldrb	r2, [r1, #24]
 80049ba:	000c      	movs	r4, r1
 80049bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80049be:	2a78      	cmp	r2, #120	; 0x78
 80049c0:	d807      	bhi.n	80049d2 <_printf_i+0x2a>
 80049c2:	2a62      	cmp	r2, #98	; 0x62
 80049c4:	d809      	bhi.n	80049da <_printf_i+0x32>
 80049c6:	2a00      	cmp	r2, #0
 80049c8:	d100      	bne.n	80049cc <_printf_i+0x24>
 80049ca:	e0c1      	b.n	8004b50 <_printf_i+0x1a8>
 80049cc:	2a58      	cmp	r2, #88	; 0x58
 80049ce:	d100      	bne.n	80049d2 <_printf_i+0x2a>
 80049d0:	e08c      	b.n	8004aec <_printf_i+0x144>
 80049d2:	0026      	movs	r6, r4
 80049d4:	3642      	adds	r6, #66	; 0x42
 80049d6:	7032      	strb	r2, [r6, #0]
 80049d8:	e022      	b.n	8004a20 <_printf_i+0x78>
 80049da:	0010      	movs	r0, r2
 80049dc:	3863      	subs	r0, #99	; 0x63
 80049de:	2815      	cmp	r0, #21
 80049e0:	d8f7      	bhi.n	80049d2 <_printf_i+0x2a>
 80049e2:	f7fb fb8f 	bl	8000104 <__gnu_thumb1_case_shi>
 80049e6:	0016      	.short	0x0016
 80049e8:	fff6001f 	.word	0xfff6001f
 80049ec:	fff6fff6 	.word	0xfff6fff6
 80049f0:	001ffff6 	.word	0x001ffff6
 80049f4:	fff6fff6 	.word	0xfff6fff6
 80049f8:	fff6fff6 	.word	0xfff6fff6
 80049fc:	003600a8 	.word	0x003600a8
 8004a00:	fff6009a 	.word	0xfff6009a
 8004a04:	00b9fff6 	.word	0x00b9fff6
 8004a08:	0036fff6 	.word	0x0036fff6
 8004a0c:	fff6fff6 	.word	0xfff6fff6
 8004a10:	009e      	.short	0x009e
 8004a12:	0026      	movs	r6, r4
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	3642      	adds	r6, #66	; 0x42
 8004a18:	1d11      	adds	r1, r2, #4
 8004a1a:	6019      	str	r1, [r3, #0]
 8004a1c:	6813      	ldr	r3, [r2, #0]
 8004a1e:	7033      	strb	r3, [r6, #0]
 8004a20:	2301      	movs	r3, #1
 8004a22:	e0a7      	b.n	8004b74 <_printf_i+0x1cc>
 8004a24:	6808      	ldr	r0, [r1, #0]
 8004a26:	6819      	ldr	r1, [r3, #0]
 8004a28:	1d0a      	adds	r2, r1, #4
 8004a2a:	0605      	lsls	r5, r0, #24
 8004a2c:	d50b      	bpl.n	8004a46 <_printf_i+0x9e>
 8004a2e:	680d      	ldr	r5, [r1, #0]
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	2d00      	cmp	r5, #0
 8004a34:	da03      	bge.n	8004a3e <_printf_i+0x96>
 8004a36:	232d      	movs	r3, #45	; 0x2d
 8004a38:	9a04      	ldr	r2, [sp, #16]
 8004a3a:	426d      	negs	r5, r5
 8004a3c:	7013      	strb	r3, [r2, #0]
 8004a3e:	4b61      	ldr	r3, [pc, #388]	; (8004bc4 <_printf_i+0x21c>)
 8004a40:	270a      	movs	r7, #10
 8004a42:	9303      	str	r3, [sp, #12]
 8004a44:	e01b      	b.n	8004a7e <_printf_i+0xd6>
 8004a46:	680d      	ldr	r5, [r1, #0]
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	0641      	lsls	r1, r0, #25
 8004a4c:	d5f1      	bpl.n	8004a32 <_printf_i+0x8a>
 8004a4e:	b22d      	sxth	r5, r5
 8004a50:	e7ef      	b.n	8004a32 <_printf_i+0x8a>
 8004a52:	680d      	ldr	r5, [r1, #0]
 8004a54:	6819      	ldr	r1, [r3, #0]
 8004a56:	1d08      	adds	r0, r1, #4
 8004a58:	6018      	str	r0, [r3, #0]
 8004a5a:	062e      	lsls	r6, r5, #24
 8004a5c:	d501      	bpl.n	8004a62 <_printf_i+0xba>
 8004a5e:	680d      	ldr	r5, [r1, #0]
 8004a60:	e003      	b.n	8004a6a <_printf_i+0xc2>
 8004a62:	066d      	lsls	r5, r5, #25
 8004a64:	d5fb      	bpl.n	8004a5e <_printf_i+0xb6>
 8004a66:	680d      	ldr	r5, [r1, #0]
 8004a68:	b2ad      	uxth	r5, r5
 8004a6a:	4b56      	ldr	r3, [pc, #344]	; (8004bc4 <_printf_i+0x21c>)
 8004a6c:	2708      	movs	r7, #8
 8004a6e:	9303      	str	r3, [sp, #12]
 8004a70:	2a6f      	cmp	r2, #111	; 0x6f
 8004a72:	d000      	beq.n	8004a76 <_printf_i+0xce>
 8004a74:	3702      	adds	r7, #2
 8004a76:	0023      	movs	r3, r4
 8004a78:	2200      	movs	r2, #0
 8004a7a:	3343      	adds	r3, #67	; 0x43
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	6863      	ldr	r3, [r4, #4]
 8004a80:	60a3      	str	r3, [r4, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	db03      	blt.n	8004a8e <_printf_i+0xe6>
 8004a86:	2204      	movs	r2, #4
 8004a88:	6821      	ldr	r1, [r4, #0]
 8004a8a:	4391      	bics	r1, r2
 8004a8c:	6021      	str	r1, [r4, #0]
 8004a8e:	2d00      	cmp	r5, #0
 8004a90:	d102      	bne.n	8004a98 <_printf_i+0xf0>
 8004a92:	9e04      	ldr	r6, [sp, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00c      	beq.n	8004ab2 <_printf_i+0x10a>
 8004a98:	9e04      	ldr	r6, [sp, #16]
 8004a9a:	0028      	movs	r0, r5
 8004a9c:	0039      	movs	r1, r7
 8004a9e:	f7fb fbc1 	bl	8000224 <__aeabi_uidivmod>
 8004aa2:	9b03      	ldr	r3, [sp, #12]
 8004aa4:	3e01      	subs	r6, #1
 8004aa6:	5c5b      	ldrb	r3, [r3, r1]
 8004aa8:	7033      	strb	r3, [r6, #0]
 8004aaa:	002b      	movs	r3, r5
 8004aac:	0005      	movs	r5, r0
 8004aae:	429f      	cmp	r7, r3
 8004ab0:	d9f3      	bls.n	8004a9a <_printf_i+0xf2>
 8004ab2:	2f08      	cmp	r7, #8
 8004ab4:	d109      	bne.n	8004aca <_printf_i+0x122>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	07db      	lsls	r3, r3, #31
 8004aba:	d506      	bpl.n	8004aca <_printf_i+0x122>
 8004abc:	6863      	ldr	r3, [r4, #4]
 8004abe:	6922      	ldr	r2, [r4, #16]
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	dc02      	bgt.n	8004aca <_printf_i+0x122>
 8004ac4:	2330      	movs	r3, #48	; 0x30
 8004ac6:	3e01      	subs	r6, #1
 8004ac8:	7033      	strb	r3, [r6, #0]
 8004aca:	9b04      	ldr	r3, [sp, #16]
 8004acc:	1b9b      	subs	r3, r3, r6
 8004ace:	6123      	str	r3, [r4, #16]
 8004ad0:	9b07      	ldr	r3, [sp, #28]
 8004ad2:	0021      	movs	r1, r4
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	9805      	ldr	r0, [sp, #20]
 8004ad8:	9b06      	ldr	r3, [sp, #24]
 8004ada:	aa09      	add	r2, sp, #36	; 0x24
 8004adc:	f7ff fef4 	bl	80048c8 <_printf_common>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d14c      	bne.n	8004b7e <_printf_i+0x1d6>
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	4240      	negs	r0, r0
 8004ae8:	b00b      	add	sp, #44	; 0x2c
 8004aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aec:	3145      	adds	r1, #69	; 0x45
 8004aee:	700a      	strb	r2, [r1, #0]
 8004af0:	4a34      	ldr	r2, [pc, #208]	; (8004bc4 <_printf_i+0x21c>)
 8004af2:	9203      	str	r2, [sp, #12]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	6821      	ldr	r1, [r4, #0]
 8004af8:	ca20      	ldmia	r2!, {r5}
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	0608      	lsls	r0, r1, #24
 8004afe:	d516      	bpl.n	8004b2e <_printf_i+0x186>
 8004b00:	07cb      	lsls	r3, r1, #31
 8004b02:	d502      	bpl.n	8004b0a <_printf_i+0x162>
 8004b04:	2320      	movs	r3, #32
 8004b06:	4319      	orrs	r1, r3
 8004b08:	6021      	str	r1, [r4, #0]
 8004b0a:	2710      	movs	r7, #16
 8004b0c:	2d00      	cmp	r5, #0
 8004b0e:	d1b2      	bne.n	8004a76 <_printf_i+0xce>
 8004b10:	2320      	movs	r3, #32
 8004b12:	6822      	ldr	r2, [r4, #0]
 8004b14:	439a      	bics	r2, r3
 8004b16:	6022      	str	r2, [r4, #0]
 8004b18:	e7ad      	b.n	8004a76 <_printf_i+0xce>
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	6809      	ldr	r1, [r1, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	6022      	str	r2, [r4, #0]
 8004b22:	0022      	movs	r2, r4
 8004b24:	2178      	movs	r1, #120	; 0x78
 8004b26:	3245      	adds	r2, #69	; 0x45
 8004b28:	7011      	strb	r1, [r2, #0]
 8004b2a:	4a27      	ldr	r2, [pc, #156]	; (8004bc8 <_printf_i+0x220>)
 8004b2c:	e7e1      	b.n	8004af2 <_printf_i+0x14a>
 8004b2e:	0648      	lsls	r0, r1, #25
 8004b30:	d5e6      	bpl.n	8004b00 <_printf_i+0x158>
 8004b32:	b2ad      	uxth	r5, r5
 8004b34:	e7e4      	b.n	8004b00 <_printf_i+0x158>
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	680d      	ldr	r5, [r1, #0]
 8004b3a:	1d10      	adds	r0, r2, #4
 8004b3c:	6949      	ldr	r1, [r1, #20]
 8004b3e:	6018      	str	r0, [r3, #0]
 8004b40:	6813      	ldr	r3, [r2, #0]
 8004b42:	062e      	lsls	r6, r5, #24
 8004b44:	d501      	bpl.n	8004b4a <_printf_i+0x1a2>
 8004b46:	6019      	str	r1, [r3, #0]
 8004b48:	e002      	b.n	8004b50 <_printf_i+0x1a8>
 8004b4a:	066d      	lsls	r5, r5, #25
 8004b4c:	d5fb      	bpl.n	8004b46 <_printf_i+0x19e>
 8004b4e:	8019      	strh	r1, [r3, #0]
 8004b50:	2300      	movs	r3, #0
 8004b52:	9e04      	ldr	r6, [sp, #16]
 8004b54:	6123      	str	r3, [r4, #16]
 8004b56:	e7bb      	b.n	8004ad0 <_printf_i+0x128>
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	1d11      	adds	r1, r2, #4
 8004b5c:	6019      	str	r1, [r3, #0]
 8004b5e:	6816      	ldr	r6, [r2, #0]
 8004b60:	2100      	movs	r1, #0
 8004b62:	0030      	movs	r0, r6
 8004b64:	6862      	ldr	r2, [r4, #4]
 8004b66:	f000 fb19 	bl	800519c <memchr>
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	d001      	beq.n	8004b72 <_printf_i+0x1ca>
 8004b6e:	1b80      	subs	r0, r0, r6
 8004b70:	6060      	str	r0, [r4, #4]
 8004b72:	6863      	ldr	r3, [r4, #4]
 8004b74:	6123      	str	r3, [r4, #16]
 8004b76:	2300      	movs	r3, #0
 8004b78:	9a04      	ldr	r2, [sp, #16]
 8004b7a:	7013      	strb	r3, [r2, #0]
 8004b7c:	e7a8      	b.n	8004ad0 <_printf_i+0x128>
 8004b7e:	6923      	ldr	r3, [r4, #16]
 8004b80:	0032      	movs	r2, r6
 8004b82:	9906      	ldr	r1, [sp, #24]
 8004b84:	9805      	ldr	r0, [sp, #20]
 8004b86:	9d07      	ldr	r5, [sp, #28]
 8004b88:	47a8      	blx	r5
 8004b8a:	1c43      	adds	r3, r0, #1
 8004b8c:	d0aa      	beq.n	8004ae4 <_printf_i+0x13c>
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	079b      	lsls	r3, r3, #30
 8004b92:	d415      	bmi.n	8004bc0 <_printf_i+0x218>
 8004b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b96:	68e0      	ldr	r0, [r4, #12]
 8004b98:	4298      	cmp	r0, r3
 8004b9a:	daa5      	bge.n	8004ae8 <_printf_i+0x140>
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	e7a3      	b.n	8004ae8 <_printf_i+0x140>
 8004ba0:	0022      	movs	r2, r4
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	9906      	ldr	r1, [sp, #24]
 8004ba6:	9805      	ldr	r0, [sp, #20]
 8004ba8:	9e07      	ldr	r6, [sp, #28]
 8004baa:	3219      	adds	r2, #25
 8004bac:	47b0      	blx	r6
 8004bae:	1c43      	adds	r3, r0, #1
 8004bb0:	d098      	beq.n	8004ae4 <_printf_i+0x13c>
 8004bb2:	3501      	adds	r5, #1
 8004bb4:	68e3      	ldr	r3, [r4, #12]
 8004bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	42ab      	cmp	r3, r5
 8004bbc:	dcf0      	bgt.n	8004ba0 <_printf_i+0x1f8>
 8004bbe:	e7e9      	b.n	8004b94 <_printf_i+0x1ec>
 8004bc0:	2500      	movs	r5, #0
 8004bc2:	e7f7      	b.n	8004bb4 <_printf_i+0x20c>
 8004bc4:	08005415 	.word	0x08005415
 8004bc8:	08005426 	.word	0x08005426

08004bcc <_putc_r>:
 8004bcc:	b570      	push	{r4, r5, r6, lr}
 8004bce:	0006      	movs	r6, r0
 8004bd0:	000d      	movs	r5, r1
 8004bd2:	0014      	movs	r4, r2
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	d004      	beq.n	8004be2 <_putc_r+0x16>
 8004bd8:	6983      	ldr	r3, [r0, #24]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <_putc_r+0x16>
 8004bde:	f7ff fbd5 	bl	800438c <__sinit>
 8004be2:	4b1c      	ldr	r3, [pc, #112]	; (8004c54 <_putc_r+0x88>)
 8004be4:	429c      	cmp	r4, r3
 8004be6:	d124      	bne.n	8004c32 <_putc_r+0x66>
 8004be8:	6874      	ldr	r4, [r6, #4]
 8004bea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bec:	07db      	lsls	r3, r3, #31
 8004bee:	d405      	bmi.n	8004bfc <_putc_r+0x30>
 8004bf0:	89a3      	ldrh	r3, [r4, #12]
 8004bf2:	059b      	lsls	r3, r3, #22
 8004bf4:	d402      	bmi.n	8004bfc <_putc_r+0x30>
 8004bf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bf8:	f7ff fc69 	bl	80044ce <__retarget_lock_acquire_recursive>
 8004bfc:	68a3      	ldr	r3, [r4, #8]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	60a3      	str	r3, [r4, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	da05      	bge.n	8004c12 <_putc_r+0x46>
 8004c06:	69a2      	ldr	r2, [r4, #24]
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	db1c      	blt.n	8004c46 <_putc_r+0x7a>
 8004c0c:	b2eb      	uxtb	r3, r5
 8004c0e:	2b0a      	cmp	r3, #10
 8004c10:	d019      	beq.n	8004c46 <_putc_r+0x7a>
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	6022      	str	r2, [r4, #0]
 8004c18:	701d      	strb	r5, [r3, #0]
 8004c1a:	b2ed      	uxtb	r5, r5
 8004c1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c1e:	07db      	lsls	r3, r3, #31
 8004c20:	d405      	bmi.n	8004c2e <_putc_r+0x62>
 8004c22:	89a3      	ldrh	r3, [r4, #12]
 8004c24:	059b      	lsls	r3, r3, #22
 8004c26:	d402      	bmi.n	8004c2e <_putc_r+0x62>
 8004c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c2a:	f7ff fc51 	bl	80044d0 <__retarget_lock_release_recursive>
 8004c2e:	0028      	movs	r0, r5
 8004c30:	bd70      	pop	{r4, r5, r6, pc}
 8004c32:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <_putc_r+0x8c>)
 8004c34:	429c      	cmp	r4, r3
 8004c36:	d101      	bne.n	8004c3c <_putc_r+0x70>
 8004c38:	68b4      	ldr	r4, [r6, #8]
 8004c3a:	e7d6      	b.n	8004bea <_putc_r+0x1e>
 8004c3c:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <_putc_r+0x90>)
 8004c3e:	429c      	cmp	r4, r3
 8004c40:	d1d3      	bne.n	8004bea <_putc_r+0x1e>
 8004c42:	68f4      	ldr	r4, [r6, #12]
 8004c44:	e7d1      	b.n	8004bea <_putc_r+0x1e>
 8004c46:	0029      	movs	r1, r5
 8004c48:	0022      	movs	r2, r4
 8004c4a:	0030      	movs	r0, r6
 8004c4c:	f000 f866 	bl	8004d1c <__swbuf_r>
 8004c50:	0005      	movs	r5, r0
 8004c52:	e7e3      	b.n	8004c1c <_putc_r+0x50>
 8004c54:	080053c4 	.word	0x080053c4
 8004c58:	080053e4 	.word	0x080053e4
 8004c5c:	080053a4 	.word	0x080053a4

08004c60 <_sbrk_r>:
 8004c60:	2300      	movs	r3, #0
 8004c62:	b570      	push	{r4, r5, r6, lr}
 8004c64:	4d06      	ldr	r5, [pc, #24]	; (8004c80 <_sbrk_r+0x20>)
 8004c66:	0004      	movs	r4, r0
 8004c68:	0008      	movs	r0, r1
 8004c6a:	602b      	str	r3, [r5, #0]
 8004c6c:	f7fc f962 	bl	8000f34 <_sbrk>
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d103      	bne.n	8004c7c <_sbrk_r+0x1c>
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d000      	beq.n	8004c7c <_sbrk_r+0x1c>
 8004c7a:	6023      	str	r3, [r4, #0]
 8004c7c:	bd70      	pop	{r4, r5, r6, pc}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	200001c4 	.word	0x200001c4

08004c84 <__sread>:
 8004c84:	b570      	push	{r4, r5, r6, lr}
 8004c86:	000c      	movs	r4, r1
 8004c88:	250e      	movs	r5, #14
 8004c8a:	5f49      	ldrsh	r1, [r1, r5]
 8004c8c:	f000 faec 	bl	8005268 <_read_r>
 8004c90:	2800      	cmp	r0, #0
 8004c92:	db03      	blt.n	8004c9c <__sread+0x18>
 8004c94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004c96:	181b      	adds	r3, r3, r0
 8004c98:	6563      	str	r3, [r4, #84]	; 0x54
 8004c9a:	bd70      	pop	{r4, r5, r6, pc}
 8004c9c:	89a3      	ldrh	r3, [r4, #12]
 8004c9e:	4a02      	ldr	r2, [pc, #8]	; (8004ca8 <__sread+0x24>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	81a3      	strh	r3, [r4, #12]
 8004ca4:	e7f9      	b.n	8004c9a <__sread+0x16>
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	ffffefff 	.word	0xffffefff

08004cac <__swrite>:
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	001f      	movs	r7, r3
 8004cb0:	898b      	ldrh	r3, [r1, #12]
 8004cb2:	0005      	movs	r5, r0
 8004cb4:	000c      	movs	r4, r1
 8004cb6:	0016      	movs	r6, r2
 8004cb8:	05db      	lsls	r3, r3, #23
 8004cba:	d505      	bpl.n	8004cc8 <__swrite+0x1c>
 8004cbc:	230e      	movs	r3, #14
 8004cbe:	5ec9      	ldrsh	r1, [r1, r3]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	f000 f9ea 	bl	800509c <_lseek_r>
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	4a05      	ldr	r2, [pc, #20]	; (8004ce0 <__swrite+0x34>)
 8004ccc:	0028      	movs	r0, r5
 8004cce:	4013      	ands	r3, r2
 8004cd0:	81a3      	strh	r3, [r4, #12]
 8004cd2:	0032      	movs	r2, r6
 8004cd4:	230e      	movs	r3, #14
 8004cd6:	5ee1      	ldrsh	r1, [r4, r3]
 8004cd8:	003b      	movs	r3, r7
 8004cda:	f000 f875 	bl	8004dc8 <_write_r>
 8004cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ce0:	ffffefff 	.word	0xffffefff

08004ce4 <__sseek>:
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	000c      	movs	r4, r1
 8004ce8:	250e      	movs	r5, #14
 8004cea:	5f49      	ldrsh	r1, [r1, r5]
 8004cec:	f000 f9d6 	bl	800509c <_lseek_r>
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	1c42      	adds	r2, r0, #1
 8004cf4:	d103      	bne.n	8004cfe <__sseek+0x1a>
 8004cf6:	4a05      	ldr	r2, [pc, #20]	; (8004d0c <__sseek+0x28>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	81a3      	strh	r3, [r4, #12]
 8004cfc:	bd70      	pop	{r4, r5, r6, pc}
 8004cfe:	2280      	movs	r2, #128	; 0x80
 8004d00:	0152      	lsls	r2, r2, #5
 8004d02:	4313      	orrs	r3, r2
 8004d04:	81a3      	strh	r3, [r4, #12]
 8004d06:	6560      	str	r0, [r4, #84]	; 0x54
 8004d08:	e7f8      	b.n	8004cfc <__sseek+0x18>
 8004d0a:	46c0      	nop			; (mov r8, r8)
 8004d0c:	ffffefff 	.word	0xffffefff

08004d10 <__sclose>:
 8004d10:	b510      	push	{r4, lr}
 8004d12:	230e      	movs	r3, #14
 8004d14:	5ec9      	ldrsh	r1, [r1, r3]
 8004d16:	f000 f8e3 	bl	8004ee0 <_close_r>
 8004d1a:	bd10      	pop	{r4, pc}

08004d1c <__swbuf_r>:
 8004d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1e:	0005      	movs	r5, r0
 8004d20:	000e      	movs	r6, r1
 8004d22:	0014      	movs	r4, r2
 8004d24:	2800      	cmp	r0, #0
 8004d26:	d004      	beq.n	8004d32 <__swbuf_r+0x16>
 8004d28:	6983      	ldr	r3, [r0, #24]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <__swbuf_r+0x16>
 8004d2e:	f7ff fb2d 	bl	800438c <__sinit>
 8004d32:	4b22      	ldr	r3, [pc, #136]	; (8004dbc <__swbuf_r+0xa0>)
 8004d34:	429c      	cmp	r4, r3
 8004d36:	d12e      	bne.n	8004d96 <__swbuf_r+0x7a>
 8004d38:	686c      	ldr	r4, [r5, #4]
 8004d3a:	69a3      	ldr	r3, [r4, #24]
 8004d3c:	60a3      	str	r3, [r4, #8]
 8004d3e:	89a3      	ldrh	r3, [r4, #12]
 8004d40:	071b      	lsls	r3, r3, #28
 8004d42:	d532      	bpl.n	8004daa <__swbuf_r+0x8e>
 8004d44:	6923      	ldr	r3, [r4, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d02f      	beq.n	8004daa <__swbuf_r+0x8e>
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	6922      	ldr	r2, [r4, #16]
 8004d4e:	b2f7      	uxtb	r7, r6
 8004d50:	1a98      	subs	r0, r3, r2
 8004d52:	6963      	ldr	r3, [r4, #20]
 8004d54:	b2f6      	uxtb	r6, r6
 8004d56:	4283      	cmp	r3, r0
 8004d58:	dc05      	bgt.n	8004d66 <__swbuf_r+0x4a>
 8004d5a:	0021      	movs	r1, r4
 8004d5c:	0028      	movs	r0, r5
 8004d5e:	f000 f95d 	bl	800501c <_fflush_r>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d127      	bne.n	8004db6 <__swbuf_r+0x9a>
 8004d66:	68a3      	ldr	r3, [r4, #8]
 8004d68:	3001      	adds	r0, #1
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	60a3      	str	r3, [r4, #8]
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	6022      	str	r2, [r4, #0]
 8004d74:	701f      	strb	r7, [r3, #0]
 8004d76:	6963      	ldr	r3, [r4, #20]
 8004d78:	4283      	cmp	r3, r0
 8004d7a:	d004      	beq.n	8004d86 <__swbuf_r+0x6a>
 8004d7c:	89a3      	ldrh	r3, [r4, #12]
 8004d7e:	07db      	lsls	r3, r3, #31
 8004d80:	d507      	bpl.n	8004d92 <__swbuf_r+0x76>
 8004d82:	2e0a      	cmp	r6, #10
 8004d84:	d105      	bne.n	8004d92 <__swbuf_r+0x76>
 8004d86:	0021      	movs	r1, r4
 8004d88:	0028      	movs	r0, r5
 8004d8a:	f000 f947 	bl	800501c <_fflush_r>
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d111      	bne.n	8004db6 <__swbuf_r+0x9a>
 8004d92:	0030      	movs	r0, r6
 8004d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d96:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <__swbuf_r+0xa4>)
 8004d98:	429c      	cmp	r4, r3
 8004d9a:	d101      	bne.n	8004da0 <__swbuf_r+0x84>
 8004d9c:	68ac      	ldr	r4, [r5, #8]
 8004d9e:	e7cc      	b.n	8004d3a <__swbuf_r+0x1e>
 8004da0:	4b08      	ldr	r3, [pc, #32]	; (8004dc4 <__swbuf_r+0xa8>)
 8004da2:	429c      	cmp	r4, r3
 8004da4:	d1c9      	bne.n	8004d3a <__swbuf_r+0x1e>
 8004da6:	68ec      	ldr	r4, [r5, #12]
 8004da8:	e7c7      	b.n	8004d3a <__swbuf_r+0x1e>
 8004daa:	0021      	movs	r1, r4
 8004dac:	0028      	movs	r0, r5
 8004dae:	f000 f81f 	bl	8004df0 <__swsetup_r>
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d0c9      	beq.n	8004d4a <__swbuf_r+0x2e>
 8004db6:	2601      	movs	r6, #1
 8004db8:	4276      	negs	r6, r6
 8004dba:	e7ea      	b.n	8004d92 <__swbuf_r+0x76>
 8004dbc:	080053c4 	.word	0x080053c4
 8004dc0:	080053e4 	.word	0x080053e4
 8004dc4:	080053a4 	.word	0x080053a4

08004dc8 <_write_r>:
 8004dc8:	b570      	push	{r4, r5, r6, lr}
 8004dca:	0004      	movs	r4, r0
 8004dcc:	0008      	movs	r0, r1
 8004dce:	0011      	movs	r1, r2
 8004dd0:	001a      	movs	r2, r3
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	4d05      	ldr	r5, [pc, #20]	; (8004dec <_write_r+0x24>)
 8004dd6:	602b      	str	r3, [r5, #0]
 8004dd8:	f7fc f863 	bl	8000ea2 <_write>
 8004ddc:	1c43      	adds	r3, r0, #1
 8004dde:	d103      	bne.n	8004de8 <_write_r+0x20>
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d000      	beq.n	8004de8 <_write_r+0x20>
 8004de6:	6023      	str	r3, [r4, #0]
 8004de8:	bd70      	pop	{r4, r5, r6, pc}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	200001c4 	.word	0x200001c4

08004df0 <__swsetup_r>:
 8004df0:	4b37      	ldr	r3, [pc, #220]	; (8004ed0 <__swsetup_r+0xe0>)
 8004df2:	b570      	push	{r4, r5, r6, lr}
 8004df4:	681d      	ldr	r5, [r3, #0]
 8004df6:	0006      	movs	r6, r0
 8004df8:	000c      	movs	r4, r1
 8004dfa:	2d00      	cmp	r5, #0
 8004dfc:	d005      	beq.n	8004e0a <__swsetup_r+0x1a>
 8004dfe:	69ab      	ldr	r3, [r5, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d102      	bne.n	8004e0a <__swsetup_r+0x1a>
 8004e04:	0028      	movs	r0, r5
 8004e06:	f7ff fac1 	bl	800438c <__sinit>
 8004e0a:	4b32      	ldr	r3, [pc, #200]	; (8004ed4 <__swsetup_r+0xe4>)
 8004e0c:	429c      	cmp	r4, r3
 8004e0e:	d10f      	bne.n	8004e30 <__swsetup_r+0x40>
 8004e10:	686c      	ldr	r4, [r5, #4]
 8004e12:	230c      	movs	r3, #12
 8004e14:	5ee2      	ldrsh	r2, [r4, r3]
 8004e16:	b293      	uxth	r3, r2
 8004e18:	0711      	lsls	r1, r2, #28
 8004e1a:	d42d      	bmi.n	8004e78 <__swsetup_r+0x88>
 8004e1c:	06d9      	lsls	r1, r3, #27
 8004e1e:	d411      	bmi.n	8004e44 <__swsetup_r+0x54>
 8004e20:	2309      	movs	r3, #9
 8004e22:	2001      	movs	r0, #1
 8004e24:	6033      	str	r3, [r6, #0]
 8004e26:	3337      	adds	r3, #55	; 0x37
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	81a3      	strh	r3, [r4, #12]
 8004e2c:	4240      	negs	r0, r0
 8004e2e:	bd70      	pop	{r4, r5, r6, pc}
 8004e30:	4b29      	ldr	r3, [pc, #164]	; (8004ed8 <__swsetup_r+0xe8>)
 8004e32:	429c      	cmp	r4, r3
 8004e34:	d101      	bne.n	8004e3a <__swsetup_r+0x4a>
 8004e36:	68ac      	ldr	r4, [r5, #8]
 8004e38:	e7eb      	b.n	8004e12 <__swsetup_r+0x22>
 8004e3a:	4b28      	ldr	r3, [pc, #160]	; (8004edc <__swsetup_r+0xec>)
 8004e3c:	429c      	cmp	r4, r3
 8004e3e:	d1e8      	bne.n	8004e12 <__swsetup_r+0x22>
 8004e40:	68ec      	ldr	r4, [r5, #12]
 8004e42:	e7e6      	b.n	8004e12 <__swsetup_r+0x22>
 8004e44:	075b      	lsls	r3, r3, #29
 8004e46:	d513      	bpl.n	8004e70 <__swsetup_r+0x80>
 8004e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e4a:	2900      	cmp	r1, #0
 8004e4c:	d008      	beq.n	8004e60 <__swsetup_r+0x70>
 8004e4e:	0023      	movs	r3, r4
 8004e50:	3344      	adds	r3, #68	; 0x44
 8004e52:	4299      	cmp	r1, r3
 8004e54:	d002      	beq.n	8004e5c <__swsetup_r+0x6c>
 8004e56:	0030      	movs	r0, r6
 8004e58:	f000 f9bc 	bl	80051d4 <_free_r>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	6363      	str	r3, [r4, #52]	; 0x34
 8004e60:	2224      	movs	r2, #36	; 0x24
 8004e62:	89a3      	ldrh	r3, [r4, #12]
 8004e64:	4393      	bics	r3, r2
 8004e66:	81a3      	strh	r3, [r4, #12]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	6063      	str	r3, [r4, #4]
 8004e6c:	6923      	ldr	r3, [r4, #16]
 8004e6e:	6023      	str	r3, [r4, #0]
 8004e70:	2308      	movs	r3, #8
 8004e72:	89a2      	ldrh	r2, [r4, #12]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	81a3      	strh	r3, [r4, #12]
 8004e78:	6923      	ldr	r3, [r4, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10b      	bne.n	8004e96 <__swsetup_r+0xa6>
 8004e7e:	21a0      	movs	r1, #160	; 0xa0
 8004e80:	2280      	movs	r2, #128	; 0x80
 8004e82:	89a3      	ldrh	r3, [r4, #12]
 8004e84:	0089      	lsls	r1, r1, #2
 8004e86:	0092      	lsls	r2, r2, #2
 8004e88:	400b      	ands	r3, r1
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d003      	beq.n	8004e96 <__swsetup_r+0xa6>
 8004e8e:	0021      	movs	r1, r4
 8004e90:	0030      	movs	r0, r6
 8004e92:	f000 f93f 	bl	8005114 <__smakebuf_r>
 8004e96:	220c      	movs	r2, #12
 8004e98:	5ea3      	ldrsh	r3, [r4, r2]
 8004e9a:	2001      	movs	r0, #1
 8004e9c:	001a      	movs	r2, r3
 8004e9e:	b299      	uxth	r1, r3
 8004ea0:	4002      	ands	r2, r0
 8004ea2:	4203      	tst	r3, r0
 8004ea4:	d00f      	beq.n	8004ec6 <__swsetup_r+0xd6>
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	60a2      	str	r2, [r4, #8]
 8004eaa:	6962      	ldr	r2, [r4, #20]
 8004eac:	4252      	negs	r2, r2
 8004eae:	61a2      	str	r2, [r4, #24]
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	6922      	ldr	r2, [r4, #16]
 8004eb4:	4282      	cmp	r2, r0
 8004eb6:	d1ba      	bne.n	8004e2e <__swsetup_r+0x3e>
 8004eb8:	060a      	lsls	r2, r1, #24
 8004eba:	d5b8      	bpl.n	8004e2e <__swsetup_r+0x3e>
 8004ebc:	2240      	movs	r2, #64	; 0x40
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	81a3      	strh	r3, [r4, #12]
 8004ec2:	3801      	subs	r0, #1
 8004ec4:	e7b3      	b.n	8004e2e <__swsetup_r+0x3e>
 8004ec6:	0788      	lsls	r0, r1, #30
 8004ec8:	d400      	bmi.n	8004ecc <__swsetup_r+0xdc>
 8004eca:	6962      	ldr	r2, [r4, #20]
 8004ecc:	60a2      	str	r2, [r4, #8]
 8004ece:	e7ef      	b.n	8004eb0 <__swsetup_r+0xc0>
 8004ed0:	2000001c 	.word	0x2000001c
 8004ed4:	080053c4 	.word	0x080053c4
 8004ed8:	080053e4 	.word	0x080053e4
 8004edc:	080053a4 	.word	0x080053a4

08004ee0 <_close_r>:
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	b570      	push	{r4, r5, r6, lr}
 8004ee4:	4d06      	ldr	r5, [pc, #24]	; (8004f00 <_close_r+0x20>)
 8004ee6:	0004      	movs	r4, r0
 8004ee8:	0008      	movs	r0, r1
 8004eea:	602b      	str	r3, [r5, #0]
 8004eec:	f7fb fff5 	bl	8000eda <_close>
 8004ef0:	1c43      	adds	r3, r0, #1
 8004ef2:	d103      	bne.n	8004efc <_close_r+0x1c>
 8004ef4:	682b      	ldr	r3, [r5, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d000      	beq.n	8004efc <_close_r+0x1c>
 8004efa:	6023      	str	r3, [r4, #0]
 8004efc:	bd70      	pop	{r4, r5, r6, pc}
 8004efe:	46c0      	nop			; (mov r8, r8)
 8004f00:	200001c4 	.word	0x200001c4

08004f04 <__sflush_r>:
 8004f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f06:	898b      	ldrh	r3, [r1, #12]
 8004f08:	0005      	movs	r5, r0
 8004f0a:	000c      	movs	r4, r1
 8004f0c:	071a      	lsls	r2, r3, #28
 8004f0e:	d45f      	bmi.n	8004fd0 <__sflush_r+0xcc>
 8004f10:	684a      	ldr	r2, [r1, #4]
 8004f12:	2a00      	cmp	r2, #0
 8004f14:	dc04      	bgt.n	8004f20 <__sflush_r+0x1c>
 8004f16:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004f18:	2a00      	cmp	r2, #0
 8004f1a:	dc01      	bgt.n	8004f20 <__sflush_r+0x1c>
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f20:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004f22:	2f00      	cmp	r7, #0
 8004f24:	d0fa      	beq.n	8004f1c <__sflush_r+0x18>
 8004f26:	2200      	movs	r2, #0
 8004f28:	2180      	movs	r1, #128	; 0x80
 8004f2a:	682e      	ldr	r6, [r5, #0]
 8004f2c:	602a      	str	r2, [r5, #0]
 8004f2e:	001a      	movs	r2, r3
 8004f30:	0149      	lsls	r1, r1, #5
 8004f32:	400a      	ands	r2, r1
 8004f34:	420b      	tst	r3, r1
 8004f36:	d034      	beq.n	8004fa2 <__sflush_r+0x9e>
 8004f38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f3a:	89a3      	ldrh	r3, [r4, #12]
 8004f3c:	075b      	lsls	r3, r3, #29
 8004f3e:	d506      	bpl.n	8004f4e <__sflush_r+0x4a>
 8004f40:	6863      	ldr	r3, [r4, #4]
 8004f42:	1ac0      	subs	r0, r0, r3
 8004f44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <__sflush_r+0x4a>
 8004f4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f4c:	1ac0      	subs	r0, r0, r3
 8004f4e:	0002      	movs	r2, r0
 8004f50:	6a21      	ldr	r1, [r4, #32]
 8004f52:	2300      	movs	r3, #0
 8004f54:	0028      	movs	r0, r5
 8004f56:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004f58:	47b8      	blx	r7
 8004f5a:	89a1      	ldrh	r1, [r4, #12]
 8004f5c:	1c43      	adds	r3, r0, #1
 8004f5e:	d106      	bne.n	8004f6e <__sflush_r+0x6a>
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	2b1d      	cmp	r3, #29
 8004f64:	d831      	bhi.n	8004fca <__sflush_r+0xc6>
 8004f66:	4a2c      	ldr	r2, [pc, #176]	; (8005018 <__sflush_r+0x114>)
 8004f68:	40da      	lsrs	r2, r3
 8004f6a:	07d3      	lsls	r3, r2, #31
 8004f6c:	d52d      	bpl.n	8004fca <__sflush_r+0xc6>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	6063      	str	r3, [r4, #4]
 8004f72:	6923      	ldr	r3, [r4, #16]
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	04cb      	lsls	r3, r1, #19
 8004f78:	d505      	bpl.n	8004f86 <__sflush_r+0x82>
 8004f7a:	1c43      	adds	r3, r0, #1
 8004f7c:	d102      	bne.n	8004f84 <__sflush_r+0x80>
 8004f7e:	682b      	ldr	r3, [r5, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d100      	bne.n	8004f86 <__sflush_r+0x82>
 8004f84:	6560      	str	r0, [r4, #84]	; 0x54
 8004f86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f88:	602e      	str	r6, [r5, #0]
 8004f8a:	2900      	cmp	r1, #0
 8004f8c:	d0c6      	beq.n	8004f1c <__sflush_r+0x18>
 8004f8e:	0023      	movs	r3, r4
 8004f90:	3344      	adds	r3, #68	; 0x44
 8004f92:	4299      	cmp	r1, r3
 8004f94:	d002      	beq.n	8004f9c <__sflush_r+0x98>
 8004f96:	0028      	movs	r0, r5
 8004f98:	f000 f91c 	bl	80051d4 <_free_r>
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	6360      	str	r0, [r4, #52]	; 0x34
 8004fa0:	e7bd      	b.n	8004f1e <__sflush_r+0x1a>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	0028      	movs	r0, r5
 8004fa6:	6a21      	ldr	r1, [r4, #32]
 8004fa8:	47b8      	blx	r7
 8004faa:	1c43      	adds	r3, r0, #1
 8004fac:	d1c5      	bne.n	8004f3a <__sflush_r+0x36>
 8004fae:	682b      	ldr	r3, [r5, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0c2      	beq.n	8004f3a <__sflush_r+0x36>
 8004fb4:	2b1d      	cmp	r3, #29
 8004fb6:	d001      	beq.n	8004fbc <__sflush_r+0xb8>
 8004fb8:	2b16      	cmp	r3, #22
 8004fba:	d101      	bne.n	8004fc0 <__sflush_r+0xbc>
 8004fbc:	602e      	str	r6, [r5, #0]
 8004fbe:	e7ad      	b.n	8004f1c <__sflush_r+0x18>
 8004fc0:	2340      	movs	r3, #64	; 0x40
 8004fc2:	89a2      	ldrh	r2, [r4, #12]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	81a3      	strh	r3, [r4, #12]
 8004fc8:	e7a9      	b.n	8004f1e <__sflush_r+0x1a>
 8004fca:	2340      	movs	r3, #64	; 0x40
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	e7fa      	b.n	8004fc6 <__sflush_r+0xc2>
 8004fd0:	690f      	ldr	r7, [r1, #16]
 8004fd2:	2f00      	cmp	r7, #0
 8004fd4:	d0a2      	beq.n	8004f1c <__sflush_r+0x18>
 8004fd6:	680a      	ldr	r2, [r1, #0]
 8004fd8:	600f      	str	r7, [r1, #0]
 8004fda:	1bd2      	subs	r2, r2, r7
 8004fdc:	9201      	str	r2, [sp, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	079b      	lsls	r3, r3, #30
 8004fe2:	d100      	bne.n	8004fe6 <__sflush_r+0xe2>
 8004fe4:	694a      	ldr	r2, [r1, #20]
 8004fe6:	60a2      	str	r2, [r4, #8]
 8004fe8:	9b01      	ldr	r3, [sp, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	dc00      	bgt.n	8004ff0 <__sflush_r+0xec>
 8004fee:	e795      	b.n	8004f1c <__sflush_r+0x18>
 8004ff0:	003a      	movs	r2, r7
 8004ff2:	0028      	movs	r0, r5
 8004ff4:	9b01      	ldr	r3, [sp, #4]
 8004ff6:	6a21      	ldr	r1, [r4, #32]
 8004ff8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ffa:	47b0      	blx	r6
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	dc06      	bgt.n	800500e <__sflush_r+0x10a>
 8005000:	2340      	movs	r3, #64	; 0x40
 8005002:	2001      	movs	r0, #1
 8005004:	89a2      	ldrh	r2, [r4, #12]
 8005006:	4240      	negs	r0, r0
 8005008:	4313      	orrs	r3, r2
 800500a:	81a3      	strh	r3, [r4, #12]
 800500c:	e787      	b.n	8004f1e <__sflush_r+0x1a>
 800500e:	9b01      	ldr	r3, [sp, #4]
 8005010:	183f      	adds	r7, r7, r0
 8005012:	1a1b      	subs	r3, r3, r0
 8005014:	9301      	str	r3, [sp, #4]
 8005016:	e7e7      	b.n	8004fe8 <__sflush_r+0xe4>
 8005018:	20400001 	.word	0x20400001

0800501c <_fflush_r>:
 800501c:	690b      	ldr	r3, [r1, #16]
 800501e:	b570      	push	{r4, r5, r6, lr}
 8005020:	0005      	movs	r5, r0
 8005022:	000c      	movs	r4, r1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d102      	bne.n	800502e <_fflush_r+0x12>
 8005028:	2500      	movs	r5, #0
 800502a:	0028      	movs	r0, r5
 800502c:	bd70      	pop	{r4, r5, r6, pc}
 800502e:	2800      	cmp	r0, #0
 8005030:	d004      	beq.n	800503c <_fflush_r+0x20>
 8005032:	6983      	ldr	r3, [r0, #24]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <_fflush_r+0x20>
 8005038:	f7ff f9a8 	bl	800438c <__sinit>
 800503c:	4b14      	ldr	r3, [pc, #80]	; (8005090 <_fflush_r+0x74>)
 800503e:	429c      	cmp	r4, r3
 8005040:	d11b      	bne.n	800507a <_fflush_r+0x5e>
 8005042:	686c      	ldr	r4, [r5, #4]
 8005044:	220c      	movs	r2, #12
 8005046:	5ea3      	ldrsh	r3, [r4, r2]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0ed      	beq.n	8005028 <_fflush_r+0xc>
 800504c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800504e:	07d2      	lsls	r2, r2, #31
 8005050:	d404      	bmi.n	800505c <_fflush_r+0x40>
 8005052:	059b      	lsls	r3, r3, #22
 8005054:	d402      	bmi.n	800505c <_fflush_r+0x40>
 8005056:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005058:	f7ff fa39 	bl	80044ce <__retarget_lock_acquire_recursive>
 800505c:	0028      	movs	r0, r5
 800505e:	0021      	movs	r1, r4
 8005060:	f7ff ff50 	bl	8004f04 <__sflush_r>
 8005064:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005066:	0005      	movs	r5, r0
 8005068:	07db      	lsls	r3, r3, #31
 800506a:	d4de      	bmi.n	800502a <_fflush_r+0xe>
 800506c:	89a3      	ldrh	r3, [r4, #12]
 800506e:	059b      	lsls	r3, r3, #22
 8005070:	d4db      	bmi.n	800502a <_fflush_r+0xe>
 8005072:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005074:	f7ff fa2c 	bl	80044d0 <__retarget_lock_release_recursive>
 8005078:	e7d7      	b.n	800502a <_fflush_r+0xe>
 800507a:	4b06      	ldr	r3, [pc, #24]	; (8005094 <_fflush_r+0x78>)
 800507c:	429c      	cmp	r4, r3
 800507e:	d101      	bne.n	8005084 <_fflush_r+0x68>
 8005080:	68ac      	ldr	r4, [r5, #8]
 8005082:	e7df      	b.n	8005044 <_fflush_r+0x28>
 8005084:	4b04      	ldr	r3, [pc, #16]	; (8005098 <_fflush_r+0x7c>)
 8005086:	429c      	cmp	r4, r3
 8005088:	d1dc      	bne.n	8005044 <_fflush_r+0x28>
 800508a:	68ec      	ldr	r4, [r5, #12]
 800508c:	e7da      	b.n	8005044 <_fflush_r+0x28>
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	080053c4 	.word	0x080053c4
 8005094:	080053e4 	.word	0x080053e4
 8005098:	080053a4 	.word	0x080053a4

0800509c <_lseek_r>:
 800509c:	b570      	push	{r4, r5, r6, lr}
 800509e:	0004      	movs	r4, r0
 80050a0:	0008      	movs	r0, r1
 80050a2:	0011      	movs	r1, r2
 80050a4:	001a      	movs	r2, r3
 80050a6:	2300      	movs	r3, #0
 80050a8:	4d05      	ldr	r5, [pc, #20]	; (80050c0 <_lseek_r+0x24>)
 80050aa:	602b      	str	r3, [r5, #0]
 80050ac:	f7fb ff36 	bl	8000f1c <_lseek>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	d103      	bne.n	80050bc <_lseek_r+0x20>
 80050b4:	682b      	ldr	r3, [r5, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d000      	beq.n	80050bc <_lseek_r+0x20>
 80050ba:	6023      	str	r3, [r4, #0]
 80050bc:	bd70      	pop	{r4, r5, r6, pc}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	200001c4 	.word	0x200001c4

080050c4 <__swhatbuf_r>:
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	000e      	movs	r6, r1
 80050c8:	001d      	movs	r5, r3
 80050ca:	230e      	movs	r3, #14
 80050cc:	5ec9      	ldrsh	r1, [r1, r3]
 80050ce:	0014      	movs	r4, r2
 80050d0:	b096      	sub	sp, #88	; 0x58
 80050d2:	2900      	cmp	r1, #0
 80050d4:	da08      	bge.n	80050e8 <__swhatbuf_r+0x24>
 80050d6:	220c      	movs	r2, #12
 80050d8:	5eb3      	ldrsh	r3, [r6, r2]
 80050da:	2200      	movs	r2, #0
 80050dc:	602a      	str	r2, [r5, #0]
 80050de:	061b      	lsls	r3, r3, #24
 80050e0:	d411      	bmi.n	8005106 <__swhatbuf_r+0x42>
 80050e2:	2380      	movs	r3, #128	; 0x80
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	e00f      	b.n	8005108 <__swhatbuf_r+0x44>
 80050e8:	466a      	mov	r2, sp
 80050ea:	f000 f8d1 	bl	8005290 <_fstat_r>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	dbf1      	blt.n	80050d6 <__swhatbuf_r+0x12>
 80050f2:	23f0      	movs	r3, #240	; 0xf0
 80050f4:	9901      	ldr	r1, [sp, #4]
 80050f6:	021b      	lsls	r3, r3, #8
 80050f8:	4019      	ands	r1, r3
 80050fa:	4b05      	ldr	r3, [pc, #20]	; (8005110 <__swhatbuf_r+0x4c>)
 80050fc:	18c9      	adds	r1, r1, r3
 80050fe:	424b      	negs	r3, r1
 8005100:	4159      	adcs	r1, r3
 8005102:	6029      	str	r1, [r5, #0]
 8005104:	e7ed      	b.n	80050e2 <__swhatbuf_r+0x1e>
 8005106:	2340      	movs	r3, #64	; 0x40
 8005108:	2000      	movs	r0, #0
 800510a:	6023      	str	r3, [r4, #0]
 800510c:	b016      	add	sp, #88	; 0x58
 800510e:	bd70      	pop	{r4, r5, r6, pc}
 8005110:	ffffe000 	.word	0xffffe000

08005114 <__smakebuf_r>:
 8005114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005116:	2602      	movs	r6, #2
 8005118:	898b      	ldrh	r3, [r1, #12]
 800511a:	0005      	movs	r5, r0
 800511c:	000c      	movs	r4, r1
 800511e:	4233      	tst	r3, r6
 8005120:	d006      	beq.n	8005130 <__smakebuf_r+0x1c>
 8005122:	0023      	movs	r3, r4
 8005124:	3347      	adds	r3, #71	; 0x47
 8005126:	6023      	str	r3, [r4, #0]
 8005128:	6123      	str	r3, [r4, #16]
 800512a:	2301      	movs	r3, #1
 800512c:	6163      	str	r3, [r4, #20]
 800512e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005130:	466a      	mov	r2, sp
 8005132:	ab01      	add	r3, sp, #4
 8005134:	f7ff ffc6 	bl	80050c4 <__swhatbuf_r>
 8005138:	9900      	ldr	r1, [sp, #0]
 800513a:	0007      	movs	r7, r0
 800513c:	0028      	movs	r0, r5
 800513e:	f7ff f9eb 	bl	8004518 <_malloc_r>
 8005142:	2800      	cmp	r0, #0
 8005144:	d108      	bne.n	8005158 <__smakebuf_r+0x44>
 8005146:	220c      	movs	r2, #12
 8005148:	5ea3      	ldrsh	r3, [r4, r2]
 800514a:	059a      	lsls	r2, r3, #22
 800514c:	d4ef      	bmi.n	800512e <__smakebuf_r+0x1a>
 800514e:	2203      	movs	r2, #3
 8005150:	4393      	bics	r3, r2
 8005152:	431e      	orrs	r6, r3
 8005154:	81a6      	strh	r6, [r4, #12]
 8005156:	e7e4      	b.n	8005122 <__smakebuf_r+0xe>
 8005158:	4b0f      	ldr	r3, [pc, #60]	; (8005198 <__smakebuf_r+0x84>)
 800515a:	62ab      	str	r3, [r5, #40]	; 0x28
 800515c:	2380      	movs	r3, #128	; 0x80
 800515e:	89a2      	ldrh	r2, [r4, #12]
 8005160:	6020      	str	r0, [r4, #0]
 8005162:	4313      	orrs	r3, r2
 8005164:	81a3      	strh	r3, [r4, #12]
 8005166:	9b00      	ldr	r3, [sp, #0]
 8005168:	6120      	str	r0, [r4, #16]
 800516a:	6163      	str	r3, [r4, #20]
 800516c:	9b01      	ldr	r3, [sp, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00d      	beq.n	800518e <__smakebuf_r+0x7a>
 8005172:	0028      	movs	r0, r5
 8005174:	230e      	movs	r3, #14
 8005176:	5ee1      	ldrsh	r1, [r4, r3]
 8005178:	f000 f89c 	bl	80052b4 <_isatty_r>
 800517c:	2800      	cmp	r0, #0
 800517e:	d006      	beq.n	800518e <__smakebuf_r+0x7a>
 8005180:	2203      	movs	r2, #3
 8005182:	89a3      	ldrh	r3, [r4, #12]
 8005184:	4393      	bics	r3, r2
 8005186:	001a      	movs	r2, r3
 8005188:	2301      	movs	r3, #1
 800518a:	4313      	orrs	r3, r2
 800518c:	81a3      	strh	r3, [r4, #12]
 800518e:	89a0      	ldrh	r0, [r4, #12]
 8005190:	4307      	orrs	r7, r0
 8005192:	81a7      	strh	r7, [r4, #12]
 8005194:	e7cb      	b.n	800512e <__smakebuf_r+0x1a>
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	08004311 	.word	0x08004311

0800519c <memchr>:
 800519c:	b2c9      	uxtb	r1, r1
 800519e:	1882      	adds	r2, r0, r2
 80051a0:	4290      	cmp	r0, r2
 80051a2:	d101      	bne.n	80051a8 <memchr+0xc>
 80051a4:	2000      	movs	r0, #0
 80051a6:	4770      	bx	lr
 80051a8:	7803      	ldrb	r3, [r0, #0]
 80051aa:	428b      	cmp	r3, r1
 80051ac:	d0fb      	beq.n	80051a6 <memchr+0xa>
 80051ae:	3001      	adds	r0, #1
 80051b0:	e7f6      	b.n	80051a0 <memchr+0x4>
	...

080051b4 <__malloc_lock>:
 80051b4:	b510      	push	{r4, lr}
 80051b6:	4802      	ldr	r0, [pc, #8]	; (80051c0 <__malloc_lock+0xc>)
 80051b8:	f7ff f989 	bl	80044ce <__retarget_lock_acquire_recursive>
 80051bc:	bd10      	pop	{r4, pc}
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	200001b8 	.word	0x200001b8

080051c4 <__malloc_unlock>:
 80051c4:	b510      	push	{r4, lr}
 80051c6:	4802      	ldr	r0, [pc, #8]	; (80051d0 <__malloc_unlock+0xc>)
 80051c8:	f7ff f982 	bl	80044d0 <__retarget_lock_release_recursive>
 80051cc:	bd10      	pop	{r4, pc}
 80051ce:	46c0      	nop			; (mov r8, r8)
 80051d0:	200001b8 	.word	0x200001b8

080051d4 <_free_r>:
 80051d4:	b570      	push	{r4, r5, r6, lr}
 80051d6:	0005      	movs	r5, r0
 80051d8:	2900      	cmp	r1, #0
 80051da:	d010      	beq.n	80051fe <_free_r+0x2a>
 80051dc:	1f0c      	subs	r4, r1, #4
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	da00      	bge.n	80051e6 <_free_r+0x12>
 80051e4:	18e4      	adds	r4, r4, r3
 80051e6:	0028      	movs	r0, r5
 80051e8:	f7ff ffe4 	bl	80051b4 <__malloc_lock>
 80051ec:	4a1d      	ldr	r2, [pc, #116]	; (8005264 <_free_r+0x90>)
 80051ee:	6813      	ldr	r3, [r2, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d105      	bne.n	8005200 <_free_r+0x2c>
 80051f4:	6063      	str	r3, [r4, #4]
 80051f6:	6014      	str	r4, [r2, #0]
 80051f8:	0028      	movs	r0, r5
 80051fa:	f7ff ffe3 	bl	80051c4 <__malloc_unlock>
 80051fe:	bd70      	pop	{r4, r5, r6, pc}
 8005200:	42a3      	cmp	r3, r4
 8005202:	d908      	bls.n	8005216 <_free_r+0x42>
 8005204:	6821      	ldr	r1, [r4, #0]
 8005206:	1860      	adds	r0, r4, r1
 8005208:	4283      	cmp	r3, r0
 800520a:	d1f3      	bne.n	80051f4 <_free_r+0x20>
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	1841      	adds	r1, r0, r1
 8005212:	6021      	str	r1, [r4, #0]
 8005214:	e7ee      	b.n	80051f4 <_free_r+0x20>
 8005216:	001a      	movs	r2, r3
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <_free_r+0x4e>
 800521e:	42a3      	cmp	r3, r4
 8005220:	d9f9      	bls.n	8005216 <_free_r+0x42>
 8005222:	6811      	ldr	r1, [r2, #0]
 8005224:	1850      	adds	r0, r2, r1
 8005226:	42a0      	cmp	r0, r4
 8005228:	d10b      	bne.n	8005242 <_free_r+0x6e>
 800522a:	6820      	ldr	r0, [r4, #0]
 800522c:	1809      	adds	r1, r1, r0
 800522e:	1850      	adds	r0, r2, r1
 8005230:	6011      	str	r1, [r2, #0]
 8005232:	4283      	cmp	r3, r0
 8005234:	d1e0      	bne.n	80051f8 <_free_r+0x24>
 8005236:	6818      	ldr	r0, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	1841      	adds	r1, r0, r1
 800523c:	6011      	str	r1, [r2, #0]
 800523e:	6053      	str	r3, [r2, #4]
 8005240:	e7da      	b.n	80051f8 <_free_r+0x24>
 8005242:	42a0      	cmp	r0, r4
 8005244:	d902      	bls.n	800524c <_free_r+0x78>
 8005246:	230c      	movs	r3, #12
 8005248:	602b      	str	r3, [r5, #0]
 800524a:	e7d5      	b.n	80051f8 <_free_r+0x24>
 800524c:	6821      	ldr	r1, [r4, #0]
 800524e:	1860      	adds	r0, r4, r1
 8005250:	4283      	cmp	r3, r0
 8005252:	d103      	bne.n	800525c <_free_r+0x88>
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	1841      	adds	r1, r0, r1
 800525a:	6021      	str	r1, [r4, #0]
 800525c:	6063      	str	r3, [r4, #4]
 800525e:	6054      	str	r4, [r2, #4]
 8005260:	e7ca      	b.n	80051f8 <_free_r+0x24>
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	200001bc 	.word	0x200001bc

08005268 <_read_r>:
 8005268:	b570      	push	{r4, r5, r6, lr}
 800526a:	0004      	movs	r4, r0
 800526c:	0008      	movs	r0, r1
 800526e:	0011      	movs	r1, r2
 8005270:	001a      	movs	r2, r3
 8005272:	2300      	movs	r3, #0
 8005274:	4d05      	ldr	r5, [pc, #20]	; (800528c <_read_r+0x24>)
 8005276:	602b      	str	r3, [r5, #0]
 8005278:	f7fb fdf6 	bl	8000e68 <_read>
 800527c:	1c43      	adds	r3, r0, #1
 800527e:	d103      	bne.n	8005288 <_read_r+0x20>
 8005280:	682b      	ldr	r3, [r5, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d000      	beq.n	8005288 <_read_r+0x20>
 8005286:	6023      	str	r3, [r4, #0]
 8005288:	bd70      	pop	{r4, r5, r6, pc}
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	200001c4 	.word	0x200001c4

08005290 <_fstat_r>:
 8005290:	2300      	movs	r3, #0
 8005292:	b570      	push	{r4, r5, r6, lr}
 8005294:	4d06      	ldr	r5, [pc, #24]	; (80052b0 <_fstat_r+0x20>)
 8005296:	0004      	movs	r4, r0
 8005298:	0008      	movs	r0, r1
 800529a:	0011      	movs	r1, r2
 800529c:	602b      	str	r3, [r5, #0]
 800529e:	f7fb fe26 	bl	8000eee <_fstat>
 80052a2:	1c43      	adds	r3, r0, #1
 80052a4:	d103      	bne.n	80052ae <_fstat_r+0x1e>
 80052a6:	682b      	ldr	r3, [r5, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d000      	beq.n	80052ae <_fstat_r+0x1e>
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	bd70      	pop	{r4, r5, r6, pc}
 80052b0:	200001c4 	.word	0x200001c4

080052b4 <_isatty_r>:
 80052b4:	2300      	movs	r3, #0
 80052b6:	b570      	push	{r4, r5, r6, lr}
 80052b8:	4d06      	ldr	r5, [pc, #24]	; (80052d4 <_isatty_r+0x20>)
 80052ba:	0004      	movs	r4, r0
 80052bc:	0008      	movs	r0, r1
 80052be:	602b      	str	r3, [r5, #0]
 80052c0:	f7fb fe23 	bl	8000f0a <_isatty>
 80052c4:	1c43      	adds	r3, r0, #1
 80052c6:	d103      	bne.n	80052d0 <_isatty_r+0x1c>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d000      	beq.n	80052d0 <_isatty_r+0x1c>
 80052ce:	6023      	str	r3, [r4, #0]
 80052d0:	bd70      	pop	{r4, r5, r6, pc}
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	200001c4 	.word	0x200001c4

080052d8 <_init>:
 80052d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052de:	bc08      	pop	{r3}
 80052e0:	469e      	mov	lr, r3
 80052e2:	4770      	bx	lr

080052e4 <_fini>:
 80052e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ea:	bc08      	pop	{r3}
 80052ec:	469e      	mov	lr, r3
 80052ee:	4770      	bx	lr
