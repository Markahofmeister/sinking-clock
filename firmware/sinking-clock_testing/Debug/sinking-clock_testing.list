
sinking-clock_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030d0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800318c  0800318c  0001318c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003210  08003210  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003210  08003210  00013210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003218  08003218  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003218  08003218  00013218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800321c  0800321c  0001321c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  0800322c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  0800322c  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc0d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c40  00000000  00000000  0002cc41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002e888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002f298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016421  00000000  00000000  0002fc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c359  00000000  00000000  00046021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea11  00000000  00000000  0005237a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0d8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000236c  00000000  00000000  000e0ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003174 	.word	0x08003174

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003174 	.word	0x08003174

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	; (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	; (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	469b      	mov	fp, r3
 8000292:	d433      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000294:	465a      	mov	r2, fp
 8000296:	4653      	mov	r3, sl
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83a      	bhi.n	800031e <__udivmoddi4+0xc2>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e078      	b.n	80003a0 <__udivmoddi4+0x144>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e075      	b.n	80003a6 <__udivmoddi4+0x14a>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e028      	b.n	8000326 <__udivmoddi4+0xca>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	2320      	movs	r3, #32
 8000300:	1a9b      	subs	r3, r3, r2
 8000302:	4652      	mov	r2, sl
 8000304:	40da      	lsrs	r2, r3
 8000306:	4641      	mov	r1, r8
 8000308:	0013      	movs	r3, r2
 800030a:	464a      	mov	r2, r9
 800030c:	408a      	lsls	r2, r1
 800030e:	0017      	movs	r7, r2
 8000310:	4642      	mov	r2, r8
 8000312:	431f      	orrs	r7, r3
 8000314:	4653      	mov	r3, sl
 8000316:	4093      	lsls	r3, r2
 8000318:	001e      	movs	r6, r3
 800031a:	42af      	cmp	r7, r5
 800031c:	d9c4      	bls.n	80002a8 <__udivmoddi4+0x4c>
 800031e:	2200      	movs	r2, #0
 8000320:	2300      	movs	r3, #0
 8000322:	9200      	str	r2, [sp, #0]
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	4643      	mov	r3, r8
 8000328:	2b00      	cmp	r3, #0
 800032a:	d0d9      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032c:	07fb      	lsls	r3, r7, #31
 800032e:	0872      	lsrs	r2, r6, #1
 8000330:	431a      	orrs	r2, r3
 8000332:	4646      	mov	r6, r8
 8000334:	087b      	lsrs	r3, r7, #1
 8000336:	e00e      	b.n	8000356 <__udivmoddi4+0xfa>
 8000338:	42ab      	cmp	r3, r5
 800033a:	d101      	bne.n	8000340 <__udivmoddi4+0xe4>
 800033c:	42a2      	cmp	r2, r4
 800033e:	d80c      	bhi.n	800035a <__udivmoddi4+0xfe>
 8000340:	1aa4      	subs	r4, r4, r2
 8000342:	419d      	sbcs	r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	1924      	adds	r4, r4, r4
 8000348:	416d      	adcs	r5, r5
 800034a:	2100      	movs	r1, #0
 800034c:	3e01      	subs	r6, #1
 800034e:	1824      	adds	r4, r4, r0
 8000350:	414d      	adcs	r5, r1
 8000352:	2e00      	cmp	r6, #0
 8000354:	d006      	beq.n	8000364 <__udivmoddi4+0x108>
 8000356:	42ab      	cmp	r3, r5
 8000358:	d9ee      	bls.n	8000338 <__udivmoddi4+0xdc>
 800035a:	3e01      	subs	r6, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2e00      	cmp	r6, #0
 8000362:	d1f8      	bne.n	8000356 <__udivmoddi4+0xfa>
 8000364:	9800      	ldr	r0, [sp, #0]
 8000366:	9901      	ldr	r1, [sp, #4]
 8000368:	465b      	mov	r3, fp
 800036a:	1900      	adds	r0, r0, r4
 800036c:	4169      	adcs	r1, r5
 800036e:	2b00      	cmp	r3, #0
 8000370:	db24      	blt.n	80003bc <__udivmoddi4+0x160>
 8000372:	002b      	movs	r3, r5
 8000374:	465a      	mov	r2, fp
 8000376:	4644      	mov	r4, r8
 8000378:	40d3      	lsrs	r3, r2
 800037a:	002a      	movs	r2, r5
 800037c:	40e2      	lsrs	r2, r4
 800037e:	001c      	movs	r4, r3
 8000380:	465b      	mov	r3, fp
 8000382:	0015      	movs	r5, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	db2a      	blt.n	80003de <__udivmoddi4+0x182>
 8000388:	0026      	movs	r6, r4
 800038a:	409e      	lsls	r6, r3
 800038c:	0033      	movs	r3, r6
 800038e:	0026      	movs	r6, r4
 8000390:	4647      	mov	r7, r8
 8000392:	40be      	lsls	r6, r7
 8000394:	0032      	movs	r2, r6
 8000396:	1a80      	subs	r0, r0, r2
 8000398:	4199      	sbcs	r1, r3
 800039a:	9000      	str	r0, [sp, #0]
 800039c:	9101      	str	r1, [sp, #4]
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a0:	42a3      	cmp	r3, r4
 80003a2:	d8bc      	bhi.n	800031e <__udivmoddi4+0xc2>
 80003a4:	e783      	b.n	80002ae <__udivmoddi4+0x52>
 80003a6:	4642      	mov	r2, r8
 80003a8:	2320      	movs	r3, #32
 80003aa:	2100      	movs	r1, #0
 80003ac:	1a9b      	subs	r3, r3, r2
 80003ae:	2200      	movs	r2, #0
 80003b0:	9100      	str	r1, [sp, #0]
 80003b2:	9201      	str	r2, [sp, #4]
 80003b4:	2201      	movs	r2, #1
 80003b6:	40da      	lsrs	r2, r3
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	e786      	b.n	80002ca <__udivmoddi4+0x6e>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	002a      	movs	r2, r5
 80003c4:	4646      	mov	r6, r8
 80003c6:	409a      	lsls	r2, r3
 80003c8:	0023      	movs	r3, r4
 80003ca:	40f3      	lsrs	r3, r6
 80003cc:	4644      	mov	r4, r8
 80003ce:	4313      	orrs	r3, r2
 80003d0:	002a      	movs	r2, r5
 80003d2:	40e2      	lsrs	r2, r4
 80003d4:	001c      	movs	r4, r3
 80003d6:	465b      	mov	r3, fp
 80003d8:	0015      	movs	r5, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	dad4      	bge.n	8000388 <__udivmoddi4+0x12c>
 80003de:	4642      	mov	r2, r8
 80003e0:	002f      	movs	r7, r5
 80003e2:	2320      	movs	r3, #32
 80003e4:	0026      	movs	r6, r4
 80003e6:	4097      	lsls	r7, r2
 80003e8:	1a9b      	subs	r3, r3, r2
 80003ea:	40de      	lsrs	r6, r3
 80003ec:	003b      	movs	r3, r7
 80003ee:	4333      	orrs	r3, r6
 80003f0:	e7cd      	b.n	800038e <__udivmoddi4+0x132>
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	; (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	b08b      	sub	sp, #44	; 0x2c
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044e:	f000 fbcd 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000452:	f000 f8e3 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000456:	f000 fa0d 	bl	8000874 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800045a:	f000 f9d7 	bl	800080c <MX_USART2_UART_Init>
  MX_RTC_Init();
 800045e:	f000 f929 	bl	80006b4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  GPIO_PinState GPIOPinSet[2] = {GPIO_PIN_RESET, GPIO_PIN_SET};
 8000462:	2110      	movs	r1, #16
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2200      	movs	r2, #0
 8000468:	701a      	strb	r2, [r3, #0]
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2201      	movs	r2, #1
 800046e:	705a      	strb	r2, [r3, #1]

	  uint16_t shiftDataPin = GPIO_PIN_15;			// Port A
 8000470:	231a      	movs	r3, #26
 8000472:	18fb      	adds	r3, r7, r3
 8000474:	4a66      	ldr	r2, [pc, #408]	; (8000610 <main+0x1c8>)
 8000476:	801a      	strh	r2, [r3, #0]
	  uint16_t shiftDataClockPin = GPIO_PIN_5;		// Port B
 8000478:	2318      	movs	r3, #24
 800047a:	18fb      	adds	r3, r7, r3
 800047c:	2220      	movs	r2, #32
 800047e:	801a      	strh	r2, [r3, #0]
	  uint16_t shiftStoreClockPin = GPIO_PIN_4;		// Port B
 8000480:	2516      	movs	r5, #22
 8000482:	197b      	adds	r3, r7, r5
 8000484:	2210      	movs	r2, #16
 8000486:	801a      	strh	r2, [r3, #0]
	  uint16_t shiftOutputEnablePin = GPIO_PIN_3;		// Port B
 8000488:	2314      	movs	r3, #20
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	2208      	movs	r2, #8
 800048e:	801a      	strh	r2, [r3, #0]
	  uint16_t shiftMCLRPin = GPIO_PIN_6;				// Port B
 8000490:	2012      	movs	r0, #18
 8000492:	183b      	adds	r3, r7, r0
 8000494:	2240      	movs	r2, #64	; 0x40
 8000496:	801a      	strh	r2, [r3, #0]

	  const uint8_t dispDigits[10] = {0b01111110, 	// 0
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	4a5e      	ldr	r2, [pc, #376]	; (8000614 <main+0x1cc>)
 800049c:	ca50      	ldmia	r2!, {r4, r6}
 800049e:	c350      	stmia	r3!, {r4, r6}
 80004a0:	8812      	ldrh	r2, [r2, #0]
 80004a2:	801a      	strh	r2, [r3, #0]
									0b01110000,		// 7
									0b01111111,		// 8
									0b01111011};	// 9

	// Clear any existing shift register data
	HAL_GPIO_WritePin(GPIOB, shiftMCLRPin, GPIOPinSet[0]);
 80004a4:	000c      	movs	r4, r1
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	781a      	ldrb	r2, [r3, #0]
 80004aa:	0006      	movs	r6, r0
 80004ac:	183b      	adds	r3, r7, r0
 80004ae:	881b      	ldrh	r3, [r3, #0]
 80004b0:	4859      	ldr	r0, [pc, #356]	; (8000618 <main+0x1d0>)
 80004b2:	0019      	movs	r1, r3
 80004b4:	f000 fe86 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, shiftMCLRPin, GPIOPinSet[1]);
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	785a      	ldrb	r2, [r3, #1]
 80004bc:	19bb      	adds	r3, r7, r6
 80004be:	881b      	ldrh	r3, [r3, #0]
 80004c0:	4855      	ldr	r0, [pc, #340]	; (8000618 <main+0x1d0>)
 80004c2:	0019      	movs	r1, r3
 80004c4:	f000 fe7e 	bl	80011c4 <HAL_GPIO_WritePin>

	// Store cleared data
	HAL_GPIO_WritePin(GPIOB, shiftStoreClockPin, GPIOPinSet[1]);
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	785a      	ldrb	r2, [r3, #1]
 80004cc:	197b      	adds	r3, r7, r5
 80004ce:	881b      	ldrh	r3, [r3, #0]
 80004d0:	4851      	ldr	r0, [pc, #324]	; (8000618 <main+0x1d0>)
 80004d2:	0019      	movs	r1, r3
 80004d4:	f000 fe76 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, shiftStoreClockPin, GPIOPinSet[0]);
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	781a      	ldrb	r2, [r3, #0]
 80004dc:	197b      	adds	r3, r7, r5
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	484d      	ldr	r0, [pc, #308]	; (8000618 <main+0x1d0>)
 80004e2:	0019      	movs	r1, r3
 80004e4:	f000 fe6e 	bl	80011c4 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		// Enable output by pulling enable pin low
		HAL_GPIO_WritePin(GPIOB, shiftOutputEnablePin, GPIOPinSet[0]);
 80004e8:	2310      	movs	r3, #16
 80004ea:	18fb      	adds	r3, r7, r3
 80004ec:	781a      	ldrb	r2, [r3, #0]
 80004ee:	2314      	movs	r3, #20
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	4848      	ldr	r0, [pc, #288]	; (8000618 <main+0x1d0>)
 80004f6:	0019      	movs	r1, r3
 80004f8:	f000 fe64 	bl	80011c4 <HAL_GPIO_WritePin>

	  for (int i = 0; i < 4; i++) {
 80004fc:	2300      	movs	r3, #0
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000500:	e05a      	b.n	80005b8 <main+0x170>



		  uint8_t sendByte = dispDigits[i+1];
 8000502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000504:	1c5a      	adds	r2, r3, #1
 8000506:	2323      	movs	r3, #35	; 0x23
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	1d39      	adds	r1, r7, #4
 800050c:	5c8a      	ldrb	r2, [r1, r2]
 800050e:	701a      	strb	r2, [r3, #0]

//		  for(int j = 0; j < 8; j++) {
		  for(int j = 0; j < 20; j++) {
 8000510:	2300      	movs	r3, #0
 8000512:	61fb      	str	r3, [r7, #28]
 8000514:	e04a      	b.n	80005ac <main+0x164>

			// Write data pin with LSB of data
			//HAL_GPIO_WritePin(GPIOA, shiftDataPin, GPIOPinSet[sendByte & 1]);
			  if(j == 0) {
 8000516:	69fb      	ldr	r3, [r7, #28]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d10b      	bne.n	8000534 <main+0xec>
				  HAL_GPIO_WritePin(GPIOA, shiftDataPin, GPIOPinSet[1]);
 800051c:	2310      	movs	r3, #16
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	785a      	ldrb	r2, [r3, #1]
 8000522:	231a      	movs	r3, #26
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	8819      	ldrh	r1, [r3, #0]
 8000528:	23a0      	movs	r3, #160	; 0xa0
 800052a:	05db      	lsls	r3, r3, #23
 800052c:	0018      	movs	r0, r3
 800052e:	f000 fe49 	bl	80011c4 <HAL_GPIO_WritePin>
 8000532:	e00a      	b.n	800054a <main+0x102>
			  }
			  else {
				  HAL_GPIO_WritePin(GPIOA, shiftDataPin, GPIOPinSet[0]);
 8000534:	2310      	movs	r3, #16
 8000536:	18fb      	adds	r3, r7, r3
 8000538:	781a      	ldrb	r2, [r3, #0]
 800053a:	231a      	movs	r3, #26
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	8819      	ldrh	r1, [r3, #0]
 8000540:	23a0      	movs	r3, #160	; 0xa0
 8000542:	05db      	lsls	r3, r3, #23
 8000544:	0018      	movs	r0, r3
 8000546:	f000 fe3d 	bl	80011c4 <HAL_GPIO_WritePin>
			  }


			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(GPIOB, shiftDataClockPin, GPIOPinSet[1]);
 800054a:	2410      	movs	r4, #16
 800054c:	193b      	adds	r3, r7, r4
 800054e:	785a      	ldrb	r2, [r3, #1]
 8000550:	2518      	movs	r5, #24
 8000552:	197b      	adds	r3, r7, r5
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	4830      	ldr	r0, [pc, #192]	; (8000618 <main+0x1d0>)
 8000558:	0019      	movs	r1, r3
 800055a:	f000 fe33 	bl	80011c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, shiftDataClockPin, GPIOPinSet[0]);
 800055e:	193b      	adds	r3, r7, r4
 8000560:	781a      	ldrb	r2, [r3, #0]
 8000562:	197b      	adds	r3, r7, r5
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	482c      	ldr	r0, [pc, #176]	; (8000618 <main+0x1d0>)
 8000568:	0019      	movs	r1, r3
 800056a:	f000 fe2b 	bl	80011c4 <HAL_GPIO_WritePin>


			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 800056e:	2223      	movs	r2, #35	; 0x23
 8000570:	18bb      	adds	r3, r7, r2
 8000572:	18ba      	adds	r2, r7, r2
 8000574:	7812      	ldrb	r2, [r2, #0]
 8000576:	0852      	lsrs	r2, r2, #1
 8000578:	701a      	strb	r2, [r3, #0]

			  // Display shifted data
				HAL_GPIO_WritePin(GPIOB, shiftStoreClockPin, GPIOPinSet[1]);
 800057a:	193b      	adds	r3, r7, r4
 800057c:	785a      	ldrb	r2, [r3, #1]
 800057e:	2516      	movs	r5, #22
 8000580:	197b      	adds	r3, r7, r5
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	4824      	ldr	r0, [pc, #144]	; (8000618 <main+0x1d0>)
 8000586:	0019      	movs	r1, r3
 8000588:	f000 fe1c 	bl	80011c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, shiftStoreClockPin, GPIOPinSet[0]);
 800058c:	193b      	adds	r3, r7, r4
 800058e:	781a      	ldrb	r2, [r3, #0]
 8000590:	197b      	adds	r3, r7, r5
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	4820      	ldr	r0, [pc, #128]	; (8000618 <main+0x1d0>)
 8000596:	0019      	movs	r1, r3
 8000598:	f000 fe14 	bl	80011c4 <HAL_GPIO_WritePin>


				HAL_Delay(1000);
 800059c:	23fa      	movs	r3, #250	; 0xfa
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 fba9 	bl	8000cf8 <HAL_Delay>
		  for(int j = 0; j < 20; j++) {
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	3301      	adds	r3, #1
 80005aa:	61fb      	str	r3, [r7, #28]
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	2b13      	cmp	r3, #19
 80005b0:	ddb1      	ble.n	8000516 <main+0xce>
	  for (int i = 0; i < 4; i++) {
 80005b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b4:	3301      	adds	r3, #1
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
 80005b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ba:	2b03      	cmp	r3, #3
 80005bc:	dda1      	ble.n	8000502 <main+0xba>

	  }


	  		// Clear out previous digit
	  		HAL_GPIO_WritePin(GPIOB, shiftMCLRPin, GPIOPinSet[0]);
 80005be:	2410      	movs	r4, #16
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	781a      	ldrb	r2, [r3, #0]
 80005c4:	2512      	movs	r5, #18
 80005c6:	197b      	adds	r3, r7, r5
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	4813      	ldr	r0, [pc, #76]	; (8000618 <main+0x1d0>)
 80005cc:	0019      	movs	r1, r3
 80005ce:	f000 fdf9 	bl	80011c4 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, shiftMCLRPin, GPIOPinSet[1]);
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	785a      	ldrb	r2, [r3, #1]
 80005d6:	197b      	adds	r3, r7, r5
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	480f      	ldr	r0, [pc, #60]	; (8000618 <main+0x1d0>)
 80005dc:	0019      	movs	r1, r3
 80005de:	f000 fdf1 	bl	80011c4 <HAL_GPIO_WritePin>

	  		// Store cleared data
	  		HAL_GPIO_WritePin(GPIOB, shiftStoreClockPin, GPIOPinSet[1]);
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	785a      	ldrb	r2, [r3, #1]
 80005e6:	2516      	movs	r5, #22
 80005e8:	197b      	adds	r3, r7, r5
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	480a      	ldr	r0, [pc, #40]	; (8000618 <main+0x1d0>)
 80005ee:	0019      	movs	r1, r3
 80005f0:	f000 fde8 	bl	80011c4 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, shiftStoreClockPin, GPIOPinSet[0]);
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	781a      	ldrb	r2, [r3, #0]
 80005f8:	197b      	adds	r3, r7, r5
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <main+0x1d0>)
 80005fe:	0019      	movs	r1, r3
 8000600:	f000 fde0 	bl	80011c4 <HAL_GPIO_WritePin>

	  		HAL_Delay(1000);
 8000604:	23fa      	movs	r3, #250	; 0xfa
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	0018      	movs	r0, r3
 800060a:	f000 fb75 	bl	8000cf8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, shiftOutputEnablePin, GPIOPinSet[0]);
 800060e:	e76b      	b.n	80004e8 <main+0xa0>
 8000610:	ffff8000 	.word	0xffff8000
 8000614:	0800318c 	.word	0x0800318c
 8000618:	50000400 	.word	0x50000400

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b093      	sub	sp, #76	; 0x4c
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	2410      	movs	r4, #16
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2338      	movs	r3, #56	; 0x38
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f002 fd99 	bl	8003164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000632:	003b      	movs	r3, r7
 8000634:	0018      	movs	r0, r3
 8000636:	2310      	movs	r3, #16
 8000638:	001a      	movs	r2, r3
 800063a:	2100      	movs	r1, #0
 800063c:	f002 fd92 	bl	8003164 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	0018      	movs	r0, r3
 8000646:	f000 fe0f 	bl	8001268 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800064a:	193b      	adds	r3, r7, r4
 800064c:	220a      	movs	r2, #10
 800064e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	193b      	adds	r3, r7, r4
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	0052      	lsls	r2, r2, #1
 8000656:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000658:	0021      	movs	r1, r4
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2240      	movs	r2, #64	; 0x40
 8000664:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2201      	movs	r2, #1
 800066a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	187b      	adds	r3, r7, r1
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fe43 	bl	8001300 <HAL_RCC_OscConfig>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800067e:	f000 f99f 	bl	80009c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	003b      	movs	r3, r7
 8000684:	2207      	movs	r2, #7
 8000686:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000688:	003b      	movs	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	003b      	movs	r3, r7
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000694:	003b      	movs	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069a:	003b      	movs	r3, r7
 800069c:	2100      	movs	r1, #0
 800069e:	0018      	movs	r0, r3
 80006a0:	f001 f948 	bl	8001934 <HAL_RCC_ClockConfig>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006a8:	f000 f98a 	bl	80009c0 <Error_Handler>
  }
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b013      	add	sp, #76	; 0x4c
 80006b2:	bd90      	pop	{r4, r7, pc}

080006b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b090      	sub	sp, #64	; 0x40
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006ba:	232c      	movs	r3, #44	; 0x2c
 80006bc:	18fb      	adds	r3, r7, r3
 80006be:	0018      	movs	r0, r3
 80006c0:	2314      	movs	r3, #20
 80006c2:	001a      	movs	r2, r3
 80006c4:	2100      	movs	r1, #0
 80006c6:	f002 fd4d 	bl	8003164 <memset>
  RTC_DateTypeDef sDate = {0};
 80006ca:	2328      	movs	r3, #40	; 0x28
 80006cc:	18fb      	adds	r3, r7, r3
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80006d2:	003b      	movs	r3, r7
 80006d4:	0018      	movs	r0, r3
 80006d6:	2328      	movs	r3, #40	; 0x28
 80006d8:	001a      	movs	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	f002 fd42 	bl	8003164 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006e0:	4b47      	ldr	r3, [pc, #284]	; (8000800 <MX_RTC_Init+0x14c>)
 80006e2:	4a48      	ldr	r2, [pc, #288]	; (8000804 <MX_RTC_Init+0x150>)
 80006e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80006e6:	4b46      	ldr	r3, [pc, #280]	; (8000800 <MX_RTC_Init+0x14c>)
 80006e8:	2240      	movs	r2, #64	; 0x40
 80006ea:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80006ec:	4b44      	ldr	r3, [pc, #272]	; (8000800 <MX_RTC_Init+0x14c>)
 80006ee:	227f      	movs	r2, #127	; 0x7f
 80006f0:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80006f2:	4b43      	ldr	r3, [pc, #268]	; (8000800 <MX_RTC_Init+0x14c>)
 80006f4:	22ff      	movs	r2, #255	; 0xff
 80006f6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006f8:	4b41      	ldr	r3, [pc, #260]	; (8000800 <MX_RTC_Init+0x14c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006fe:	4b40      	ldr	r3, [pc, #256]	; (8000800 <MX_RTC_Init+0x14c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000704:	4b3e      	ldr	r3, [pc, #248]	; (8000800 <MX_RTC_Init+0x14c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800070a:	4b3d      	ldr	r3, [pc, #244]	; (8000800 <MX_RTC_Init+0x14c>)
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	05d2      	lsls	r2, r2, #23
 8000710:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000712:	4b3b      	ldr	r3, [pc, #236]	; (8000800 <MX_RTC_Init+0x14c>)
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000718:	4b39      	ldr	r3, [pc, #228]	; (8000800 <MX_RTC_Init+0x14c>)
 800071a:	0018      	movs	r0, r3
 800071c:	f001 fc2e 	bl	8001f7c <HAL_RTC_Init>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d001      	beq.n	8000728 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000724:	f000 f94c 	bl	80009c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000728:	212c      	movs	r1, #44	; 0x2c
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2201      	movs	r2, #1
 800072e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2200      	movs	r2, #0
 8000734:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2200      	movs	r2, #0
 800073a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000754:	1879      	adds	r1, r7, r1
 8000756:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <MX_RTC_Init+0x14c>)
 8000758:	2201      	movs	r2, #1
 800075a:	0018      	movs	r0, r3
 800075c:	f001 fcb0 	bl	80020c0 <HAL_RTC_SetTime>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000764:	f000 f92c 	bl	80009c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000768:	2128      	movs	r1, #40	; 0x28
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2201      	movs	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2201      	movs	r2, #1
 8000774:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2201      	movs	r2, #1
 800077a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2200      	movs	r2, #0
 8000780:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000782:	1879      	adds	r1, r7, r1
 8000784:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <MX_RTC_Init+0x14c>)
 8000786:	2201      	movs	r2, #1
 8000788:	0018      	movs	r0, r3
 800078a:	f001 fd41 	bl	8002210 <HAL_RTC_SetDate>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 8000792:	f000 f915 	bl	80009c0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000796:	003b      	movs	r3, r7
 8000798:	2201      	movs	r2, #1
 800079a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800079c:	003b      	movs	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 80007a2:	003b      	movs	r3, r7
 80007a4:	2201      	movs	r2, #1
 80007a6:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80007a8:	003b      	movs	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80007ae:	003b      	movs	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007b4:	003b      	movs	r3, r7
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007ba:	003b      	movs	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80007c0:	003b      	movs	r3, r7
 80007c2:	4a11      	ldr	r2, [pc, #68]	; (8000808 <MX_RTC_Init+0x154>)
 80007c4:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80007c6:	003b      	movs	r3, r7
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80007cc:	003b      	movs	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80007d2:	003b      	movs	r3, r7
 80007d4:	2220      	movs	r2, #32
 80007d6:	2101      	movs	r1, #1
 80007d8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80007da:	003b      	movs	r3, r7
 80007dc:	2280      	movs	r2, #128	; 0x80
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80007e2:	0039      	movs	r1, r7
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_RTC_Init+0x14c>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	0018      	movs	r0, r3
 80007ea:	f001 fda3 	bl	8002334 <HAL_RTC_SetAlarm_IT>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_RTC_Init+0x142>
  {
    Error_Handler();
 80007f2:	f000 f8e5 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b010      	add	sp, #64	; 0x40
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	20000028 	.word	0x20000028
 8000804:	40002800 	.word	0x40002800
 8000808:	80808000 	.word	0x80808000

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_USART2_UART_Init+0x60>)
 8000812:	4a17      	ldr	r2, [pc, #92]	; (8000870 <MX_USART2_UART_Init+0x64>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_USART2_UART_Init+0x60>)
 8000818:	22e1      	movs	r2, #225	; 0xe1
 800081a:	0252      	lsls	r2, r2, #9
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <MX_USART2_UART_Init+0x60>)
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	0152      	lsls	r2, r2, #5
 8000824:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_USART2_UART_Init+0x60>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_USART2_UART_Init+0x60>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_USART2_UART_Init+0x60>)
 8000834:	220c      	movs	r2, #12
 8000836:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_USART2_UART_Init+0x60>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_USART2_UART_Init+0x60>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_USART2_UART_Init+0x60>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_USART2_UART_Init+0x60>)
 800084c:	2200      	movs	r2, #0
 800084e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_USART2_UART_Init+0x60>)
 8000852:	2200      	movs	r2, #0
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <MX_USART2_UART_Init+0x60>)
 8000858:	0018      	movs	r0, r3
 800085a:	f001 ffc7 	bl	80027ec <HAL_UART_Init>
 800085e:	1e03      	subs	r3, r0, #0
 8000860:	d001      	beq.n	8000866 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000862:	f000 f8ad 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000054 	.word	0x20000054
 8000870:	40004400 	.word	0x40004400

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b08b      	sub	sp, #44	; 0x2c
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	2414      	movs	r4, #20
 800087c:	193b      	adds	r3, r7, r4
 800087e:	0018      	movs	r0, r3
 8000880:	2314      	movs	r3, #20
 8000882:	001a      	movs	r2, r3
 8000884:	2100      	movs	r1, #0
 8000886:	f002 fc6d 	bl	8003164 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	4b41      	ldr	r3, [pc, #260]	; (8000990 <MX_GPIO_Init+0x11c>)
 800088c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800088e:	4b40      	ldr	r3, [pc, #256]	; (8000990 <MX_GPIO_Init+0x11c>)
 8000890:	2104      	movs	r1, #4
 8000892:	430a      	orrs	r2, r1
 8000894:	635a      	str	r2, [r3, #52]	; 0x34
 8000896:	4b3e      	ldr	r3, [pc, #248]	; (8000990 <MX_GPIO_Init+0x11c>)
 8000898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800089a:	2204      	movs	r2, #4
 800089c:	4013      	ands	r3, r2
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008a2:	4b3b      	ldr	r3, [pc, #236]	; (8000990 <MX_GPIO_Init+0x11c>)
 80008a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008a6:	4b3a      	ldr	r3, [pc, #232]	; (8000990 <MX_GPIO_Init+0x11c>)
 80008a8:	2120      	movs	r1, #32
 80008aa:	430a      	orrs	r2, r1
 80008ac:	635a      	str	r2, [r3, #52]	; 0x34
 80008ae:	4b38      	ldr	r3, [pc, #224]	; (8000990 <MX_GPIO_Init+0x11c>)
 80008b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008b2:	2220      	movs	r2, #32
 80008b4:	4013      	ands	r3, r2
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b35      	ldr	r3, [pc, #212]	; (8000990 <MX_GPIO_Init+0x11c>)
 80008bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008be:	4b34      	ldr	r3, [pc, #208]	; (8000990 <MX_GPIO_Init+0x11c>)
 80008c0:	2101      	movs	r1, #1
 80008c2:	430a      	orrs	r2, r1
 80008c4:	635a      	str	r2, [r3, #52]	; 0x34
 80008c6:	4b32      	ldr	r3, [pc, #200]	; (8000990 <MX_GPIO_Init+0x11c>)
 80008c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ca:	2201      	movs	r2, #1
 80008cc:	4013      	ands	r3, r2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	4b2f      	ldr	r3, [pc, #188]	; (8000990 <MX_GPIO_Init+0x11c>)
 80008d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008d6:	4b2e      	ldr	r3, [pc, #184]	; (8000990 <MX_GPIO_Init+0x11c>)
 80008d8:	2102      	movs	r1, #2
 80008da:	430a      	orrs	r2, r1
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
 80008de:	4b2c      	ldr	r3, [pc, #176]	; (8000990 <MX_GPIO_Init+0x11c>)
 80008e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e2:	2202      	movs	r2, #2
 80008e4:	4013      	ands	r3, r2
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	0219      	lsls	r1, r3, #8
 80008ee:	23a0      	movs	r3, #160	; 0xa0
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	2200      	movs	r2, #0
 80008f4:	0018      	movs	r0, r3
 80008f6:	f000 fc65 	bl	80011c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80008fa:	4b26      	ldr	r3, [pc, #152]	; (8000994 <MX_GPIO_Init+0x120>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	2178      	movs	r1, #120	; 0x78
 8000900:	0018      	movs	r0, r3
 8000902:	f000 fc5f 	bl	80011c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000906:	193b      	adds	r3, r7, r4
 8000908:	2204      	movs	r2, #4
 800090a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2288      	movs	r2, #136	; 0x88
 8000910:	0352      	lsls	r2, r2, #13
 8000912:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 800091a:	193b      	adds	r3, r7, r4
 800091c:	4a1e      	ldr	r2, [pc, #120]	; (8000998 <MX_GPIO_Init+0x124>)
 800091e:	0019      	movs	r1, r3
 8000920:	0010      	movs	r0, r2
 8000922:	f000 faeb 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000926:	0021      	movs	r1, r4
 8000928:	193b      	adds	r3, r7, r4
 800092a:	2280      	movs	r2, #128	; 0x80
 800092c:	0212      	lsls	r2, r2, #8
 800092e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	000c      	movs	r4, r1
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2201      	movs	r2, #1
 8000936:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000944:	193a      	adds	r2, r7, r4
 8000946:	23a0      	movs	r3, #160	; 0xa0
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	0011      	movs	r1, r2
 800094c:	0018      	movs	r0, r3
 800094e:	f000 fad5 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000952:	0021      	movs	r1, r4
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2278      	movs	r2, #120	; 0x78
 8000958:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2201      	movs	r2, #1
 800095e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	187b      	adds	r3, r7, r1
 800096e:	4a09      	ldr	r2, [pc, #36]	; (8000994 <MX_GPIO_Init+0x120>)
 8000970:	0019      	movs	r1, r3
 8000972:	0010      	movs	r0, r2
 8000974:	f000 fac2 	bl	8000efc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	2006      	movs	r0, #6
 800097e:	f000 fa8b 	bl	8000e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000982:	2006      	movs	r0, #6
 8000984:	f000 fa9d 	bl	8000ec2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  // Initialize all output pins to low
/* USER CODE END MX_GPIO_Init_2 */
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b00b      	add	sp, #44	; 0x2c
 800098e:	bd90      	pop	{r4, r7, pc}
 8000990:	40021000 	.word	0x40021000
 8000994:	50000400 	.word	0x50000400
 8000998:	50001400 	.word	0x50001400

0800099c <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	0002      	movs	r2, r0
 80009a4:	1dbb      	adds	r3, r7, #6
 80009a6:	801a      	strh	r2, [r3, #0]

}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b002      	add	sp, #8
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
    HAL_GPIO_TogglePin(GPIOA, RTCInterruptLEDPin);

  printf("Current time: %d : %d : %d\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);*/

}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b002      	add	sp, #8
 80009be:	bd80      	pop	{r7, pc}

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c4:	b672      	cpsid	i
}
 80009c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <Error_Handler+0x8>
	...

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_MspInit+0x44>)
 80009d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_MspInit+0x44>)
 80009d8:	2101      	movs	r1, #1
 80009da:	430a      	orrs	r2, r1
 80009dc:	641a      	str	r2, [r3, #64]	; 0x40
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <HAL_MspInit+0x44>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	2201      	movs	r2, #1
 80009e4:	4013      	ands	r3, r2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_MspInit+0x44>)
 80009ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_MspInit+0x44>)
 80009f0:	2180      	movs	r1, #128	; 0x80
 80009f2:	0549      	lsls	r1, r1, #21
 80009f4:	430a      	orrs	r2, r1
 80009f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <HAL_MspInit+0x44>)
 80009fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	055b      	lsls	r3, r3, #21
 8000a00:	4013      	ands	r3, r2
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b002      	add	sp, #8
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	40021000 	.word	0x40021000

08000a14 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b08f      	sub	sp, #60	; 0x3c
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a1c:	2410      	movs	r4, #16
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	0018      	movs	r0, r3
 8000a22:	2328      	movs	r3, #40	; 0x28
 8000a24:	001a      	movs	r2, r3
 8000a26:	2100      	movs	r1, #0
 8000a28:	f002 fb9c 	bl	8003164 <memset>
  if(hrtc->Instance==RTC)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <HAL_RTC_MspInit+0x84>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d12c      	bne.n	8000a90 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	2280      	movs	r2, #128	; 0x80
 8000a3a:	0292      	lsls	r2, r2, #10
 8000a3c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	2280      	movs	r2, #128	; 0x80
 8000a42:	0092      	lsls	r2, r2, #2
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f001 f91d 	bl	8001c88 <HAL_RCCEx_PeriphCLKConfig>
 8000a4e:	1e03      	subs	r3, r0, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000a52:	f7ff ffb5 	bl	80009c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <HAL_RTC_MspInit+0x88>)
 8000a58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <HAL_RTC_MspInit+0x88>)
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	0209      	lsls	r1, r1, #8
 8000a60:	430a      	orrs	r2, r1
 8000a62:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_RTC_MspInit+0x88>)
 8000a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <HAL_RTC_MspInit+0x88>)
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	00c9      	lsls	r1, r1, #3
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <HAL_RTC_MspInit+0x88>)
 8000a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a76:	2380      	movs	r3, #128	; 0x80
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	2002      	movs	r0, #2
 8000a86:	f000 fa07 	bl	8000e98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f000 fa19 	bl	8000ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b00f      	add	sp, #60	; 0x3c
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	40002800 	.word	0x40002800
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b08b      	sub	sp, #44	; 0x2c
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	2414      	movs	r4, #20
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	0018      	movs	r0, r3
 8000aae:	2314      	movs	r3, #20
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f002 fb56 	bl	8003164 <memset>
  if(huart->Instance==USART2)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <HAL_UART_MspInit+0x8c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d130      	bne.n	8000b24 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <HAL_UART_MspInit+0x90>)
 8000ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <HAL_UART_MspInit+0x90>)
 8000ac8:	2180      	movs	r1, #128	; 0x80
 8000aca:	0289      	lsls	r1, r1, #10
 8000acc:	430a      	orrs	r2, r1
 8000ace:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <HAL_UART_MspInit+0x90>)
 8000ad2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	029b      	lsls	r3, r3, #10
 8000ad8:	4013      	ands	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <HAL_UART_MspInit+0x90>)
 8000ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <HAL_UART_MspInit+0x90>)
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	635a      	str	r2, [r3, #52]	; 0x34
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_UART_MspInit+0x90>)
 8000aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aee:	2201      	movs	r2, #1
 8000af0:	4013      	ands	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000af6:	0021      	movs	r1, r4
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	220c      	movs	r2, #12
 8000afc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2202      	movs	r2, #2
 8000b02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2201      	movs	r2, #1
 8000b08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	2201      	movs	r2, #1
 8000b14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	187a      	adds	r2, r7, r1
 8000b18:	23a0      	movs	r3, #160	; 0xa0
 8000b1a:	05db      	lsls	r3, r3, #23
 8000b1c:	0011      	movs	r1, r2
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 f9ec 	bl	8000efc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b00b      	add	sp, #44	; 0x2c
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	40004400 	.word	0x40004400
 8000b30:	40021000 	.word	0x40021000

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b58:	f000 f8b2 	bl	8000cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <RTC_TAMP_IRQHandler+0x14>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f001 fd22 	bl	80025b4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	20000028 	.word	0x20000028

08000b7c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_NRST_Pin);
 8000b80:	2004      	movs	r0, #4
 8000b82:	f000 fb3d 	bl	8001200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b98:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b9c:	f7ff fff6 	bl	8000b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ba2:	490d      	ldr	r1, [pc, #52]	; (8000bd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <LoopForever+0xe>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb8:	4c0a      	ldr	r4, [pc, #40]	; (8000be4 <LoopForever+0x16>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bc6:	f002 faa9 	bl	800311c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bca:	f7ff fc3d 	bl	8000448 <main>

08000bce <LoopForever>:

LoopForever:
  b LoopForever
 8000bce:	e7fe      	b.n	8000bce <LoopForever>
  ldr   r0, =_estack
 8000bd0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bdc:	08003220 	.word	0x08003220
  ldr r2, =_sbss
 8000be0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000be4:	200000ec 	.word	0x200000ec

08000be8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC1_IRQHandler>
	...

08000bec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_Init+0x3c>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_Init+0x3c>)
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	0049      	lsls	r1, r1, #1
 8000c02:	430a      	orrs	r2, r1
 8000c04:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c06:	2000      	movs	r0, #0
 8000c08:	f000 f810 	bl	8000c2c <HAL_InitTick>
 8000c0c:	1e03      	subs	r3, r0, #0
 8000c0e:	d003      	beq.n	8000c18 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
 8000c16:	e001      	b.n	8000c1c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff fed8 	bl	80009cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	781b      	ldrb	r3, [r3, #0]
}
 8000c20:	0018      	movs	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b002      	add	sp, #8
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40022000 	.word	0x40022000

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c34:	230f      	movs	r3, #15
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <HAL_InitTick+0x88>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d02b      	beq.n	8000c9c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <HAL_InitTick+0x8c>)
 8000c46:	681c      	ldr	r4, [r3, #0]
 8000c48:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <HAL_InitTick+0x88>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	23fa      	movs	r3, #250	; 0xfa
 8000c50:	0098      	lsls	r0, r3, #2
 8000c52:	f7ff fa57 	bl	8000104 <__udivsi3>
 8000c56:	0003      	movs	r3, r0
 8000c58:	0019      	movs	r1, r3
 8000c5a:	0020      	movs	r0, r4
 8000c5c:	f7ff fa52 	bl	8000104 <__udivsi3>
 8000c60:	0003      	movs	r3, r0
 8000c62:	0018      	movs	r0, r3
 8000c64:	f000 f93d 	bl	8000ee2 <HAL_SYSTICK_Config>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d112      	bne.n	8000c92 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d80a      	bhi.n	8000c88 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	2301      	movs	r3, #1
 8000c76:	425b      	negs	r3, r3
 8000c78:	2200      	movs	r2, #0
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 f90c 	bl	8000e98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_InitTick+0x90>)
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e00d      	b.n	8000ca4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c88:	230f      	movs	r3, #15
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	e008      	b.n	8000ca4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c92:	230f      	movs	r3, #15
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e003      	b.n	8000ca4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	781b      	ldrb	r3, [r3, #0]
}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b005      	add	sp, #20
 8000cb0:	bd90      	pop	{r4, r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000004 	.word	0x20000004

08000cc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_IncTick+0x1c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	001a      	movs	r2, r3
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_IncTick+0x20>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	18d2      	adds	r2, r2, r3
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cd2:	601a      	str	r2, [r3, #0]
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	200000e8 	.word	0x200000e8

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <HAL_GetTick+0x10>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	200000e8 	.word	0x200000e8

08000cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d00:	f7ff fff0 	bl	8000ce4 <HAL_GetTick>
 8000d04:	0003      	movs	r3, r0
 8000d06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	d005      	beq.n	8000d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_Delay+0x44>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	001a      	movs	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	189b      	adds	r3, r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	f7ff ffe0 	bl	8000ce4 <HAL_GetTick>
 8000d24:	0002      	movs	r2, r0
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d8f7      	bhi.n	8000d20 <HAL_Delay+0x28>
  {
  }
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b004      	add	sp, #16
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	20000008 	.word	0x20000008

08000d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	0002      	movs	r2, r0
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b7f      	cmp	r3, #127	; 0x7f
 8000d52:	d809      	bhi.n	8000d68 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d54:	1dfb      	adds	r3, r7, #7
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	001a      	movs	r2, r3
 8000d5a:	231f      	movs	r3, #31
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <__NVIC_EnableIRQ+0x30>)
 8000d60:	2101      	movs	r1, #1
 8000d62:	4091      	lsls	r1, r2
 8000d64:	000a      	movs	r2, r1
 8000d66:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b002      	add	sp, #8
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	0002      	movs	r2, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b7f      	cmp	r3, #127	; 0x7f
 8000d88:	d828      	bhi.n	8000ddc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d8a:	4a2f      	ldr	r2, [pc, #188]	; (8000e48 <__NVIC_SetPriority+0xd4>)
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	33c0      	adds	r3, #192	; 0xc0
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	589b      	ldr	r3, [r3, r2]
 8000d9a:	1dfa      	adds	r2, r7, #7
 8000d9c:	7812      	ldrb	r2, [r2, #0]
 8000d9e:	0011      	movs	r1, r2
 8000da0:	2203      	movs	r2, #3
 8000da2:	400a      	ands	r2, r1
 8000da4:	00d2      	lsls	r2, r2, #3
 8000da6:	21ff      	movs	r1, #255	; 0xff
 8000da8:	4091      	lsls	r1, r2
 8000daa:	000a      	movs	r2, r1
 8000dac:	43d2      	mvns	r2, r2
 8000dae:	401a      	ands	r2, r3
 8000db0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	019b      	lsls	r3, r3, #6
 8000db6:	22ff      	movs	r2, #255	; 0xff
 8000db8:	401a      	ands	r2, r3
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	4003      	ands	r3, r0
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc8:	481f      	ldr	r0, [pc, #124]	; (8000e48 <__NVIC_SetPriority+0xd4>)
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	089b      	lsrs	r3, r3, #2
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	33c0      	adds	r3, #192	; 0xc0
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dda:	e031      	b.n	8000e40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <__NVIC_SetPriority+0xd8>)
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	0019      	movs	r1, r3
 8000de4:	230f      	movs	r3, #15
 8000de6:	400b      	ands	r3, r1
 8000de8:	3b08      	subs	r3, #8
 8000dea:	089b      	lsrs	r3, r3, #2
 8000dec:	3306      	adds	r3, #6
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	18d3      	adds	r3, r2, r3
 8000df2:	3304      	adds	r3, #4
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	1dfa      	adds	r2, r7, #7
 8000df8:	7812      	ldrb	r2, [r2, #0]
 8000dfa:	0011      	movs	r1, r2
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	400a      	ands	r2, r1
 8000e00:	00d2      	lsls	r2, r2, #3
 8000e02:	21ff      	movs	r1, #255	; 0xff
 8000e04:	4091      	lsls	r1, r2
 8000e06:	000a      	movs	r2, r1
 8000e08:	43d2      	mvns	r2, r2
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	019b      	lsls	r3, r3, #6
 8000e12:	22ff      	movs	r2, #255	; 0xff
 8000e14:	401a      	ands	r2, r3
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	4003      	ands	r3, r0
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e24:	4809      	ldr	r0, [pc, #36]	; (8000e4c <__NVIC_SetPriority+0xd8>)
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	001c      	movs	r4, r3
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	4023      	ands	r3, r4
 8000e30:	3b08      	subs	r3, #8
 8000e32:	089b      	lsrs	r3, r3, #2
 8000e34:	430a      	orrs	r2, r1
 8000e36:	3306      	adds	r3, #6
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	18c3      	adds	r3, r0, r3
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	601a      	str	r2, [r3, #0]
}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b003      	add	sp, #12
 8000e46:	bd90      	pop	{r4, r7, pc}
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	1e5a      	subs	r2, r3, #1
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	045b      	lsls	r3, r3, #17
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d301      	bcc.n	8000e68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e64:	2301      	movs	r3, #1
 8000e66:	e010      	b.n	8000e8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <SysTick_Config+0x44>)
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	3a01      	subs	r2, #1
 8000e6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e70:	2301      	movs	r3, #1
 8000e72:	425b      	negs	r3, r3
 8000e74:	2103      	movs	r1, #3
 8000e76:	0018      	movs	r0, r3
 8000e78:	f7ff ff7c 	bl	8000d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <SysTick_Config+0x44>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <SysTick_Config+0x44>)
 8000e84:	2207      	movs	r2, #7
 8000e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b002      	add	sp, #8
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
 8000ea2:	210f      	movs	r1, #15
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	1c02      	adds	r2, r0, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f7ff ff5d 	bl	8000d74 <__NVIC_SetPriority>
}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b004      	add	sp, #16
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	0002      	movs	r2, r0
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b25b      	sxtb	r3, r3
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f7ff ff33 	bl	8000d40 <__NVIC_EnableIRQ>
}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b002      	add	sp, #8
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff ffaf 	bl	8000e50 <SysTick_Config>
 8000ef2:	0003      	movs	r3, r0
}
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b002      	add	sp, #8
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0a:	e147      	b.n	800119c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2101      	movs	r1, #1
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4091      	lsls	r1, r2
 8000f16:	000a      	movs	r2, r1
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d100      	bne.n	8000f24 <HAL_GPIO_Init+0x28>
 8000f22:	e138      	b.n	8001196 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2203      	movs	r2, #3
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d005      	beq.n	8000f3c <HAL_GPIO_Init+0x40>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2203      	movs	r2, #3
 8000f36:	4013      	ands	r3, r2
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d130      	bne.n	8000f9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	409a      	lsls	r2, r3
 8000f4a:	0013      	movs	r3, r2
 8000f4c:	43da      	mvns	r2, r3
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	409a      	lsls	r2, r3
 8000f5e:	0013      	movs	r3, r2
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f72:	2201      	movs	r2, #1
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	091b      	lsrs	r3, r3, #4
 8000f88:	2201      	movs	r2, #1
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d017      	beq.n	8000fda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2203      	movs	r2, #3
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d123      	bne.n	800102e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	08da      	lsrs	r2, r3, #3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3208      	adds	r2, #8
 8000fee:	0092      	lsls	r2, r2, #2
 8000ff0:	58d3      	ldr	r3, [r2, r3]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	2207      	movs	r2, #7
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	43da      	mvns	r2, r3
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	691a      	ldr	r2, [r3, #16]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	2107      	movs	r1, #7
 8001012:	400b      	ands	r3, r1
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	409a      	lsls	r2, r3
 8001018:	0013      	movs	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	0092      	lsls	r2, r2, #2
 800102a:	6939      	ldr	r1, [r7, #16]
 800102c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	43da      	mvns	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2203      	movs	r2, #3
 800104c:	401a      	ands	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	23c0      	movs	r3, #192	; 0xc0
 8001068:	029b      	lsls	r3, r3, #10
 800106a:	4013      	ands	r3, r2
 800106c:	d100      	bne.n	8001070 <HAL_GPIO_Init+0x174>
 800106e:	e092      	b.n	8001196 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001070:	4a50      	ldr	r2, [pc, #320]	; (80011b4 <HAL_GPIO_Init+0x2b8>)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3318      	adds	r3, #24
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	589b      	ldr	r3, [r3, r2]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	2203      	movs	r2, #3
 8001082:	4013      	ands	r3, r2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	220f      	movs	r2, #15
 8001088:	409a      	lsls	r2, r3
 800108a:	0013      	movs	r3, r2
 800108c:	43da      	mvns	r2, r3
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	23a0      	movs	r3, #160	; 0xa0
 8001098:	05db      	lsls	r3, r3, #23
 800109a:	429a      	cmp	r2, r3
 800109c:	d013      	beq.n	80010c6 <HAL_GPIO_Init+0x1ca>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a45      	ldr	r2, [pc, #276]	; (80011b8 <HAL_GPIO_Init+0x2bc>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d00d      	beq.n	80010c2 <HAL_GPIO_Init+0x1c6>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a44      	ldr	r2, [pc, #272]	; (80011bc <HAL_GPIO_Init+0x2c0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d007      	beq.n	80010be <HAL_GPIO_Init+0x1c2>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a43      	ldr	r2, [pc, #268]	; (80011c0 <HAL_GPIO_Init+0x2c4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d101      	bne.n	80010ba <HAL_GPIO_Init+0x1be>
 80010b6:	2303      	movs	r3, #3
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x1cc>
 80010ba:	2305      	movs	r3, #5
 80010bc:	e004      	b.n	80010c8 <HAL_GPIO_Init+0x1cc>
 80010be:	2302      	movs	r3, #2
 80010c0:	e002      	b.n	80010c8 <HAL_GPIO_Init+0x1cc>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <HAL_GPIO_Init+0x1cc>
 80010c6:	2300      	movs	r3, #0
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	2103      	movs	r1, #3
 80010cc:	400a      	ands	r2, r1
 80010ce:	00d2      	lsls	r2, r2, #3
 80010d0:	4093      	lsls	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80010d8:	4936      	ldr	r1, [pc, #216]	; (80011b4 <HAL_GPIO_Init+0x2b8>)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	3318      	adds	r3, #24
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010e6:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <HAL_GPIO_Init+0x2b8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	43da      	mvns	r2, r3
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	035b      	lsls	r3, r3, #13
 80010fe:	4013      	ands	r3, r2
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <HAL_GPIO_Init+0x2b8>)
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001110:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <HAL_GPIO_Init+0x2b8>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	43da      	mvns	r2, r3
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	039b      	lsls	r3, r3, #14
 8001128:	4013      	ands	r3, r2
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <HAL_GPIO_Init+0x2b8>)
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800113a:	4a1e      	ldr	r2, [pc, #120]	; (80011b4 <HAL_GPIO_Init+0x2b8>)
 800113c:	2384      	movs	r3, #132	; 0x84
 800113e:	58d3      	ldr	r3, [r2, r3]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	43da      	mvns	r2, r3
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	029b      	lsls	r3, r3, #10
 8001154:	4013      	ands	r3, r2
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001160:	4914      	ldr	r1, [pc, #80]	; (80011b4 <HAL_GPIO_Init+0x2b8>)
 8001162:	2284      	movs	r2, #132	; 0x84
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001168:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <HAL_GPIO_Init+0x2b8>)
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	58d3      	ldr	r3, [r2, r3]
 800116e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	43da      	mvns	r2, r3
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	025b      	lsls	r3, r3, #9
 8001182:	4013      	ands	r3, r2
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800118e:	4909      	ldr	r1, [pc, #36]	; (80011b4 <HAL_GPIO_Init+0x2b8>)
 8001190:	2280      	movs	r2, #128	; 0x80
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	3301      	adds	r3, #1
 800119a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	40da      	lsrs	r2, r3
 80011a4:	1e13      	subs	r3, r2, #0
 80011a6:	d000      	beq.n	80011aa <HAL_GPIO_Init+0x2ae>
 80011a8:	e6b0      	b.n	8000f0c <HAL_GPIO_Init+0x10>
  }
}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b006      	add	sp, #24
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40021800 	.word	0x40021800
 80011b8:	50000400 	.word	0x50000400
 80011bc:	50000800 	.word	0x50000800
 80011c0:	50000c00 	.word	0x50000c00

080011c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	0008      	movs	r0, r1
 80011ce:	0011      	movs	r1, r2
 80011d0:	1cbb      	adds	r3, r7, #2
 80011d2:	1c02      	adds	r2, r0, #0
 80011d4:	801a      	strh	r2, [r3, #0]
 80011d6:	1c7b      	adds	r3, r7, #1
 80011d8:	1c0a      	adds	r2, r1, #0
 80011da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011dc:	1c7b      	adds	r3, r7, #1
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d004      	beq.n	80011ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011e4:	1cbb      	adds	r3, r7, #2
 80011e6:	881a      	ldrh	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011ec:	e003      	b.n	80011f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ee:	1cbb      	adds	r3, r7, #2
 80011f0:	881a      	ldrh	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b002      	add	sp, #8
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	0002      	movs	r2, r0
 8001208:	1dbb      	adds	r3, r7, #6
 800120a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	1dba      	adds	r2, r7, #6
 8001212:	8812      	ldrh	r2, [r2, #0]
 8001214:	4013      	ands	r3, r2
 8001216:	d008      	beq.n	800122a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001218:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800121a:	1dba      	adds	r2, r7, #6
 800121c:	8812      	ldrh	r2, [r2, #0]
 800121e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001220:	1dbb      	adds	r3, r7, #6
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	0018      	movs	r0, r3
 8001226:	f000 f815 	bl	8001254 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	1dba      	adds	r2, r7, #6
 8001230:	8812      	ldrh	r2, [r2, #0]
 8001232:	4013      	ands	r3, r2
 8001234:	d008      	beq.n	8001248 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001238:	1dba      	adds	r2, r7, #6
 800123a:	8812      	ldrh	r2, [r2, #0]
 800123c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800123e:	1dbb      	adds	r3, r7, #6
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	0018      	movs	r0, r3
 8001244:	f7ff fbaa 	bl	800099c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b002      	add	sp, #8
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021800 	.word	0x40021800

08001254 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	0002      	movs	r2, r0
 800125c:	1dbb      	adds	r3, r7, #6
 800125e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001260:	46c0      	nop			; (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	b002      	add	sp, #8
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a19      	ldr	r2, [pc, #100]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001276:	4013      	ands	r3, r2
 8001278:	0019      	movs	r1, r3
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	430a      	orrs	r2, r1
 8001280:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	429a      	cmp	r2, r3
 800128a:	d11f      	bne.n	80012cc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	0013      	movs	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	189b      	adds	r3, r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4912      	ldr	r1, [pc, #72]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800129a:	0018      	movs	r0, r3
 800129c:	f7fe ff32 	bl	8000104 <__udivsi3>
 80012a0:	0003      	movs	r3, r0
 80012a2:	3301      	adds	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012a6:	e008      	b.n	80012ba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	e001      	b.n	80012ba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e009      	b.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012bc:	695a      	ldr	r2, [r3, #20]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	401a      	ands	r2, r3
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d0ed      	beq.n	80012a8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	0018      	movs	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b004      	add	sp, #16
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	40007000 	.word	0x40007000
 80012dc:	fffff9ff 	.word	0xfffff9ff
 80012e0:	20000000 	.word	0x20000000
 80012e4:	000f4240 	.word	0x000f4240

080012e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <LL_RCC_GetAPB1Prescaler+0x14>)
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	23e0      	movs	r3, #224	; 0xe0
 80012f2:	01db      	lsls	r3, r3, #7
 80012f4:	4013      	ands	r3, r2
}
 80012f6:	0018      	movs	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40021000 	.word	0x40021000

08001300 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e2fe      	b.n	8001910 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2201      	movs	r2, #1
 8001318:	4013      	ands	r3, r2
 800131a:	d100      	bne.n	800131e <HAL_RCC_OscConfig+0x1e>
 800131c:	e07c      	b.n	8001418 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800131e:	4bc3      	ldr	r3, [pc, #780]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	2238      	movs	r2, #56	; 0x38
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001328:	4bc0      	ldr	r3, [pc, #768]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	2203      	movs	r2, #3
 800132e:	4013      	ands	r3, r2
 8001330:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	2b10      	cmp	r3, #16
 8001336:	d102      	bne.n	800133e <HAL_RCC_OscConfig+0x3e>
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	2b03      	cmp	r3, #3
 800133c:	d002      	beq.n	8001344 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b08      	cmp	r3, #8
 8001342:	d10b      	bne.n	800135c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	4bb9      	ldr	r3, [pc, #740]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	029b      	lsls	r3, r3, #10
 800134c:	4013      	ands	r3, r2
 800134e:	d062      	beq.n	8001416 <HAL_RCC_OscConfig+0x116>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d15e      	bne.n	8001416 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e2d9      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	025b      	lsls	r3, r3, #9
 8001364:	429a      	cmp	r2, r3
 8001366:	d107      	bne.n	8001378 <HAL_RCC_OscConfig+0x78>
 8001368:	4bb0      	ldr	r3, [pc, #704]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4baf      	ldr	r3, [pc, #700]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800136e:	2180      	movs	r1, #128	; 0x80
 8001370:	0249      	lsls	r1, r1, #9
 8001372:	430a      	orrs	r2, r1
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e020      	b.n	80013ba <HAL_RCC_OscConfig+0xba>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	23a0      	movs	r3, #160	; 0xa0
 800137e:	02db      	lsls	r3, r3, #11
 8001380:	429a      	cmp	r2, r3
 8001382:	d10e      	bne.n	80013a2 <HAL_RCC_OscConfig+0xa2>
 8001384:	4ba9      	ldr	r3, [pc, #676]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4ba8      	ldr	r3, [pc, #672]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	02c9      	lsls	r1, r1, #11
 800138e:	430a      	orrs	r2, r1
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	4ba6      	ldr	r3, [pc, #664]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4ba5      	ldr	r3, [pc, #660]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001398:	2180      	movs	r1, #128	; 0x80
 800139a:	0249      	lsls	r1, r1, #9
 800139c:	430a      	orrs	r2, r1
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	e00b      	b.n	80013ba <HAL_RCC_OscConfig+0xba>
 80013a2:	4ba2      	ldr	r3, [pc, #648]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4ba1      	ldr	r3, [pc, #644]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80013a8:	49a1      	ldr	r1, [pc, #644]	; (8001630 <HAL_RCC_OscConfig+0x330>)
 80013aa:	400a      	ands	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	4b9f      	ldr	r3, [pc, #636]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b9e      	ldr	r3, [pc, #632]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80013b4:	499f      	ldr	r1, [pc, #636]	; (8001634 <HAL_RCC_OscConfig+0x334>)
 80013b6:	400a      	ands	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d014      	beq.n	80013ec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c2:	f7ff fc8f 	bl	8000ce4 <HAL_GetTick>
 80013c6:	0003      	movs	r3, r0
 80013c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013cc:	f7ff fc8a 	bl	8000ce4 <HAL_GetTick>
 80013d0:	0002      	movs	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	; 0x64
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e298      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013de:	4b93      	ldr	r3, [pc, #588]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	029b      	lsls	r3, r3, #10
 80013e6:	4013      	ands	r3, r2
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0xcc>
 80013ea:	e015      	b.n	8001418 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fc7a 	bl	8000ce4 <HAL_GetTick>
 80013f0:	0003      	movs	r3, r0
 80013f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f6:	f7ff fc75 	bl	8000ce4 <HAL_GetTick>
 80013fa:	0002      	movs	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b64      	cmp	r3, #100	; 0x64
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e283      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001408:	4b88      	ldr	r3, [pc, #544]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	029b      	lsls	r3, r3, #10
 8001410:	4013      	ands	r3, r2
 8001412:	d1f0      	bne.n	80013f6 <HAL_RCC_OscConfig+0xf6>
 8001414:	e000      	b.n	8001418 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001416:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2202      	movs	r2, #2
 800141e:	4013      	ands	r3, r2
 8001420:	d100      	bne.n	8001424 <HAL_RCC_OscConfig+0x124>
 8001422:	e099      	b.n	8001558 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001424:	4b81      	ldr	r3, [pc, #516]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2238      	movs	r2, #56	; 0x38
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800142e:	4b7f      	ldr	r3, [pc, #508]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	2203      	movs	r2, #3
 8001434:	4013      	ands	r3, r2
 8001436:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b10      	cmp	r3, #16
 800143c:	d102      	bne.n	8001444 <HAL_RCC_OscConfig+0x144>
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d002      	beq.n	800144a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d135      	bne.n	80014b6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800144a:	4b78      	ldr	r3, [pc, #480]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4013      	ands	r3, r2
 8001454:	d005      	beq.n	8001462 <HAL_RCC_OscConfig+0x162>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e256      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001462:	4b72      	ldr	r3, [pc, #456]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4a74      	ldr	r2, [pc, #464]	; (8001638 <HAL_RCC_OscConfig+0x338>)
 8001468:	4013      	ands	r3, r2
 800146a:	0019      	movs	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	021a      	lsls	r2, r3, #8
 8001472:	4b6e      	ldr	r3, [pc, #440]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001474:	430a      	orrs	r2, r1
 8001476:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d112      	bne.n	80014a4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800147e:	4b6b      	ldr	r3, [pc, #428]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a6e      	ldr	r2, [pc, #440]	; (800163c <HAL_RCC_OscConfig+0x33c>)
 8001484:	4013      	ands	r3, r2
 8001486:	0019      	movs	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	4b67      	ldr	r3, [pc, #412]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001492:	4b66      	ldr	r3, [pc, #408]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	0adb      	lsrs	r3, r3, #11
 8001498:	2207      	movs	r2, #7
 800149a:	4013      	ands	r3, r2
 800149c:	4a68      	ldr	r2, [pc, #416]	; (8001640 <HAL_RCC_OscConfig+0x340>)
 800149e:	40da      	lsrs	r2, r3
 80014a0:	4b68      	ldr	r3, [pc, #416]	; (8001644 <HAL_RCC_OscConfig+0x344>)
 80014a2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014a4:	4b68      	ldr	r3, [pc, #416]	; (8001648 <HAL_RCC_OscConfig+0x348>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff fbbf 	bl	8000c2c <HAL_InitTick>
 80014ae:	1e03      	subs	r3, r0, #0
 80014b0:	d051      	beq.n	8001556 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e22c      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d030      	beq.n	8001520 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014be:	4b5b      	ldr	r3, [pc, #364]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a5e      	ldr	r2, [pc, #376]	; (800163c <HAL_RCC_OscConfig+0x33c>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	0019      	movs	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	691a      	ldr	r2, [r3, #16]
 80014cc:	4b57      	ldr	r3, [pc, #348]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80014ce:	430a      	orrs	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80014d2:	4b56      	ldr	r3, [pc, #344]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4b55      	ldr	r3, [pc, #340]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80014d8:	2180      	movs	r1, #128	; 0x80
 80014da:	0049      	lsls	r1, r1, #1
 80014dc:	430a      	orrs	r2, r1
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fc00 	bl	8000ce4 <HAL_GetTick>
 80014e4:	0003      	movs	r3, r0
 80014e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ea:	f7ff fbfb 	bl	8000ce4 <HAL_GetTick>
 80014ee:	0002      	movs	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e209      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014fc:	4b4b      	ldr	r3, [pc, #300]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4013      	ands	r3, r2
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001508:	4b48      	ldr	r3, [pc, #288]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	4a4a      	ldr	r2, [pc, #296]	; (8001638 <HAL_RCC_OscConfig+0x338>)
 800150e:	4013      	ands	r3, r2
 8001510:	0019      	movs	r1, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	021a      	lsls	r2, r3, #8
 8001518:	4b44      	ldr	r3, [pc, #272]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800151a:	430a      	orrs	r2, r1
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	e01b      	b.n	8001558 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001520:	4b42      	ldr	r3, [pc, #264]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b41      	ldr	r3, [pc, #260]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001526:	4949      	ldr	r1, [pc, #292]	; (800164c <HAL_RCC_OscConfig+0x34c>)
 8001528:	400a      	ands	r2, r1
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152c:	f7ff fbda 	bl	8000ce4 <HAL_GetTick>
 8001530:	0003      	movs	r3, r0
 8001532:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001536:	f7ff fbd5 	bl	8000ce4 <HAL_GetTick>
 800153a:	0002      	movs	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e1e3      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001548:	4b38      	ldr	r3, [pc, #224]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4013      	ands	r3, r2
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x236>
 8001554:	e000      	b.n	8001558 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001556:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2208      	movs	r2, #8
 800155e:	4013      	ands	r3, r2
 8001560:	d047      	beq.n	80015f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001562:	4b32      	ldr	r3, [pc, #200]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2238      	movs	r2, #56	; 0x38
 8001568:	4013      	ands	r3, r2
 800156a:	2b18      	cmp	r3, #24
 800156c:	d10a      	bne.n	8001584 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800156e:	4b2f      	ldr	r3, [pc, #188]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001572:	2202      	movs	r2, #2
 8001574:	4013      	ands	r3, r2
 8001576:	d03c      	beq.n	80015f2 <HAL_RCC_OscConfig+0x2f2>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d138      	bne.n	80015f2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e1c5      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d019      	beq.n	80015c0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800158c:	4b27      	ldr	r3, [pc, #156]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 800158e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001590:	4b26      	ldr	r3, [pc, #152]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001592:	2101      	movs	r1, #1
 8001594:	430a      	orrs	r2, r1
 8001596:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff fba4 	bl	8000ce4 <HAL_GetTick>
 800159c:	0003      	movs	r3, r0
 800159e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a2:	f7ff fb9f 	bl	8000ce4 <HAL_GetTick>
 80015a6:	0002      	movs	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e1ad      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	2202      	movs	r2, #2
 80015ba:	4013      	ands	r3, r2
 80015bc:	d0f1      	beq.n	80015a2 <HAL_RCC_OscConfig+0x2a2>
 80015be:	e018      	b.n	80015f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80015c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80015c6:	2101      	movs	r1, #1
 80015c8:	438a      	bics	r2, r1
 80015ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff fb8a 	bl	8000ce4 <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d6:	f7ff fb85 	bl	8000ce4 <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e193      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015e8:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 80015ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ec:	2202      	movs	r2, #2
 80015ee:	4013      	ands	r3, r2
 80015f0:	d1f1      	bne.n	80015d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2204      	movs	r2, #4
 80015f8:	4013      	ands	r3, r2
 80015fa:	d100      	bne.n	80015fe <HAL_RCC_OscConfig+0x2fe>
 80015fc:	e0c6      	b.n	800178c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015fe:	231f      	movs	r3, #31
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2238      	movs	r2, #56	; 0x38
 800160c:	4013      	ands	r3, r2
 800160e:	2b20      	cmp	r3, #32
 8001610:	d11e      	bne.n	8001650 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_RCC_OscConfig+0x32c>)
 8001614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001616:	2202      	movs	r2, #2
 8001618:	4013      	ands	r3, r2
 800161a:	d100      	bne.n	800161e <HAL_RCC_OscConfig+0x31e>
 800161c:	e0b6      	b.n	800178c <HAL_RCC_OscConfig+0x48c>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d000      	beq.n	8001628 <HAL_RCC_OscConfig+0x328>
 8001626:	e0b1      	b.n	800178c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e171      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
 800162c:	40021000 	.word	0x40021000
 8001630:	fffeffff 	.word	0xfffeffff
 8001634:	fffbffff 	.word	0xfffbffff
 8001638:	ffff80ff 	.word	0xffff80ff
 800163c:	ffffc7ff 	.word	0xffffc7ff
 8001640:	00f42400 	.word	0x00f42400
 8001644:	20000000 	.word	0x20000000
 8001648:	20000004 	.word	0x20000004
 800164c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001650:	4bb1      	ldr	r3, [pc, #708]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 8001652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	055b      	lsls	r3, r3, #21
 8001658:	4013      	ands	r3, r2
 800165a:	d101      	bne.n	8001660 <HAL_RCC_OscConfig+0x360>
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <HAL_RCC_OscConfig+0x362>
 8001660:	2300      	movs	r3, #0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d011      	beq.n	800168a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	4bac      	ldr	r3, [pc, #688]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 8001668:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800166a:	4bab      	ldr	r3, [pc, #684]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 800166c:	2180      	movs	r1, #128	; 0x80
 800166e:	0549      	lsls	r1, r1, #21
 8001670:	430a      	orrs	r2, r1
 8001672:	63da      	str	r2, [r3, #60]	; 0x3c
 8001674:	4ba8      	ldr	r3, [pc, #672]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 8001676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	055b      	lsls	r3, r3, #21
 800167c:	4013      	ands	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001682:	231f      	movs	r3, #31
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168a:	4ba4      	ldr	r3, [pc, #656]	; (800191c <HAL_RCC_OscConfig+0x61c>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4013      	ands	r3, r2
 8001694:	d11a      	bne.n	80016cc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001696:	4ba1      	ldr	r3, [pc, #644]	; (800191c <HAL_RCC_OscConfig+0x61c>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4ba0      	ldr	r3, [pc, #640]	; (800191c <HAL_RCC_OscConfig+0x61c>)
 800169c:	2180      	movs	r1, #128	; 0x80
 800169e:	0049      	lsls	r1, r1, #1
 80016a0:	430a      	orrs	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fb1e 	bl	8000ce4 <HAL_GetTick>
 80016a8:	0003      	movs	r3, r0
 80016aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ae:	f7ff fb19 	bl	8000ce4 <HAL_GetTick>
 80016b2:	0002      	movs	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e127      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c0:	4b96      	ldr	r3, [pc, #600]	; (800191c <HAL_RCC_OscConfig+0x61c>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4013      	ands	r3, r2
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d106      	bne.n	80016e2 <HAL_RCC_OscConfig+0x3e2>
 80016d4:	4b90      	ldr	r3, [pc, #576]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 80016d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016d8:	4b8f      	ldr	r3, [pc, #572]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 80016da:	2101      	movs	r1, #1
 80016dc:	430a      	orrs	r2, r1
 80016de:	65da      	str	r2, [r3, #92]	; 0x5c
 80016e0:	e01c      	b.n	800171c <HAL_RCC_OscConfig+0x41c>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b05      	cmp	r3, #5
 80016e8:	d10c      	bne.n	8001704 <HAL_RCC_OscConfig+0x404>
 80016ea:	4b8b      	ldr	r3, [pc, #556]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 80016ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016ee:	4b8a      	ldr	r3, [pc, #552]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 80016f0:	2104      	movs	r1, #4
 80016f2:	430a      	orrs	r2, r1
 80016f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80016f6:	4b88      	ldr	r3, [pc, #544]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 80016f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016fa:	4b87      	ldr	r3, [pc, #540]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 80016fc:	2101      	movs	r1, #1
 80016fe:	430a      	orrs	r2, r1
 8001700:	65da      	str	r2, [r3, #92]	; 0x5c
 8001702:	e00b      	b.n	800171c <HAL_RCC_OscConfig+0x41c>
 8001704:	4b84      	ldr	r3, [pc, #528]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 8001706:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001708:	4b83      	ldr	r3, [pc, #524]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 800170a:	2101      	movs	r1, #1
 800170c:	438a      	bics	r2, r1
 800170e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001710:	4b81      	ldr	r3, [pc, #516]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 8001712:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001714:	4b80      	ldr	r3, [pc, #512]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 8001716:	2104      	movs	r1, #4
 8001718:	438a      	bics	r2, r1
 800171a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d014      	beq.n	800174e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001724:	f7ff fade 	bl	8000ce4 <HAL_GetTick>
 8001728:	0003      	movs	r3, r0
 800172a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800172c:	e009      	b.n	8001742 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172e:	f7ff fad9 	bl	8000ce4 <HAL_GetTick>
 8001732:	0002      	movs	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	4a79      	ldr	r2, [pc, #484]	; (8001920 <HAL_RCC_OscConfig+0x620>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e0e6      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001742:	4b75      	ldr	r3, [pc, #468]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 8001744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001746:	2202      	movs	r2, #2
 8001748:	4013      	ands	r3, r2
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x42e>
 800174c:	e013      	b.n	8001776 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff fac9 	bl	8000ce4 <HAL_GetTick>
 8001752:	0003      	movs	r3, r0
 8001754:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001756:	e009      	b.n	800176c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001758:	f7ff fac4 	bl	8000ce4 <HAL_GetTick>
 800175c:	0002      	movs	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	4a6f      	ldr	r2, [pc, #444]	; (8001920 <HAL_RCC_OscConfig+0x620>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e0d1      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800176c:	4b6a      	ldr	r3, [pc, #424]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 800176e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001770:	2202      	movs	r2, #2
 8001772:	4013      	ands	r3, r2
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001776:	231f      	movs	r3, #31
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d105      	bne.n	800178c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001780:	4b65      	ldr	r3, [pc, #404]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 8001782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001784:	4b64      	ldr	r3, [pc, #400]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 8001786:	4967      	ldr	r1, [pc, #412]	; (8001924 <HAL_RCC_OscConfig+0x624>)
 8001788:	400a      	ands	r2, r1
 800178a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d100      	bne.n	8001796 <HAL_RCC_OscConfig+0x496>
 8001794:	e0bb      	b.n	800190e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001796:	4b60      	ldr	r3, [pc, #384]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2238      	movs	r2, #56	; 0x38
 800179c:	4013      	ands	r3, r2
 800179e:	2b10      	cmp	r3, #16
 80017a0:	d100      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4a4>
 80017a2:	e07b      	b.n	800189c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d156      	bne.n	800185a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ac:	4b5a      	ldr	r3, [pc, #360]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b59      	ldr	r3, [pc, #356]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 80017b2:	495d      	ldr	r1, [pc, #372]	; (8001928 <HAL_RCC_OscConfig+0x628>)
 80017b4:	400a      	ands	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff fa94 	bl	8000ce4 <HAL_GetTick>
 80017bc:	0003      	movs	r3, r0
 80017be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c2:	f7ff fa8f 	bl	8000ce4 <HAL_GetTick>
 80017c6:	0002      	movs	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e09d      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d4:	4b50      	ldr	r3, [pc, #320]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	049b      	lsls	r3, r3, #18
 80017dc:	4013      	ands	r3, r2
 80017de:	d1f0      	bne.n	80017c2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e0:	4b4d      	ldr	r3, [pc, #308]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	4a51      	ldr	r2, [pc, #324]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	0019      	movs	r1, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1a      	ldr	r2, [r3, #32]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180c:	431a      	orrs	r2, r3
 800180e:	4b42      	ldr	r3, [pc, #264]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 8001810:	430a      	orrs	r2, r1
 8001812:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001814:	4b40      	ldr	r3, [pc, #256]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b3f      	ldr	r3, [pc, #252]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 800181a:	2180      	movs	r1, #128	; 0x80
 800181c:	0449      	lsls	r1, r1, #17
 800181e:	430a      	orrs	r2, r1
 8001820:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001822:	4b3d      	ldr	r3, [pc, #244]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	4b3c      	ldr	r3, [pc, #240]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 8001828:	2180      	movs	r1, #128	; 0x80
 800182a:	0549      	lsls	r1, r1, #21
 800182c:	430a      	orrs	r2, r1
 800182e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff fa58 	bl	8000ce4 <HAL_GetTick>
 8001834:	0003      	movs	r3, r0
 8001836:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183a:	f7ff fa53 	bl	8000ce4 <HAL_GetTick>
 800183e:	0002      	movs	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e061      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184c:	4b32      	ldr	r3, [pc, #200]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	049b      	lsls	r3, r3, #18
 8001854:	4013      	ands	r3, r2
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x53a>
 8001858:	e059      	b.n	800190e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185a:	4b2f      	ldr	r3, [pc, #188]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 8001860:	4931      	ldr	r1, [pc, #196]	; (8001928 <HAL_RCC_OscConfig+0x628>)
 8001862:	400a      	ands	r2, r1
 8001864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001866:	f7ff fa3d 	bl	8000ce4 <HAL_GetTick>
 800186a:	0003      	movs	r3, r0
 800186c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff fa38 	bl	8000ce4 <HAL_GetTick>
 8001874:	0002      	movs	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e046      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	049b      	lsls	r3, r3, #18
 800188a:	4013      	ands	r3, r2
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800188e:	4b22      	ldr	r3, [pc, #136]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	4b21      	ldr	r3, [pc, #132]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 8001894:	4926      	ldr	r1, [pc, #152]	; (8001930 <HAL_RCC_OscConfig+0x630>)
 8001896:	400a      	ands	r2, r1
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	e038      	b.n	800190e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e033      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_RCC_OscConfig+0x618>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	2203      	movs	r2, #3
 80018b2:	401a      	ands	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d126      	bne.n	800190a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	2270      	movs	r2, #112	; 0x70
 80018c0:	401a      	ands	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d11f      	bne.n	800190a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	23fe      	movs	r3, #254	; 0xfe
 80018ce:	01db      	lsls	r3, r3, #7
 80018d0:	401a      	ands	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018d8:	429a      	cmp	r2, r3
 80018da:	d116      	bne.n	800190a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	23f8      	movs	r3, #248	; 0xf8
 80018e0:	039b      	lsls	r3, r3, #14
 80018e2:	401a      	ands	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d10e      	bne.n	800190a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	23e0      	movs	r3, #224	; 0xe0
 80018f0:	051b      	lsls	r3, r3, #20
 80018f2:	401a      	ands	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	0f5b      	lsrs	r3, r3, #29
 8001900:	075a      	lsls	r2, r3, #29
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001906:	429a      	cmp	r2, r3
 8001908:	d001      	beq.n	800190e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	b008      	add	sp, #32
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021000 	.word	0x40021000
 800191c:	40007000 	.word	0x40007000
 8001920:	00001388 	.word	0x00001388
 8001924:	efffffff 	.word	0xefffffff
 8001928:	feffffff 	.word	0xfeffffff
 800192c:	11c1808c 	.word	0x11c1808c
 8001930:	eefefffc 	.word	0xeefefffc

08001934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0e9      	b.n	8001b1c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001948:	4b76      	ldr	r3, [pc, #472]	; (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2207      	movs	r2, #7
 800194e:	4013      	ands	r3, r2
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d91e      	bls.n	8001994 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b73      	ldr	r3, [pc, #460]	; (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2207      	movs	r2, #7
 800195c:	4393      	bics	r3, r2
 800195e:	0019      	movs	r1, r3
 8001960:	4b70      	ldr	r3, [pc, #448]	; (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001968:	f7ff f9bc 	bl	8000ce4 <HAL_GetTick>
 800196c:	0003      	movs	r3, r0
 800196e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001970:	e009      	b.n	8001986 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001972:	f7ff f9b7 	bl	8000ce4 <HAL_GetTick>
 8001976:	0002      	movs	r2, r0
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	4a6a      	ldr	r2, [pc, #424]	; (8001b28 <HAL_RCC_ClockConfig+0x1f4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e0ca      	b.n	8001b1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001986:	4b67      	ldr	r3, [pc, #412]	; (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2207      	movs	r2, #7
 800198c:	4013      	ands	r3, r2
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d1ee      	bne.n	8001972 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2202      	movs	r2, #2
 800199a:	4013      	ands	r3, r2
 800199c:	d015      	beq.n	80019ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2204      	movs	r2, #4
 80019a4:	4013      	ands	r3, r2
 80019a6:	d006      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019a8:	4b60      	ldr	r3, [pc, #384]	; (8001b2c <HAL_RCC_ClockConfig+0x1f8>)
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	4b5f      	ldr	r3, [pc, #380]	; (8001b2c <HAL_RCC_ClockConfig+0x1f8>)
 80019ae:	21e0      	movs	r1, #224	; 0xe0
 80019b0:	01c9      	lsls	r1, r1, #7
 80019b2:	430a      	orrs	r2, r1
 80019b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b6:	4b5d      	ldr	r3, [pc, #372]	; (8001b2c <HAL_RCC_ClockConfig+0x1f8>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	4a5d      	ldr	r2, [pc, #372]	; (8001b30 <HAL_RCC_ClockConfig+0x1fc>)
 80019bc:	4013      	ands	r3, r2
 80019be:	0019      	movs	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	4b59      	ldr	r3, [pc, #356]	; (8001b2c <HAL_RCC_ClockConfig+0x1f8>)
 80019c6:	430a      	orrs	r2, r1
 80019c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2201      	movs	r2, #1
 80019d0:	4013      	ands	r3, r2
 80019d2:	d057      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d107      	bne.n	80019ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019dc:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <HAL_RCC_ClockConfig+0x1f8>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	029b      	lsls	r3, r3, #10
 80019e4:	4013      	ands	r3, r2
 80019e6:	d12b      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e097      	b.n	8001b1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d107      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f4:	4b4d      	ldr	r3, [pc, #308]	; (8001b2c <HAL_RCC_ClockConfig+0x1f8>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	049b      	lsls	r3, r3, #18
 80019fc:	4013      	ands	r3, r2
 80019fe:	d11f      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e08b      	b.n	8001b1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d107      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a0c:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <HAL_RCC_ClockConfig+0x1f8>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4013      	ands	r3, r2
 8001a16:	d113      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e07f      	b.n	8001b1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a24:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <HAL_RCC_ClockConfig+0x1f8>)
 8001a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a28:	2202      	movs	r2, #2
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d108      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e074      	b.n	8001b1c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a32:	4b3e      	ldr	r3, [pc, #248]	; (8001b2c <HAL_RCC_ClockConfig+0x1f8>)
 8001a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a36:	2202      	movs	r2, #2
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e06d      	b.n	8001b1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a40:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <HAL_RCC_ClockConfig+0x1f8>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2207      	movs	r2, #7
 8001a46:	4393      	bics	r3, r2
 8001a48:	0019      	movs	r1, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <HAL_RCC_ClockConfig+0x1f8>)
 8001a50:	430a      	orrs	r2, r1
 8001a52:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a54:	f7ff f946 	bl	8000ce4 <HAL_GetTick>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5c:	e009      	b.n	8001a72 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5e:	f7ff f941 	bl	8000ce4 <HAL_GetTick>
 8001a62:	0002      	movs	r2, r0
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	4a2f      	ldr	r2, [pc, #188]	; (8001b28 <HAL_RCC_ClockConfig+0x1f4>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e054      	b.n	8001b1c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a72:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <HAL_RCC_ClockConfig+0x1f8>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2238      	movs	r2, #56	; 0x38
 8001a78:	401a      	ands	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d1ec      	bne.n	8001a5e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a84:	4b27      	ldr	r3, [pc, #156]	; (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2207      	movs	r2, #7
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d21e      	bcs.n	8001ad0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2207      	movs	r2, #7
 8001a98:	4393      	bics	r3, r2
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001aa4:	f7ff f91e 	bl	8000ce4 <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aac:	e009      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aae:	f7ff f919 	bl	8000ce4 <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	4a1b      	ldr	r2, [pc, #108]	; (8001b28 <HAL_RCC_ClockConfig+0x1f4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e02c      	b.n	8001b1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2207      	movs	r2, #7
 8001ac8:	4013      	ands	r3, r2
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d1ee      	bne.n	8001aae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d009      	beq.n	8001aee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ada:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <HAL_RCC_ClockConfig+0x1f8>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	4a15      	ldr	r2, [pc, #84]	; (8001b34 <HAL_RCC_ClockConfig+0x200>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <HAL_RCC_ClockConfig+0x1f8>)
 8001aea:	430a      	orrs	r2, r1
 8001aec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001aee:	f000 f829 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8001af2:	0001      	movs	r1, r0
 8001af4:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <HAL_RCC_ClockConfig+0x1f8>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	220f      	movs	r2, #15
 8001afc:	401a      	ands	r2, r3
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_RCC_ClockConfig+0x204>)
 8001b00:	0092      	lsls	r2, r2, #2
 8001b02:	58d3      	ldr	r3, [r2, r3]
 8001b04:	221f      	movs	r2, #31
 8001b06:	4013      	ands	r3, r2
 8001b08:	000a      	movs	r2, r1
 8001b0a:	40da      	lsrs	r2, r3
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_RCC_ClockConfig+0x208>)
 8001b0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_RCC_ClockConfig+0x20c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	0018      	movs	r0, r3
 8001b16:	f7ff f889 	bl	8000c2c <HAL_InitTick>
 8001b1a:	0003      	movs	r3, r0
}
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b004      	add	sp, #16
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40022000 	.word	0x40022000
 8001b28:	00001388 	.word	0x00001388
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	fffff0ff 	.word	0xfffff0ff
 8001b34:	ffff8fff 	.word	0xffff8fff
 8001b38:	08003198 	.word	0x08003198
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	20000004 	.word	0x20000004

08001b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b4a:	4b3c      	ldr	r3, [pc, #240]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2238      	movs	r2, #56	; 0x38
 8001b50:	4013      	ands	r3, r2
 8001b52:	d10f      	bne.n	8001b74 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b54:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	0adb      	lsrs	r3, r3, #11
 8001b5a:	2207      	movs	r2, #7
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2201      	movs	r2, #1
 8001b60:	409a      	lsls	r2, r3
 8001b62:	0013      	movs	r3, r2
 8001b64:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b66:	6839      	ldr	r1, [r7, #0]
 8001b68:	4835      	ldr	r0, [pc, #212]	; (8001c40 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b6a:	f7fe facb 	bl	8000104 <__udivsi3>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	e05d      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b74:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2238      	movs	r2, #56	; 0x38
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d102      	bne.n	8001b86 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b80:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	e054      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b86:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2238      	movs	r2, #56	; 0x38
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b10      	cmp	r3, #16
 8001b90:	d138      	bne.n	8001c04 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b92:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2203      	movs	r2, #3
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b9c:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	2207      	movs	r2, #7
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d10d      	bne.n	8001bcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	4824      	ldr	r0, [pc, #144]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x100>)
 8001bb4:	f7fe faa6 	bl	8000104 <__udivsi3>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	0019      	movs	r1, r3
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	227f      	movs	r2, #127	; 0x7f
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	434b      	muls	r3, r1
 8001bc8:	617b      	str	r3, [r7, #20]
        break;
 8001bca:	e00d      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001bcc:	68b9      	ldr	r1, [r7, #8]
 8001bce:	481c      	ldr	r0, [pc, #112]	; (8001c40 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bd0:	f7fe fa98 	bl	8000104 <__udivsi3>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	227f      	movs	r2, #127	; 0x7f
 8001be0:	4013      	ands	r3, r2
 8001be2:	434b      	muls	r3, r1
 8001be4:	617b      	str	r3, [r7, #20]
        break;
 8001be6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	0f5b      	lsrs	r3, r3, #29
 8001bee:	2207      	movs	r2, #7
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	6978      	ldr	r0, [r7, #20]
 8001bfa:	f7fe fa83 	bl	8000104 <__udivsi3>
 8001bfe:	0003      	movs	r3, r0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	e015      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c04:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2238      	movs	r2, #56	; 0x38
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b20      	cmp	r3, #32
 8001c0e:	d103      	bne.n	8001c18 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	e00b      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2238      	movs	r2, #56	; 0x38
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b18      	cmp	r3, #24
 8001c22:	d103      	bne.n	8001c2c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c24:	23fa      	movs	r3, #250	; 0xfa
 8001c26:	01db      	lsls	r3, r3, #7
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	e001      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c30:	693b      	ldr	r3, [r7, #16]
}
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b006      	add	sp, #24
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	00f42400 	.word	0x00f42400
 8001c44:	007a1200 	.word	0x007a1200

08001c48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c4c:	4b02      	ldr	r3, [pc, #8]	; (8001c58 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	0018      	movs	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	20000000 	.word	0x20000000

08001c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c5c:	b5b0      	push	{r4, r5, r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001c60:	f7ff fff2 	bl	8001c48 <HAL_RCC_GetHCLKFreq>
 8001c64:	0004      	movs	r4, r0
 8001c66:	f7ff fb3f 	bl	80012e8 <LL_RCC_GetAPB1Prescaler>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	0b1a      	lsrs	r2, r3, #12
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c70:	0092      	lsls	r2, r2, #2
 8001c72:	58d3      	ldr	r3, [r2, r3]
 8001c74:	221f      	movs	r2, #31
 8001c76:	4013      	ands	r3, r2
 8001c78:	40dc      	lsrs	r4, r3
 8001c7a:	0023      	movs	r3, r4
}
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bdb0      	pop	{r4, r5, r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	080031d8 	.word	0x080031d8

08001c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001c90:	2313      	movs	r3, #19
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c98:	2312      	movs	r3, #18
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	029b      	lsls	r3, r3, #10
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d100      	bne.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001cac:	e0a3      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cae:	2011      	movs	r0, #17
 8001cb0:	183b      	adds	r3, r7, r0
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb6:	4ba5      	ldr	r3, [pc, #660]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	055b      	lsls	r3, r3, #21
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d110      	bne.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	4ba2      	ldr	r3, [pc, #648]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cc6:	4ba1      	ldr	r3, [pc, #644]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cc8:	2180      	movs	r1, #128	; 0x80
 8001cca:	0549      	lsls	r1, r1, #21
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cd0:	4b9e      	ldr	r3, [pc, #632]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	055b      	lsls	r3, r3, #21
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cde:	183b      	adds	r3, r7, r0
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ce4:	4b9a      	ldr	r3, [pc, #616]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b99      	ldr	r3, [pc, #612]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001cea:	2180      	movs	r1, #128	; 0x80
 8001cec:	0049      	lsls	r1, r1, #1
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cf2:	f7fe fff7 	bl	8000ce4 <HAL_GetTick>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfc:	f7fe fff2 	bl	8000ce4 <HAL_GetTick>
 8001d00:	0002      	movs	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d904      	bls.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d0a:	2313      	movs	r3, #19
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	2203      	movs	r2, #3
 8001d10:	701a      	strb	r2, [r3, #0]
        break;
 8001d12:	e005      	b.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d14:	4b8e      	ldr	r3, [pc, #568]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d0ed      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001d20:	2313      	movs	r3, #19
 8001d22:	18fb      	adds	r3, r7, r3
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d154      	bne.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d2a:	4b88      	ldr	r3, [pc, #544]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d2e:	23c0      	movs	r3, #192	; 0xc0
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4013      	ands	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d019      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d014      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d46:	4b81      	ldr	r3, [pc, #516]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4a:	4a82      	ldr	r2, [pc, #520]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d50:	4b7e      	ldr	r3, [pc, #504]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d54:	4b7d      	ldr	r3, [pc, #500]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d56:	2180      	movs	r1, #128	; 0x80
 8001d58:	0249      	lsls	r1, r1, #9
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d5e:	4b7b      	ldr	r3, [pc, #492]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d62:	4b7a      	ldr	r3, [pc, #488]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d64:	497c      	ldr	r1, [pc, #496]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001d66:	400a      	ands	r2, r1
 8001d68:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d6a:	4b78      	ldr	r3, [pc, #480]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2201      	movs	r2, #1
 8001d74:	4013      	ands	r3, r2
 8001d76:	d016      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7fe ffb4 	bl	8000ce4 <HAL_GetTick>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d80:	e00c      	b.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d82:	f7fe ffaf 	bl	8000ce4 <HAL_GetTick>
 8001d86:	0002      	movs	r2, r0
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	4a73      	ldr	r2, [pc, #460]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d904      	bls.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001d92:	2313      	movs	r3, #19
 8001d94:	18fb      	adds	r3, r7, r3
 8001d96:	2203      	movs	r2, #3
 8001d98:	701a      	strb	r2, [r3, #0]
            break;
 8001d9a:	e004      	b.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d9c:	4b6b      	ldr	r3, [pc, #428]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da0:	2202      	movs	r2, #2
 8001da2:	4013      	ands	r3, r2
 8001da4:	d0ed      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001da6:	2313      	movs	r3, #19
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10a      	bne.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001db0:	4b66      	ldr	r3, [pc, #408]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	4a67      	ldr	r2, [pc, #412]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	0019      	movs	r1, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dbe:	4b63      	ldr	r3, [pc, #396]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dc4:	e00c      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001dc6:	2312      	movs	r3, #18
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	2213      	movs	r2, #19
 8001dcc:	18ba      	adds	r2, r7, r2
 8001dce:	7812      	ldrb	r2, [r2, #0]
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	e005      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dd4:	2312      	movs	r3, #18
 8001dd6:	18fb      	adds	r3, r7, r3
 8001dd8:	2213      	movs	r2, #19
 8001dda:	18ba      	adds	r2, r7, r2
 8001ddc:	7812      	ldrb	r2, [r2, #0]
 8001dde:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001de0:	2311      	movs	r3, #17
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d105      	bne.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dea:	4b58      	ldr	r3, [pc, #352]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dee:	4b57      	ldr	r3, [pc, #348]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001df0:	495b      	ldr	r1, [pc, #364]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001df2:	400a      	ands	r2, r1
 8001df4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d009      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e00:	4b52      	ldr	r3, [pc, #328]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e04:	2203      	movs	r2, #3
 8001e06:	4393      	bics	r3, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	4b4f      	ldr	r3, [pc, #316]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e10:	430a      	orrs	r2, r1
 8001e12:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2210      	movs	r2, #16
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d009      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e1e:	4b4b      	ldr	r3, [pc, #300]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e22:	4a50      	ldr	r2, [pc, #320]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	0019      	movs	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d009      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e3e:	4b43      	ldr	r3, [pc, #268]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e42:	4a49      	ldr	r2, [pc, #292]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	0019      	movs	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	695a      	ldr	r2, [r3, #20]
 8001e4c:	4b3f      	ldr	r3, [pc, #252]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d009      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e5e:	4b3b      	ldr	r3, [pc, #236]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e62:	4a42      	ldr	r2, [pc, #264]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	0019      	movs	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699a      	ldr	r2, [r3, #24]
 8001e6c:	4b37      	ldr	r3, [pc, #220]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2220      	movs	r2, #32
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d009      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e7c:	4b33      	ldr	r3, [pc, #204]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e80:	4a3b      	ldr	r2, [pc, #236]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	0019      	movs	r1, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	01db      	lsls	r3, r3, #7
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d015      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e9c:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	0899      	lsrs	r1, r3, #2
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69da      	ldr	r2, [r3, #28]
 8001ea8:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69da      	ldr	r2, [r3, #28]
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	05db      	lsls	r3, r3, #23
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d106      	bne.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ec0:	2180      	movs	r1, #128	; 0x80
 8001ec2:	0249      	lsls	r1, r1, #9
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	039b      	lsls	r3, r3, #14
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d016      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed8:	4a26      	ldr	r2, [pc, #152]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1a      	ldr	r2, [r3, #32]
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1a      	ldr	r2, [r3, #32]
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	03db      	lsls	r3, r3, #15
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d106      	bne.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001ef4:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001efa:	2180      	movs	r1, #128	; 0x80
 8001efc:	0449      	lsls	r1, r1, #17
 8001efe:	430a      	orrs	r2, r1
 8001f00:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d016      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	4a19      	ldr	r2, [pc, #100]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	0019      	movs	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691a      	ldr	r2, [r3, #16]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	01db      	lsls	r3, r3, #7
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d106      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f34:	2180      	movs	r1, #128	; 0x80
 8001f36:	0249      	lsls	r1, r1, #9
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001f3c:	2312      	movs	r3, #18
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	781b      	ldrb	r3, [r3, #0]
}
 8001f42:	0018      	movs	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b006      	add	sp, #24
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40007000 	.word	0x40007000
 8001f54:	fffffcff 	.word	0xfffffcff
 8001f58:	fffeffff 	.word	0xfffeffff
 8001f5c:	00001388 	.word	0x00001388
 8001f60:	efffffff 	.word	0xefffffff
 8001f64:	fffff3ff 	.word	0xfffff3ff
 8001f68:	fff3ffff 	.word	0xfff3ffff
 8001f6c:	ffcfffff 	.word	0xffcfffff
 8001f70:	ffffcfff 	.word	0xffffcfff
 8001f74:	ffbfffff 	.word	0xffbfffff
 8001f78:	ffff3fff 	.word	0xffff3fff

08001f7c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001f7c:	b5b0      	push	{r4, r5, r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f84:	230f      	movs	r3, #15
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d100      	bne.n	8001f94 <HAL_RTC_Init+0x18>
 8001f92:	e08c      	b.n	80020ae <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2229      	movs	r2, #41	; 0x29
 8001f98:	5c9b      	ldrb	r3, [r3, r2]
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10b      	bne.n	8001fb8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2228      	movs	r2, #40	; 0x28
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2288      	movs	r2, #136	; 0x88
 8001fac:	0212      	lsls	r2, r2, #8
 8001fae:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f7fe fd2e 	bl	8000a14 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2229      	movs	r2, #41	; 0x29
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2210      	movs	r2, #16
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b10      	cmp	r3, #16
 8001fcc:	d062      	beq.n	8002094 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	22ca      	movs	r2, #202	; 0xca
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2253      	movs	r2, #83	; 0x53
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8001fde:	250f      	movs	r5, #15
 8001fe0:	197c      	adds	r4, r7, r5
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f000 fb4a 	bl	800267e <RTC_EnterInitMode>
 8001fea:	0003      	movs	r3, r0
 8001fec:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8001fee:	0028      	movs	r0, r5
 8001ff0:	183b      	adds	r3, r7, r0
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d12c      	bne.n	8002052 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699a      	ldr	r2, [r3, #24]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	492e      	ldr	r1, [pc, #184]	; (80020bc <HAL_RTC_Init+0x140>)
 8002004:	400a      	ands	r2, r1
 8002006:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6999      	ldr	r1, [r3, #24]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6912      	ldr	r2, [r2, #16]
 800202e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6919      	ldr	r1, [r3, #16]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	041a      	lsls	r2, r3, #16
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002044:	183c      	adds	r4, r7, r0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	0018      	movs	r0, r3
 800204a:	f000 fb5b 	bl	8002704 <RTC_ExitInitMode>
 800204e:	0003      	movs	r3, r0
 8002050:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002052:	230f      	movs	r3, #15
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d116      	bne.n	800208a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699a      	ldr	r2, [r3, #24]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	00d2      	lsls	r2, r2, #3
 8002068:	08d2      	lsrs	r2, r2, #3
 800206a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6999      	ldr	r1, [r3, #24]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	22ff      	movs	r2, #255	; 0xff
 8002090:	625a      	str	r2, [r3, #36]	; 0x24
 8002092:	e003      	b.n	800209c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002094:	230f      	movs	r3, #15
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800209c:	230f      	movs	r3, #15
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d103      	bne.n	80020ae <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2229      	movs	r2, #41	; 0x29
 80020aa:	2101      	movs	r1, #1
 80020ac:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80020ae:	230f      	movs	r3, #15
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	781b      	ldrb	r3, [r3, #0]
}
 80020b4:	0018      	movs	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b004      	add	sp, #16
 80020ba:	bdb0      	pop	{r4, r5, r7, pc}
 80020bc:	fb8fffbf 	.word	0xfb8fffbf

080020c0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80020c0:	b5b0      	push	{r4, r5, r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2228      	movs	r2, #40	; 0x28
 80020d0:	5c9b      	ldrb	r3, [r3, r2]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_RTC_SetTime+0x1a>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e092      	b.n	8002200 <HAL_RTC_SetTime+0x140>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2228      	movs	r2, #40	; 0x28
 80020de:	2101      	movs	r1, #1
 80020e0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2229      	movs	r2, #41	; 0x29
 80020e6:	2102      	movs	r1, #2
 80020e8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	22ca      	movs	r2, #202	; 0xca
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2253      	movs	r2, #83	; 0x53
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80020fa:	2513      	movs	r5, #19
 80020fc:	197c      	adds	r4, r7, r5
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	0018      	movs	r0, r3
 8002102:	f000 fabc 	bl	800267e <RTC_EnterInitMode>
 8002106:	0003      	movs	r3, r0
 8002108:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800210a:	197b      	adds	r3, r7, r5
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d162      	bne.n	80021d8 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d125      	bne.n	8002164 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	2240      	movs	r2, #64	; 0x40
 8002120:	4013      	ands	r3, r2
 8002122:	d102      	bne.n	800212a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2200      	movs	r2, #0
 8002128:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	0018      	movs	r0, r3
 8002130:	f000 fb2c 	bl	800278c <RTC_ByteToBcd2>
 8002134:	0003      	movs	r3, r0
 8002136:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	785b      	ldrb	r3, [r3, #1]
 800213c:	0018      	movs	r0, r3
 800213e:	f000 fb25 	bl	800278c <RTC_ByteToBcd2>
 8002142:	0003      	movs	r3, r0
 8002144:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002146:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	789b      	ldrb	r3, [r3, #2]
 800214c:	0018      	movs	r0, r3
 800214e:	f000 fb1d 	bl	800278c <RTC_ByteToBcd2>
 8002152:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002154:	0022      	movs	r2, r4
 8002156:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	78db      	ldrb	r3, [r3, #3]
 800215c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800215e:	4313      	orrs	r3, r2
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	e017      	b.n	8002194 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2240      	movs	r2, #64	; 0x40
 800216c:	4013      	ands	r3, r2
 800216e:	d102      	bne.n	8002176 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2200      	movs	r2, #0
 8002174:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	785b      	ldrb	r3, [r3, #1]
 8002180:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002182:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002188:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	78db      	ldrb	r3, [r3, #3]
 800218e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002190:	4313      	orrs	r3, r2
 8002192:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	491b      	ldr	r1, [pc, #108]	; (8002208 <HAL_RTC_SetTime+0x148>)
 800219c:	400a      	ands	r2, r1
 800219e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4918      	ldr	r1, [pc, #96]	; (800220c <HAL_RTC_SetTime+0x14c>)
 80021ac:	400a      	ands	r2, r1
 80021ae:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6999      	ldr	r1, [r3, #24]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	431a      	orrs	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80021c8:	2313      	movs	r3, #19
 80021ca:	18fc      	adds	r4, r7, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	0018      	movs	r0, r3
 80021d0:	f000 fa98 	bl	8002704 <RTC_ExitInitMode>
 80021d4:	0003      	movs	r3, r0
 80021d6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	22ff      	movs	r2, #255	; 0xff
 80021de:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80021e0:	2313      	movs	r3, #19
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d103      	bne.n	80021f2 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2229      	movs	r2, #41	; 0x29
 80021ee:	2101      	movs	r1, #1
 80021f0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2228      	movs	r2, #40	; 0x28
 80021f6:	2100      	movs	r1, #0
 80021f8:	5499      	strb	r1, [r3, r2]

  return status;
 80021fa:	2313      	movs	r3, #19
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	781b      	ldrb	r3, [r3, #0]
}
 8002200:	0018      	movs	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	b006      	add	sp, #24
 8002206:	bdb0      	pop	{r4, r5, r7, pc}
 8002208:	007f7f7f 	.word	0x007f7f7f
 800220c:	fffbffff 	.word	0xfffbffff

08002210 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002210:	b5b0      	push	{r4, r5, r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2228      	movs	r2, #40	; 0x28
 8002220:	5c9b      	ldrb	r3, [r3, r2]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_RTC_SetDate+0x1a>
 8002226:	2302      	movs	r3, #2
 8002228:	e07e      	b.n	8002328 <HAL_RTC_SetDate+0x118>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2228      	movs	r2, #40	; 0x28
 800222e:	2101      	movs	r1, #1
 8002230:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2229      	movs	r2, #41	; 0x29
 8002236:	2102      	movs	r1, #2
 8002238:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10e      	bne.n	800225e <HAL_RTC_SetDate+0x4e>
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	785b      	ldrb	r3, [r3, #1]
 8002244:	001a      	movs	r2, r3
 8002246:	2310      	movs	r3, #16
 8002248:	4013      	ands	r3, r2
 800224a:	d008      	beq.n	800225e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	785b      	ldrb	r3, [r3, #1]
 8002250:	2210      	movs	r2, #16
 8002252:	4393      	bics	r3, r2
 8002254:	b2db      	uxtb	r3, r3
 8002256:	330a      	adds	r3, #10
 8002258:	b2da      	uxtb	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d11c      	bne.n	800229e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	78db      	ldrb	r3, [r3, #3]
 8002268:	0018      	movs	r0, r3
 800226a:	f000 fa8f 	bl	800278c <RTC_ByteToBcd2>
 800226e:	0003      	movs	r3, r0
 8002270:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	785b      	ldrb	r3, [r3, #1]
 8002276:	0018      	movs	r0, r3
 8002278:	f000 fa88 	bl	800278c <RTC_ByteToBcd2>
 800227c:	0003      	movs	r3, r0
 800227e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002280:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	789b      	ldrb	r3, [r3, #2]
 8002286:	0018      	movs	r0, r3
 8002288:	f000 fa80 	bl	800278c <RTC_ByteToBcd2>
 800228c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800228e:	0022      	movs	r2, r4
 8002290:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	e00e      	b.n	80022bc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	78db      	ldrb	r3, [r3, #3]
 80022a2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	785b      	ldrb	r3, [r3, #1]
 80022a8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80022aa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80022b0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	22ca      	movs	r2, #202	; 0xca
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2253      	movs	r2, #83	; 0x53
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80022cc:	2513      	movs	r5, #19
 80022ce:	197c      	adds	r4, r7, r5
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	0018      	movs	r0, r3
 80022d4:	f000 f9d3 	bl	800267e <RTC_EnterInitMode>
 80022d8:	0003      	movs	r3, r0
 80022da:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80022dc:	0028      	movs	r0, r5
 80022de:	183b      	adds	r3, r7, r0
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10c      	bne.n	8002300 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4910      	ldr	r1, [pc, #64]	; (8002330 <HAL_RTC_SetDate+0x120>)
 80022ee:	400a      	ands	r2, r1
 80022f0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80022f2:	183c      	adds	r4, r7, r0
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	0018      	movs	r0, r3
 80022f8:	f000 fa04 	bl	8002704 <RTC_ExitInitMode>
 80022fc:	0003      	movs	r3, r0
 80022fe:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	22ff      	movs	r2, #255	; 0xff
 8002306:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002308:	2313      	movs	r3, #19
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d103      	bne.n	800231a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2229      	movs	r2, #41	; 0x29
 8002316:	2101      	movs	r1, #1
 8002318:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2228      	movs	r2, #40	; 0x28
 800231e:	2100      	movs	r1, #0
 8002320:	5499      	strb	r1, [r3, r2]

  return status;
 8002322:	2313      	movs	r3, #19
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	781b      	ldrb	r3, [r3, #0]
}
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	b006      	add	sp, #24
 800232e:	bdb0      	pop	{r4, r5, r7, pc}
 8002330:	00ffff3f 	.word	0x00ffff3f

08002334 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2228      	movs	r2, #40	; 0x28
 8002344:	5c9b      	ldrb	r3, [r3, r2]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_RTC_SetAlarm_IT+0x1a>
 800234a:	2302      	movs	r3, #2
 800234c:	e127      	b.n	800259e <HAL_RTC_SetAlarm_IT+0x26a>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2228      	movs	r2, #40	; 0x28
 8002352:	2101      	movs	r1, #1
 8002354:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2229      	movs	r2, #41	; 0x29
 800235a:	2102      	movs	r1, #2
 800235c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d136      	bne.n	80023d2 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2240      	movs	r2, #64	; 0x40
 800236c:	4013      	ands	r3, r2
 800236e:	d102      	bne.n	8002376 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2200      	movs	r2, #0
 8002374:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	0018      	movs	r0, r3
 800237c:	f000 fa06 	bl	800278c <RTC_ByteToBcd2>
 8002380:	0003      	movs	r3, r0
 8002382:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	785b      	ldrb	r3, [r3, #1]
 8002388:	0018      	movs	r0, r3
 800238a:	f000 f9ff 	bl	800278c <RTC_ByteToBcd2>
 800238e:	0003      	movs	r3, r0
 8002390:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002392:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	789b      	ldrb	r3, [r3, #2]
 8002398:	0018      	movs	r0, r3
 800239a:	f000 f9f7 	bl	800278c <RTC_ByteToBcd2>
 800239e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80023a0:	0022      	movs	r2, r4
 80023a2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	78db      	ldrb	r3, [r3, #3]
 80023a8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80023aa:	431a      	orrs	r2, r3
 80023ac:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2220      	movs	r2, #32
 80023b2:	5c9b      	ldrb	r3, [r3, r2]
 80023b4:	0018      	movs	r0, r3
 80023b6:	f000 f9e9 	bl	800278c <RTC_ByteToBcd2>
 80023ba:	0003      	movs	r3, r0
 80023bc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80023be:	0022      	movs	r2, r4
 80023c0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80023c6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	e022      	b.n	8002418 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	2240      	movs	r2, #64	; 0x40
 80023da:	4013      	ands	r3, r2
 80023dc:	d102      	bne.n	80023e4 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2200      	movs	r2, #0
 80023e2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	785b      	ldrb	r3, [r3, #1]
 80023ee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80023f0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80023f6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	78db      	ldrb	r3, [r3, #3]
 80023fc:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80023fe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2120      	movs	r1, #32
 8002404:	5c5b      	ldrb	r3, [r3, r1]
 8002406:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002408:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800240e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002414:	4313      	orrs	r3, r2
 8002416:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	22ca      	movs	r2, #202	; 0xca
 800242a:	625a      	str	r2, [r3, #36]	; 0x24
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2253      	movs	r2, #83	; 0x53
 8002432:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	429a      	cmp	r2, r3
 800243e:	d14c      	bne.n	80024da <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	699a      	ldr	r2, [r3, #24]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4957      	ldr	r1, [pc, #348]	; (80025a8 <HAL_RTC_SetAlarm_IT+0x274>)
 800244c:	400a      	ands	r2, r1
 800244e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2101      	movs	r1, #1
 800245c:	430a      	orrs	r2, r1
 800245e:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8002460:	f7fe fc40 	bl	8000ce4 <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002468:	e016      	b.n	8002498 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800246a:	f7fe fc3b 	bl	8000ce4 <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	1ad2      	subs	r2, r2, r3
 8002474:	23fa      	movs	r3, #250	; 0xfa
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	429a      	cmp	r2, r3
 800247a:	d90d      	bls.n	8002498 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	22ff      	movs	r2, #255	; 0xff
 8002482:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2229      	movs	r2, #41	; 0x29
 8002488:	2103      	movs	r1, #3
 800248a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2228      	movs	r2, #40	; 0x28
 8002490:	2100      	movs	r1, #0
 8002492:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e082      	b.n	800259e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2201      	movs	r2, #1
 80024a0:	4013      	ands	r3, r2
 80024a2:	d0e2      	beq.n	800246a <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	69fa      	ldr	r2, [r7, #28]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699a      	ldr	r2, [r3, #24]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2180      	movs	r1, #128	; 0x80
 80024c0:	0049      	lsls	r1, r1, #1
 80024c2:	430a      	orrs	r2, r1
 80024c4:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699a      	ldr	r2, [r3, #24]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2180      	movs	r1, #128	; 0x80
 80024d2:	0149      	lsls	r1, r1, #5
 80024d4:	430a      	orrs	r2, r1
 80024d6:	619a      	str	r2, [r3, #24]
 80024d8:	e04b      	b.n	8002572 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699a      	ldr	r2, [r3, #24]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4931      	ldr	r1, [pc, #196]	; (80025ac <HAL_RTC_SetAlarm_IT+0x278>)
 80024e6:	400a      	ands	r2, r1
 80024e8:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2102      	movs	r1, #2
 80024f6:	430a      	orrs	r2, r1
 80024f8:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80024fa:	f7fe fbf3 	bl	8000ce4 <HAL_GetTick>
 80024fe:	0003      	movs	r3, r0
 8002500:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002502:	e016      	b.n	8002532 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002504:	f7fe fbee 	bl	8000ce4 <HAL_GetTick>
 8002508:	0002      	movs	r2, r0
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	1ad2      	subs	r2, r2, r3
 800250e:	23fa      	movs	r3, #250	; 0xfa
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	429a      	cmp	r2, r3
 8002514:	d90d      	bls.n	8002532 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	22ff      	movs	r2, #255	; 0xff
 800251c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2229      	movs	r2, #41	; 0x29
 8002522:	2103      	movs	r1, #3
 8002524:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2228      	movs	r2, #40	; 0x28
 800252a:	2100      	movs	r1, #0
 800252c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e035      	b.n	800259e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2202      	movs	r2, #2
 800253a:	4013      	ands	r3, r2
 800253c:	d0e2      	beq.n	8002504 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69fa      	ldr	r2, [r7, #28]
 8002544:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699a      	ldr	r2, [r3, #24]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2180      	movs	r1, #128	; 0x80
 800255a:	0089      	lsls	r1, r1, #2
 800255c:	430a      	orrs	r2, r1
 800255e:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2180      	movs	r1, #128	; 0x80
 800256c:	0189      	lsls	r1, r1, #6
 800256e:	430a      	orrs	r2, r1
 8002570:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002572:	4a0f      	ldr	r2, [pc, #60]	; (80025b0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	58d3      	ldr	r3, [r2, r3]
 8002578:	490d      	ldr	r1, [pc, #52]	; (80025b0 <HAL_RTC_SetAlarm_IT+0x27c>)
 800257a:	2280      	movs	r2, #128	; 0x80
 800257c:	0312      	lsls	r2, r2, #12
 800257e:	4313      	orrs	r3, r2
 8002580:	2280      	movs	r2, #128	; 0x80
 8002582:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	22ff      	movs	r2, #255	; 0xff
 800258a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2229      	movs	r2, #41	; 0x29
 8002590:	2101      	movs	r1, #1
 8002592:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2228      	movs	r2, #40	; 0x28
 8002598:	2100      	movs	r1, #0
 800259a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	0018      	movs	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b009      	add	sp, #36	; 0x24
 80025a4:	bd90      	pop	{r4, r7, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	fffffeff 	.word	0xfffffeff
 80025ac:	fffffdff 	.word	0xfffffdff
 80025b0:	40021800 	.word	0x40021800

080025b4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	015b      	lsls	r3, r3, #5
 80025c6:	4013      	ands	r3, r2
 80025c8:	d011      	beq.n	80025ee <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d0:	2201      	movs	r2, #1
 80025d2:	4013      	ands	r3, r2
 80025d4:	d00b      	beq.n	80025ee <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2101      	movs	r1, #1
 80025e2:	430a      	orrs	r2, r1
 80025e4:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	0018      	movs	r0, r3
 80025ea:	f7fe f9e1 	bl	80009b0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699a      	ldr	r2, [r3, #24]
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	019b      	lsls	r3, r3, #6
 80025f8:	4013      	ands	r3, r2
 80025fa:	d011      	beq.n	8002620 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002602:	2202      	movs	r2, #2
 8002604:	4013      	ands	r3, r2
 8002606:	d00b      	beq.n	8002620 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2102      	movs	r1, #2
 8002614:	430a      	orrs	r2, r1
 8002616:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	0018      	movs	r0, r3
 800261c:	f000 f8de 	bl	80027dc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2229      	movs	r2, #41	; 0x29
 8002624:	2101      	movs	r1, #1
 8002626:	5499      	strb	r1, [r3, r2]
}
 8002628:	46c0      	nop			; (mov r8, r8)
 800262a:	46bd      	mov	sp, r7
 800262c:	b002      	add	sp, #8
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	21a0      	movs	r1, #160	; 0xa0
 8002644:	438a      	bics	r2, r1
 8002646:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002648:	f7fe fb4c 	bl	8000ce4 <HAL_GetTick>
 800264c:	0003      	movs	r3, r0
 800264e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002650:	e00a      	b.n	8002668 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002652:	f7fe fb47 	bl	8000ce4 <HAL_GetTick>
 8002656:	0002      	movs	r2, r0
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1ad2      	subs	r2, r2, r3
 800265c:	23fa      	movs	r3, #250	; 0xfa
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	429a      	cmp	r2, r3
 8002662:	d901      	bls.n	8002668 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e006      	b.n	8002676 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2220      	movs	r2, #32
 8002670:	4013      	ands	r3, r2
 8002672:	d0ee      	beq.n	8002652 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	0018      	movs	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	b004      	add	sp, #16
 800267c:	bd80      	pop	{r7, pc}

0800267e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002686:	230f      	movs	r3, #15
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2240      	movs	r2, #64	; 0x40
 8002696:	4013      	ands	r3, r2
 8002698:	d12c      	bne.n	80026f4 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2180      	movs	r1, #128	; 0x80
 80026a6:	430a      	orrs	r2, r1
 80026a8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80026aa:	f7fe fb1b 	bl	8000ce4 <HAL_GetTick>
 80026ae:	0003      	movs	r3, r0
 80026b0:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80026b2:	e014      	b.n	80026de <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80026b4:	f7fe fb16 	bl	8000ce4 <HAL_GetTick>
 80026b8:	0002      	movs	r2, r0
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	1ad2      	subs	r2, r2, r3
 80026be:	200f      	movs	r0, #15
 80026c0:	183b      	adds	r3, r7, r0
 80026c2:	1839      	adds	r1, r7, r0
 80026c4:	7809      	ldrb	r1, [r1, #0]
 80026c6:	7019      	strb	r1, [r3, #0]
 80026c8:	23fa      	movs	r3, #250	; 0xfa
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d906      	bls.n	80026de <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80026d0:	183b      	adds	r3, r7, r0
 80026d2:	2203      	movs	r2, #3
 80026d4:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2229      	movs	r2, #41	; 0x29
 80026da:	2103      	movs	r1, #3
 80026dc:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2240      	movs	r2, #64	; 0x40
 80026e6:	4013      	ands	r3, r2
 80026e8:	d104      	bne.n	80026f4 <RTC_EnterInitMode+0x76>
 80026ea:	230f      	movs	r3, #15
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d1df      	bne.n	80026b4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80026f4:	230f      	movs	r3, #15
 80026f6:	18fb      	adds	r3, r7, r3
 80026f8:	781b      	ldrb	r3, [r3, #0]
}
 80026fa:	0018      	movs	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b004      	add	sp, #16
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800270c:	240f      	movs	r4, #15
 800270e:	193b      	adds	r3, r7, r4
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002714:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <RTC_ExitInitMode+0x84>)
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <RTC_ExitInitMode+0x84>)
 800271a:	2180      	movs	r1, #128	; 0x80
 800271c:	438a      	bics	r2, r1
 800271e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <RTC_ExitInitMode+0x84>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2220      	movs	r2, #32
 8002726:	4013      	ands	r3, r2
 8002728:	d10d      	bne.n	8002746 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	0018      	movs	r0, r3
 800272e:	f7ff ff7f 	bl	8002630 <HAL_RTC_WaitForSynchro>
 8002732:	1e03      	subs	r3, r0, #0
 8002734:	d021      	beq.n	800277a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2229      	movs	r2, #41	; 0x29
 800273a:	2103      	movs	r1, #3
 800273c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800273e:	193b      	adds	r3, r7, r4
 8002740:	2203      	movs	r2, #3
 8002742:	701a      	strb	r2, [r3, #0]
 8002744:	e019      	b.n	800277a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <RTC_ExitInitMode+0x84>)
 8002748:	699a      	ldr	r2, [r3, #24]
 800274a:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <RTC_ExitInitMode+0x84>)
 800274c:	2120      	movs	r1, #32
 800274e:	438a      	bics	r2, r1
 8002750:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	0018      	movs	r0, r3
 8002756:	f7ff ff6b 	bl	8002630 <HAL_RTC_WaitForSynchro>
 800275a:	1e03      	subs	r3, r0, #0
 800275c:	d007      	beq.n	800276e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2229      	movs	r2, #41	; 0x29
 8002762:	2103      	movs	r1, #3
 8002764:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002766:	230f      	movs	r3, #15
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	2203      	movs	r2, #3
 800276c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <RTC_ExitInitMode+0x84>)
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	4b05      	ldr	r3, [pc, #20]	; (8002788 <RTC_ExitInitMode+0x84>)
 8002774:	2120      	movs	r1, #32
 8002776:	430a      	orrs	r2, r1
 8002778:	619a      	str	r2, [r3, #24]
  }

  return status;
 800277a:	230f      	movs	r3, #15
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	781b      	ldrb	r3, [r3, #0]
}
 8002780:	0018      	movs	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	b005      	add	sp, #20
 8002786:	bd90      	pop	{r4, r7, pc}
 8002788:	40002800 	.word	0x40002800

0800278c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	0002      	movs	r2, r0
 8002794:	1dfb      	adds	r3, r7, #7
 8002796:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800279c:	230b      	movs	r3, #11
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	1dfa      	adds	r2, r7, #7
 80027a2:	7812      	ldrb	r2, [r2, #0]
 80027a4:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80027a6:	e008      	b.n	80027ba <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3301      	adds	r3, #1
 80027ac:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80027ae:	220b      	movs	r2, #11
 80027b0:	18bb      	adds	r3, r7, r2
 80027b2:	18ba      	adds	r2, r7, r2
 80027b4:	7812      	ldrb	r2, [r2, #0]
 80027b6:	3a0a      	subs	r2, #10
 80027b8:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80027ba:	210b      	movs	r1, #11
 80027bc:	187b      	adds	r3, r7, r1
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b09      	cmp	r3, #9
 80027c2:	d8f1      	bhi.n	80027a8 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	187b      	adds	r3, r7, r1
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	b2db      	uxtb	r3, r3
}
 80027d4:	0018      	movs	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b004      	add	sp, #16
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80027e4:	46c0      	nop			; (mov r8, r8)
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b002      	add	sp, #8
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e046      	b.n	800288c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2288      	movs	r2, #136	; 0x88
 8002802:	589b      	ldr	r3, [r3, r2]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d107      	bne.n	8002818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2284      	movs	r2, #132	; 0x84
 800280c:	2100      	movs	r1, #0
 800280e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	0018      	movs	r0, r3
 8002814:	f7fe f944 	bl	8000aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2288      	movs	r2, #136	; 0x88
 800281c:	2124      	movs	r1, #36	; 0x24
 800281e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2101      	movs	r1, #1
 800282c:	438a      	bics	r2, r1
 800282e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	0018      	movs	r0, r3
 8002834:	f000 f830 	bl	8002898 <UART_SetConfig>
 8002838:	0003      	movs	r3, r0
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e024      	b.n	800288c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	0018      	movs	r0, r3
 800284e:	f000 fa9b 	bl	8002d88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	490d      	ldr	r1, [pc, #52]	; (8002894 <HAL_UART_Init+0xa8>)
 800285e:	400a      	ands	r2, r1
 8002860:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	212a      	movs	r1, #42	; 0x2a
 800286e:	438a      	bics	r2, r1
 8002870:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2101      	movs	r1, #1
 800287e:	430a      	orrs	r2, r1
 8002880:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	0018      	movs	r0, r3
 8002886:	f000 fb33 	bl	8002ef0 <UART_CheckIdleState>
 800288a:	0003      	movs	r3, r0
}
 800288c:	0018      	movs	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	b002      	add	sp, #8
 8002892:	bd80      	pop	{r7, pc}
 8002894:	ffffb7ff 	.word	0xffffb7ff

08002898 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002898:	b5b0      	push	{r4, r5, r7, lr}
 800289a:	b090      	sub	sp, #64	; 0x40
 800289c:	af00      	add	r7, sp, #0
 800289e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028a0:	231a      	movs	r3, #26
 80028a2:	2220      	movs	r2, #32
 80028a4:	189b      	adds	r3, r3, r2
 80028a6:	19db      	adds	r3, r3, r7
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4ac4      	ldr	r2, [pc, #784]	; (8002bdc <UART_SetConfig+0x344>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	0019      	movs	r1, r3
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d6:	430b      	orrs	r3, r1
 80028d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4abf      	ldr	r2, [pc, #764]	; (8002be0 <UART_SetConfig+0x348>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	0018      	movs	r0, r3
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	68d9      	ldr	r1, [r3, #12]
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	0003      	movs	r3, r0
 80028f0:	430b      	orrs	r3, r1
 80028f2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4ab9      	ldr	r2, [pc, #740]	; (8002be4 <UART_SetConfig+0x34c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d004      	beq.n	800290e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800290a:	4313      	orrs	r3, r2
 800290c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	4ab4      	ldr	r2, [pc, #720]	; (8002be8 <UART_SetConfig+0x350>)
 8002916:	4013      	ands	r3, r2
 8002918:	0019      	movs	r1, r3
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002920:	430b      	orrs	r3, r1
 8002922:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	220f      	movs	r2, #15
 800292c:	4393      	bics	r3, r2
 800292e:	0018      	movs	r0, r3
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	0003      	movs	r3, r0
 800293a:	430b      	orrs	r3, r1
 800293c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4aaa      	ldr	r2, [pc, #680]	; (8002bec <UART_SetConfig+0x354>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d131      	bne.n	80029ac <UART_SetConfig+0x114>
 8002948:	4ba9      	ldr	r3, [pc, #676]	; (8002bf0 <UART_SetConfig+0x358>)
 800294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294c:	2203      	movs	r2, #3
 800294e:	4013      	ands	r3, r2
 8002950:	2b03      	cmp	r3, #3
 8002952:	d01d      	beq.n	8002990 <UART_SetConfig+0xf8>
 8002954:	d823      	bhi.n	800299e <UART_SetConfig+0x106>
 8002956:	2b02      	cmp	r3, #2
 8002958:	d00c      	beq.n	8002974 <UART_SetConfig+0xdc>
 800295a:	d820      	bhi.n	800299e <UART_SetConfig+0x106>
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <UART_SetConfig+0xce>
 8002960:	2b01      	cmp	r3, #1
 8002962:	d00e      	beq.n	8002982 <UART_SetConfig+0xea>
 8002964:	e01b      	b.n	800299e <UART_SetConfig+0x106>
 8002966:	231b      	movs	r3, #27
 8002968:	2220      	movs	r2, #32
 800296a:	189b      	adds	r3, r3, r2
 800296c:	19db      	adds	r3, r3, r7
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e071      	b.n	8002a58 <UART_SetConfig+0x1c0>
 8002974:	231b      	movs	r3, #27
 8002976:	2220      	movs	r2, #32
 8002978:	189b      	adds	r3, r3, r2
 800297a:	19db      	adds	r3, r3, r7
 800297c:	2202      	movs	r2, #2
 800297e:	701a      	strb	r2, [r3, #0]
 8002980:	e06a      	b.n	8002a58 <UART_SetConfig+0x1c0>
 8002982:	231b      	movs	r3, #27
 8002984:	2220      	movs	r2, #32
 8002986:	189b      	adds	r3, r3, r2
 8002988:	19db      	adds	r3, r3, r7
 800298a:	2204      	movs	r2, #4
 800298c:	701a      	strb	r2, [r3, #0]
 800298e:	e063      	b.n	8002a58 <UART_SetConfig+0x1c0>
 8002990:	231b      	movs	r3, #27
 8002992:	2220      	movs	r2, #32
 8002994:	189b      	adds	r3, r3, r2
 8002996:	19db      	adds	r3, r3, r7
 8002998:	2208      	movs	r2, #8
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	e05c      	b.n	8002a58 <UART_SetConfig+0x1c0>
 800299e:	231b      	movs	r3, #27
 80029a0:	2220      	movs	r2, #32
 80029a2:	189b      	adds	r3, r3, r2
 80029a4:	19db      	adds	r3, r3, r7
 80029a6:	2210      	movs	r2, #16
 80029a8:	701a      	strb	r2, [r3, #0]
 80029aa:	e055      	b.n	8002a58 <UART_SetConfig+0x1c0>
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a90      	ldr	r2, [pc, #576]	; (8002bf4 <UART_SetConfig+0x35c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d106      	bne.n	80029c4 <UART_SetConfig+0x12c>
 80029b6:	231b      	movs	r3, #27
 80029b8:	2220      	movs	r2, #32
 80029ba:	189b      	adds	r3, r3, r2
 80029bc:	19db      	adds	r3, r3, r7
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	e049      	b.n	8002a58 <UART_SetConfig+0x1c0>
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a86      	ldr	r2, [pc, #536]	; (8002be4 <UART_SetConfig+0x34c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d13e      	bne.n	8002a4c <UART_SetConfig+0x1b4>
 80029ce:	4b88      	ldr	r3, [pc, #544]	; (8002bf0 <UART_SetConfig+0x358>)
 80029d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029d2:	23c0      	movs	r3, #192	; 0xc0
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	4013      	ands	r3, r2
 80029d8:	22c0      	movs	r2, #192	; 0xc0
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	4293      	cmp	r3, r2
 80029de:	d027      	beq.n	8002a30 <UART_SetConfig+0x198>
 80029e0:	22c0      	movs	r2, #192	; 0xc0
 80029e2:	0112      	lsls	r2, r2, #4
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d82a      	bhi.n	8002a3e <UART_SetConfig+0x1a6>
 80029e8:	2280      	movs	r2, #128	; 0x80
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d011      	beq.n	8002a14 <UART_SetConfig+0x17c>
 80029f0:	2280      	movs	r2, #128	; 0x80
 80029f2:	0112      	lsls	r2, r2, #4
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d822      	bhi.n	8002a3e <UART_SetConfig+0x1a6>
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d004      	beq.n	8002a06 <UART_SetConfig+0x16e>
 80029fc:	2280      	movs	r2, #128	; 0x80
 80029fe:	00d2      	lsls	r2, r2, #3
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00e      	beq.n	8002a22 <UART_SetConfig+0x18a>
 8002a04:	e01b      	b.n	8002a3e <UART_SetConfig+0x1a6>
 8002a06:	231b      	movs	r3, #27
 8002a08:	2220      	movs	r2, #32
 8002a0a:	189b      	adds	r3, r3, r2
 8002a0c:	19db      	adds	r3, r3, r7
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	e021      	b.n	8002a58 <UART_SetConfig+0x1c0>
 8002a14:	231b      	movs	r3, #27
 8002a16:	2220      	movs	r2, #32
 8002a18:	189b      	adds	r3, r3, r2
 8002a1a:	19db      	adds	r3, r3, r7
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	701a      	strb	r2, [r3, #0]
 8002a20:	e01a      	b.n	8002a58 <UART_SetConfig+0x1c0>
 8002a22:	231b      	movs	r3, #27
 8002a24:	2220      	movs	r2, #32
 8002a26:	189b      	adds	r3, r3, r2
 8002a28:	19db      	adds	r3, r3, r7
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	e013      	b.n	8002a58 <UART_SetConfig+0x1c0>
 8002a30:	231b      	movs	r3, #27
 8002a32:	2220      	movs	r2, #32
 8002a34:	189b      	adds	r3, r3, r2
 8002a36:	19db      	adds	r3, r3, r7
 8002a38:	2208      	movs	r2, #8
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e00c      	b.n	8002a58 <UART_SetConfig+0x1c0>
 8002a3e:	231b      	movs	r3, #27
 8002a40:	2220      	movs	r2, #32
 8002a42:	189b      	adds	r3, r3, r2
 8002a44:	19db      	adds	r3, r3, r7
 8002a46:	2210      	movs	r2, #16
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	e005      	b.n	8002a58 <UART_SetConfig+0x1c0>
 8002a4c:	231b      	movs	r3, #27
 8002a4e:	2220      	movs	r2, #32
 8002a50:	189b      	adds	r3, r3, r2
 8002a52:	19db      	adds	r3, r3, r7
 8002a54:	2210      	movs	r2, #16
 8002a56:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a61      	ldr	r2, [pc, #388]	; (8002be4 <UART_SetConfig+0x34c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d000      	beq.n	8002a64 <UART_SetConfig+0x1cc>
 8002a62:	e092      	b.n	8002b8a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a64:	231b      	movs	r3, #27
 8002a66:	2220      	movs	r2, #32
 8002a68:	189b      	adds	r3, r3, r2
 8002a6a:	19db      	adds	r3, r3, r7
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d015      	beq.n	8002a9e <UART_SetConfig+0x206>
 8002a72:	dc18      	bgt.n	8002aa6 <UART_SetConfig+0x20e>
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d00d      	beq.n	8002a94 <UART_SetConfig+0x1fc>
 8002a78:	dc15      	bgt.n	8002aa6 <UART_SetConfig+0x20e>
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <UART_SetConfig+0x1ec>
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d005      	beq.n	8002a8e <UART_SetConfig+0x1f6>
 8002a82:	e010      	b.n	8002aa6 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a84:	f7ff f8ea 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002a88:	0003      	movs	r3, r0
 8002a8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a8c:	e014      	b.n	8002ab8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a8e:	4b5a      	ldr	r3, [pc, #360]	; (8002bf8 <UART_SetConfig+0x360>)
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a92:	e011      	b.n	8002ab8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a94:	f7ff f856 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a9c:	e00c      	b.n	8002ab8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a9e:	2380      	movs	r3, #128	; 0x80
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002aa4:	e008      	b.n	8002ab8 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002aaa:	231a      	movs	r3, #26
 8002aac:	2220      	movs	r2, #32
 8002aae:	189b      	adds	r3, r3, r2
 8002ab0:	19db      	adds	r3, r3, r7
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	701a      	strb	r2, [r3, #0]
        break;
 8002ab6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d100      	bne.n	8002ac0 <UART_SetConfig+0x228>
 8002abe:	e147      	b.n	8002d50 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ac4:	4b4d      	ldr	r3, [pc, #308]	; (8002bfc <UART_SetConfig+0x364>)
 8002ac6:	0052      	lsls	r2, r2, #1
 8002ac8:	5ad3      	ldrh	r3, [r2, r3]
 8002aca:	0019      	movs	r1, r3
 8002acc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ace:	f7fd fb19 	bl	8000104 <__udivsi3>
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	0013      	movs	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	189b      	adds	r3, r3, r2
 8002ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d305      	bcc.n	8002af2 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d906      	bls.n	8002b00 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8002af2:	231a      	movs	r3, #26
 8002af4:	2220      	movs	r2, #32
 8002af6:	189b      	adds	r3, r3, r2
 8002af8:	19db      	adds	r3, r3, r7
 8002afa:	2201      	movs	r2, #1
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	e127      	b.n	8002d50 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b0c:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <UART_SetConfig+0x364>)
 8002b0e:	0052      	lsls	r2, r2, #1
 8002b10:	5ad3      	ldrh	r3, [r2, r3]
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	69b8      	ldr	r0, [r7, #24]
 8002b1e:	69f9      	ldr	r1, [r7, #28]
 8002b20:	f7fd fb7c 	bl	800021c <__aeabi_uldivmod>
 8002b24:	0002      	movs	r2, r0
 8002b26:	000b      	movs	r3, r1
 8002b28:	0e11      	lsrs	r1, r2, #24
 8002b2a:	021d      	lsls	r5, r3, #8
 8002b2c:	430d      	orrs	r5, r1
 8002b2e:	0214      	lsls	r4, r2, #8
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68b8      	ldr	r0, [r7, #8]
 8002b3e:	68f9      	ldr	r1, [r7, #12]
 8002b40:	1900      	adds	r0, r0, r4
 8002b42:	4169      	adcs	r1, r5
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	607b      	str	r3, [r7, #4]
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f7fd fb63 	bl	800021c <__aeabi_uldivmod>
 8002b56:	0002      	movs	r2, r0
 8002b58:	000b      	movs	r3, r1
 8002b5a:	0013      	movs	r3, r2
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b60:	23c0      	movs	r3, #192	; 0xc0
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d309      	bcc.n	8002b7c <UART_SetConfig+0x2e4>
 8002b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	035b      	lsls	r3, r3, #13
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d204      	bcs.n	8002b7c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	e0e9      	b.n	8002d50 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8002b7c:	231a      	movs	r3, #26
 8002b7e:	2220      	movs	r2, #32
 8002b80:	189b      	adds	r3, r3, r2
 8002b82:	19db      	adds	r3, r3, r7
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	e0e2      	b.n	8002d50 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	69da      	ldr	r2, [r3, #28]
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d000      	beq.n	8002b98 <UART_SetConfig+0x300>
 8002b96:	e083      	b.n	8002ca0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8002b98:	231b      	movs	r3, #27
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	189b      	adds	r3, r3, r2
 8002b9e:	19db      	adds	r3, r3, r7
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d015      	beq.n	8002bd2 <UART_SetConfig+0x33a>
 8002ba6:	dc2b      	bgt.n	8002c00 <UART_SetConfig+0x368>
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d00d      	beq.n	8002bc8 <UART_SetConfig+0x330>
 8002bac:	dc28      	bgt.n	8002c00 <UART_SetConfig+0x368>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <UART_SetConfig+0x320>
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d005      	beq.n	8002bc2 <UART_SetConfig+0x32a>
 8002bb6:	e023      	b.n	8002c00 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bb8:	f7ff f850 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bc0:	e027      	b.n	8002c12 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <UART_SetConfig+0x360>)
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bc6:	e024      	b.n	8002c12 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bc8:	f7fe ffbc 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bd0:	e01f      	b.n	8002c12 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bd8:	e01b      	b.n	8002c12 <UART_SetConfig+0x37a>
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	cfff69f3 	.word	0xcfff69f3
 8002be0:	ffffcfff 	.word	0xffffcfff
 8002be4:	40008000 	.word	0x40008000
 8002be8:	11fff4ff 	.word	0x11fff4ff
 8002bec:	40013800 	.word	0x40013800
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40004400 	.word	0x40004400
 8002bf8:	00f42400 	.word	0x00f42400
 8002bfc:	080031f8 	.word	0x080031f8
      default:
        pclk = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002c04:	231a      	movs	r3, #26
 8002c06:	2220      	movs	r2, #32
 8002c08:	189b      	adds	r3, r3, r2
 8002c0a:	19db      	adds	r3, r3, r7
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
        break;
 8002c10:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d100      	bne.n	8002c1a <UART_SetConfig+0x382>
 8002c18:	e09a      	b.n	8002d50 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c1e:	4b58      	ldr	r3, [pc, #352]	; (8002d80 <UART_SetConfig+0x4e8>)
 8002c20:	0052      	lsls	r2, r2, #1
 8002c22:	5ad3      	ldrh	r3, [r2, r3]
 8002c24:	0019      	movs	r1, r3
 8002c26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c28:	f7fd fa6c 	bl	8000104 <__udivsi3>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	005a      	lsls	r2, r3, #1
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	085b      	lsrs	r3, r3, #1
 8002c36:	18d2      	adds	r2, r2, r3
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	0010      	movs	r0, r2
 8002c40:	f7fd fa60 	bl	8000104 <__udivsi3>
 8002c44:	0003      	movs	r3, r0
 8002c46:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	2b0f      	cmp	r3, #15
 8002c4c:	d921      	bls.n	8002c92 <UART_SetConfig+0x3fa>
 8002c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	025b      	lsls	r3, r3, #9
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d21c      	bcs.n	8002c92 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	200e      	movs	r0, #14
 8002c5e:	2420      	movs	r4, #32
 8002c60:	1903      	adds	r3, r0, r4
 8002c62:	19db      	adds	r3, r3, r7
 8002c64:	210f      	movs	r1, #15
 8002c66:	438a      	bics	r2, r1
 8002c68:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6c:	085b      	lsrs	r3, r3, #1
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2207      	movs	r2, #7
 8002c72:	4013      	ands	r3, r2
 8002c74:	b299      	uxth	r1, r3
 8002c76:	1903      	adds	r3, r0, r4
 8002c78:	19db      	adds	r3, r3, r7
 8002c7a:	1902      	adds	r2, r0, r4
 8002c7c:	19d2      	adds	r2, r2, r7
 8002c7e:	8812      	ldrh	r2, [r2, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	1902      	adds	r2, r0, r4
 8002c8a:	19d2      	adds	r2, r2, r7
 8002c8c:	8812      	ldrh	r2, [r2, #0]
 8002c8e:	60da      	str	r2, [r3, #12]
 8002c90:	e05e      	b.n	8002d50 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8002c92:	231a      	movs	r3, #26
 8002c94:	2220      	movs	r2, #32
 8002c96:	189b      	adds	r3, r3, r2
 8002c98:	19db      	adds	r3, r3, r7
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e057      	b.n	8002d50 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ca0:	231b      	movs	r3, #27
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	189b      	adds	r3, r3, r2
 8002ca6:	19db      	adds	r3, r3, r7
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d015      	beq.n	8002cda <UART_SetConfig+0x442>
 8002cae:	dc18      	bgt.n	8002ce2 <UART_SetConfig+0x44a>
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d00d      	beq.n	8002cd0 <UART_SetConfig+0x438>
 8002cb4:	dc15      	bgt.n	8002ce2 <UART_SetConfig+0x44a>
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <UART_SetConfig+0x428>
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d005      	beq.n	8002cca <UART_SetConfig+0x432>
 8002cbe:	e010      	b.n	8002ce2 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cc0:	f7fe ffcc 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cc8:	e014      	b.n	8002cf4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cca:	4b2e      	ldr	r3, [pc, #184]	; (8002d84 <UART_SetConfig+0x4ec>)
 8002ccc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cce:	e011      	b.n	8002cf4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cd0:	f7fe ff38 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cd8:	e00c      	b.n	8002cf4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ce0:	e008      	b.n	8002cf4 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002ce6:	231a      	movs	r3, #26
 8002ce8:	2220      	movs	r2, #32
 8002cea:	189b      	adds	r3, r3, r2
 8002cec:	19db      	adds	r3, r3, r7
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
        break;
 8002cf2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d02a      	beq.n	8002d50 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <UART_SetConfig+0x4e8>)
 8002d00:	0052      	lsls	r2, r2, #1
 8002d02:	5ad3      	ldrh	r3, [r2, r3]
 8002d04:	0019      	movs	r1, r3
 8002d06:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d08:	f7fd f9fc 	bl	8000104 <__udivsi3>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	001a      	movs	r2, r3
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	085b      	lsrs	r3, r3, #1
 8002d16:	18d2      	adds	r2, r2, r3
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	0010      	movs	r0, r2
 8002d20:	f7fd f9f0 	bl	8000104 <__udivsi3>
 8002d24:	0003      	movs	r3, r0
 8002d26:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	2b0f      	cmp	r3, #15
 8002d2c:	d90a      	bls.n	8002d44 <UART_SetConfig+0x4ac>
 8002d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	025b      	lsls	r3, r3, #9
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d205      	bcs.n	8002d44 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	e005      	b.n	8002d50 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8002d44:	231a      	movs	r3, #26
 8002d46:	2220      	movs	r2, #32
 8002d48:	189b      	adds	r3, r3, r2
 8002d4a:	19db      	adds	r3, r3, r7
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	226a      	movs	r2, #106	; 0x6a
 8002d54:	2101      	movs	r1, #1
 8002d56:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	2268      	movs	r2, #104	; 0x68
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	2200      	movs	r2, #0
 8002d64:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	2200      	movs	r2, #0
 8002d6a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002d6c:	231a      	movs	r3, #26
 8002d6e:	2220      	movs	r2, #32
 8002d70:	189b      	adds	r3, r3, r2
 8002d72:	19db      	adds	r3, r3, r7
 8002d74:	781b      	ldrb	r3, [r3, #0]
}
 8002d76:	0018      	movs	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b010      	add	sp, #64	; 0x40
 8002d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	080031f8 	.word	0x080031f8
 8002d84:	00f42400 	.word	0x00f42400

08002d88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d94:	2201      	movs	r2, #1
 8002d96:	4013      	ands	r3, r2
 8002d98:	d00b      	beq.n	8002db2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a4a      	ldr	r2, [pc, #296]	; (8002ecc <UART_AdvFeatureConfig+0x144>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	0019      	movs	r1, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db6:	2202      	movs	r2, #2
 8002db8:	4013      	ands	r3, r2
 8002dba:	d00b      	beq.n	8002dd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	4a43      	ldr	r2, [pc, #268]	; (8002ed0 <UART_AdvFeatureConfig+0x148>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	2204      	movs	r2, #4
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d00b      	beq.n	8002df6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4a3b      	ldr	r2, [pc, #236]	; (8002ed4 <UART_AdvFeatureConfig+0x14c>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	0019      	movs	r1, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	2208      	movs	r2, #8
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d00b      	beq.n	8002e18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4a34      	ldr	r2, [pc, #208]	; (8002ed8 <UART_AdvFeatureConfig+0x150>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	2210      	movs	r2, #16
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d00b      	beq.n	8002e3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4a2c      	ldr	r2, [pc, #176]	; (8002edc <UART_AdvFeatureConfig+0x154>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3e:	2220      	movs	r2, #32
 8002e40:	4013      	ands	r3, r2
 8002e42:	d00b      	beq.n	8002e5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	4a25      	ldr	r2, [pc, #148]	; (8002ee0 <UART_AdvFeatureConfig+0x158>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	0019      	movs	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	2240      	movs	r2, #64	; 0x40
 8002e62:	4013      	ands	r3, r2
 8002e64:	d01d      	beq.n	8002ea2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ee4 <UART_AdvFeatureConfig+0x15c>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	0019      	movs	r1, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	035b      	lsls	r3, r3, #13
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d10b      	bne.n	8002ea2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a15      	ldr	r2, [pc, #84]	; (8002ee8 <UART_AdvFeatureConfig+0x160>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	0019      	movs	r1, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	2280      	movs	r2, #128	; 0x80
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d00b      	beq.n	8002ec4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4a0e      	ldr	r2, [pc, #56]	; (8002eec <UART_AdvFeatureConfig+0x164>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	605a      	str	r2, [r3, #4]
  }
}
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b002      	add	sp, #8
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	fffdffff 	.word	0xfffdffff
 8002ed0:	fffeffff 	.word	0xfffeffff
 8002ed4:	fffbffff 	.word	0xfffbffff
 8002ed8:	ffff7fff 	.word	0xffff7fff
 8002edc:	ffffefff 	.word	0xffffefff
 8002ee0:	ffffdfff 	.word	0xffffdfff
 8002ee4:	ffefffff 	.word	0xffefffff
 8002ee8:	ff9fffff 	.word	0xff9fffff
 8002eec:	fff7ffff 	.word	0xfff7ffff

08002ef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2290      	movs	r2, #144	; 0x90
 8002efc:	2100      	movs	r1, #0
 8002efe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f00:	f7fd fef0 	bl	8000ce4 <HAL_GetTick>
 8002f04:	0003      	movs	r3, r0
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2208      	movs	r2, #8
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d10c      	bne.n	8002f30 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2280      	movs	r2, #128	; 0x80
 8002f1a:	0391      	lsls	r1, r2, #14
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	4a1a      	ldr	r2, [pc, #104]	; (8002f88 <UART_CheckIdleState+0x98>)
 8002f20:	9200      	str	r2, [sp, #0]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f000 f832 	bl	8002f8c <UART_WaitOnFlagUntilTimeout>
 8002f28:	1e03      	subs	r3, r0, #0
 8002f2a:	d001      	beq.n	8002f30 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e026      	b.n	8002f7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2204      	movs	r2, #4
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d10c      	bne.n	8002f58 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2280      	movs	r2, #128	; 0x80
 8002f42:	03d1      	lsls	r1, r2, #15
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	4a10      	ldr	r2, [pc, #64]	; (8002f88 <UART_CheckIdleState+0x98>)
 8002f48:	9200      	str	r2, [sp, #0]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f000 f81e 	bl	8002f8c <UART_WaitOnFlagUntilTimeout>
 8002f50:	1e03      	subs	r3, r0, #0
 8002f52:	d001      	beq.n	8002f58 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e012      	b.n	8002f7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2288      	movs	r2, #136	; 0x88
 8002f5c:	2120      	movs	r1, #32
 8002f5e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	228c      	movs	r2, #140	; 0x8c
 8002f64:	2120      	movs	r1, #32
 8002f66:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2284      	movs	r2, #132	; 0x84
 8002f78:	2100      	movs	r1, #0
 8002f7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b004      	add	sp, #16
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	01ffffff 	.word	0x01ffffff

08002f8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b094      	sub	sp, #80	; 0x50
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	1dfb      	adds	r3, r7, #7
 8002f9a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f9c:	e0a7      	b.n	80030ee <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	d100      	bne.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002fa4:	e0a3      	b.n	80030ee <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7fd fe9d 	bl	8000ce4 <HAL_GetTick>
 8002faa:	0002      	movs	r2, r0
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8002fb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d13f      	bne.n	800303c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	f383 8810 	msr	PRIMASK, r3
}
 8002fd0:	46c0      	nop			; (mov r8, r8)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	494e      	ldr	r1, [pc, #312]	; (8003118 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002fde:	400a      	ands	r2, r1
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	f383 8810 	msr	PRIMASK, r3
}
 8002fec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fee:	f3ef 8310 	mrs	r3, PRIMASK
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffe:	f383 8810 	msr	PRIMASK, r3
}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2101      	movs	r1, #1
 8003010:	438a      	bics	r2, r1
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003016:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301a:	f383 8810 	msr	PRIMASK, r3
}
 800301e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2288      	movs	r2, #136	; 0x88
 8003024:	2120      	movs	r1, #32
 8003026:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	228c      	movs	r2, #140	; 0x8c
 800302c:	2120      	movs	r1, #32
 800302e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2284      	movs	r2, #132	; 0x84
 8003034:	2100      	movs	r1, #0
 8003036:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e069      	b.n	8003110 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2204      	movs	r2, #4
 8003044:	4013      	ands	r3, r2
 8003046:	d052      	beq.n	80030ee <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69da      	ldr	r2, [r3, #28]
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	401a      	ands	r2, r3
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	429a      	cmp	r2, r3
 800305a:	d148      	bne.n	80030ee <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	0112      	lsls	r2, r2, #4
 8003064:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003066:	f3ef 8310 	mrs	r3, PRIMASK
 800306a:	613b      	str	r3, [r7, #16]
  return(result);
 800306c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800306e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003070:	2301      	movs	r3, #1
 8003072:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f383 8810 	msr	PRIMASK, r3
}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4924      	ldr	r1, [pc, #144]	; (8003118 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003088:	400a      	ands	r2, r1
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	f383 8810 	msr	PRIMASK, r3
}
 8003096:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003098:	f3ef 8310 	mrs	r3, PRIMASK
 800309c:	61fb      	str	r3, [r7, #28]
  return(result);
 800309e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80030a2:	2301      	movs	r3, #1
 80030a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	f383 8810 	msr	PRIMASK, r3
}
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2101      	movs	r1, #1
 80030ba:	438a      	bics	r2, r1
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	f383 8810 	msr	PRIMASK, r3
}
 80030c8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2288      	movs	r2, #136	; 0x88
 80030ce:	2120      	movs	r1, #32
 80030d0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	228c      	movs	r2, #140	; 0x8c
 80030d6:	2120      	movs	r1, #32
 80030d8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2290      	movs	r2, #144	; 0x90
 80030de:	2120      	movs	r1, #32
 80030e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2284      	movs	r2, #132	; 0x84
 80030e6:	2100      	movs	r1, #0
 80030e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e010      	b.n	8003110 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	4013      	ands	r3, r2
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	425a      	negs	r2, r3
 80030fe:	4153      	adcs	r3, r2
 8003100:	b2db      	uxtb	r3, r3
 8003102:	001a      	movs	r2, r3
 8003104:	1dfb      	adds	r3, r7, #7
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d100      	bne.n	800310e <UART_WaitOnFlagUntilTimeout+0x182>
 800310c:	e747      	b.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	0018      	movs	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	b014      	add	sp, #80	; 0x50
 8003116:	bd80      	pop	{r7, pc}
 8003118:	fffffe5f 	.word	0xfffffe5f

0800311c <__libc_init_array>:
 800311c:	b570      	push	{r4, r5, r6, lr}
 800311e:	2600      	movs	r6, #0
 8003120:	4d0c      	ldr	r5, [pc, #48]	; (8003154 <__libc_init_array+0x38>)
 8003122:	4c0d      	ldr	r4, [pc, #52]	; (8003158 <__libc_init_array+0x3c>)
 8003124:	1b64      	subs	r4, r4, r5
 8003126:	10a4      	asrs	r4, r4, #2
 8003128:	42a6      	cmp	r6, r4
 800312a:	d109      	bne.n	8003140 <__libc_init_array+0x24>
 800312c:	2600      	movs	r6, #0
 800312e:	f000 f821 	bl	8003174 <_init>
 8003132:	4d0a      	ldr	r5, [pc, #40]	; (800315c <__libc_init_array+0x40>)
 8003134:	4c0a      	ldr	r4, [pc, #40]	; (8003160 <__libc_init_array+0x44>)
 8003136:	1b64      	subs	r4, r4, r5
 8003138:	10a4      	asrs	r4, r4, #2
 800313a:	42a6      	cmp	r6, r4
 800313c:	d105      	bne.n	800314a <__libc_init_array+0x2e>
 800313e:	bd70      	pop	{r4, r5, r6, pc}
 8003140:	00b3      	lsls	r3, r6, #2
 8003142:	58eb      	ldr	r3, [r5, r3]
 8003144:	4798      	blx	r3
 8003146:	3601      	adds	r6, #1
 8003148:	e7ee      	b.n	8003128 <__libc_init_array+0xc>
 800314a:	00b3      	lsls	r3, r6, #2
 800314c:	58eb      	ldr	r3, [r5, r3]
 800314e:	4798      	blx	r3
 8003150:	3601      	adds	r6, #1
 8003152:	e7f2      	b.n	800313a <__libc_init_array+0x1e>
 8003154:	08003218 	.word	0x08003218
 8003158:	08003218 	.word	0x08003218
 800315c:	08003218 	.word	0x08003218
 8003160:	0800321c 	.word	0x0800321c

08003164 <memset>:
 8003164:	0003      	movs	r3, r0
 8003166:	1882      	adds	r2, r0, r2
 8003168:	4293      	cmp	r3, r2
 800316a:	d100      	bne.n	800316e <memset+0xa>
 800316c:	4770      	bx	lr
 800316e:	7019      	strb	r1, [r3, #0]
 8003170:	3301      	adds	r3, #1
 8003172:	e7f9      	b.n	8003168 <memset+0x4>

08003174 <_init>:
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317a:	bc08      	pop	{r3}
 800317c:	469e      	mov	lr, r3
 800317e:	4770      	bx	lr

08003180 <_fini>:
 8003180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003186:	bc08      	pop	{r3}
 8003188:	469e      	mov	lr, r3
 800318a:	4770      	bx	lr
