
sinking-clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027b4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002870  08002870  00012870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028e8  080028e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080028e8  080028e8  000128e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028f0  080028f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028f0  080028f0  000128f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028f4  080028f4  000128f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08002904  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002904  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1b5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b57  00000000  00000000  0002d1e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002ed40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002f7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001536d  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da0a  00000000  00000000  000454f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000875d1  00000000  00000000  00052eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da4d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002524  00000000  00000000  000da520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002858 	.word	0x08002858

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002858 	.word	0x08002858

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	; (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	; (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	469b      	mov	fp, r3
 8000292:	d433      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000294:	465a      	mov	r2, fp
 8000296:	4653      	mov	r3, sl
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83a      	bhi.n	800031e <__udivmoddi4+0xc2>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e078      	b.n	80003a0 <__udivmoddi4+0x144>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e075      	b.n	80003a6 <__udivmoddi4+0x14a>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e028      	b.n	8000326 <__udivmoddi4+0xca>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	2320      	movs	r3, #32
 8000300:	1a9b      	subs	r3, r3, r2
 8000302:	4652      	mov	r2, sl
 8000304:	40da      	lsrs	r2, r3
 8000306:	4641      	mov	r1, r8
 8000308:	0013      	movs	r3, r2
 800030a:	464a      	mov	r2, r9
 800030c:	408a      	lsls	r2, r1
 800030e:	0017      	movs	r7, r2
 8000310:	4642      	mov	r2, r8
 8000312:	431f      	orrs	r7, r3
 8000314:	4653      	mov	r3, sl
 8000316:	4093      	lsls	r3, r2
 8000318:	001e      	movs	r6, r3
 800031a:	42af      	cmp	r7, r5
 800031c:	d9c4      	bls.n	80002a8 <__udivmoddi4+0x4c>
 800031e:	2200      	movs	r2, #0
 8000320:	2300      	movs	r3, #0
 8000322:	9200      	str	r2, [sp, #0]
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	4643      	mov	r3, r8
 8000328:	2b00      	cmp	r3, #0
 800032a:	d0d9      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032c:	07fb      	lsls	r3, r7, #31
 800032e:	0872      	lsrs	r2, r6, #1
 8000330:	431a      	orrs	r2, r3
 8000332:	4646      	mov	r6, r8
 8000334:	087b      	lsrs	r3, r7, #1
 8000336:	e00e      	b.n	8000356 <__udivmoddi4+0xfa>
 8000338:	42ab      	cmp	r3, r5
 800033a:	d101      	bne.n	8000340 <__udivmoddi4+0xe4>
 800033c:	42a2      	cmp	r2, r4
 800033e:	d80c      	bhi.n	800035a <__udivmoddi4+0xfe>
 8000340:	1aa4      	subs	r4, r4, r2
 8000342:	419d      	sbcs	r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	1924      	adds	r4, r4, r4
 8000348:	416d      	adcs	r5, r5
 800034a:	2100      	movs	r1, #0
 800034c:	3e01      	subs	r6, #1
 800034e:	1824      	adds	r4, r4, r0
 8000350:	414d      	adcs	r5, r1
 8000352:	2e00      	cmp	r6, #0
 8000354:	d006      	beq.n	8000364 <__udivmoddi4+0x108>
 8000356:	42ab      	cmp	r3, r5
 8000358:	d9ee      	bls.n	8000338 <__udivmoddi4+0xdc>
 800035a:	3e01      	subs	r6, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2e00      	cmp	r6, #0
 8000362:	d1f8      	bne.n	8000356 <__udivmoddi4+0xfa>
 8000364:	9800      	ldr	r0, [sp, #0]
 8000366:	9901      	ldr	r1, [sp, #4]
 8000368:	465b      	mov	r3, fp
 800036a:	1900      	adds	r0, r0, r4
 800036c:	4169      	adcs	r1, r5
 800036e:	2b00      	cmp	r3, #0
 8000370:	db24      	blt.n	80003bc <__udivmoddi4+0x160>
 8000372:	002b      	movs	r3, r5
 8000374:	465a      	mov	r2, fp
 8000376:	4644      	mov	r4, r8
 8000378:	40d3      	lsrs	r3, r2
 800037a:	002a      	movs	r2, r5
 800037c:	40e2      	lsrs	r2, r4
 800037e:	001c      	movs	r4, r3
 8000380:	465b      	mov	r3, fp
 8000382:	0015      	movs	r5, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	db2a      	blt.n	80003de <__udivmoddi4+0x182>
 8000388:	0026      	movs	r6, r4
 800038a:	409e      	lsls	r6, r3
 800038c:	0033      	movs	r3, r6
 800038e:	0026      	movs	r6, r4
 8000390:	4647      	mov	r7, r8
 8000392:	40be      	lsls	r6, r7
 8000394:	0032      	movs	r2, r6
 8000396:	1a80      	subs	r0, r0, r2
 8000398:	4199      	sbcs	r1, r3
 800039a:	9000      	str	r0, [sp, #0]
 800039c:	9101      	str	r1, [sp, #4]
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a0:	42a3      	cmp	r3, r4
 80003a2:	d8bc      	bhi.n	800031e <__udivmoddi4+0xc2>
 80003a4:	e783      	b.n	80002ae <__udivmoddi4+0x52>
 80003a6:	4642      	mov	r2, r8
 80003a8:	2320      	movs	r3, #32
 80003aa:	2100      	movs	r1, #0
 80003ac:	1a9b      	subs	r3, r3, r2
 80003ae:	2200      	movs	r2, #0
 80003b0:	9100      	str	r1, [sp, #0]
 80003b2:	9201      	str	r2, [sp, #4]
 80003b4:	2201      	movs	r2, #1
 80003b6:	40da      	lsrs	r2, r3
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	e786      	b.n	80002ca <__udivmoddi4+0x6e>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	002a      	movs	r2, r5
 80003c4:	4646      	mov	r6, r8
 80003c6:	409a      	lsls	r2, r3
 80003c8:	0023      	movs	r3, r4
 80003ca:	40f3      	lsrs	r3, r6
 80003cc:	4644      	mov	r4, r8
 80003ce:	4313      	orrs	r3, r2
 80003d0:	002a      	movs	r2, r5
 80003d2:	40e2      	lsrs	r2, r4
 80003d4:	001c      	movs	r4, r3
 80003d6:	465b      	mov	r3, fp
 80003d8:	0015      	movs	r5, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	dad4      	bge.n	8000388 <__udivmoddi4+0x12c>
 80003de:	4642      	mov	r2, r8
 80003e0:	002f      	movs	r7, r5
 80003e2:	2320      	movs	r3, #32
 80003e4:	0026      	movs	r6, r4
 80003e6:	4097      	lsls	r7, r2
 80003e8:	1a9b      	subs	r3, r3, r2
 80003ea:	40de      	lsrs	r6, r3
 80003ec:	003b      	movs	r3, r7
 80003ee:	4333      	orrs	r3, r6
 80003f0:	e7cd      	b.n	800038e <__udivmoddi4+0x132>
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	; (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044c:	f000 faa8 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000450:	f000 f81f 	bl	8000492 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000454:	f000 f8da 	bl	800060c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000458:	f000 f8a4 	bl	80005a4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800045c:	f000 f862 	bl	8000524 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000460:	23a0      	movs	r3, #160	; 0xa0
 8000462:	05db      	lsls	r3, r3, #23
 8000464:	2201      	movs	r2, #1
 8000466:	2101      	movs	r1, #1
 8000468:	0018      	movs	r0, r3
 800046a:	f000 fd5b 	bl	8000f24 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800046e:	23fa      	movs	r3, #250	; 0xfa
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	0018      	movs	r0, r3
 8000474:	f000 fb1a 	bl	8000aac <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000478:	23a0      	movs	r3, #160	; 0xa0
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	2200      	movs	r2, #0
 800047e:	2101      	movs	r1, #1
 8000480:	0018      	movs	r0, r3
 8000482:	f000 fd4f 	bl	8000f24 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000486:	23fa      	movs	r3, #250	; 0xfa
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	0018      	movs	r0, r3
 800048c:	f000 fb0e 	bl	8000aac <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000490:	e7e6      	b.n	8000460 <main+0x18>

08000492 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000492:	b590      	push	{r4, r7, lr}
 8000494:	b093      	sub	sp, #76	; 0x4c
 8000496:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000498:	2410      	movs	r4, #16
 800049a:	193b      	adds	r3, r7, r4
 800049c:	0018      	movs	r0, r3
 800049e:	2338      	movs	r3, #56	; 0x38
 80004a0:	001a      	movs	r2, r3
 80004a2:	2100      	movs	r1, #0
 80004a4:	f002 f9d0 	bl	8002848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a8:	003b      	movs	r3, r7
 80004aa:	0018      	movs	r0, r3
 80004ac:	2310      	movs	r3, #16
 80004ae:	001a      	movs	r2, r3
 80004b0:	2100      	movs	r1, #0
 80004b2:	f002 f9c9 	bl	8002848 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004b6:	2380      	movs	r3, #128	; 0x80
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 fe7e 	bl	80011bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	2202      	movs	r2, #2
 80004c4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	2280      	movs	r2, #128	; 0x80
 80004ca:	0052      	lsls	r2, r2, #1
 80004cc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	2240      	movs	r2, #64	; 0x40
 80004d8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	2200      	movs	r2, #0
 80004de:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 feb6 	bl	8001254 <HAL_RCC_OscConfig>
 80004e8:	1e03      	subs	r3, r0, #0
 80004ea:	d001      	beq.n	80004f0 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004ec:	f000 f916 	bl	800071c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f0:	003b      	movs	r3, r7
 80004f2:	2207      	movs	r2, #7
 80004f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004f6:	003b      	movs	r3, r7
 80004f8:	2200      	movs	r2, #0
 80004fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fc:	003b      	movs	r3, r7
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000502:	003b      	movs	r3, r7
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000508:	003b      	movs	r3, r7
 800050a:	2100      	movs	r1, #0
 800050c:	0018      	movs	r0, r3
 800050e:	f001 f9bb 	bl	8001888 <HAL_RCC_ClockConfig>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000516:	f000 f901 	bl	800071c <Error_Handler>
  }
}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b013      	add	sp, #76	; 0x4c
 8000520:	bd90      	pop	{r4, r7, pc}
	...

08000524 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <MX_I2C1_Init+0x74>)
 800052a:	4a1c      	ldr	r2, [pc, #112]	; (800059c <MX_I2C1_Init+0x78>)
 800052c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800052e:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <MX_I2C1_Init+0x74>)
 8000530:	4a1b      	ldr	r2, [pc, #108]	; (80005a0 <MX_I2C1_Init+0x7c>)
 8000532:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <MX_I2C1_Init+0x74>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800053a:	4b17      	ldr	r3, [pc, #92]	; (8000598 <MX_I2C1_Init+0x74>)
 800053c:	2201      	movs	r2, #1
 800053e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000540:	4b15      	ldr	r3, [pc, #84]	; (8000598 <MX_I2C1_Init+0x74>)
 8000542:	2200      	movs	r2, #0
 8000544:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000546:	4b14      	ldr	r3, [pc, #80]	; (8000598 <MX_I2C1_Init+0x74>)
 8000548:	2200      	movs	r2, #0
 800054a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <MX_I2C1_Init+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <MX_I2C1_Init+0x74>)
 8000554:	2200      	movs	r2, #0
 8000556:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <MX_I2C1_Init+0x74>)
 800055a:	2200      	movs	r2, #0
 800055c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <MX_I2C1_Init+0x74>)
 8000560:	0018      	movs	r0, r3
 8000562:	f000 fcfd 	bl	8000f60 <HAL_I2C_Init>
 8000566:	1e03      	subs	r3, r0, #0
 8000568:	d001      	beq.n	800056e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800056a:	f000 f8d7 	bl	800071c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <MX_I2C1_Init+0x74>)
 8000570:	2100      	movs	r1, #0
 8000572:	0018      	movs	r0, r3
 8000574:	f000 fd8a 	bl	800108c <HAL_I2CEx_ConfigAnalogFilter>
 8000578:	1e03      	subs	r3, r0, #0
 800057a:	d001      	beq.n	8000580 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800057c:	f000 f8ce 	bl	800071c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <MX_I2C1_Init+0x74>)
 8000582:	2100      	movs	r1, #0
 8000584:	0018      	movs	r0, r3
 8000586:	f000 fdcd 	bl	8001124 <HAL_I2CEx_ConfigDigitalFilter>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800058e:	f000 f8c5 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000028 	.word	0x20000028
 800059c:	40005400 	.word	0x40005400
 80005a0:	00303d5b 	.word	0x00303d5b

080005a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005aa:	4a17      	ldr	r2, [pc, #92]	; (8000608 <MX_USART2_UART_Init+0x64>)
 80005ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ae:	4b15      	ldr	r3, [pc, #84]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005b0:	22e1      	movs	r2, #225	; 0xe1
 80005b2:	0252      	lsls	r2, r2, #9
 80005b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005b8:	2280      	movs	r2, #128	; 0x80
 80005ba:	0552      	lsls	r2, r2, #21
 80005bc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005cc:	220c      	movs	r2, #12
 80005ce:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005d8:	2200      	movs	r2, #0
 80005da:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005de:	2200      	movs	r2, #0
 80005e0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 fc6d 	bl	8001ed0 <HAL_UART_Init>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80005fa:	f000 f88f 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	2000007c 	.word	0x2000007c
 8000608:	40004400 	.word	0x40004400

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b08b      	sub	sp, #44	; 0x2c
 8000610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	2414      	movs	r4, #20
 8000614:	193b      	adds	r3, r7, r4
 8000616:	0018      	movs	r0, r3
 8000618:	2314      	movs	r3, #20
 800061a:	001a      	movs	r2, r3
 800061c:	2100      	movs	r1, #0
 800061e:	f002 f913 	bl	8002848 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <MX_GPIO_Init+0x104>)
 8000624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000626:	4b3a      	ldr	r3, [pc, #232]	; (8000710 <MX_GPIO_Init+0x104>)
 8000628:	2102      	movs	r1, #2
 800062a:	430a      	orrs	r2, r1
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
 800062e:	4b38      	ldr	r3, [pc, #224]	; (8000710 <MX_GPIO_Init+0x104>)
 8000630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000632:	2202      	movs	r2, #2
 8000634:	4013      	ands	r3, r2
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063a:	4b35      	ldr	r3, [pc, #212]	; (8000710 <MX_GPIO_Init+0x104>)
 800063c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800063e:	4b34      	ldr	r3, [pc, #208]	; (8000710 <MX_GPIO_Init+0x104>)
 8000640:	2104      	movs	r1, #4
 8000642:	430a      	orrs	r2, r1
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
 8000646:	4b32      	ldr	r3, [pc, #200]	; (8000710 <MX_GPIO_Init+0x104>)
 8000648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800064a:	2204      	movs	r2, #4
 800064c:	4013      	ands	r3, r2
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000652:	4b2f      	ldr	r3, [pc, #188]	; (8000710 <MX_GPIO_Init+0x104>)
 8000654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000656:	4b2e      	ldr	r3, [pc, #184]	; (8000710 <MX_GPIO_Init+0x104>)
 8000658:	2120      	movs	r1, #32
 800065a:	430a      	orrs	r2, r1
 800065c:	635a      	str	r2, [r3, #52]	; 0x34
 800065e:	4b2c      	ldr	r3, [pc, #176]	; (8000710 <MX_GPIO_Init+0x104>)
 8000660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000662:	2220      	movs	r2, #32
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b29      	ldr	r3, [pc, #164]	; (8000710 <MX_GPIO_Init+0x104>)
 800066c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800066e:	4b28      	ldr	r3, [pc, #160]	; (8000710 <MX_GPIO_Init+0x104>)
 8000670:	2101      	movs	r1, #1
 8000672:	430a      	orrs	r2, r1
 8000674:	635a      	str	r2, [r3, #52]	; 0x34
 8000676:	4b26      	ldr	r3, [pc, #152]	; (8000710 <MX_GPIO_Init+0x104>)
 8000678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800067a:	2201      	movs	r2, #1
 800067c:	4013      	ands	r3, r2
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000682:	23a0      	movs	r3, #160	; 0xa0
 8000684:	05db      	lsls	r3, r3, #23
 8000686:	2200      	movs	r2, #0
 8000688:	2101      	movs	r1, #1
 800068a:	0018      	movs	r0, r3
 800068c:	f000 fc4a 	bl	8000f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000690:	4b20      	ldr	r3, [pc, #128]	; (8000714 <MX_GPIO_Init+0x108>)
 8000692:	2200      	movs	r2, #0
 8000694:	2140      	movs	r1, #64	; 0x40
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fc44 	bl	8000f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2204      	movs	r2, #4
 80006a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2288      	movs	r2, #136	; 0x88
 80006a6:	0352      	lsls	r2, r2, #13
 80006a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	4a19      	ldr	r2, [pc, #100]	; (8000718 <MX_GPIO_Init+0x10c>)
 80006b4:	0019      	movs	r1, r3
 80006b6:	0010      	movs	r0, r2
 80006b8:	f000 fad0 	bl	8000c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2201      	movs	r2, #1
 80006c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	193a      	adds	r2, r7, r4
 80006d6:	23a0      	movs	r3, #160	; 0xa0
 80006d8:	05db      	lsls	r3, r3, #23
 80006da:	0011      	movs	r1, r2
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 fabd 	bl	8000c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80006e2:	0021      	movs	r1, r4
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2240      	movs	r2, #64	; 0x40
 80006e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2201      	movs	r2, #1
 80006ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	4a05      	ldr	r2, [pc, #20]	; (8000714 <MX_GPIO_Init+0x108>)
 8000700:	0019      	movs	r1, r3
 8000702:	0010      	movs	r0, r2
 8000704:	f000 faaa 	bl	8000c5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	b00b      	add	sp, #44	; 0x2c
 800070e:	bd90      	pop	{r4, r7, pc}
 8000710:	40021000 	.word	0x40021000
 8000714:	50000800 	.word	0x50000800
 8000718:	50001400 	.word	0x50001400

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	e7fe      	b.n	8000724 <Error_Handler+0x8>
	...

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_MspInit+0x44>)
 8000730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <HAL_MspInit+0x44>)
 8000734:	2101      	movs	r1, #1
 8000736:	430a      	orrs	r2, r1
 8000738:	641a      	str	r2, [r3, #64]	; 0x40
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_MspInit+0x44>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	2201      	movs	r2, #1
 8000740:	4013      	ands	r3, r2
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_MspInit+0x44>)
 8000748:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_MspInit+0x44>)
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	0549      	lsls	r1, r1, #21
 8000750:	430a      	orrs	r2, r1
 8000752:	63da      	str	r2, [r3, #60]	; 0x3c
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_MspInit+0x44>)
 8000756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	055b      	lsls	r3, r3, #21
 800075c:	4013      	ands	r3, r2
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	b002      	add	sp, #8
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	40021000 	.word	0x40021000

08000770 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b095      	sub	sp, #84	; 0x54
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	233c      	movs	r3, #60	; 0x3c
 800077a:	18fb      	adds	r3, r7, r3
 800077c:	0018      	movs	r0, r3
 800077e:	2314      	movs	r3, #20
 8000780:	001a      	movs	r2, r3
 8000782:	2100      	movs	r1, #0
 8000784:	f002 f860 	bl	8002848 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000788:	2414      	movs	r4, #20
 800078a:	193b      	adds	r3, r7, r4
 800078c:	0018      	movs	r0, r3
 800078e:	2328      	movs	r3, #40	; 0x28
 8000790:	001a      	movs	r2, r3
 8000792:	2100      	movs	r1, #0
 8000794:	f002 f858 	bl	8002848 <memset>
  if(hi2c->Instance==I2C1)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a35      	ldr	r2, [pc, #212]	; (8000874 <HAL_I2C_MspInit+0x104>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d163      	bne.n	800086a <HAL_I2C_MspInit+0xfa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2220      	movs	r2, #32
 80007a6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 fa13 	bl	8001bdc <HAL_RCCEx_PeriphCLKConfig>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80007ba:	f7ff ffaf 	bl	800071c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <HAL_I2C_MspInit+0x108>)
 80007c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c2:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <HAL_I2C_MspInit+0x108>)
 80007c4:	2102      	movs	r1, #2
 80007c6:	430a      	orrs	r2, r1
 80007c8:	635a      	str	r2, [r3, #52]	; 0x34
 80007ca:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <HAL_I2C_MspInit+0x108>)
 80007cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ce:	2202      	movs	r2, #2
 80007d0:	4013      	ands	r3, r2
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b28      	ldr	r3, [pc, #160]	; (8000878 <HAL_I2C_MspInit+0x108>)
 80007d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007da:	4b27      	ldr	r3, [pc, #156]	; (8000878 <HAL_I2C_MspInit+0x108>)
 80007dc:	2101      	movs	r1, #1
 80007de:	430a      	orrs	r2, r1
 80007e0:	635a      	str	r2, [r3, #52]	; 0x34
 80007e2:	4b25      	ldr	r3, [pc, #148]	; (8000878 <HAL_I2C_MspInit+0x108>)
 80007e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007e6:	2201      	movs	r2, #1
 80007e8:	4013      	ands	r3, r2
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007ee:	213c      	movs	r1, #60	; 0x3c
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2280      	movs	r2, #128	; 0x80
 80007f4:	0092      	lsls	r2, r2, #2
 80007f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007f8:	000c      	movs	r4, r1
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2212      	movs	r2, #18
 80007fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	193b      	adds	r3, r7, r4
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2206      	movs	r2, #6
 8000810:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	193b      	adds	r3, r7, r4
 8000814:	4a19      	ldr	r2, [pc, #100]	; (800087c <HAL_I2C_MspInit+0x10c>)
 8000816:	0019      	movs	r1, r3
 8000818:	0010      	movs	r0, r2
 800081a:	f000 fa1f 	bl	8000c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800081e:	0021      	movs	r1, r4
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2280      	movs	r2, #128	; 0x80
 8000824:	0092      	lsls	r2, r2, #2
 8000826:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2212      	movs	r2, #18
 800082c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2206      	movs	r2, #6
 800083e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	187a      	adds	r2, r7, r1
 8000842:	23a0      	movs	r3, #160	; 0xa0
 8000844:	05db      	lsls	r3, r3, #23
 8000846:	0011      	movs	r1, r2
 8000848:	0018      	movs	r0, r3
 800084a:	f000 fa07 	bl	8000c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <HAL_I2C_MspInit+0x108>)
 8000850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_I2C_MspInit+0x108>)
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	0389      	lsls	r1, r1, #14
 8000858:	430a      	orrs	r2, r1
 800085a:	63da      	str	r2, [r3, #60]	; 0x3c
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_I2C_MspInit+0x108>)
 800085e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	039b      	lsls	r3, r3, #14
 8000864:	4013      	ands	r3, r2
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b015      	add	sp, #84	; 0x54
 8000870:	bd90      	pop	{r4, r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	40005400 	.word	0x40005400
 8000878:	40021000 	.word	0x40021000
 800087c:	50000400 	.word	0x50000400

08000880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b08b      	sub	sp, #44	; 0x2c
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	2414      	movs	r4, #20
 800088a:	193b      	adds	r3, r7, r4
 800088c:	0018      	movs	r0, r3
 800088e:	2314      	movs	r3, #20
 8000890:	001a      	movs	r2, r3
 8000892:	2100      	movs	r1, #0
 8000894:	f001 ffd8 	bl	8002848 <memset>
  if(huart->Instance==USART2)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a1b      	ldr	r2, [pc, #108]	; (800090c <HAL_UART_MspInit+0x8c>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d130      	bne.n	8000904 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <HAL_UART_MspInit+0x90>)
 80008a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <HAL_UART_MspInit+0x90>)
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	0289      	lsls	r1, r1, #10
 80008ac:	430a      	orrs	r2, r1
 80008ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_UART_MspInit+0x90>)
 80008b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	029b      	lsls	r3, r3, #10
 80008b8:	4013      	ands	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <HAL_UART_MspInit+0x90>)
 80008c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <HAL_UART_MspInit+0x90>)
 80008c4:	2101      	movs	r1, #1
 80008c6:	430a      	orrs	r2, r1
 80008c8:	635a      	str	r2, [r3, #52]	; 0x34
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <HAL_UART_MspInit+0x90>)
 80008cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ce:	2201      	movs	r2, #1
 80008d0:	4013      	ands	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 80008d6:	0021      	movs	r1, r4
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	220c      	movs	r2, #12
 80008dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2202      	movs	r2, #2
 80008e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2201      	movs	r2, #1
 80008e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2201      	movs	r2, #1
 80008f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	23a0      	movs	r3, #160	; 0xa0
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	0011      	movs	r1, r2
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 f9ac 	bl	8000c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b00b      	add	sp, #44	; 0x2c
 800090a:	bd90      	pop	{r4, r7, pc}
 800090c:	40004400 	.word	0x40004400
 8000910:	40021000 	.word	0x40021000

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <NMI_Handler+0x4>

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000938:	f000 f89c 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800094e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000950:	f7ff fff7 	bl	8000942 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	; (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <LoopForever+0xe>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	; (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800097a:	f001 ff41 	bl	8002800 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800097e:	f7ff fd63 	bl	8000448 <main>

08000982 <LoopForever>:

LoopForever:
  b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   r0, =_estack
 8000984:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000990:	080028f8 	.word	0x080028f8
  ldr r2, =_sbss
 8000994:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000998:	20000114 	.word	0x20000114

0800099c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_IRQHandler>
	...

080009a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_Init+0x3c>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_Init+0x3c>)
 80009b2:	2180      	movs	r1, #128	; 0x80
 80009b4:	0049      	lsls	r1, r1, #1
 80009b6:	430a      	orrs	r2, r1
 80009b8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009ba:	2000      	movs	r0, #0
 80009bc:	f000 f810 	bl	80009e0 <HAL_InitTick>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d003      	beq.n	80009cc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80009c4:	1dfb      	adds	r3, r7, #7
 80009c6:	2201      	movs	r2, #1
 80009c8:	701a      	strb	r2, [r3, #0]
 80009ca:	e001      	b.n	80009d0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80009cc:	f7ff feac 	bl	8000728 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009d0:	1dfb      	adds	r3, r7, #7
 80009d2:	781b      	ldrb	r3, [r3, #0]
}
 80009d4:	0018      	movs	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b002      	add	sp, #8
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40022000 	.word	0x40022000

080009e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009e8:	230f      	movs	r3, #15
 80009ea:	18fb      	adds	r3, r7, r3
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <HAL_InitTick+0x88>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d02b      	beq.n	8000a50 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <HAL_InitTick+0x8c>)
 80009fa:	681c      	ldr	r4, [r3, #0]
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <HAL_InitTick+0x88>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	0019      	movs	r1, r3
 8000a02:	23fa      	movs	r3, #250	; 0xfa
 8000a04:	0098      	lsls	r0, r3, #2
 8000a06:	f7ff fb7d 	bl	8000104 <__udivsi3>
 8000a0a:	0003      	movs	r3, r0
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	0020      	movs	r0, r4
 8000a10:	f7ff fb78 	bl	8000104 <__udivsi3>
 8000a14:	0003      	movs	r3, r0
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 f913 	bl	8000c42 <HAL_SYSTICK_Config>
 8000a1c:	1e03      	subs	r3, r0, #0
 8000a1e:	d112      	bne.n	8000a46 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d80a      	bhi.n	8000a3c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	2301      	movs	r3, #1
 8000a2a:	425b      	negs	r3, r3
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f000 f8f2 	bl	8000c18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HAL_InitTick+0x90>)
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	e00d      	b.n	8000a58 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
 8000a44:	e008      	b.n	8000a58 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a46:	230f      	movs	r3, #15
 8000a48:	18fb      	adds	r3, r7, r3
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	701a      	strb	r2, [r3, #0]
 8000a4e:	e003      	b.n	8000a58 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a50:	230f      	movs	r3, #15
 8000a52:	18fb      	adds	r3, r7, r3
 8000a54:	2201      	movs	r2, #1
 8000a56:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a58:	230f      	movs	r3, #15
 8000a5a:	18fb      	adds	r3, r7, r3
 8000a5c:	781b      	ldrb	r3, [r3, #0]
}
 8000a5e:	0018      	movs	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b005      	add	sp, #20
 8000a64:	bd90      	pop	{r4, r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	20000004 	.word	0x20000004

08000a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_IncTick+0x1c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_IncTick+0x20>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	18d2      	adds	r2, r2, r3
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <HAL_IncTick+0x20>)
 8000a86:	601a      	str	r2, [r3, #0]
}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000110 	.word	0x20000110

08000a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a9c:	4b02      	ldr	r3, [pc, #8]	; (8000aa8 <HAL_GetTick+0x10>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	20000110 	.word	0x20000110

08000aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab4:	f7ff fff0 	bl	8000a98 <HAL_GetTick>
 8000ab8:	0003      	movs	r3, r0
 8000aba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	d005      	beq.n	8000ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <HAL_Delay+0x44>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	001a      	movs	r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	189b      	adds	r3, r3, r2
 8000ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	f7ff ffe0 	bl	8000a98 <HAL_GetTick>
 8000ad8:	0002      	movs	r2, r0
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d8f7      	bhi.n	8000ad4 <HAL_Delay+0x28>
  {
  }
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b004      	add	sp, #16
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	20000008 	.word	0x20000008

08000af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	0002      	movs	r2, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b7f      	cmp	r3, #127	; 0x7f
 8000b08:	d828      	bhi.n	8000b5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b0a:	4a2f      	ldr	r2, [pc, #188]	; (8000bc8 <__NVIC_SetPriority+0xd4>)
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b25b      	sxtb	r3, r3
 8000b12:	089b      	lsrs	r3, r3, #2
 8000b14:	33c0      	adds	r3, #192	; 0xc0
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	589b      	ldr	r3, [r3, r2]
 8000b1a:	1dfa      	adds	r2, r7, #7
 8000b1c:	7812      	ldrb	r2, [r2, #0]
 8000b1e:	0011      	movs	r1, r2
 8000b20:	2203      	movs	r2, #3
 8000b22:	400a      	ands	r2, r1
 8000b24:	00d2      	lsls	r2, r2, #3
 8000b26:	21ff      	movs	r1, #255	; 0xff
 8000b28:	4091      	lsls	r1, r2
 8000b2a:	000a      	movs	r2, r1
 8000b2c:	43d2      	mvns	r2, r2
 8000b2e:	401a      	ands	r2, r3
 8000b30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	019b      	lsls	r3, r3, #6
 8000b36:	22ff      	movs	r2, #255	; 0xff
 8000b38:	401a      	ands	r2, r3
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	0018      	movs	r0, r3
 8000b40:	2303      	movs	r3, #3
 8000b42:	4003      	ands	r3, r0
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b48:	481f      	ldr	r0, [pc, #124]	; (8000bc8 <__NVIC_SetPriority+0xd4>)
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b25b      	sxtb	r3, r3
 8000b50:	089b      	lsrs	r3, r3, #2
 8000b52:	430a      	orrs	r2, r1
 8000b54:	33c0      	adds	r3, #192	; 0xc0
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b5a:	e031      	b.n	8000bc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <__NVIC_SetPriority+0xd8>)
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	0019      	movs	r1, r3
 8000b64:	230f      	movs	r3, #15
 8000b66:	400b      	ands	r3, r1
 8000b68:	3b08      	subs	r3, #8
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	3306      	adds	r3, #6
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	18d3      	adds	r3, r2, r3
 8000b72:	3304      	adds	r3, #4
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	1dfa      	adds	r2, r7, #7
 8000b78:	7812      	ldrb	r2, [r2, #0]
 8000b7a:	0011      	movs	r1, r2
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	400a      	ands	r2, r1
 8000b80:	00d2      	lsls	r2, r2, #3
 8000b82:	21ff      	movs	r1, #255	; 0xff
 8000b84:	4091      	lsls	r1, r2
 8000b86:	000a      	movs	r2, r1
 8000b88:	43d2      	mvns	r2, r2
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	019b      	lsls	r3, r3, #6
 8000b92:	22ff      	movs	r2, #255	; 0xff
 8000b94:	401a      	ands	r2, r3
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	4003      	ands	r3, r0
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba4:	4809      	ldr	r0, [pc, #36]	; (8000bcc <__NVIC_SetPriority+0xd8>)
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	001c      	movs	r4, r3
 8000bac:	230f      	movs	r3, #15
 8000bae:	4023      	ands	r3, r4
 8000bb0:	3b08      	subs	r3, #8
 8000bb2:	089b      	lsrs	r3, r3, #2
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	3306      	adds	r3, #6
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	18c3      	adds	r3, r0, r3
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	601a      	str	r2, [r3, #0]
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b003      	add	sp, #12
 8000bc6:	bd90      	pop	{r4, r7, pc}
 8000bc8:	e000e100 	.word	0xe000e100
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	1e5a      	subs	r2, r3, #1
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	045b      	lsls	r3, r3, #17
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d301      	bcc.n	8000be8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be4:	2301      	movs	r3, #1
 8000be6:	e010      	b.n	8000c0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <SysTick_Config+0x44>)
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	3a01      	subs	r2, #1
 8000bee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	425b      	negs	r3, r3
 8000bf4:	2103      	movs	r1, #3
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f7ff ff7c 	bl	8000af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <SysTick_Config+0x44>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SysTick_Config+0x44>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b002      	add	sp, #8
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	210f      	movs	r1, #15
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	1c02      	adds	r2, r0, #0
 8000c28:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	b25b      	sxtb	r3, r3
 8000c32:	0011      	movs	r1, r2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff ff5d 	bl	8000af4 <__NVIC_SetPriority>
}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b004      	add	sp, #16
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff ffbf 	bl	8000bd0 <SysTick_Config>
 8000c52:	0003      	movs	r3, r0
}
 8000c54:	0018      	movs	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b002      	add	sp, #8
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6a:	e147      	b.n	8000efc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2101      	movs	r1, #1
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	4091      	lsls	r1, r2
 8000c76:	000a      	movs	r2, r1
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d100      	bne.n	8000c84 <HAL_GPIO_Init+0x28>
 8000c82:	e138      	b.n	8000ef6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	2203      	movs	r2, #3
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d005      	beq.n	8000c9c <HAL_GPIO_Init+0x40>
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2203      	movs	r2, #3
 8000c96:	4013      	ands	r3, r2
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d130      	bne.n	8000cfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	409a      	lsls	r2, r3
 8000caa:	0013      	movs	r3, r2
 8000cac:	43da      	mvns	r2, r3
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	409a      	lsls	r2, r3
 8000cbe:	0013      	movs	r3, r2
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	0013      	movs	r3, r2
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	091b      	lsrs	r3, r3, #4
 8000ce8:	2201      	movs	r2, #1
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	0013      	movs	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	2203      	movs	r2, #3
 8000d04:	4013      	ands	r3, r2
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	d017      	beq.n	8000d3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	2203      	movs	r2, #3
 8000d16:	409a      	lsls	r2, r3
 8000d18:	0013      	movs	r3, r2
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	689a      	ldr	r2, [r3, #8]
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	0013      	movs	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2203      	movs	r2, #3
 8000d40:	4013      	ands	r3, r2
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d123      	bne.n	8000d8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	08da      	lsrs	r2, r3, #3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3208      	adds	r2, #8
 8000d4e:	0092      	lsls	r2, r2, #2
 8000d50:	58d3      	ldr	r3, [r2, r3]
 8000d52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	2207      	movs	r2, #7
 8000d58:	4013      	ands	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	0013      	movs	r3, r2
 8000d62:	43da      	mvns	r2, r3
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	691a      	ldr	r2, [r3, #16]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2107      	movs	r1, #7
 8000d72:	400b      	ands	r3, r1
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	409a      	lsls	r2, r3
 8000d78:	0013      	movs	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	08da      	lsrs	r2, r3, #3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3208      	adds	r2, #8
 8000d88:	0092      	lsls	r2, r2, #2
 8000d8a:	6939      	ldr	r1, [r7, #16]
 8000d8c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	2203      	movs	r2, #3
 8000d9a:	409a      	lsls	r2, r3
 8000d9c:	0013      	movs	r3, r2
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2203      	movs	r2, #3
 8000dac:	401a      	ands	r2, r3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	23c0      	movs	r3, #192	; 0xc0
 8000dc8:	029b      	lsls	r3, r3, #10
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d100      	bne.n	8000dd0 <HAL_GPIO_Init+0x174>
 8000dce:	e092      	b.n	8000ef6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000dd0:	4a50      	ldr	r2, [pc, #320]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	089b      	lsrs	r3, r3, #2
 8000dd6:	3318      	adds	r3, #24
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	589b      	ldr	r3, [r3, r2]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	2203      	movs	r2, #3
 8000de2:	4013      	ands	r3, r2
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	220f      	movs	r2, #15
 8000de8:	409a      	lsls	r2, r3
 8000dea:	0013      	movs	r3, r2
 8000dec:	43da      	mvns	r2, r3
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	23a0      	movs	r3, #160	; 0xa0
 8000df8:	05db      	lsls	r3, r3, #23
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d013      	beq.n	8000e26 <HAL_GPIO_Init+0x1ca>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a45      	ldr	r2, [pc, #276]	; (8000f18 <HAL_GPIO_Init+0x2bc>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00d      	beq.n	8000e22 <HAL_GPIO_Init+0x1c6>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a44      	ldr	r2, [pc, #272]	; (8000f1c <HAL_GPIO_Init+0x2c0>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d007      	beq.n	8000e1e <HAL_GPIO_Init+0x1c2>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a43      	ldr	r2, [pc, #268]	; (8000f20 <HAL_GPIO_Init+0x2c4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d101      	bne.n	8000e1a <HAL_GPIO_Init+0x1be>
 8000e16:	2303      	movs	r3, #3
 8000e18:	e006      	b.n	8000e28 <HAL_GPIO_Init+0x1cc>
 8000e1a:	2305      	movs	r3, #5
 8000e1c:	e004      	b.n	8000e28 <HAL_GPIO_Init+0x1cc>
 8000e1e:	2302      	movs	r3, #2
 8000e20:	e002      	b.n	8000e28 <HAL_GPIO_Init+0x1cc>
 8000e22:	2301      	movs	r3, #1
 8000e24:	e000      	b.n	8000e28 <HAL_GPIO_Init+0x1cc>
 8000e26:	2300      	movs	r3, #0
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	2103      	movs	r1, #3
 8000e2c:	400a      	ands	r2, r1
 8000e2e:	00d2      	lsls	r2, r2, #3
 8000e30:	4093      	lsls	r3, r2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000e38:	4936      	ldr	r1, [pc, #216]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	089b      	lsrs	r3, r3, #2
 8000e3e:	3318      	adds	r3, #24
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e46:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	035b      	lsls	r3, r3, #13
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e6a:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000e70:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	43da      	mvns	r2, r3
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	039b      	lsls	r3, r3, #14
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e94:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e9a:	4a1e      	ldr	r2, [pc, #120]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000e9c:	2384      	movs	r3, #132	; 0x84
 8000e9e:	58d3      	ldr	r3, [r2, r3]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	43da      	mvns	r2, r3
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	029b      	lsls	r3, r3, #10
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	d003      	beq.n	8000ec0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ec0:	4914      	ldr	r1, [pc, #80]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000ec2:	2284      	movs	r2, #132	; 0x84
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000ec8:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	58d3      	ldr	r3, [r2, r3]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	025b      	lsls	r3, r3, #9
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000eee:	4909      	ldr	r1, [pc, #36]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	40da      	lsrs	r2, r3
 8000f04:	1e13      	subs	r3, r2, #0
 8000f06:	d000      	beq.n	8000f0a <HAL_GPIO_Init+0x2ae>
 8000f08:	e6b0      	b.n	8000c6c <HAL_GPIO_Init+0x10>
  }
}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b006      	add	sp, #24
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40021800 	.word	0x40021800
 8000f18:	50000400 	.word	0x50000400
 8000f1c:	50000800 	.word	0x50000800
 8000f20:	50000c00 	.word	0x50000c00

08000f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	0008      	movs	r0, r1
 8000f2e:	0011      	movs	r1, r2
 8000f30:	1cbb      	adds	r3, r7, #2
 8000f32:	1c02      	adds	r2, r0, #0
 8000f34:	801a      	strh	r2, [r3, #0]
 8000f36:	1c7b      	adds	r3, r7, #1
 8000f38:	1c0a      	adds	r2, r1, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f3c:	1c7b      	adds	r3, r7, #1
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d004      	beq.n	8000f4e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f44:	1cbb      	adds	r3, r7, #2
 8000f46:	881a      	ldrh	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f4c:	e003      	b.n	8000f56 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f4e:	1cbb      	adds	r3, r7, #2
 8000f50:	881a      	ldrh	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e082      	b.n	8001078 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2241      	movs	r2, #65	; 0x41
 8000f76:	5c9b      	ldrb	r3, [r3, r2]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d107      	bne.n	8000f8e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2240      	movs	r2, #64	; 0x40
 8000f82:	2100      	movs	r1, #0
 8000f84:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff fbf1 	bl	8000770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2241      	movs	r2, #65	; 0x41
 8000f92:	2124      	movs	r1, #36	; 0x24
 8000f94:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	438a      	bics	r2, r1
 8000fa4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4934      	ldr	r1, [pc, #208]	; (8001080 <HAL_I2C_Init+0x120>)
 8000fb0:	400a      	ands	r2, r1
 8000fb2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4931      	ldr	r1, [pc, #196]	; (8001084 <HAL_I2C_Init+0x124>)
 8000fc0:	400a      	ands	r2, r1
 8000fc2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d108      	bne.n	8000fde <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2180      	movs	r1, #128	; 0x80
 8000fd6:	0209      	lsls	r1, r1, #8
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	e007      	b.n	8000fee <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2184      	movs	r1, #132	; 0x84
 8000fe8:	0209      	lsls	r1, r1, #8
 8000fea:	430a      	orrs	r2, r1
 8000fec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d104      	bne.n	8001000 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	491f      	ldr	r1, [pc, #124]	; (8001088 <HAL_I2C_Init+0x128>)
 800100c:	430a      	orrs	r2, r1
 800100e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	491a      	ldr	r1, [pc, #104]	; (8001084 <HAL_I2C_Init+0x124>)
 800101c:	400a      	ands	r2, r1
 800101e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	691a      	ldr	r2, [r3, #16]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	431a      	orrs	r2, r3
 800102a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	430a      	orrs	r2, r1
 8001038:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69d9      	ldr	r1, [r3, #28]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a1a      	ldr	r2, [r3, #32]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	430a      	orrs	r2, r1
 8001048:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	430a      	orrs	r2, r1
 8001058:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2241      	movs	r2, #65	; 0x41
 8001064:	2120      	movs	r1, #32
 8001066:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2242      	movs	r2, #66	; 0x42
 8001072:	2100      	movs	r1, #0
 8001074:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001076:	2300      	movs	r3, #0
}
 8001078:	0018      	movs	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	b002      	add	sp, #8
 800107e:	bd80      	pop	{r7, pc}
 8001080:	f0ffffff 	.word	0xf0ffffff
 8001084:	ffff7fff 	.word	0xffff7fff
 8001088:	02008000 	.word	0x02008000

0800108c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2241      	movs	r2, #65	; 0x41
 800109a:	5c9b      	ldrb	r3, [r3, r2]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b20      	cmp	r3, #32
 80010a0:	d138      	bne.n	8001114 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2240      	movs	r2, #64	; 0x40
 80010a6:	5c9b      	ldrb	r3, [r3, r2]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d101      	bne.n	80010b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80010ac:	2302      	movs	r3, #2
 80010ae:	e032      	b.n	8001116 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2240      	movs	r2, #64	; 0x40
 80010b4:	2101      	movs	r1, #1
 80010b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2241      	movs	r2, #65	; 0x41
 80010bc:	2124      	movs	r1, #36	; 0x24
 80010be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2101      	movs	r1, #1
 80010cc:	438a      	bics	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4911      	ldr	r1, [pc, #68]	; (8001120 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80010dc:	400a      	ands	r2, r1
 80010de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6819      	ldr	r1, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2101      	movs	r1, #1
 80010fc:	430a      	orrs	r2, r1
 80010fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2241      	movs	r2, #65	; 0x41
 8001104:	2120      	movs	r1, #32
 8001106:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2240      	movs	r2, #64	; 0x40
 800110c:	2100      	movs	r1, #0
 800110e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001110:	2300      	movs	r3, #0
 8001112:	e000      	b.n	8001116 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001114:	2302      	movs	r3, #2
  }
}
 8001116:	0018      	movs	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	b002      	add	sp, #8
 800111c:	bd80      	pop	{r7, pc}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	ffffefff 	.word	0xffffefff

08001124 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2241      	movs	r2, #65	; 0x41
 8001132:	5c9b      	ldrb	r3, [r3, r2]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b20      	cmp	r3, #32
 8001138:	d139      	bne.n	80011ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2240      	movs	r2, #64	; 0x40
 800113e:	5c9b      	ldrb	r3, [r3, r2]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d101      	bne.n	8001148 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001144:	2302      	movs	r3, #2
 8001146:	e033      	b.n	80011b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2240      	movs	r2, #64	; 0x40
 800114c:	2101      	movs	r1, #1
 800114e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2241      	movs	r2, #65	; 0x41
 8001154:	2124      	movs	r1, #36	; 0x24
 8001156:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2101      	movs	r1, #1
 8001164:	438a      	bics	r2, r1
 8001166:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001174:	4013      	ands	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2101      	movs	r1, #1
 8001196:	430a      	orrs	r2, r1
 8001198:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2241      	movs	r2, #65	; 0x41
 800119e:	2120      	movs	r1, #32
 80011a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2240      	movs	r2, #64	; 0x40
 80011a6:	2100      	movs	r1, #0
 80011a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80011ae:	2302      	movs	r3, #2
  }
}
 80011b0:	0018      	movs	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b004      	add	sp, #16
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	fffff0ff 	.word	0xfffff0ff

080011bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80011c4:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a19      	ldr	r2, [pc, #100]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	0019      	movs	r1, r3
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	429a      	cmp	r2, r3
 80011de:	d11f      	bne.n	8001220 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	0013      	movs	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	189b      	adds	r3, r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4912      	ldr	r1, [pc, #72]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80011ee:	0018      	movs	r0, r3
 80011f0:	f7fe ff88 	bl	8000104 <__udivsi3>
 80011f4:	0003      	movs	r3, r0
 80011f6:	3301      	adds	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011fa:	e008      	b.n	800120e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3b01      	subs	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	e001      	b.n	800120e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e009      	b.n	8001222 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	401a      	ands	r2, r3
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	429a      	cmp	r2, r3
 800121e:	d0ed      	beq.n	80011fc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	0018      	movs	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	b004      	add	sp, #16
 8001228:	bd80      	pop	{r7, pc}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	40007000 	.word	0x40007000
 8001230:	fffff9ff 	.word	0xfffff9ff
 8001234:	20000000 	.word	0x20000000
 8001238:	000f4240 	.word	0x000f4240

0800123c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	23e0      	movs	r3, #224	; 0xe0
 8001246:	01db      	lsls	r3, r3, #7
 8001248:	4013      	ands	r3, r2
}
 800124a:	0018      	movs	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021000 	.word	0x40021000

08001254 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e2fe      	b.n	8001864 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2201      	movs	r2, #1
 800126c:	4013      	ands	r3, r2
 800126e:	d100      	bne.n	8001272 <HAL_RCC_OscConfig+0x1e>
 8001270:	e07c      	b.n	800136c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001272:	4bc3      	ldr	r3, [pc, #780]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2238      	movs	r2, #56	; 0x38
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800127c:	4bc0      	ldr	r3, [pc, #768]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	2203      	movs	r2, #3
 8001282:	4013      	ands	r3, r2
 8001284:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	2b10      	cmp	r3, #16
 800128a:	d102      	bne.n	8001292 <HAL_RCC_OscConfig+0x3e>
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d002      	beq.n	8001298 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	2b08      	cmp	r3, #8
 8001296:	d10b      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	4bb9      	ldr	r3, [pc, #740]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	029b      	lsls	r3, r3, #10
 80012a0:	4013      	ands	r3, r2
 80012a2:	d062      	beq.n	800136a <HAL_RCC_OscConfig+0x116>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d15e      	bne.n	800136a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e2d9      	b.n	8001864 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	025b      	lsls	r3, r3, #9
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d107      	bne.n	80012cc <HAL_RCC_OscConfig+0x78>
 80012bc:	4bb0      	ldr	r3, [pc, #704]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4baf      	ldr	r3, [pc, #700]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80012c2:	2180      	movs	r1, #128	; 0x80
 80012c4:	0249      	lsls	r1, r1, #9
 80012c6:	430a      	orrs	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	e020      	b.n	800130e <HAL_RCC_OscConfig+0xba>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	23a0      	movs	r3, #160	; 0xa0
 80012d2:	02db      	lsls	r3, r3, #11
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d10e      	bne.n	80012f6 <HAL_RCC_OscConfig+0xa2>
 80012d8:	4ba9      	ldr	r3, [pc, #676]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4ba8      	ldr	r3, [pc, #672]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80012de:	2180      	movs	r1, #128	; 0x80
 80012e0:	02c9      	lsls	r1, r1, #11
 80012e2:	430a      	orrs	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	4ba6      	ldr	r3, [pc, #664]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4ba5      	ldr	r3, [pc, #660]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80012ec:	2180      	movs	r1, #128	; 0x80
 80012ee:	0249      	lsls	r1, r1, #9
 80012f0:	430a      	orrs	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	e00b      	b.n	800130e <HAL_RCC_OscConfig+0xba>
 80012f6:	4ba2      	ldr	r3, [pc, #648]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4ba1      	ldr	r3, [pc, #644]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80012fc:	49a1      	ldr	r1, [pc, #644]	; (8001584 <HAL_RCC_OscConfig+0x330>)
 80012fe:	400a      	ands	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	4b9f      	ldr	r3, [pc, #636]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b9e      	ldr	r3, [pc, #632]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001308:	499f      	ldr	r1, [pc, #636]	; (8001588 <HAL_RCC_OscConfig+0x334>)
 800130a:	400a      	ands	r2, r1
 800130c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d014      	beq.n	8001340 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001316:	f7ff fbbf 	bl	8000a98 <HAL_GetTick>
 800131a:	0003      	movs	r3, r0
 800131c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fbba 	bl	8000a98 <HAL_GetTick>
 8001324:	0002      	movs	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e298      	b.n	8001864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001332:	4b93      	ldr	r3, [pc, #588]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	029b      	lsls	r3, r3, #10
 800133a:	4013      	ands	r3, r2
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0xcc>
 800133e:	e015      	b.n	800136c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fbaa 	bl	8000a98 <HAL_GetTick>
 8001344:	0003      	movs	r3, r0
 8001346:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800134a:	f7ff fba5 	bl	8000a98 <HAL_GetTick>
 800134e:	0002      	movs	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b64      	cmp	r3, #100	; 0x64
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e283      	b.n	8001864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800135c:	4b88      	ldr	r3, [pc, #544]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	029b      	lsls	r3, r3, #10
 8001364:	4013      	ands	r3, r2
 8001366:	d1f0      	bne.n	800134a <HAL_RCC_OscConfig+0xf6>
 8001368:	e000      	b.n	800136c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2202      	movs	r2, #2
 8001372:	4013      	ands	r3, r2
 8001374:	d100      	bne.n	8001378 <HAL_RCC_OscConfig+0x124>
 8001376:	e099      	b.n	80014ac <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001378:	4b81      	ldr	r3, [pc, #516]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2238      	movs	r2, #56	; 0x38
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001382:	4b7f      	ldr	r3, [pc, #508]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2203      	movs	r2, #3
 8001388:	4013      	ands	r3, r2
 800138a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	2b10      	cmp	r3, #16
 8001390:	d102      	bne.n	8001398 <HAL_RCC_OscConfig+0x144>
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d002      	beq.n	800139e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d135      	bne.n	800140a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800139e:	4b78      	ldr	r3, [pc, #480]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	4013      	ands	r3, r2
 80013a8:	d005      	beq.n	80013b6 <HAL_RCC_OscConfig+0x162>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e256      	b.n	8001864 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b6:	4b72      	ldr	r3, [pc, #456]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	4a74      	ldr	r2, [pc, #464]	; (800158c <HAL_RCC_OscConfig+0x338>)
 80013bc:	4013      	ands	r3, r2
 80013be:	0019      	movs	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	021a      	lsls	r2, r3, #8
 80013c6:	4b6e      	ldr	r3, [pc, #440]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80013c8:	430a      	orrs	r2, r1
 80013ca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d112      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013d2:	4b6b      	ldr	r3, [pc, #428]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a6e      	ldr	r2, [pc, #440]	; (8001590 <HAL_RCC_OscConfig+0x33c>)
 80013d8:	4013      	ands	r3, r2
 80013da:	0019      	movs	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	4b67      	ldr	r3, [pc, #412]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80013e2:	430a      	orrs	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80013e6:	4b66      	ldr	r3, [pc, #408]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	0adb      	lsrs	r3, r3, #11
 80013ec:	2207      	movs	r2, #7
 80013ee:	4013      	ands	r3, r2
 80013f0:	4a68      	ldr	r2, [pc, #416]	; (8001594 <HAL_RCC_OscConfig+0x340>)
 80013f2:	40da      	lsrs	r2, r3
 80013f4:	4b68      	ldr	r3, [pc, #416]	; (8001598 <HAL_RCC_OscConfig+0x344>)
 80013f6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013f8:	4b68      	ldr	r3, [pc, #416]	; (800159c <HAL_RCC_OscConfig+0x348>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff faef 	bl	80009e0 <HAL_InitTick>
 8001402:	1e03      	subs	r3, r0, #0
 8001404:	d051      	beq.n	80014aa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e22c      	b.n	8001864 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d030      	beq.n	8001474 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001412:	4b5b      	ldr	r3, [pc, #364]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a5e      	ldr	r2, [pc, #376]	; (8001590 <HAL_RCC_OscConfig+0x33c>)
 8001418:	4013      	ands	r3, r2
 800141a:	0019      	movs	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	4b57      	ldr	r3, [pc, #348]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001422:	430a      	orrs	r2, r1
 8001424:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001426:	4b56      	ldr	r3, [pc, #344]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b55      	ldr	r3, [pc, #340]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800142c:	2180      	movs	r1, #128	; 0x80
 800142e:	0049      	lsls	r1, r1, #1
 8001430:	430a      	orrs	r2, r1
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fb30 	bl	8000a98 <HAL_GetTick>
 8001438:	0003      	movs	r3, r0
 800143a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143e:	f7ff fb2b 	bl	8000a98 <HAL_GetTick>
 8001442:	0002      	movs	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e209      	b.n	8001864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001450:	4b4b      	ldr	r3, [pc, #300]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4013      	ands	r3, r2
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b48      	ldr	r3, [pc, #288]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	4a4a      	ldr	r2, [pc, #296]	; (800158c <HAL_RCC_OscConfig+0x338>)
 8001462:	4013      	ands	r3, r2
 8001464:	0019      	movs	r1, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	021a      	lsls	r2, r3, #8
 800146c:	4b44      	ldr	r3, [pc, #272]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800146e:	430a      	orrs	r2, r1
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	e01b      	b.n	80014ac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001474:	4b42      	ldr	r3, [pc, #264]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b41      	ldr	r3, [pc, #260]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800147a:	4949      	ldr	r1, [pc, #292]	; (80015a0 <HAL_RCC_OscConfig+0x34c>)
 800147c:	400a      	ands	r2, r1
 800147e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fb0a 	bl	8000a98 <HAL_GetTick>
 8001484:	0003      	movs	r3, r0
 8001486:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148a:	f7ff fb05 	bl	8000a98 <HAL_GetTick>
 800148e:	0002      	movs	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e1e3      	b.n	8001864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800149c:	4b38      	ldr	r3, [pc, #224]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4013      	ands	r3, r2
 80014a6:	d1f0      	bne.n	800148a <HAL_RCC_OscConfig+0x236>
 80014a8:	e000      	b.n	80014ac <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2208      	movs	r2, #8
 80014b2:	4013      	ands	r3, r2
 80014b4:	d047      	beq.n	8001546 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80014b6:	4b32      	ldr	r3, [pc, #200]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2238      	movs	r2, #56	; 0x38
 80014bc:	4013      	ands	r3, r2
 80014be:	2b18      	cmp	r3, #24
 80014c0:	d10a      	bne.n	80014d8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80014c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c6:	2202      	movs	r2, #2
 80014c8:	4013      	ands	r3, r2
 80014ca:	d03c      	beq.n	8001546 <HAL_RCC_OscConfig+0x2f2>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d138      	bne.n	8001546 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e1c5      	b.n	8001864 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d019      	beq.n	8001514 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80014e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014e4:	4b26      	ldr	r3, [pc, #152]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80014e6:	2101      	movs	r1, #1
 80014e8:	430a      	orrs	r2, r1
 80014ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff fad4 	bl	8000a98 <HAL_GetTick>
 80014f0:	0003      	movs	r3, r0
 80014f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f6:	f7ff facf 	bl	8000a98 <HAL_GetTick>
 80014fa:	0002      	movs	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e1ad      	b.n	8001864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001508:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800150a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150c:	2202      	movs	r2, #2
 800150e:	4013      	ands	r3, r2
 8001510:	d0f1      	beq.n	80014f6 <HAL_RCC_OscConfig+0x2a2>
 8001512:	e018      	b.n	8001546 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001514:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001516:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800151a:	2101      	movs	r1, #1
 800151c:	438a      	bics	r2, r1
 800151e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001520:	f7ff faba 	bl	8000a98 <HAL_GetTick>
 8001524:	0003      	movs	r3, r0
 8001526:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152a:	f7ff fab5 	bl	8000a98 <HAL_GetTick>
 800152e:	0002      	movs	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e193      	b.n	8001864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800153e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001540:	2202      	movs	r2, #2
 8001542:	4013      	ands	r3, r2
 8001544:	d1f1      	bne.n	800152a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2204      	movs	r2, #4
 800154c:	4013      	ands	r3, r2
 800154e:	d100      	bne.n	8001552 <HAL_RCC_OscConfig+0x2fe>
 8001550:	e0c6      	b.n	80016e0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001552:	231f      	movs	r3, #31
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2238      	movs	r2, #56	; 0x38
 8001560:	4013      	ands	r3, r2
 8001562:	2b20      	cmp	r3, #32
 8001564:	d11e      	bne.n	80015a4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156a:	2202      	movs	r2, #2
 800156c:	4013      	ands	r3, r2
 800156e:	d100      	bne.n	8001572 <HAL_RCC_OscConfig+0x31e>
 8001570:	e0b6      	b.n	80016e0 <HAL_RCC_OscConfig+0x48c>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d000      	beq.n	800157c <HAL_RCC_OscConfig+0x328>
 800157a:	e0b1      	b.n	80016e0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e171      	b.n	8001864 <HAL_RCC_OscConfig+0x610>
 8001580:	40021000 	.word	0x40021000
 8001584:	fffeffff 	.word	0xfffeffff
 8001588:	fffbffff 	.word	0xfffbffff
 800158c:	ffff80ff 	.word	0xffff80ff
 8001590:	ffffc7ff 	.word	0xffffc7ff
 8001594:	00f42400 	.word	0x00f42400
 8001598:	20000000 	.word	0x20000000
 800159c:	20000004 	.word	0x20000004
 80015a0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015a4:	4bb1      	ldr	r3, [pc, #708]	; (800186c <HAL_RCC_OscConfig+0x618>)
 80015a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	055b      	lsls	r3, r3, #21
 80015ac:	4013      	ands	r3, r2
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_OscConfig+0x360>
 80015b0:	2301      	movs	r3, #1
 80015b2:	e000      	b.n	80015b6 <HAL_RCC_OscConfig+0x362>
 80015b4:	2300      	movs	r3, #0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d011      	beq.n	80015de <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4bac      	ldr	r3, [pc, #688]	; (800186c <HAL_RCC_OscConfig+0x618>)
 80015bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015be:	4bab      	ldr	r3, [pc, #684]	; (800186c <HAL_RCC_OscConfig+0x618>)
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	0549      	lsls	r1, r1, #21
 80015c4:	430a      	orrs	r2, r1
 80015c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80015c8:	4ba8      	ldr	r3, [pc, #672]	; (800186c <HAL_RCC_OscConfig+0x618>)
 80015ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	055b      	lsls	r3, r3, #21
 80015d0:	4013      	ands	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80015d6:	231f      	movs	r3, #31
 80015d8:	18fb      	adds	r3, r7, r3
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015de:	4ba4      	ldr	r3, [pc, #656]	; (8001870 <HAL_RCC_OscConfig+0x61c>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4013      	ands	r3, r2
 80015e8:	d11a      	bne.n	8001620 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015ea:	4ba1      	ldr	r3, [pc, #644]	; (8001870 <HAL_RCC_OscConfig+0x61c>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4ba0      	ldr	r3, [pc, #640]	; (8001870 <HAL_RCC_OscConfig+0x61c>)
 80015f0:	2180      	movs	r1, #128	; 0x80
 80015f2:	0049      	lsls	r1, r1, #1
 80015f4:	430a      	orrs	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fa4e 	bl	8000a98 <HAL_GetTick>
 80015fc:	0003      	movs	r3, r0
 80015fe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001602:	f7ff fa49 	bl	8000a98 <HAL_GetTick>
 8001606:	0002      	movs	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e127      	b.n	8001864 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001614:	4b96      	ldr	r3, [pc, #600]	; (8001870 <HAL_RCC_OscConfig+0x61c>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4013      	ands	r3, r2
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d106      	bne.n	8001636 <HAL_RCC_OscConfig+0x3e2>
 8001628:	4b90      	ldr	r3, [pc, #576]	; (800186c <HAL_RCC_OscConfig+0x618>)
 800162a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800162c:	4b8f      	ldr	r3, [pc, #572]	; (800186c <HAL_RCC_OscConfig+0x618>)
 800162e:	2101      	movs	r1, #1
 8001630:	430a      	orrs	r2, r1
 8001632:	65da      	str	r2, [r3, #92]	; 0x5c
 8001634:	e01c      	b.n	8001670 <HAL_RCC_OscConfig+0x41c>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x404>
 800163e:	4b8b      	ldr	r3, [pc, #556]	; (800186c <HAL_RCC_OscConfig+0x618>)
 8001640:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001642:	4b8a      	ldr	r3, [pc, #552]	; (800186c <HAL_RCC_OscConfig+0x618>)
 8001644:	2104      	movs	r1, #4
 8001646:	430a      	orrs	r2, r1
 8001648:	65da      	str	r2, [r3, #92]	; 0x5c
 800164a:	4b88      	ldr	r3, [pc, #544]	; (800186c <HAL_RCC_OscConfig+0x618>)
 800164c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800164e:	4b87      	ldr	r3, [pc, #540]	; (800186c <HAL_RCC_OscConfig+0x618>)
 8001650:	2101      	movs	r1, #1
 8001652:	430a      	orrs	r2, r1
 8001654:	65da      	str	r2, [r3, #92]	; 0x5c
 8001656:	e00b      	b.n	8001670 <HAL_RCC_OscConfig+0x41c>
 8001658:	4b84      	ldr	r3, [pc, #528]	; (800186c <HAL_RCC_OscConfig+0x618>)
 800165a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800165c:	4b83      	ldr	r3, [pc, #524]	; (800186c <HAL_RCC_OscConfig+0x618>)
 800165e:	2101      	movs	r1, #1
 8001660:	438a      	bics	r2, r1
 8001662:	65da      	str	r2, [r3, #92]	; 0x5c
 8001664:	4b81      	ldr	r3, [pc, #516]	; (800186c <HAL_RCC_OscConfig+0x618>)
 8001666:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001668:	4b80      	ldr	r3, [pc, #512]	; (800186c <HAL_RCC_OscConfig+0x618>)
 800166a:	2104      	movs	r1, #4
 800166c:	438a      	bics	r2, r1
 800166e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d014      	beq.n	80016a2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fa0e 	bl	8000a98 <HAL_GetTick>
 800167c:	0003      	movs	r3, r0
 800167e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001680:	e009      	b.n	8001696 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f7ff fa09 	bl	8000a98 <HAL_GetTick>
 8001686:	0002      	movs	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	4a79      	ldr	r2, [pc, #484]	; (8001874 <HAL_RCC_OscConfig+0x620>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e0e6      	b.n	8001864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001696:	4b75      	ldr	r3, [pc, #468]	; (800186c <HAL_RCC_OscConfig+0x618>)
 8001698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169a:	2202      	movs	r2, #2
 800169c:	4013      	ands	r3, r2
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x42e>
 80016a0:	e013      	b.n	80016ca <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7ff f9f9 	bl	8000a98 <HAL_GetTick>
 80016a6:	0003      	movs	r3, r0
 80016a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016aa:	e009      	b.n	80016c0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ac:	f7ff f9f4 	bl	8000a98 <HAL_GetTick>
 80016b0:	0002      	movs	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	4a6f      	ldr	r2, [pc, #444]	; (8001874 <HAL_RCC_OscConfig+0x620>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e0d1      	b.n	8001864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016c0:	4b6a      	ldr	r3, [pc, #424]	; (800186c <HAL_RCC_OscConfig+0x618>)
 80016c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c4:	2202      	movs	r2, #2
 80016c6:	4013      	ands	r3, r2
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80016ca:	231f      	movs	r3, #31
 80016cc:	18fb      	adds	r3, r7, r3
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d105      	bne.n	80016e0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80016d4:	4b65      	ldr	r3, [pc, #404]	; (800186c <HAL_RCC_OscConfig+0x618>)
 80016d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016d8:	4b64      	ldr	r3, [pc, #400]	; (800186c <HAL_RCC_OscConfig+0x618>)
 80016da:	4967      	ldr	r1, [pc, #412]	; (8001878 <HAL_RCC_OscConfig+0x624>)
 80016dc:	400a      	ands	r2, r1
 80016de:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d100      	bne.n	80016ea <HAL_RCC_OscConfig+0x496>
 80016e8:	e0bb      	b.n	8001862 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ea:	4b60      	ldr	r3, [pc, #384]	; (800186c <HAL_RCC_OscConfig+0x618>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2238      	movs	r2, #56	; 0x38
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b10      	cmp	r3, #16
 80016f4:	d100      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4a4>
 80016f6:	e07b      	b.n	80017f0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d156      	bne.n	80017ae <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001700:	4b5a      	ldr	r3, [pc, #360]	; (800186c <HAL_RCC_OscConfig+0x618>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b59      	ldr	r3, [pc, #356]	; (800186c <HAL_RCC_OscConfig+0x618>)
 8001706:	495d      	ldr	r1, [pc, #372]	; (800187c <HAL_RCC_OscConfig+0x628>)
 8001708:	400a      	ands	r2, r1
 800170a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff f9c4 	bl	8000a98 <HAL_GetTick>
 8001710:	0003      	movs	r3, r0
 8001712:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001716:	f7ff f9bf 	bl	8000a98 <HAL_GetTick>
 800171a:	0002      	movs	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e09d      	b.n	8001864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001728:	4b50      	ldr	r3, [pc, #320]	; (800186c <HAL_RCC_OscConfig+0x618>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	049b      	lsls	r3, r3, #18
 8001730:	4013      	ands	r3, r2
 8001732:	d1f0      	bne.n	8001716 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001734:	4b4d      	ldr	r3, [pc, #308]	; (800186c <HAL_RCC_OscConfig+0x618>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	4a51      	ldr	r2, [pc, #324]	; (8001880 <HAL_RCC_OscConfig+0x62c>)
 800173a:	4013      	ands	r3, r2
 800173c:	0019      	movs	r1, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1a      	ldr	r2, [r3, #32]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	431a      	orrs	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001760:	431a      	orrs	r2, r3
 8001762:	4b42      	ldr	r3, [pc, #264]	; (800186c <HAL_RCC_OscConfig+0x618>)
 8001764:	430a      	orrs	r2, r1
 8001766:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001768:	4b40      	ldr	r3, [pc, #256]	; (800186c <HAL_RCC_OscConfig+0x618>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b3f      	ldr	r3, [pc, #252]	; (800186c <HAL_RCC_OscConfig+0x618>)
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	0449      	lsls	r1, r1, #17
 8001772:	430a      	orrs	r2, r1
 8001774:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001776:	4b3d      	ldr	r3, [pc, #244]	; (800186c <HAL_RCC_OscConfig+0x618>)
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	4b3c      	ldr	r3, [pc, #240]	; (800186c <HAL_RCC_OscConfig+0x618>)
 800177c:	2180      	movs	r1, #128	; 0x80
 800177e:	0549      	lsls	r1, r1, #21
 8001780:	430a      	orrs	r2, r1
 8001782:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff f988 	bl	8000a98 <HAL_GetTick>
 8001788:	0003      	movs	r3, r0
 800178a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178e:	f7ff f983 	bl	8000a98 <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e061      	b.n	8001864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a0:	4b32      	ldr	r3, [pc, #200]	; (800186c <HAL_RCC_OscConfig+0x618>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	049b      	lsls	r3, r3, #18
 80017a8:	4013      	ands	r3, r2
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x53a>
 80017ac:	e059      	b.n	8001862 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ae:	4b2f      	ldr	r3, [pc, #188]	; (800186c <HAL_RCC_OscConfig+0x618>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4b2e      	ldr	r3, [pc, #184]	; (800186c <HAL_RCC_OscConfig+0x618>)
 80017b4:	4931      	ldr	r1, [pc, #196]	; (800187c <HAL_RCC_OscConfig+0x628>)
 80017b6:	400a      	ands	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ba:	f7ff f96d 	bl	8000a98 <HAL_GetTick>
 80017be:	0003      	movs	r3, r0
 80017c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff f968 	bl	8000a98 <HAL_GetTick>
 80017c8:	0002      	movs	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e046      	b.n	8001864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d6:	4b25      	ldr	r3, [pc, #148]	; (800186c <HAL_RCC_OscConfig+0x618>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	049b      	lsls	r3, r3, #18
 80017de:	4013      	ands	r3, r2
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80017e2:	4b22      	ldr	r3, [pc, #136]	; (800186c <HAL_RCC_OscConfig+0x618>)
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <HAL_RCC_OscConfig+0x618>)
 80017e8:	4926      	ldr	r1, [pc, #152]	; (8001884 <HAL_RCC_OscConfig+0x630>)
 80017ea:	400a      	ands	r2, r1
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	e038      	b.n	8001862 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e033      	b.n	8001864 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_RCC_OscConfig+0x618>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2203      	movs	r2, #3
 8001806:	401a      	ands	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	429a      	cmp	r2, r3
 800180e:	d126      	bne.n	800185e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2270      	movs	r2, #112	; 0x70
 8001814:	401a      	ands	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181a:	429a      	cmp	r2, r3
 800181c:	d11f      	bne.n	800185e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	23fe      	movs	r3, #254	; 0xfe
 8001822:	01db      	lsls	r3, r3, #7
 8001824:	401a      	ands	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800182c:	429a      	cmp	r2, r3
 800182e:	d116      	bne.n	800185e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	23f8      	movs	r3, #248	; 0xf8
 8001834:	039b      	lsls	r3, r3, #14
 8001836:	401a      	ands	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800183c:	429a      	cmp	r2, r3
 800183e:	d10e      	bne.n	800185e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	23e0      	movs	r3, #224	; 0xe0
 8001844:	051b      	lsls	r3, r3, #20
 8001846:	401a      	ands	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d106      	bne.n	800185e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	0f5b      	lsrs	r3, r3, #29
 8001854:	075a      	lsls	r2, r3, #29
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800185a:	429a      	cmp	r2, r3
 800185c:	d001      	beq.n	8001862 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	0018      	movs	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	b008      	add	sp, #32
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40021000 	.word	0x40021000
 8001870:	40007000 	.word	0x40007000
 8001874:	00001388 	.word	0x00001388
 8001878:	efffffff 	.word	0xefffffff
 800187c:	feffffff 	.word	0xfeffffff
 8001880:	11c1808c 	.word	0x11c1808c
 8001884:	eefefffc 	.word	0xeefefffc

08001888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0e9      	b.n	8001a70 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800189c:	4b76      	ldr	r3, [pc, #472]	; (8001a78 <HAL_RCC_ClockConfig+0x1f0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2207      	movs	r2, #7
 80018a2:	4013      	ands	r3, r2
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d91e      	bls.n	80018e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b73      	ldr	r3, [pc, #460]	; (8001a78 <HAL_RCC_ClockConfig+0x1f0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2207      	movs	r2, #7
 80018b0:	4393      	bics	r3, r2
 80018b2:	0019      	movs	r1, r3
 80018b4:	4b70      	ldr	r3, [pc, #448]	; (8001a78 <HAL_RCC_ClockConfig+0x1f0>)
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018bc:	f7ff f8ec 	bl	8000a98 <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018c4:	e009      	b.n	80018da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c6:	f7ff f8e7 	bl	8000a98 <HAL_GetTick>
 80018ca:	0002      	movs	r2, r0
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	4a6a      	ldr	r2, [pc, #424]	; (8001a7c <HAL_RCC_ClockConfig+0x1f4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e0ca      	b.n	8001a70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018da:	4b67      	ldr	r3, [pc, #412]	; (8001a78 <HAL_RCC_ClockConfig+0x1f0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2207      	movs	r2, #7
 80018e0:	4013      	ands	r3, r2
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d1ee      	bne.n	80018c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2202      	movs	r2, #2
 80018ee:	4013      	ands	r3, r2
 80018f0:	d015      	beq.n	800191e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2204      	movs	r2, #4
 80018f8:	4013      	ands	r3, r2
 80018fa:	d006      	beq.n	800190a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018fc:	4b60      	ldr	r3, [pc, #384]	; (8001a80 <HAL_RCC_ClockConfig+0x1f8>)
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	4b5f      	ldr	r3, [pc, #380]	; (8001a80 <HAL_RCC_ClockConfig+0x1f8>)
 8001902:	21e0      	movs	r1, #224	; 0xe0
 8001904:	01c9      	lsls	r1, r1, #7
 8001906:	430a      	orrs	r2, r1
 8001908:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800190a:	4b5d      	ldr	r3, [pc, #372]	; (8001a80 <HAL_RCC_ClockConfig+0x1f8>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	4a5d      	ldr	r2, [pc, #372]	; (8001a84 <HAL_RCC_ClockConfig+0x1fc>)
 8001910:	4013      	ands	r3, r2
 8001912:	0019      	movs	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	4b59      	ldr	r3, [pc, #356]	; (8001a80 <HAL_RCC_ClockConfig+0x1f8>)
 800191a:	430a      	orrs	r2, r1
 800191c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2201      	movs	r2, #1
 8001924:	4013      	ands	r3, r2
 8001926:	d057      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d107      	bne.n	8001940 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001930:	4b53      	ldr	r3, [pc, #332]	; (8001a80 <HAL_RCC_ClockConfig+0x1f8>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	029b      	lsls	r3, r3, #10
 8001938:	4013      	ands	r3, r2
 800193a:	d12b      	bne.n	8001994 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e097      	b.n	8001a70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d107      	bne.n	8001958 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001948:	4b4d      	ldr	r3, [pc, #308]	; (8001a80 <HAL_RCC_ClockConfig+0x1f8>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	049b      	lsls	r3, r3, #18
 8001950:	4013      	ands	r3, r2
 8001952:	d11f      	bne.n	8001994 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e08b      	b.n	8001a70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d107      	bne.n	8001970 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001960:	4b47      	ldr	r3, [pc, #284]	; (8001a80 <HAL_RCC_ClockConfig+0x1f8>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	4013      	ands	r3, r2
 800196a:	d113      	bne.n	8001994 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e07f      	b.n	8001a70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d106      	bne.n	8001986 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001978:	4b41      	ldr	r3, [pc, #260]	; (8001a80 <HAL_RCC_ClockConfig+0x1f8>)
 800197a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197c:	2202      	movs	r2, #2
 800197e:	4013      	ands	r3, r2
 8001980:	d108      	bne.n	8001994 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e074      	b.n	8001a70 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001986:	4b3e      	ldr	r3, [pc, #248]	; (8001a80 <HAL_RCC_ClockConfig+0x1f8>)
 8001988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198a:	2202      	movs	r2, #2
 800198c:	4013      	ands	r3, r2
 800198e:	d101      	bne.n	8001994 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e06d      	b.n	8001a70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001994:	4b3a      	ldr	r3, [pc, #232]	; (8001a80 <HAL_RCC_ClockConfig+0x1f8>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2207      	movs	r2, #7
 800199a:	4393      	bics	r3, r2
 800199c:	0019      	movs	r1, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	4b37      	ldr	r3, [pc, #220]	; (8001a80 <HAL_RCC_ClockConfig+0x1f8>)
 80019a4:	430a      	orrs	r2, r1
 80019a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019a8:	f7ff f876 	bl	8000a98 <HAL_GetTick>
 80019ac:	0003      	movs	r3, r0
 80019ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b0:	e009      	b.n	80019c6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b2:	f7ff f871 	bl	8000a98 <HAL_GetTick>
 80019b6:	0002      	movs	r2, r0
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	4a2f      	ldr	r2, [pc, #188]	; (8001a7c <HAL_RCC_ClockConfig+0x1f4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e054      	b.n	8001a70 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c6:	4b2e      	ldr	r3, [pc, #184]	; (8001a80 <HAL_RCC_ClockConfig+0x1f8>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2238      	movs	r2, #56	; 0x38
 80019cc:	401a      	ands	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d1ec      	bne.n	80019b2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019d8:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <HAL_RCC_ClockConfig+0x1f0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2207      	movs	r2, #7
 80019de:	4013      	ands	r3, r2
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d21e      	bcs.n	8001a24 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e6:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_RCC_ClockConfig+0x1f0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2207      	movs	r2, #7
 80019ec:	4393      	bics	r3, r2
 80019ee:	0019      	movs	r1, r3
 80019f0:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_RCC_ClockConfig+0x1f0>)
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019f8:	f7ff f84e 	bl	8000a98 <HAL_GetTick>
 80019fc:	0003      	movs	r3, r0
 80019fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a00:	e009      	b.n	8001a16 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a02:	f7ff f849 	bl	8000a98 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	4a1b      	ldr	r2, [pc, #108]	; (8001a7c <HAL_RCC_ClockConfig+0x1f4>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e02c      	b.n	8001a70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_RCC_ClockConfig+0x1f0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2207      	movs	r2, #7
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d1ee      	bne.n	8001a02 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2204      	movs	r2, #4
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d009      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a2e:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <HAL_RCC_ClockConfig+0x1f8>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	4a15      	ldr	r2, [pc, #84]	; (8001a88 <HAL_RCC_ClockConfig+0x200>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	0019      	movs	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <HAL_RCC_ClockConfig+0x1f8>)
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a42:	f000 f829 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8001a46:	0001      	movs	r1, r0
 8001a48:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <HAL_RCC_ClockConfig+0x1f8>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	0a1b      	lsrs	r3, r3, #8
 8001a4e:	220f      	movs	r2, #15
 8001a50:	401a      	ands	r2, r3
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <HAL_RCC_ClockConfig+0x204>)
 8001a54:	0092      	lsls	r2, r2, #2
 8001a56:	58d3      	ldr	r3, [r2, r3]
 8001a58:	221f      	movs	r2, #31
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	000a      	movs	r2, r1
 8001a5e:	40da      	lsrs	r2, r3
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_RCC_ClockConfig+0x208>)
 8001a62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_RCC_ClockConfig+0x20c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f7fe ffb9 	bl	80009e0 <HAL_InitTick>
 8001a6e:	0003      	movs	r3, r0
}
 8001a70:	0018      	movs	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b004      	add	sp, #16
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40022000 	.word	0x40022000
 8001a7c:	00001388 	.word	0x00001388
 8001a80:	40021000 	.word	0x40021000
 8001a84:	fffff0ff 	.word	0xfffff0ff
 8001a88:	ffff8fff 	.word	0xffff8fff
 8001a8c:	08002870 	.word	0x08002870
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000004 	.word	0x20000004

08001a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a9e:	4b3c      	ldr	r3, [pc, #240]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2238      	movs	r2, #56	; 0x38
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d10f      	bne.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001aa8:	4b39      	ldr	r3, [pc, #228]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	0adb      	lsrs	r3, r3, #11
 8001aae:	2207      	movs	r2, #7
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	409a      	lsls	r2, r3
 8001ab6:	0013      	movs	r3, r2
 8001ab8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001aba:	6839      	ldr	r1, [r7, #0]
 8001abc:	4835      	ldr	r0, [pc, #212]	; (8001b94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001abe:	f7fe fb21 	bl	8000104 <__udivsi3>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	e05d      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ac8:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2238      	movs	r2, #56	; 0x38
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d102      	bne.n	8001ada <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ad4:	4b30      	ldr	r3, [pc, #192]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	e054      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ada:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2238      	movs	r2, #56	; 0x38
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b10      	cmp	r3, #16
 8001ae4:	d138      	bne.n	8001b58 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2203      	movs	r2, #3
 8001aec:	4013      	ands	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001af0:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	2207      	movs	r2, #7
 8001af8:	4013      	ands	r3, r2
 8001afa:	3301      	adds	r3, #1
 8001afc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d10d      	bne.n	8001b20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	4824      	ldr	r0, [pc, #144]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b08:	f7fe fafc 	bl	8000104 <__udivsi3>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	0019      	movs	r1, r3
 8001b10:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	227f      	movs	r2, #127	; 0x7f
 8001b18:	4013      	ands	r3, r2
 8001b1a:	434b      	muls	r3, r1
 8001b1c:	617b      	str	r3, [r7, #20]
        break;
 8001b1e:	e00d      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	481c      	ldr	r0, [pc, #112]	; (8001b94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b24:	f7fe faee 	bl	8000104 <__udivsi3>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	0a1b      	lsrs	r3, r3, #8
 8001b32:	227f      	movs	r2, #127	; 0x7f
 8001b34:	4013      	ands	r3, r2
 8001b36:	434b      	muls	r3, r1
 8001b38:	617b      	str	r3, [r7, #20]
        break;
 8001b3a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	0f5b      	lsrs	r3, r3, #29
 8001b42:	2207      	movs	r2, #7
 8001b44:	4013      	ands	r3, r2
 8001b46:	3301      	adds	r3, #1
 8001b48:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	6978      	ldr	r0, [r7, #20]
 8001b4e:	f7fe fad9 	bl	8000104 <__udivsi3>
 8001b52:	0003      	movs	r3, r0
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	e015      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b58:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2238      	movs	r2, #56	; 0x38
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b20      	cmp	r3, #32
 8001b62:	d103      	bne.n	8001b6c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	e00b      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2238      	movs	r2, #56	; 0x38
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b18      	cmp	r3, #24
 8001b76:	d103      	bne.n	8001b80 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b78:	23fa      	movs	r3, #250	; 0xfa
 8001b7a:	01db      	lsls	r3, r3, #7
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	e001      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b84:	693b      	ldr	r3, [r7, #16]
}
 8001b86:	0018      	movs	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b006      	add	sp, #24
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	40021000 	.word	0x40021000
 8001b94:	00f42400 	.word	0x00f42400
 8001b98:	007a1200 	.word	0x007a1200

08001b9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba0:	4b02      	ldr	r3, [pc, #8]	; (8001bac <HAL_RCC_GetHCLKFreq+0x10>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	20000000 	.word	0x20000000

08001bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb0:	b5b0      	push	{r4, r5, r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001bb4:	f7ff fff2 	bl	8001b9c <HAL_RCC_GetHCLKFreq>
 8001bb8:	0004      	movs	r4, r0
 8001bba:	f7ff fb3f 	bl	800123c <LL_RCC_GetAPB1Prescaler>
 8001bbe:	0003      	movs	r3, r0
 8001bc0:	0b1a      	lsrs	r2, r3, #12
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bc4:	0092      	lsls	r2, r2, #2
 8001bc6:	58d3      	ldr	r3, [r2, r3]
 8001bc8:	221f      	movs	r2, #31
 8001bca:	4013      	ands	r3, r2
 8001bcc:	40dc      	lsrs	r4, r3
 8001bce:	0023      	movs	r3, r4
}
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	080028b0 	.word	0x080028b0

08001bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001be4:	2313      	movs	r3, #19
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001bec:	2312      	movs	r3, #18
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	029b      	lsls	r3, r3, #10
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d100      	bne.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001c00:	e0a3      	b.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c02:	2011      	movs	r0, #17
 8001c04:	183b      	adds	r3, r7, r0
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0a:	4ba5      	ldr	r3, [pc, #660]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	055b      	lsls	r3, r3, #21
 8001c12:	4013      	ands	r3, r2
 8001c14:	d110      	bne.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	4ba2      	ldr	r3, [pc, #648]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c1a:	4ba1      	ldr	r3, [pc, #644]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c1c:	2180      	movs	r1, #128	; 0x80
 8001c1e:	0549      	lsls	r1, r1, #21
 8001c20:	430a      	orrs	r2, r1
 8001c22:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c24:	4b9e      	ldr	r3, [pc, #632]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	055b      	lsls	r3, r3, #21
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c32:	183b      	adds	r3, r7, r0
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c38:	4b9a      	ldr	r3, [pc, #616]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b99      	ldr	r3, [pc, #612]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001c3e:	2180      	movs	r1, #128	; 0x80
 8001c40:	0049      	lsls	r1, r1, #1
 8001c42:	430a      	orrs	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c46:	f7fe ff27 	bl	8000a98 <HAL_GetTick>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c4e:	e00b      	b.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c50:	f7fe ff22 	bl	8000a98 <HAL_GetTick>
 8001c54:	0002      	movs	r2, r0
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d904      	bls.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001c5e:	2313      	movs	r3, #19
 8001c60:	18fb      	adds	r3, r7, r3
 8001c62:	2203      	movs	r2, #3
 8001c64:	701a      	strb	r2, [r3, #0]
        break;
 8001c66:	e005      	b.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c68:	4b8e      	ldr	r3, [pc, #568]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4013      	ands	r3, r2
 8001c72:	d0ed      	beq.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001c74:	2313      	movs	r3, #19
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d154      	bne.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c7e:	4b88      	ldr	r3, [pc, #544]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c82:	23c0      	movs	r3, #192	; 0xc0
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4013      	ands	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d019      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d014      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c9a:	4b81      	ldr	r3, [pc, #516]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9e:	4a82      	ldr	r2, [pc, #520]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ca4:	4b7e      	ldr	r3, [pc, #504]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ca6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ca8:	4b7d      	ldr	r3, [pc, #500]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001caa:	2180      	movs	r1, #128	; 0x80
 8001cac:	0249      	lsls	r1, r1, #9
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cb2:	4b7b      	ldr	r3, [pc, #492]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cb6:	4b7a      	ldr	r3, [pc, #488]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cb8:	497c      	ldr	r1, [pc, #496]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001cba:	400a      	ands	r2, r1
 8001cbc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001cbe:	4b78      	ldr	r3, [pc, #480]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d016      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7fe fee4 	bl	8000a98 <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd4:	e00c      	b.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd6:	f7fe fedf 	bl	8000a98 <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	4a73      	ldr	r2, [pc, #460]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d904      	bls.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001ce6:	2313      	movs	r3, #19
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	2203      	movs	r2, #3
 8001cec:	701a      	strb	r2, [r3, #0]
            break;
 8001cee:	e004      	b.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf0:	4b6b      	ldr	r3, [pc, #428]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d0ed      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001cfa:	2313      	movs	r3, #19
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10a      	bne.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d04:	4b66      	ldr	r3, [pc, #408]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d08:	4a67      	ldr	r2, [pc, #412]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d12:	4b63      	ldr	r3, [pc, #396]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d14:	430a      	orrs	r2, r1
 8001d16:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d18:	e00c      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d1a:	2312      	movs	r3, #18
 8001d1c:	18fb      	adds	r3, r7, r3
 8001d1e:	2213      	movs	r2, #19
 8001d20:	18ba      	adds	r2, r7, r2
 8001d22:	7812      	ldrb	r2, [r2, #0]
 8001d24:	701a      	strb	r2, [r3, #0]
 8001d26:	e005      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d28:	2312      	movs	r3, #18
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	2213      	movs	r2, #19
 8001d2e:	18ba      	adds	r2, r7, r2
 8001d30:	7812      	ldrb	r2, [r2, #0]
 8001d32:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d34:	2311      	movs	r3, #17
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d105      	bne.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d3e:	4b58      	ldr	r3, [pc, #352]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d42:	4b57      	ldr	r3, [pc, #348]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d44:	495b      	ldr	r1, [pc, #364]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001d46:	400a      	ands	r2, r1
 8001d48:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4013      	ands	r3, r2
 8001d52:	d009      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d54:	4b52      	ldr	r3, [pc, #328]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d58:	2203      	movs	r2, #3
 8001d5a:	4393      	bics	r3, r2
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	4b4f      	ldr	r3, [pc, #316]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d64:	430a      	orrs	r2, r1
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d009      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d72:	4b4b      	ldr	r3, [pc, #300]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d76:	4a50      	ldr	r2, [pc, #320]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d82:	430a      	orrs	r2, r1
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d009      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d92:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	4a49      	ldr	r2, [pc, #292]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	0019      	movs	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	695a      	ldr	r2, [r3, #20]
 8001da0:	4b3f      	ldr	r3, [pc, #252]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001da2:	430a      	orrs	r2, r1
 8001da4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4013      	ands	r3, r2
 8001db0:	d009      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001db2:	4b3b      	ldr	r3, [pc, #236]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db6:	4a42      	ldr	r2, [pc, #264]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	0019      	movs	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699a      	ldr	r2, [r3, #24]
 8001dc0:	4b37      	ldr	r3, [pc, #220]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d009      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dd0:	4b33      	ldr	r3, [pc, #204]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd4:	4a3b      	ldr	r2, [pc, #236]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	0019      	movs	r1, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	4b30      	ldr	r3, [pc, #192]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001de0:	430a      	orrs	r2, r1
 8001de2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	01db      	lsls	r3, r3, #7
 8001dec:	4013      	ands	r3, r2
 8001dee:	d015      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	0899      	lsrs	r1, r3, #2
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69da      	ldr	r2, [r3, #28]
 8001dfc:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69da      	ldr	r2, [r3, #28]
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	05db      	lsls	r3, r3, #23
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d106      	bne.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e0e:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e14:	2180      	movs	r1, #128	; 0x80
 8001e16:	0249      	lsls	r1, r1, #9
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	039b      	lsls	r3, r3, #14
 8001e24:	4013      	ands	r3, r2
 8001e26:	d016      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001e28:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2c:	4a26      	ldr	r2, [pc, #152]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	0019      	movs	r1, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1a      	ldr	r2, [r3, #32]
 8001e36:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1a      	ldr	r2, [r3, #32]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	03db      	lsls	r3, r3, #15
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d106      	bne.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e4e:	2180      	movs	r1, #128	; 0x80
 8001e50:	0449      	lsls	r1, r1, #17
 8001e52:	430a      	orrs	r2, r1
 8001e54:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d016      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e66:	4a19      	ldr	r2, [pc, #100]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e72:	430a      	orrs	r2, r1
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	01db      	lsls	r3, r3, #7
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d106      	bne.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e82:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e88:	2180      	movs	r1, #128	; 0x80
 8001e8a:	0249      	lsls	r1, r1, #9
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001e90:	2312      	movs	r3, #18
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	781b      	ldrb	r3, [r3, #0]
}
 8001e96:	0018      	movs	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b006      	add	sp, #24
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40007000 	.word	0x40007000
 8001ea8:	fffffcff 	.word	0xfffffcff
 8001eac:	fffeffff 	.word	0xfffeffff
 8001eb0:	00001388 	.word	0x00001388
 8001eb4:	efffffff 	.word	0xefffffff
 8001eb8:	fffff3ff 	.word	0xfffff3ff
 8001ebc:	fff3ffff 	.word	0xfff3ffff
 8001ec0:	ffcfffff 	.word	0xffcfffff
 8001ec4:	ffffcfff 	.word	0xffffcfff
 8001ec8:	ffbfffff 	.word	0xffbfffff
 8001ecc:	ffff3fff 	.word	0xffff3fff

08001ed0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e046      	b.n	8001f70 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2288      	movs	r2, #136	; 0x88
 8001ee6:	589b      	ldr	r3, [r3, r2]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d107      	bne.n	8001efc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2284      	movs	r2, #132	; 0x84
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f7fe fcc2 	bl	8000880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2288      	movs	r2, #136	; 0x88
 8001f00:	2124      	movs	r1, #36	; 0x24
 8001f02:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2101      	movs	r1, #1
 8001f10:	438a      	bics	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	0018      	movs	r0, r3
 8001f18:	f000 f830 	bl	8001f7c <UART_SetConfig>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e024      	b.n	8001f70 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	0018      	movs	r0, r3
 8001f32:	f000 fa9b 	bl	800246c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	490d      	ldr	r1, [pc, #52]	; (8001f78 <HAL_UART_Init+0xa8>)
 8001f42:	400a      	ands	r2, r1
 8001f44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	212a      	movs	r1, #42	; 0x2a
 8001f52:	438a      	bics	r2, r1
 8001f54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2101      	movs	r1, #1
 8001f62:	430a      	orrs	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f000 fb33 	bl	80025d4 <UART_CheckIdleState>
 8001f6e:	0003      	movs	r3, r0
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	ffffb7ff 	.word	0xffffb7ff

08001f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f7c:	b5b0      	push	{r4, r5, r7, lr}
 8001f7e:	b090      	sub	sp, #64	; 0x40
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f84:	231a      	movs	r3, #26
 8001f86:	2220      	movs	r2, #32
 8001f88:	189b      	adds	r3, r3, r2
 8001f8a:	19db      	adds	r3, r3, r7
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4ac4      	ldr	r2, [pc, #784]	; (80022c0 <UART_SetConfig+0x344>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4abf      	ldr	r2, [pc, #764]	; (80022c4 <UART_SetConfig+0x348>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	0018      	movs	r0, r3
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	68d9      	ldr	r1, [r3, #12]
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4ab9      	ldr	r2, [pc, #740]	; (80022c8 <UART_SetConfig+0x34c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d004      	beq.n	8001ff2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4ab4      	ldr	r2, [pc, #720]	; (80022cc <UART_SetConfig+0x350>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002004:	430b      	orrs	r3, r1
 8002006:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	220f      	movs	r2, #15
 8002010:	4393      	bics	r3, r2
 8002012:	0018      	movs	r0, r3
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	0003      	movs	r3, r0
 800201e:	430b      	orrs	r3, r1
 8002020:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4aaa      	ldr	r2, [pc, #680]	; (80022d0 <UART_SetConfig+0x354>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d131      	bne.n	8002090 <UART_SetConfig+0x114>
 800202c:	4ba9      	ldr	r3, [pc, #676]	; (80022d4 <UART_SetConfig+0x358>)
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	2203      	movs	r2, #3
 8002032:	4013      	ands	r3, r2
 8002034:	2b03      	cmp	r3, #3
 8002036:	d01d      	beq.n	8002074 <UART_SetConfig+0xf8>
 8002038:	d823      	bhi.n	8002082 <UART_SetConfig+0x106>
 800203a:	2b02      	cmp	r3, #2
 800203c:	d00c      	beq.n	8002058 <UART_SetConfig+0xdc>
 800203e:	d820      	bhi.n	8002082 <UART_SetConfig+0x106>
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <UART_SetConfig+0xce>
 8002044:	2b01      	cmp	r3, #1
 8002046:	d00e      	beq.n	8002066 <UART_SetConfig+0xea>
 8002048:	e01b      	b.n	8002082 <UART_SetConfig+0x106>
 800204a:	231b      	movs	r3, #27
 800204c:	2220      	movs	r2, #32
 800204e:	189b      	adds	r3, r3, r2
 8002050:	19db      	adds	r3, r3, r7
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	e071      	b.n	800213c <UART_SetConfig+0x1c0>
 8002058:	231b      	movs	r3, #27
 800205a:	2220      	movs	r2, #32
 800205c:	189b      	adds	r3, r3, r2
 800205e:	19db      	adds	r3, r3, r7
 8002060:	2202      	movs	r2, #2
 8002062:	701a      	strb	r2, [r3, #0]
 8002064:	e06a      	b.n	800213c <UART_SetConfig+0x1c0>
 8002066:	231b      	movs	r3, #27
 8002068:	2220      	movs	r2, #32
 800206a:	189b      	adds	r3, r3, r2
 800206c:	19db      	adds	r3, r3, r7
 800206e:	2204      	movs	r2, #4
 8002070:	701a      	strb	r2, [r3, #0]
 8002072:	e063      	b.n	800213c <UART_SetConfig+0x1c0>
 8002074:	231b      	movs	r3, #27
 8002076:	2220      	movs	r2, #32
 8002078:	189b      	adds	r3, r3, r2
 800207a:	19db      	adds	r3, r3, r7
 800207c:	2208      	movs	r2, #8
 800207e:	701a      	strb	r2, [r3, #0]
 8002080:	e05c      	b.n	800213c <UART_SetConfig+0x1c0>
 8002082:	231b      	movs	r3, #27
 8002084:	2220      	movs	r2, #32
 8002086:	189b      	adds	r3, r3, r2
 8002088:	19db      	adds	r3, r3, r7
 800208a:	2210      	movs	r2, #16
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	e055      	b.n	800213c <UART_SetConfig+0x1c0>
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a90      	ldr	r2, [pc, #576]	; (80022d8 <UART_SetConfig+0x35c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d106      	bne.n	80020a8 <UART_SetConfig+0x12c>
 800209a:	231b      	movs	r3, #27
 800209c:	2220      	movs	r2, #32
 800209e:	189b      	adds	r3, r3, r2
 80020a0:	19db      	adds	r3, r3, r7
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
 80020a6:	e049      	b.n	800213c <UART_SetConfig+0x1c0>
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a86      	ldr	r2, [pc, #536]	; (80022c8 <UART_SetConfig+0x34c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d13e      	bne.n	8002130 <UART_SetConfig+0x1b4>
 80020b2:	4b88      	ldr	r3, [pc, #544]	; (80022d4 <UART_SetConfig+0x358>)
 80020b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020b6:	23c0      	movs	r3, #192	; 0xc0
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	4013      	ands	r3, r2
 80020bc:	22c0      	movs	r2, #192	; 0xc0
 80020be:	0112      	lsls	r2, r2, #4
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d027      	beq.n	8002114 <UART_SetConfig+0x198>
 80020c4:	22c0      	movs	r2, #192	; 0xc0
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d82a      	bhi.n	8002122 <UART_SetConfig+0x1a6>
 80020cc:	2280      	movs	r2, #128	; 0x80
 80020ce:	0112      	lsls	r2, r2, #4
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d011      	beq.n	80020f8 <UART_SetConfig+0x17c>
 80020d4:	2280      	movs	r2, #128	; 0x80
 80020d6:	0112      	lsls	r2, r2, #4
 80020d8:	4293      	cmp	r3, r2
 80020da:	d822      	bhi.n	8002122 <UART_SetConfig+0x1a6>
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d004      	beq.n	80020ea <UART_SetConfig+0x16e>
 80020e0:	2280      	movs	r2, #128	; 0x80
 80020e2:	00d2      	lsls	r2, r2, #3
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d00e      	beq.n	8002106 <UART_SetConfig+0x18a>
 80020e8:	e01b      	b.n	8002122 <UART_SetConfig+0x1a6>
 80020ea:	231b      	movs	r3, #27
 80020ec:	2220      	movs	r2, #32
 80020ee:	189b      	adds	r3, r3, r2
 80020f0:	19db      	adds	r3, r3, r7
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
 80020f6:	e021      	b.n	800213c <UART_SetConfig+0x1c0>
 80020f8:	231b      	movs	r3, #27
 80020fa:	2220      	movs	r2, #32
 80020fc:	189b      	adds	r3, r3, r2
 80020fe:	19db      	adds	r3, r3, r7
 8002100:	2202      	movs	r2, #2
 8002102:	701a      	strb	r2, [r3, #0]
 8002104:	e01a      	b.n	800213c <UART_SetConfig+0x1c0>
 8002106:	231b      	movs	r3, #27
 8002108:	2220      	movs	r2, #32
 800210a:	189b      	adds	r3, r3, r2
 800210c:	19db      	adds	r3, r3, r7
 800210e:	2204      	movs	r2, #4
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	e013      	b.n	800213c <UART_SetConfig+0x1c0>
 8002114:	231b      	movs	r3, #27
 8002116:	2220      	movs	r2, #32
 8002118:	189b      	adds	r3, r3, r2
 800211a:	19db      	adds	r3, r3, r7
 800211c:	2208      	movs	r2, #8
 800211e:	701a      	strb	r2, [r3, #0]
 8002120:	e00c      	b.n	800213c <UART_SetConfig+0x1c0>
 8002122:	231b      	movs	r3, #27
 8002124:	2220      	movs	r2, #32
 8002126:	189b      	adds	r3, r3, r2
 8002128:	19db      	adds	r3, r3, r7
 800212a:	2210      	movs	r2, #16
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	e005      	b.n	800213c <UART_SetConfig+0x1c0>
 8002130:	231b      	movs	r3, #27
 8002132:	2220      	movs	r2, #32
 8002134:	189b      	adds	r3, r3, r2
 8002136:	19db      	adds	r3, r3, r7
 8002138:	2210      	movs	r2, #16
 800213a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a61      	ldr	r2, [pc, #388]	; (80022c8 <UART_SetConfig+0x34c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d000      	beq.n	8002148 <UART_SetConfig+0x1cc>
 8002146:	e092      	b.n	800226e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002148:	231b      	movs	r3, #27
 800214a:	2220      	movs	r2, #32
 800214c:	189b      	adds	r3, r3, r2
 800214e:	19db      	adds	r3, r3, r7
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b08      	cmp	r3, #8
 8002154:	d015      	beq.n	8002182 <UART_SetConfig+0x206>
 8002156:	dc18      	bgt.n	800218a <UART_SetConfig+0x20e>
 8002158:	2b04      	cmp	r3, #4
 800215a:	d00d      	beq.n	8002178 <UART_SetConfig+0x1fc>
 800215c:	dc15      	bgt.n	800218a <UART_SetConfig+0x20e>
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <UART_SetConfig+0x1ec>
 8002162:	2b02      	cmp	r3, #2
 8002164:	d005      	beq.n	8002172 <UART_SetConfig+0x1f6>
 8002166:	e010      	b.n	800218a <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002168:	f7ff fd22 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 800216c:	0003      	movs	r3, r0
 800216e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002170:	e014      	b.n	800219c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002172:	4b5a      	ldr	r3, [pc, #360]	; (80022dc <UART_SetConfig+0x360>)
 8002174:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002176:	e011      	b.n	800219c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002178:	f7ff fc8e 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 800217c:	0003      	movs	r3, r0
 800217e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002180:	e00c      	b.n	800219c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002182:	2380      	movs	r3, #128	; 0x80
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002188:	e008      	b.n	800219c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800218e:	231a      	movs	r3, #26
 8002190:	2220      	movs	r2, #32
 8002192:	189b      	adds	r3, r3, r2
 8002194:	19db      	adds	r3, r3, r7
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
        break;
 800219a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800219c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d100      	bne.n	80021a4 <UART_SetConfig+0x228>
 80021a2:	e147      	b.n	8002434 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021a8:	4b4d      	ldr	r3, [pc, #308]	; (80022e0 <UART_SetConfig+0x364>)
 80021aa:	0052      	lsls	r2, r2, #1
 80021ac:	5ad3      	ldrh	r3, [r2, r3]
 80021ae:	0019      	movs	r1, r3
 80021b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80021b2:	f7fd ffa7 	bl	8000104 <__udivsi3>
 80021b6:	0003      	movs	r3, r0
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	0013      	movs	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	189b      	adds	r3, r3, r2
 80021c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d305      	bcc.n	80021d6 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80021d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d906      	bls.n	80021e4 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80021d6:	231a      	movs	r3, #26
 80021d8:	2220      	movs	r2, #32
 80021da:	189b      	adds	r3, r3, r2
 80021dc:	19db      	adds	r3, r3, r7
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
 80021e2:	e127      	b.n	8002434 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80021e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e6:	61bb      	str	r3, [r7, #24]
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021f0:	4b3b      	ldr	r3, [pc, #236]	; (80022e0 <UART_SetConfig+0x364>)
 80021f2:	0052      	lsls	r2, r2, #1
 80021f4:	5ad3      	ldrh	r3, [r2, r3]
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	69b8      	ldr	r0, [r7, #24]
 8002202:	69f9      	ldr	r1, [r7, #28]
 8002204:	f7fe f80a 	bl	800021c <__aeabi_uldivmod>
 8002208:	0002      	movs	r2, r0
 800220a:	000b      	movs	r3, r1
 800220c:	0e11      	lsrs	r1, r2, #24
 800220e:	021d      	lsls	r5, r3, #8
 8002210:	430d      	orrs	r5, r1
 8002212:	0214      	lsls	r4, r2, #8
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	085b      	lsrs	r3, r3, #1
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68b8      	ldr	r0, [r7, #8]
 8002222:	68f9      	ldr	r1, [r7, #12]
 8002224:	1900      	adds	r0, r0, r4
 8002226:	4169      	adcs	r1, r5
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f7fd fff1 	bl	800021c <__aeabi_uldivmod>
 800223a:	0002      	movs	r2, r0
 800223c:	000b      	movs	r3, r1
 800223e:	0013      	movs	r3, r2
 8002240:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002244:	23c0      	movs	r3, #192	; 0xc0
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	429a      	cmp	r2, r3
 800224a:	d309      	bcc.n	8002260 <UART_SetConfig+0x2e4>
 800224c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	035b      	lsls	r3, r3, #13
 8002252:	429a      	cmp	r2, r3
 8002254:	d204      	bcs.n	8002260 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	e0e9      	b.n	8002434 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8002260:	231a      	movs	r3, #26
 8002262:	2220      	movs	r2, #32
 8002264:	189b      	adds	r3, r3, r2
 8002266:	19db      	adds	r3, r3, r7
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	e0e2      	b.n	8002434 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	429a      	cmp	r2, r3
 8002278:	d000      	beq.n	800227c <UART_SetConfig+0x300>
 800227a:	e083      	b.n	8002384 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800227c:	231b      	movs	r3, #27
 800227e:	2220      	movs	r2, #32
 8002280:	189b      	adds	r3, r3, r2
 8002282:	19db      	adds	r3, r3, r7
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b08      	cmp	r3, #8
 8002288:	d015      	beq.n	80022b6 <UART_SetConfig+0x33a>
 800228a:	dc2b      	bgt.n	80022e4 <UART_SetConfig+0x368>
 800228c:	2b04      	cmp	r3, #4
 800228e:	d00d      	beq.n	80022ac <UART_SetConfig+0x330>
 8002290:	dc28      	bgt.n	80022e4 <UART_SetConfig+0x368>
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <UART_SetConfig+0x320>
 8002296:	2b02      	cmp	r3, #2
 8002298:	d005      	beq.n	80022a6 <UART_SetConfig+0x32a>
 800229a:	e023      	b.n	80022e4 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800229c:	f7ff fc88 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 80022a0:	0003      	movs	r3, r0
 80022a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80022a4:	e027      	b.n	80022f6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022a6:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <UART_SetConfig+0x360>)
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80022aa:	e024      	b.n	80022f6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022ac:	f7ff fbf4 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 80022b0:	0003      	movs	r3, r0
 80022b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80022b4:	e01f      	b.n	80022f6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80022bc:	e01b      	b.n	80022f6 <UART_SetConfig+0x37a>
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	cfff69f3 	.word	0xcfff69f3
 80022c4:	ffffcfff 	.word	0xffffcfff
 80022c8:	40008000 	.word	0x40008000
 80022cc:	11fff4ff 	.word	0x11fff4ff
 80022d0:	40013800 	.word	0x40013800
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40004400 	.word	0x40004400
 80022dc:	00f42400 	.word	0x00f42400
 80022e0:	080028d0 	.word	0x080028d0
      default:
        pclk = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80022e8:	231a      	movs	r3, #26
 80022ea:	2220      	movs	r2, #32
 80022ec:	189b      	adds	r3, r3, r2
 80022ee:	19db      	adds	r3, r3, r7
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
        break;
 80022f4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80022f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d100      	bne.n	80022fe <UART_SetConfig+0x382>
 80022fc:	e09a      	b.n	8002434 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002302:	4b58      	ldr	r3, [pc, #352]	; (8002464 <UART_SetConfig+0x4e8>)
 8002304:	0052      	lsls	r2, r2, #1
 8002306:	5ad3      	ldrh	r3, [r2, r3]
 8002308:	0019      	movs	r1, r3
 800230a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800230c:	f7fd fefa 	bl	8000104 <__udivsi3>
 8002310:	0003      	movs	r3, r0
 8002312:	005a      	lsls	r2, r3, #1
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	085b      	lsrs	r3, r3, #1
 800231a:	18d2      	adds	r2, r2, r3
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	0019      	movs	r1, r3
 8002322:	0010      	movs	r0, r2
 8002324:	f7fd feee 	bl	8000104 <__udivsi3>
 8002328:	0003      	movs	r3, r0
 800232a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800232c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232e:	2b0f      	cmp	r3, #15
 8002330:	d921      	bls.n	8002376 <UART_SetConfig+0x3fa>
 8002332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	025b      	lsls	r3, r3, #9
 8002338:	429a      	cmp	r2, r3
 800233a:	d21c      	bcs.n	8002376 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233e:	b29a      	uxth	r2, r3
 8002340:	200e      	movs	r0, #14
 8002342:	2420      	movs	r4, #32
 8002344:	1903      	adds	r3, r0, r4
 8002346:	19db      	adds	r3, r3, r7
 8002348:	210f      	movs	r1, #15
 800234a:	438a      	bics	r2, r1
 800234c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002350:	085b      	lsrs	r3, r3, #1
 8002352:	b29b      	uxth	r3, r3
 8002354:	2207      	movs	r2, #7
 8002356:	4013      	ands	r3, r2
 8002358:	b299      	uxth	r1, r3
 800235a:	1903      	adds	r3, r0, r4
 800235c:	19db      	adds	r3, r3, r7
 800235e:	1902      	adds	r2, r0, r4
 8002360:	19d2      	adds	r2, r2, r7
 8002362:	8812      	ldrh	r2, [r2, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	1902      	adds	r2, r0, r4
 800236e:	19d2      	adds	r2, r2, r7
 8002370:	8812      	ldrh	r2, [r2, #0]
 8002372:	60da      	str	r2, [r3, #12]
 8002374:	e05e      	b.n	8002434 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8002376:	231a      	movs	r3, #26
 8002378:	2220      	movs	r2, #32
 800237a:	189b      	adds	r3, r3, r2
 800237c:	19db      	adds	r3, r3, r7
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	e057      	b.n	8002434 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002384:	231b      	movs	r3, #27
 8002386:	2220      	movs	r2, #32
 8002388:	189b      	adds	r3, r3, r2
 800238a:	19db      	adds	r3, r3, r7
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b08      	cmp	r3, #8
 8002390:	d015      	beq.n	80023be <UART_SetConfig+0x442>
 8002392:	dc18      	bgt.n	80023c6 <UART_SetConfig+0x44a>
 8002394:	2b04      	cmp	r3, #4
 8002396:	d00d      	beq.n	80023b4 <UART_SetConfig+0x438>
 8002398:	dc15      	bgt.n	80023c6 <UART_SetConfig+0x44a>
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <UART_SetConfig+0x428>
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d005      	beq.n	80023ae <UART_SetConfig+0x432>
 80023a2:	e010      	b.n	80023c6 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023a4:	f7ff fc04 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 80023a8:	0003      	movs	r3, r0
 80023aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023ac:	e014      	b.n	80023d8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023ae:	4b2e      	ldr	r3, [pc, #184]	; (8002468 <UART_SetConfig+0x4ec>)
 80023b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023b2:	e011      	b.n	80023d8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023b4:	f7ff fb70 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 80023b8:	0003      	movs	r3, r0
 80023ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023bc:	e00c      	b.n	80023d8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023c4:	e008      	b.n	80023d8 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80023ca:	231a      	movs	r3, #26
 80023cc:	2220      	movs	r2, #32
 80023ce:	189b      	adds	r3, r3, r2
 80023d0:	19db      	adds	r3, r3, r7
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
        break;
 80023d6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80023d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d02a      	beq.n	8002434 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <UART_SetConfig+0x4e8>)
 80023e4:	0052      	lsls	r2, r2, #1
 80023e6:	5ad3      	ldrh	r3, [r2, r3]
 80023e8:	0019      	movs	r1, r3
 80023ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80023ec:	f7fd fe8a 	bl	8000104 <__udivsi3>
 80023f0:	0003      	movs	r3, r0
 80023f2:	001a      	movs	r2, r3
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	085b      	lsrs	r3, r3, #1
 80023fa:	18d2      	adds	r2, r2, r3
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	0019      	movs	r1, r3
 8002402:	0010      	movs	r0, r2
 8002404:	f7fd fe7e 	bl	8000104 <__udivsi3>
 8002408:	0003      	movs	r3, r0
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	2b0f      	cmp	r3, #15
 8002410:	d90a      	bls.n	8002428 <UART_SetConfig+0x4ac>
 8002412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	025b      	lsls	r3, r3, #9
 8002418:	429a      	cmp	r2, r3
 800241a:	d205      	bcs.n	8002428 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800241c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241e:	b29a      	uxth	r2, r3
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	e005      	b.n	8002434 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8002428:	231a      	movs	r3, #26
 800242a:	2220      	movs	r2, #32
 800242c:	189b      	adds	r3, r3, r2
 800242e:	19db      	adds	r3, r3, r7
 8002430:	2201      	movs	r2, #1
 8002432:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	226a      	movs	r2, #106	; 0x6a
 8002438:	2101      	movs	r1, #1
 800243a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	2268      	movs	r2, #104	; 0x68
 8002440:	2101      	movs	r1, #1
 8002442:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	2200      	movs	r2, #0
 8002448:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	2200      	movs	r2, #0
 800244e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002450:	231a      	movs	r3, #26
 8002452:	2220      	movs	r2, #32
 8002454:	189b      	adds	r3, r3, r2
 8002456:	19db      	adds	r3, r3, r7
 8002458:	781b      	ldrb	r3, [r3, #0]
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	b010      	add	sp, #64	; 0x40
 8002460:	bdb0      	pop	{r4, r5, r7, pc}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	080028d0 	.word	0x080028d0
 8002468:	00f42400 	.word	0x00f42400

0800246c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	2201      	movs	r2, #1
 800247a:	4013      	ands	r3, r2
 800247c:	d00b      	beq.n	8002496 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4a4a      	ldr	r2, [pc, #296]	; (80025b0 <UART_AdvFeatureConfig+0x144>)
 8002486:	4013      	ands	r3, r2
 8002488:	0019      	movs	r1, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	2202      	movs	r2, #2
 800249c:	4013      	ands	r3, r2
 800249e:	d00b      	beq.n	80024b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4a43      	ldr	r2, [pc, #268]	; (80025b4 <UART_AdvFeatureConfig+0x148>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	0019      	movs	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	2204      	movs	r2, #4
 80024be:	4013      	ands	r3, r2
 80024c0:	d00b      	beq.n	80024da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4a3b      	ldr	r2, [pc, #236]	; (80025b8 <UART_AdvFeatureConfig+0x14c>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	0019      	movs	r1, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	2208      	movs	r2, #8
 80024e0:	4013      	ands	r3, r2
 80024e2:	d00b      	beq.n	80024fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	4a34      	ldr	r2, [pc, #208]	; (80025bc <UART_AdvFeatureConfig+0x150>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	0019      	movs	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	2210      	movs	r2, #16
 8002502:	4013      	ands	r3, r2
 8002504:	d00b      	beq.n	800251e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a2c      	ldr	r2, [pc, #176]	; (80025c0 <UART_AdvFeatureConfig+0x154>)
 800250e:	4013      	ands	r3, r2
 8002510:	0019      	movs	r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	2220      	movs	r2, #32
 8002524:	4013      	ands	r3, r2
 8002526:	d00b      	beq.n	8002540 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	4a25      	ldr	r2, [pc, #148]	; (80025c4 <UART_AdvFeatureConfig+0x158>)
 8002530:	4013      	ands	r3, r2
 8002532:	0019      	movs	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	2240      	movs	r2, #64	; 0x40
 8002546:	4013      	ands	r3, r2
 8002548:	d01d      	beq.n	8002586 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <UART_AdvFeatureConfig+0x15c>)
 8002552:	4013      	ands	r3, r2
 8002554:	0019      	movs	r1, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	035b      	lsls	r3, r3, #13
 800256a:	429a      	cmp	r2, r3
 800256c:	d10b      	bne.n	8002586 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	4a15      	ldr	r2, [pc, #84]	; (80025cc <UART_AdvFeatureConfig+0x160>)
 8002576:	4013      	ands	r3, r2
 8002578:	0019      	movs	r1, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	4013      	ands	r3, r2
 800258e:	d00b      	beq.n	80025a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <UART_AdvFeatureConfig+0x164>)
 8002598:	4013      	ands	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	605a      	str	r2, [r3, #4]
  }
}
 80025a8:	46c0      	nop			; (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b002      	add	sp, #8
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	fffdffff 	.word	0xfffdffff
 80025b4:	fffeffff 	.word	0xfffeffff
 80025b8:	fffbffff 	.word	0xfffbffff
 80025bc:	ffff7fff 	.word	0xffff7fff
 80025c0:	ffffefff 	.word	0xffffefff
 80025c4:	ffffdfff 	.word	0xffffdfff
 80025c8:	ffefffff 	.word	0xffefffff
 80025cc:	ff9fffff 	.word	0xff9fffff
 80025d0:	fff7ffff 	.word	0xfff7ffff

080025d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2290      	movs	r2, #144	; 0x90
 80025e0:	2100      	movs	r1, #0
 80025e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025e4:	f7fe fa58 	bl	8000a98 <HAL_GetTick>
 80025e8:	0003      	movs	r3, r0
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2208      	movs	r2, #8
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d10c      	bne.n	8002614 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2280      	movs	r2, #128	; 0x80
 80025fe:	0391      	lsls	r1, r2, #14
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4a1a      	ldr	r2, [pc, #104]	; (800266c <UART_CheckIdleState+0x98>)
 8002604:	9200      	str	r2, [sp, #0]
 8002606:	2200      	movs	r2, #0
 8002608:	f000 f832 	bl	8002670 <UART_WaitOnFlagUntilTimeout>
 800260c:	1e03      	subs	r3, r0, #0
 800260e:	d001      	beq.n	8002614 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e026      	b.n	8002662 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2204      	movs	r2, #4
 800261c:	4013      	ands	r3, r2
 800261e:	2b04      	cmp	r3, #4
 8002620:	d10c      	bne.n	800263c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2280      	movs	r2, #128	; 0x80
 8002626:	03d1      	lsls	r1, r2, #15
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	4a10      	ldr	r2, [pc, #64]	; (800266c <UART_CheckIdleState+0x98>)
 800262c:	9200      	str	r2, [sp, #0]
 800262e:	2200      	movs	r2, #0
 8002630:	f000 f81e 	bl	8002670 <UART_WaitOnFlagUntilTimeout>
 8002634:	1e03      	subs	r3, r0, #0
 8002636:	d001      	beq.n	800263c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e012      	b.n	8002662 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2288      	movs	r2, #136	; 0x88
 8002640:	2120      	movs	r1, #32
 8002642:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	228c      	movs	r2, #140	; 0x8c
 8002648:	2120      	movs	r1, #32
 800264a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2284      	movs	r2, #132	; 0x84
 800265c:	2100      	movs	r1, #0
 800265e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	0018      	movs	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	b004      	add	sp, #16
 8002668:	bd80      	pop	{r7, pc}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	01ffffff 	.word	0x01ffffff

08002670 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b094      	sub	sp, #80	; 0x50
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	1dfb      	adds	r3, r7, #7
 800267e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002680:	e0a7      	b.n	80027d2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002684:	3301      	adds	r3, #1
 8002686:	d100      	bne.n	800268a <UART_WaitOnFlagUntilTimeout+0x1a>
 8002688:	e0a3      	b.n	80027d2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268a:	f7fe fa05 	bl	8000a98 <HAL_GetTick>
 800268e:	0002      	movs	r2, r0
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002696:	429a      	cmp	r2, r3
 8002698:	d302      	bcc.n	80026a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800269a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800269c:	2b00      	cmp	r3, #0
 800269e:	d13f      	bne.n	8002720 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026a0:	f3ef 8310 	mrs	r3, PRIMASK
 80026a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80026a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80026a8:	647b      	str	r3, [r7, #68]	; 0x44
 80026aa:	2301      	movs	r3, #1
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	f383 8810 	msr	PRIMASK, r3
}
 80026b4:	46c0      	nop			; (mov r8, r8)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	494e      	ldr	r1, [pc, #312]	; (80027fc <UART_WaitOnFlagUntilTimeout+0x18c>)
 80026c2:	400a      	ands	r2, r1
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026cc:	f383 8810 	msr	PRIMASK, r3
}
 80026d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026d2:	f3ef 8310 	mrs	r3, PRIMASK
 80026d6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80026d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026da:	643b      	str	r3, [r7, #64]	; 0x40
 80026dc:	2301      	movs	r3, #1
 80026de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e2:	f383 8810 	msr	PRIMASK, r3
}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2101      	movs	r1, #1
 80026f4:	438a      	bics	r2, r1
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026fe:	f383 8810 	msr	PRIMASK, r3
}
 8002702:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2288      	movs	r2, #136	; 0x88
 8002708:	2120      	movs	r1, #32
 800270a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	228c      	movs	r2, #140	; 0x8c
 8002710:	2120      	movs	r1, #32
 8002712:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2284      	movs	r2, #132	; 0x84
 8002718:	2100      	movs	r1, #0
 800271a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e069      	b.n	80027f4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2204      	movs	r2, #4
 8002728:	4013      	ands	r3, r2
 800272a:	d052      	beq.n	80027d2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	69da      	ldr	r2, [r3, #28]
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	401a      	ands	r2, r3
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	429a      	cmp	r2, r3
 800273e:	d148      	bne.n	80027d2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2280      	movs	r2, #128	; 0x80
 8002746:	0112      	lsls	r2, r2, #4
 8002748:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800274a:	f3ef 8310 	mrs	r3, PRIMASK
 800274e:	613b      	str	r3, [r7, #16]
  return(result);
 8002750:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002754:	2301      	movs	r3, #1
 8002756:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f383 8810 	msr	PRIMASK, r3
}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4924      	ldr	r1, [pc, #144]	; (80027fc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800276c:	400a      	ands	r2, r1
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002772:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	f383 8810 	msr	PRIMASK, r3
}
 800277a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800277c:	f3ef 8310 	mrs	r3, PRIMASK
 8002780:	61fb      	str	r3, [r7, #28]
  return(result);
 8002782:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002784:	64bb      	str	r3, [r7, #72]	; 0x48
 8002786:	2301      	movs	r3, #1
 8002788:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	f383 8810 	msr	PRIMASK, r3
}
 8002790:	46c0      	nop			; (mov r8, r8)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2101      	movs	r1, #1
 800279e:	438a      	bics	r2, r1
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	f383 8810 	msr	PRIMASK, r3
}
 80027ac:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2288      	movs	r2, #136	; 0x88
 80027b2:	2120      	movs	r1, #32
 80027b4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	228c      	movs	r2, #140	; 0x8c
 80027ba:	2120      	movs	r1, #32
 80027bc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2290      	movs	r2, #144	; 0x90
 80027c2:	2120      	movs	r1, #32
 80027c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2284      	movs	r2, #132	; 0x84
 80027ca:	2100      	movs	r1, #0
 80027cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e010      	b.n	80027f4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	4013      	ands	r3, r2
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	425a      	negs	r2, r3
 80027e2:	4153      	adcs	r3, r2
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	001a      	movs	r2, r3
 80027e8:	1dfb      	adds	r3, r7, #7
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d100      	bne.n	80027f2 <UART_WaitOnFlagUntilTimeout+0x182>
 80027f0:	e747      	b.n	8002682 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	0018      	movs	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b014      	add	sp, #80	; 0x50
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	fffffe5f 	.word	0xfffffe5f

08002800 <__libc_init_array>:
 8002800:	b570      	push	{r4, r5, r6, lr}
 8002802:	2600      	movs	r6, #0
 8002804:	4d0c      	ldr	r5, [pc, #48]	; (8002838 <__libc_init_array+0x38>)
 8002806:	4c0d      	ldr	r4, [pc, #52]	; (800283c <__libc_init_array+0x3c>)
 8002808:	1b64      	subs	r4, r4, r5
 800280a:	10a4      	asrs	r4, r4, #2
 800280c:	42a6      	cmp	r6, r4
 800280e:	d109      	bne.n	8002824 <__libc_init_array+0x24>
 8002810:	2600      	movs	r6, #0
 8002812:	f000 f821 	bl	8002858 <_init>
 8002816:	4d0a      	ldr	r5, [pc, #40]	; (8002840 <__libc_init_array+0x40>)
 8002818:	4c0a      	ldr	r4, [pc, #40]	; (8002844 <__libc_init_array+0x44>)
 800281a:	1b64      	subs	r4, r4, r5
 800281c:	10a4      	asrs	r4, r4, #2
 800281e:	42a6      	cmp	r6, r4
 8002820:	d105      	bne.n	800282e <__libc_init_array+0x2e>
 8002822:	bd70      	pop	{r4, r5, r6, pc}
 8002824:	00b3      	lsls	r3, r6, #2
 8002826:	58eb      	ldr	r3, [r5, r3]
 8002828:	4798      	blx	r3
 800282a:	3601      	adds	r6, #1
 800282c:	e7ee      	b.n	800280c <__libc_init_array+0xc>
 800282e:	00b3      	lsls	r3, r6, #2
 8002830:	58eb      	ldr	r3, [r5, r3]
 8002832:	4798      	blx	r3
 8002834:	3601      	adds	r6, #1
 8002836:	e7f2      	b.n	800281e <__libc_init_array+0x1e>
 8002838:	080028f0 	.word	0x080028f0
 800283c:	080028f0 	.word	0x080028f0
 8002840:	080028f0 	.word	0x080028f0
 8002844:	080028f4 	.word	0x080028f4

08002848 <memset>:
 8002848:	0003      	movs	r3, r0
 800284a:	1882      	adds	r2, r0, r2
 800284c:	4293      	cmp	r3, r2
 800284e:	d100      	bne.n	8002852 <memset+0xa>
 8002850:	4770      	bx	lr
 8002852:	7019      	strb	r1, [r3, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	e7f9      	b.n	800284c <memset+0x4>

08002858 <_init>:
 8002858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800285e:	bc08      	pop	{r3}
 8002860:	469e      	mov	lr, r3
 8002862:	4770      	bx	lr

08002864 <_fini>:
 8002864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286a:	bc08      	pop	{r3}
 800286c:	469e      	mov	lr, r3
 800286e:	4770      	bx	lr
