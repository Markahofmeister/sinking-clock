
sinking-clock_master_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065c4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08006680  08006680  00016680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ad4  08006ad4  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08006ad4  08006ad4  00016ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006adc  08006adc  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006adc  08006adc  00016adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ae0  08006ae0  00016ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08006ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200000a0  08006b84  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08006b84  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cd5  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002587  00000000  00000000  00031d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00034328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db0  00000000  00000000  000351d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dc2  00000000  00000000  00035f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012363  00000000  00000000  0004dd42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093999  00000000  00000000  000600a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3a3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c68  00000000  00000000  000f3a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000a0 	.word	0x200000a0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006668 	.word	0x08006668

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000a4 	.word	0x200000a4
 8000100:	08006668 	.word	0x08006668

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	469b      	mov	fp, r3
 80002a6:	d433      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a8:	465a      	mov	r2, fp
 80002aa:	4653      	mov	r3, sl
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83a      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e078      	b.n	80003b4 <__udivmoddi4+0x144>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e075      	b.n	80003ba <__udivmoddi4+0x14a>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e028      	b.n	800033a <__udivmoddi4+0xca>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	2320      	movs	r3, #32
 8000314:	1a9b      	subs	r3, r3, r2
 8000316:	4652      	mov	r2, sl
 8000318:	40da      	lsrs	r2, r3
 800031a:	4641      	mov	r1, r8
 800031c:	0013      	movs	r3, r2
 800031e:	464a      	mov	r2, r9
 8000320:	408a      	lsls	r2, r1
 8000322:	0017      	movs	r7, r2
 8000324:	4642      	mov	r2, r8
 8000326:	431f      	orrs	r7, r3
 8000328:	4653      	mov	r3, sl
 800032a:	4093      	lsls	r3, r2
 800032c:	001e      	movs	r6, r3
 800032e:	42af      	cmp	r7, r5
 8000330:	d9c4      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0d9      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000340:	07fb      	lsls	r3, r7, #31
 8000342:	0872      	lsrs	r2, r6, #1
 8000344:	431a      	orrs	r2, r3
 8000346:	4646      	mov	r6, r8
 8000348:	087b      	lsrs	r3, r7, #1
 800034a:	e00e      	b.n	800036a <__udivmoddi4+0xfa>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d101      	bne.n	8000354 <__udivmoddi4+0xe4>
 8000350:	42a2      	cmp	r2, r4
 8000352:	d80c      	bhi.n	800036e <__udivmoddi4+0xfe>
 8000354:	1aa4      	subs	r4, r4, r2
 8000356:	419d      	sbcs	r5, r3
 8000358:	2001      	movs	r0, #1
 800035a:	1924      	adds	r4, r4, r4
 800035c:	416d      	adcs	r5, r5
 800035e:	2100      	movs	r1, #0
 8000360:	3e01      	subs	r6, #1
 8000362:	1824      	adds	r4, r4, r0
 8000364:	414d      	adcs	r5, r1
 8000366:	2e00      	cmp	r6, #0
 8000368:	d006      	beq.n	8000378 <__udivmoddi4+0x108>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d9ee      	bls.n	800034c <__udivmoddi4+0xdc>
 800036e:	3e01      	subs	r6, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2e00      	cmp	r6, #0
 8000376:	d1f8      	bne.n	800036a <__udivmoddi4+0xfa>
 8000378:	9800      	ldr	r0, [sp, #0]
 800037a:	9901      	ldr	r1, [sp, #4]
 800037c:	465b      	mov	r3, fp
 800037e:	1900      	adds	r0, r0, r4
 8000380:	4169      	adcs	r1, r5
 8000382:	2b00      	cmp	r3, #0
 8000384:	db24      	blt.n	80003d0 <__udivmoddi4+0x160>
 8000386:	002b      	movs	r3, r5
 8000388:	465a      	mov	r2, fp
 800038a:	4644      	mov	r4, r8
 800038c:	40d3      	lsrs	r3, r2
 800038e:	002a      	movs	r2, r5
 8000390:	40e2      	lsrs	r2, r4
 8000392:	001c      	movs	r4, r3
 8000394:	465b      	mov	r3, fp
 8000396:	0015      	movs	r5, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	db2a      	blt.n	80003f2 <__udivmoddi4+0x182>
 800039c:	0026      	movs	r6, r4
 800039e:	409e      	lsls	r6, r3
 80003a0:	0033      	movs	r3, r6
 80003a2:	0026      	movs	r6, r4
 80003a4:	4647      	mov	r7, r8
 80003a6:	40be      	lsls	r6, r7
 80003a8:	0032      	movs	r2, r6
 80003aa:	1a80      	subs	r0, r0, r2
 80003ac:	4199      	sbcs	r1, r3
 80003ae:	9000      	str	r0, [sp, #0]
 80003b0:	9101      	str	r1, [sp, #4]
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b4:	42a3      	cmp	r3, r4
 80003b6:	d8bc      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80003b8:	e783      	b.n	80002c2 <__udivmoddi4+0x52>
 80003ba:	4642      	mov	r2, r8
 80003bc:	2320      	movs	r3, #32
 80003be:	2100      	movs	r1, #0
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	2200      	movs	r2, #0
 80003c4:	9100      	str	r1, [sp, #0]
 80003c6:	9201      	str	r2, [sp, #4]
 80003c8:	2201      	movs	r2, #1
 80003ca:	40da      	lsrs	r2, r3
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	e786      	b.n	80002de <__udivmoddi4+0x6e>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	1a9b      	subs	r3, r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	4646      	mov	r6, r8
 80003da:	409a      	lsls	r2, r3
 80003dc:	0023      	movs	r3, r4
 80003de:	40f3      	lsrs	r3, r6
 80003e0:	4644      	mov	r4, r8
 80003e2:	4313      	orrs	r3, r2
 80003e4:	002a      	movs	r2, r5
 80003e6:	40e2      	lsrs	r2, r4
 80003e8:	001c      	movs	r4, r3
 80003ea:	465b      	mov	r3, fp
 80003ec:	0015      	movs	r5, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dad4      	bge.n	800039c <__udivmoddi4+0x12c>
 80003f2:	4642      	mov	r2, r8
 80003f4:	002f      	movs	r7, r5
 80003f6:	2320      	movs	r3, #32
 80003f8:	0026      	movs	r6, r4
 80003fa:	4097      	lsls	r7, r2
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	40de      	lsrs	r6, r3
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7cd      	b.n	80003a2 <__udivmoddi4+0x132>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000464:	2301      	movs	r3, #1
 8000466:	425b      	negs	r3, r3
 8000468:	1d39      	adds	r1, r7, #4
 800046a:	4804      	ldr	r0, [pc, #16]	; (800047c <__io_putchar+0x20>)
 800046c:	2201      	movs	r2, #1
 800046e:	f004 fc09 	bl	8004c84 <HAL_UART_Transmit>
  return ch;
 8000472:	687b      	ldr	r3, [r7, #4]
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}
 800047c:	2000013c 	.word	0x2000013c

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b590      	push	{r4, r7, lr}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000486:	f000 ffad 	bl	80013e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048a:	f000 f833 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048e:	f000 f9af 	bl	80007f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000492:	f000 f979 	bl	8000788 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000496:	f000 f879 	bl	800058c <MX_I2C1_Init>
  MX_RTC_Init();
 800049a:	f000 f8b7 	bl	800060c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  displayToggle = 2; 		// Display at 100% intensity for next display toggle
 800049e:	4b10      	ldr	r3, [pc, #64]	; (80004e0 <main+0x60>)
 80004a0:	2202      	movs	r2, #2
 80004a2:	701a      	strb	r2, [r3, #0]
  sevSeg_I2C1_Init();		//Initialize 7-seg
 80004a4:	f000 fa68 	bl	8000978 <sevSeg_I2C1_Init>

  userAlarmToggle = false;			//Default to off
 80004a8:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <main+0x64>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef halRet = HAL_RTC_DeactivateAlarm(&hrtc, userAlarm);	//Initially disable user alarm
 80004ae:	1dfc      	adds	r4, r7, #7
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	009a      	lsls	r2, r3, #2
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <main+0x68>)
 80004b6:	0011      	movs	r1, r2
 80004b8:	0018      	movs	r0, r3
 80004ba:	f004 f8ed 	bl	8004698 <HAL_RTC_DeactivateAlarm>
 80004be:	0003      	movs	r3, r0
 80004c0:	7023      	strb	r3, [r4, #0]

  if(halRet != HAL_OK) {
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d004      	beq.n	80004d4 <main+0x54>
	  printf("Error deactivating user alarm.\n\r");
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <main+0x6c>)
 80004cc:	0018      	movs	r0, r3
 80004ce:	f005 f8f3 	bl	80056b8 <iprintf>
 80004d2:	e003      	b.n	80004dc <main+0x5c>
  } else {
	  printf("User alarm deactivated.\n\r");
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <main+0x70>)
 80004d6:	0018      	movs	r0, r3
 80004d8:	f005 f8ee 	bl	80056b8 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <main+0x5c>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	200001e8 	.word	0x200001e8
 80004e4:	200001e9 	.word	0x200001e9
 80004e8:	20000110 	.word	0x20000110
 80004ec:	08006680 	.word	0x08006680
 80004f0:	080066a4 	.word	0x080066a4

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b093      	sub	sp, #76	; 0x4c
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	2410      	movs	r4, #16
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	0018      	movs	r0, r3
 8000500:	2338      	movs	r3, #56	; 0x38
 8000502:	001a      	movs	r2, r3
 8000504:	2100      	movs	r1, #0
 8000506:	f005 f8ce 	bl	80056a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050a:	003b      	movs	r3, r7
 800050c:	0018      	movs	r0, r3
 800050e:	2310      	movs	r3, #16
 8000510:	001a      	movs	r2, r3
 8000512:	2100      	movs	r1, #0
 8000514:	f005 f8c7 	bl	80056a6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	0018      	movs	r0, r3
 800051e:	f002 fd1b 	bl	8002f58 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000522:	193b      	adds	r3, r7, r4
 8000524:	220a      	movs	r2, #10
 8000526:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000528:	193b      	adds	r3, r7, r4
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	0052      	lsls	r2, r2, #1
 800052e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000530:	0021      	movs	r1, r4
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2240      	movs	r2, #64	; 0x40
 800053c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2201      	movs	r2, #1
 8000542:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054a:	187b      	adds	r3, r7, r1
 800054c:	0018      	movs	r0, r3
 800054e:	f002 fd79 	bl	8003044 <HAL_RCC_OscConfig>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000556:	f000 fce7 	bl	8000f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055a:	003b      	movs	r3, r7
 800055c:	2207      	movs	r2, #7
 800055e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000560:	003b      	movs	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000566:	003b      	movs	r3, r7
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056c:	003b      	movs	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000572:	003b      	movs	r3, r7
 8000574:	2100      	movs	r1, #0
 8000576:	0018      	movs	r0, r3
 8000578:	f003 f87e 	bl	8003678 <HAL_RCC_ClockConfig>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000580:	f000 fcd2 	bl	8000f28 <Error_Handler>
  }
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b013      	add	sp, #76	; 0x4c
 800058a:	bd90      	pop	{r4, r7, pc}

0800058c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000590:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <MX_I2C1_Init+0x74>)
 8000592:	4a1c      	ldr	r2, [pc, #112]	; (8000604 <MX_I2C1_Init+0x78>)
 8000594:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <MX_I2C1_Init+0x74>)
 8000598:	4a1b      	ldr	r2, [pc, #108]	; (8000608 <MX_I2C1_Init+0x7c>)
 800059a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800059c:	4b18      	ldr	r3, [pc, #96]	; (8000600 <MX_I2C1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <MX_I2C1_Init+0x74>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_I2C1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_I2C1_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_I2C1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_I2C1_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_I2C1_Init+0x74>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_I2C1_Init+0x74>)
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 fa9b 	bl	8001b04 <HAL_I2C_Init>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005d2:	f000 fca9 	bl	8000f28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <MX_I2C1_Init+0x74>)
 80005d8:	2100      	movs	r1, #0
 80005da:	0018      	movs	r0, r3
 80005dc:	f002 fc24 	bl	8002e28 <HAL_I2CEx_ConfigAnalogFilter>
 80005e0:	1e03      	subs	r3, r0, #0
 80005e2:	d001      	beq.n	80005e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005e4:	f000 fca0 	bl	8000f28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <MX_I2C1_Init+0x74>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	0018      	movs	r0, r3
 80005ee:	f002 fc67 	bl	8002ec0 <HAL_I2CEx_ConfigDigitalFilter>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005f6:	f000 fc97 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200000bc 	.word	0x200000bc
 8000604:	40005400 	.word	0x40005400
 8000608:	0010061a 	.word	0x0010061a

0800060c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b090      	sub	sp, #64	; 0x40
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000612:	232c      	movs	r3, #44	; 0x2c
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	0018      	movs	r0, r3
 8000618:	2314      	movs	r3, #20
 800061a:	001a      	movs	r2, r3
 800061c:	2100      	movs	r1, #0
 800061e:	f005 f842 	bl	80056a6 <memset>
  RTC_DateTypeDef sDate = {0};
 8000622:	2328      	movs	r3, #40	; 0x28
 8000624:	18fb      	adds	r3, r7, r3
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800062a:	003b      	movs	r3, r7
 800062c:	0018      	movs	r0, r3
 800062e:	2328      	movs	r3, #40	; 0x28
 8000630:	001a      	movs	r2, r3
 8000632:	2100      	movs	r1, #0
 8000634:	f005 f837 	bl	80056a6 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000638:	4b4f      	ldr	r3, [pc, #316]	; (8000778 <MX_RTC_Init+0x16c>)
 800063a:	4a50      	ldr	r2, [pc, #320]	; (800077c <MX_RTC_Init+0x170>)
 800063c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800063e:	4b4e      	ldr	r3, [pc, #312]	; (8000778 <MX_RTC_Init+0x16c>)
 8000640:	2240      	movs	r2, #64	; 0x40
 8000642:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000644:	4b4c      	ldr	r3, [pc, #304]	; (8000778 <MX_RTC_Init+0x16c>)
 8000646:	227f      	movs	r2, #127	; 0x7f
 8000648:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800064a:	4b4b      	ldr	r3, [pc, #300]	; (8000778 <MX_RTC_Init+0x16c>)
 800064c:	22ff      	movs	r2, #255	; 0xff
 800064e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000650:	4b49      	ldr	r3, [pc, #292]	; (8000778 <MX_RTC_Init+0x16c>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000656:	4b48      	ldr	r3, [pc, #288]	; (8000778 <MX_RTC_Init+0x16c>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800065c:	4b46      	ldr	r3, [pc, #280]	; (8000778 <MX_RTC_Init+0x16c>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000662:	4b45      	ldr	r3, [pc, #276]	; (8000778 <MX_RTC_Init+0x16c>)
 8000664:	2280      	movs	r2, #128	; 0x80
 8000666:	05d2      	lsls	r2, r2, #23
 8000668:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800066a:	4b43      	ldr	r3, [pc, #268]	; (8000778 <MX_RTC_Init+0x16c>)
 800066c:	2200      	movs	r2, #0
 800066e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000670:	4b41      	ldr	r3, [pc, #260]	; (8000778 <MX_RTC_Init+0x16c>)
 8000672:	0018      	movs	r0, r3
 8000674:	f003 fb24 	bl	8003cc0 <HAL_RTC_Init>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 800067c:	f000 fc54 	bl	8000f28 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000680:	212c      	movs	r1, #44	; 0x2c
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2201      	movs	r2, #1
 8000686:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2200      	movs	r2, #0
 800068c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x50;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2250      	movs	r2, #80	; 0x50
 8000692:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2200      	movs	r2, #0
 8000698:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2200      	movs	r2, #0
 800069e:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006ac:	1879      	adds	r1, r7, r1
 80006ae:	4b32      	ldr	r3, [pc, #200]	; (8000778 <MX_RTC_Init+0x16c>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	0018      	movs	r0, r3
 80006b4:	f003 fba6 	bl	8003e04 <HAL_RTC_SetTime>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 80006bc:	f000 fc34 	bl	8000f28 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006c0:	2128      	movs	r1, #40	; 0x28
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2201      	movs	r2, #1
 80006c6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2201      	movs	r2, #1
 80006cc:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2201      	movs	r2, #1
 80006d2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80006da:	1879      	adds	r1, r7, r1
 80006dc:	4b26      	ldr	r3, [pc, #152]	; (8000778 <MX_RTC_Init+0x16c>)
 80006de:	2201      	movs	r2, #1
 80006e0:	0018      	movs	r0, r3
 80006e2:	f003 fc93 	bl	800400c <HAL_RTC_SetDate>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <MX_RTC_Init+0xe2>
  {
    Error_Handler();
 80006ea:	f000 fc1d 	bl	8000f28 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 80006ee:	003b      	movs	r3, r7
 80006f0:	2201      	movs	r2, #1
 80006f2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80006f4:	003b      	movs	r3, r7
 80006f6:	2200      	movs	r2, #0
 80006f8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80006fa:	003b      	movs	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000700:	003b      	movs	r3, r7
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000706:	003b      	movs	r3, r7
 8000708:	2200      	movs	r2, #0
 800070a:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800070c:	003b      	movs	r3, r7
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000712:	003b      	movs	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000718:	003b      	movs	r3, r7
 800071a:	4a19      	ldr	r2, [pc, #100]	; (8000780 <MX_RTC_Init+0x174>)
 800071c:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800071e:	003b      	movs	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000724:	003b      	movs	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800072a:	003b      	movs	r3, r7
 800072c:	2220      	movs	r2, #32
 800072e:	2101      	movs	r1, #1
 8000730:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000732:	003b      	movs	r3, r7
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800073a:	0039      	movs	r1, r7
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_RTC_Init+0x16c>)
 800073e:	2201      	movs	r2, #1
 8000740:	0018      	movs	r0, r3
 8000742:	f003 fe69 	bl	8004418 <HAL_RTC_SetAlarm_IT>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <MX_RTC_Init+0x142>
  {
    Error_Handler();
 800074a:	f000 fbed 	bl	8000f28 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 800074e:	003b      	movs	r3, r7
 8000750:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <MX_RTC_Init+0x178>)
 8000752:	615a      	str	r2, [r3, #20]
  sAlarm.Alarm = RTC_ALARM_B;
 8000754:	003b      	movs	r3, r7
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	0092      	lsls	r2, r2, #2
 800075a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800075c:	0039      	movs	r1, r7
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_RTC_Init+0x16c>)
 8000760:	2201      	movs	r2, #1
 8000762:	0018      	movs	r0, r3
 8000764:	f003 fe58 	bl	8004418 <HAL_RTC_SetAlarm_IT>
 8000768:	1e03      	subs	r3, r0, #0
 800076a:	d001      	beq.n	8000770 <MX_RTC_Init+0x164>
  {
    Error_Handler();
 800076c:	f000 fbdc 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	b010      	add	sp, #64	; 0x40
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000110 	.word	0x20000110
 800077c:	40002800 	.word	0x40002800
 8000780:	80800080 	.word	0x80800080
 8000784:	80808080 	.word	0x80808080

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_USART2_UART_Init+0x60>)
 800078e:	4a17      	ldr	r2, [pc, #92]	; (80007ec <MX_USART2_UART_Init+0x64>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_USART2_UART_Init+0x60>)
 8000794:	22e1      	movs	r2, #225	; 0xe1
 8000796:	0252      	lsls	r2, r2, #9
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_USART2_UART_Init+0x60>)
 800079c:	2280      	movs	r2, #128	; 0x80
 800079e:	0152      	lsls	r2, r2, #5
 80007a0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_USART2_UART_Init+0x60>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_USART2_UART_Init+0x60>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_USART2_UART_Init+0x60>)
 80007b0:	220c      	movs	r2, #12
 80007b2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_USART2_UART_Init+0x60>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_USART2_UART_Init+0x60>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_USART2_UART_Init+0x60>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_USART2_UART_Init+0x60>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_USART2_UART_Init+0x60>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d2:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <MX_USART2_UART_Init+0x60>)
 80007d4:	0018      	movs	r0, r3
 80007d6:	f004 f9ff 	bl	8004bd8 <HAL_UART_Init>
 80007da:	1e03      	subs	r3, r0, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80007de:	f000 fba3 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000013c 	.word	0x2000013c
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b08b      	sub	sp, #44	; 0x2c
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	2414      	movs	r4, #20
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	0018      	movs	r0, r3
 80007fc:	2314      	movs	r3, #20
 80007fe:	001a      	movs	r2, r3
 8000800:	2100      	movs	r1, #0
 8000802:	f004 ff50 	bl	80056a6 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b57      	ldr	r3, [pc, #348]	; (8000964 <MX_GPIO_Init+0x174>)
 8000808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800080a:	4b56      	ldr	r3, [pc, #344]	; (8000964 <MX_GPIO_Init+0x174>)
 800080c:	2102      	movs	r1, #2
 800080e:	430a      	orrs	r2, r1
 8000810:	635a      	str	r2, [r3, #52]	; 0x34
 8000812:	4b54      	ldr	r3, [pc, #336]	; (8000964 <MX_GPIO_Init+0x174>)
 8000814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000816:	2202      	movs	r2, #2
 8000818:	4013      	ands	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b51      	ldr	r3, [pc, #324]	; (8000964 <MX_GPIO_Init+0x174>)
 8000820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000822:	4b50      	ldr	r3, [pc, #320]	; (8000964 <MX_GPIO_Init+0x174>)
 8000824:	2104      	movs	r1, #4
 8000826:	430a      	orrs	r2, r1
 8000828:	635a      	str	r2, [r3, #52]	; 0x34
 800082a:	4b4e      	ldr	r3, [pc, #312]	; (8000964 <MX_GPIO_Init+0x174>)
 800082c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800082e:	2204      	movs	r2, #4
 8000830:	4013      	ands	r3, r2
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000836:	4b4b      	ldr	r3, [pc, #300]	; (8000964 <MX_GPIO_Init+0x174>)
 8000838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800083a:	4b4a      	ldr	r3, [pc, #296]	; (8000964 <MX_GPIO_Init+0x174>)
 800083c:	2120      	movs	r1, #32
 800083e:	430a      	orrs	r2, r1
 8000840:	635a      	str	r2, [r3, #52]	; 0x34
 8000842:	4b48      	ldr	r3, [pc, #288]	; (8000964 <MX_GPIO_Init+0x174>)
 8000844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000846:	2220      	movs	r2, #32
 8000848:	4013      	ands	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b45      	ldr	r3, [pc, #276]	; (8000964 <MX_GPIO_Init+0x174>)
 8000850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000852:	4b44      	ldr	r3, [pc, #272]	; (8000964 <MX_GPIO_Init+0x174>)
 8000854:	2101      	movs	r1, #1
 8000856:	430a      	orrs	r2, r1
 8000858:	635a      	str	r2, [r3, #52]	; 0x34
 800085a:	4b42      	ldr	r3, [pc, #264]	; (8000964 <MX_GPIO_Init+0x174>)
 800085c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800085e:	2201      	movs	r2, #1
 8000860:	4013      	ands	r3, r2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Output_Pin|PM_LED_Pin|Alarm_LED_Pin, GPIO_PIN_RESET);
 8000866:	4b40      	ldr	r3, [pc, #256]	; (8000968 <MX_GPIO_Init+0x178>)
 8000868:	2200      	movs	r2, #0
 800086a:	21c2      	movs	r1, #194	; 0xc2
 800086c:	0018      	movs	r0, r3
 800086e:	f001 f8f7 	bl	8001a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000872:	4b3e      	ldr	r3, [pc, #248]	; (800096c <MX_GPIO_Init+0x17c>)
 8000874:	2200      	movs	r2, #0
 8000876:	2140      	movs	r1, #64	; 0x40
 8000878:	0018      	movs	r0, r3
 800087a:	f001 f8f1 	bl	8001a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 800087e:	193b      	adds	r3, r7, r4
 8000880:	2204      	movs	r2, #4
 8000882:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000884:	193b      	adds	r3, r7, r4
 8000886:	2288      	movs	r2, #136	; 0x88
 8000888:	0352      	lsls	r2, r2, #13
 800088a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	193b      	adds	r3, r7, r4
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000892:	193b      	adds	r3, r7, r4
 8000894:	4a36      	ldr	r2, [pc, #216]	; (8000970 <MX_GPIO_Init+0x180>)
 8000896:	0019      	movs	r1, r3
 8000898:	0010      	movs	r0, r2
 800089a:	f000 ff7d 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : Display_Button_Pin Alarm_Enable_Button_Pin Alarm_Set_Button_Pin Hour_Set_Button_Pin
                           Minute_Set_Button_Pin */
  GPIO_InitStruct.Pin = Display_Button_Pin|Alarm_Enable_Button_Pin|Alarm_Set_Button_Pin|Hour_Set_Button_Pin
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	4a34      	ldr	r2, [pc, #208]	; (8000974 <MX_GPIO_Init+0x184>)
 80008a2:	601a      	str	r2, [r3, #0]
                          |Minute_Set_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	2284      	movs	r2, #132	; 0x84
 80008a8:	0392      	lsls	r2, r2, #14
 80008aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	2201      	movs	r2, #1
 80008b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	193a      	adds	r2, r7, r4
 80008b4:	23a0      	movs	r3, #160	; 0xa0
 80008b6:	05db      	lsls	r3, r3, #23
 80008b8:	0011      	movs	r1, r2
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 ff6c 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Output_Pin PM_LED_Pin Alarm_LED_Pin */
  GPIO_InitStruct.Pin = Buzzer_Output_Pin|PM_LED_Pin|Alarm_LED_Pin;
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	22c2      	movs	r2, #194	; 0xc2
 80008c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	2201      	movs	r2, #1
 80008ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	4a23      	ldr	r2, [pc, #140]	; (8000968 <MX_GPIO_Init+0x178>)
 80008dc:	0019      	movs	r1, r3
 80008de:	0010      	movs	r0, r2
 80008e0:	f000 ff5a 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	2240      	movs	r2, #64	; 0x40
 80008e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	2201      	movs	r2, #1
 80008ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	4a1b      	ldr	r2, [pc, #108]	; (800096c <MX_GPIO_Init+0x17c>)
 8000900:	0019      	movs	r1, r3
 8000902:	0010      	movs	r0, r2
 8000904:	f000 ff48 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : Snooze_Button_Pin */
  GPIO_InitStruct.Pin = Snooze_Button_Pin;
 8000908:	0021      	movs	r1, r4
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	0112      	lsls	r2, r2, #4
 8000910:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2201      	movs	r2, #1
 800091c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Snooze_Button_GPIO_Port, &GPIO_InitStruct);
 800091e:	187a      	adds	r2, r7, r1
 8000920:	23a0      	movs	r3, #160	; 0xa0
 8000922:	05db      	lsls	r3, r3, #23
 8000924:	0011      	movs	r1, r2
 8000926:	0018      	movs	r0, r3
 8000928:	f000 ff36 	bl	8001798 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	2005      	movs	r0, #5
 8000932:	f000 fe89 	bl	8001648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000936:	2005      	movs	r0, #5
 8000938:	f000 fe9b 	bl	8001672 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2006      	movs	r0, #6
 8000942:	f000 fe81 	bl	8001648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000946:	2006      	movs	r0, #6
 8000948:	f000 fe93 	bl	8001672 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	2007      	movs	r0, #7
 8000952:	f000 fe79 	bl	8001648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000956:	2007      	movs	r0, #7
 8000958:	f000 fe8b 	bl	8001672 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	b00b      	add	sp, #44	; 0x2c
 8000962:	bd90      	pop	{r4, r7, pc}
 8000964:	40021000 	.word	0x40021000
 8000968:	50000400 	.word	0x50000400
 800096c:	50000800 	.word	0x50000800
 8000970:	50001400 	.word	0x50001400
 8000974:	00001033 	.word	0x00001033

08000978 <sevSeg_I2C1_Init>:

/* USER CODE BEGIN 4 */

void sevSeg_I2C1_Init(void) {
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b085      	sub	sp, #20
 800097c:	af02      	add	r7, sp, #8
	 */

	HAL_StatusTypeDef halRet;

	//Set display to decode hex data inputs
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_decodeBuffer, 2, HAL_MAX_DELAY);
 800097e:	4b64      	ldr	r3, [pc, #400]	; (8000b10 <sevSeg_I2C1_Init+0x198>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b299      	uxth	r1, r3
 8000984:	1dfc      	adds	r4, r7, #7
 8000986:	4a63      	ldr	r2, [pc, #396]	; (8000b14 <sevSeg_I2C1_Init+0x19c>)
 8000988:	4863      	ldr	r0, [pc, #396]	; (8000b18 <sevSeg_I2C1_Init+0x1a0>)
 800098a:	2301      	movs	r3, #1
 800098c:	425b      	negs	r3, r3
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2302      	movs	r3, #2
 8000992:	f001 f94d 	bl	8001c30 <HAL_I2C_Master_Transmit>
 8000996:	0003      	movs	r3, r0
 8000998:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d004      	beq.n	80009ac <sevSeg_I2C1_Init+0x34>
		printf("HAL Error - TX decode mode\n\r");
 80009a2:	4b5e      	ldr	r3, [pc, #376]	; (8000b1c <sevSeg_I2C1_Init+0x1a4>)
 80009a4:	0018      	movs	r0, r3
 80009a6:	f004 fe87 	bl	80056b8 <iprintf>
 80009aa:	e003      	b.n	80009b4 <sevSeg_I2C1_Init+0x3c>
	} else{
		printf("Display set to decode mode\n\r");
 80009ac:	4b5c      	ldr	r3, [pc, #368]	; (8000b20 <sevSeg_I2C1_Init+0x1a8>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f004 fe82 	bl	80056b8 <iprintf>
	}

	//Disable shutdown mode
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_SD_ONBuff, 2, HAL_MAX_DELAY);
 80009b4:	4b56      	ldr	r3, [pc, #344]	; (8000b10 <sevSeg_I2C1_Init+0x198>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b299      	uxth	r1, r3
 80009ba:	1dfc      	adds	r4, r7, #7
 80009bc:	4a59      	ldr	r2, [pc, #356]	; (8000b24 <sevSeg_I2C1_Init+0x1ac>)
 80009be:	4856      	ldr	r0, [pc, #344]	; (8000b18 <sevSeg_I2C1_Init+0x1a0>)
 80009c0:	2301      	movs	r3, #1
 80009c2:	425b      	negs	r3, r3
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	2302      	movs	r3, #2
 80009c8:	f001 f932 	bl	8001c30 <HAL_I2C_Master_Transmit>
 80009cc:	0003      	movs	r3, r0
 80009ce:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 80009d0:	1dfb      	adds	r3, r7, #7
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d004      	beq.n	80009e2 <sevSeg_I2C1_Init+0x6a>
		printf("HAL Error - TX disable shutdown mode\n\r");
 80009d8:	4b53      	ldr	r3, [pc, #332]	; (8000b28 <sevSeg_I2C1_Init+0x1b0>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f004 fe6c 	bl	80056b8 <iprintf>
 80009e0:	e003      	b.n	80009ea <sevSeg_I2C1_Init+0x72>
	} else {
		printf("Display shutdown mode disabled\n\r");
 80009e2:	4b52      	ldr	r3, [pc, #328]	; (8000b2c <sevSeg_I2C1_Init+0x1b4>)
 80009e4:	0018      	movs	r0, r3
 80009e6:	f004 fe67 	bl	80056b8 <iprintf>
	}

	//S et to test mode
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_testONBuff, 2, HAL_MAX_DELAY);
 80009ea:	4b49      	ldr	r3, [pc, #292]	; (8000b10 <sevSeg_I2C1_Init+0x198>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b299      	uxth	r1, r3
 80009f0:	1dfc      	adds	r4, r7, #7
 80009f2:	4a4f      	ldr	r2, [pc, #316]	; (8000b30 <sevSeg_I2C1_Init+0x1b8>)
 80009f4:	4848      	ldr	r0, [pc, #288]	; (8000b18 <sevSeg_I2C1_Init+0x1a0>)
 80009f6:	2301      	movs	r3, #1
 80009f8:	425b      	negs	r3, r3
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2302      	movs	r3, #2
 80009fe:	f001 f917 	bl	8001c30 <HAL_I2C_Master_Transmit>
 8000a02:	0003      	movs	r3, r0
 8000a04:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d004      	beq.n	8000a18 <sevSeg_I2C1_Init+0xa0>
		printf("HAL Error - TX test mode ON data\n\r");
 8000a0e:	4b49      	ldr	r3, [pc, #292]	; (8000b34 <sevSeg_I2C1_Init+0x1bc>)
 8000a10:	0018      	movs	r0, r3
 8000a12:	f004 fe51 	bl	80056b8 <iprintf>
 8000a16:	e003      	b.n	8000a20 <sevSeg_I2C1_Init+0xa8>
	} else {
		printf("Test mode enabled - all LEDs on\n\r");
 8000a18:	4b47      	ldr	r3, [pc, #284]	; (8000b38 <sevSeg_I2C1_Init+0x1c0>)
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f004 fe4c 	bl	80056b8 <iprintf>
	}

	// Disable test mode
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_testOFFBuff, 2, HAL_MAX_DELAY);
 8000a20:	4b3b      	ldr	r3, [pc, #236]	; (8000b10 <sevSeg_I2C1_Init+0x198>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b299      	uxth	r1, r3
 8000a26:	1dfc      	adds	r4, r7, #7
 8000a28:	4a44      	ldr	r2, [pc, #272]	; (8000b3c <sevSeg_I2C1_Init+0x1c4>)
 8000a2a:	483b      	ldr	r0, [pc, #236]	; (8000b18 <sevSeg_I2C1_Init+0x1a0>)
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	425b      	negs	r3, r3
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	2302      	movs	r3, #2
 8000a34:	f001 f8fc 	bl	8001c30 <HAL_I2C_Master_Transmit>
 8000a38:	0003      	movs	r3, r0
 8000a3a:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000a3c:	1dfb      	adds	r3, r7, #7
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d004      	beq.n	8000a4e <sevSeg_I2C1_Init+0xd6>
		printf("HAL Error - TX test mode OFF data\n\r");
 8000a44:	4b3e      	ldr	r3, [pc, #248]	; (8000b40 <sevSeg_I2C1_Init+0x1c8>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f004 fe36 	bl	80056b8 <iprintf>
 8000a4c:	e003      	b.n	8000a56 <sevSeg_I2C1_Init+0xde>
	} else {
		printf("Test mode disabled - all LEDs off\n\r");
 8000a4e:	4b3d      	ldr	r3, [pc, #244]	; (8000b44 <sevSeg_I2C1_Init+0x1cc>)
 8000a50:	0018      	movs	r0, r3
 8000a52:	f004 fe31 	bl	80056b8 <iprintf>
	}

	sevSeg_intensityBuff[1] = sevSeg_intensityDuty[1];		// Initialize to 50% duty cycle
 8000a56:	2231      	movs	r2, #49	; 0x31
 8000a58:	4b3b      	ldr	r3, [pc, #236]	; (8000b48 <sevSeg_I2C1_Init+0x1d0>)
 8000a5a:	705a      	strb	r2, [r3, #1]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_intensityBuff, 2, HAL_MAX_DELAY);
 8000a5c:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <sevSeg_I2C1_Init+0x198>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b299      	uxth	r1, r3
 8000a62:	1dfc      	adds	r4, r7, #7
 8000a64:	4a38      	ldr	r2, [pc, #224]	; (8000b48 <sevSeg_I2C1_Init+0x1d0>)
 8000a66:	482c      	ldr	r0, [pc, #176]	; (8000b18 <sevSeg_I2C1_Init+0x1a0>)
 8000a68:	2301      	movs	r3, #1
 8000a6a:	425b      	negs	r3, r3
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2302      	movs	r3, #2
 8000a70:	f001 f8de 	bl	8001c30 <HAL_I2C_Master_Transmit>
 8000a74:	0003      	movs	r3, r0
 8000a76:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d004      	beq.n	8000a8a <sevSeg_I2C1_Init+0x112>
		printf("HAL Error - TX intensity level data\n\r");
 8000a80:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <sevSeg_I2C1_Init+0x1d4>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f004 fe18 	bl	80056b8 <iprintf>
 8000a88:	e003      	b.n	8000a92 <sevSeg_I2C1_Init+0x11a>
	} else {
		printf("Intensity Set\n\r");
 8000a8a:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <sevSeg_I2C1_Init+0x1d8>)
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f004 fe13 	bl	80056b8 <iprintf>
	}

	// Set and display current time (12:00 A.M.)

	currTime.Hours = 12;
 8000a92:	4b30      	ldr	r3, [pc, #192]	; (8000b54 <sevSeg_I2C1_Init+0x1dc>)
 8000a94:	220c      	movs	r2, #12
 8000a96:	701a      	strb	r2, [r3, #0]
	currTime.Minutes = 59;
 8000a98:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <sevSeg_I2C1_Init+0x1dc>)
 8000a9a:	223b      	movs	r2, #59	; 0x3b
 8000a9c:	705a      	strb	r2, [r3, #1]
	currTime.Seconds = 50;
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <sevSeg_I2C1_Init+0x1dc>)
 8000aa0:	2232      	movs	r2, #50	; 0x32
 8000aa2:	709a      	strb	r2, [r3, #2]

	currDate.Year = 0;
 8000aa4:	4b2c      	ldr	r3, [pc, #176]	; (8000b58 <sevSeg_I2C1_Init+0x1e0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	70da      	strb	r2, [r3, #3]
	currDate.Month = RTC_MONTH_JANUARY;
 8000aaa:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <sevSeg_I2C1_Init+0x1e0>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	705a      	strb	r2, [r3, #1]
	currDate.Date = 0;
 8000ab0:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <sevSeg_I2C1_Init+0x1e0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 8000ab6:	4927      	ldr	r1, [pc, #156]	; (8000b54 <sevSeg_I2C1_Init+0x1dc>)
 8000ab8:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <sevSeg_I2C1_Init+0x1e4>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	0018      	movs	r0, r3
 8000abe:	f003 f9a1 	bl	8003e04 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 8000ac2:	4925      	ldr	r1, [pc, #148]	; (8000b58 <sevSeg_I2C1_Init+0x1e0>)
 8000ac4:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <sevSeg_I2C1_Init+0x1e4>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f003 fa9f 	bl	800400c <HAL_RTC_SetDate>

	printf("Current time defaulted to: %d:%d:%d\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <sevSeg_I2C1_Init+0x1dc>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <sevSeg_I2C1_Init+0x1dc>)
 8000ad6:	785b      	ldrb	r3, [r3, #1]
 8000ad8:	001a      	movs	r2, r3
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <sevSeg_I2C1_Init+0x1dc>)
 8000adc:	789b      	ldrb	r3, [r3, #2]
 8000ade:	4820      	ldr	r0, [pc, #128]	; (8000b60 <sevSeg_I2C1_Init+0x1e8>)
 8000ae0:	f004 fdea 	bl	80056b8 <iprintf>

	halRet = updateAndDisplayTime();
 8000ae4:	1dfc      	adds	r4, r7, #7
 8000ae6:	f000 f841 	bl	8000b6c <updateAndDisplayTime>
 8000aea:	0003      	movs	r3, r0
 8000aec:	7023      	strb	r3, [r4, #0]

	if(halRet != HAL_OK) {		//check HAL
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d004      	beq.n	8000b00 <sevSeg_I2C1_Init+0x188>
		printf("HAL Error - TX current time\n\r");
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <sevSeg_I2C1_Init+0x1ec>)
 8000af8:	0018      	movs	r0, r3
 8000afa:	f004 fddd 	bl	80056b8 <iprintf>
	} else {
		printf("Display Updated with current time\n\r");
	}

	return;
 8000afe:	e004      	b.n	8000b0a <sevSeg_I2C1_Init+0x192>
		printf("Display Updated with current time\n\r");
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <sevSeg_I2C1_Init+0x1f0>)
 8000b02:	0018      	movs	r0, r3
 8000b04:	f004 fdd8 	bl	80056b8 <iprintf>
	return;
 8000b08:	46c0      	nop			; (mov r8, r8)

}
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b003      	add	sp, #12
 8000b0e:	bd90      	pop	{r4, r7, pc}
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000004 	.word	0x20000004
 8000b18:	200000bc 	.word	0x200000bc
 8000b1c:	080066c0 	.word	0x080066c0
 8000b20:	080066e0 	.word	0x080066e0
 8000b24:	2000000c 	.word	0x2000000c
 8000b28:	08006700 	.word	0x08006700
 8000b2c:	08006728 	.word	0x08006728
 8000b30:	2000001c 	.word	0x2000001c
 8000b34:	0800674c 	.word	0x0800674c
 8000b38:	08006770 	.word	0x08006770
 8000b3c:	20000018 	.word	0x20000018
 8000b40:	08006794 	.word	0x08006794
 8000b44:	080067b8 	.word	0x080067b8
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	080067dc 	.word	0x080067dc
 8000b50:	08006804 	.word	0x08006804
 8000b54:	200001d0 	.word	0x200001d0
 8000b58:	200001e4 	.word	0x200001e4
 8000b5c:	20000110 	.word	0x20000110
 8000b60:	08006814 	.word	0x08006814
 8000b64:	0800683c 	.word	0x0800683c
 8000b68:	0800685c 	.word	0x0800685c

08000b6c <updateAndDisplayTime>:

HAL_StatusTypeDef updateAndDisplayTime(void) {
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af02      	add	r7, sp, #8

	HAL_StatusTypeDef halRet = HAL_OK;
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]

	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BCD);
 8000b78:	4938      	ldr	r1, [pc, #224]	; (8000c5c <updateAndDisplayTime+0xf0>)
 8000b7a:	4b39      	ldr	r3, [pc, #228]	; (8000c60 <updateAndDisplayTime+0xf4>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f003 f9e8 	bl	8003f54 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BCD);
 8000b84:	4937      	ldr	r1, [pc, #220]	; (8000c64 <updateAndDisplayTime+0xf8>)
 8000b86:	4b36      	ldr	r3, [pc, #216]	; (8000c60 <updateAndDisplayTime+0xf4>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f003 fad0 	bl	8004130 <HAL_RTC_GetDate>
//	}
//	else {
//		printf("Time Update from RTC successfully");
//	}

	sevSeg_digit0Buff[1] = currTime.Hours / 10;
 8000b90:	4b32      	ldr	r3, [pc, #200]	; (8000c5c <updateAndDisplayTime+0xf0>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	210a      	movs	r1, #10
 8000b96:	0018      	movs	r0, r3
 8000b98:	f7ff fabe 	bl	8000118 <__udivsi3>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	4b31      	ldr	r3, [pc, #196]	; (8000c68 <updateAndDisplayTime+0xfc>)
 8000ba2:	705a      	strb	r2, [r3, #1]
	sevSeg_digit1Buff[1] = currTime.Hours % 10;
 8000ba4:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <updateAndDisplayTime+0xf0>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	210a      	movs	r1, #10
 8000baa:	0018      	movs	r0, r3
 8000bac:	f7ff fb3a 	bl	8000224 <__aeabi_uidivmod>
 8000bb0:	000b      	movs	r3, r1
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <updateAndDisplayTime+0x100>)
 8000bb6:	705a      	strb	r2, [r3, #1]
	sevSeg_digit2Buff[1] = currTime.Minutes / 10;
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <updateAndDisplayTime+0xf0>)
 8000bba:	785b      	ldrb	r3, [r3, #1]
 8000bbc:	210a      	movs	r1, #10
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f7ff faaa 	bl	8000118 <__udivsi3>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <updateAndDisplayTime+0x104>)
 8000bca:	705a      	strb	r2, [r3, #1]
	sevSeg_digit3Buff[1] = currTime.Minutes % 10;
 8000bcc:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <updateAndDisplayTime+0xf0>)
 8000bce:	785b      	ldrb	r3, [r3, #1]
 8000bd0:	210a      	movs	r1, #10
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f7ff fb26 	bl	8000224 <__aeabi_uidivmod>
 8000bd8:	000b      	movs	r3, r1
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <updateAndDisplayTime+0x108>)
 8000bde:	705a      	strb	r2, [r3, #1]

	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit0Buff, 2, HAL_MAX_DELAY);
 8000be0:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <updateAndDisplayTime+0x10c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	b299      	uxth	r1, r3
 8000be6:	1dfc      	adds	r4, r7, #7
 8000be8:	4a1f      	ldr	r2, [pc, #124]	; (8000c68 <updateAndDisplayTime+0xfc>)
 8000bea:	4824      	ldr	r0, [pc, #144]	; (8000c7c <updateAndDisplayTime+0x110>)
 8000bec:	2301      	movs	r3, #1
 8000bee:	425b      	negs	r3, r3
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	f001 f81c 	bl	8001c30 <HAL_I2C_Master_Transmit>
 8000bf8:	0003      	movs	r3, r0
 8000bfa:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit1Buff, 2, HAL_MAX_DELAY);
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <updateAndDisplayTime+0x10c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b299      	uxth	r1, r3
 8000c02:	1dfc      	adds	r4, r7, #7
 8000c04:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <updateAndDisplayTime+0x100>)
 8000c06:	481d      	ldr	r0, [pc, #116]	; (8000c7c <updateAndDisplayTime+0x110>)
 8000c08:	2301      	movs	r3, #1
 8000c0a:	425b      	negs	r3, r3
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2302      	movs	r3, #2
 8000c10:	f001 f80e 	bl	8001c30 <HAL_I2C_Master_Transmit>
 8000c14:	0003      	movs	r3, r0
 8000c16:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit2Buff, 2, HAL_MAX_DELAY);
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <updateAndDisplayTime+0x10c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b299      	uxth	r1, r3
 8000c1e:	1dfc      	adds	r4, r7, #7
 8000c20:	4a13      	ldr	r2, [pc, #76]	; (8000c70 <updateAndDisplayTime+0x104>)
 8000c22:	4816      	ldr	r0, [pc, #88]	; (8000c7c <updateAndDisplayTime+0x110>)
 8000c24:	2301      	movs	r3, #1
 8000c26:	425b      	negs	r3, r3
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	f001 f800 	bl	8001c30 <HAL_I2C_Master_Transmit>
 8000c30:	0003      	movs	r3, r0
 8000c32:	7023      	strb	r3, [r4, #0]
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_digit3Buff, 2, HAL_MAX_DELAY);
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <updateAndDisplayTime+0x10c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b299      	uxth	r1, r3
 8000c3a:	1dfc      	adds	r4, r7, #7
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <updateAndDisplayTime+0x108>)
 8000c3e:	480f      	ldr	r0, [pc, #60]	; (8000c7c <updateAndDisplayTime+0x110>)
 8000c40:	2301      	movs	r3, #1
 8000c42:	425b      	negs	r3, r3
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2302      	movs	r3, #2
 8000c48:	f000 fff2 	bl	8001c30 <HAL_I2C_Master_Transmit>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	7023      	strb	r3, [r4, #0]
//	}
//	else {
//		printf("Updated time sent to current display.\n\r");
//	}

	return halRet;
 8000c50:	1dfb      	adds	r3, r7, #7
 8000c52:	781b      	ldrb	r3, [r3, #0]

}
 8000c54:	0018      	movs	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b003      	add	sp, #12
 8000c5a:	bd90      	pop	{r4, r7, pc}
 8000c5c:	200001d0 	.word	0x200001d0
 8000c60:	20000110 	.word	0x20000110
 8000c64:	200001e4 	.word	0x200001e4
 8000c68:	20000020 	.word	0x20000020
 8000c6c:	20000024 	.word	0x20000024
 8000c70:	20000028 	.word	0x20000028
 8000c74:	2000002c 	.word	0x2000002c
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	200000bc 	.word	0x200000bc

08000c80 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b093      	sub	sp, #76	; 0x4c
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

	  RTC_AlarmTypeDef sAlarm;
	  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	005a      	lsls	r2, r3, #1
 8000c8c:	2420      	movs	r4, #32
 8000c8e:	1939      	adds	r1, r7, r4
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	2300      	movs	r3, #0
 8000c94:	f003 fda0 	bl	80047d8 <HAL_RTC_GetAlarm>

	  printf("Enter alarm minute increment interrupt\n\r");
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <HAL_RTC_AlarmAEventCallback+0x94>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f004 fd0c 	bl	80056b8 <iprintf>

	  RTC_TimeTypeDef currTime;
	  RTC_DateTypeDef currDate;
	  HAL_RTC_GetTime(hrtc, &currTime, RTC_FORMAT_BIN);
 8000ca0:	230c      	movs	r3, #12
 8000ca2:	18f9      	adds	r1, r7, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f003 f953 	bl	8003f54 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(hrtc, &currDate, RTC_FORMAT_BIN);		//get date is necessary, else RTC will not update time
 8000cae:	2308      	movs	r3, #8
 8000cb0:	18f9      	adds	r1, r7, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f003 fa3a 	bl	8004130 <HAL_RTC_GetDate>

	  if(sAlarm.AlarmTime.Minutes>58) {
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	785b      	ldrb	r3, [r3, #1]
 8000cc0:	2b3a      	cmp	r3, #58	; 0x3a
 8000cc2:	d903      	bls.n	8000ccc <HAL_RTC_AlarmAEventCallback+0x4c>
		sAlarm.AlarmTime.Minutes=0;
 8000cc4:	193b      	adds	r3, r7, r4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	705a      	strb	r2, [r3, #1]
 8000cca:	e006      	b.n	8000cda <HAL_RTC_AlarmAEventCallback+0x5a>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8000ccc:	2120      	movs	r1, #32
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	785b      	ldrb	r3, [r3, #1]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	2320      	movs	r3, #32
 8000cde:	18f9      	adds	r1, r7, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f003 fb97 	bl	8004418 <HAL_RTC_SetAlarm_IT>
 8000cea:	1e03      	subs	r3, r0, #0
 8000cec:	d1f6      	bne.n	8000cdc <HAL_RTC_AlarmAEventCallback+0x5c>

	  updateAndDisplayTime();
 8000cee:	f7ff ff3d 	bl	8000b6c <updateAndDisplayTime>

	  printf("Current time: %d : %d : %d\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8000cf2:	200c      	movs	r0, #12
 8000cf4:	183b      	adds	r3, r7, r0
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	183b      	adds	r3, r7, r0
 8000cfc:	785b      	ldrb	r3, [r3, #1]
 8000cfe:	001a      	movs	r2, r3
 8000d00:	183b      	adds	r3, r7, r0
 8000d02:	789b      	ldrb	r3, [r3, #2]
 8000d04:	4804      	ldr	r0, [pc, #16]	; (8000d18 <HAL_RTC_AlarmAEventCallback+0x98>)
 8000d06:	f004 fcd7 	bl	80056b8 <iprintf>

}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b013      	add	sp, #76	; 0x4c
 8000d10:	bd90      	pop	{r4, r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	08006880 	.word	0x08006880
 8000d18:	080068ac 	.word	0x080068ac

08000d1c <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000d1c:	b5b0      	push	{r4, r5, r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	0002      	movs	r2, r0
 8000d24:	1dbb      	adds	r3, r7, #6
 8000d26:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8000d28:	2201      	movs	r2, #1
 8000d2a:	1dbb      	adds	r3, r7, #6
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d113      	bne.n	8000d5a <HAL_GPIO_EXTI_Falling_Callback+0x3e>
		halRet = displayButtonISR();
 8000d32:	250f      	movs	r5, #15
 8000d34:	197c      	adds	r4, r7, r5
 8000d36:	f000 f847 	bl	8000dc8 <displayButtonISR>
 8000d3a:	0003      	movs	r3, r0
 8000d3c:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000d3e:	197b      	adds	r3, r7, r5
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d004      	beq.n	8000d50 <HAL_GPIO_EXTI_Falling_Callback+0x34>
			printf("Error toggling display.\n\r");
 8000d46:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <HAL_GPIO_EXTI_Falling_Callback+0x9c>)
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f004 fcb5 	bl	80056b8 <iprintf>
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8000d4e:	e02e      	b.n	8000dae <HAL_GPIO_EXTI_Falling_Callback+0x92>
			printf("Display intensity toggled.\n\r");
 8000d50:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <HAL_GPIO_EXTI_Falling_Callback+0xa0>)
 8000d52:	0018      	movs	r0, r3
 8000d54:	f004 fcb0 	bl	80056b8 <iprintf>
}
 8000d58:	e029      	b.n	8000dae <HAL_GPIO_EXTI_Falling_Callback+0x92>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	1dbb      	adds	r3, r7, #6
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d113      	bne.n	8000d8c <HAL_GPIO_EXTI_Falling_Callback+0x70>
		halRet = alarmEnableISR();
 8000d64:	250f      	movs	r5, #15
 8000d66:	197c      	adds	r4, r7, r5
 8000d68:	f000 f86e 	bl	8000e48 <alarmEnableISR>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	7023      	strb	r3, [r4, #0]
		if (halRet != HAL_OK) {
 8000d70:	197b      	adds	r3, r7, r5
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d004      	beq.n	8000d82 <HAL_GPIO_EXTI_Falling_Callback+0x66>
			printf("Error toggling user alarm.\n\r");
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <HAL_GPIO_EXTI_Falling_Callback+0xa4>)
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f004 fc9c 	bl	80056b8 <iprintf>
}
 8000d80:	e015      	b.n	8000dae <HAL_GPIO_EXTI_Falling_Callback+0x92>
			printf("User alarm toggled.\n\r");
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 8000d84:	0018      	movs	r0, r3
 8000d86:	f004 fc97 	bl	80056b8 <iprintf>
}
 8000d8a:	e010      	b.n	8000dae <HAL_GPIO_EXTI_Falling_Callback+0x92>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8000d8c:	2210      	movs	r2, #16
 8000d8e:	1dbb      	adds	r3, r7, #6
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d00b      	beq.n	8000dae <HAL_GPIO_EXTI_Falling_Callback+0x92>
	else if(GPIO_Pin == hourSetButtonPin) {
 8000d96:	2220      	movs	r2, #32
 8000d98:	1dbb      	adds	r3, r7, #6
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d006      	beq.n	8000dae <HAL_GPIO_EXTI_Falling_Callback+0x92>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	015b      	lsls	r3, r3, #5
 8000da4:	1dba      	adds	r2, r7, #6
 8000da6:	8812      	ldrh	r2, [r2, #0]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d000      	beq.n	8000dae <HAL_GPIO_EXTI_Falling_Callback+0x92>
		__NOP();
 8000dac:	46c0      	nop			; (mov r8, r8)
}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b004      	add	sp, #16
 8000db4:	bdb0      	pop	{r4, r5, r7, pc}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	080068cc 	.word	0x080068cc
 8000dbc:	080068e8 	.word	0x080068e8
 8000dc0:	08006908 	.word	0x08006908
 8000dc4:	08006928 	.word	0x08006928

08000dc8 <displayButtonISR>:

HAL_StatusTypeDef displayButtonISR(void) {
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af02      	add	r7, sp, #8

	printf("Entered display toggle ISR\n\r");
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <displayButtonISR+0x68>)
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f004 fc71 	bl	80056b8 <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]

	sevSeg_intensityBuff[1] = sevSeg_intensityDuty[displayToggle];			//Turn display to proper duty cycle
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <displayButtonISR+0x6c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	001a      	movs	r2, r3
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <displayButtonISR+0x70>)
 8000de4:	5c9a      	ldrb	r2, [r3, r2]
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <displayButtonISR+0x74>)
 8000de8:	705a      	strb	r2, [r3, #1]

	// TX new intensity to 7-seg driver
	halRet = HAL_I2C_Master_Transmit(&hi2c1, sevSeg_addr, sevSeg_intensityBuff, 2, HAL_MAX_DELAY);
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <displayButtonISR+0x78>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	b299      	uxth	r1, r3
 8000df0:	1dfc      	adds	r4, r7, #7
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <displayButtonISR+0x74>)
 8000df4:	4813      	ldr	r0, [pc, #76]	; (8000e44 <displayButtonISR+0x7c>)
 8000df6:	2301      	movs	r3, #1
 8000df8:	425b      	negs	r3, r3
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	f000 ff17 	bl	8001c30 <HAL_I2C_Master_Transmit>
 8000e02:	0003      	movs	r3, r0
 8000e04:	7023      	strb	r3, [r4, #0]

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <displayButtonISR+0x6c>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d903      	bls.n	8000e16 <displayButtonISR+0x4e>
		displayToggle = 0;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <displayButtonISR+0x6c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
 8000e14:	e005      	b.n	8000e22 <displayButtonISR+0x5a>
	} else {
		displayToggle++;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <displayButtonISR+0x6c>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <displayButtonISR+0x6c>)
 8000e20:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]

}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b003      	add	sp, #12
 8000e2c:	bd90      	pop	{r4, r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	08006940 	.word	0x08006940
 8000e34:	200001e8 	.word	0x200001e8
 8000e38:	080069c0 	.word	0x080069c0
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	20000000 	.word	0x20000000
 8000e44:	200000bc 	.word	0x200000bc

08000e48 <alarmEnableISR>:

HAL_StatusTypeDef alarmEnableISR(void) {
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b093      	sub	sp, #76	; 0x4c
 8000e4c:	af02      	add	r7, sp, #8

	printf("Entered alarm toggle ISR\n\r");
 8000e4e:	4b30      	ldr	r3, [pc, #192]	; (8000f10 <alarmEnableISR+0xc8>)
 8000e50:	0018      	movs	r0, r3
 8000e52:	f004 fc31 	bl	80056b8 <iprintf>
	HAL_StatusTypeDef halRet = HAL_OK;
 8000e56:	233f      	movs	r3, #63	; 0x3f
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <alarmEnableISR+0xcc>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2201      	movs	r2, #1
 8000e64:	4053      	eors	r3, r2
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d030      	beq.n	8000ece <alarmEnableISR+0x86>

		// Use object to get current user alarm time and set/enable the user alarm to that time.
		RTC_AlarmTypeDef userAlarmObj;
		HAL_RTC_GetAlarm(&hrtc, &userAlarmObj, userAlarm, RTC_FORMAT_BCD);
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	009a      	lsls	r2, r3, #2
 8000e70:	0039      	movs	r1, r7
 8000e72:	4829      	ldr	r0, [pc, #164]	; (8000f18 <alarmEnableISR+0xd0>)
 8000e74:	2301      	movs	r3, #1
 8000e76:	f003 fcaf 	bl	80047d8 <HAL_RTC_GetAlarm>
		HAL_RTC_SetAlarm(&hrtc, &userAlarmObj, RTC_FORMAT_BCD);
 8000e7a:	0039      	movs	r1, r7
 8000e7c:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <alarmEnableISR+0xd0>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	0018      	movs	r0, r3
 8000e82:	f003 f9a3 	bl	80041cc <HAL_RTC_SetAlarm>

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_SET);			// Turn on alarm LED
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <alarmEnableISR+0xd4>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f000 fde7 	bl	8001a60 <HAL_GPIO_WritePin>
		userAlarmToggle = true;								// Toggle internal flag to true
 8000e92:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <alarmEnableISR+0xcc>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	701a      	strb	r2, [r3, #0]

		RTC_TimeTypeDef alarmTime = userAlarmObj.AlarmTime;
 8000e98:	2428      	movs	r4, #40	; 0x28
 8000e9a:	193a      	adds	r2, r7, r4
 8000e9c:	003b      	movs	r3, r7
 8000e9e:	0010      	movs	r0, r2
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	2314      	movs	r3, #20
 8000ea4:	001a      	movs	r2, r3
 8000ea6:	f004 fbf5 	bl	8005694 <memcpy>
		printf("User alarm set to: %d:%d:%d on alarm %d.\n\r", alarmTime.Hours,
 8000eaa:	0020      	movs	r0, r4
 8000eac:	183b      	adds	r3, r7, r0
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	0019      	movs	r1, r3
								alarmTime.Minutes, alarmTime.Seconds, userAlarmObj.Alarm);
 8000eb2:	183b      	adds	r3, r7, r0
 8000eb4:	785b      	ldrb	r3, [r3, #1]
		printf("User alarm set to: %d:%d:%d on alarm %d.\n\r", alarmTime.Hours,
 8000eb6:	001a      	movs	r2, r3
								alarmTime.Minutes, alarmTime.Seconds, userAlarmObj.Alarm);
 8000eb8:	183b      	adds	r3, r7, r0
 8000eba:	789b      	ldrb	r3, [r3, #2]
		printf("User alarm set to: %d:%d:%d on alarm %d.\n\r", alarmTime.Hours,
 8000ebc:	001c      	movs	r4, r3
 8000ebe:	003b      	movs	r3, r7
 8000ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec2:	4817      	ldr	r0, [pc, #92]	; (8000f20 <alarmEnableISR+0xd8>)
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	0023      	movs	r3, r4
 8000ec8:	f004 fbf6 	bl	80056b8 <iprintf>
 8000ecc:	e019      	b.n	8000f02 <alarmEnableISR+0xba>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <alarmEnableISR+0xcc>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d014      	beq.n	8000f00 <alarmEnableISR+0xb8>

		HAL_RTC_DeactivateAlarm(&hrtc, userAlarm);				// Deactivate alarm
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	009a      	lsls	r2, r3, #2
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <alarmEnableISR+0xd0>)
 8000edc:	0011      	movs	r1, r2
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f003 fbda 	bl	8004698 <HAL_RTC_DeactivateAlarm>

		HAL_GPIO_WritePin(GPIOB, alarmLED, GPIO_PIN_RESET);			// Turn off alarm LED
 8000ee4:	2180      	movs	r1, #128	; 0x80
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <alarmEnableISR+0xd4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 fdb8 	bl	8001a60 <HAL_GPIO_WritePin>
		userAlarmToggle = false;							// Toggle internal flag to false
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <alarmEnableISR+0xcc>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]

		printf("User alarm disabled.\n\r");
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <alarmEnableISR+0xdc>)
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f004 fbdd 	bl	80056b8 <iprintf>
 8000efe:	e000      	b.n	8000f02 <alarmEnableISR+0xba>
	}
	else {
		__NOP();							//Code should never reach here.
 8000f00:	46c0      	nop			; (mov r8, r8)
	}

	return halRet;
 8000f02:	233f      	movs	r3, #63	; 0x3f
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	781b      	ldrb	r3, [r3, #0]

}
 8000f08:	0018      	movs	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b011      	add	sp, #68	; 0x44
 8000f0e:	bd90      	pop	{r4, r7, pc}
 8000f10:	08006960 	.word	0x08006960
 8000f14:	200001e9 	.word	0x200001e9
 8000f18:	20000110 	.word	0x20000110
 8000f1c:	50000400 	.word	0x50000400
 8000f20:	0800697c 	.word	0x0800697c
 8000f24:	080069a8 	.word	0x080069a8

08000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
}
 8000f2e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <Error_Handler+0x8>
	...

08000f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <HAL_MspInit+0x54>)
 8000f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_MspInit+0x54>)
 8000f40:	2101      	movs	r1, #1
 8000f42:	430a      	orrs	r2, r1
 8000f44:	641a      	str	r2, [r3, #64]	; 0x40
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <HAL_MspInit+0x54>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <HAL_MspInit+0x54>)
 8000f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_MspInit+0x54>)
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	0549      	lsls	r1, r1, #21
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <HAL_MspInit+0x54>)
 8000f62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	055b      	lsls	r3, r3, #21
 8000f68:	4013      	ands	r3, r2
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	2001      	movs	r0, #1
 8000f74:	f000 fb68 	bl	8001648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f000 fb7a 	bl	8001672 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b002      	add	sp, #8
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	40021000 	.word	0x40021000

08000f8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b095      	sub	sp, #84	; 0x54
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	233c      	movs	r3, #60	; 0x3c
 8000f96:	18fb      	adds	r3, r7, r3
 8000f98:	0018      	movs	r0, r3
 8000f9a:	2314      	movs	r3, #20
 8000f9c:	001a      	movs	r2, r3
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	f004 fb81 	bl	80056a6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa4:	2414      	movs	r4, #20
 8000fa6:	193b      	adds	r3, r7, r4
 8000fa8:	0018      	movs	r0, r3
 8000faa:	2328      	movs	r3, #40	; 0x28
 8000fac:	001a      	movs	r2, r3
 8000fae:	2100      	movs	r1, #0
 8000fb0:	f004 fb79 	bl	80056a6 <memset>
  if(hi2c->Instance==I2C1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a26      	ldr	r2, [pc, #152]	; (8001054 <HAL_I2C_MspInit+0xc8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d146      	bne.n	800104c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fbe:	193b      	adds	r3, r7, r4
 8000fc0:	2220      	movs	r2, #32
 8000fc2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fc4:	193b      	adds	r3, r7, r4
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fca:	193b      	adds	r3, r7, r4
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f002 fcfd 	bl	80039cc <HAL_RCCEx_PeriphCLKConfig>
 8000fd2:	1e03      	subs	r3, r0, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000fd6:	f7ff ffa7 	bl	8000f28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <HAL_I2C_MspInit+0xcc>)
 8000fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fde:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <HAL_I2C_MspInit+0xcc>)
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	635a      	str	r2, [r3, #52]	; 0x34
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_I2C_MspInit+0xcc>)
 8000fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fea:	2202      	movs	r2, #2
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000ff2:	213c      	movs	r1, #60	; 0x3c
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	22c0      	movs	r2, #192	; 0xc0
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	2212      	movs	r2, #18
 8001000:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	187b      	adds	r3, r7, r1
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	187b      	adds	r3, r7, r1
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2206      	movs	r2, #6
 8001012:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	187b      	adds	r3, r7, r1
 8001016:	4a11      	ldr	r2, [pc, #68]	; (800105c <HAL_I2C_MspInit+0xd0>)
 8001018:	0019      	movs	r1, r3
 800101a:	0010      	movs	r0, r2
 800101c:	f000 fbbc 	bl	8001798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <HAL_I2C_MspInit+0xcc>)
 8001022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <HAL_I2C_MspInit+0xcc>)
 8001026:	2180      	movs	r1, #128	; 0x80
 8001028:	0389      	lsls	r1, r1, #14
 800102a:	430a      	orrs	r2, r1
 800102c:	63da      	str	r2, [r3, #60]	; 0x3c
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_I2C_MspInit+0xcc>)
 8001030:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	039b      	lsls	r3, r3, #14
 8001036:	4013      	ands	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	2100      	movs	r1, #0
 8001040:	2017      	movs	r0, #23
 8001042:	f000 fb01 	bl	8001648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8001046:	2017      	movs	r0, #23
 8001048:	f000 fb13 	bl	8001672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800104c:	46c0      	nop			; (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	b015      	add	sp, #84	; 0x54
 8001052:	bd90      	pop	{r4, r7, pc}
 8001054:	40005400 	.word	0x40005400
 8001058:	40021000 	.word	0x40021000
 800105c:	50000400 	.word	0x50000400

08001060 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b08f      	sub	sp, #60	; 0x3c
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001068:	2410      	movs	r4, #16
 800106a:	193b      	adds	r3, r7, r4
 800106c:	0018      	movs	r0, r3
 800106e:	2328      	movs	r3, #40	; 0x28
 8001070:	001a      	movs	r2, r3
 8001072:	2100      	movs	r1, #0
 8001074:	f004 fb17 	bl	80056a6 <memset>
  if(hrtc->Instance==RTC)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <HAL_RTC_MspInit+0x84>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d12c      	bne.n	80010dc <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001082:	193b      	adds	r3, r7, r4
 8001084:	2280      	movs	r2, #128	; 0x80
 8001086:	0292      	lsls	r2, r2, #10
 8001088:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800108a:	193b      	adds	r3, r7, r4
 800108c:	2280      	movs	r2, #128	; 0x80
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001092:	193b      	adds	r3, r7, r4
 8001094:	0018      	movs	r0, r3
 8001096:	f002 fc99 	bl	80039cc <HAL_RCCEx_PeriphCLKConfig>
 800109a:	1e03      	subs	r3, r0, #0
 800109c:	d001      	beq.n	80010a2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800109e:	f7ff ff43 	bl	8000f28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_RTC_MspInit+0x88>)
 80010a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <HAL_RTC_MspInit+0x88>)
 80010a8:	2180      	movs	r1, #128	; 0x80
 80010aa:	0209      	lsls	r1, r1, #8
 80010ac:	430a      	orrs	r2, r1
 80010ae:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80010b0:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <HAL_RTC_MspInit+0x88>)
 80010b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <HAL_RTC_MspInit+0x88>)
 80010b6:	2180      	movs	r1, #128	; 0x80
 80010b8:	00c9      	lsls	r1, r1, #3
 80010ba:	430a      	orrs	r2, r1
 80010bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_RTC_MspInit+0x88>)
 80010c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	4013      	ands	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	2002      	movs	r0, #2
 80010d2:	f000 fab9 	bl	8001648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80010d6:	2002      	movs	r0, #2
 80010d8:	f000 facb 	bl	8001672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b00f      	add	sp, #60	; 0x3c
 80010e2:	bd90      	pop	{r4, r7, pc}
 80010e4:	40002800 	.word	0x40002800
 80010e8:	40021000 	.word	0x40021000

080010ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b08b      	sub	sp, #44	; 0x2c
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	2414      	movs	r4, #20
 80010f6:	193b      	adds	r3, r7, r4
 80010f8:	0018      	movs	r0, r3
 80010fa:	2314      	movs	r3, #20
 80010fc:	001a      	movs	r2, r3
 80010fe:	2100      	movs	r1, #0
 8001100:	f004 fad1 	bl	80056a6 <memset>
  if(huart->Instance==USART2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a1b      	ldr	r2, [pc, #108]	; (8001178 <HAL_UART_MspInit+0x8c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d130      	bne.n	8001170 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_UART_MspInit+0x90>)
 8001110:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <HAL_UART_MspInit+0x90>)
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	0289      	lsls	r1, r1, #10
 8001118:	430a      	orrs	r2, r1
 800111a:	63da      	str	r2, [r3, #60]	; 0x3c
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <HAL_UART_MspInit+0x90>)
 800111e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	029b      	lsls	r3, r3, #10
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_UART_MspInit+0x90>)
 800112c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_UART_MspInit+0x90>)
 8001130:	2101      	movs	r1, #1
 8001132:	430a      	orrs	r2, r1
 8001134:	635a      	str	r2, [r3, #52]	; 0x34
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_UART_MspInit+0x90>)
 8001138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800113a:	2201      	movs	r2, #1
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8001142:	0021      	movs	r1, r4
 8001144:	187b      	adds	r3, r7, r1
 8001146:	220c      	movs	r2, #12
 8001148:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	187b      	adds	r3, r7, r1
 800114c:	2202      	movs	r2, #2
 800114e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001150:	187b      	adds	r3, r7, r1
 8001152:	2201      	movs	r2, #1
 8001154:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	187b      	adds	r3, r7, r1
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800115c:	187b      	adds	r3, r7, r1
 800115e:	2201      	movs	r2, #1
 8001160:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	187a      	adds	r2, r7, r1
 8001164:	23a0      	movs	r3, #160	; 0xa0
 8001166:	05db      	lsls	r3, r3, #23
 8001168:	0011      	movs	r1, r2
 800116a:	0018      	movs	r0, r3
 800116c:	f000 fb14 	bl	8001798 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b00b      	add	sp, #44	; 0x2c
 8001176:	bd90      	pop	{r4, r7, pc}
 8001178:	40004400 	.word	0x40004400
 800117c:	40021000 	.word	0x40021000

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <NMI_Handler+0x4>

08001186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <HardFault_Handler+0x4>

0800118c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 f988 	bl	80014b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80011b2:	f001 ff11 	bl	8002fd8 <HAL_PWREx_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <RTC_TAMP_IRQHandler+0x14>)
 80011c2:	0018      	movs	r0, r3
 80011c4:	f003 fbce 	bl	8004964 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	20000110 	.word	0x20000110

080011d4 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Display_Button_Pin);
 80011d8:	2001      	movs	r0, #1
 80011da:	f000 fc5f 	bl	8001a9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Alarm_Enable_Button_Pin);
 80011de:	2002      	movs	r0, #2
 80011e0:	f000 fc5c 	bl	8001a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_NRST_Pin);
 80011ee:	2004      	movs	r0, #4
 80011f0:	f000 fc54 	bl	8001a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80011f4:	46c0      	nop			; (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alarm_Set_Button_Pin);
 80011fe:	2010      	movs	r0, #16
 8001200:	f000 fc4c 	bl	8001a9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Hour_Set_Button_Pin);
 8001204:	2020      	movs	r0, #32
 8001206:	f000 fc49 	bl	8001a9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Minute_Set_Button_Pin);
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	015b      	lsls	r3, r3, #5
 800120e:	0018      	movs	r0, r3
 8001210:	f000 fc44 	bl	8001a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <I2C1_IRQHandler+0x2c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	699a      	ldr	r2, [r3, #24]
 8001226:	23e0      	movs	r3, #224	; 0xe0
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4013      	ands	r3, r2
 800122c:	d004      	beq.n	8001238 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <I2C1_IRQHandler+0x2c>)
 8001230:	0018      	movs	r0, r3
 8001232:	f000 fe1f 	bl	8001e74 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8001236:	e003      	b.n	8001240 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <I2C1_IRQHandler+0x2c>)
 800123a:	0018      	movs	r0, r3
 800123c:	f000 fe00 	bl	8001e40 <HAL_I2C_EV_IRQHandler>
}
 8001240:	46c0      	nop			; (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	200000bc 	.word	0x200000bc

0800124c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	e00a      	b.n	8001274 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800125e:	e000      	b.n	8001262 <_read+0x16>
 8001260:	bf00      	nop
 8001262:	0001      	movs	r1, r0
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	60ba      	str	r2, [r7, #8]
 800126a:	b2ca      	uxtb	r2, r1
 800126c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3301      	adds	r3, #1
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	429a      	cmp	r2, r3
 800127a:	dbf0      	blt.n	800125e <_read+0x12>
  }

  return len;
 800127c:	687b      	ldr	r3, [r7, #4]
}
 800127e:	0018      	movs	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	b006      	add	sp, #24
 8001284:	bd80      	pop	{r7, pc}

08001286 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	e009      	b.n	80012ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	60ba      	str	r2, [r7, #8]
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	0018      	movs	r0, r3
 80012a2:	f7ff f8db 	bl	800045c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	3301      	adds	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	dbf1      	blt.n	8001298 <_write+0x12>
  }
  return len;
 80012b4:	687b      	ldr	r3, [r7, #4]
}
 80012b6:	0018      	movs	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b006      	add	sp, #24
 80012bc:	bd80      	pop	{r7, pc}

080012be <_close>:

int _close(int file)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	425b      	negs	r3, r3
}
 80012ca:	0018      	movs	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b002      	add	sp, #8
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	2280      	movs	r2, #128	; 0x80
 80012e0:	0192      	lsls	r2, r2, #6
 80012e2:	605a      	str	r2, [r3, #4]
  return 0;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	0018      	movs	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b002      	add	sp, #8
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_isatty>:

int _isatty(int file)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b002      	add	sp, #8
 80012fe:	bd80      	pop	{r7, pc}

08001300 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800130c:	2300      	movs	r3, #0
}
 800130e:	0018      	movs	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	b004      	add	sp, #16
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001320:	4a14      	ldr	r2, [pc, #80]	; (8001374 <_sbrk+0x5c>)
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <_sbrk+0x60>)
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <_sbrk+0x64>)
 8001336:	4a12      	ldr	r2, [pc, #72]	; (8001380 <_sbrk+0x68>)
 8001338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	18d3      	adds	r3, r2, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	429a      	cmp	r2, r3
 8001346:	d207      	bcs.n	8001358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001348:	f004 f97a 	bl	8005640 <__errno>
 800134c:	0003      	movs	r3, r0
 800134e:	220c      	movs	r2, #12
 8001350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001352:	2301      	movs	r3, #1
 8001354:	425b      	negs	r3, r3
 8001356:	e009      	b.n	800136c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	18d2      	adds	r2, r2, r3
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <_sbrk+0x64>)
 8001368:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800136a:	68fb      	ldr	r3, [r7, #12]
}
 800136c:	0018      	movs	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	b006      	add	sp, #24
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20002000 	.word	0x20002000
 8001378:	00000400 	.word	0x00000400
 800137c:	200001ec 	.word	0x200001ec
 8001380:	20000208 	.word	0x20000208

08001384 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001390:	480d      	ldr	r0, [pc, #52]	; (80013c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001392:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001394:	f7ff fff6 	bl	8001384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <LoopForever+0x6>)
  ldr r1, =_edata
 800139a:	490d      	ldr	r1, [pc, #52]	; (80013d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800139c:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <LoopForever+0xe>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a0:	e002      	b.n	80013a8 <LoopCopyDataInit>

080013a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a6:	3304      	adds	r3, #4

080013a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ac:	d3f9      	bcc.n	80013a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b0:	4c0a      	ldr	r4, [pc, #40]	; (80013dc <LoopForever+0x16>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b4:	e001      	b.n	80013ba <LoopFillZerobss>

080013b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b8:	3204      	adds	r2, #4

080013ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013bc:	d3fb      	bcc.n	80013b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013be:	f004 f945 	bl	800564c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80013c2:	f7ff f85d 	bl	8000480 <main>

080013c6 <LoopForever>:

LoopForever:
  b LoopForever
 80013c6:	e7fe      	b.n	80013c6 <LoopForever>
  ldr   r0, =_estack
 80013c8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80013d4:	08006ae4 	.word	0x08006ae4
  ldr r2, =_sbss
 80013d8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80013dc:	20000204 	.word	0x20000204

080013e0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC1_IRQHandler>
	...

080013e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_Init+0x3c>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_Init+0x3c>)
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	0049      	lsls	r1, r1, #1
 80013fa:	430a      	orrs	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013fe:	2000      	movs	r0, #0
 8001400:	f000 f810 	bl	8001424 <HAL_InitTick>
 8001404:	1e03      	subs	r3, r0, #0
 8001406:	d003      	beq.n	8001410 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001408:	1dfb      	adds	r3, r7, #7
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
 800140e:	e001      	b.n	8001414 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001410:	f7ff fd90 	bl	8000f34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001414:	1dfb      	adds	r3, r7, #7
 8001416:	781b      	ldrb	r3, [r3, #0]
}
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	b002      	add	sp, #8
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40022000 	.word	0x40022000

08001424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800142c:	230f      	movs	r3, #15
 800142e:	18fb      	adds	r3, r7, r3
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <HAL_InitTick+0x88>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d02b      	beq.n	8001494 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <HAL_InitTick+0x8c>)
 800143e:	681c      	ldr	r4, [r3, #0]
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <HAL_InitTick+0x88>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	0019      	movs	r1, r3
 8001446:	23fa      	movs	r3, #250	; 0xfa
 8001448:	0098      	lsls	r0, r3, #2
 800144a:	f7fe fe65 	bl	8000118 <__udivsi3>
 800144e:	0003      	movs	r3, r0
 8001450:	0019      	movs	r1, r3
 8001452:	0020      	movs	r0, r4
 8001454:	f7fe fe60 	bl	8000118 <__udivsi3>
 8001458:	0003      	movs	r3, r0
 800145a:	0018      	movs	r0, r3
 800145c:	f000 f919 	bl	8001692 <HAL_SYSTICK_Config>
 8001460:	1e03      	subs	r3, r0, #0
 8001462:	d112      	bne.n	800148a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d80a      	bhi.n	8001480 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	2301      	movs	r3, #1
 800146e:	425b      	negs	r3, r3
 8001470:	2200      	movs	r2, #0
 8001472:	0018      	movs	r0, r3
 8001474:	f000 f8e8 	bl	8001648 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <HAL_InitTick+0x90>)
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	e00d      	b.n	800149c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001480:	230f      	movs	r3, #15
 8001482:	18fb      	adds	r3, r7, r3
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
 8001488:	e008      	b.n	800149c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800148a:	230f      	movs	r3, #15
 800148c:	18fb      	adds	r3, r7, r3
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	e003      	b.n	800149c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001494:	230f      	movs	r3, #15
 8001496:	18fb      	adds	r3, r7, r3
 8001498:	2201      	movs	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800149c:	230f      	movs	r3, #15
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	781b      	ldrb	r3, [r3, #0]
}
 80014a2:	0018      	movs	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b005      	add	sp, #20
 80014a8:	bd90      	pop	{r4, r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	20000038 	.word	0x20000038
 80014b0:	20000030 	.word	0x20000030
 80014b4:	20000034 	.word	0x20000034

080014b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_IncTick+0x1c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	001a      	movs	r2, r3
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_IncTick+0x20>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	18d2      	adds	r2, r2, r3
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_IncTick+0x20>)
 80014ca:	601a      	str	r2, [r3, #0]
}
 80014cc:	46c0      	nop			; (mov r8, r8)
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	20000038 	.word	0x20000038
 80014d8:	200001f0 	.word	0x200001f0

080014dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  return uwTick;
 80014e0:	4b02      	ldr	r3, [pc, #8]	; (80014ec <HAL_GetTick+0x10>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	0018      	movs	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	200001f0 	.word	0x200001f0

080014f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	0002      	movs	r2, r0
 80014f8:	1dfb      	adds	r3, r7, #7
 80014fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014fc:	1dfb      	adds	r3, r7, #7
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b7f      	cmp	r3, #127	; 0x7f
 8001502:	d809      	bhi.n	8001518 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001504:	1dfb      	adds	r3, r7, #7
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	001a      	movs	r2, r3
 800150a:	231f      	movs	r3, #31
 800150c:	401a      	ands	r2, r3
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <__NVIC_EnableIRQ+0x30>)
 8001510:	2101      	movs	r1, #1
 8001512:	4091      	lsls	r1, r2
 8001514:	000a      	movs	r2, r1
 8001516:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b002      	add	sp, #8
 800151e:	bd80      	pop	{r7, pc}
 8001520:	e000e100 	.word	0xe000e100

08001524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	0002      	movs	r2, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001532:	1dfb      	adds	r3, r7, #7
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b7f      	cmp	r3, #127	; 0x7f
 8001538:	d828      	bhi.n	800158c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800153a:	4a2f      	ldr	r2, [pc, #188]	; (80015f8 <__NVIC_SetPriority+0xd4>)
 800153c:	1dfb      	adds	r3, r7, #7
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b25b      	sxtb	r3, r3
 8001542:	089b      	lsrs	r3, r3, #2
 8001544:	33c0      	adds	r3, #192	; 0xc0
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	589b      	ldr	r3, [r3, r2]
 800154a:	1dfa      	adds	r2, r7, #7
 800154c:	7812      	ldrb	r2, [r2, #0]
 800154e:	0011      	movs	r1, r2
 8001550:	2203      	movs	r2, #3
 8001552:	400a      	ands	r2, r1
 8001554:	00d2      	lsls	r2, r2, #3
 8001556:	21ff      	movs	r1, #255	; 0xff
 8001558:	4091      	lsls	r1, r2
 800155a:	000a      	movs	r2, r1
 800155c:	43d2      	mvns	r2, r2
 800155e:	401a      	ands	r2, r3
 8001560:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	019b      	lsls	r3, r3, #6
 8001566:	22ff      	movs	r2, #255	; 0xff
 8001568:	401a      	ands	r2, r3
 800156a:	1dfb      	adds	r3, r7, #7
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	0018      	movs	r0, r3
 8001570:	2303      	movs	r3, #3
 8001572:	4003      	ands	r3, r0
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001578:	481f      	ldr	r0, [pc, #124]	; (80015f8 <__NVIC_SetPriority+0xd4>)
 800157a:	1dfb      	adds	r3, r7, #7
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b25b      	sxtb	r3, r3
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	430a      	orrs	r2, r1
 8001584:	33c0      	adds	r3, #192	; 0xc0
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800158a:	e031      	b.n	80015f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800158c:	4a1b      	ldr	r2, [pc, #108]	; (80015fc <__NVIC_SetPriority+0xd8>)
 800158e:	1dfb      	adds	r3, r7, #7
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	0019      	movs	r1, r3
 8001594:	230f      	movs	r3, #15
 8001596:	400b      	ands	r3, r1
 8001598:	3b08      	subs	r3, #8
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3306      	adds	r3, #6
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	18d3      	adds	r3, r2, r3
 80015a2:	3304      	adds	r3, #4
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	1dfa      	adds	r2, r7, #7
 80015a8:	7812      	ldrb	r2, [r2, #0]
 80015aa:	0011      	movs	r1, r2
 80015ac:	2203      	movs	r2, #3
 80015ae:	400a      	ands	r2, r1
 80015b0:	00d2      	lsls	r2, r2, #3
 80015b2:	21ff      	movs	r1, #255	; 0xff
 80015b4:	4091      	lsls	r1, r2
 80015b6:	000a      	movs	r2, r1
 80015b8:	43d2      	mvns	r2, r2
 80015ba:	401a      	ands	r2, r3
 80015bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	019b      	lsls	r3, r3, #6
 80015c2:	22ff      	movs	r2, #255	; 0xff
 80015c4:	401a      	ands	r2, r3
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	0018      	movs	r0, r3
 80015cc:	2303      	movs	r3, #3
 80015ce:	4003      	ands	r3, r0
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d4:	4809      	ldr	r0, [pc, #36]	; (80015fc <__NVIC_SetPriority+0xd8>)
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	001c      	movs	r4, r3
 80015dc:	230f      	movs	r3, #15
 80015de:	4023      	ands	r3, r4
 80015e0:	3b08      	subs	r3, #8
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	430a      	orrs	r2, r1
 80015e6:	3306      	adds	r3, #6
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	18c3      	adds	r3, r0, r3
 80015ec:	3304      	adds	r3, #4
 80015ee:	601a      	str	r2, [r3, #0]
}
 80015f0:	46c0      	nop			; (mov r8, r8)
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b003      	add	sp, #12
 80015f6:	bd90      	pop	{r4, r7, pc}
 80015f8:	e000e100 	.word	0xe000e100
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	1e5a      	subs	r2, r3, #1
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	045b      	lsls	r3, r3, #17
 8001610:	429a      	cmp	r2, r3
 8001612:	d301      	bcc.n	8001618 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001614:	2301      	movs	r3, #1
 8001616:	e010      	b.n	800163a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <SysTick_Config+0x44>)
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	3a01      	subs	r2, #1
 800161e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001620:	2301      	movs	r3, #1
 8001622:	425b      	negs	r3, r3
 8001624:	2103      	movs	r1, #3
 8001626:	0018      	movs	r0, r3
 8001628:	f7ff ff7c 	bl	8001524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <SysTick_Config+0x44>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <SysTick_Config+0x44>)
 8001634:	2207      	movs	r2, #7
 8001636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001638:	2300      	movs	r3, #0
}
 800163a:	0018      	movs	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	b002      	add	sp, #8
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	e000e010 	.word	0xe000e010

08001648 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	210f      	movs	r1, #15
 8001654:	187b      	adds	r3, r7, r1
 8001656:	1c02      	adds	r2, r0, #0
 8001658:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	187b      	adds	r3, r7, r1
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b25b      	sxtb	r3, r3
 8001662:	0011      	movs	r1, r2
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff ff5d 	bl	8001524 <__NVIC_SetPriority>
}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	46bd      	mov	sp, r7
 800166e:	b004      	add	sp, #16
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	0002      	movs	r2, r0
 800167a:	1dfb      	adds	r3, r7, #7
 800167c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800167e:	1dfb      	adds	r3, r7, #7
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	b25b      	sxtb	r3, r3
 8001684:	0018      	movs	r0, r3
 8001686:	f7ff ff33 	bl	80014f0 <__NVIC_EnableIRQ>
}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	46bd      	mov	sp, r7
 800168e:	b002      	add	sp, #8
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	0018      	movs	r0, r3
 800169e:	f7ff ffaf 	bl	8001600 <SysTick_Config>
 80016a2:	0003      	movs	r3, r0
}
 80016a4:	0018      	movs	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b002      	add	sp, #8
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b4:	210f      	movs	r1, #15
 80016b6:	187b      	adds	r3, r7, r1
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2225      	movs	r2, #37	; 0x25
 80016c0:	5c9b      	ldrb	r3, [r3, r2]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d006      	beq.n	80016d6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2204      	movs	r2, #4
 80016cc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016ce:	187b      	adds	r3, r7, r1
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]
 80016d4:	e049      	b.n	800176a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	210e      	movs	r1, #14
 80016e2:	438a      	bics	r2, r1
 80016e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2101      	movs	r1, #1
 80016f2:	438a      	bics	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001700:	491d      	ldr	r1, [pc, #116]	; (8001778 <HAL_DMA_Abort_IT+0xcc>)
 8001702:	400a      	ands	r2, r1
 8001704:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <HAL_DMA_Abort_IT+0xd0>)
 8001708:	6859      	ldr	r1, [r3, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	221c      	movs	r2, #28
 8001710:	4013      	ands	r3, r2
 8001712:	2201      	movs	r2, #1
 8001714:	409a      	lsls	r2, r3
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_DMA_Abort_IT+0xd0>)
 8001718:	430a      	orrs	r2, r1
 800171a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001724:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00c      	beq.n	8001748 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001738:	490f      	ldr	r1, [pc, #60]	; (8001778 <HAL_DMA_Abort_IT+0xcc>)
 800173a:	400a      	ands	r2, r1
 800173c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001746:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2225      	movs	r2, #37	; 0x25
 800174c:	2101      	movs	r1, #1
 800174e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2224      	movs	r2, #36	; 0x24
 8001754:	2100      	movs	r1, #0
 8001756:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	0010      	movs	r0, r2
 8001768:	4798      	blx	r3
    }
  }
  return status;
 800176a:	230f      	movs	r3, #15
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	781b      	ldrb	r3, [r3, #0]
}
 8001770:	0018      	movs	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	b004      	add	sp, #16
 8001776:	bd80      	pop	{r7, pc}
 8001778:	fffffeff 	.word	0xfffffeff
 800177c:	40020000 	.word	0x40020000

08001780 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2225      	movs	r2, #37	; 0x25
 800178c:	5c9b      	ldrb	r3, [r3, r2]
 800178e:	b2db      	uxtb	r3, r3
}
 8001790:	0018      	movs	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	b002      	add	sp, #8
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a6:	e147      	b.n	8001a38 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2101      	movs	r1, #1
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	4091      	lsls	r1, r2
 80017b2:	000a      	movs	r2, r1
 80017b4:	4013      	ands	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d100      	bne.n	80017c0 <HAL_GPIO_Init+0x28>
 80017be:	e138      	b.n	8001a32 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2203      	movs	r2, #3
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d005      	beq.n	80017d8 <HAL_GPIO_Init+0x40>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2203      	movs	r2, #3
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d130      	bne.n	800183a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	409a      	lsls	r2, r3
 80017e6:	0013      	movs	r3, r2
 80017e8:	43da      	mvns	r2, r3
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	409a      	lsls	r2, r3
 80017fa:	0013      	movs	r3, r2
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800180e:	2201      	movs	r2, #1
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	409a      	lsls	r2, r3
 8001814:	0013      	movs	r3, r2
 8001816:	43da      	mvns	r2, r3
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	2201      	movs	r2, #1
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	409a      	lsls	r2, r3
 800182c:	0013      	movs	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2203      	movs	r2, #3
 8001840:	4013      	ands	r3, r2
 8001842:	2b03      	cmp	r3, #3
 8001844:	d017      	beq.n	8001876 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	409a      	lsls	r2, r3
 8001854:	0013      	movs	r3, r2
 8001856:	43da      	mvns	r2, r3
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	409a      	lsls	r2, r3
 8001868:	0013      	movs	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2203      	movs	r2, #3
 800187c:	4013      	ands	r3, r2
 800187e:	2b02      	cmp	r3, #2
 8001880:	d123      	bne.n	80018ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	08da      	lsrs	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3208      	adds	r2, #8
 800188a:	0092      	lsls	r2, r2, #2
 800188c:	58d3      	ldr	r3, [r2, r3]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2207      	movs	r2, #7
 8001894:	4013      	ands	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	220f      	movs	r2, #15
 800189a:	409a      	lsls	r2, r3
 800189c:	0013      	movs	r3, r2
 800189e:	43da      	mvns	r2, r3
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	691a      	ldr	r2, [r3, #16]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	2107      	movs	r1, #7
 80018ae:	400b      	ands	r3, r1
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	409a      	lsls	r2, r3
 80018b4:	0013      	movs	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	08da      	lsrs	r2, r3, #3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3208      	adds	r2, #8
 80018c4:	0092      	lsls	r2, r2, #2
 80018c6:	6939      	ldr	r1, [r7, #16]
 80018c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	409a      	lsls	r2, r3
 80018d8:	0013      	movs	r3, r2
 80018da:	43da      	mvns	r2, r3
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2203      	movs	r2, #3
 80018e8:	401a      	ands	r2, r3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	409a      	lsls	r2, r3
 80018f0:	0013      	movs	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	23c0      	movs	r3, #192	; 0xc0
 8001904:	029b      	lsls	r3, r3, #10
 8001906:	4013      	ands	r3, r2
 8001908:	d100      	bne.n	800190c <HAL_GPIO_Init+0x174>
 800190a:	e092      	b.n	8001a32 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800190c:	4a50      	ldr	r2, [pc, #320]	; (8001a50 <HAL_GPIO_Init+0x2b8>)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	089b      	lsrs	r3, r3, #2
 8001912:	3318      	adds	r3, #24
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	589b      	ldr	r3, [r3, r2]
 8001918:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	2203      	movs	r2, #3
 800191e:	4013      	ands	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	220f      	movs	r2, #15
 8001924:	409a      	lsls	r2, r3
 8001926:	0013      	movs	r3, r2
 8001928:	43da      	mvns	r2, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	23a0      	movs	r3, #160	; 0xa0
 8001934:	05db      	lsls	r3, r3, #23
 8001936:	429a      	cmp	r2, r3
 8001938:	d013      	beq.n	8001962 <HAL_GPIO_Init+0x1ca>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a45      	ldr	r2, [pc, #276]	; (8001a54 <HAL_GPIO_Init+0x2bc>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d00d      	beq.n	800195e <HAL_GPIO_Init+0x1c6>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a44      	ldr	r2, [pc, #272]	; (8001a58 <HAL_GPIO_Init+0x2c0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d007      	beq.n	800195a <HAL_GPIO_Init+0x1c2>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a43      	ldr	r2, [pc, #268]	; (8001a5c <HAL_GPIO_Init+0x2c4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d101      	bne.n	8001956 <HAL_GPIO_Init+0x1be>
 8001952:	2303      	movs	r3, #3
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x1cc>
 8001956:	2305      	movs	r3, #5
 8001958:	e004      	b.n	8001964 <HAL_GPIO_Init+0x1cc>
 800195a:	2302      	movs	r3, #2
 800195c:	e002      	b.n	8001964 <HAL_GPIO_Init+0x1cc>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_GPIO_Init+0x1cc>
 8001962:	2300      	movs	r3, #0
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	2103      	movs	r1, #3
 8001968:	400a      	ands	r2, r1
 800196a:	00d2      	lsls	r2, r2, #3
 800196c:	4093      	lsls	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001974:	4936      	ldr	r1, [pc, #216]	; (8001a50 <HAL_GPIO_Init+0x2b8>)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3318      	adds	r3, #24
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001982:	4b33      	ldr	r3, [pc, #204]	; (8001a50 <HAL_GPIO_Init+0x2b8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	43da      	mvns	r2, r3
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	035b      	lsls	r3, r3, #13
 800199a:	4013      	ands	r3, r2
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019a6:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <HAL_GPIO_Init+0x2b8>)
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80019ac:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <HAL_GPIO_Init+0x2b8>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	43da      	mvns	r2, r3
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	039b      	lsls	r3, r3, #14
 80019c4:	4013      	ands	r3, r2
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019d0:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <HAL_GPIO_Init+0x2b8>)
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019d6:	4a1e      	ldr	r2, [pc, #120]	; (8001a50 <HAL_GPIO_Init+0x2b8>)
 80019d8:	2384      	movs	r3, #132	; 0x84
 80019da:	58d3      	ldr	r3, [r2, r3]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	43da      	mvns	r2, r3
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	029b      	lsls	r3, r3, #10
 80019f0:	4013      	ands	r3, r2
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019fc:	4914      	ldr	r1, [pc, #80]	; (8001a50 <HAL_GPIO_Init+0x2b8>)
 80019fe:	2284      	movs	r2, #132	; 0x84
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001a04:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <HAL_GPIO_Init+0x2b8>)
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	58d3      	ldr	r3, [r2, r3]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	025b      	lsls	r3, r3, #9
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a2a:	4909      	ldr	r1, [pc, #36]	; (8001a50 <HAL_GPIO_Init+0x2b8>)
 8001a2c:	2280      	movs	r2, #128	; 0x80
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	40da      	lsrs	r2, r3
 8001a40:	1e13      	subs	r3, r2, #0
 8001a42:	d000      	beq.n	8001a46 <HAL_GPIO_Init+0x2ae>
 8001a44:	e6b0      	b.n	80017a8 <HAL_GPIO_Init+0x10>
  }
}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	46c0      	nop			; (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b006      	add	sp, #24
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021800 	.word	0x40021800
 8001a54:	50000400 	.word	0x50000400
 8001a58:	50000800 	.word	0x50000800
 8001a5c:	50000c00 	.word	0x50000c00

08001a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	0008      	movs	r0, r1
 8001a6a:	0011      	movs	r1, r2
 8001a6c:	1cbb      	adds	r3, r7, #2
 8001a6e:	1c02      	adds	r2, r0, #0
 8001a70:	801a      	strh	r2, [r3, #0]
 8001a72:	1c7b      	adds	r3, r7, #1
 8001a74:	1c0a      	adds	r2, r1, #0
 8001a76:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a78:	1c7b      	adds	r3, r7, #1
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d004      	beq.n	8001a8a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a80:	1cbb      	adds	r3, r7, #2
 8001a82:	881a      	ldrh	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a88:	e003      	b.n	8001a92 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a8a:	1cbb      	adds	r3, r7, #2
 8001a8c:	881a      	ldrh	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b002      	add	sp, #8
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	1dbb      	adds	r3, r7, #6
 8001aa6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001aa8:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	1dba      	adds	r2, r7, #6
 8001aae:	8812      	ldrh	r2, [r2, #0]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d008      	beq.n	8001ac6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001ab6:	1dba      	adds	r2, r7, #6
 8001ab8:	8812      	ldrh	r2, [r2, #0]
 8001aba:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001abc:	1dbb      	adds	r3, r7, #6
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f000 f815 	bl	8001af0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	1dba      	adds	r2, r7, #6
 8001acc:	8812      	ldrh	r2, [r2, #0]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d008      	beq.n	8001ae4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001ad4:	1dba      	adds	r2, r7, #6
 8001ad6:	8812      	ldrh	r2, [r2, #0]
 8001ad8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001ada:	1dbb      	adds	r3, r7, #6
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f7ff f91c 	bl	8000d1c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001ae4:	46c0      	nop			; (mov r8, r8)
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b002      	add	sp, #8
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40021800 	.word	0x40021800

08001af0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	0002      	movs	r2, r0
 8001af8:	1dbb      	adds	r3, r7, #6
 8001afa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001afc:	46c0      	nop			; (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b002      	add	sp, #8
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e082      	b.n	8001c1c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2241      	movs	r2, #65	; 0x41
 8001b1a:	5c9b      	ldrb	r3, [r3, r2]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d107      	bne.n	8001b32 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2240      	movs	r2, #64	; 0x40
 8001b26:	2100      	movs	r1, #0
 8001b28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f7ff fa2d 	bl	8000f8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2241      	movs	r2, #65	; 0x41
 8001b36:	2124      	movs	r1, #36	; 0x24
 8001b38:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2101      	movs	r1, #1
 8001b46:	438a      	bics	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4934      	ldr	r1, [pc, #208]	; (8001c24 <HAL_I2C_Init+0x120>)
 8001b54:	400a      	ands	r2, r1
 8001b56:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4931      	ldr	r1, [pc, #196]	; (8001c28 <HAL_I2C_Init+0x124>)
 8001b64:	400a      	ands	r2, r1
 8001b66:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d108      	bne.n	8001b82 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2180      	movs	r1, #128	; 0x80
 8001b7a:	0209      	lsls	r1, r1, #8
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	e007      	b.n	8001b92 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2184      	movs	r1, #132	; 0x84
 8001b8c:	0209      	lsls	r1, r1, #8
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d104      	bne.n	8001ba4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	491f      	ldr	r1, [pc, #124]	; (8001c2c <HAL_I2C_Init+0x128>)
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	491a      	ldr	r1, [pc, #104]	; (8001c28 <HAL_I2C_Init+0x124>)
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69d9      	ldr	r1, [r3, #28]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1a      	ldr	r2, [r3, #32]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2241      	movs	r2, #65	; 0x41
 8001c08:	2120      	movs	r1, #32
 8001c0a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2242      	movs	r2, #66	; 0x42
 8001c16:	2100      	movs	r1, #0
 8001c18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b002      	add	sp, #8
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	f0ffffff 	.word	0xf0ffffff
 8001c28:	ffff7fff 	.word	0xffff7fff
 8001c2c:	02008000 	.word	0x02008000

08001c30 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	0008      	movs	r0, r1
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	230a      	movs	r3, #10
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	1c02      	adds	r2, r0, #0
 8001c44:	801a      	strh	r2, [r3, #0]
 8001c46:	2308      	movs	r3, #8
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	1c0a      	adds	r2, r1, #0
 8001c4c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2241      	movs	r2, #65	; 0x41
 8001c52:	5c9b      	ldrb	r3, [r3, r2]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b20      	cmp	r3, #32
 8001c58:	d000      	beq.n	8001c5c <HAL_I2C_Master_Transmit+0x2c>
 8001c5a:	e0e7      	b.n	8001e2c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2240      	movs	r2, #64	; 0x40
 8001c60:	5c9b      	ldrb	r3, [r3, r2]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_I2C_Master_Transmit+0x3a>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e0e1      	b.n	8001e2e <HAL_I2C_Master_Transmit+0x1fe>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2240      	movs	r2, #64	; 0x40
 8001c6e:	2101      	movs	r1, #1
 8001c70:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c72:	f7ff fc33 	bl	80014dc <HAL_GetTick>
 8001c76:	0003      	movs	r3, r0
 8001c78:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	0219      	lsls	r1, r3, #8
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2319      	movs	r3, #25
 8001c86:	2201      	movs	r2, #1
 8001c88:	f000 fe76 	bl	8002978 <I2C_WaitOnFlagUntilTimeout>
 8001c8c:	1e03      	subs	r3, r0, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0cc      	b.n	8001e2e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2241      	movs	r2, #65	; 0x41
 8001c98:	2121      	movs	r1, #33	; 0x21
 8001c9a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2242      	movs	r2, #66	; 0x42
 8001ca0:	2110      	movs	r1, #16
 8001ca2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2208      	movs	r2, #8
 8001cb4:	18ba      	adds	r2, r7, r2
 8001cb6:	8812      	ldrh	r2, [r2, #0]
 8001cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	2bff      	cmp	r3, #255	; 0xff
 8001cc8:	d911      	bls.n	8001cee <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	22ff      	movs	r2, #255	; 0xff
 8001cce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	045c      	lsls	r4, r3, #17
 8001cda:	230a      	movs	r3, #10
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	8819      	ldrh	r1, [r3, #0]
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	4b55      	ldr	r3, [pc, #340]	; (8001e38 <HAL_I2C_Master_Transmit+0x208>)
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	0023      	movs	r3, r4
 8001ce8:	f001 f800 	bl	8002cec <I2C_TransferConfig>
 8001cec:	e075      	b.n	8001dda <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	049c      	lsls	r4, r3, #18
 8001d02:	230a      	movs	r3, #10
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	8819      	ldrh	r1, [r3, #0]
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	4b4b      	ldr	r3, [pc, #300]	; (8001e38 <HAL_I2C_Master_Transmit+0x208>)
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	0023      	movs	r3, r4
 8001d10:	f000 ffec 	bl	8002cec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001d14:	e061      	b.n	8001dda <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f000 fe6a 	bl	80029f6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d22:	1e03      	subs	r3, r0, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e081      	b.n	8001e2e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	781a      	ldrb	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d03a      	beq.n	8001dda <HAL_I2C_Master_Transmit+0x1aa>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d136      	bne.n	8001dda <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	0013      	movs	r3, r2
 8001d76:	2200      	movs	r2, #0
 8001d78:	2180      	movs	r1, #128	; 0x80
 8001d7a:	f000 fdfd 	bl	8002978 <I2C_WaitOnFlagUntilTimeout>
 8001d7e:	1e03      	subs	r3, r0, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e053      	b.n	8001e2e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2bff      	cmp	r3, #255	; 0xff
 8001d8e:	d911      	bls.n	8001db4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	22ff      	movs	r2, #255	; 0xff
 8001d94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	045c      	lsls	r4, r3, #17
 8001da0:	230a      	movs	r3, #10
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	8819      	ldrh	r1, [r3, #0]
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	2300      	movs	r3, #0
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	0023      	movs	r3, r4
 8001dae:	f000 ff9d 	bl	8002cec <I2C_TransferConfig>
 8001db2:	e012      	b.n	8001dda <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	049c      	lsls	r4, r3, #18
 8001dc8:	230a      	movs	r3, #10
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	8819      	ldrh	r1, [r3, #0]
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	0023      	movs	r3, r4
 8001dd6:	f000 ff89 	bl	8002cec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d198      	bne.n	8001d16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	0018      	movs	r0, r3
 8001dec:	f000 fe42 	bl	8002a74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001df0:	1e03      	subs	r3, r0, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e01a      	b.n	8001e2e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	490c      	ldr	r1, [pc, #48]	; (8001e3c <HAL_I2C_Master_Transmit+0x20c>)
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2241      	movs	r2, #65	; 0x41
 8001e14:	2120      	movs	r1, #32
 8001e16:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2242      	movs	r2, #66	; 0x42
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2240      	movs	r2, #64	; 0x40
 8001e24:	2100      	movs	r1, #0
 8001e26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e000      	b.n	8001e2e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001e2c:	2302      	movs	r3, #2
  }
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b007      	add	sp, #28
 8001e34:	bd90      	pop	{r4, r7, pc}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	80002000 	.word	0x80002000
 8001e3c:	fe00e800 	.word	0xfe00e800

08001e40 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	68f9      	ldr	r1, [r7, #12]
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
  }
}
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b004      	add	sp, #16
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	0a1b      	lsrs	r3, r3, #8
 8001e90:	001a      	movs	r2, r3
 8001e92:	2301      	movs	r3, #1
 8001e94:	4013      	ands	r3, r2
 8001e96:	d010      	beq.n	8001eba <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	09db      	lsrs	r3, r3, #7
 8001e9c:	001a      	movs	r2, r3
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001ea2:	d00a      	beq.n	8001eba <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2280      	movs	r2, #128	; 0x80
 8001eb6:	0052      	lsls	r2, r2, #1
 8001eb8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	0a9b      	lsrs	r3, r3, #10
 8001ebe:	001a      	movs	r2, r3
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d010      	beq.n	8001ee8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	09db      	lsrs	r3, r3, #7
 8001eca:	001a      	movs	r2, r3
 8001ecc:	2301      	movs	r3, #1
 8001ece:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001ed0:	d00a      	beq.n	8001ee8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	2208      	movs	r2, #8
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2280      	movs	r2, #128	; 0x80
 8001ee4:	00d2      	lsls	r2, r2, #3
 8001ee6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	0a5b      	lsrs	r3, r3, #9
 8001eec:	001a      	movs	r2, r3
 8001eee:	2301      	movs	r3, #1
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d010      	beq.n	8001f16 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	09db      	lsrs	r3, r3, #7
 8001ef8:	001a      	movs	r2, r3
 8001efa:	2301      	movs	r3, #1
 8001efc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001efe:	d00a      	beq.n	8001f16 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	2202      	movs	r2, #2
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	0092      	lsls	r2, r2, #2
 8001f14:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	220b      	movs	r2, #11
 8001f20:	4013      	ands	r3, r2
 8001f22:	d005      	beq.n	8001f30 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	0011      	movs	r1, r2
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f000 fbd8 	bl	80026e0 <I2C_ITError>
  }
}
 8001f30:	46c0      	nop			; (mov r8, r8)
 8001f32:	46bd      	mov	sp, r7
 8001f34:	b006      	add	sp, #24
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001f40:	46c0      	nop			; (mov r8, r8)
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b002      	add	sp, #8
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001f50:	46c0      	nop			; (mov r8, r8)
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b002      	add	sp, #8
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	0008      	movs	r0, r1
 8001f62:	0011      	movs	r1, r2
 8001f64:	1cfb      	adds	r3, r7, #3
 8001f66:	1c02      	adds	r2, r0, #0
 8001f68:	701a      	strb	r2, [r3, #0]
 8001f6a:	003b      	movs	r3, r7
 8001f6c:	1c0a      	adds	r2, r1, #0
 8001f6e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001f70:	46c0      	nop			; (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001f80:	46c0      	nop			; (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b002      	add	sp, #8
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b002      	add	sp, #8
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001fa0:	46c0      	nop			; (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b002      	add	sp, #8
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2240      	movs	r2, #64	; 0x40
 8001fc2:	5c9b      	ldrb	r3, [r3, r2]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <I2C_Slave_ISR_IT+0x24>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e0fa      	b.n	80021c2 <I2C_Slave_ISR_IT+0x21a>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2240      	movs	r2, #64	; 0x40
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	001a      	movs	r2, r3
 8001fda:	2301      	movs	r3, #1
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d00b      	beq.n	8001ff8 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	001a      	movs	r2, r3
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001fea:	d005      	beq.n	8001ff8 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	0011      	movs	r1, r2
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f000 f9f6 	bl	80023e4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	001a      	movs	r2, r3
 8001ffe:	2301      	movs	r3, #1
 8002000:	4013      	ands	r3, r2
 8002002:	d054      	beq.n	80020ae <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	091b      	lsrs	r3, r3, #4
 8002008:	001a      	movs	r2, r3
 800200a:	2301      	movs	r3, #1
 800200c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800200e:	d04e      	beq.n	80020ae <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002014:	b29b      	uxth	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d12d      	bne.n	8002076 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2241      	movs	r2, #65	; 0x41
 800201e:	5c9b      	ldrb	r3, [r3, r2]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b28      	cmp	r3, #40	; 0x28
 8002024:	d10b      	bne.n	800203e <I2C_Slave_ISR_IT+0x96>
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	049b      	lsls	r3, r3, #18
 800202c:	429a      	cmp	r2, r3
 800202e:	d106      	bne.n	800203e <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	0011      	movs	r1, r2
 8002036:	0018      	movs	r0, r3
 8002038:	f000 faf8 	bl	800262c <I2C_ITListenCplt>
 800203c:	e036      	b.n	80020ac <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2241      	movs	r2, #65	; 0x41
 8002042:	5c9b      	ldrb	r3, [r3, r2]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b29      	cmp	r3, #41	; 0x29
 8002048:	d110      	bne.n	800206c <I2C_Slave_ISR_IT+0xc4>
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	4a5f      	ldr	r2, [pc, #380]	; (80021cc <I2C_Slave_ISR_IT+0x224>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00c      	beq.n	800206c <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2210      	movs	r2, #16
 8002058:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	0018      	movs	r0, r3
 800205e:	f000 fc4a 	bl	80028f6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	0018      	movs	r0, r3
 8002066:	f000 f957 	bl	8002318 <I2C_ITSlaveSeqCplt>
 800206a:	e01f      	b.n	80020ac <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2210      	movs	r2, #16
 8002072:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002074:	e09d      	b.n	80021b2 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2210      	movs	r2, #16
 800207c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	2204      	movs	r2, #4
 8002084:	431a      	orrs	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <I2C_Slave_ISR_IT+0xf4>
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	045b      	lsls	r3, r3, #17
 8002096:	429a      	cmp	r2, r3
 8002098:	d000      	beq.n	800209c <I2C_Slave_ISR_IT+0xf4>
 800209a:	e08a      	b.n	80021b2 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	0011      	movs	r1, r2
 80020a4:	0018      	movs	r0, r3
 80020a6:	f000 fb1b 	bl	80026e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80020aa:	e082      	b.n	80021b2 <I2C_Slave_ISR_IT+0x20a>
 80020ac:	e081      	b.n	80021b2 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	001a      	movs	r2, r3
 80020b4:	2301      	movs	r3, #1
 80020b6:	4013      	ands	r3, r2
 80020b8:	d031      	beq.n	800211e <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	001a      	movs	r2, r3
 80020c0:	2301      	movs	r3, #1
 80020c2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80020c4:	d02b      	beq.n	800211e <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d018      	beq.n	8002102 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d154      	bne.n	80021b6 <I2C_Slave_ISR_IT+0x20e>
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	4a2f      	ldr	r2, [pc, #188]	; (80021cc <I2C_Slave_ISR_IT+0x224>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d050      	beq.n	80021b6 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	0018      	movs	r0, r3
 8002118:	f000 f8fe 	bl	8002318 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800211c:	e04b      	b.n	80021b6 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	001a      	movs	r2, r3
 8002124:	2301      	movs	r3, #1
 8002126:	4013      	ands	r3, r2
 8002128:	d00c      	beq.n	8002144 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	08db      	lsrs	r3, r3, #3
 800212e:	001a      	movs	r2, r3
 8002130:	2301      	movs	r3, #1
 8002132:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002134:	d006      	beq.n	8002144 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	0011      	movs	r1, r2
 800213c:	0018      	movs	r0, r3
 800213e:	f000 f847 	bl	80021d0 <I2C_ITAddrCplt>
 8002142:	e039      	b.n	80021b8 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	001a      	movs	r2, r3
 800214a:	2301      	movs	r3, #1
 800214c:	4013      	ands	r3, r2
 800214e:	d033      	beq.n	80021b8 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	085b      	lsrs	r3, r3, #1
 8002154:	001a      	movs	r2, r3
 8002156:	2301      	movs	r3, #1
 8002158:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800215a:	d02d      	beq.n	80021b8 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002160:	b29b      	uxth	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d018      	beq.n	8002198 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	781a      	ldrb	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002180:	b29b      	uxth	r3, r3
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218e:	3b01      	subs	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	851a      	strh	r2, [r3, #40]	; 0x28
 8002196:	e00f      	b.n	80021b8 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	045b      	lsls	r3, r3, #17
 800219e:	429a      	cmp	r2, r3
 80021a0:	d002      	beq.n	80021a8 <I2C_Slave_ISR_IT+0x200>
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d107      	bne.n	80021b8 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 f8b4 	bl	8002318 <I2C_ITSlaveSeqCplt>
 80021b0:	e002      	b.n	80021b8 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	e000      	b.n	80021b8 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80021b6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2240      	movs	r2, #64	; 0x40
 80021bc:	2100      	movs	r1, #0
 80021be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	0018      	movs	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b006      	add	sp, #24
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	ffff0000 	.word	0xffff0000

080021d0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80021d0:	b5b0      	push	{r4, r5, r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2241      	movs	r2, #65	; 0x41
 80021de:	5c9b      	ldrb	r3, [r3, r2]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	001a      	movs	r2, r3
 80021e4:	2328      	movs	r3, #40	; 0x28
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b28      	cmp	r3, #40	; 0x28
 80021ea:	d000      	beq.n	80021ee <I2C_ITAddrCplt+0x1e>
 80021ec:	e088      	b.n	8002300 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	0c1b      	lsrs	r3, r3, #16
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	250f      	movs	r5, #15
 80021fa:	197b      	adds	r3, r7, r5
 80021fc:	2101      	movs	r1, #1
 80021fe:	400a      	ands	r2, r1
 8002200:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	0c1b      	lsrs	r3, r3, #16
 800220a:	b29a      	uxth	r2, r3
 800220c:	200c      	movs	r0, #12
 800220e:	183b      	adds	r3, r7, r0
 8002210:	21fe      	movs	r1, #254	; 0xfe
 8002212:	400a      	ands	r2, r1
 8002214:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	b29a      	uxth	r2, r3
 800221e:	240a      	movs	r4, #10
 8002220:	193b      	adds	r3, r7, r4
 8002222:	0592      	lsls	r2, r2, #22
 8002224:	0d92      	lsrs	r2, r2, #22
 8002226:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	b29a      	uxth	r2, r3
 8002230:	2308      	movs	r3, #8
 8002232:	18fb      	adds	r3, r7, r3
 8002234:	21fe      	movs	r1, #254	; 0xfe
 8002236:	400a      	ands	r2, r1
 8002238:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d148      	bne.n	80022d4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002242:	0021      	movs	r1, r4
 8002244:	187b      	adds	r3, r7, r1
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	09db      	lsrs	r3, r3, #7
 800224a:	b29a      	uxth	r2, r3
 800224c:	183b      	adds	r3, r7, r0
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	4053      	eors	r3, r2
 8002252:	b29b      	uxth	r3, r3
 8002254:	001a      	movs	r2, r3
 8002256:	2306      	movs	r3, #6
 8002258:	4013      	ands	r3, r2
 800225a:	d120      	bne.n	800229e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800225c:	183b      	adds	r3, r7, r0
 800225e:	187a      	adds	r2, r7, r1
 8002260:	8812      	ldrh	r2, [r2, #0]
 8002262:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002272:	2b02      	cmp	r3, #2
 8002274:	d14c      	bne.n	8002310 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2208      	movs	r2, #8
 8002282:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2240      	movs	r2, #64	; 0x40
 8002288:	2100      	movs	r1, #0
 800228a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800228c:	183b      	adds	r3, r7, r0
 800228e:	881a      	ldrh	r2, [r3, #0]
 8002290:	197b      	adds	r3, r7, r5
 8002292:	7819      	ldrb	r1, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	0018      	movs	r0, r3
 8002298:	f7ff fe5e 	bl	8001f58 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800229c:	e038      	b.n	8002310 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800229e:	240c      	movs	r4, #12
 80022a0:	193b      	adds	r3, r7, r4
 80022a2:	2208      	movs	r2, #8
 80022a4:	18ba      	adds	r2, r7, r2
 80022a6:	8812      	ldrh	r2, [r2, #0]
 80022a8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	021a      	lsls	r2, r3, #8
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	0011      	movs	r1, r2
 80022b2:	0018      	movs	r0, r3
 80022b4:	f000 fd54 	bl	8002d60 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2240      	movs	r2, #64	; 0x40
 80022bc:	2100      	movs	r1, #0
 80022be:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80022c0:	193b      	adds	r3, r7, r4
 80022c2:	881a      	ldrh	r2, [r3, #0]
 80022c4:	230f      	movs	r3, #15
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	7819      	ldrb	r1, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff fe43 	bl	8001f58 <HAL_I2C_AddrCallback>
}
 80022d2:	e01d      	b.n	8002310 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	021a      	lsls	r2, r3, #8
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	0011      	movs	r1, r2
 80022dc:	0018      	movs	r0, r3
 80022de:	f000 fd3f 	bl	8002d60 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2240      	movs	r2, #64	; 0x40
 80022e6:	2100      	movs	r1, #0
 80022e8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80022ea:	230c      	movs	r3, #12
 80022ec:	18fb      	adds	r3, r7, r3
 80022ee:	881a      	ldrh	r2, [r3, #0]
 80022f0:	230f      	movs	r3, #15
 80022f2:	18fb      	adds	r3, r7, r3
 80022f4:	7819      	ldrb	r1, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f7ff fe2d 	bl	8001f58 <HAL_I2C_AddrCallback>
}
 80022fe:	e007      	b.n	8002310 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2208      	movs	r2, #8
 8002306:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2240      	movs	r2, #64	; 0x40
 800230c:	2100      	movs	r1, #0
 800230e:	5499      	strb	r1, [r3, r2]
}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	b004      	add	sp, #16
 8002316:	bdb0      	pop	{r4, r5, r7, pc}

08002318 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2242      	movs	r2, #66	; 0x42
 800232c:	2100      	movs	r1, #0
 800232e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	0b9b      	lsrs	r3, r3, #14
 8002334:	001a      	movs	r2, r3
 8002336:	2301      	movs	r3, #1
 8002338:	4013      	ands	r3, r2
 800233a:	d008      	beq.n	800234e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4925      	ldr	r1, [pc, #148]	; (80023dc <I2C_ITSlaveSeqCplt+0xc4>)
 8002348:	400a      	ands	r2, r1
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e00d      	b.n	800236a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	0bdb      	lsrs	r3, r3, #15
 8002352:	001a      	movs	r2, r3
 8002354:	2301      	movs	r3, #1
 8002356:	4013      	ands	r3, r2
 8002358:	d007      	beq.n	800236a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	491e      	ldr	r1, [pc, #120]	; (80023e0 <I2C_ITSlaveSeqCplt+0xc8>)
 8002366:	400a      	ands	r2, r1
 8002368:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2241      	movs	r2, #65	; 0x41
 800236e:	5c9b      	ldrb	r3, [r3, r2]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b29      	cmp	r3, #41	; 0x29
 8002374:	d114      	bne.n	80023a0 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2241      	movs	r2, #65	; 0x41
 800237a:	2128      	movs	r1, #40	; 0x28
 800237c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2221      	movs	r2, #33	; 0x21
 8002382:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2101      	movs	r1, #1
 8002388:	0018      	movs	r0, r3
 800238a:	f000 fce9 	bl	8002d60 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2240      	movs	r2, #64	; 0x40
 8002392:	2100      	movs	r1, #0
 8002394:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0018      	movs	r0, r3
 800239a:	f7ff fdcd 	bl	8001f38 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800239e:	e019      	b.n	80023d4 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2241      	movs	r2, #65	; 0x41
 80023a4:	5c9b      	ldrb	r3, [r3, r2]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b2a      	cmp	r3, #42	; 0x2a
 80023aa:	d113      	bne.n	80023d4 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2241      	movs	r2, #65	; 0x41
 80023b0:	2128      	movs	r1, #40	; 0x28
 80023b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2222      	movs	r2, #34	; 0x22
 80023b8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2102      	movs	r1, #2
 80023be:	0018      	movs	r0, r3
 80023c0:	f000 fcce 	bl	8002d60 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2240      	movs	r2, #64	; 0x40
 80023c8:	2100      	movs	r1, #0
 80023ca:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	0018      	movs	r0, r3
 80023d0:	f7ff fdba 	bl	8001f48 <HAL_I2C_SlaveRxCpltCallback>
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b004      	add	sp, #16
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	ffffbfff 	.word	0xffffbfff
 80023e0:	ffff7fff 	.word	0xffff7fff

080023e4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80023fa:	200f      	movs	r0, #15
 80023fc:	183b      	adds	r3, r7, r0
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	2141      	movs	r1, #65	; 0x41
 8002402:	5c52      	ldrb	r2, [r2, r1]
 8002404:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2220      	movs	r2, #32
 800240c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800240e:	183b      	adds	r3, r7, r0
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b21      	cmp	r3, #33	; 0x21
 8002414:	d003      	beq.n	800241e <I2C_ITSlaveCplt+0x3a>
 8002416:	183b      	adds	r3, r7, r0
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b29      	cmp	r3, #41	; 0x29
 800241c:	d109      	bne.n	8002432 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800241e:	4a7d      	ldr	r2, [pc, #500]	; (8002614 <I2C_ITSlaveCplt+0x230>)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	0011      	movs	r1, r2
 8002424:	0018      	movs	r0, r3
 8002426:	f000 fc9b 	bl	8002d60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2221      	movs	r2, #33	; 0x21
 800242e:	631a      	str	r2, [r3, #48]	; 0x30
 8002430:	e011      	b.n	8002456 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002432:	220f      	movs	r2, #15
 8002434:	18bb      	adds	r3, r7, r2
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b22      	cmp	r3, #34	; 0x22
 800243a:	d003      	beq.n	8002444 <I2C_ITSlaveCplt+0x60>
 800243c:	18bb      	adds	r3, r7, r2
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b2a      	cmp	r3, #42	; 0x2a
 8002442:	d108      	bne.n	8002456 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002444:	4a74      	ldr	r2, [pc, #464]	; (8002618 <I2C_ITSlaveCplt+0x234>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	0011      	movs	r1, r2
 800244a:	0018      	movs	r0, r3
 800244c:	f000 fc88 	bl	8002d60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2222      	movs	r2, #34	; 0x22
 8002454:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2180      	movs	r1, #128	; 0x80
 8002462:	0209      	lsls	r1, r1, #8
 8002464:	430a      	orrs	r2, r1
 8002466:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	496a      	ldr	r1, [pc, #424]	; (800261c <I2C_ITSlaveCplt+0x238>)
 8002474:	400a      	ands	r2, r1
 8002476:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	0018      	movs	r0, r3
 800247c:	f000 fa3b 	bl	80028f6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	0b9b      	lsrs	r3, r3, #14
 8002484:	001a      	movs	r2, r3
 8002486:	2301      	movs	r3, #1
 8002488:	4013      	ands	r3, r2
 800248a:	d013      	beq.n	80024b4 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4962      	ldr	r1, [pc, #392]	; (8002620 <I2C_ITSlaveCplt+0x23c>)
 8002498:	400a      	ands	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024b2:	e018      	b.n	80024e6 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	0bdb      	lsrs	r3, r3, #15
 80024b8:	001a      	movs	r2, r3
 80024ba:	2301      	movs	r3, #1
 80024bc:	4013      	ands	r3, r2
 80024be:	d012      	beq.n	80024e6 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4956      	ldr	r1, [pc, #344]	; (8002624 <I2C_ITSlaveCplt+0x240>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d006      	beq.n	80024e6 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	001a      	movs	r2, r3
 80024ec:	2301      	movs	r3, #1
 80024ee:	4013      	ands	r3, r2
 80024f0:	d020      	beq.n	8002534 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2204      	movs	r2, #4
 80024f6:	4393      	bics	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00c      	beq.n	8002534 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	2204      	movs	r2, #4
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2242      	movs	r2, #66	; 0x42
 800254e:	2100      	movs	r1, #0
 8002550:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	0011      	movs	r1, r2
 8002568:	0018      	movs	r0, r3
 800256a:	f000 f8b9 	bl	80026e0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2241      	movs	r2, #65	; 0x41
 8002572:	5c9b      	ldrb	r3, [r3, r2]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b28      	cmp	r3, #40	; 0x28
 8002578:	d147      	bne.n	800260a <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	0011      	movs	r1, r2
 8002580:	0018      	movs	r0, r3
 8002582:	f000 f853 	bl	800262c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002586:	e040      	b.n	800260a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	4a26      	ldr	r2, [pc, #152]	; (8002628 <I2C_ITSlaveCplt+0x244>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d016      	beq.n	80025c0 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	0018      	movs	r0, r3
 8002596:	f7ff febf 	bl	8002318 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a22      	ldr	r2, [pc, #136]	; (8002628 <I2C_ITSlaveCplt+0x244>)
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2241      	movs	r2, #65	; 0x41
 80025a4:	2120      	movs	r1, #32
 80025a6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2240      	movs	r2, #64	; 0x40
 80025b2:	2100      	movs	r1, #0
 80025b4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	0018      	movs	r0, r3
 80025ba:	f7ff fcdd 	bl	8001f78 <HAL_I2C_ListenCpltCallback>
}
 80025be:	e024      	b.n	800260a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2241      	movs	r2, #65	; 0x41
 80025c4:	5c9b      	ldrb	r3, [r3, r2]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b22      	cmp	r3, #34	; 0x22
 80025ca:	d10f      	bne.n	80025ec <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2241      	movs	r2, #65	; 0x41
 80025d0:	2120      	movs	r1, #32
 80025d2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2240      	movs	r2, #64	; 0x40
 80025de:	2100      	movs	r1, #0
 80025e0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	0018      	movs	r0, r3
 80025e6:	f7ff fcaf 	bl	8001f48 <HAL_I2C_SlaveRxCpltCallback>
}
 80025ea:	e00e      	b.n	800260a <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2241      	movs	r2, #65	; 0x41
 80025f0:	2120      	movs	r1, #32
 80025f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2240      	movs	r2, #64	; 0x40
 80025fe:	2100      	movs	r1, #0
 8002600:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	0018      	movs	r0, r3
 8002606:	f7ff fc97 	bl	8001f38 <HAL_I2C_SlaveTxCpltCallback>
}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	46bd      	mov	sp, r7
 800260e:	b006      	add	sp, #24
 8002610:	bd80      	pop	{r7, pc}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	00008001 	.word	0x00008001
 8002618:	00008002 	.word	0x00008002
 800261c:	fe00e800 	.word	0xfe00e800
 8002620:	ffffbfff 	.word	0xffffbfff
 8002624:	ffff7fff 	.word	0xffff7fff
 8002628:	ffff0000 	.word	0xffff0000

0800262c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a27      	ldr	r2, [pc, #156]	; (80026d8 <I2C_ITListenCplt+0xac>)
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2241      	movs	r2, #65	; 0x41
 8002646:	2120      	movs	r1, #32
 8002648:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2242      	movs	r2, #66	; 0x42
 800264e:	2100      	movs	r1, #0
 8002650:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	001a      	movs	r2, r3
 800265e:	2301      	movs	r3, #1
 8002660:	4013      	ands	r3, r2
 8002662:	d022      	beq.n	80026aa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002680:	2b00      	cmp	r3, #0
 8002682:	d012      	beq.n	80026aa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	2204      	movs	r2, #4
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80026aa:	4a0c      	ldr	r2, [pc, #48]	; (80026dc <I2C_ITListenCplt+0xb0>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	0011      	movs	r1, r2
 80026b0:	0018      	movs	r0, r3
 80026b2:	f000 fb55 	bl	8002d60 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2210      	movs	r2, #16
 80026bc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2240      	movs	r2, #64	; 0x40
 80026c2:	2100      	movs	r1, #0
 80026c4:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	0018      	movs	r0, r3
 80026ca:	f7ff fc55 	bl	8001f78 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b002      	add	sp, #8
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	ffff0000 	.word	0xffff0000
 80026dc:	00008003 	.word	0x00008003

080026e0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80026ea:	200f      	movs	r0, #15
 80026ec:	183b      	adds	r3, r7, r0
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	2141      	movs	r1, #65	; 0x41
 80026f2:	5c52      	ldrb	r2, [r2, r1]
 80026f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2242      	movs	r2, #66	; 0x42
 80026fa:	2100      	movs	r1, #0
 80026fc:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a62      	ldr	r2, [pc, #392]	; (800288c <I2C_ITError+0x1ac>)
 8002702:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002716:	183b      	adds	r3, r7, r0
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b28      	cmp	r3, #40	; 0x28
 800271c:	d007      	beq.n	800272e <I2C_ITError+0x4e>
 800271e:	183b      	adds	r3, r7, r0
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b29      	cmp	r3, #41	; 0x29
 8002724:	d003      	beq.n	800272e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002726:	183b      	adds	r3, r7, r0
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b2a      	cmp	r3, #42	; 0x2a
 800272c:	d10c      	bne.n	8002748 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2103      	movs	r1, #3
 8002732:	0018      	movs	r0, r3
 8002734:	f000 fb14 	bl	8002d60 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2241      	movs	r2, #65	; 0x41
 800273c:	2128      	movs	r1, #40	; 0x28
 800273e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a53      	ldr	r2, [pc, #332]	; (8002890 <I2C_ITError+0x1b0>)
 8002744:	635a      	str	r2, [r3, #52]	; 0x34
 8002746:	e012      	b.n	800276e <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002748:	4a52      	ldr	r2, [pc, #328]	; (8002894 <I2C_ITError+0x1b4>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	0011      	movs	r1, r2
 800274e:	0018      	movs	r0, r3
 8002750:	f000 fb06 	bl	8002d60 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2241      	movs	r2, #65	; 0x41
 8002758:	5c9b      	ldrb	r3, [r3, r2]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b60      	cmp	r3, #96	; 0x60
 800275e:	d003      	beq.n	8002768 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2241      	movs	r2, #65	; 0x41
 8002764:	2120      	movs	r1, #32
 8002766:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002778:	2b00      	cmp	r3, #0
 800277a:	d03b      	beq.n	80027f4 <I2C_ITError+0x114>
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b11      	cmp	r3, #17
 8002780:	d002      	beq.n	8002788 <I2C_ITError+0xa8>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b21      	cmp	r3, #33	; 0x21
 8002786:	d135      	bne.n	80027f4 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	01db      	lsls	r3, r3, #7
 8002792:	401a      	ands	r2, r3
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	01db      	lsls	r3, r3, #7
 8002798:	429a      	cmp	r2, r3
 800279a:	d107      	bne.n	80027ac <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	493c      	ldr	r1, [pc, #240]	; (8002898 <I2C_ITError+0x1b8>)
 80027a8:	400a      	ands	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b0:	0018      	movs	r0, r3
 80027b2:	f7fe ffe5 	bl	8001780 <HAL_DMA_GetState>
 80027b6:	0003      	movs	r3, r0
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d016      	beq.n	80027ea <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c0:	4a36      	ldr	r2, [pc, #216]	; (800289c <I2C_ITError+0x1bc>)
 80027c2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2240      	movs	r2, #64	; 0x40
 80027c8:	2100      	movs	r1, #0
 80027ca:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d0:	0018      	movs	r0, r3
 80027d2:	f7fe ff6b 	bl	80016ac <HAL_DMA_Abort_IT>
 80027d6:	1e03      	subs	r3, r0, #0
 80027d8:	d051      	beq.n	800287e <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	0018      	movs	r0, r3
 80027e6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027e8:	e049      	b.n	800287e <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 f859 	bl	80028a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027f2:	e044      	b.n	800287e <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d03b      	beq.n	8002874 <I2C_ITError+0x194>
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b12      	cmp	r3, #18
 8002800:	d002      	beq.n	8002808 <I2C_ITError+0x128>
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b22      	cmp	r3, #34	; 0x22
 8002806:	d135      	bne.n	8002874 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	401a      	ands	r2, r3
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	429a      	cmp	r2, r3
 800281a:	d107      	bne.n	800282c <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	491e      	ldr	r1, [pc, #120]	; (80028a0 <I2C_ITError+0x1c0>)
 8002828:	400a      	ands	r2, r1
 800282a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002830:	0018      	movs	r0, r3
 8002832:	f7fe ffa5 	bl	8001780 <HAL_DMA_GetState>
 8002836:	0003      	movs	r3, r0
 8002838:	2b01      	cmp	r3, #1
 800283a:	d016      	beq.n	800286a <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002840:	4a16      	ldr	r2, [pc, #88]	; (800289c <I2C_ITError+0x1bc>)
 8002842:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2240      	movs	r2, #64	; 0x40
 8002848:	2100      	movs	r1, #0
 800284a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002850:	0018      	movs	r0, r3
 8002852:	f7fe ff2b 	bl	80016ac <HAL_DMA_Abort_IT>
 8002856:	1e03      	subs	r3, r0, #0
 8002858:	d013      	beq.n	8002882 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002864:	0018      	movs	r0, r3
 8002866:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002868:	e00b      	b.n	8002882 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	0018      	movs	r0, r3
 800286e:	f000 f819 	bl	80028a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002872:	e006      	b.n	8002882 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	0018      	movs	r0, r3
 8002878:	f000 f814 	bl	80028a4 <I2C_TreatErrorCallback>
  }
}
 800287c:	e002      	b.n	8002884 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	e000      	b.n	8002884 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002882:	46c0      	nop			; (mov r8, r8)
}
 8002884:	46c0      	nop			; (mov r8, r8)
 8002886:	46bd      	mov	sp, r7
 8002888:	b004      	add	sp, #16
 800288a:	bd80      	pop	{r7, pc}
 800288c:	ffff0000 	.word	0xffff0000
 8002890:	08001fa9 	.word	0x08001fa9
 8002894:	00008003 	.word	0x00008003
 8002898:	ffffbfff 	.word	0xffffbfff
 800289c:	0800293b 	.word	0x0800293b
 80028a0:	ffff7fff 	.word	0xffff7fff

080028a4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2241      	movs	r2, #65	; 0x41
 80028b0:	5c9b      	ldrb	r3, [r3, r2]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b60      	cmp	r3, #96	; 0x60
 80028b6:	d10f      	bne.n	80028d8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2241      	movs	r2, #65	; 0x41
 80028bc:	2120      	movs	r1, #32
 80028be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2240      	movs	r2, #64	; 0x40
 80028ca:	2100      	movs	r1, #0
 80028cc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f7ff fb61 	bl	8001f98 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80028d6:	e00a      	b.n	80028ee <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2240      	movs	r2, #64	; 0x40
 80028e2:	2100      	movs	r1, #0
 80028e4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	0018      	movs	r0, r3
 80028ea:	f7ff fb4d 	bl	8001f88 <HAL_I2C_ErrorCallback>
}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b002      	add	sp, #8
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	2202      	movs	r2, #2
 8002906:	4013      	ands	r3, r2
 8002908:	2b02      	cmp	r3, #2
 800290a:	d103      	bne.n	8002914 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2200      	movs	r2, #0
 8002912:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	2201      	movs	r2, #1
 800291c:	4013      	ands	r3, r2
 800291e:	2b01      	cmp	r3, #1
 8002920:	d007      	beq.n	8002932 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699a      	ldr	r2, [r3, #24]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2101      	movs	r1, #1
 800292e:	430a      	orrs	r2, r1
 8002930:	619a      	str	r2, [r3, #24]
  }
}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	46bd      	mov	sp, r7
 8002936:	b002      	add	sp, #8
 8002938:	bd80      	pop	{r7, pc}

0800293a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002954:	2200      	movs	r2, #0
 8002956:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002964:	2200      	movs	r2, #0
 8002966:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	0018      	movs	r0, r3
 800296c:	f7ff ff9a 	bl	80028a4 <I2C_TreatErrorCallback>
}
 8002970:	46c0      	nop			; (mov r8, r8)
 8002972:	46bd      	mov	sp, r7
 8002974:	b004      	add	sp, #16
 8002976:	bd80      	pop	{r7, pc}

08002978 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	1dfb      	adds	r3, r7, #7
 8002986:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002988:	e021      	b.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	d01e      	beq.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002990:	f7fe fda4 	bl	80014dc <HAL_GetTick>
 8002994:	0002      	movs	r2, r0
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d302      	bcc.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d113      	bne.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	2220      	movs	r2, #32
 80029ac:	431a      	orrs	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2241      	movs	r2, #65	; 0x41
 80029b6:	2120      	movs	r1, #32
 80029b8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2242      	movs	r2, #66	; 0x42
 80029be:	2100      	movs	r1, #0
 80029c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2240      	movs	r2, #64	; 0x40
 80029c6:	2100      	movs	r1, #0
 80029c8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e00f      	b.n	80029ee <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	4013      	ands	r3, r2
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	425a      	negs	r2, r3
 80029de:	4153      	adcs	r3, r2
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	001a      	movs	r2, r3
 80029e4:	1dfb      	adds	r3, r7, #7
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d0ce      	beq.n	800298a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	0018      	movs	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b004      	add	sp, #16
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a02:	e02b      	b.n	8002a5c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f000 f86e 	bl	8002aec <I2C_IsErrorOccurred>
 8002a10:	1e03      	subs	r3, r0, #0
 8002a12:	d001      	beq.n	8002a18 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e029      	b.n	8002a6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	d01e      	beq.n	8002a5c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1e:	f7fe fd5d 	bl	80014dc <HAL_GetTick>
 8002a22:	0002      	movs	r2, r0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d302      	bcc.n	8002a34 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d113      	bne.n	8002a5c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	2220      	movs	r2, #32
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2241      	movs	r2, #65	; 0x41
 8002a44:	2120      	movs	r1, #32
 8002a46:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2242      	movs	r2, #66	; 0x42
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2240      	movs	r2, #64	; 0x40
 8002a54:	2100      	movs	r1, #0
 8002a56:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e007      	b.n	8002a6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2202      	movs	r2, #2
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d1cc      	bne.n	8002a04 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b004      	add	sp, #16
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a80:	e028      	b.n	8002ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f000 f82f 	bl	8002aec <I2C_IsErrorOccurred>
 8002a8e:	1e03      	subs	r3, r0, #0
 8002a90:	d001      	beq.n	8002a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e026      	b.n	8002ae4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a96:	f7fe fd21 	bl	80014dc <HAL_GetTick>
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d302      	bcc.n	8002aac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d113      	bne.n	8002ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2241      	movs	r2, #65	; 0x41
 8002abc:	2120      	movs	r1, #32
 8002abe:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2242      	movs	r2, #66	; 0x42
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2240      	movs	r2, #64	; 0x40
 8002acc:	2100      	movs	r1, #0
 8002ace:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e007      	b.n	8002ae4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2220      	movs	r2, #32
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	d1cf      	bne.n	8002a82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b004      	add	sp, #16
 8002aea:	bd80      	pop	{r7, pc}

08002aec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b08b      	sub	sp, #44	; 0x2c
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af8:	2327      	movs	r3, #39	; 0x27
 8002afa:	18fb      	adds	r3, r7, r3
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2210      	movs	r2, #16
 8002b14:	4013      	ands	r3, r2
 8002b16:	d100      	bne.n	8002b1a <I2C_IsErrorOccurred+0x2e>
 8002b18:	e082      	b.n	8002c20 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2210      	movs	r2, #16
 8002b20:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b22:	e060      	b.n	8002be6 <I2C_IsErrorOccurred+0xfa>
 8002b24:	2427      	movs	r4, #39	; 0x27
 8002b26:	193b      	adds	r3, r7, r4
 8002b28:	193a      	adds	r2, r7, r4
 8002b2a:	7812      	ldrb	r2, [r2, #0]
 8002b2c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3301      	adds	r3, #1
 8002b32:	d058      	beq.n	8002be6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b34:	f7fe fcd2 	bl	80014dc <HAL_GetTick>
 8002b38:	0002      	movs	r2, r0
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d306      	bcc.n	8002b52 <I2C_IsErrorOccurred+0x66>
 8002b44:	193b      	adds	r3, r7, r4
 8002b46:	193a      	adds	r2, r7, r4
 8002b48:	7812      	ldrb	r2, [r2, #0]
 8002b4a:	701a      	strb	r2, [r3, #0]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d149      	bne.n	8002be6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	01db      	lsls	r3, r3, #7
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b60:	2013      	movs	r0, #19
 8002b62:	183b      	adds	r3, r7, r0
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	2142      	movs	r1, #66	; 0x42
 8002b68:	5c52      	ldrb	r2, [r2, r1]
 8002b6a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	401a      	ands	r2, r3
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d126      	bne.n	8002bce <I2C_IsErrorOccurred+0xe2>
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	01db      	lsls	r3, r3, #7
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d021      	beq.n	8002bce <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002b8a:	183b      	adds	r3, r7, r0
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d01d      	beq.n	8002bce <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2180      	movs	r1, #128	; 0x80
 8002b9e:	01c9      	lsls	r1, r1, #7
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ba4:	f7fe fc9a 	bl	80014dc <HAL_GetTick>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bac:	e00f      	b.n	8002bce <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002bae:	f7fe fc95 	bl	80014dc <HAL_GetTick>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b19      	cmp	r3, #25
 8002bba:	d908      	bls.n	8002bce <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002bc4:	2327      	movs	r3, #39	; 0x27
 8002bc6:	18fb      	adds	r3, r7, r3
 8002bc8:	2201      	movs	r2, #1
 8002bca:	701a      	strb	r2, [r3, #0]

              break;
 8002bcc:	e00b      	b.n	8002be6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2127      	movs	r1, #39	; 0x27
 8002bda:	187a      	adds	r2, r7, r1
 8002bdc:	1879      	adds	r1, r7, r1
 8002bde:	7809      	ldrb	r1, [r1, #0]
 8002be0:	7011      	strb	r1, [r2, #0]
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	d1e3      	bne.n	8002bae <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	2220      	movs	r2, #32
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d004      	beq.n	8002bfe <I2C_IsErrorOccurred+0x112>
 8002bf4:	2327      	movs	r3, #39	; 0x27
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d092      	beq.n	8002b24 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002bfe:	2327      	movs	r3, #39	; 0x27
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d103      	bne.n	8002c10 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	2204      	movs	r2, #4
 8002c14:	4313      	orrs	r3, r2
 8002c16:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c18:	2327      	movs	r3, #39	; 0x27
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d00c      	beq.n	8002c4c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	2201      	movs	r2, #1
 8002c36:	4313      	orrs	r3, r2
 8002c38:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2280      	movs	r2, #128	; 0x80
 8002c40:	0052      	lsls	r2, r2, #1
 8002c42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c44:	2327      	movs	r3, #39	; 0x27
 8002c46:	18fb      	adds	r3, r7, r3
 8002c48:	2201      	movs	r2, #1
 8002c4a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4013      	ands	r3, r2
 8002c54:	d00c      	beq.n	8002c70 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	2208      	movs	r2, #8
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	00d2      	lsls	r2, r2, #3
 8002c66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c68:	2327      	movs	r3, #39	; 0x27
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4013      	ands	r3, r2
 8002c78:	d00c      	beq.n	8002c94 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2280      	movs	r2, #128	; 0x80
 8002c88:	0092      	lsls	r2, r2, #2
 8002c8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c8c:	2327      	movs	r3, #39	; 0x27
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002c94:	2327      	movs	r3, #39	; 0x27
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d01d      	beq.n	8002cda <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7ff fe28 	bl	80028f6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	490d      	ldr	r1, [pc, #52]	; (8002ce8 <I2C_IsErrorOccurred+0x1fc>)
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2241      	movs	r2, #65	; 0x41
 8002cc6:	2120      	movs	r1, #32
 8002cc8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2242      	movs	r2, #66	; 0x42
 8002cce:	2100      	movs	r1, #0
 8002cd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2240      	movs	r2, #64	; 0x40
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002cda:	2327      	movs	r3, #39	; 0x27
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	781b      	ldrb	r3, [r3, #0]
}
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b00b      	add	sp, #44	; 0x2c
 8002ce6:	bd90      	pop	{r4, r7, pc}
 8002ce8:	fe00e800 	.word	0xfe00e800

08002cec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cec:	b590      	push	{r4, r7, lr}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	0008      	movs	r0, r1
 8002cf6:	0011      	movs	r1, r2
 8002cf8:	607b      	str	r3, [r7, #4]
 8002cfa:	240a      	movs	r4, #10
 8002cfc:	193b      	adds	r3, r7, r4
 8002cfe:	1c02      	adds	r2, r0, #0
 8002d00:	801a      	strh	r2, [r3, #0]
 8002d02:	2009      	movs	r0, #9
 8002d04:	183b      	adds	r3, r7, r0
 8002d06:	1c0a      	adds	r2, r1, #0
 8002d08:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d0a:	193b      	adds	r3, r7, r4
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	059b      	lsls	r3, r3, #22
 8002d10:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d12:	183b      	adds	r3, r7, r0
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	0419      	lsls	r1, r3, #16
 8002d18:	23ff      	movs	r3, #255	; 0xff
 8002d1a:	041b      	lsls	r3, r3, #16
 8002d1c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d1e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d26:	4313      	orrs	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d36:	0d51      	lsrs	r1, r2, #21
 8002d38:	2280      	movs	r2, #128	; 0x80
 8002d3a:	00d2      	lsls	r2, r2, #3
 8002d3c:	400a      	ands	r2, r1
 8002d3e:	4907      	ldr	r1, [pc, #28]	; (8002d5c <I2C_TransferConfig+0x70>)
 8002d40:	430a      	orrs	r2, r1
 8002d42:	43d2      	mvns	r2, r2
 8002d44:	401a      	ands	r2, r3
 8002d46:	0011      	movs	r1, r2
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b007      	add	sp, #28
 8002d58:	bd90      	pop	{r4, r7, pc}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	03ff63ff 	.word	0x03ff63ff

08002d60 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	000a      	movs	r2, r1
 8002d6a:	1cbb      	adds	r3, r7, #2
 8002d6c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002d72:	1cbb      	adds	r3, r7, #2
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	2201      	movs	r2, #1
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d010      	beq.n	8002d9e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2242      	movs	r2, #66	; 0x42
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2241      	movs	r2, #65	; 0x41
 8002d88:	5c9b      	ldrb	r3, [r3, r2]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	001a      	movs	r2, r3
 8002d8e:	2328      	movs	r3, #40	; 0x28
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b28      	cmp	r3, #40	; 0x28
 8002d94:	d003      	beq.n	8002d9e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	22b0      	movs	r2, #176	; 0xb0
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002d9e:	1cbb      	adds	r3, r7, #2
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	2202      	movs	r2, #2
 8002da4:	4013      	ands	r3, r2
 8002da6:	d010      	beq.n	8002dca <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2244      	movs	r2, #68	; 0x44
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2241      	movs	r2, #65	; 0x41
 8002db4:	5c9b      	ldrb	r3, [r3, r2]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	001a      	movs	r2, r3
 8002dba:	2328      	movs	r3, #40	; 0x28
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b28      	cmp	r3, #40	; 0x28
 8002dc0:	d003      	beq.n	8002dca <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	22b0      	movs	r2, #176	; 0xb0
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002dca:	1cbb      	adds	r3, r7, #2
 8002dcc:	2200      	movs	r2, #0
 8002dce:	5e9b      	ldrsh	r3, [r3, r2]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	da03      	bge.n	8002ddc <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	22b8      	movs	r2, #184	; 0xb8
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002ddc:	1cbb      	adds	r3, r7, #2
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	2b10      	cmp	r3, #16
 8002de2:	d103      	bne.n	8002dec <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2290      	movs	r2, #144	; 0x90
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002dec:	1cbb      	adds	r3, r7, #2
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	2b20      	cmp	r3, #32
 8002df2:	d103      	bne.n	8002dfc <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002dfc:	1cbb      	adds	r3, r7, #2
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	2b40      	cmp	r3, #64	; 0x40
 8002e02:	d103      	bne.n	8002e0c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2240      	movs	r2, #64	; 0x40
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	43d9      	mvns	r1, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	400a      	ands	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]
}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b004      	add	sp, #16
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2241      	movs	r2, #65	; 0x41
 8002e36:	5c9b      	ldrb	r3, [r3, r2]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d138      	bne.n	8002eb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2240      	movs	r2, #64	; 0x40
 8002e42:	5c9b      	ldrb	r3, [r3, r2]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e032      	b.n	8002eb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2240      	movs	r2, #64	; 0x40
 8002e50:	2101      	movs	r1, #1
 8002e52:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2241      	movs	r2, #65	; 0x41
 8002e58:	2124      	movs	r1, #36	; 0x24
 8002e5a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2101      	movs	r1, #1
 8002e68:	438a      	bics	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4911      	ldr	r1, [pc, #68]	; (8002ebc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002e78:	400a      	ands	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6819      	ldr	r1, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2101      	movs	r1, #1
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2241      	movs	r2, #65	; 0x41
 8002ea0:	2120      	movs	r1, #32
 8002ea2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2240      	movs	r2, #64	; 0x40
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e000      	b.n	8002eb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
  }
}
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b002      	add	sp, #8
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	ffffefff 	.word	0xffffefff

08002ec0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2241      	movs	r2, #65	; 0x41
 8002ece:	5c9b      	ldrb	r3, [r3, r2]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d139      	bne.n	8002f4a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2240      	movs	r2, #64	; 0x40
 8002eda:	5c9b      	ldrb	r3, [r3, r2]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e033      	b.n	8002f4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2240      	movs	r2, #64	; 0x40
 8002ee8:	2101      	movs	r1, #1
 8002eea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2241      	movs	r2, #65	; 0x41
 8002ef0:	2124      	movs	r1, #36	; 0x24
 8002ef2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2101      	movs	r1, #1
 8002f00:	438a      	bics	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4a11      	ldr	r2, [pc, #68]	; (8002f54 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2101      	movs	r1, #1
 8002f32:	430a      	orrs	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2241      	movs	r2, #65	; 0x41
 8002f3a:	2120      	movs	r1, #32
 8002f3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2240      	movs	r2, #64	; 0x40
 8002f42:	2100      	movs	r1, #0
 8002f44:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	e000      	b.n	8002f4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f4a:	2302      	movs	r3, #2
  }
}
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b004      	add	sp, #16
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	fffff0ff 	.word	0xfffff0ff

08002f58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002f60:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a19      	ldr	r2, [pc, #100]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	0019      	movs	r1, r3
 8002f6a:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d11f      	bne.n	8002fbc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002f7c:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	0013      	movs	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	189b      	adds	r3, r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4912      	ldr	r1, [pc, #72]	; (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f7fd f8c4 	bl	8000118 <__udivsi3>
 8002f90:	0003      	movs	r3, r0
 8002f92:	3301      	adds	r3, #1
 8002f94:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f96:	e008      	b.n	8002faa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	e001      	b.n	8002faa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e009      	b.n	8002fbe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002faa:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	2380      	movs	r3, #128	; 0x80
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d0ed      	beq.n	8002f98 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b004      	add	sp, #16
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	40007000 	.word	0x40007000
 8002fcc:	fffff9ff 	.word	0xfffff9ff
 8002fd0:	20000030 	.word	0x20000030
 8002fd4:	000f4240 	.word	0x000f4240

08002fd8 <HAL_PWREx_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_IRQHandler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Check PWR exti Rising flag */
  if (__HAL_PWR_PVD_EXTI_GET_RISING_FLAG() != 0x0U)
 8002fdc:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	2380      	movs	r3, #128	; 0x80
 8002fe2:	025b      	lsls	r3, r3, #9
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d005      	beq.n	8002ff4 <HAL_PWREx_PVD_IRQHandler+0x1c>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_RISING_FLAG();
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8002fea:	2280      	movs	r2, #128	; 0x80
 8002fec:	0252      	lsls	r2, r2, #9
 8002fee:	60da      	str	r2, [r3, #12]

    /* PWR PVD interrupt rising user callback */
    HAL_PWREx_PVD_Rising_Callback();
 8002ff0:	f000 f812 	bl	8003018 <HAL_PWREx_PVD_Rising_Callback>
  }

  /* Check PWR exti fallling flag */
  if (__HAL_PWR_PVD_EXTI_GET_FALLING_FLAG() != 0x0U)
 8002ff4:	4b07      	ldr	r3, [pc, #28]	; (8003014 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	025b      	lsls	r3, r3, #9
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d005      	beq.n	800300c <HAL_PWREx_PVD_IRQHandler+0x34>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FALLING_FLAG();
 8003000:	4b04      	ldr	r3, [pc, #16]	; (8003014 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8003002:	2280      	movs	r2, #128	; 0x80
 8003004:	0252      	lsls	r2, r2, #9
 8003006:	611a      	str	r2, [r3, #16]

    /* PWR PVD interrupt falling user callback */
    HAL_PWREx_PVD_Falling_Callback();
 8003008:	f000 f80b 	bl	8003022 <HAL_PWREx_PVD_Falling_Callback>
  }
}
 800300c:	46c0      	nop			; (mov r8, r8)
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	40021800 	.word	0x40021800

08003018 <HAL_PWREx_PVD_Rising_Callback>:
/**
  * @brief  PWR PVD interrupt rising callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Rising_Callback(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Rising_Callback can be implemented in the user file
  */
}
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_PWREx_PVD_Falling_Callback>:
/**
  * @brief  PWR PVD interrupt Falling callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Falling_Callback(void)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Falling_Callback can be implemented in the user file
  */
}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003030:	4b03      	ldr	r3, [pc, #12]	; (8003040 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	23e0      	movs	r3, #224	; 0xe0
 8003036:	01db      	lsls	r3, r3, #7
 8003038:	4013      	ands	r3, r2
}
 800303a:	0018      	movs	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40021000 	.word	0x40021000

08003044 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e2fe      	b.n	8003654 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2201      	movs	r2, #1
 800305c:	4013      	ands	r3, r2
 800305e:	d100      	bne.n	8003062 <HAL_RCC_OscConfig+0x1e>
 8003060:	e07c      	b.n	800315c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003062:	4bc3      	ldr	r3, [pc, #780]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2238      	movs	r2, #56	; 0x38
 8003068:	4013      	ands	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800306c:	4bc0      	ldr	r3, [pc, #768]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2203      	movs	r2, #3
 8003072:	4013      	ands	r3, r2
 8003074:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	2b10      	cmp	r3, #16
 800307a:	d102      	bne.n	8003082 <HAL_RCC_OscConfig+0x3e>
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2b03      	cmp	r3, #3
 8003080:	d002      	beq.n	8003088 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b08      	cmp	r3, #8
 8003086:	d10b      	bne.n	80030a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003088:	4bb9      	ldr	r3, [pc, #740]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	029b      	lsls	r3, r3, #10
 8003090:	4013      	ands	r3, r2
 8003092:	d062      	beq.n	800315a <HAL_RCC_OscConfig+0x116>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d15e      	bne.n	800315a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e2d9      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	025b      	lsls	r3, r3, #9
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_OscConfig+0x78>
 80030ac:	4bb0      	ldr	r3, [pc, #704]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4baf      	ldr	r3, [pc, #700]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 80030b2:	2180      	movs	r1, #128	; 0x80
 80030b4:	0249      	lsls	r1, r1, #9
 80030b6:	430a      	orrs	r2, r1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e020      	b.n	80030fe <HAL_RCC_OscConfig+0xba>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	23a0      	movs	r3, #160	; 0xa0
 80030c2:	02db      	lsls	r3, r3, #11
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d10e      	bne.n	80030e6 <HAL_RCC_OscConfig+0xa2>
 80030c8:	4ba9      	ldr	r3, [pc, #676]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4ba8      	ldr	r3, [pc, #672]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 80030ce:	2180      	movs	r1, #128	; 0x80
 80030d0:	02c9      	lsls	r1, r1, #11
 80030d2:	430a      	orrs	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	4ba6      	ldr	r3, [pc, #664]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	4ba5      	ldr	r3, [pc, #660]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 80030dc:	2180      	movs	r1, #128	; 0x80
 80030de:	0249      	lsls	r1, r1, #9
 80030e0:	430a      	orrs	r2, r1
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	e00b      	b.n	80030fe <HAL_RCC_OscConfig+0xba>
 80030e6:	4ba2      	ldr	r3, [pc, #648]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4ba1      	ldr	r3, [pc, #644]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 80030ec:	49a1      	ldr	r1, [pc, #644]	; (8003374 <HAL_RCC_OscConfig+0x330>)
 80030ee:	400a      	ands	r2, r1
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	4b9f      	ldr	r3, [pc, #636]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4b9e      	ldr	r3, [pc, #632]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 80030f8:	499f      	ldr	r1, [pc, #636]	; (8003378 <HAL_RCC_OscConfig+0x334>)
 80030fa:	400a      	ands	r2, r1
 80030fc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d014      	beq.n	8003130 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003106:	f7fe f9e9 	bl	80014dc <HAL_GetTick>
 800310a:	0003      	movs	r3, r0
 800310c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003110:	f7fe f9e4 	bl	80014dc <HAL_GetTick>
 8003114:	0002      	movs	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e298      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003122:	4b93      	ldr	r3, [pc, #588]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	029b      	lsls	r3, r3, #10
 800312a:	4013      	ands	r3, r2
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0xcc>
 800312e:	e015      	b.n	800315c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fe f9d4 	bl	80014dc <HAL_GetTick>
 8003134:	0003      	movs	r3, r0
 8003136:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800313a:	f7fe f9cf 	bl	80014dc <HAL_GetTick>
 800313e:	0002      	movs	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b64      	cmp	r3, #100	; 0x64
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e283      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800314c:	4b88      	ldr	r3, [pc, #544]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	029b      	lsls	r3, r3, #10
 8003154:	4013      	ands	r3, r2
 8003156:	d1f0      	bne.n	800313a <HAL_RCC_OscConfig+0xf6>
 8003158:	e000      	b.n	800315c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800315a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2202      	movs	r2, #2
 8003162:	4013      	ands	r3, r2
 8003164:	d100      	bne.n	8003168 <HAL_RCC_OscConfig+0x124>
 8003166:	e099      	b.n	800329c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003168:	4b81      	ldr	r3, [pc, #516]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2238      	movs	r2, #56	; 0x38
 800316e:	4013      	ands	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003172:	4b7f      	ldr	r3, [pc, #508]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	2203      	movs	r2, #3
 8003178:	4013      	ands	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	2b10      	cmp	r3, #16
 8003180:	d102      	bne.n	8003188 <HAL_RCC_OscConfig+0x144>
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b02      	cmp	r3, #2
 8003186:	d002      	beq.n	800318e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d135      	bne.n	80031fa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800318e:	4b78      	ldr	r3, [pc, #480]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	2380      	movs	r3, #128	; 0x80
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4013      	ands	r3, r2
 8003198:	d005      	beq.n	80031a6 <HAL_RCC_OscConfig+0x162>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e256      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a6:	4b72      	ldr	r3, [pc, #456]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4a74      	ldr	r2, [pc, #464]	; (800337c <HAL_RCC_OscConfig+0x338>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	0019      	movs	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	021a      	lsls	r2, r3, #8
 80031b6:	4b6e      	ldr	r3, [pc, #440]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 80031b8:	430a      	orrs	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d112      	bne.n	80031e8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80031c2:	4b6b      	ldr	r3, [pc, #428]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a6e      	ldr	r2, [pc, #440]	; (8003380 <HAL_RCC_OscConfig+0x33c>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	0019      	movs	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	4b67      	ldr	r3, [pc, #412]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 80031d2:	430a      	orrs	r2, r1
 80031d4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80031d6:	4b66      	ldr	r3, [pc, #408]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	0adb      	lsrs	r3, r3, #11
 80031dc:	2207      	movs	r2, #7
 80031de:	4013      	ands	r3, r2
 80031e0:	4a68      	ldr	r2, [pc, #416]	; (8003384 <HAL_RCC_OscConfig+0x340>)
 80031e2:	40da      	lsrs	r2, r3
 80031e4:	4b68      	ldr	r3, [pc, #416]	; (8003388 <HAL_RCC_OscConfig+0x344>)
 80031e6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031e8:	4b68      	ldr	r3, [pc, #416]	; (800338c <HAL_RCC_OscConfig+0x348>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	0018      	movs	r0, r3
 80031ee:	f7fe f919 	bl	8001424 <HAL_InitTick>
 80031f2:	1e03      	subs	r3, r0, #0
 80031f4:	d051      	beq.n	800329a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e22c      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d030      	beq.n	8003264 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003202:	4b5b      	ldr	r3, [pc, #364]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a5e      	ldr	r2, [pc, #376]	; (8003380 <HAL_RCC_OscConfig+0x33c>)
 8003208:	4013      	ands	r3, r2
 800320a:	0019      	movs	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	4b57      	ldr	r3, [pc, #348]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 8003212:	430a      	orrs	r2, r1
 8003214:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003216:	4b56      	ldr	r3, [pc, #344]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	4b55      	ldr	r3, [pc, #340]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 800321c:	2180      	movs	r1, #128	; 0x80
 800321e:	0049      	lsls	r1, r1, #1
 8003220:	430a      	orrs	r2, r1
 8003222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7fe f95a 	bl	80014dc <HAL_GetTick>
 8003228:	0003      	movs	r3, r0
 800322a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800322e:	f7fe f955 	bl	80014dc <HAL_GetTick>
 8003232:	0002      	movs	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e209      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003240:	4b4b      	ldr	r3, [pc, #300]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	2380      	movs	r3, #128	; 0x80
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4013      	ands	r3, r2
 800324a:	d0f0      	beq.n	800322e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324c:	4b48      	ldr	r3, [pc, #288]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4a4a      	ldr	r2, [pc, #296]	; (800337c <HAL_RCC_OscConfig+0x338>)
 8003252:	4013      	ands	r3, r2
 8003254:	0019      	movs	r1, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	021a      	lsls	r2, r3, #8
 800325c:	4b44      	ldr	r3, [pc, #272]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 800325e:	430a      	orrs	r2, r1
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	e01b      	b.n	800329c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003264:	4b42      	ldr	r3, [pc, #264]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b41      	ldr	r3, [pc, #260]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 800326a:	4949      	ldr	r1, [pc, #292]	; (8003390 <HAL_RCC_OscConfig+0x34c>)
 800326c:	400a      	ands	r2, r1
 800326e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fe f934 	bl	80014dc <HAL_GetTick>
 8003274:	0003      	movs	r3, r0
 8003276:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327a:	f7fe f92f 	bl	80014dc <HAL_GetTick>
 800327e:	0002      	movs	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e1e3      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800328c:	4b38      	ldr	r3, [pc, #224]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4013      	ands	r3, r2
 8003296:	d1f0      	bne.n	800327a <HAL_RCC_OscConfig+0x236>
 8003298:	e000      	b.n	800329c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800329a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2208      	movs	r2, #8
 80032a2:	4013      	ands	r3, r2
 80032a4:	d047      	beq.n	8003336 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80032a6:	4b32      	ldr	r3, [pc, #200]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2238      	movs	r2, #56	; 0x38
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b18      	cmp	r3, #24
 80032b0:	d10a      	bne.n	80032c8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80032b2:	4b2f      	ldr	r3, [pc, #188]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 80032b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b6:	2202      	movs	r2, #2
 80032b8:	4013      	ands	r3, r2
 80032ba:	d03c      	beq.n	8003336 <HAL_RCC_OscConfig+0x2f2>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d138      	bne.n	8003336 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e1c5      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d019      	beq.n	8003304 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80032d0:	4b27      	ldr	r3, [pc, #156]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 80032d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032d4:	4b26      	ldr	r3, [pc, #152]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 80032d6:	2101      	movs	r1, #1
 80032d8:	430a      	orrs	r2, r1
 80032da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fe f8fe 	bl	80014dc <HAL_GetTick>
 80032e0:	0003      	movs	r3, r0
 80032e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e6:	f7fe f8f9 	bl	80014dc <HAL_GetTick>
 80032ea:	0002      	movs	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e1ad      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032f8:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 80032fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fc:	2202      	movs	r2, #2
 80032fe:	4013      	ands	r3, r2
 8003300:	d0f1      	beq.n	80032e6 <HAL_RCC_OscConfig+0x2a2>
 8003302:	e018      	b.n	8003336 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003304:	4b1a      	ldr	r3, [pc, #104]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 8003306:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003308:	4b19      	ldr	r3, [pc, #100]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 800330a:	2101      	movs	r1, #1
 800330c:	438a      	bics	r2, r1
 800330e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7fe f8e4 	bl	80014dc <HAL_GetTick>
 8003314:	0003      	movs	r3, r0
 8003316:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800331a:	f7fe f8df 	bl	80014dc <HAL_GetTick>
 800331e:	0002      	movs	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e193      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800332c:	4b10      	ldr	r3, [pc, #64]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 800332e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003330:	2202      	movs	r2, #2
 8003332:	4013      	ands	r3, r2
 8003334:	d1f1      	bne.n	800331a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2204      	movs	r2, #4
 800333c:	4013      	ands	r3, r2
 800333e:	d100      	bne.n	8003342 <HAL_RCC_OscConfig+0x2fe>
 8003340:	e0c6      	b.n	80034d0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003342:	231f      	movs	r3, #31
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2238      	movs	r2, #56	; 0x38
 8003350:	4013      	ands	r3, r2
 8003352:	2b20      	cmp	r3, #32
 8003354:	d11e      	bne.n	8003394 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_RCC_OscConfig+0x32c>)
 8003358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335a:	2202      	movs	r2, #2
 800335c:	4013      	ands	r3, r2
 800335e:	d100      	bne.n	8003362 <HAL_RCC_OscConfig+0x31e>
 8003360:	e0b6      	b.n	80034d0 <HAL_RCC_OscConfig+0x48c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d000      	beq.n	800336c <HAL_RCC_OscConfig+0x328>
 800336a:	e0b1      	b.n	80034d0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e171      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
 8003370:	40021000 	.word	0x40021000
 8003374:	fffeffff 	.word	0xfffeffff
 8003378:	fffbffff 	.word	0xfffbffff
 800337c:	ffff80ff 	.word	0xffff80ff
 8003380:	ffffc7ff 	.word	0xffffc7ff
 8003384:	00f42400 	.word	0x00f42400
 8003388:	20000030 	.word	0x20000030
 800338c:	20000034 	.word	0x20000034
 8003390:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003394:	4bb1      	ldr	r3, [pc, #708]	; (800365c <HAL_RCC_OscConfig+0x618>)
 8003396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003398:	2380      	movs	r3, #128	; 0x80
 800339a:	055b      	lsls	r3, r3, #21
 800339c:	4013      	ands	r3, r2
 800339e:	d101      	bne.n	80033a4 <HAL_RCC_OscConfig+0x360>
 80033a0:	2301      	movs	r3, #1
 80033a2:	e000      	b.n	80033a6 <HAL_RCC_OscConfig+0x362>
 80033a4:	2300      	movs	r3, #0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d011      	beq.n	80033ce <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80033aa:	4bac      	ldr	r3, [pc, #688]	; (800365c <HAL_RCC_OscConfig+0x618>)
 80033ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033ae:	4bab      	ldr	r3, [pc, #684]	; (800365c <HAL_RCC_OscConfig+0x618>)
 80033b0:	2180      	movs	r1, #128	; 0x80
 80033b2:	0549      	lsls	r1, r1, #21
 80033b4:	430a      	orrs	r2, r1
 80033b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80033b8:	4ba8      	ldr	r3, [pc, #672]	; (800365c <HAL_RCC_OscConfig+0x618>)
 80033ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033bc:	2380      	movs	r3, #128	; 0x80
 80033be:	055b      	lsls	r3, r3, #21
 80033c0:	4013      	ands	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80033c6:	231f      	movs	r3, #31
 80033c8:	18fb      	adds	r3, r7, r3
 80033ca:	2201      	movs	r2, #1
 80033cc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ce:	4ba4      	ldr	r3, [pc, #656]	; (8003660 <HAL_RCC_OscConfig+0x61c>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	4013      	ands	r3, r2
 80033d8:	d11a      	bne.n	8003410 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033da:	4ba1      	ldr	r3, [pc, #644]	; (8003660 <HAL_RCC_OscConfig+0x61c>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	4ba0      	ldr	r3, [pc, #640]	; (8003660 <HAL_RCC_OscConfig+0x61c>)
 80033e0:	2180      	movs	r1, #128	; 0x80
 80033e2:	0049      	lsls	r1, r1, #1
 80033e4:	430a      	orrs	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80033e8:	f7fe f878 	bl	80014dc <HAL_GetTick>
 80033ec:	0003      	movs	r3, r0
 80033ee:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f2:	f7fe f873 	bl	80014dc <HAL_GetTick>
 80033f6:	0002      	movs	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e127      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003404:	4b96      	ldr	r3, [pc, #600]	; (8003660 <HAL_RCC_OscConfig+0x61c>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	2380      	movs	r3, #128	; 0x80
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	4013      	ands	r3, r2
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d106      	bne.n	8003426 <HAL_RCC_OscConfig+0x3e2>
 8003418:	4b90      	ldr	r3, [pc, #576]	; (800365c <HAL_RCC_OscConfig+0x618>)
 800341a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800341c:	4b8f      	ldr	r3, [pc, #572]	; (800365c <HAL_RCC_OscConfig+0x618>)
 800341e:	2101      	movs	r1, #1
 8003420:	430a      	orrs	r2, r1
 8003422:	65da      	str	r2, [r3, #92]	; 0x5c
 8003424:	e01c      	b.n	8003460 <HAL_RCC_OscConfig+0x41c>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b05      	cmp	r3, #5
 800342c:	d10c      	bne.n	8003448 <HAL_RCC_OscConfig+0x404>
 800342e:	4b8b      	ldr	r3, [pc, #556]	; (800365c <HAL_RCC_OscConfig+0x618>)
 8003430:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003432:	4b8a      	ldr	r3, [pc, #552]	; (800365c <HAL_RCC_OscConfig+0x618>)
 8003434:	2104      	movs	r1, #4
 8003436:	430a      	orrs	r2, r1
 8003438:	65da      	str	r2, [r3, #92]	; 0x5c
 800343a:	4b88      	ldr	r3, [pc, #544]	; (800365c <HAL_RCC_OscConfig+0x618>)
 800343c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800343e:	4b87      	ldr	r3, [pc, #540]	; (800365c <HAL_RCC_OscConfig+0x618>)
 8003440:	2101      	movs	r1, #1
 8003442:	430a      	orrs	r2, r1
 8003444:	65da      	str	r2, [r3, #92]	; 0x5c
 8003446:	e00b      	b.n	8003460 <HAL_RCC_OscConfig+0x41c>
 8003448:	4b84      	ldr	r3, [pc, #528]	; (800365c <HAL_RCC_OscConfig+0x618>)
 800344a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800344c:	4b83      	ldr	r3, [pc, #524]	; (800365c <HAL_RCC_OscConfig+0x618>)
 800344e:	2101      	movs	r1, #1
 8003450:	438a      	bics	r2, r1
 8003452:	65da      	str	r2, [r3, #92]	; 0x5c
 8003454:	4b81      	ldr	r3, [pc, #516]	; (800365c <HAL_RCC_OscConfig+0x618>)
 8003456:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003458:	4b80      	ldr	r3, [pc, #512]	; (800365c <HAL_RCC_OscConfig+0x618>)
 800345a:	2104      	movs	r1, #4
 800345c:	438a      	bics	r2, r1
 800345e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d014      	beq.n	8003492 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe f838 	bl	80014dc <HAL_GetTick>
 800346c:	0003      	movs	r3, r0
 800346e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003470:	e009      	b.n	8003486 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003472:	f7fe f833 	bl	80014dc <HAL_GetTick>
 8003476:	0002      	movs	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	4a79      	ldr	r2, [pc, #484]	; (8003664 <HAL_RCC_OscConfig+0x620>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e0e6      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003486:	4b75      	ldr	r3, [pc, #468]	; (800365c <HAL_RCC_OscConfig+0x618>)
 8003488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348a:	2202      	movs	r2, #2
 800348c:	4013      	ands	r3, r2
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x42e>
 8003490:	e013      	b.n	80034ba <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003492:	f7fe f823 	bl	80014dc <HAL_GetTick>
 8003496:	0003      	movs	r3, r0
 8003498:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800349a:	e009      	b.n	80034b0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349c:	f7fe f81e 	bl	80014dc <HAL_GetTick>
 80034a0:	0002      	movs	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	4a6f      	ldr	r2, [pc, #444]	; (8003664 <HAL_RCC_OscConfig+0x620>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e0d1      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034b0:	4b6a      	ldr	r3, [pc, #424]	; (800365c <HAL_RCC_OscConfig+0x618>)
 80034b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b4:	2202      	movs	r2, #2
 80034b6:	4013      	ands	r3, r2
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80034ba:	231f      	movs	r3, #31
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d105      	bne.n	80034d0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80034c4:	4b65      	ldr	r3, [pc, #404]	; (800365c <HAL_RCC_OscConfig+0x618>)
 80034c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034c8:	4b64      	ldr	r3, [pc, #400]	; (800365c <HAL_RCC_OscConfig+0x618>)
 80034ca:	4967      	ldr	r1, [pc, #412]	; (8003668 <HAL_RCC_OscConfig+0x624>)
 80034cc:	400a      	ands	r2, r1
 80034ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d100      	bne.n	80034da <HAL_RCC_OscConfig+0x496>
 80034d8:	e0bb      	b.n	8003652 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034da:	4b60      	ldr	r3, [pc, #384]	; (800365c <HAL_RCC_OscConfig+0x618>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2238      	movs	r2, #56	; 0x38
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b10      	cmp	r3, #16
 80034e4:	d100      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4a4>
 80034e6:	e07b      	b.n	80035e0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d156      	bne.n	800359e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f0:	4b5a      	ldr	r3, [pc, #360]	; (800365c <HAL_RCC_OscConfig+0x618>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	4b59      	ldr	r3, [pc, #356]	; (800365c <HAL_RCC_OscConfig+0x618>)
 80034f6:	495d      	ldr	r1, [pc, #372]	; (800366c <HAL_RCC_OscConfig+0x628>)
 80034f8:	400a      	ands	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fd ffee 	bl	80014dc <HAL_GetTick>
 8003500:	0003      	movs	r3, r0
 8003502:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003506:	f7fd ffe9 	bl	80014dc <HAL_GetTick>
 800350a:	0002      	movs	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e09d      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003518:	4b50      	ldr	r3, [pc, #320]	; (800365c <HAL_RCC_OscConfig+0x618>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	2380      	movs	r3, #128	; 0x80
 800351e:	049b      	lsls	r3, r3, #18
 8003520:	4013      	ands	r3, r2
 8003522:	d1f0      	bne.n	8003506 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003524:	4b4d      	ldr	r3, [pc, #308]	; (800365c <HAL_RCC_OscConfig+0x618>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4a51      	ldr	r2, [pc, #324]	; (8003670 <HAL_RCC_OscConfig+0x62c>)
 800352a:	4013      	ands	r3, r2
 800352c:	0019      	movs	r1, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1a      	ldr	r2, [r3, #32]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	021b      	lsls	r3, r3, #8
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003550:	431a      	orrs	r2, r3
 8003552:	4b42      	ldr	r3, [pc, #264]	; (800365c <HAL_RCC_OscConfig+0x618>)
 8003554:	430a      	orrs	r2, r1
 8003556:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003558:	4b40      	ldr	r3, [pc, #256]	; (800365c <HAL_RCC_OscConfig+0x618>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b3f      	ldr	r3, [pc, #252]	; (800365c <HAL_RCC_OscConfig+0x618>)
 800355e:	2180      	movs	r1, #128	; 0x80
 8003560:	0449      	lsls	r1, r1, #17
 8003562:	430a      	orrs	r2, r1
 8003564:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003566:	4b3d      	ldr	r3, [pc, #244]	; (800365c <HAL_RCC_OscConfig+0x618>)
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	4b3c      	ldr	r3, [pc, #240]	; (800365c <HAL_RCC_OscConfig+0x618>)
 800356c:	2180      	movs	r1, #128	; 0x80
 800356e:	0549      	lsls	r1, r1, #21
 8003570:	430a      	orrs	r2, r1
 8003572:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7fd ffb2 	bl	80014dc <HAL_GetTick>
 8003578:	0003      	movs	r3, r0
 800357a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357e:	f7fd ffad 	bl	80014dc <HAL_GetTick>
 8003582:	0002      	movs	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e061      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003590:	4b32      	ldr	r3, [pc, #200]	; (800365c <HAL_RCC_OscConfig+0x618>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	2380      	movs	r3, #128	; 0x80
 8003596:	049b      	lsls	r3, r3, #18
 8003598:	4013      	ands	r3, r2
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x53a>
 800359c:	e059      	b.n	8003652 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359e:	4b2f      	ldr	r3, [pc, #188]	; (800365c <HAL_RCC_OscConfig+0x618>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	4b2e      	ldr	r3, [pc, #184]	; (800365c <HAL_RCC_OscConfig+0x618>)
 80035a4:	4931      	ldr	r1, [pc, #196]	; (800366c <HAL_RCC_OscConfig+0x628>)
 80035a6:	400a      	ands	r2, r1
 80035a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035aa:	f7fd ff97 	bl	80014dc <HAL_GetTick>
 80035ae:	0003      	movs	r3, r0
 80035b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fd ff92 	bl	80014dc <HAL_GetTick>
 80035b8:	0002      	movs	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e046      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c6:	4b25      	ldr	r3, [pc, #148]	; (800365c <HAL_RCC_OscConfig+0x618>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	049b      	lsls	r3, r3, #18
 80035ce:	4013      	ands	r3, r2
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80035d2:	4b22      	ldr	r3, [pc, #136]	; (800365c <HAL_RCC_OscConfig+0x618>)
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	4b21      	ldr	r3, [pc, #132]	; (800365c <HAL_RCC_OscConfig+0x618>)
 80035d8:	4926      	ldr	r1, [pc, #152]	; (8003674 <HAL_RCC_OscConfig+0x630>)
 80035da:	400a      	ands	r2, r1
 80035dc:	60da      	str	r2, [r3, #12]
 80035de:	e038      	b.n	8003652 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e033      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80035ec:	4b1b      	ldr	r3, [pc, #108]	; (800365c <HAL_RCC_OscConfig+0x618>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2203      	movs	r2, #3
 80035f6:	401a      	ands	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d126      	bne.n	800364e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2270      	movs	r2, #112	; 0x70
 8003604:	401a      	ands	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d11f      	bne.n	800364e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	23fe      	movs	r3, #254	; 0xfe
 8003612:	01db      	lsls	r3, r3, #7
 8003614:	401a      	ands	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d116      	bne.n	800364e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	23f8      	movs	r3, #248	; 0xf8
 8003624:	039b      	lsls	r3, r3, #14
 8003626:	401a      	ands	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800362c:	429a      	cmp	r2, r3
 800362e:	d10e      	bne.n	800364e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	23e0      	movs	r3, #224	; 0xe0
 8003634:	051b      	lsls	r3, r3, #20
 8003636:	401a      	ands	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800363c:	429a      	cmp	r2, r3
 800363e:	d106      	bne.n	800364e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	0f5b      	lsrs	r3, r3, #29
 8003644:	075a      	lsls	r2, r3, #29
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d001      	beq.n	8003652 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	0018      	movs	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	b008      	add	sp, #32
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40021000 	.word	0x40021000
 8003660:	40007000 	.word	0x40007000
 8003664:	00001388 	.word	0x00001388
 8003668:	efffffff 	.word	0xefffffff
 800366c:	feffffff 	.word	0xfeffffff
 8003670:	11c1808c 	.word	0x11c1808c
 8003674:	eefefffc 	.word	0xeefefffc

08003678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0e9      	b.n	8003860 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800368c:	4b76      	ldr	r3, [pc, #472]	; (8003868 <HAL_RCC_ClockConfig+0x1f0>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2207      	movs	r2, #7
 8003692:	4013      	ands	r3, r2
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d91e      	bls.n	80036d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369a:	4b73      	ldr	r3, [pc, #460]	; (8003868 <HAL_RCC_ClockConfig+0x1f0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2207      	movs	r2, #7
 80036a0:	4393      	bics	r3, r2
 80036a2:	0019      	movs	r1, r3
 80036a4:	4b70      	ldr	r3, [pc, #448]	; (8003868 <HAL_RCC_ClockConfig+0x1f0>)
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036ac:	f7fd ff16 	bl	80014dc <HAL_GetTick>
 80036b0:	0003      	movs	r3, r0
 80036b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036b4:	e009      	b.n	80036ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b6:	f7fd ff11 	bl	80014dc <HAL_GetTick>
 80036ba:	0002      	movs	r2, r0
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	4a6a      	ldr	r2, [pc, #424]	; (800386c <HAL_RCC_ClockConfig+0x1f4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e0ca      	b.n	8003860 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036ca:	4b67      	ldr	r3, [pc, #412]	; (8003868 <HAL_RCC_ClockConfig+0x1f0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2207      	movs	r2, #7
 80036d0:	4013      	ands	r3, r2
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d1ee      	bne.n	80036b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2202      	movs	r2, #2
 80036de:	4013      	ands	r3, r2
 80036e0:	d015      	beq.n	800370e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2204      	movs	r2, #4
 80036e8:	4013      	ands	r3, r2
 80036ea:	d006      	beq.n	80036fa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80036ec:	4b60      	ldr	r3, [pc, #384]	; (8003870 <HAL_RCC_ClockConfig+0x1f8>)
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	4b5f      	ldr	r3, [pc, #380]	; (8003870 <HAL_RCC_ClockConfig+0x1f8>)
 80036f2:	21e0      	movs	r1, #224	; 0xe0
 80036f4:	01c9      	lsls	r1, r1, #7
 80036f6:	430a      	orrs	r2, r1
 80036f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036fa:	4b5d      	ldr	r3, [pc, #372]	; (8003870 <HAL_RCC_ClockConfig+0x1f8>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	4a5d      	ldr	r2, [pc, #372]	; (8003874 <HAL_RCC_ClockConfig+0x1fc>)
 8003700:	4013      	ands	r3, r2
 8003702:	0019      	movs	r1, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	4b59      	ldr	r3, [pc, #356]	; (8003870 <HAL_RCC_ClockConfig+0x1f8>)
 800370a:	430a      	orrs	r2, r1
 800370c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2201      	movs	r2, #1
 8003714:	4013      	ands	r3, r2
 8003716:	d057      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d107      	bne.n	8003730 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003720:	4b53      	ldr	r3, [pc, #332]	; (8003870 <HAL_RCC_ClockConfig+0x1f8>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	2380      	movs	r3, #128	; 0x80
 8003726:	029b      	lsls	r3, r3, #10
 8003728:	4013      	ands	r3, r2
 800372a:	d12b      	bne.n	8003784 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e097      	b.n	8003860 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d107      	bne.n	8003748 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003738:	4b4d      	ldr	r3, [pc, #308]	; (8003870 <HAL_RCC_ClockConfig+0x1f8>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	049b      	lsls	r3, r3, #18
 8003740:	4013      	ands	r3, r2
 8003742:	d11f      	bne.n	8003784 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e08b      	b.n	8003860 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d107      	bne.n	8003760 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003750:	4b47      	ldr	r3, [pc, #284]	; (8003870 <HAL_RCC_ClockConfig+0x1f8>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	2380      	movs	r3, #128	; 0x80
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4013      	ands	r3, r2
 800375a:	d113      	bne.n	8003784 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e07f      	b.n	8003860 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b03      	cmp	r3, #3
 8003766:	d106      	bne.n	8003776 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003768:	4b41      	ldr	r3, [pc, #260]	; (8003870 <HAL_RCC_ClockConfig+0x1f8>)
 800376a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800376c:	2202      	movs	r2, #2
 800376e:	4013      	ands	r3, r2
 8003770:	d108      	bne.n	8003784 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e074      	b.n	8003860 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003776:	4b3e      	ldr	r3, [pc, #248]	; (8003870 <HAL_RCC_ClockConfig+0x1f8>)
 8003778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377a:	2202      	movs	r2, #2
 800377c:	4013      	ands	r3, r2
 800377e:	d101      	bne.n	8003784 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e06d      	b.n	8003860 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003784:	4b3a      	ldr	r3, [pc, #232]	; (8003870 <HAL_RCC_ClockConfig+0x1f8>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2207      	movs	r2, #7
 800378a:	4393      	bics	r3, r2
 800378c:	0019      	movs	r1, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	4b37      	ldr	r3, [pc, #220]	; (8003870 <HAL_RCC_ClockConfig+0x1f8>)
 8003794:	430a      	orrs	r2, r1
 8003796:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003798:	f7fd fea0 	bl	80014dc <HAL_GetTick>
 800379c:	0003      	movs	r3, r0
 800379e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a0:	e009      	b.n	80037b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a2:	f7fd fe9b 	bl	80014dc <HAL_GetTick>
 80037a6:	0002      	movs	r2, r0
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	4a2f      	ldr	r2, [pc, #188]	; (800386c <HAL_RCC_ClockConfig+0x1f4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e054      	b.n	8003860 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b6:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <HAL_RCC_ClockConfig+0x1f8>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2238      	movs	r2, #56	; 0x38
 80037bc:	401a      	ands	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d1ec      	bne.n	80037a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c8:	4b27      	ldr	r3, [pc, #156]	; (8003868 <HAL_RCC_ClockConfig+0x1f0>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2207      	movs	r2, #7
 80037ce:	4013      	ands	r3, r2
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d21e      	bcs.n	8003814 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b24      	ldr	r3, [pc, #144]	; (8003868 <HAL_RCC_ClockConfig+0x1f0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2207      	movs	r2, #7
 80037dc:	4393      	bics	r3, r2
 80037de:	0019      	movs	r1, r3
 80037e0:	4b21      	ldr	r3, [pc, #132]	; (8003868 <HAL_RCC_ClockConfig+0x1f0>)
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037e8:	f7fd fe78 	bl	80014dc <HAL_GetTick>
 80037ec:	0003      	movs	r3, r0
 80037ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037f0:	e009      	b.n	8003806 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f2:	f7fd fe73 	bl	80014dc <HAL_GetTick>
 80037f6:	0002      	movs	r2, r0
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	4a1b      	ldr	r2, [pc, #108]	; (800386c <HAL_RCC_ClockConfig+0x1f4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e02c      	b.n	8003860 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003806:	4b18      	ldr	r3, [pc, #96]	; (8003868 <HAL_RCC_ClockConfig+0x1f0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2207      	movs	r2, #7
 800380c:	4013      	ands	r3, r2
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d1ee      	bne.n	80037f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2204      	movs	r2, #4
 800381a:	4013      	ands	r3, r2
 800381c:	d009      	beq.n	8003832 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800381e:	4b14      	ldr	r3, [pc, #80]	; (8003870 <HAL_RCC_ClockConfig+0x1f8>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	4a15      	ldr	r2, [pc, #84]	; (8003878 <HAL_RCC_ClockConfig+0x200>)
 8003824:	4013      	ands	r3, r2
 8003826:	0019      	movs	r1, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	4b10      	ldr	r3, [pc, #64]	; (8003870 <HAL_RCC_ClockConfig+0x1f8>)
 800382e:	430a      	orrs	r2, r1
 8003830:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003832:	f000 f829 	bl	8003888 <HAL_RCC_GetSysClockFreq>
 8003836:	0001      	movs	r1, r0
 8003838:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <HAL_RCC_ClockConfig+0x1f8>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	0a1b      	lsrs	r3, r3, #8
 800383e:	220f      	movs	r2, #15
 8003840:	401a      	ands	r2, r3
 8003842:	4b0e      	ldr	r3, [pc, #56]	; (800387c <HAL_RCC_ClockConfig+0x204>)
 8003844:	0092      	lsls	r2, r2, #2
 8003846:	58d3      	ldr	r3, [r2, r3]
 8003848:	221f      	movs	r2, #31
 800384a:	4013      	ands	r3, r2
 800384c:	000a      	movs	r2, r1
 800384e:	40da      	lsrs	r2, r3
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <HAL_RCC_ClockConfig+0x208>)
 8003852:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003854:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <HAL_RCC_ClockConfig+0x20c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	0018      	movs	r0, r3
 800385a:	f7fd fde3 	bl	8001424 <HAL_InitTick>
 800385e:	0003      	movs	r3, r0
}
 8003860:	0018      	movs	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	b004      	add	sp, #16
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40022000 	.word	0x40022000
 800386c:	00001388 	.word	0x00001388
 8003870:	40021000 	.word	0x40021000
 8003874:	fffff0ff 	.word	0xfffff0ff
 8003878:	ffff8fff 	.word	0xffff8fff
 800387c:	080069c4 	.word	0x080069c4
 8003880:	20000030 	.word	0x20000030
 8003884:	20000034 	.word	0x20000034

08003888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800388e:	4b3c      	ldr	r3, [pc, #240]	; (8003980 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2238      	movs	r2, #56	; 0x38
 8003894:	4013      	ands	r3, r2
 8003896:	d10f      	bne.n	80038b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003898:	4b39      	ldr	r3, [pc, #228]	; (8003980 <HAL_RCC_GetSysClockFreq+0xf8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	0adb      	lsrs	r3, r3, #11
 800389e:	2207      	movs	r2, #7
 80038a0:	4013      	ands	r3, r2
 80038a2:	2201      	movs	r2, #1
 80038a4:	409a      	lsls	r2, r3
 80038a6:	0013      	movs	r3, r2
 80038a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80038aa:	6839      	ldr	r1, [r7, #0]
 80038ac:	4835      	ldr	r0, [pc, #212]	; (8003984 <HAL_RCC_GetSysClockFreq+0xfc>)
 80038ae:	f7fc fc33 	bl	8000118 <__udivsi3>
 80038b2:	0003      	movs	r3, r0
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	e05d      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038b8:	4b31      	ldr	r3, [pc, #196]	; (8003980 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2238      	movs	r2, #56	; 0x38
 80038be:	4013      	ands	r3, r2
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d102      	bne.n	80038ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038c4:	4b30      	ldr	r3, [pc, #192]	; (8003988 <HAL_RCC_GetSysClockFreq+0x100>)
 80038c6:	613b      	str	r3, [r7, #16]
 80038c8:	e054      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038ca:	4b2d      	ldr	r3, [pc, #180]	; (8003980 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2238      	movs	r2, #56	; 0x38
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b10      	cmp	r3, #16
 80038d4:	d138      	bne.n	8003948 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80038d6:	4b2a      	ldr	r3, [pc, #168]	; (8003980 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	2203      	movs	r2, #3
 80038dc:	4013      	ands	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038e0:	4b27      	ldr	r3, [pc, #156]	; (8003980 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	2207      	movs	r2, #7
 80038e8:	4013      	ands	r3, r2
 80038ea:	3301      	adds	r3, #1
 80038ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d10d      	bne.n	8003910 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	4824      	ldr	r0, [pc, #144]	; (8003988 <HAL_RCC_GetSysClockFreq+0x100>)
 80038f8:	f7fc fc0e 	bl	8000118 <__udivsi3>
 80038fc:	0003      	movs	r3, r0
 80038fe:	0019      	movs	r1, r3
 8003900:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	0a1b      	lsrs	r3, r3, #8
 8003906:	227f      	movs	r2, #127	; 0x7f
 8003908:	4013      	ands	r3, r2
 800390a:	434b      	muls	r3, r1
 800390c:	617b      	str	r3, [r7, #20]
        break;
 800390e:	e00d      	b.n	800392c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003910:	68b9      	ldr	r1, [r7, #8]
 8003912:	481c      	ldr	r0, [pc, #112]	; (8003984 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003914:	f7fc fc00 	bl	8000118 <__udivsi3>
 8003918:	0003      	movs	r3, r0
 800391a:	0019      	movs	r1, r3
 800391c:	4b18      	ldr	r3, [pc, #96]	; (8003980 <HAL_RCC_GetSysClockFreq+0xf8>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	0a1b      	lsrs	r3, r3, #8
 8003922:	227f      	movs	r2, #127	; 0x7f
 8003924:	4013      	ands	r3, r2
 8003926:	434b      	muls	r3, r1
 8003928:	617b      	str	r3, [r7, #20]
        break;
 800392a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800392c:	4b14      	ldr	r3, [pc, #80]	; (8003980 <HAL_RCC_GetSysClockFreq+0xf8>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	0f5b      	lsrs	r3, r3, #29
 8003932:	2207      	movs	r2, #7
 8003934:	4013      	ands	r3, r2
 8003936:	3301      	adds	r3, #1
 8003938:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	6978      	ldr	r0, [r7, #20]
 800393e:	f7fc fbeb 	bl	8000118 <__udivsi3>
 8003942:	0003      	movs	r3, r0
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	e015      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003948:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <HAL_RCC_GetSysClockFreq+0xf8>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2238      	movs	r2, #56	; 0x38
 800394e:	4013      	ands	r3, r2
 8003950:	2b20      	cmp	r3, #32
 8003952:	d103      	bne.n	800395c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003954:	2380      	movs	r3, #128	; 0x80
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	e00b      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800395c:	4b08      	ldr	r3, [pc, #32]	; (8003980 <HAL_RCC_GetSysClockFreq+0xf8>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2238      	movs	r2, #56	; 0x38
 8003962:	4013      	ands	r3, r2
 8003964:	2b18      	cmp	r3, #24
 8003966:	d103      	bne.n	8003970 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003968:	23fa      	movs	r3, #250	; 0xfa
 800396a:	01db      	lsls	r3, r3, #7
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	e001      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003974:	693b      	ldr	r3, [r7, #16]
}
 8003976:	0018      	movs	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	b006      	add	sp, #24
 800397c:	bd80      	pop	{r7, pc}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	40021000 	.word	0x40021000
 8003984:	00f42400 	.word	0x00f42400
 8003988:	007a1200 	.word	0x007a1200

0800398c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003990:	4b02      	ldr	r3, [pc, #8]	; (800399c <HAL_RCC_GetHCLKFreq+0x10>)
 8003992:	681b      	ldr	r3, [r3, #0]
}
 8003994:	0018      	movs	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	20000030 	.word	0x20000030

080039a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a0:	b5b0      	push	{r4, r5, r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80039a4:	f7ff fff2 	bl	800398c <HAL_RCC_GetHCLKFreq>
 80039a8:	0004      	movs	r4, r0
 80039aa:	f7ff fb3f 	bl	800302c <LL_RCC_GetAPB1Prescaler>
 80039ae:	0003      	movs	r3, r0
 80039b0:	0b1a      	lsrs	r2, r3, #12
 80039b2:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039b4:	0092      	lsls	r2, r2, #2
 80039b6:	58d3      	ldr	r3, [r2, r3]
 80039b8:	221f      	movs	r2, #31
 80039ba:	4013      	ands	r3, r2
 80039bc:	40dc      	lsrs	r4, r3
 80039be:	0023      	movs	r3, r4
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bdb0      	pop	{r4, r5, r7, pc}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	08006a04 	.word	0x08006a04

080039cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80039d4:	2313      	movs	r3, #19
 80039d6:	18fb      	adds	r3, r7, r3
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039dc:	2312      	movs	r3, #18
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	2380      	movs	r3, #128	; 0x80
 80039ea:	029b      	lsls	r3, r3, #10
 80039ec:	4013      	ands	r3, r2
 80039ee:	d100      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80039f0:	e0a3      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f2:	2011      	movs	r0, #17
 80039f4:	183b      	adds	r3, r7, r0
 80039f6:	2200      	movs	r2, #0
 80039f8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fa:	4ba5      	ldr	r3, [pc, #660]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	055b      	lsls	r3, r3, #21
 8003a02:	4013      	ands	r3, r2
 8003a04:	d110      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a06:	4ba2      	ldr	r3, [pc, #648]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a0a:	4ba1      	ldr	r3, [pc, #644]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a0c:	2180      	movs	r1, #128	; 0x80
 8003a0e:	0549      	lsls	r1, r1, #21
 8003a10:	430a      	orrs	r2, r1
 8003a12:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a14:	4b9e      	ldr	r3, [pc, #632]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a18:	2380      	movs	r3, #128	; 0x80
 8003a1a:	055b      	lsls	r3, r3, #21
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a22:	183b      	adds	r3, r7, r0
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a28:	4b9a      	ldr	r3, [pc, #616]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	4b99      	ldr	r3, [pc, #612]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003a2e:	2180      	movs	r1, #128	; 0x80
 8003a30:	0049      	lsls	r1, r1, #1
 8003a32:	430a      	orrs	r2, r1
 8003a34:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a36:	f7fd fd51 	bl	80014dc <HAL_GetTick>
 8003a3a:	0003      	movs	r3, r0
 8003a3c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a3e:	e00b      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a40:	f7fd fd4c 	bl	80014dc <HAL_GetTick>
 8003a44:	0002      	movs	r2, r0
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d904      	bls.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003a4e:	2313      	movs	r3, #19
 8003a50:	18fb      	adds	r3, r7, r3
 8003a52:	2203      	movs	r2, #3
 8003a54:	701a      	strb	r2, [r3, #0]
        break;
 8003a56:	e005      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a58:	4b8e      	ldr	r3, [pc, #568]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	4013      	ands	r3, r2
 8003a62:	d0ed      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003a64:	2313      	movs	r3, #19
 8003a66:	18fb      	adds	r3, r7, r3
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d154      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a6e:	4b88      	ldr	r3, [pc, #544]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a72:	23c0      	movs	r3, #192	; 0xc0
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4013      	ands	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d019      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d014      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a8a:	4b81      	ldr	r3, [pc, #516]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8e:	4a82      	ldr	r2, [pc, #520]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a94:	4b7e      	ldr	r3, [pc, #504]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a98:	4b7d      	ldr	r3, [pc, #500]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a9a:	2180      	movs	r1, #128	; 0x80
 8003a9c:	0249      	lsls	r1, r1, #9
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa2:	4b7b      	ldr	r3, [pc, #492]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003aa4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003aa6:	4b7a      	ldr	r3, [pc, #488]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003aa8:	497c      	ldr	r1, [pc, #496]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003aaa:	400a      	ands	r2, r1
 8003aac:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003aae:	4b78      	ldr	r3, [pc, #480]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d016      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fd fd0e 	bl	80014dc <HAL_GetTick>
 8003ac0:	0003      	movs	r3, r0
 8003ac2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac4:	e00c      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac6:	f7fd fd09 	bl	80014dc <HAL_GetTick>
 8003aca:	0002      	movs	r2, r0
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	4a73      	ldr	r2, [pc, #460]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d904      	bls.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003ad6:	2313      	movs	r3, #19
 8003ad8:	18fb      	adds	r3, r7, r3
 8003ada:	2203      	movs	r2, #3
 8003adc:	701a      	strb	r2, [r3, #0]
            break;
 8003ade:	e004      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae0:	4b6b      	ldr	r3, [pc, #428]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d0ed      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003aea:	2313      	movs	r3, #19
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003af4:	4b66      	ldr	r3, [pc, #408]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af8:	4a67      	ldr	r2, [pc, #412]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	0019      	movs	r1, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b02:	4b63      	ldr	r3, [pc, #396]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b04:	430a      	orrs	r2, r1
 8003b06:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b08:	e00c      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b0a:	2312      	movs	r3, #18
 8003b0c:	18fb      	adds	r3, r7, r3
 8003b0e:	2213      	movs	r2, #19
 8003b10:	18ba      	adds	r2, r7, r2
 8003b12:	7812      	ldrb	r2, [r2, #0]
 8003b14:	701a      	strb	r2, [r3, #0]
 8003b16:	e005      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b18:	2312      	movs	r3, #18
 8003b1a:	18fb      	adds	r3, r7, r3
 8003b1c:	2213      	movs	r2, #19
 8003b1e:	18ba      	adds	r2, r7, r2
 8003b20:	7812      	ldrb	r2, [r2, #0]
 8003b22:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b24:	2311      	movs	r3, #17
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d105      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2e:	4b58      	ldr	r3, [pc, #352]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b32:	4b57      	ldr	r3, [pc, #348]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b34:	495b      	ldr	r1, [pc, #364]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003b36:	400a      	ands	r2, r1
 8003b38:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	4013      	ands	r3, r2
 8003b42:	d009      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b44:	4b52      	ldr	r3, [pc, #328]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b48:	2203      	movs	r2, #3
 8003b4a:	4393      	bics	r3, r2
 8003b4c:	0019      	movs	r1, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	4b4f      	ldr	r3, [pc, #316]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b54:	430a      	orrs	r2, r1
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d009      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b62:	4b4b      	ldr	r3, [pc, #300]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	4a50      	ldr	r2, [pc, #320]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	0019      	movs	r1, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	4b47      	ldr	r3, [pc, #284]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b72:	430a      	orrs	r2, r1
 8003b74:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	2380      	movs	r3, #128	; 0x80
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d009      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b82:	4b43      	ldr	r3, [pc, #268]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b86:	4a49      	ldr	r2, [pc, #292]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	0019      	movs	r1, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	695a      	ldr	r2, [r3, #20]
 8003b90:	4b3f      	ldr	r3, [pc, #252]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b92:	430a      	orrs	r2, r1
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	2380      	movs	r3, #128	; 0x80
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d009      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ba2:	4b3b      	ldr	r3, [pc, #236]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba6:	4a42      	ldr	r2, [pc, #264]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	0019      	movs	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699a      	ldr	r2, [r3, #24]
 8003bb0:	4b37      	ldr	r3, [pc, #220]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d009      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bc0:	4b33      	ldr	r3, [pc, #204]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc4:	4a3b      	ldr	r2, [pc, #236]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	0019      	movs	r1, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	4b30      	ldr	r3, [pc, #192]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	2380      	movs	r3, #128	; 0x80
 8003bda:	01db      	lsls	r3, r3, #7
 8003bdc:	4013      	ands	r3, r2
 8003bde:	d015      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003be0:	4b2b      	ldr	r3, [pc, #172]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	0899      	lsrs	r1, r3, #2
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	4b28      	ldr	r3, [pc, #160]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69da      	ldr	r2, [r3, #28]
 8003bf6:	2380      	movs	r3, #128	; 0x80
 8003bf8:	05db      	lsls	r3, r3, #23
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d106      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003bfe:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	4b23      	ldr	r3, [pc, #140]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c04:	2180      	movs	r1, #128	; 0x80
 8003c06:	0249      	lsls	r1, r1, #9
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	039b      	lsls	r3, r3, #14
 8003c14:	4013      	ands	r3, r2
 8003c16:	d016      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c18:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1c:	4a26      	ldr	r2, [pc, #152]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	0019      	movs	r1, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1a      	ldr	r2, [r3, #32]
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1a      	ldr	r2, [r3, #32]
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	03db      	lsls	r3, r3, #15
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d106      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003c38:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c3e:	2180      	movs	r1, #128	; 0x80
 8003c40:	0449      	lsls	r1, r1, #17
 8003c42:	430a      	orrs	r2, r1
 8003c44:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	2380      	movs	r3, #128	; 0x80
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d016      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003c52:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c56:	4a19      	ldr	r2, [pc, #100]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c62:	430a      	orrs	r2, r1
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	01db      	lsls	r3, r3, #7
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d106      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c72:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c78:	2180      	movs	r1, #128	; 0x80
 8003c7a:	0249      	lsls	r1, r1, #9
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003c80:	2312      	movs	r3, #18
 8003c82:	18fb      	adds	r3, r7, r3
 8003c84:	781b      	ldrb	r3, [r3, #0]
}
 8003c86:	0018      	movs	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b006      	add	sp, #24
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40007000 	.word	0x40007000
 8003c98:	fffffcff 	.word	0xfffffcff
 8003c9c:	fffeffff 	.word	0xfffeffff
 8003ca0:	00001388 	.word	0x00001388
 8003ca4:	efffffff 	.word	0xefffffff
 8003ca8:	fffff3ff 	.word	0xfffff3ff
 8003cac:	fff3ffff 	.word	0xfff3ffff
 8003cb0:	ffcfffff 	.word	0xffcfffff
 8003cb4:	ffffcfff 	.word	0xffffcfff
 8003cb8:	ffbfffff 	.word	0xffbfffff
 8003cbc:	ffff3fff 	.word	0xffff3fff

08003cc0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003cc0:	b5b0      	push	{r4, r5, r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003cc8:	230f      	movs	r3, #15
 8003cca:	18fb      	adds	r3, r7, r3
 8003ccc:	2201      	movs	r2, #1
 8003cce:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d100      	bne.n	8003cd8 <HAL_RTC_Init+0x18>
 8003cd6:	e08c      	b.n	8003df2 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2229      	movs	r2, #41	; 0x29
 8003cdc:	5c9b      	ldrb	r3, [r3, r2]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10b      	bne.n	8003cfc <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2228      	movs	r2, #40	; 0x28
 8003ce8:	2100      	movs	r1, #0
 8003cea:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2288      	movs	r2, #136	; 0x88
 8003cf0:	0212      	lsls	r2, r2, #8
 8003cf2:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f7fd f9b2 	bl	8001060 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2229      	movs	r2, #41	; 0x29
 8003d00:	2102      	movs	r1, #2
 8003d02:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	2210      	movs	r2, #16
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b10      	cmp	r3, #16
 8003d10:	d062      	beq.n	8003dd8 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	22ca      	movs	r2, #202	; 0xca
 8003d18:	625a      	str	r2, [r3, #36]	; 0x24
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2253      	movs	r2, #83	; 0x53
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003d22:	250f      	movs	r5, #15
 8003d24:	197c      	adds	r4, r7, r5
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f000 fe80 	bl	8004a2e <RTC_EnterInitMode>
 8003d2e:	0003      	movs	r3, r0
 8003d30:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8003d32:	0028      	movs	r0, r5
 8003d34:	183b      	adds	r3, r7, r0
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d12c      	bne.n	8003d96 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	492e      	ldr	r1, [pc, #184]	; (8003e00 <HAL_RTC_Init+0x140>)
 8003d48:	400a      	ands	r2, r1
 8003d4a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6999      	ldr	r1, [r3, #24]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6912      	ldr	r2, [r2, #16]
 8003d72:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6919      	ldr	r1, [r3, #16]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	041a      	lsls	r2, r3, #16
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003d88:	183c      	adds	r4, r7, r0
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f000 fe91 	bl	8004ab4 <RTC_ExitInitMode>
 8003d92:	0003      	movs	r3, r0
 8003d94:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8003d96:	230f      	movs	r3, #15
 8003d98:	18fb      	adds	r3, r7, r3
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d116      	bne.n	8003dce <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	00d2      	lsls	r2, r2, #3
 8003dac:	08d2      	lsrs	r2, r2, #3
 8003dae:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6999      	ldr	r1, [r3, #24]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	22ff      	movs	r2, #255	; 0xff
 8003dd4:	625a      	str	r2, [r3, #36]	; 0x24
 8003dd6:	e003      	b.n	8003de0 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003dd8:	230f      	movs	r3, #15
 8003dda:	18fb      	adds	r3, r7, r3
 8003ddc:	2200      	movs	r2, #0
 8003dde:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8003de0:	230f      	movs	r3, #15
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d103      	bne.n	8003df2 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2229      	movs	r2, #41	; 0x29
 8003dee:	2101      	movs	r1, #1
 8003df0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8003df2:	230f      	movs	r3, #15
 8003df4:	18fb      	adds	r3, r7, r3
 8003df6:	781b      	ldrb	r3, [r3, #0]
}
 8003df8:	0018      	movs	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b004      	add	sp, #16
 8003dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8003e00:	fb8fffbf 	.word	0xfb8fffbf

08003e04 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003e04:	b5b0      	push	{r4, r5, r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2228      	movs	r2, #40	; 0x28
 8003e14:	5c9b      	ldrb	r3, [r3, r2]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_RTC_SetTime+0x1a>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e092      	b.n	8003f44 <HAL_RTC_SetTime+0x140>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2228      	movs	r2, #40	; 0x28
 8003e22:	2101      	movs	r1, #1
 8003e24:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2229      	movs	r2, #41	; 0x29
 8003e2a:	2102      	movs	r1, #2
 8003e2c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	22ca      	movs	r2, #202	; 0xca
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2253      	movs	r2, #83	; 0x53
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003e3e:	2513      	movs	r5, #19
 8003e40:	197c      	adds	r4, r7, r5
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	0018      	movs	r0, r3
 8003e46:	f000 fdf2 	bl	8004a2e <RTC_EnterInitMode>
 8003e4a:	0003      	movs	r3, r0
 8003e4c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003e4e:	197b      	adds	r3, r7, r5
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d162      	bne.n	8003f1c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d125      	bne.n	8003ea8 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2240      	movs	r2, #64	; 0x40
 8003e64:	4013      	ands	r3, r2
 8003e66:	d102      	bne.n	8003e6e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	0018      	movs	r0, r3
 8003e74:	f000 fe62 	bl	8004b3c <RTC_ByteToBcd2>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	785b      	ldrb	r3, [r3, #1]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f000 fe5b 	bl	8004b3c <RTC_ByteToBcd2>
 8003e86:	0003      	movs	r3, r0
 8003e88:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003e8a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	789b      	ldrb	r3, [r3, #2]
 8003e90:	0018      	movs	r0, r3
 8003e92:	f000 fe53 	bl	8004b3c <RTC_ByteToBcd2>
 8003e96:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003e98:	0022      	movs	r2, r4
 8003e9a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	78db      	ldrb	r3, [r3, #3]
 8003ea0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	e017      	b.n	8003ed8 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	2240      	movs	r2, #64	; 0x40
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	d102      	bne.n	8003eba <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	785b      	ldrb	r3, [r3, #1]
 8003ec4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003ec6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003ecc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	78db      	ldrb	r3, [r3, #3]
 8003ed2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	491b      	ldr	r1, [pc, #108]	; (8003f4c <HAL_RTC_SetTime+0x148>)
 8003ee0:	400a      	ands	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699a      	ldr	r2, [r3, #24]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4918      	ldr	r1, [pc, #96]	; (8003f50 <HAL_RTC_SetTime+0x14c>)
 8003ef0:	400a      	ands	r2, r1
 8003ef2:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6999      	ldr	r1, [r3, #24]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f0c:	2313      	movs	r3, #19
 8003f0e:	18fc      	adds	r4, r7, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	0018      	movs	r0, r3
 8003f14:	f000 fdce 	bl	8004ab4 <RTC_ExitInitMode>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	22ff      	movs	r2, #255	; 0xff
 8003f22:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8003f24:	2313      	movs	r3, #19
 8003f26:	18fb      	adds	r3, r7, r3
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d103      	bne.n	8003f36 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2229      	movs	r2, #41	; 0x29
 8003f32:	2101      	movs	r1, #1
 8003f34:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2228      	movs	r2, #40	; 0x28
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	5499      	strb	r1, [r3, r2]

  return status;
 8003f3e:	2313      	movs	r3, #19
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	781b      	ldrb	r3, [r3, #0]
}
 8003f44:	0018      	movs	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	b006      	add	sp, #24
 8003f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f4c:	007f7f7f 	.word	0x007f7f7f
 8003f50:	fffbffff 	.word	0xfffbffff

08003f54 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689a      	ldr	r2, [r3, #8]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	045b      	lsls	r3, r3, #17
 8003f72:	0c5a      	lsrs	r2, r3, #17
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a22      	ldr	r2, [pc, #136]	; (8004008 <HAL_RTC_GetTime+0xb4>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	0c1b      	lsrs	r3, r3, #16
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	223f      	movs	r2, #63	; 0x3f
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	0a1b      	lsrs	r3, r3, #8
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	227f      	movs	r2, #127	; 0x7f
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	227f      	movs	r2, #127	; 0x7f
 8003faa:	4013      	ands	r3, r2
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	0d9b      	lsrs	r3, r3, #22
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2201      	movs	r2, #1
 8003fba:	4013      	ands	r3, r2
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d11a      	bne.n	8003ffe <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f000 fddd 	bl	8004b8c <RTC_Bcd2ToByte>
 8003fd2:	0003      	movs	r3, r0
 8003fd4:	001a      	movs	r2, r3
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	785b      	ldrb	r3, [r3, #1]
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f000 fdd4 	bl	8004b8c <RTC_Bcd2ToByte>
 8003fe4:	0003      	movs	r3, r0
 8003fe6:	001a      	movs	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	789b      	ldrb	r3, [r3, #2]
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f000 fdcb 	bl	8004b8c <RTC_Bcd2ToByte>
 8003ff6:	0003      	movs	r3, r0
 8003ff8:	001a      	movs	r2, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	0018      	movs	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	b006      	add	sp, #24
 8004006:	bd80      	pop	{r7, pc}
 8004008:	007f7f7f 	.word	0x007f7f7f

0800400c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800400c:	b5b0      	push	{r4, r5, r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2228      	movs	r2, #40	; 0x28
 800401c:	5c9b      	ldrb	r3, [r3, r2]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_RTC_SetDate+0x1a>
 8004022:	2302      	movs	r3, #2
 8004024:	e07e      	b.n	8004124 <HAL_RTC_SetDate+0x118>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2228      	movs	r2, #40	; 0x28
 800402a:	2101      	movs	r1, #1
 800402c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2229      	movs	r2, #41	; 0x29
 8004032:	2102      	movs	r1, #2
 8004034:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10e      	bne.n	800405a <HAL_RTC_SetDate+0x4e>
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	785b      	ldrb	r3, [r3, #1]
 8004040:	001a      	movs	r2, r3
 8004042:	2310      	movs	r3, #16
 8004044:	4013      	ands	r3, r2
 8004046:	d008      	beq.n	800405a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	785b      	ldrb	r3, [r3, #1]
 800404c:	2210      	movs	r2, #16
 800404e:	4393      	bics	r3, r2
 8004050:	b2db      	uxtb	r3, r3
 8004052:	330a      	adds	r3, #10
 8004054:	b2da      	uxtb	r2, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d11c      	bne.n	800409a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	78db      	ldrb	r3, [r3, #3]
 8004064:	0018      	movs	r0, r3
 8004066:	f000 fd69 	bl	8004b3c <RTC_ByteToBcd2>
 800406a:	0003      	movs	r3, r0
 800406c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	785b      	ldrb	r3, [r3, #1]
 8004072:	0018      	movs	r0, r3
 8004074:	f000 fd62 	bl	8004b3c <RTC_ByteToBcd2>
 8004078:	0003      	movs	r3, r0
 800407a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800407c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	789b      	ldrb	r3, [r3, #2]
 8004082:	0018      	movs	r0, r3
 8004084:	f000 fd5a 	bl	8004b3c <RTC_ByteToBcd2>
 8004088:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800408a:	0022      	movs	r2, r4
 800408c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	e00e      	b.n	80040b8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	78db      	ldrb	r3, [r3, #3]
 800409e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	785b      	ldrb	r3, [r3, #1]
 80040a4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80040a6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80040ac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	22ca      	movs	r2, #202	; 0xca
 80040be:	625a      	str	r2, [r3, #36]	; 0x24
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2253      	movs	r2, #83	; 0x53
 80040c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80040c8:	2513      	movs	r5, #19
 80040ca:	197c      	adds	r4, r7, r5
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	0018      	movs	r0, r3
 80040d0:	f000 fcad 	bl	8004a2e <RTC_EnterInitMode>
 80040d4:	0003      	movs	r3, r0
 80040d6:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80040d8:	0028      	movs	r0, r5
 80040da:	183b      	adds	r3, r7, r0
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10c      	bne.n	80040fc <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4910      	ldr	r1, [pc, #64]	; (800412c <HAL_RTC_SetDate+0x120>)
 80040ea:	400a      	ands	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80040ee:	183c      	adds	r4, r7, r0
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	0018      	movs	r0, r3
 80040f4:	f000 fcde 	bl	8004ab4 <RTC_ExitInitMode>
 80040f8:	0003      	movs	r3, r0
 80040fa:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	22ff      	movs	r2, #255	; 0xff
 8004102:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004104:	2313      	movs	r3, #19
 8004106:	18fb      	adds	r3, r7, r3
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d103      	bne.n	8004116 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2229      	movs	r2, #41	; 0x29
 8004112:	2101      	movs	r1, #1
 8004114:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2228      	movs	r2, #40	; 0x28
 800411a:	2100      	movs	r1, #0
 800411c:	5499      	strb	r1, [r3, r2]

  return status;
 800411e:	2313      	movs	r3, #19
 8004120:	18fb      	adds	r3, r7, r3
 8004122:	781b      	ldrb	r3, [r3, #0]
}
 8004124:	0018      	movs	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	b006      	add	sp, #24
 800412a:	bdb0      	pop	{r4, r5, r7, pc}
 800412c:	00ffff3f 	.word	0x00ffff3f

08004130 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	4a21      	ldr	r2, [pc, #132]	; (80041c8 <HAL_RTC_GetDate+0x98>)
 8004144:	4013      	ands	r3, r2
 8004146:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	0c1b      	lsrs	r3, r3, #16
 800414c:	b2da      	uxtb	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	0a1b      	lsrs	r3, r3, #8
 8004156:	b2db      	uxtb	r3, r3
 8004158:	221f      	movs	r2, #31
 800415a:	4013      	ands	r3, r2
 800415c:	b2da      	uxtb	r2, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	223f      	movs	r2, #63	; 0x3f
 8004168:	4013      	ands	r3, r2
 800416a:	b2da      	uxtb	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	0b5b      	lsrs	r3, r3, #13
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2207      	movs	r2, #7
 8004178:	4013      	ands	r3, r2
 800417a:	b2da      	uxtb	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d11a      	bne.n	80041bc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	78db      	ldrb	r3, [r3, #3]
 800418a:	0018      	movs	r0, r3
 800418c:	f000 fcfe 	bl	8004b8c <RTC_Bcd2ToByte>
 8004190:	0003      	movs	r3, r0
 8004192:	001a      	movs	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	0018      	movs	r0, r3
 800419e:	f000 fcf5 	bl	8004b8c <RTC_Bcd2ToByte>
 80041a2:	0003      	movs	r3, r0
 80041a4:	001a      	movs	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	789b      	ldrb	r3, [r3, #2]
 80041ae:	0018      	movs	r0, r3
 80041b0:	f000 fcec 	bl	8004b8c <RTC_Bcd2ToByte>
 80041b4:	0003      	movs	r3, r0
 80041b6:	001a      	movs	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	0018      	movs	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b006      	add	sp, #24
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	00ffff3f 	.word	0x00ffff3f

080041cc <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80041cc:	b590      	push	{r4, r7, lr}
 80041ce:	b089      	sub	sp, #36	; 0x24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2228      	movs	r2, #40	; 0x28
 80041dc:	5c9b      	ldrb	r3, [r3, r2]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_RTC_SetAlarm+0x1a>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e10c      	b.n	8004400 <HAL_RTC_SetAlarm+0x234>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2228      	movs	r2, #40	; 0x28
 80041ea:	2101      	movs	r1, #1
 80041ec:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2229      	movs	r2, #41	; 0x29
 80041f2:	2102      	movs	r1, #2
 80041f4:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d136      	bne.n	800426a <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2240      	movs	r2, #64	; 0x40
 8004204:	4013      	ands	r3, r2
 8004206:	d102      	bne.n	800420e <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2200      	movs	r2, #0
 800420c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	0018      	movs	r0, r3
 8004214:	f000 fc92 	bl	8004b3c <RTC_ByteToBcd2>
 8004218:	0003      	movs	r3, r0
 800421a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	785b      	ldrb	r3, [r3, #1]
 8004220:	0018      	movs	r0, r3
 8004222:	f000 fc8b 	bl	8004b3c <RTC_ByteToBcd2>
 8004226:	0003      	movs	r3, r0
 8004228:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800422a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	789b      	ldrb	r3, [r3, #2]
 8004230:	0018      	movs	r0, r3
 8004232:	f000 fc83 	bl	8004b3c <RTC_ByteToBcd2>
 8004236:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004238:	0022      	movs	r2, r4
 800423a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	78db      	ldrb	r3, [r3, #3]
 8004240:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004242:	431a      	orrs	r2, r3
 8004244:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2220      	movs	r2, #32
 800424a:	5c9b      	ldrb	r3, [r3, r2]
 800424c:	0018      	movs	r0, r3
 800424e:	f000 fc75 	bl	8004b3c <RTC_ByteToBcd2>
 8004252:	0003      	movs	r3, r0
 8004254:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004256:	0022      	movs	r2, r4
 8004258:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800425e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004264:	4313      	orrs	r3, r2
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	e022      	b.n	80042b0 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	2240      	movs	r2, #64	; 0x40
 8004272:	4013      	ands	r3, r2
 8004274:	d102      	bne.n	800427c <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2200      	movs	r2, #0
 800427a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	785b      	ldrb	r3, [r3, #1]
 8004286:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004288:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800428e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	78db      	ldrb	r3, [r3, #3]
 8004294:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004296:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2120      	movs	r1, #32
 800429c:	5c5b      	ldrb	r3, [r3, r1]
 800429e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80042a0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80042a6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80042ac:	4313      	orrs	r3, r2
 80042ae:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	22ca      	movs	r2, #202	; 0xca
 80042c2:	625a      	str	r2, [r3, #36]	; 0x24
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2253      	movs	r2, #83	; 0x53
 80042ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042d0:	2380      	movs	r3, #128	; 0x80
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d143      	bne.n	8004360 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4949      	ldr	r1, [pc, #292]	; (8004408 <HAL_RTC_SetAlarm+0x23c>)
 80042e4:	400a      	ands	r2, r1
 80042e6:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4946      	ldr	r1, [pc, #280]	; (800440c <HAL_RTC_SetAlarm+0x240>)
 80042f4:	400a      	ands	r2, r1
 80042f6:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 80042f8:	f7fd f8f0 	bl	80014dc <HAL_GetTick>
 80042fc:	0003      	movs	r3, r0
 80042fe:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004300:	e016      	b.n	8004330 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004302:	f7fd f8eb 	bl	80014dc <HAL_GetTick>
 8004306:	0002      	movs	r2, r0
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	1ad2      	subs	r2, r2, r3
 800430c:	23fa      	movs	r3, #250	; 0xfa
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	429a      	cmp	r2, r3
 8004312:	d90d      	bls.n	8004330 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	22ff      	movs	r2, #255	; 0xff
 800431a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2229      	movs	r2, #41	; 0x29
 8004320:	2103      	movs	r1, #3
 8004322:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2228      	movs	r2, #40	; 0x28
 8004328:	2100      	movs	r1, #0
 800432a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e067      	b.n	8004400 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	4013      	ands	r3, r2
 800433a:	d0e2      	beq.n	8004302 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	69fa      	ldr	r2, [r7, #28]
 8004342:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699a      	ldr	r2, [r3, #24]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2180      	movs	r1, #128	; 0x80
 8004358:	0049      	lsls	r1, r1, #1
 800435a:	430a      	orrs	r2, r1
 800435c:	619a      	str	r2, [r3, #24]
 800435e:	e042      	b.n	80043e6 <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4929      	ldr	r1, [pc, #164]	; (8004410 <HAL_RTC_SetAlarm+0x244>)
 800436c:	400a      	ands	r2, r1
 800436e:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699a      	ldr	r2, [r3, #24]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4926      	ldr	r1, [pc, #152]	; (8004414 <HAL_RTC_SetAlarm+0x248>)
 800437c:	400a      	ands	r2, r1
 800437e:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8004380:	f7fd f8ac 	bl	80014dc <HAL_GetTick>
 8004384:	0003      	movs	r3, r0
 8004386:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004388:	e016      	b.n	80043b8 <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800438a:	f7fd f8a7 	bl	80014dc <HAL_GetTick>
 800438e:	0002      	movs	r2, r0
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	1ad2      	subs	r2, r2, r3
 8004394:	23fa      	movs	r3, #250	; 0xfa
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	429a      	cmp	r2, r3
 800439a:	d90d      	bls.n	80043b8 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	22ff      	movs	r2, #255	; 0xff
 80043a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2229      	movs	r2, #41	; 0x29
 80043a8:	2103      	movs	r1, #3
 80043aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2228      	movs	r2, #40	; 0x28
 80043b0:	2100      	movs	r1, #0
 80043b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e023      	b.n	8004400 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2202      	movs	r2, #2
 80043c0:	4013      	ands	r3, r2
 80043c2:	d0e2      	beq.n	800438a <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69fa      	ldr	r2, [r7, #28]
 80043ca:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2180      	movs	r1, #128	; 0x80
 80043e0:	0089      	lsls	r1, r1, #2
 80043e2:	430a      	orrs	r2, r1
 80043e4:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	22ff      	movs	r2, #255	; 0xff
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2229      	movs	r2, #41	; 0x29
 80043f2:	2101      	movs	r1, #1
 80043f4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2228      	movs	r2, #40	; 0x28
 80043fa:	2100      	movs	r1, #0
 80043fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	0018      	movs	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	b009      	add	sp, #36	; 0x24
 8004406:	bd90      	pop	{r4, r7, pc}
 8004408:	fffffeff 	.word	0xfffffeff
 800440c:	ffffefff 	.word	0xffffefff
 8004410:	fffffdff 	.word	0xfffffdff
 8004414:	ffffdfff 	.word	0xffffdfff

08004418 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004418:	b590      	push	{r4, r7, lr}
 800441a:	b089      	sub	sp, #36	; 0x24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2228      	movs	r2, #40	; 0x28
 8004428:	5c9b      	ldrb	r3, [r3, r2]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_RTC_SetAlarm_IT+0x1a>
 800442e:	2302      	movs	r3, #2
 8004430:	e127      	b.n	8004682 <HAL_RTC_SetAlarm_IT+0x26a>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2228      	movs	r2, #40	; 0x28
 8004436:	2101      	movs	r1, #1
 8004438:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2229      	movs	r2, #41	; 0x29
 800443e:	2102      	movs	r1, #2
 8004440:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d136      	bne.n	80044b6 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	2240      	movs	r2, #64	; 0x40
 8004450:	4013      	ands	r3, r2
 8004452:	d102      	bne.n	800445a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2200      	movs	r2, #0
 8004458:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	0018      	movs	r0, r3
 8004460:	f000 fb6c 	bl	8004b3c <RTC_ByteToBcd2>
 8004464:	0003      	movs	r3, r0
 8004466:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	785b      	ldrb	r3, [r3, #1]
 800446c:	0018      	movs	r0, r3
 800446e:	f000 fb65 	bl	8004b3c <RTC_ByteToBcd2>
 8004472:	0003      	movs	r3, r0
 8004474:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004476:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	789b      	ldrb	r3, [r3, #2]
 800447c:	0018      	movs	r0, r3
 800447e:	f000 fb5d 	bl	8004b3c <RTC_ByteToBcd2>
 8004482:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004484:	0022      	movs	r2, r4
 8004486:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	78db      	ldrb	r3, [r3, #3]
 800448c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800448e:	431a      	orrs	r2, r3
 8004490:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2220      	movs	r2, #32
 8004496:	5c9b      	ldrb	r3, [r3, r2]
 8004498:	0018      	movs	r0, r3
 800449a:	f000 fb4f 	bl	8004b3c <RTC_ByteToBcd2>
 800449e:	0003      	movs	r3, r0
 80044a0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80044a2:	0022      	movs	r2, r4
 80044a4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80044aa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61fb      	str	r3, [r7, #28]
 80044b4:	e022      	b.n	80044fc <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	2240      	movs	r2, #64	; 0x40
 80044be:	4013      	ands	r3, r2
 80044c0:	d102      	bne.n	80044c8 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2200      	movs	r2, #0
 80044c6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	785b      	ldrb	r3, [r3, #1]
 80044d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80044d4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80044da:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	78db      	ldrb	r3, [r3, #3]
 80044e0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80044e2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2120      	movs	r1, #32
 80044e8:	5c5b      	ldrb	r3, [r3, r1]
 80044ea:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80044ec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80044f2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	4313      	orrs	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	22ca      	movs	r2, #202	; 0xca
 800450e:	625a      	str	r2, [r3, #36]	; 0x24
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2253      	movs	r2, #83	; 0x53
 8004516:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800451c:	2380      	movs	r3, #128	; 0x80
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	429a      	cmp	r2, r3
 8004522:	d14c      	bne.n	80045be <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4957      	ldr	r1, [pc, #348]	; (800468c <HAL_RTC_SetAlarm_IT+0x274>)
 8004530:	400a      	ands	r2, r1
 8004532:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2101      	movs	r1, #1
 8004540:	430a      	orrs	r2, r1
 8004542:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8004544:	f7fc ffca 	bl	80014dc <HAL_GetTick>
 8004548:	0003      	movs	r3, r0
 800454a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800454c:	e016      	b.n	800457c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800454e:	f7fc ffc5 	bl	80014dc <HAL_GetTick>
 8004552:	0002      	movs	r2, r0
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	1ad2      	subs	r2, r2, r3
 8004558:	23fa      	movs	r3, #250	; 0xfa
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	429a      	cmp	r2, r3
 800455e:	d90d      	bls.n	800457c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	22ff      	movs	r2, #255	; 0xff
 8004566:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2229      	movs	r2, #41	; 0x29
 800456c:	2103      	movs	r1, #3
 800456e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2228      	movs	r2, #40	; 0x28
 8004574:	2100      	movs	r1, #0
 8004576:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e082      	b.n	8004682 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	2201      	movs	r2, #1
 8004584:	4013      	ands	r3, r2
 8004586:	d0e2      	beq.n	800454e <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2180      	movs	r1, #128	; 0x80
 80045a4:	0049      	lsls	r1, r1, #1
 80045a6:	430a      	orrs	r2, r1
 80045a8:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699a      	ldr	r2, [r3, #24]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2180      	movs	r1, #128	; 0x80
 80045b6:	0149      	lsls	r1, r1, #5
 80045b8:	430a      	orrs	r2, r1
 80045ba:	619a      	str	r2, [r3, #24]
 80045bc:	e04b      	b.n	8004656 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	699a      	ldr	r2, [r3, #24]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4931      	ldr	r1, [pc, #196]	; (8004690 <HAL_RTC_SetAlarm_IT+0x278>)
 80045ca:	400a      	ands	r2, r1
 80045cc:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2102      	movs	r1, #2
 80045da:	430a      	orrs	r2, r1
 80045dc:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80045de:	f7fc ff7d 	bl	80014dc <HAL_GetTick>
 80045e2:	0003      	movs	r3, r0
 80045e4:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80045e6:	e016      	b.n	8004616 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80045e8:	f7fc ff78 	bl	80014dc <HAL_GetTick>
 80045ec:	0002      	movs	r2, r0
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	1ad2      	subs	r2, r2, r3
 80045f2:	23fa      	movs	r3, #250	; 0xfa
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d90d      	bls.n	8004616 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	22ff      	movs	r2, #255	; 0xff
 8004600:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2229      	movs	r2, #41	; 0x29
 8004606:	2103      	movs	r1, #3
 8004608:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2228      	movs	r2, #40	; 0x28
 800460e:	2100      	movs	r1, #0
 8004610:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e035      	b.n	8004682 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	2202      	movs	r2, #2
 800461e:	4013      	ands	r3, r2
 8004620:	d0e2      	beq.n	80045e8 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699a      	ldr	r2, [r3, #24]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2180      	movs	r1, #128	; 0x80
 800463e:	0089      	lsls	r1, r1, #2
 8004640:	430a      	orrs	r2, r1
 8004642:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2180      	movs	r1, #128	; 0x80
 8004650:	0189      	lsls	r1, r1, #6
 8004652:	430a      	orrs	r2, r1
 8004654:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004656:	4a0f      	ldr	r2, [pc, #60]	; (8004694 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004658:	2380      	movs	r3, #128	; 0x80
 800465a:	58d3      	ldr	r3, [r2, r3]
 800465c:	490d      	ldr	r1, [pc, #52]	; (8004694 <HAL_RTC_SetAlarm_IT+0x27c>)
 800465e:	2280      	movs	r2, #128	; 0x80
 8004660:	0312      	lsls	r2, r2, #12
 8004662:	4313      	orrs	r3, r2
 8004664:	2280      	movs	r2, #128	; 0x80
 8004666:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	22ff      	movs	r2, #255	; 0xff
 800466e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2229      	movs	r2, #41	; 0x29
 8004674:	2101      	movs	r1, #1
 8004676:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2228      	movs	r2, #40	; 0x28
 800467c:	2100      	movs	r1, #0
 800467e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	0018      	movs	r0, r3
 8004684:	46bd      	mov	sp, r7
 8004686:	b009      	add	sp, #36	; 0x24
 8004688:	bd90      	pop	{r4, r7, pc}
 800468a:	46c0      	nop			; (mov r8, r8)
 800468c:	fffffeff 	.word	0xfffffeff
 8004690:	fffffdff 	.word	0xfffffdff
 8004694:	40021800 	.word	0x40021800

08004698 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2228      	movs	r2, #40	; 0x28
 80046a6:	5c9b      	ldrb	r3, [r3, r2]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_RTC_DeactivateAlarm+0x18>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e086      	b.n	80047be <HAL_RTC_DeactivateAlarm+0x126>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2228      	movs	r2, #40	; 0x28
 80046b4:	2101      	movs	r1, #1
 80046b6:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2229      	movs	r2, #41	; 0x29
 80046bc:	2102      	movs	r1, #2
 80046be:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	22ca      	movs	r2, #202	; 0xca
 80046c6:	625a      	str	r2, [r3, #36]	; 0x24
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2253      	movs	r2, #83	; 0x53
 80046ce:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d132      	bne.n	8004740 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	699a      	ldr	r2, [r3, #24]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4938      	ldr	r1, [pc, #224]	; (80047c8 <HAL_RTC_DeactivateAlarm+0x130>)
 80046e6:	400a      	ands	r2, r1
 80046e8:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699a      	ldr	r2, [r3, #24]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4935      	ldr	r1, [pc, #212]	; (80047cc <HAL_RTC_DeactivateAlarm+0x134>)
 80046f6:	400a      	ands	r2, r1
 80046f8:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 80046fa:	f7fc feef 	bl	80014dc <HAL_GetTick>
 80046fe:	0003      	movs	r3, r0
 8004700:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004702:	e016      	b.n	8004732 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if( (HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004704:	f7fc feea 	bl	80014dc <HAL_GetTick>
 8004708:	0002      	movs	r2, r0
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1ad2      	subs	r2, r2, r3
 800470e:	23fa      	movs	r3, #250	; 0xfa
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	429a      	cmp	r2, r3
 8004714:	d90d      	bls.n	8004732 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	22ff      	movs	r2, #255	; 0xff
 800471c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2229      	movs	r2, #41	; 0x29
 8004722:	2103      	movs	r1, #3
 8004724:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2228      	movs	r2, #40	; 0x28
 800472a:	2100      	movs	r1, #0
 800472c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e045      	b.n	80047be <HAL_RTC_DeactivateAlarm+0x126>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	2201      	movs	r2, #1
 800473a:	4013      	ands	r3, r2
 800473c:	d0e2      	beq.n	8004704 <HAL_RTC_DeactivateAlarm+0x6c>
 800473e:	e031      	b.n	80047a4 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4921      	ldr	r1, [pc, #132]	; (80047d0 <HAL_RTC_DeactivateAlarm+0x138>)
 800474c:	400a      	ands	r2, r1
 800474e:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	491e      	ldr	r1, [pc, #120]	; (80047d4 <HAL_RTC_DeactivateAlarm+0x13c>)
 800475c:	400a      	ands	r2, r1
 800475e:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8004760:	f7fc febc 	bl	80014dc <HAL_GetTick>
 8004764:	0003      	movs	r3, r0
 8004766:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004768:	e016      	b.n	8004798 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800476a:	f7fc feb7 	bl	80014dc <HAL_GetTick>
 800476e:	0002      	movs	r2, r0
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	1ad2      	subs	r2, r2, r3
 8004774:	23fa      	movs	r3, #250	; 0xfa
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	429a      	cmp	r2, r3
 800477a:	d90d      	bls.n	8004798 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	22ff      	movs	r2, #255	; 0xff
 8004782:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2229      	movs	r2, #41	; 0x29
 8004788:	2103      	movs	r1, #3
 800478a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2228      	movs	r2, #40	; 0x28
 8004790:	2100      	movs	r1, #0
 8004792:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e012      	b.n	80047be <HAL_RTC_DeactivateAlarm+0x126>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	2202      	movs	r2, #2
 80047a0:	4013      	ands	r3, r2
 80047a2:	d0e2      	beq.n	800476a <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	22ff      	movs	r2, #255	; 0xff
 80047aa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2229      	movs	r2, #41	; 0x29
 80047b0:	2101      	movs	r1, #1
 80047b2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2228      	movs	r2, #40	; 0x28
 80047b8:	2100      	movs	r1, #0
 80047ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	0018      	movs	r0, r3
 80047c0:	46bd      	mov	sp, r7
 80047c2:	b004      	add	sp, #16
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	fffffeff 	.word	0xfffffeff
 80047cc:	ffffefff 	.word	0xffffefff
 80047d0:	fffffdff 	.word	0xfffffdff
 80047d4:	ffffdfff 	.word	0xffffdfff

080047d8 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d144      	bne.n	800487a <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2280      	movs	r2, #128	; 0x80
 80047f4:	0052      	lsls	r2, r2, #1
 80047f6:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004806:	045b      	lsls	r3, r3, #17
 8004808:	0c5b      	lsrs	r3, r3, #17
 800480a:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	0c1b      	lsrs	r3, r3, #16
 8004810:	b2db      	uxtb	r3, r3
 8004812:	223f      	movs	r2, #63	; 0x3f
 8004814:	4013      	ands	r3, r2
 8004816:	b2da      	uxtb	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	0a1b      	lsrs	r3, r3, #8
 8004820:	b2db      	uxtb	r3, r3
 8004822:	227f      	movs	r2, #127	; 0x7f
 8004824:	4013      	ands	r3, r2
 8004826:	b2da      	uxtb	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	b2db      	uxtb	r3, r3
 8004830:	227f      	movs	r2, #127	; 0x7f
 8004832:	4013      	ands	r3, r2
 8004834:	b2da      	uxtb	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	0d9b      	lsrs	r3, r3, #22
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2201      	movs	r2, #1
 8004842:	4013      	ands	r3, r2
 8004844:	b2da      	uxtb	r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	0e1b      	lsrs	r3, r3, #24
 8004854:	b2db      	uxtb	r3, r3
 8004856:	223f      	movs	r2, #63	; 0x3f
 8004858:	4013      	ands	r3, r2
 800485a:	b2d9      	uxtb	r1, r3
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2220      	movs	r2, #32
 8004860:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	2380      	movs	r3, #128	; 0x80
 8004866:	05db      	lsls	r3, r3, #23
 8004868:	401a      	ands	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	4a3b      	ldr	r2, [pc, #236]	; (8004960 <HAL_RTC_GetAlarm+0x188>)
 8004872:	401a      	ands	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	615a      	str	r2, [r3, #20]
 8004878:	e043      	b.n	8004902 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2280      	movs	r2, #128	; 0x80
 800487e:	0092      	lsls	r2, r2, #2
 8004880:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004888:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004890:	045b      	lsls	r3, r3, #17
 8004892:	0c5b      	lsrs	r3, r3, #17
 8004894:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	0c1b      	lsrs	r3, r3, #16
 800489a:	b2db      	uxtb	r3, r3
 800489c:	223f      	movs	r2, #63	; 0x3f
 800489e:	4013      	ands	r3, r2
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	0a1b      	lsrs	r3, r3, #8
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	227f      	movs	r2, #127	; 0x7f
 80048ae:	4013      	ands	r3, r2
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	227f      	movs	r2, #127	; 0x7f
 80048bc:	4013      	ands	r3, r2
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	0d9b      	lsrs	r3, r3, #22
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2201      	movs	r2, #1
 80048cc:	4013      	ands	r3, r2
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	0e1b      	lsrs	r3, r3, #24
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	223f      	movs	r2, #63	; 0x3f
 80048e2:	4013      	ands	r3, r2
 80048e4:	b2d9      	uxtb	r1, r3
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2220      	movs	r2, #32
 80048ea:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	2380      	movs	r3, #128	; 0x80
 80048f0:	05db      	lsls	r3, r3, #23
 80048f2:	401a      	ands	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	4a19      	ldr	r2, [pc, #100]	; (8004960 <HAL_RTC_GetAlarm+0x188>)
 80048fc:	401a      	ands	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d125      	bne.n	8004954 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	0018      	movs	r0, r3
 800490e:	f000 f93d 	bl	8004b8c <RTC_Bcd2ToByte>
 8004912:	0003      	movs	r3, r0
 8004914:	001a      	movs	r2, r3
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	785b      	ldrb	r3, [r3, #1]
 800491e:	0018      	movs	r0, r3
 8004920:	f000 f934 	bl	8004b8c <RTC_Bcd2ToByte>
 8004924:	0003      	movs	r3, r0
 8004926:	001a      	movs	r2, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	789b      	ldrb	r3, [r3, #2]
 8004930:	0018      	movs	r0, r3
 8004932:	f000 f92b 	bl	8004b8c <RTC_Bcd2ToByte>
 8004936:	0003      	movs	r3, r0
 8004938:	001a      	movs	r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2220      	movs	r2, #32
 8004942:	5c9b      	ldrb	r3, [r3, r2]
 8004944:	0018      	movs	r0, r3
 8004946:	f000 f921 	bl	8004b8c <RTC_Bcd2ToByte>
 800494a:	0003      	movs	r3, r0
 800494c:	0019      	movs	r1, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2220      	movs	r2, #32
 8004952:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	0018      	movs	r0, r3
 8004958:	46bd      	mov	sp, r7
 800495a:	b006      	add	sp, #24
 800495c:	bd80      	pop	{r7, pc}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	80808080 	.word	0x80808080

08004964 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	2380      	movs	r3, #128	; 0x80
 8004974:	015b      	lsls	r3, r3, #5
 8004976:	4013      	ands	r3, r2
 8004978:	d011      	beq.n	800499e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004980:	2201      	movs	r2, #1
 8004982:	4013      	ands	r3, r2
 8004984:	d00b      	beq.n	800499e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2101      	movs	r1, #1
 8004992:	430a      	orrs	r2, r1
 8004994:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	0018      	movs	r0, r3
 800499a:	f7fc f971 	bl	8000c80 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	699a      	ldr	r2, [r3, #24]
 80049a4:	2380      	movs	r3, #128	; 0x80
 80049a6:	019b      	lsls	r3, r3, #6
 80049a8:	4013      	ands	r3, r2
 80049aa:	d011      	beq.n	80049d0 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b2:	2202      	movs	r2, #2
 80049b4:	4013      	ands	r3, r2
 80049b6:	d00b      	beq.n	80049d0 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2102      	movs	r1, #2
 80049c4:	430a      	orrs	r2, r1
 80049c6:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	0018      	movs	r0, r3
 80049cc:	f000 f8fb 	bl	8004bc6 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2229      	movs	r2, #41	; 0x29
 80049d4:	2101      	movs	r1, #1
 80049d6:	5499      	strb	r1, [r3, r2]
}
 80049d8:	46c0      	nop			; (mov r8, r8)
 80049da:	46bd      	mov	sp, r7
 80049dc:	b002      	add	sp, #8
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	21a0      	movs	r1, #160	; 0xa0
 80049f4:	438a      	bics	r2, r1
 80049f6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80049f8:	f7fc fd70 	bl	80014dc <HAL_GetTick>
 80049fc:	0003      	movs	r3, r0
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004a00:	e00a      	b.n	8004a18 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a02:	f7fc fd6b 	bl	80014dc <HAL_GetTick>
 8004a06:	0002      	movs	r2, r0
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	1ad2      	subs	r2, r2, r3
 8004a0c:	23fa      	movs	r3, #250	; 0xfa
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d901      	bls.n	8004a18 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e006      	b.n	8004a26 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	4013      	ands	r3, r2
 8004a22:	d0ee      	beq.n	8004a02 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	0018      	movs	r0, r3
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	b004      	add	sp, #16
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004a36:	230f      	movs	r3, #15
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	2240      	movs	r2, #64	; 0x40
 8004a46:	4013      	ands	r3, r2
 8004a48:	d12c      	bne.n	8004aa4 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2180      	movs	r1, #128	; 0x80
 8004a56:	430a      	orrs	r2, r1
 8004a58:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004a5a:	f7fc fd3f 	bl	80014dc <HAL_GetTick>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004a62:	e014      	b.n	8004a8e <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a64:	f7fc fd3a 	bl	80014dc <HAL_GetTick>
 8004a68:	0002      	movs	r2, r0
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	1ad2      	subs	r2, r2, r3
 8004a6e:	200f      	movs	r0, #15
 8004a70:	183b      	adds	r3, r7, r0
 8004a72:	1839      	adds	r1, r7, r0
 8004a74:	7809      	ldrb	r1, [r1, #0]
 8004a76:	7019      	strb	r1, [r3, #0]
 8004a78:	23fa      	movs	r3, #250	; 0xfa
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d906      	bls.n	8004a8e <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004a80:	183b      	adds	r3, r7, r0
 8004a82:	2203      	movs	r2, #3
 8004a84:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2229      	movs	r2, #41	; 0x29
 8004a8a:	2103      	movs	r1, #3
 8004a8c:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	2240      	movs	r2, #64	; 0x40
 8004a96:	4013      	ands	r3, r2
 8004a98:	d104      	bne.n	8004aa4 <RTC_EnterInitMode+0x76>
 8004a9a:	230f      	movs	r3, #15
 8004a9c:	18fb      	adds	r3, r7, r3
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d1df      	bne.n	8004a64 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004aa4:	230f      	movs	r3, #15
 8004aa6:	18fb      	adds	r3, r7, r3
 8004aa8:	781b      	ldrb	r3, [r3, #0]
}
 8004aaa:	0018      	movs	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b004      	add	sp, #16
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ab4:	b590      	push	{r4, r7, lr}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004abc:	240f      	movs	r4, #15
 8004abe:	193b      	adds	r3, r7, r4
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004ac4:	4b1c      	ldr	r3, [pc, #112]	; (8004b38 <RTC_ExitInitMode+0x84>)
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	4b1b      	ldr	r3, [pc, #108]	; (8004b38 <RTC_ExitInitMode+0x84>)
 8004aca:	2180      	movs	r1, #128	; 0x80
 8004acc:	438a      	bics	r2, r1
 8004ace:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004ad0:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <RTC_ExitInitMode+0x84>)
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	d10d      	bne.n	8004af6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	0018      	movs	r0, r3
 8004ade:	f7ff ff7f 	bl	80049e0 <HAL_RTC_WaitForSynchro>
 8004ae2:	1e03      	subs	r3, r0, #0
 8004ae4:	d021      	beq.n	8004b2a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2229      	movs	r2, #41	; 0x29
 8004aea:	2103      	movs	r1, #3
 8004aec:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004aee:	193b      	adds	r3, r7, r4
 8004af0:	2203      	movs	r2, #3
 8004af2:	701a      	strb	r2, [r3, #0]
 8004af4:	e019      	b.n	8004b2a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004af6:	4b10      	ldr	r3, [pc, #64]	; (8004b38 <RTC_ExitInitMode+0x84>)
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <RTC_ExitInitMode+0x84>)
 8004afc:	2120      	movs	r1, #32
 8004afe:	438a      	bics	r2, r1
 8004b00:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	0018      	movs	r0, r3
 8004b06:	f7ff ff6b 	bl	80049e0 <HAL_RTC_WaitForSynchro>
 8004b0a:	1e03      	subs	r3, r0, #0
 8004b0c:	d007      	beq.n	8004b1e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2229      	movs	r2, #41	; 0x29
 8004b12:	2103      	movs	r1, #3
 8004b14:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004b16:	230f      	movs	r3, #15
 8004b18:	18fb      	adds	r3, r7, r3
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004b1e:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <RTC_ExitInitMode+0x84>)
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <RTC_ExitInitMode+0x84>)
 8004b24:	2120      	movs	r1, #32
 8004b26:	430a      	orrs	r2, r1
 8004b28:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004b2a:	230f      	movs	r3, #15
 8004b2c:	18fb      	adds	r3, r7, r3
 8004b2e:	781b      	ldrb	r3, [r3, #0]
}
 8004b30:	0018      	movs	r0, r3
 8004b32:	46bd      	mov	sp, r7
 8004b34:	b005      	add	sp, #20
 8004b36:	bd90      	pop	{r4, r7, pc}
 8004b38:	40002800 	.word	0x40002800

08004b3c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	0002      	movs	r2, r0
 8004b44:	1dfb      	adds	r3, r7, #7
 8004b46:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004b4c:	230b      	movs	r3, #11
 8004b4e:	18fb      	adds	r3, r7, r3
 8004b50:	1dfa      	adds	r2, r7, #7
 8004b52:	7812      	ldrb	r2, [r2, #0]
 8004b54:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004b56:	e008      	b.n	8004b6a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004b5e:	220b      	movs	r2, #11
 8004b60:	18bb      	adds	r3, r7, r2
 8004b62:	18ba      	adds	r2, r7, r2
 8004b64:	7812      	ldrb	r2, [r2, #0]
 8004b66:	3a0a      	subs	r2, #10
 8004b68:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004b6a:	210b      	movs	r1, #11
 8004b6c:	187b      	adds	r3, r7, r1
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b09      	cmp	r3, #9
 8004b72:	d8f1      	bhi.n	8004b58 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	187b      	adds	r3, r7, r1
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	b2db      	uxtb	r3, r3
}
 8004b84:	0018      	movs	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b004      	add	sp, #16
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	0002      	movs	r2, r0
 8004b94:	1dfb      	adds	r3, r7, #7
 8004b96:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004b98:	1dfb      	adds	r3, r7, #7
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	091b      	lsrs	r3, r3, #4
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	001a      	movs	r2, r3
 8004ba2:	0013      	movs	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	189b      	adds	r3, r3, r2
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	1dfb      	adds	r3, r7, #7
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	210f      	movs	r1, #15
 8004bb6:	400b      	ands	r3, r1
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	18d3      	adds	r3, r2, r3
 8004bbc:	b2db      	uxtb	r3, r3
}
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b004      	add	sp, #16
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b082      	sub	sp, #8
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b002      	add	sp, #8
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e046      	b.n	8004c78 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2288      	movs	r2, #136	; 0x88
 8004bee:	589b      	ldr	r3, [r3, r2]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d107      	bne.n	8004c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2284      	movs	r2, #132	; 0x84
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	0018      	movs	r0, r3
 8004c00:	f7fc fa74 	bl	80010ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2288      	movs	r2, #136	; 0x88
 8004c08:	2124      	movs	r1, #36	; 0x24
 8004c0a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2101      	movs	r1, #1
 8004c18:	438a      	bics	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f000 f8cc 	bl	8004dbc <UART_SetConfig>
 8004c24:	0003      	movs	r3, r0
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e024      	b.n	8004c78 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f000 fb37 	bl	80052ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	490d      	ldr	r1, [pc, #52]	; (8004c80 <HAL_UART_Init+0xa8>)
 8004c4a:	400a      	ands	r2, r1
 8004c4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	212a      	movs	r1, #42	; 0x2a
 8004c5a:	438a      	bics	r2, r1
 8004c5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2101      	movs	r1, #1
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	0018      	movs	r0, r3
 8004c72:	f000 fbcf 	bl	8005414 <UART_CheckIdleState>
 8004c76:	0003      	movs	r3, r0
}
 8004c78:	0018      	movs	r0, r3
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	b002      	add	sp, #8
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	ffffb7ff 	.word	0xffffb7ff

08004c84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08a      	sub	sp, #40	; 0x28
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	603b      	str	r3, [r7, #0]
 8004c90:	1dbb      	adds	r3, r7, #6
 8004c92:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2288      	movs	r2, #136	; 0x88
 8004c98:	589b      	ldr	r3, [r3, r2]
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	d000      	beq.n	8004ca0 <HAL_UART_Transmit+0x1c>
 8004c9e:	e088      	b.n	8004db2 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_UART_Transmit+0x2a>
 8004ca6:	1dbb      	adds	r3, r7, #6
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e080      	b.n	8004db4 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	689a      	ldr	r2, [r3, #8]
 8004cb6:	2380      	movs	r3, #128	; 0x80
 8004cb8:	015b      	lsls	r3, r3, #5
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d109      	bne.n	8004cd2 <HAL_UART_Transmit+0x4e>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d105      	bne.n	8004cd2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d001      	beq.n	8004cd2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e070      	b.n	8004db4 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2290      	movs	r2, #144	; 0x90
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2288      	movs	r2, #136	; 0x88
 8004cde:	2121      	movs	r1, #33	; 0x21
 8004ce0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ce2:	f7fc fbfb 	bl	80014dc <HAL_GetTick>
 8004ce6:	0003      	movs	r3, r0
 8004ce8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	1dba      	adds	r2, r7, #6
 8004cee:	2154      	movs	r1, #84	; 0x54
 8004cf0:	8812      	ldrh	r2, [r2, #0]
 8004cf2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	1dba      	adds	r2, r7, #6
 8004cf8:	2156      	movs	r1, #86	; 0x56
 8004cfa:	8812      	ldrh	r2, [r2, #0]
 8004cfc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	2380      	movs	r3, #128	; 0x80
 8004d04:	015b      	lsls	r3, r3, #5
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d108      	bne.n	8004d1c <HAL_UART_Transmit+0x98>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d104      	bne.n	8004d1c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	e003      	b.n	8004d24 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d24:	e02c      	b.n	8004d80 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	0013      	movs	r3, r2
 8004d30:	2200      	movs	r2, #0
 8004d32:	2180      	movs	r1, #128	; 0x80
 8004d34:	f000 fbbc 	bl	80054b0 <UART_WaitOnFlagUntilTimeout>
 8004d38:	1e03      	subs	r3, r0, #0
 8004d3a:	d001      	beq.n	8004d40 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e039      	b.n	8004db4 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10b      	bne.n	8004d5e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	001a      	movs	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	05d2      	lsls	r2, r2, #23
 8004d52:	0dd2      	lsrs	r2, r2, #23
 8004d54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	3302      	adds	r3, #2
 8004d5a:	61bb      	str	r3, [r7, #24]
 8004d5c:	e007      	b.n	8004d6e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	781a      	ldrb	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2256      	movs	r2, #86	; 0x56
 8004d72:	5a9b      	ldrh	r3, [r3, r2]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b299      	uxth	r1, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2256      	movs	r2, #86	; 0x56
 8004d7e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2256      	movs	r2, #86	; 0x56
 8004d84:	5a9b      	ldrh	r3, [r3, r2]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1cc      	bne.n	8004d26 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	0013      	movs	r3, r2
 8004d96:	2200      	movs	r2, #0
 8004d98:	2140      	movs	r1, #64	; 0x40
 8004d9a:	f000 fb89 	bl	80054b0 <UART_WaitOnFlagUntilTimeout>
 8004d9e:	1e03      	subs	r3, r0, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e006      	b.n	8004db4 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2288      	movs	r2, #136	; 0x88
 8004daa:	2120      	movs	r1, #32
 8004dac:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	e000      	b.n	8004db4 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004db2:	2302      	movs	r3, #2
  }
}
 8004db4:	0018      	movs	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	b008      	add	sp, #32
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dbc:	b5b0      	push	{r4, r5, r7, lr}
 8004dbe:	b090      	sub	sp, #64	; 0x40
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dc4:	231a      	movs	r3, #26
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	189b      	adds	r3, r3, r2
 8004dca:	19db      	adds	r3, r3, r7
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	431a      	orrs	r2, r3
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4ac4      	ldr	r2, [pc, #784]	; (8005100 <UART_SetConfig+0x344>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	0019      	movs	r1, r3
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	4abf      	ldr	r2, [pc, #764]	; (8005104 <UART_SetConfig+0x348>)
 8004e06:	4013      	ands	r3, r2
 8004e08:	0018      	movs	r0, r3
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	68d9      	ldr	r1, [r3, #12]
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	0003      	movs	r3, r0
 8004e14:	430b      	orrs	r3, r1
 8004e16:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4ab9      	ldr	r2, [pc, #740]	; (8005108 <UART_SetConfig+0x34c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d004      	beq.n	8004e32 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	4ab4      	ldr	r2, [pc, #720]	; (800510c <UART_SetConfig+0x350>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	0019      	movs	r1, r3
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e44:	430b      	orrs	r3, r1
 8004e46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	220f      	movs	r2, #15
 8004e50:	4393      	bics	r3, r2
 8004e52:	0018      	movs	r0, r3
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	0003      	movs	r3, r0
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4aaa      	ldr	r2, [pc, #680]	; (8005110 <UART_SetConfig+0x354>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d131      	bne.n	8004ed0 <UART_SetConfig+0x114>
 8004e6c:	4ba9      	ldr	r3, [pc, #676]	; (8005114 <UART_SetConfig+0x358>)
 8004e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e70:	2203      	movs	r2, #3
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d01d      	beq.n	8004eb4 <UART_SetConfig+0xf8>
 8004e78:	d823      	bhi.n	8004ec2 <UART_SetConfig+0x106>
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d00c      	beq.n	8004e98 <UART_SetConfig+0xdc>
 8004e7e:	d820      	bhi.n	8004ec2 <UART_SetConfig+0x106>
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <UART_SetConfig+0xce>
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d00e      	beq.n	8004ea6 <UART_SetConfig+0xea>
 8004e88:	e01b      	b.n	8004ec2 <UART_SetConfig+0x106>
 8004e8a:	231b      	movs	r3, #27
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	189b      	adds	r3, r3, r2
 8004e90:	19db      	adds	r3, r3, r7
 8004e92:	2200      	movs	r2, #0
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	e071      	b.n	8004f7c <UART_SetConfig+0x1c0>
 8004e98:	231b      	movs	r3, #27
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	189b      	adds	r3, r3, r2
 8004e9e:	19db      	adds	r3, r3, r7
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	701a      	strb	r2, [r3, #0]
 8004ea4:	e06a      	b.n	8004f7c <UART_SetConfig+0x1c0>
 8004ea6:	231b      	movs	r3, #27
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	189b      	adds	r3, r3, r2
 8004eac:	19db      	adds	r3, r3, r7
 8004eae:	2204      	movs	r2, #4
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	e063      	b.n	8004f7c <UART_SetConfig+0x1c0>
 8004eb4:	231b      	movs	r3, #27
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	189b      	adds	r3, r3, r2
 8004eba:	19db      	adds	r3, r3, r7
 8004ebc:	2208      	movs	r2, #8
 8004ebe:	701a      	strb	r2, [r3, #0]
 8004ec0:	e05c      	b.n	8004f7c <UART_SetConfig+0x1c0>
 8004ec2:	231b      	movs	r3, #27
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	189b      	adds	r3, r3, r2
 8004ec8:	19db      	adds	r3, r3, r7
 8004eca:	2210      	movs	r2, #16
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	e055      	b.n	8004f7c <UART_SetConfig+0x1c0>
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a90      	ldr	r2, [pc, #576]	; (8005118 <UART_SetConfig+0x35c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d106      	bne.n	8004ee8 <UART_SetConfig+0x12c>
 8004eda:	231b      	movs	r3, #27
 8004edc:	2220      	movs	r2, #32
 8004ede:	189b      	adds	r3, r3, r2
 8004ee0:	19db      	adds	r3, r3, r7
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	e049      	b.n	8004f7c <UART_SetConfig+0x1c0>
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a86      	ldr	r2, [pc, #536]	; (8005108 <UART_SetConfig+0x34c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d13e      	bne.n	8004f70 <UART_SetConfig+0x1b4>
 8004ef2:	4b88      	ldr	r3, [pc, #544]	; (8005114 <UART_SetConfig+0x358>)
 8004ef4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ef6:	23c0      	movs	r3, #192	; 0xc0
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	4013      	ands	r3, r2
 8004efc:	22c0      	movs	r2, #192	; 0xc0
 8004efe:	0112      	lsls	r2, r2, #4
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d027      	beq.n	8004f54 <UART_SetConfig+0x198>
 8004f04:	22c0      	movs	r2, #192	; 0xc0
 8004f06:	0112      	lsls	r2, r2, #4
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d82a      	bhi.n	8004f62 <UART_SetConfig+0x1a6>
 8004f0c:	2280      	movs	r2, #128	; 0x80
 8004f0e:	0112      	lsls	r2, r2, #4
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d011      	beq.n	8004f38 <UART_SetConfig+0x17c>
 8004f14:	2280      	movs	r2, #128	; 0x80
 8004f16:	0112      	lsls	r2, r2, #4
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d822      	bhi.n	8004f62 <UART_SetConfig+0x1a6>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d004      	beq.n	8004f2a <UART_SetConfig+0x16e>
 8004f20:	2280      	movs	r2, #128	; 0x80
 8004f22:	00d2      	lsls	r2, r2, #3
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00e      	beq.n	8004f46 <UART_SetConfig+0x18a>
 8004f28:	e01b      	b.n	8004f62 <UART_SetConfig+0x1a6>
 8004f2a:	231b      	movs	r3, #27
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	189b      	adds	r3, r3, r2
 8004f30:	19db      	adds	r3, r3, r7
 8004f32:	2200      	movs	r2, #0
 8004f34:	701a      	strb	r2, [r3, #0]
 8004f36:	e021      	b.n	8004f7c <UART_SetConfig+0x1c0>
 8004f38:	231b      	movs	r3, #27
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	189b      	adds	r3, r3, r2
 8004f3e:	19db      	adds	r3, r3, r7
 8004f40:	2202      	movs	r2, #2
 8004f42:	701a      	strb	r2, [r3, #0]
 8004f44:	e01a      	b.n	8004f7c <UART_SetConfig+0x1c0>
 8004f46:	231b      	movs	r3, #27
 8004f48:	2220      	movs	r2, #32
 8004f4a:	189b      	adds	r3, r3, r2
 8004f4c:	19db      	adds	r3, r3, r7
 8004f4e:	2204      	movs	r2, #4
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	e013      	b.n	8004f7c <UART_SetConfig+0x1c0>
 8004f54:	231b      	movs	r3, #27
 8004f56:	2220      	movs	r2, #32
 8004f58:	189b      	adds	r3, r3, r2
 8004f5a:	19db      	adds	r3, r3, r7
 8004f5c:	2208      	movs	r2, #8
 8004f5e:	701a      	strb	r2, [r3, #0]
 8004f60:	e00c      	b.n	8004f7c <UART_SetConfig+0x1c0>
 8004f62:	231b      	movs	r3, #27
 8004f64:	2220      	movs	r2, #32
 8004f66:	189b      	adds	r3, r3, r2
 8004f68:	19db      	adds	r3, r3, r7
 8004f6a:	2210      	movs	r2, #16
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	e005      	b.n	8004f7c <UART_SetConfig+0x1c0>
 8004f70:	231b      	movs	r3, #27
 8004f72:	2220      	movs	r2, #32
 8004f74:	189b      	adds	r3, r3, r2
 8004f76:	19db      	adds	r3, r3, r7
 8004f78:	2210      	movs	r2, #16
 8004f7a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a61      	ldr	r2, [pc, #388]	; (8005108 <UART_SetConfig+0x34c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d000      	beq.n	8004f88 <UART_SetConfig+0x1cc>
 8004f86:	e092      	b.n	80050ae <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f88:	231b      	movs	r3, #27
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	189b      	adds	r3, r3, r2
 8004f8e:	19db      	adds	r3, r3, r7
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d015      	beq.n	8004fc2 <UART_SetConfig+0x206>
 8004f96:	dc18      	bgt.n	8004fca <UART_SetConfig+0x20e>
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d00d      	beq.n	8004fb8 <UART_SetConfig+0x1fc>
 8004f9c:	dc15      	bgt.n	8004fca <UART_SetConfig+0x20e>
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <UART_SetConfig+0x1ec>
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d005      	beq.n	8004fb2 <UART_SetConfig+0x1f6>
 8004fa6:	e010      	b.n	8004fca <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa8:	f7fe fcfa 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 8004fac:	0003      	movs	r3, r0
 8004fae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fb0:	e014      	b.n	8004fdc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb2:	4b5a      	ldr	r3, [pc, #360]	; (800511c <UART_SetConfig+0x360>)
 8004fb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fb6:	e011      	b.n	8004fdc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fb8:	f7fe fc66 	bl	8003888 <HAL_RCC_GetSysClockFreq>
 8004fbc:	0003      	movs	r3, r0
 8004fbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fc0:	e00c      	b.n	8004fdc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fc2:	2380      	movs	r3, #128	; 0x80
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fc8:	e008      	b.n	8004fdc <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004fce:	231a      	movs	r3, #26
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	189b      	adds	r3, r3, r2
 8004fd4:	19db      	adds	r3, r3, r7
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	701a      	strb	r2, [r3, #0]
        break;
 8004fda:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d100      	bne.n	8004fe4 <UART_SetConfig+0x228>
 8004fe2:	e147      	b.n	8005274 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fe8:	4b4d      	ldr	r3, [pc, #308]	; (8005120 <UART_SetConfig+0x364>)
 8004fea:	0052      	lsls	r2, r2, #1
 8004fec:	5ad3      	ldrh	r3, [r2, r3]
 8004fee:	0019      	movs	r1, r3
 8004ff0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ff2:	f7fb f891 	bl	8000118 <__udivsi3>
 8004ff6:	0003      	movs	r3, r0
 8004ff8:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	0013      	movs	r3, r2
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	189b      	adds	r3, r3, r2
 8005004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005006:	429a      	cmp	r2, r3
 8005008:	d305      	bcc.n	8005016 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005010:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005012:	429a      	cmp	r2, r3
 8005014:	d906      	bls.n	8005024 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8005016:	231a      	movs	r3, #26
 8005018:	2220      	movs	r2, #32
 800501a:	189b      	adds	r3, r3, r2
 800501c:	19db      	adds	r3, r3, r7
 800501e:	2201      	movs	r2, #1
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	e127      	b.n	8005274 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005026:	61bb      	str	r3, [r7, #24]
 8005028:	2300      	movs	r3, #0
 800502a:	61fb      	str	r3, [r7, #28]
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005030:	4b3b      	ldr	r3, [pc, #236]	; (8005120 <UART_SetConfig+0x364>)
 8005032:	0052      	lsls	r2, r2, #1
 8005034:	5ad3      	ldrh	r3, [r2, r3]
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	69b8      	ldr	r0, [r7, #24]
 8005042:	69f9      	ldr	r1, [r7, #28]
 8005044:	f7fb f8f4 	bl	8000230 <__aeabi_uldivmod>
 8005048:	0002      	movs	r2, r0
 800504a:	000b      	movs	r3, r1
 800504c:	0e11      	lsrs	r1, r2, #24
 800504e:	021d      	lsls	r5, r3, #8
 8005050:	430d      	orrs	r5, r1
 8005052:	0214      	lsls	r4, r2, #8
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	085b      	lsrs	r3, r3, #1
 800505a:	60bb      	str	r3, [r7, #8]
 800505c:	2300      	movs	r3, #0
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	68b8      	ldr	r0, [r7, #8]
 8005062:	68f9      	ldr	r1, [r7, #12]
 8005064:	1900      	adds	r0, r0, r4
 8005066:	4169      	adcs	r1, r5
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	603b      	str	r3, [r7, #0]
 800506e:	2300      	movs	r3, #0
 8005070:	607b      	str	r3, [r7, #4]
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f7fb f8db 	bl	8000230 <__aeabi_uldivmod>
 800507a:	0002      	movs	r2, r0
 800507c:	000b      	movs	r3, r1
 800507e:	0013      	movs	r3, r2
 8005080:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005084:	23c0      	movs	r3, #192	; 0xc0
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	429a      	cmp	r2, r3
 800508a:	d309      	bcc.n	80050a0 <UART_SetConfig+0x2e4>
 800508c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508e:	2380      	movs	r3, #128	; 0x80
 8005090:	035b      	lsls	r3, r3, #13
 8005092:	429a      	cmp	r2, r3
 8005094:	d204      	bcs.n	80050a0 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800509c:	60da      	str	r2, [r3, #12]
 800509e:	e0e9      	b.n	8005274 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80050a0:	231a      	movs	r3, #26
 80050a2:	2220      	movs	r2, #32
 80050a4:	189b      	adds	r3, r3, r2
 80050a6:	19db      	adds	r3, r3, r7
 80050a8:	2201      	movs	r2, #1
 80050aa:	701a      	strb	r2, [r3, #0]
 80050ac:	e0e2      	b.n	8005274 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	69da      	ldr	r2, [r3, #28]
 80050b2:	2380      	movs	r3, #128	; 0x80
 80050b4:	021b      	lsls	r3, r3, #8
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d000      	beq.n	80050bc <UART_SetConfig+0x300>
 80050ba:	e083      	b.n	80051c4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80050bc:	231b      	movs	r3, #27
 80050be:	2220      	movs	r2, #32
 80050c0:	189b      	adds	r3, r3, r2
 80050c2:	19db      	adds	r3, r3, r7
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d015      	beq.n	80050f6 <UART_SetConfig+0x33a>
 80050ca:	dc2b      	bgt.n	8005124 <UART_SetConfig+0x368>
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d00d      	beq.n	80050ec <UART_SetConfig+0x330>
 80050d0:	dc28      	bgt.n	8005124 <UART_SetConfig+0x368>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <UART_SetConfig+0x320>
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d005      	beq.n	80050e6 <UART_SetConfig+0x32a>
 80050da:	e023      	b.n	8005124 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050dc:	f7fe fc60 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 80050e0:	0003      	movs	r3, r0
 80050e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050e4:	e027      	b.n	8005136 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050e6:	4b0d      	ldr	r3, [pc, #52]	; (800511c <UART_SetConfig+0x360>)
 80050e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050ea:	e024      	b.n	8005136 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ec:	f7fe fbcc 	bl	8003888 <HAL_RCC_GetSysClockFreq>
 80050f0:	0003      	movs	r3, r0
 80050f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050f4:	e01f      	b.n	8005136 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050f6:	2380      	movs	r3, #128	; 0x80
 80050f8:	021b      	lsls	r3, r3, #8
 80050fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050fc:	e01b      	b.n	8005136 <UART_SetConfig+0x37a>
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	cfff69f3 	.word	0xcfff69f3
 8005104:	ffffcfff 	.word	0xffffcfff
 8005108:	40008000 	.word	0x40008000
 800510c:	11fff4ff 	.word	0x11fff4ff
 8005110:	40013800 	.word	0x40013800
 8005114:	40021000 	.word	0x40021000
 8005118:	40004400 	.word	0x40004400
 800511c:	00f42400 	.word	0x00f42400
 8005120:	08006a24 	.word	0x08006a24
      default:
        pclk = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005128:	231a      	movs	r3, #26
 800512a:	2220      	movs	r2, #32
 800512c:	189b      	adds	r3, r3, r2
 800512e:	19db      	adds	r3, r3, r7
 8005130:	2201      	movs	r2, #1
 8005132:	701a      	strb	r2, [r3, #0]
        break;
 8005134:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005138:	2b00      	cmp	r3, #0
 800513a:	d100      	bne.n	800513e <UART_SetConfig+0x382>
 800513c:	e09a      	b.n	8005274 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005142:	4b58      	ldr	r3, [pc, #352]	; (80052a4 <UART_SetConfig+0x4e8>)
 8005144:	0052      	lsls	r2, r2, #1
 8005146:	5ad3      	ldrh	r3, [r2, r3]
 8005148:	0019      	movs	r1, r3
 800514a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800514c:	f7fa ffe4 	bl	8000118 <__udivsi3>
 8005150:	0003      	movs	r3, r0
 8005152:	005a      	lsls	r2, r3, #1
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	085b      	lsrs	r3, r3, #1
 800515a:	18d2      	adds	r2, r2, r3
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	0019      	movs	r1, r3
 8005162:	0010      	movs	r0, r2
 8005164:	f7fa ffd8 	bl	8000118 <__udivsi3>
 8005168:	0003      	movs	r3, r0
 800516a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	2b0f      	cmp	r3, #15
 8005170:	d921      	bls.n	80051b6 <UART_SetConfig+0x3fa>
 8005172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005174:	2380      	movs	r3, #128	; 0x80
 8005176:	025b      	lsls	r3, r3, #9
 8005178:	429a      	cmp	r2, r3
 800517a:	d21c      	bcs.n	80051b6 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800517c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517e:	b29a      	uxth	r2, r3
 8005180:	200e      	movs	r0, #14
 8005182:	2420      	movs	r4, #32
 8005184:	1903      	adds	r3, r0, r4
 8005186:	19db      	adds	r3, r3, r7
 8005188:	210f      	movs	r1, #15
 800518a:	438a      	bics	r2, r1
 800518c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	085b      	lsrs	r3, r3, #1
 8005192:	b29b      	uxth	r3, r3
 8005194:	2207      	movs	r2, #7
 8005196:	4013      	ands	r3, r2
 8005198:	b299      	uxth	r1, r3
 800519a:	1903      	adds	r3, r0, r4
 800519c:	19db      	adds	r3, r3, r7
 800519e:	1902      	adds	r2, r0, r4
 80051a0:	19d2      	adds	r2, r2, r7
 80051a2:	8812      	ldrh	r2, [r2, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	1902      	adds	r2, r0, r4
 80051ae:	19d2      	adds	r2, r2, r7
 80051b0:	8812      	ldrh	r2, [r2, #0]
 80051b2:	60da      	str	r2, [r3, #12]
 80051b4:	e05e      	b.n	8005274 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80051b6:	231a      	movs	r3, #26
 80051b8:	2220      	movs	r2, #32
 80051ba:	189b      	adds	r3, r3, r2
 80051bc:	19db      	adds	r3, r3, r7
 80051be:	2201      	movs	r2, #1
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	e057      	b.n	8005274 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051c4:	231b      	movs	r3, #27
 80051c6:	2220      	movs	r2, #32
 80051c8:	189b      	adds	r3, r3, r2
 80051ca:	19db      	adds	r3, r3, r7
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d015      	beq.n	80051fe <UART_SetConfig+0x442>
 80051d2:	dc18      	bgt.n	8005206 <UART_SetConfig+0x44a>
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d00d      	beq.n	80051f4 <UART_SetConfig+0x438>
 80051d8:	dc15      	bgt.n	8005206 <UART_SetConfig+0x44a>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <UART_SetConfig+0x428>
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d005      	beq.n	80051ee <UART_SetConfig+0x432>
 80051e2:	e010      	b.n	8005206 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e4:	f7fe fbdc 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 80051e8:	0003      	movs	r3, r0
 80051ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051ec:	e014      	b.n	8005218 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051ee:	4b2e      	ldr	r3, [pc, #184]	; (80052a8 <UART_SetConfig+0x4ec>)
 80051f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051f2:	e011      	b.n	8005218 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051f4:	f7fe fb48 	bl	8003888 <HAL_RCC_GetSysClockFreq>
 80051f8:	0003      	movs	r3, r0
 80051fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051fc:	e00c      	b.n	8005218 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051fe:	2380      	movs	r3, #128	; 0x80
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005204:	e008      	b.n	8005218 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800520a:	231a      	movs	r3, #26
 800520c:	2220      	movs	r2, #32
 800520e:	189b      	adds	r3, r3, r2
 8005210:	19db      	adds	r3, r3, r7
 8005212:	2201      	movs	r2, #1
 8005214:	701a      	strb	r2, [r3, #0]
        break;
 8005216:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521a:	2b00      	cmp	r3, #0
 800521c:	d02a      	beq.n	8005274 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005222:	4b20      	ldr	r3, [pc, #128]	; (80052a4 <UART_SetConfig+0x4e8>)
 8005224:	0052      	lsls	r2, r2, #1
 8005226:	5ad3      	ldrh	r3, [r2, r3]
 8005228:	0019      	movs	r1, r3
 800522a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800522c:	f7fa ff74 	bl	8000118 <__udivsi3>
 8005230:	0003      	movs	r3, r0
 8005232:	001a      	movs	r2, r3
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	085b      	lsrs	r3, r3, #1
 800523a:	18d2      	adds	r2, r2, r3
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	0019      	movs	r1, r3
 8005242:	0010      	movs	r0, r2
 8005244:	f7fa ff68 	bl	8000118 <__udivsi3>
 8005248:	0003      	movs	r3, r0
 800524a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524e:	2b0f      	cmp	r3, #15
 8005250:	d90a      	bls.n	8005268 <UART_SetConfig+0x4ac>
 8005252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005254:	2380      	movs	r3, #128	; 0x80
 8005256:	025b      	lsls	r3, r3, #9
 8005258:	429a      	cmp	r2, r3
 800525a:	d205      	bcs.n	8005268 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	b29a      	uxth	r2, r3
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60da      	str	r2, [r3, #12]
 8005266:	e005      	b.n	8005274 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005268:	231a      	movs	r3, #26
 800526a:	2220      	movs	r2, #32
 800526c:	189b      	adds	r3, r3, r2
 800526e:	19db      	adds	r3, r3, r7
 8005270:	2201      	movs	r2, #1
 8005272:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	226a      	movs	r2, #106	; 0x6a
 8005278:	2101      	movs	r1, #1
 800527a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	2268      	movs	r2, #104	; 0x68
 8005280:	2101      	movs	r1, #1
 8005282:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	2200      	movs	r2, #0
 8005288:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	2200      	movs	r2, #0
 800528e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005290:	231a      	movs	r3, #26
 8005292:	2220      	movs	r2, #32
 8005294:	189b      	adds	r3, r3, r2
 8005296:	19db      	adds	r3, r3, r7
 8005298:	781b      	ldrb	r3, [r3, #0]
}
 800529a:	0018      	movs	r0, r3
 800529c:	46bd      	mov	sp, r7
 800529e:	b010      	add	sp, #64	; 0x40
 80052a0:	bdb0      	pop	{r4, r5, r7, pc}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	08006a24 	.word	0x08006a24
 80052a8:	00f42400 	.word	0x00f42400

080052ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b8:	2201      	movs	r2, #1
 80052ba:	4013      	ands	r3, r2
 80052bc:	d00b      	beq.n	80052d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	4a4a      	ldr	r2, [pc, #296]	; (80053f0 <UART_AdvFeatureConfig+0x144>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	0019      	movs	r1, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	2202      	movs	r2, #2
 80052dc:	4013      	ands	r3, r2
 80052de:	d00b      	beq.n	80052f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	4a43      	ldr	r2, [pc, #268]	; (80053f4 <UART_AdvFeatureConfig+0x148>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	0019      	movs	r1, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fc:	2204      	movs	r2, #4
 80052fe:	4013      	ands	r3, r2
 8005300:	d00b      	beq.n	800531a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	4a3b      	ldr	r2, [pc, #236]	; (80053f8 <UART_AdvFeatureConfig+0x14c>)
 800530a:	4013      	ands	r3, r2
 800530c:	0019      	movs	r1, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	2208      	movs	r2, #8
 8005320:	4013      	ands	r3, r2
 8005322:	d00b      	beq.n	800533c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	4a34      	ldr	r2, [pc, #208]	; (80053fc <UART_AdvFeatureConfig+0x150>)
 800532c:	4013      	ands	r3, r2
 800532e:	0019      	movs	r1, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005340:	2210      	movs	r2, #16
 8005342:	4013      	ands	r3, r2
 8005344:	d00b      	beq.n	800535e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	4a2c      	ldr	r2, [pc, #176]	; (8005400 <UART_AdvFeatureConfig+0x154>)
 800534e:	4013      	ands	r3, r2
 8005350:	0019      	movs	r1, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005362:	2220      	movs	r2, #32
 8005364:	4013      	ands	r3, r2
 8005366:	d00b      	beq.n	8005380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	4a25      	ldr	r2, [pc, #148]	; (8005404 <UART_AdvFeatureConfig+0x158>)
 8005370:	4013      	ands	r3, r2
 8005372:	0019      	movs	r1, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005384:	2240      	movs	r2, #64	; 0x40
 8005386:	4013      	ands	r3, r2
 8005388:	d01d      	beq.n	80053c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	4a1d      	ldr	r2, [pc, #116]	; (8005408 <UART_AdvFeatureConfig+0x15c>)
 8005392:	4013      	ands	r3, r2
 8005394:	0019      	movs	r1, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053a6:	2380      	movs	r3, #128	; 0x80
 80053a8:	035b      	lsls	r3, r3, #13
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d10b      	bne.n	80053c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	4a15      	ldr	r2, [pc, #84]	; (800540c <UART_AdvFeatureConfig+0x160>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	0019      	movs	r1, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ca:	2280      	movs	r2, #128	; 0x80
 80053cc:	4013      	ands	r3, r2
 80053ce:	d00b      	beq.n	80053e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	4a0e      	ldr	r2, [pc, #56]	; (8005410 <UART_AdvFeatureConfig+0x164>)
 80053d8:	4013      	ands	r3, r2
 80053da:	0019      	movs	r1, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	605a      	str	r2, [r3, #4]
  }
}
 80053e8:	46c0      	nop			; (mov r8, r8)
 80053ea:	46bd      	mov	sp, r7
 80053ec:	b002      	add	sp, #8
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	fffdffff 	.word	0xfffdffff
 80053f4:	fffeffff 	.word	0xfffeffff
 80053f8:	fffbffff 	.word	0xfffbffff
 80053fc:	ffff7fff 	.word	0xffff7fff
 8005400:	ffffefff 	.word	0xffffefff
 8005404:	ffffdfff 	.word	0xffffdfff
 8005408:	ffefffff 	.word	0xffefffff
 800540c:	ff9fffff 	.word	0xff9fffff
 8005410:	fff7ffff 	.word	0xfff7ffff

08005414 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af02      	add	r7, sp, #8
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2290      	movs	r2, #144	; 0x90
 8005420:	2100      	movs	r1, #0
 8005422:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005424:	f7fc f85a 	bl	80014dc <HAL_GetTick>
 8005428:	0003      	movs	r3, r0
 800542a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2208      	movs	r2, #8
 8005434:	4013      	ands	r3, r2
 8005436:	2b08      	cmp	r3, #8
 8005438:	d10c      	bne.n	8005454 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2280      	movs	r2, #128	; 0x80
 800543e:	0391      	lsls	r1, r2, #14
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	4a1a      	ldr	r2, [pc, #104]	; (80054ac <UART_CheckIdleState+0x98>)
 8005444:	9200      	str	r2, [sp, #0]
 8005446:	2200      	movs	r2, #0
 8005448:	f000 f832 	bl	80054b0 <UART_WaitOnFlagUntilTimeout>
 800544c:	1e03      	subs	r3, r0, #0
 800544e:	d001      	beq.n	8005454 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e026      	b.n	80054a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2204      	movs	r2, #4
 800545c:	4013      	ands	r3, r2
 800545e:	2b04      	cmp	r3, #4
 8005460:	d10c      	bne.n	800547c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2280      	movs	r2, #128	; 0x80
 8005466:	03d1      	lsls	r1, r2, #15
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	4a10      	ldr	r2, [pc, #64]	; (80054ac <UART_CheckIdleState+0x98>)
 800546c:	9200      	str	r2, [sp, #0]
 800546e:	2200      	movs	r2, #0
 8005470:	f000 f81e 	bl	80054b0 <UART_WaitOnFlagUntilTimeout>
 8005474:	1e03      	subs	r3, r0, #0
 8005476:	d001      	beq.n	800547c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e012      	b.n	80054a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2288      	movs	r2, #136	; 0x88
 8005480:	2120      	movs	r1, #32
 8005482:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	228c      	movs	r2, #140	; 0x8c
 8005488:	2120      	movs	r1, #32
 800548a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2284      	movs	r2, #132	; 0x84
 800549c:	2100      	movs	r1, #0
 800549e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	0018      	movs	r0, r3
 80054a4:	46bd      	mov	sp, r7
 80054a6:	b004      	add	sp, #16
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	01ffffff 	.word	0x01ffffff

080054b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b094      	sub	sp, #80	; 0x50
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	1dfb      	adds	r3, r7, #7
 80054be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c0:	e0a7      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054c4:	3301      	adds	r3, #1
 80054c6:	d100      	bne.n	80054ca <UART_WaitOnFlagUntilTimeout+0x1a>
 80054c8:	e0a3      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ca:	f7fc f807 	bl	80014dc <HAL_GetTick>
 80054ce:	0002      	movs	r2, r0
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d302      	bcc.n	80054e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80054da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d13f      	bne.n	8005560 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054e0:	f3ef 8310 	mrs	r3, PRIMASK
 80054e4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80054e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80054e8:	647b      	str	r3, [r7, #68]	; 0x44
 80054ea:	2301      	movs	r3, #1
 80054ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f0:	f383 8810 	msr	PRIMASK, r3
}
 80054f4:	46c0      	nop			; (mov r8, r8)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	494e      	ldr	r1, [pc, #312]	; (800563c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005502:	400a      	ands	r2, r1
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005508:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	f383 8810 	msr	PRIMASK, r3
}
 8005510:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005512:	f3ef 8310 	mrs	r3, PRIMASK
 8005516:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800551a:	643b      	str	r3, [r7, #64]	; 0x40
 800551c:	2301      	movs	r3, #1
 800551e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005522:	f383 8810 	msr	PRIMASK, r3
}
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2101      	movs	r1, #1
 8005534:	438a      	bics	r2, r1
 8005536:	609a      	str	r2, [r3, #8]
 8005538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800553c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800553e:	f383 8810 	msr	PRIMASK, r3
}
 8005542:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2288      	movs	r2, #136	; 0x88
 8005548:	2120      	movs	r1, #32
 800554a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	228c      	movs	r2, #140	; 0x8c
 8005550:	2120      	movs	r1, #32
 8005552:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2284      	movs	r2, #132	; 0x84
 8005558:	2100      	movs	r1, #0
 800555a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e069      	b.n	8005634 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2204      	movs	r2, #4
 8005568:	4013      	ands	r3, r2
 800556a:	d052      	beq.n	8005612 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	69da      	ldr	r2, [r3, #28]
 8005572:	2380      	movs	r3, #128	; 0x80
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	401a      	ands	r2, r3
 8005578:	2380      	movs	r3, #128	; 0x80
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	429a      	cmp	r2, r3
 800557e:	d148      	bne.n	8005612 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2280      	movs	r2, #128	; 0x80
 8005586:	0112      	lsls	r2, r2, #4
 8005588:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800558a:	f3ef 8310 	mrs	r3, PRIMASK
 800558e:	613b      	str	r3, [r7, #16]
  return(result);
 8005590:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005594:	2301      	movs	r3, #1
 8005596:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f383 8810 	msr	PRIMASK, r3
}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4924      	ldr	r1, [pc, #144]	; (800563c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80055ac:	400a      	ands	r2, r1
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	f383 8810 	msr	PRIMASK, r3
}
 80055ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055bc:	f3ef 8310 	mrs	r3, PRIMASK
 80055c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80055c2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80055c6:	2301      	movs	r3, #1
 80055c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	f383 8810 	msr	PRIMASK, r3
}
 80055d0:	46c0      	nop			; (mov r8, r8)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2101      	movs	r1, #1
 80055de:	438a      	bics	r2, r1
 80055e0:	609a      	str	r2, [r3, #8]
 80055e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	f383 8810 	msr	PRIMASK, r3
}
 80055ec:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2288      	movs	r2, #136	; 0x88
 80055f2:	2120      	movs	r1, #32
 80055f4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	228c      	movs	r2, #140	; 0x8c
 80055fa:	2120      	movs	r1, #32
 80055fc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2290      	movs	r2, #144	; 0x90
 8005602:	2120      	movs	r1, #32
 8005604:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2284      	movs	r2, #132	; 0x84
 800560a:	2100      	movs	r1, #0
 800560c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e010      	b.n	8005634 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	4013      	ands	r3, r2
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	425a      	negs	r2, r3
 8005622:	4153      	adcs	r3, r2
 8005624:	b2db      	uxtb	r3, r3
 8005626:	001a      	movs	r2, r3
 8005628:	1dfb      	adds	r3, r7, #7
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d100      	bne.n	8005632 <UART_WaitOnFlagUntilTimeout+0x182>
 8005630:	e747      	b.n	80054c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	0018      	movs	r0, r3
 8005636:	46bd      	mov	sp, r7
 8005638:	b014      	add	sp, #80	; 0x50
 800563a:	bd80      	pop	{r7, pc}
 800563c:	fffffe5f 	.word	0xfffffe5f

08005640 <__errno>:
 8005640:	4b01      	ldr	r3, [pc, #4]	; (8005648 <__errno+0x8>)
 8005642:	6818      	ldr	r0, [r3, #0]
 8005644:	4770      	bx	lr
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	2000003c 	.word	0x2000003c

0800564c <__libc_init_array>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	2600      	movs	r6, #0
 8005650:	4d0c      	ldr	r5, [pc, #48]	; (8005684 <__libc_init_array+0x38>)
 8005652:	4c0d      	ldr	r4, [pc, #52]	; (8005688 <__libc_init_array+0x3c>)
 8005654:	1b64      	subs	r4, r4, r5
 8005656:	10a4      	asrs	r4, r4, #2
 8005658:	42a6      	cmp	r6, r4
 800565a:	d109      	bne.n	8005670 <__libc_init_array+0x24>
 800565c:	2600      	movs	r6, #0
 800565e:	f001 f803 	bl	8006668 <_init>
 8005662:	4d0a      	ldr	r5, [pc, #40]	; (800568c <__libc_init_array+0x40>)
 8005664:	4c0a      	ldr	r4, [pc, #40]	; (8005690 <__libc_init_array+0x44>)
 8005666:	1b64      	subs	r4, r4, r5
 8005668:	10a4      	asrs	r4, r4, #2
 800566a:	42a6      	cmp	r6, r4
 800566c:	d105      	bne.n	800567a <__libc_init_array+0x2e>
 800566e:	bd70      	pop	{r4, r5, r6, pc}
 8005670:	00b3      	lsls	r3, r6, #2
 8005672:	58eb      	ldr	r3, [r5, r3]
 8005674:	4798      	blx	r3
 8005676:	3601      	adds	r6, #1
 8005678:	e7ee      	b.n	8005658 <__libc_init_array+0xc>
 800567a:	00b3      	lsls	r3, r6, #2
 800567c:	58eb      	ldr	r3, [r5, r3]
 800567e:	4798      	blx	r3
 8005680:	3601      	adds	r6, #1
 8005682:	e7f2      	b.n	800566a <__libc_init_array+0x1e>
 8005684:	08006adc 	.word	0x08006adc
 8005688:	08006adc 	.word	0x08006adc
 800568c:	08006adc 	.word	0x08006adc
 8005690:	08006ae0 	.word	0x08006ae0

08005694 <memcpy>:
 8005694:	2300      	movs	r3, #0
 8005696:	b510      	push	{r4, lr}
 8005698:	429a      	cmp	r2, r3
 800569a:	d100      	bne.n	800569e <memcpy+0xa>
 800569c:	bd10      	pop	{r4, pc}
 800569e:	5ccc      	ldrb	r4, [r1, r3]
 80056a0:	54c4      	strb	r4, [r0, r3]
 80056a2:	3301      	adds	r3, #1
 80056a4:	e7f8      	b.n	8005698 <memcpy+0x4>

080056a6 <memset>:
 80056a6:	0003      	movs	r3, r0
 80056a8:	1882      	adds	r2, r0, r2
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d100      	bne.n	80056b0 <memset+0xa>
 80056ae:	4770      	bx	lr
 80056b0:	7019      	strb	r1, [r3, #0]
 80056b2:	3301      	adds	r3, #1
 80056b4:	e7f9      	b.n	80056aa <memset+0x4>
	...

080056b8 <iprintf>:
 80056b8:	b40f      	push	{r0, r1, r2, r3}
 80056ba:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <iprintf+0x30>)
 80056bc:	b513      	push	{r0, r1, r4, lr}
 80056be:	681c      	ldr	r4, [r3, #0]
 80056c0:	2c00      	cmp	r4, #0
 80056c2:	d005      	beq.n	80056d0 <iprintf+0x18>
 80056c4:	69a3      	ldr	r3, [r4, #24]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d102      	bne.n	80056d0 <iprintf+0x18>
 80056ca:	0020      	movs	r0, r4
 80056cc:	f000 f870 	bl	80057b0 <__sinit>
 80056d0:	ab05      	add	r3, sp, #20
 80056d2:	0020      	movs	r0, r4
 80056d4:	9a04      	ldr	r2, [sp, #16]
 80056d6:	68a1      	ldr	r1, [r4, #8]
 80056d8:	9301      	str	r3, [sp, #4]
 80056da:	f000 f9cd 	bl	8005a78 <_vfiprintf_r>
 80056de:	bc16      	pop	{r1, r2, r4}
 80056e0:	bc08      	pop	{r3}
 80056e2:	b004      	add	sp, #16
 80056e4:	4718      	bx	r3
 80056e6:	46c0      	nop			; (mov r8, r8)
 80056e8:	2000003c 	.word	0x2000003c

080056ec <std>:
 80056ec:	2300      	movs	r3, #0
 80056ee:	b510      	push	{r4, lr}
 80056f0:	0004      	movs	r4, r0
 80056f2:	6003      	str	r3, [r0, #0]
 80056f4:	6043      	str	r3, [r0, #4]
 80056f6:	6083      	str	r3, [r0, #8]
 80056f8:	8181      	strh	r1, [r0, #12]
 80056fa:	6643      	str	r3, [r0, #100]	; 0x64
 80056fc:	0019      	movs	r1, r3
 80056fe:	81c2      	strh	r2, [r0, #14]
 8005700:	6103      	str	r3, [r0, #16]
 8005702:	6143      	str	r3, [r0, #20]
 8005704:	6183      	str	r3, [r0, #24]
 8005706:	2208      	movs	r2, #8
 8005708:	305c      	adds	r0, #92	; 0x5c
 800570a:	f7ff ffcc 	bl	80056a6 <memset>
 800570e:	4b05      	ldr	r3, [pc, #20]	; (8005724 <std+0x38>)
 8005710:	6224      	str	r4, [r4, #32]
 8005712:	6263      	str	r3, [r4, #36]	; 0x24
 8005714:	4b04      	ldr	r3, [pc, #16]	; (8005728 <std+0x3c>)
 8005716:	62a3      	str	r3, [r4, #40]	; 0x28
 8005718:	4b04      	ldr	r3, [pc, #16]	; (800572c <std+0x40>)
 800571a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800571c:	4b04      	ldr	r3, [pc, #16]	; (8005730 <std+0x44>)
 800571e:	6323      	str	r3, [r4, #48]	; 0x30
 8005720:	bd10      	pop	{r4, pc}
 8005722:	46c0      	nop			; (mov r8, r8)
 8005724:	08006015 	.word	0x08006015
 8005728:	0800603d 	.word	0x0800603d
 800572c:	08006075 	.word	0x08006075
 8005730:	080060a1 	.word	0x080060a1

08005734 <_cleanup_r>:
 8005734:	b510      	push	{r4, lr}
 8005736:	4902      	ldr	r1, [pc, #8]	; (8005740 <_cleanup_r+0xc>)
 8005738:	f000 f8ba 	bl	80058b0 <_fwalk_reent>
 800573c:	bd10      	pop	{r4, pc}
 800573e:	46c0      	nop			; (mov r8, r8)
 8005740:	080063ad 	.word	0x080063ad

08005744 <__sfmoreglue>:
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	2568      	movs	r5, #104	; 0x68
 8005748:	1e4a      	subs	r2, r1, #1
 800574a:	4355      	muls	r5, r2
 800574c:	000e      	movs	r6, r1
 800574e:	0029      	movs	r1, r5
 8005750:	3174      	adds	r1, #116	; 0x74
 8005752:	f000 f8f3 	bl	800593c <_malloc_r>
 8005756:	1e04      	subs	r4, r0, #0
 8005758:	d008      	beq.n	800576c <__sfmoreglue+0x28>
 800575a:	2100      	movs	r1, #0
 800575c:	002a      	movs	r2, r5
 800575e:	6001      	str	r1, [r0, #0]
 8005760:	6046      	str	r6, [r0, #4]
 8005762:	300c      	adds	r0, #12
 8005764:	60a0      	str	r0, [r4, #8]
 8005766:	3268      	adds	r2, #104	; 0x68
 8005768:	f7ff ff9d 	bl	80056a6 <memset>
 800576c:	0020      	movs	r0, r4
 800576e:	bd70      	pop	{r4, r5, r6, pc}

08005770 <__sfp_lock_acquire>:
 8005770:	b510      	push	{r4, lr}
 8005772:	4802      	ldr	r0, [pc, #8]	; (800577c <__sfp_lock_acquire+0xc>)
 8005774:	f000 f8bd 	bl	80058f2 <__retarget_lock_acquire_recursive>
 8005778:	bd10      	pop	{r4, pc}
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	200001f5 	.word	0x200001f5

08005780 <__sfp_lock_release>:
 8005780:	b510      	push	{r4, lr}
 8005782:	4802      	ldr	r0, [pc, #8]	; (800578c <__sfp_lock_release+0xc>)
 8005784:	f000 f8b6 	bl	80058f4 <__retarget_lock_release_recursive>
 8005788:	bd10      	pop	{r4, pc}
 800578a:	46c0      	nop			; (mov r8, r8)
 800578c:	200001f5 	.word	0x200001f5

08005790 <__sinit_lock_acquire>:
 8005790:	b510      	push	{r4, lr}
 8005792:	4802      	ldr	r0, [pc, #8]	; (800579c <__sinit_lock_acquire+0xc>)
 8005794:	f000 f8ad 	bl	80058f2 <__retarget_lock_acquire_recursive>
 8005798:	bd10      	pop	{r4, pc}
 800579a:	46c0      	nop			; (mov r8, r8)
 800579c:	200001f6 	.word	0x200001f6

080057a0 <__sinit_lock_release>:
 80057a0:	b510      	push	{r4, lr}
 80057a2:	4802      	ldr	r0, [pc, #8]	; (80057ac <__sinit_lock_release+0xc>)
 80057a4:	f000 f8a6 	bl	80058f4 <__retarget_lock_release_recursive>
 80057a8:	bd10      	pop	{r4, pc}
 80057aa:	46c0      	nop			; (mov r8, r8)
 80057ac:	200001f6 	.word	0x200001f6

080057b0 <__sinit>:
 80057b0:	b513      	push	{r0, r1, r4, lr}
 80057b2:	0004      	movs	r4, r0
 80057b4:	f7ff ffec 	bl	8005790 <__sinit_lock_acquire>
 80057b8:	69a3      	ldr	r3, [r4, #24]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <__sinit+0x14>
 80057be:	f7ff ffef 	bl	80057a0 <__sinit_lock_release>
 80057c2:	bd13      	pop	{r0, r1, r4, pc}
 80057c4:	64a3      	str	r3, [r4, #72]	; 0x48
 80057c6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80057c8:	6523      	str	r3, [r4, #80]	; 0x50
 80057ca:	4b13      	ldr	r3, [pc, #76]	; (8005818 <__sinit+0x68>)
 80057cc:	4a13      	ldr	r2, [pc, #76]	; (800581c <__sinit+0x6c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80057d2:	9301      	str	r3, [sp, #4]
 80057d4:	42a3      	cmp	r3, r4
 80057d6:	d101      	bne.n	80057dc <__sinit+0x2c>
 80057d8:	2301      	movs	r3, #1
 80057da:	61a3      	str	r3, [r4, #24]
 80057dc:	0020      	movs	r0, r4
 80057de:	f000 f81f 	bl	8005820 <__sfp>
 80057e2:	6060      	str	r0, [r4, #4]
 80057e4:	0020      	movs	r0, r4
 80057e6:	f000 f81b 	bl	8005820 <__sfp>
 80057ea:	60a0      	str	r0, [r4, #8]
 80057ec:	0020      	movs	r0, r4
 80057ee:	f000 f817 	bl	8005820 <__sfp>
 80057f2:	2200      	movs	r2, #0
 80057f4:	2104      	movs	r1, #4
 80057f6:	60e0      	str	r0, [r4, #12]
 80057f8:	6860      	ldr	r0, [r4, #4]
 80057fa:	f7ff ff77 	bl	80056ec <std>
 80057fe:	2201      	movs	r2, #1
 8005800:	2109      	movs	r1, #9
 8005802:	68a0      	ldr	r0, [r4, #8]
 8005804:	f7ff ff72 	bl	80056ec <std>
 8005808:	2202      	movs	r2, #2
 800580a:	2112      	movs	r1, #18
 800580c:	68e0      	ldr	r0, [r4, #12]
 800580e:	f7ff ff6d 	bl	80056ec <std>
 8005812:	2301      	movs	r3, #1
 8005814:	61a3      	str	r3, [r4, #24]
 8005816:	e7d2      	b.n	80057be <__sinit+0xe>
 8005818:	08006a3c 	.word	0x08006a3c
 800581c:	08005735 	.word	0x08005735

08005820 <__sfp>:
 8005820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005822:	0007      	movs	r7, r0
 8005824:	f7ff ffa4 	bl	8005770 <__sfp_lock_acquire>
 8005828:	4b1f      	ldr	r3, [pc, #124]	; (80058a8 <__sfp+0x88>)
 800582a:	681e      	ldr	r6, [r3, #0]
 800582c:	69b3      	ldr	r3, [r6, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d102      	bne.n	8005838 <__sfp+0x18>
 8005832:	0030      	movs	r0, r6
 8005834:	f7ff ffbc 	bl	80057b0 <__sinit>
 8005838:	3648      	adds	r6, #72	; 0x48
 800583a:	68b4      	ldr	r4, [r6, #8]
 800583c:	6873      	ldr	r3, [r6, #4]
 800583e:	3b01      	subs	r3, #1
 8005840:	d504      	bpl.n	800584c <__sfp+0x2c>
 8005842:	6833      	ldr	r3, [r6, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d022      	beq.n	800588e <__sfp+0x6e>
 8005848:	6836      	ldr	r6, [r6, #0]
 800584a:	e7f6      	b.n	800583a <__sfp+0x1a>
 800584c:	220c      	movs	r2, #12
 800584e:	5ea5      	ldrsh	r5, [r4, r2]
 8005850:	2d00      	cmp	r5, #0
 8005852:	d11a      	bne.n	800588a <__sfp+0x6a>
 8005854:	0020      	movs	r0, r4
 8005856:	4b15      	ldr	r3, [pc, #84]	; (80058ac <__sfp+0x8c>)
 8005858:	3058      	adds	r0, #88	; 0x58
 800585a:	60e3      	str	r3, [r4, #12]
 800585c:	6665      	str	r5, [r4, #100]	; 0x64
 800585e:	f000 f847 	bl	80058f0 <__retarget_lock_init_recursive>
 8005862:	f7ff ff8d 	bl	8005780 <__sfp_lock_release>
 8005866:	0020      	movs	r0, r4
 8005868:	2208      	movs	r2, #8
 800586a:	0029      	movs	r1, r5
 800586c:	6025      	str	r5, [r4, #0]
 800586e:	60a5      	str	r5, [r4, #8]
 8005870:	6065      	str	r5, [r4, #4]
 8005872:	6125      	str	r5, [r4, #16]
 8005874:	6165      	str	r5, [r4, #20]
 8005876:	61a5      	str	r5, [r4, #24]
 8005878:	305c      	adds	r0, #92	; 0x5c
 800587a:	f7ff ff14 	bl	80056a6 <memset>
 800587e:	6365      	str	r5, [r4, #52]	; 0x34
 8005880:	63a5      	str	r5, [r4, #56]	; 0x38
 8005882:	64a5      	str	r5, [r4, #72]	; 0x48
 8005884:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005886:	0020      	movs	r0, r4
 8005888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800588a:	3468      	adds	r4, #104	; 0x68
 800588c:	e7d7      	b.n	800583e <__sfp+0x1e>
 800588e:	2104      	movs	r1, #4
 8005890:	0038      	movs	r0, r7
 8005892:	f7ff ff57 	bl	8005744 <__sfmoreglue>
 8005896:	1e04      	subs	r4, r0, #0
 8005898:	6030      	str	r0, [r6, #0]
 800589a:	d1d5      	bne.n	8005848 <__sfp+0x28>
 800589c:	f7ff ff70 	bl	8005780 <__sfp_lock_release>
 80058a0:	230c      	movs	r3, #12
 80058a2:	603b      	str	r3, [r7, #0]
 80058a4:	e7ef      	b.n	8005886 <__sfp+0x66>
 80058a6:	46c0      	nop			; (mov r8, r8)
 80058a8:	08006a3c 	.word	0x08006a3c
 80058ac:	ffff0001 	.word	0xffff0001

080058b0 <_fwalk_reent>:
 80058b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058b2:	0004      	movs	r4, r0
 80058b4:	0006      	movs	r6, r0
 80058b6:	2700      	movs	r7, #0
 80058b8:	9101      	str	r1, [sp, #4]
 80058ba:	3448      	adds	r4, #72	; 0x48
 80058bc:	6863      	ldr	r3, [r4, #4]
 80058be:	68a5      	ldr	r5, [r4, #8]
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	9b00      	ldr	r3, [sp, #0]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	d504      	bpl.n	80058d4 <_fwalk_reent+0x24>
 80058ca:	6824      	ldr	r4, [r4, #0]
 80058cc:	2c00      	cmp	r4, #0
 80058ce:	d1f5      	bne.n	80058bc <_fwalk_reent+0xc>
 80058d0:	0038      	movs	r0, r7
 80058d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058d4:	89ab      	ldrh	r3, [r5, #12]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d908      	bls.n	80058ec <_fwalk_reent+0x3c>
 80058da:	220e      	movs	r2, #14
 80058dc:	5eab      	ldrsh	r3, [r5, r2]
 80058de:	3301      	adds	r3, #1
 80058e0:	d004      	beq.n	80058ec <_fwalk_reent+0x3c>
 80058e2:	0029      	movs	r1, r5
 80058e4:	0030      	movs	r0, r6
 80058e6:	9b01      	ldr	r3, [sp, #4]
 80058e8:	4798      	blx	r3
 80058ea:	4307      	orrs	r7, r0
 80058ec:	3568      	adds	r5, #104	; 0x68
 80058ee:	e7e8      	b.n	80058c2 <_fwalk_reent+0x12>

080058f0 <__retarget_lock_init_recursive>:
 80058f0:	4770      	bx	lr

080058f2 <__retarget_lock_acquire_recursive>:
 80058f2:	4770      	bx	lr

080058f4 <__retarget_lock_release_recursive>:
 80058f4:	4770      	bx	lr
	...

080058f8 <sbrk_aligned>:
 80058f8:	b570      	push	{r4, r5, r6, lr}
 80058fa:	4e0f      	ldr	r6, [pc, #60]	; (8005938 <sbrk_aligned+0x40>)
 80058fc:	000d      	movs	r5, r1
 80058fe:	6831      	ldr	r1, [r6, #0]
 8005900:	0004      	movs	r4, r0
 8005902:	2900      	cmp	r1, #0
 8005904:	d102      	bne.n	800590c <sbrk_aligned+0x14>
 8005906:	f000 fb73 	bl	8005ff0 <_sbrk_r>
 800590a:	6030      	str	r0, [r6, #0]
 800590c:	0029      	movs	r1, r5
 800590e:	0020      	movs	r0, r4
 8005910:	f000 fb6e 	bl	8005ff0 <_sbrk_r>
 8005914:	1c43      	adds	r3, r0, #1
 8005916:	d00a      	beq.n	800592e <sbrk_aligned+0x36>
 8005918:	2303      	movs	r3, #3
 800591a:	1cc5      	adds	r5, r0, #3
 800591c:	439d      	bics	r5, r3
 800591e:	42a8      	cmp	r0, r5
 8005920:	d007      	beq.n	8005932 <sbrk_aligned+0x3a>
 8005922:	1a29      	subs	r1, r5, r0
 8005924:	0020      	movs	r0, r4
 8005926:	f000 fb63 	bl	8005ff0 <_sbrk_r>
 800592a:	1c43      	adds	r3, r0, #1
 800592c:	d101      	bne.n	8005932 <sbrk_aligned+0x3a>
 800592e:	2501      	movs	r5, #1
 8005930:	426d      	negs	r5, r5
 8005932:	0028      	movs	r0, r5
 8005934:	bd70      	pop	{r4, r5, r6, pc}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	200001fc 	.word	0x200001fc

0800593c <_malloc_r>:
 800593c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800593e:	2203      	movs	r2, #3
 8005940:	1ccb      	adds	r3, r1, #3
 8005942:	4393      	bics	r3, r2
 8005944:	3308      	adds	r3, #8
 8005946:	0006      	movs	r6, r0
 8005948:	001f      	movs	r7, r3
 800594a:	2b0c      	cmp	r3, #12
 800594c:	d232      	bcs.n	80059b4 <_malloc_r+0x78>
 800594e:	270c      	movs	r7, #12
 8005950:	42b9      	cmp	r1, r7
 8005952:	d831      	bhi.n	80059b8 <_malloc_r+0x7c>
 8005954:	0030      	movs	r0, r6
 8005956:	f000 fdf5 	bl	8006544 <__malloc_lock>
 800595a:	4d32      	ldr	r5, [pc, #200]	; (8005a24 <_malloc_r+0xe8>)
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	001c      	movs	r4, r3
 8005960:	2c00      	cmp	r4, #0
 8005962:	d12e      	bne.n	80059c2 <_malloc_r+0x86>
 8005964:	0039      	movs	r1, r7
 8005966:	0030      	movs	r0, r6
 8005968:	f7ff ffc6 	bl	80058f8 <sbrk_aligned>
 800596c:	0004      	movs	r4, r0
 800596e:	1c43      	adds	r3, r0, #1
 8005970:	d11e      	bne.n	80059b0 <_malloc_r+0x74>
 8005972:	682c      	ldr	r4, [r5, #0]
 8005974:	0025      	movs	r5, r4
 8005976:	2d00      	cmp	r5, #0
 8005978:	d14a      	bne.n	8005a10 <_malloc_r+0xd4>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	0029      	movs	r1, r5
 800597e:	18e3      	adds	r3, r4, r3
 8005980:	0030      	movs	r0, r6
 8005982:	9301      	str	r3, [sp, #4]
 8005984:	f000 fb34 	bl	8005ff0 <_sbrk_r>
 8005988:	9b01      	ldr	r3, [sp, #4]
 800598a:	4283      	cmp	r3, r0
 800598c:	d143      	bne.n	8005a16 <_malloc_r+0xda>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	3703      	adds	r7, #3
 8005992:	1aff      	subs	r7, r7, r3
 8005994:	2303      	movs	r3, #3
 8005996:	439f      	bics	r7, r3
 8005998:	3708      	adds	r7, #8
 800599a:	2f0c      	cmp	r7, #12
 800599c:	d200      	bcs.n	80059a0 <_malloc_r+0x64>
 800599e:	270c      	movs	r7, #12
 80059a0:	0039      	movs	r1, r7
 80059a2:	0030      	movs	r0, r6
 80059a4:	f7ff ffa8 	bl	80058f8 <sbrk_aligned>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d034      	beq.n	8005a16 <_malloc_r+0xda>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	19df      	adds	r7, r3, r7
 80059b0:	6027      	str	r7, [r4, #0]
 80059b2:	e013      	b.n	80059dc <_malloc_r+0xa0>
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	dacb      	bge.n	8005950 <_malloc_r+0x14>
 80059b8:	230c      	movs	r3, #12
 80059ba:	2500      	movs	r5, #0
 80059bc:	6033      	str	r3, [r6, #0]
 80059be:	0028      	movs	r0, r5
 80059c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059c2:	6822      	ldr	r2, [r4, #0]
 80059c4:	1bd1      	subs	r1, r2, r7
 80059c6:	d420      	bmi.n	8005a0a <_malloc_r+0xce>
 80059c8:	290b      	cmp	r1, #11
 80059ca:	d917      	bls.n	80059fc <_malloc_r+0xc0>
 80059cc:	19e2      	adds	r2, r4, r7
 80059ce:	6027      	str	r7, [r4, #0]
 80059d0:	42a3      	cmp	r3, r4
 80059d2:	d111      	bne.n	80059f8 <_malloc_r+0xbc>
 80059d4:	602a      	str	r2, [r5, #0]
 80059d6:	6863      	ldr	r3, [r4, #4]
 80059d8:	6011      	str	r1, [r2, #0]
 80059da:	6053      	str	r3, [r2, #4]
 80059dc:	0030      	movs	r0, r6
 80059de:	0025      	movs	r5, r4
 80059e0:	f000 fdb8 	bl	8006554 <__malloc_unlock>
 80059e4:	2207      	movs	r2, #7
 80059e6:	350b      	adds	r5, #11
 80059e8:	1d23      	adds	r3, r4, #4
 80059ea:	4395      	bics	r5, r2
 80059ec:	1aea      	subs	r2, r5, r3
 80059ee:	429d      	cmp	r5, r3
 80059f0:	d0e5      	beq.n	80059be <_malloc_r+0x82>
 80059f2:	1b5b      	subs	r3, r3, r5
 80059f4:	50a3      	str	r3, [r4, r2]
 80059f6:	e7e2      	b.n	80059be <_malloc_r+0x82>
 80059f8:	605a      	str	r2, [r3, #4]
 80059fa:	e7ec      	b.n	80059d6 <_malloc_r+0x9a>
 80059fc:	6862      	ldr	r2, [r4, #4]
 80059fe:	42a3      	cmp	r3, r4
 8005a00:	d101      	bne.n	8005a06 <_malloc_r+0xca>
 8005a02:	602a      	str	r2, [r5, #0]
 8005a04:	e7ea      	b.n	80059dc <_malloc_r+0xa0>
 8005a06:	605a      	str	r2, [r3, #4]
 8005a08:	e7e8      	b.n	80059dc <_malloc_r+0xa0>
 8005a0a:	0023      	movs	r3, r4
 8005a0c:	6864      	ldr	r4, [r4, #4]
 8005a0e:	e7a7      	b.n	8005960 <_malloc_r+0x24>
 8005a10:	002c      	movs	r4, r5
 8005a12:	686d      	ldr	r5, [r5, #4]
 8005a14:	e7af      	b.n	8005976 <_malloc_r+0x3a>
 8005a16:	230c      	movs	r3, #12
 8005a18:	0030      	movs	r0, r6
 8005a1a:	6033      	str	r3, [r6, #0]
 8005a1c:	f000 fd9a 	bl	8006554 <__malloc_unlock>
 8005a20:	e7cd      	b.n	80059be <_malloc_r+0x82>
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	200001f8 	.word	0x200001f8

08005a28 <__sfputc_r>:
 8005a28:	6893      	ldr	r3, [r2, #8]
 8005a2a:	b510      	push	{r4, lr}
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	6093      	str	r3, [r2, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	da04      	bge.n	8005a3e <__sfputc_r+0x16>
 8005a34:	6994      	ldr	r4, [r2, #24]
 8005a36:	42a3      	cmp	r3, r4
 8005a38:	db07      	blt.n	8005a4a <__sfputc_r+0x22>
 8005a3a:	290a      	cmp	r1, #10
 8005a3c:	d005      	beq.n	8005a4a <__sfputc_r+0x22>
 8005a3e:	6813      	ldr	r3, [r2, #0]
 8005a40:	1c58      	adds	r0, r3, #1
 8005a42:	6010      	str	r0, [r2, #0]
 8005a44:	7019      	strb	r1, [r3, #0]
 8005a46:	0008      	movs	r0, r1
 8005a48:	bd10      	pop	{r4, pc}
 8005a4a:	f000 fb2f 	bl	80060ac <__swbuf_r>
 8005a4e:	0001      	movs	r1, r0
 8005a50:	e7f9      	b.n	8005a46 <__sfputc_r+0x1e>

08005a52 <__sfputs_r>:
 8005a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a54:	0006      	movs	r6, r0
 8005a56:	000f      	movs	r7, r1
 8005a58:	0014      	movs	r4, r2
 8005a5a:	18d5      	adds	r5, r2, r3
 8005a5c:	42ac      	cmp	r4, r5
 8005a5e:	d101      	bne.n	8005a64 <__sfputs_r+0x12>
 8005a60:	2000      	movs	r0, #0
 8005a62:	e007      	b.n	8005a74 <__sfputs_r+0x22>
 8005a64:	7821      	ldrb	r1, [r4, #0]
 8005a66:	003a      	movs	r2, r7
 8005a68:	0030      	movs	r0, r6
 8005a6a:	f7ff ffdd 	bl	8005a28 <__sfputc_r>
 8005a6e:	3401      	adds	r4, #1
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	d1f3      	bne.n	8005a5c <__sfputs_r+0xa>
 8005a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a78 <_vfiprintf_r>:
 8005a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a7a:	b0a1      	sub	sp, #132	; 0x84
 8005a7c:	0006      	movs	r6, r0
 8005a7e:	000c      	movs	r4, r1
 8005a80:	001f      	movs	r7, r3
 8005a82:	9203      	str	r2, [sp, #12]
 8005a84:	2800      	cmp	r0, #0
 8005a86:	d004      	beq.n	8005a92 <_vfiprintf_r+0x1a>
 8005a88:	6983      	ldr	r3, [r0, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <_vfiprintf_r+0x1a>
 8005a8e:	f7ff fe8f 	bl	80057b0 <__sinit>
 8005a92:	4b8e      	ldr	r3, [pc, #568]	; (8005ccc <_vfiprintf_r+0x254>)
 8005a94:	429c      	cmp	r4, r3
 8005a96:	d11c      	bne.n	8005ad2 <_vfiprintf_r+0x5a>
 8005a98:	6874      	ldr	r4, [r6, #4]
 8005a9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a9c:	07db      	lsls	r3, r3, #31
 8005a9e:	d405      	bmi.n	8005aac <_vfiprintf_r+0x34>
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	059b      	lsls	r3, r3, #22
 8005aa4:	d402      	bmi.n	8005aac <_vfiprintf_r+0x34>
 8005aa6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aa8:	f7ff ff23 	bl	80058f2 <__retarget_lock_acquire_recursive>
 8005aac:	89a3      	ldrh	r3, [r4, #12]
 8005aae:	071b      	lsls	r3, r3, #28
 8005ab0:	d502      	bpl.n	8005ab8 <_vfiprintf_r+0x40>
 8005ab2:	6923      	ldr	r3, [r4, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d11d      	bne.n	8005af4 <_vfiprintf_r+0x7c>
 8005ab8:	0021      	movs	r1, r4
 8005aba:	0030      	movs	r0, r6
 8005abc:	f000 fb60 	bl	8006180 <__swsetup_r>
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	d017      	beq.n	8005af4 <_vfiprintf_r+0x7c>
 8005ac4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ac6:	07db      	lsls	r3, r3, #31
 8005ac8:	d50d      	bpl.n	8005ae6 <_vfiprintf_r+0x6e>
 8005aca:	2001      	movs	r0, #1
 8005acc:	4240      	negs	r0, r0
 8005ace:	b021      	add	sp, #132	; 0x84
 8005ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ad2:	4b7f      	ldr	r3, [pc, #508]	; (8005cd0 <_vfiprintf_r+0x258>)
 8005ad4:	429c      	cmp	r4, r3
 8005ad6:	d101      	bne.n	8005adc <_vfiprintf_r+0x64>
 8005ad8:	68b4      	ldr	r4, [r6, #8]
 8005ada:	e7de      	b.n	8005a9a <_vfiprintf_r+0x22>
 8005adc:	4b7d      	ldr	r3, [pc, #500]	; (8005cd4 <_vfiprintf_r+0x25c>)
 8005ade:	429c      	cmp	r4, r3
 8005ae0:	d1db      	bne.n	8005a9a <_vfiprintf_r+0x22>
 8005ae2:	68f4      	ldr	r4, [r6, #12]
 8005ae4:	e7d9      	b.n	8005a9a <_vfiprintf_r+0x22>
 8005ae6:	89a3      	ldrh	r3, [r4, #12]
 8005ae8:	059b      	lsls	r3, r3, #22
 8005aea:	d4ee      	bmi.n	8005aca <_vfiprintf_r+0x52>
 8005aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aee:	f7ff ff01 	bl	80058f4 <__retarget_lock_release_recursive>
 8005af2:	e7ea      	b.n	8005aca <_vfiprintf_r+0x52>
 8005af4:	2300      	movs	r3, #0
 8005af6:	ad08      	add	r5, sp, #32
 8005af8:	616b      	str	r3, [r5, #20]
 8005afa:	3320      	adds	r3, #32
 8005afc:	766b      	strb	r3, [r5, #25]
 8005afe:	3310      	adds	r3, #16
 8005b00:	76ab      	strb	r3, [r5, #26]
 8005b02:	9707      	str	r7, [sp, #28]
 8005b04:	9f03      	ldr	r7, [sp, #12]
 8005b06:	783b      	ldrb	r3, [r7, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <_vfiprintf_r+0x98>
 8005b0c:	2b25      	cmp	r3, #37	; 0x25
 8005b0e:	d14e      	bne.n	8005bae <_vfiprintf_r+0x136>
 8005b10:	9b03      	ldr	r3, [sp, #12]
 8005b12:	1afb      	subs	r3, r7, r3
 8005b14:	9305      	str	r3, [sp, #20]
 8005b16:	9b03      	ldr	r3, [sp, #12]
 8005b18:	429f      	cmp	r7, r3
 8005b1a:	d00d      	beq.n	8005b38 <_vfiprintf_r+0xc0>
 8005b1c:	9b05      	ldr	r3, [sp, #20]
 8005b1e:	0021      	movs	r1, r4
 8005b20:	0030      	movs	r0, r6
 8005b22:	9a03      	ldr	r2, [sp, #12]
 8005b24:	f7ff ff95 	bl	8005a52 <__sfputs_r>
 8005b28:	1c43      	adds	r3, r0, #1
 8005b2a:	d100      	bne.n	8005b2e <_vfiprintf_r+0xb6>
 8005b2c:	e0b5      	b.n	8005c9a <_vfiprintf_r+0x222>
 8005b2e:	696a      	ldr	r2, [r5, #20]
 8005b30:	9b05      	ldr	r3, [sp, #20]
 8005b32:	4694      	mov	ip, r2
 8005b34:	4463      	add	r3, ip
 8005b36:	616b      	str	r3, [r5, #20]
 8005b38:	783b      	ldrb	r3, [r7, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d100      	bne.n	8005b40 <_vfiprintf_r+0xc8>
 8005b3e:	e0ac      	b.n	8005c9a <_vfiprintf_r+0x222>
 8005b40:	2201      	movs	r2, #1
 8005b42:	1c7b      	adds	r3, r7, #1
 8005b44:	9303      	str	r3, [sp, #12]
 8005b46:	2300      	movs	r3, #0
 8005b48:	4252      	negs	r2, r2
 8005b4a:	606a      	str	r2, [r5, #4]
 8005b4c:	a904      	add	r1, sp, #16
 8005b4e:	3254      	adds	r2, #84	; 0x54
 8005b50:	1852      	adds	r2, r2, r1
 8005b52:	602b      	str	r3, [r5, #0]
 8005b54:	60eb      	str	r3, [r5, #12]
 8005b56:	60ab      	str	r3, [r5, #8]
 8005b58:	7013      	strb	r3, [r2, #0]
 8005b5a:	65ab      	str	r3, [r5, #88]	; 0x58
 8005b5c:	9b03      	ldr	r3, [sp, #12]
 8005b5e:	2205      	movs	r2, #5
 8005b60:	7819      	ldrb	r1, [r3, #0]
 8005b62:	485d      	ldr	r0, [pc, #372]	; (8005cd8 <_vfiprintf_r+0x260>)
 8005b64:	f000 fce2 	bl	800652c <memchr>
 8005b68:	9b03      	ldr	r3, [sp, #12]
 8005b6a:	1c5f      	adds	r7, r3, #1
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d120      	bne.n	8005bb2 <_vfiprintf_r+0x13a>
 8005b70:	682a      	ldr	r2, [r5, #0]
 8005b72:	06d3      	lsls	r3, r2, #27
 8005b74:	d504      	bpl.n	8005b80 <_vfiprintf_r+0x108>
 8005b76:	2353      	movs	r3, #83	; 0x53
 8005b78:	a904      	add	r1, sp, #16
 8005b7a:	185b      	adds	r3, r3, r1
 8005b7c:	2120      	movs	r1, #32
 8005b7e:	7019      	strb	r1, [r3, #0]
 8005b80:	0713      	lsls	r3, r2, #28
 8005b82:	d504      	bpl.n	8005b8e <_vfiprintf_r+0x116>
 8005b84:	2353      	movs	r3, #83	; 0x53
 8005b86:	a904      	add	r1, sp, #16
 8005b88:	185b      	adds	r3, r3, r1
 8005b8a:	212b      	movs	r1, #43	; 0x2b
 8005b8c:	7019      	strb	r1, [r3, #0]
 8005b8e:	9b03      	ldr	r3, [sp, #12]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b2a      	cmp	r3, #42	; 0x2a
 8005b94:	d016      	beq.n	8005bc4 <_vfiprintf_r+0x14c>
 8005b96:	2100      	movs	r1, #0
 8005b98:	68eb      	ldr	r3, [r5, #12]
 8005b9a:	9f03      	ldr	r7, [sp, #12]
 8005b9c:	783a      	ldrb	r2, [r7, #0]
 8005b9e:	1c78      	adds	r0, r7, #1
 8005ba0:	3a30      	subs	r2, #48	; 0x30
 8005ba2:	4684      	mov	ip, r0
 8005ba4:	2a09      	cmp	r2, #9
 8005ba6:	d94f      	bls.n	8005c48 <_vfiprintf_r+0x1d0>
 8005ba8:	2900      	cmp	r1, #0
 8005baa:	d111      	bne.n	8005bd0 <_vfiprintf_r+0x158>
 8005bac:	e017      	b.n	8005bde <_vfiprintf_r+0x166>
 8005bae:	3701      	adds	r7, #1
 8005bb0:	e7a9      	b.n	8005b06 <_vfiprintf_r+0x8e>
 8005bb2:	4b49      	ldr	r3, [pc, #292]	; (8005cd8 <_vfiprintf_r+0x260>)
 8005bb4:	682a      	ldr	r2, [r5, #0]
 8005bb6:	1ac0      	subs	r0, r0, r3
 8005bb8:	2301      	movs	r3, #1
 8005bba:	4083      	lsls	r3, r0
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	602b      	str	r3, [r5, #0]
 8005bc0:	9703      	str	r7, [sp, #12]
 8005bc2:	e7cb      	b.n	8005b5c <_vfiprintf_r+0xe4>
 8005bc4:	9b07      	ldr	r3, [sp, #28]
 8005bc6:	1d19      	adds	r1, r3, #4
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	9107      	str	r1, [sp, #28]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	db01      	blt.n	8005bd4 <_vfiprintf_r+0x15c>
 8005bd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bd2:	e004      	b.n	8005bde <_vfiprintf_r+0x166>
 8005bd4:	425b      	negs	r3, r3
 8005bd6:	60eb      	str	r3, [r5, #12]
 8005bd8:	2302      	movs	r3, #2
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	602b      	str	r3, [r5, #0]
 8005bde:	783b      	ldrb	r3, [r7, #0]
 8005be0:	2b2e      	cmp	r3, #46	; 0x2e
 8005be2:	d10a      	bne.n	8005bfa <_vfiprintf_r+0x182>
 8005be4:	787b      	ldrb	r3, [r7, #1]
 8005be6:	2b2a      	cmp	r3, #42	; 0x2a
 8005be8:	d137      	bne.n	8005c5a <_vfiprintf_r+0x1e2>
 8005bea:	9b07      	ldr	r3, [sp, #28]
 8005bec:	3702      	adds	r7, #2
 8005bee:	1d1a      	adds	r2, r3, #4
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	9207      	str	r2, [sp, #28]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	db2d      	blt.n	8005c54 <_vfiprintf_r+0x1dc>
 8005bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	7839      	ldrb	r1, [r7, #0]
 8005bfe:	4837      	ldr	r0, [pc, #220]	; (8005cdc <_vfiprintf_r+0x264>)
 8005c00:	f000 fc94 	bl	800652c <memchr>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d007      	beq.n	8005c18 <_vfiprintf_r+0x1a0>
 8005c08:	4b34      	ldr	r3, [pc, #208]	; (8005cdc <_vfiprintf_r+0x264>)
 8005c0a:	682a      	ldr	r2, [r5, #0]
 8005c0c:	1ac0      	subs	r0, r0, r3
 8005c0e:	2340      	movs	r3, #64	; 0x40
 8005c10:	4083      	lsls	r3, r0
 8005c12:	4313      	orrs	r3, r2
 8005c14:	3701      	adds	r7, #1
 8005c16:	602b      	str	r3, [r5, #0]
 8005c18:	7839      	ldrb	r1, [r7, #0]
 8005c1a:	1c7b      	adds	r3, r7, #1
 8005c1c:	2206      	movs	r2, #6
 8005c1e:	4830      	ldr	r0, [pc, #192]	; (8005ce0 <_vfiprintf_r+0x268>)
 8005c20:	9303      	str	r3, [sp, #12]
 8005c22:	7629      	strb	r1, [r5, #24]
 8005c24:	f000 fc82 	bl	800652c <memchr>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	d045      	beq.n	8005cb8 <_vfiprintf_r+0x240>
 8005c2c:	4b2d      	ldr	r3, [pc, #180]	; (8005ce4 <_vfiprintf_r+0x26c>)
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d127      	bne.n	8005c82 <_vfiprintf_r+0x20a>
 8005c32:	2207      	movs	r2, #7
 8005c34:	9b07      	ldr	r3, [sp, #28]
 8005c36:	3307      	adds	r3, #7
 8005c38:	4393      	bics	r3, r2
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	9307      	str	r3, [sp, #28]
 8005c3e:	696b      	ldr	r3, [r5, #20]
 8005c40:	9a04      	ldr	r2, [sp, #16]
 8005c42:	189b      	adds	r3, r3, r2
 8005c44:	616b      	str	r3, [r5, #20]
 8005c46:	e75d      	b.n	8005b04 <_vfiprintf_r+0x8c>
 8005c48:	210a      	movs	r1, #10
 8005c4a:	434b      	muls	r3, r1
 8005c4c:	4667      	mov	r7, ip
 8005c4e:	189b      	adds	r3, r3, r2
 8005c50:	3909      	subs	r1, #9
 8005c52:	e7a3      	b.n	8005b9c <_vfiprintf_r+0x124>
 8005c54:	2301      	movs	r3, #1
 8005c56:	425b      	negs	r3, r3
 8005c58:	e7ce      	b.n	8005bf8 <_vfiprintf_r+0x180>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	001a      	movs	r2, r3
 8005c5e:	3701      	adds	r7, #1
 8005c60:	606b      	str	r3, [r5, #4]
 8005c62:	7839      	ldrb	r1, [r7, #0]
 8005c64:	1c78      	adds	r0, r7, #1
 8005c66:	3930      	subs	r1, #48	; 0x30
 8005c68:	4684      	mov	ip, r0
 8005c6a:	2909      	cmp	r1, #9
 8005c6c:	d903      	bls.n	8005c76 <_vfiprintf_r+0x1fe>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0c3      	beq.n	8005bfa <_vfiprintf_r+0x182>
 8005c72:	9209      	str	r2, [sp, #36]	; 0x24
 8005c74:	e7c1      	b.n	8005bfa <_vfiprintf_r+0x182>
 8005c76:	230a      	movs	r3, #10
 8005c78:	435a      	muls	r2, r3
 8005c7a:	4667      	mov	r7, ip
 8005c7c:	1852      	adds	r2, r2, r1
 8005c7e:	3b09      	subs	r3, #9
 8005c80:	e7ef      	b.n	8005c62 <_vfiprintf_r+0x1ea>
 8005c82:	ab07      	add	r3, sp, #28
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	0022      	movs	r2, r4
 8005c88:	0029      	movs	r1, r5
 8005c8a:	0030      	movs	r0, r6
 8005c8c:	4b16      	ldr	r3, [pc, #88]	; (8005ce8 <_vfiprintf_r+0x270>)
 8005c8e:	e000      	b.n	8005c92 <_vfiprintf_r+0x21a>
 8005c90:	bf00      	nop
 8005c92:	9004      	str	r0, [sp, #16]
 8005c94:	9b04      	ldr	r3, [sp, #16]
 8005c96:	3301      	adds	r3, #1
 8005c98:	d1d1      	bne.n	8005c3e <_vfiprintf_r+0x1c6>
 8005c9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c9c:	07db      	lsls	r3, r3, #31
 8005c9e:	d405      	bmi.n	8005cac <_vfiprintf_r+0x234>
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	059b      	lsls	r3, r3, #22
 8005ca4:	d402      	bmi.n	8005cac <_vfiprintf_r+0x234>
 8005ca6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ca8:	f7ff fe24 	bl	80058f4 <__retarget_lock_release_recursive>
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	065b      	lsls	r3, r3, #25
 8005cb0:	d500      	bpl.n	8005cb4 <_vfiprintf_r+0x23c>
 8005cb2:	e70a      	b.n	8005aca <_vfiprintf_r+0x52>
 8005cb4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005cb6:	e70a      	b.n	8005ace <_vfiprintf_r+0x56>
 8005cb8:	ab07      	add	r3, sp, #28
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	0022      	movs	r2, r4
 8005cbe:	0029      	movs	r1, r5
 8005cc0:	0030      	movs	r0, r6
 8005cc2:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <_vfiprintf_r+0x270>)
 8005cc4:	f000 f882 	bl	8005dcc <_printf_i>
 8005cc8:	e7e3      	b.n	8005c92 <_vfiprintf_r+0x21a>
 8005cca:	46c0      	nop			; (mov r8, r8)
 8005ccc:	08006a60 	.word	0x08006a60
 8005cd0:	08006a80 	.word	0x08006a80
 8005cd4:	08006a40 	.word	0x08006a40
 8005cd8:	08006aa0 	.word	0x08006aa0
 8005cdc:	08006aa6 	.word	0x08006aa6
 8005ce0:	08006aaa 	.word	0x08006aaa
 8005ce4:	00000000 	.word	0x00000000
 8005ce8:	08005a53 	.word	0x08005a53

08005cec <_printf_common>:
 8005cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cee:	0015      	movs	r5, r2
 8005cf0:	9301      	str	r3, [sp, #4]
 8005cf2:	688a      	ldr	r2, [r1, #8]
 8005cf4:	690b      	ldr	r3, [r1, #16]
 8005cf6:	000c      	movs	r4, r1
 8005cf8:	9000      	str	r0, [sp, #0]
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	da00      	bge.n	8005d00 <_printf_common+0x14>
 8005cfe:	0013      	movs	r3, r2
 8005d00:	0022      	movs	r2, r4
 8005d02:	602b      	str	r3, [r5, #0]
 8005d04:	3243      	adds	r2, #67	; 0x43
 8005d06:	7812      	ldrb	r2, [r2, #0]
 8005d08:	2a00      	cmp	r2, #0
 8005d0a:	d001      	beq.n	8005d10 <_printf_common+0x24>
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	602b      	str	r3, [r5, #0]
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	069b      	lsls	r3, r3, #26
 8005d14:	d502      	bpl.n	8005d1c <_printf_common+0x30>
 8005d16:	682b      	ldr	r3, [r5, #0]
 8005d18:	3302      	adds	r3, #2
 8005d1a:	602b      	str	r3, [r5, #0]
 8005d1c:	6822      	ldr	r2, [r4, #0]
 8005d1e:	2306      	movs	r3, #6
 8005d20:	0017      	movs	r7, r2
 8005d22:	401f      	ands	r7, r3
 8005d24:	421a      	tst	r2, r3
 8005d26:	d027      	beq.n	8005d78 <_printf_common+0x8c>
 8005d28:	0023      	movs	r3, r4
 8005d2a:	3343      	adds	r3, #67	; 0x43
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	1e5a      	subs	r2, r3, #1
 8005d30:	4193      	sbcs	r3, r2
 8005d32:	6822      	ldr	r2, [r4, #0]
 8005d34:	0692      	lsls	r2, r2, #26
 8005d36:	d430      	bmi.n	8005d9a <_printf_common+0xae>
 8005d38:	0022      	movs	r2, r4
 8005d3a:	9901      	ldr	r1, [sp, #4]
 8005d3c:	9800      	ldr	r0, [sp, #0]
 8005d3e:	9e08      	ldr	r6, [sp, #32]
 8005d40:	3243      	adds	r2, #67	; 0x43
 8005d42:	47b0      	blx	r6
 8005d44:	1c43      	adds	r3, r0, #1
 8005d46:	d025      	beq.n	8005d94 <_printf_common+0xa8>
 8005d48:	2306      	movs	r3, #6
 8005d4a:	6820      	ldr	r0, [r4, #0]
 8005d4c:	682a      	ldr	r2, [r5, #0]
 8005d4e:	68e1      	ldr	r1, [r4, #12]
 8005d50:	2500      	movs	r5, #0
 8005d52:	4003      	ands	r3, r0
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d103      	bne.n	8005d60 <_printf_common+0x74>
 8005d58:	1a8d      	subs	r5, r1, r2
 8005d5a:	43eb      	mvns	r3, r5
 8005d5c:	17db      	asrs	r3, r3, #31
 8005d5e:	401d      	ands	r5, r3
 8005d60:	68a3      	ldr	r3, [r4, #8]
 8005d62:	6922      	ldr	r2, [r4, #16]
 8005d64:	4293      	cmp	r3, r2
 8005d66:	dd01      	ble.n	8005d6c <_printf_common+0x80>
 8005d68:	1a9b      	subs	r3, r3, r2
 8005d6a:	18ed      	adds	r5, r5, r3
 8005d6c:	2700      	movs	r7, #0
 8005d6e:	42bd      	cmp	r5, r7
 8005d70:	d120      	bne.n	8005db4 <_printf_common+0xc8>
 8005d72:	2000      	movs	r0, #0
 8005d74:	e010      	b.n	8005d98 <_printf_common+0xac>
 8005d76:	3701      	adds	r7, #1
 8005d78:	68e3      	ldr	r3, [r4, #12]
 8005d7a:	682a      	ldr	r2, [r5, #0]
 8005d7c:	1a9b      	subs	r3, r3, r2
 8005d7e:	42bb      	cmp	r3, r7
 8005d80:	ddd2      	ble.n	8005d28 <_printf_common+0x3c>
 8005d82:	0022      	movs	r2, r4
 8005d84:	2301      	movs	r3, #1
 8005d86:	9901      	ldr	r1, [sp, #4]
 8005d88:	9800      	ldr	r0, [sp, #0]
 8005d8a:	9e08      	ldr	r6, [sp, #32]
 8005d8c:	3219      	adds	r2, #25
 8005d8e:	47b0      	blx	r6
 8005d90:	1c43      	adds	r3, r0, #1
 8005d92:	d1f0      	bne.n	8005d76 <_printf_common+0x8a>
 8005d94:	2001      	movs	r0, #1
 8005d96:	4240      	negs	r0, r0
 8005d98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d9a:	2030      	movs	r0, #48	; 0x30
 8005d9c:	18e1      	adds	r1, r4, r3
 8005d9e:	3143      	adds	r1, #67	; 0x43
 8005da0:	7008      	strb	r0, [r1, #0]
 8005da2:	0021      	movs	r1, r4
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	3145      	adds	r1, #69	; 0x45
 8005da8:	7809      	ldrb	r1, [r1, #0]
 8005daa:	18a2      	adds	r2, r4, r2
 8005dac:	3243      	adds	r2, #67	; 0x43
 8005dae:	3302      	adds	r3, #2
 8005db0:	7011      	strb	r1, [r2, #0]
 8005db2:	e7c1      	b.n	8005d38 <_printf_common+0x4c>
 8005db4:	0022      	movs	r2, r4
 8005db6:	2301      	movs	r3, #1
 8005db8:	9901      	ldr	r1, [sp, #4]
 8005dba:	9800      	ldr	r0, [sp, #0]
 8005dbc:	9e08      	ldr	r6, [sp, #32]
 8005dbe:	321a      	adds	r2, #26
 8005dc0:	47b0      	blx	r6
 8005dc2:	1c43      	adds	r3, r0, #1
 8005dc4:	d0e6      	beq.n	8005d94 <_printf_common+0xa8>
 8005dc6:	3701      	adds	r7, #1
 8005dc8:	e7d1      	b.n	8005d6e <_printf_common+0x82>
	...

08005dcc <_printf_i>:
 8005dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dce:	b08b      	sub	sp, #44	; 0x2c
 8005dd0:	9206      	str	r2, [sp, #24]
 8005dd2:	000a      	movs	r2, r1
 8005dd4:	3243      	adds	r2, #67	; 0x43
 8005dd6:	9307      	str	r3, [sp, #28]
 8005dd8:	9005      	str	r0, [sp, #20]
 8005dda:	9204      	str	r2, [sp, #16]
 8005ddc:	7e0a      	ldrb	r2, [r1, #24]
 8005dde:	000c      	movs	r4, r1
 8005de0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005de2:	2a78      	cmp	r2, #120	; 0x78
 8005de4:	d807      	bhi.n	8005df6 <_printf_i+0x2a>
 8005de6:	2a62      	cmp	r2, #98	; 0x62
 8005de8:	d809      	bhi.n	8005dfe <_printf_i+0x32>
 8005dea:	2a00      	cmp	r2, #0
 8005dec:	d100      	bne.n	8005df0 <_printf_i+0x24>
 8005dee:	e0c1      	b.n	8005f74 <_printf_i+0x1a8>
 8005df0:	2a58      	cmp	r2, #88	; 0x58
 8005df2:	d100      	bne.n	8005df6 <_printf_i+0x2a>
 8005df4:	e08c      	b.n	8005f10 <_printf_i+0x144>
 8005df6:	0026      	movs	r6, r4
 8005df8:	3642      	adds	r6, #66	; 0x42
 8005dfa:	7032      	strb	r2, [r6, #0]
 8005dfc:	e022      	b.n	8005e44 <_printf_i+0x78>
 8005dfe:	0010      	movs	r0, r2
 8005e00:	3863      	subs	r0, #99	; 0x63
 8005e02:	2815      	cmp	r0, #21
 8005e04:	d8f7      	bhi.n	8005df6 <_printf_i+0x2a>
 8005e06:	f7fa f97d 	bl	8000104 <__gnu_thumb1_case_shi>
 8005e0a:	0016      	.short	0x0016
 8005e0c:	fff6001f 	.word	0xfff6001f
 8005e10:	fff6fff6 	.word	0xfff6fff6
 8005e14:	001ffff6 	.word	0x001ffff6
 8005e18:	fff6fff6 	.word	0xfff6fff6
 8005e1c:	fff6fff6 	.word	0xfff6fff6
 8005e20:	003600a8 	.word	0x003600a8
 8005e24:	fff6009a 	.word	0xfff6009a
 8005e28:	00b9fff6 	.word	0x00b9fff6
 8005e2c:	0036fff6 	.word	0x0036fff6
 8005e30:	fff6fff6 	.word	0xfff6fff6
 8005e34:	009e      	.short	0x009e
 8005e36:	0026      	movs	r6, r4
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	3642      	adds	r6, #66	; 0x42
 8005e3c:	1d11      	adds	r1, r2, #4
 8005e3e:	6019      	str	r1, [r3, #0]
 8005e40:	6813      	ldr	r3, [r2, #0]
 8005e42:	7033      	strb	r3, [r6, #0]
 8005e44:	2301      	movs	r3, #1
 8005e46:	e0a7      	b.n	8005f98 <_printf_i+0x1cc>
 8005e48:	6808      	ldr	r0, [r1, #0]
 8005e4a:	6819      	ldr	r1, [r3, #0]
 8005e4c:	1d0a      	adds	r2, r1, #4
 8005e4e:	0605      	lsls	r5, r0, #24
 8005e50:	d50b      	bpl.n	8005e6a <_printf_i+0x9e>
 8005e52:	680d      	ldr	r5, [r1, #0]
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	2d00      	cmp	r5, #0
 8005e58:	da03      	bge.n	8005e62 <_printf_i+0x96>
 8005e5a:	232d      	movs	r3, #45	; 0x2d
 8005e5c:	9a04      	ldr	r2, [sp, #16]
 8005e5e:	426d      	negs	r5, r5
 8005e60:	7013      	strb	r3, [r2, #0]
 8005e62:	4b61      	ldr	r3, [pc, #388]	; (8005fe8 <_printf_i+0x21c>)
 8005e64:	270a      	movs	r7, #10
 8005e66:	9303      	str	r3, [sp, #12]
 8005e68:	e01b      	b.n	8005ea2 <_printf_i+0xd6>
 8005e6a:	680d      	ldr	r5, [r1, #0]
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	0641      	lsls	r1, r0, #25
 8005e70:	d5f1      	bpl.n	8005e56 <_printf_i+0x8a>
 8005e72:	b22d      	sxth	r5, r5
 8005e74:	e7ef      	b.n	8005e56 <_printf_i+0x8a>
 8005e76:	680d      	ldr	r5, [r1, #0]
 8005e78:	6819      	ldr	r1, [r3, #0]
 8005e7a:	1d08      	adds	r0, r1, #4
 8005e7c:	6018      	str	r0, [r3, #0]
 8005e7e:	062e      	lsls	r6, r5, #24
 8005e80:	d501      	bpl.n	8005e86 <_printf_i+0xba>
 8005e82:	680d      	ldr	r5, [r1, #0]
 8005e84:	e003      	b.n	8005e8e <_printf_i+0xc2>
 8005e86:	066d      	lsls	r5, r5, #25
 8005e88:	d5fb      	bpl.n	8005e82 <_printf_i+0xb6>
 8005e8a:	680d      	ldr	r5, [r1, #0]
 8005e8c:	b2ad      	uxth	r5, r5
 8005e8e:	4b56      	ldr	r3, [pc, #344]	; (8005fe8 <_printf_i+0x21c>)
 8005e90:	2708      	movs	r7, #8
 8005e92:	9303      	str	r3, [sp, #12]
 8005e94:	2a6f      	cmp	r2, #111	; 0x6f
 8005e96:	d000      	beq.n	8005e9a <_printf_i+0xce>
 8005e98:	3702      	adds	r7, #2
 8005e9a:	0023      	movs	r3, r4
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	3343      	adds	r3, #67	; 0x43
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	6863      	ldr	r3, [r4, #4]
 8005ea4:	60a3      	str	r3, [r4, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	db03      	blt.n	8005eb2 <_printf_i+0xe6>
 8005eaa:	2204      	movs	r2, #4
 8005eac:	6821      	ldr	r1, [r4, #0]
 8005eae:	4391      	bics	r1, r2
 8005eb0:	6021      	str	r1, [r4, #0]
 8005eb2:	2d00      	cmp	r5, #0
 8005eb4:	d102      	bne.n	8005ebc <_printf_i+0xf0>
 8005eb6:	9e04      	ldr	r6, [sp, #16]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00c      	beq.n	8005ed6 <_printf_i+0x10a>
 8005ebc:	9e04      	ldr	r6, [sp, #16]
 8005ebe:	0028      	movs	r0, r5
 8005ec0:	0039      	movs	r1, r7
 8005ec2:	f7fa f9af 	bl	8000224 <__aeabi_uidivmod>
 8005ec6:	9b03      	ldr	r3, [sp, #12]
 8005ec8:	3e01      	subs	r6, #1
 8005eca:	5c5b      	ldrb	r3, [r3, r1]
 8005ecc:	7033      	strb	r3, [r6, #0]
 8005ece:	002b      	movs	r3, r5
 8005ed0:	0005      	movs	r5, r0
 8005ed2:	429f      	cmp	r7, r3
 8005ed4:	d9f3      	bls.n	8005ebe <_printf_i+0xf2>
 8005ed6:	2f08      	cmp	r7, #8
 8005ed8:	d109      	bne.n	8005eee <_printf_i+0x122>
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	07db      	lsls	r3, r3, #31
 8005ede:	d506      	bpl.n	8005eee <_printf_i+0x122>
 8005ee0:	6863      	ldr	r3, [r4, #4]
 8005ee2:	6922      	ldr	r2, [r4, #16]
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	dc02      	bgt.n	8005eee <_printf_i+0x122>
 8005ee8:	2330      	movs	r3, #48	; 0x30
 8005eea:	3e01      	subs	r6, #1
 8005eec:	7033      	strb	r3, [r6, #0]
 8005eee:	9b04      	ldr	r3, [sp, #16]
 8005ef0:	1b9b      	subs	r3, r3, r6
 8005ef2:	6123      	str	r3, [r4, #16]
 8005ef4:	9b07      	ldr	r3, [sp, #28]
 8005ef6:	0021      	movs	r1, r4
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	9805      	ldr	r0, [sp, #20]
 8005efc:	9b06      	ldr	r3, [sp, #24]
 8005efe:	aa09      	add	r2, sp, #36	; 0x24
 8005f00:	f7ff fef4 	bl	8005cec <_printf_common>
 8005f04:	1c43      	adds	r3, r0, #1
 8005f06:	d14c      	bne.n	8005fa2 <_printf_i+0x1d6>
 8005f08:	2001      	movs	r0, #1
 8005f0a:	4240      	negs	r0, r0
 8005f0c:	b00b      	add	sp, #44	; 0x2c
 8005f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f10:	3145      	adds	r1, #69	; 0x45
 8005f12:	700a      	strb	r2, [r1, #0]
 8005f14:	4a34      	ldr	r2, [pc, #208]	; (8005fe8 <_printf_i+0x21c>)
 8005f16:	9203      	str	r2, [sp, #12]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	6821      	ldr	r1, [r4, #0]
 8005f1c:	ca20      	ldmia	r2!, {r5}
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	0608      	lsls	r0, r1, #24
 8005f22:	d516      	bpl.n	8005f52 <_printf_i+0x186>
 8005f24:	07cb      	lsls	r3, r1, #31
 8005f26:	d502      	bpl.n	8005f2e <_printf_i+0x162>
 8005f28:	2320      	movs	r3, #32
 8005f2a:	4319      	orrs	r1, r3
 8005f2c:	6021      	str	r1, [r4, #0]
 8005f2e:	2710      	movs	r7, #16
 8005f30:	2d00      	cmp	r5, #0
 8005f32:	d1b2      	bne.n	8005e9a <_printf_i+0xce>
 8005f34:	2320      	movs	r3, #32
 8005f36:	6822      	ldr	r2, [r4, #0]
 8005f38:	439a      	bics	r2, r3
 8005f3a:	6022      	str	r2, [r4, #0]
 8005f3c:	e7ad      	b.n	8005e9a <_printf_i+0xce>
 8005f3e:	2220      	movs	r2, #32
 8005f40:	6809      	ldr	r1, [r1, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	6022      	str	r2, [r4, #0]
 8005f46:	0022      	movs	r2, r4
 8005f48:	2178      	movs	r1, #120	; 0x78
 8005f4a:	3245      	adds	r2, #69	; 0x45
 8005f4c:	7011      	strb	r1, [r2, #0]
 8005f4e:	4a27      	ldr	r2, [pc, #156]	; (8005fec <_printf_i+0x220>)
 8005f50:	e7e1      	b.n	8005f16 <_printf_i+0x14a>
 8005f52:	0648      	lsls	r0, r1, #25
 8005f54:	d5e6      	bpl.n	8005f24 <_printf_i+0x158>
 8005f56:	b2ad      	uxth	r5, r5
 8005f58:	e7e4      	b.n	8005f24 <_printf_i+0x158>
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	680d      	ldr	r5, [r1, #0]
 8005f5e:	1d10      	adds	r0, r2, #4
 8005f60:	6949      	ldr	r1, [r1, #20]
 8005f62:	6018      	str	r0, [r3, #0]
 8005f64:	6813      	ldr	r3, [r2, #0]
 8005f66:	062e      	lsls	r6, r5, #24
 8005f68:	d501      	bpl.n	8005f6e <_printf_i+0x1a2>
 8005f6a:	6019      	str	r1, [r3, #0]
 8005f6c:	e002      	b.n	8005f74 <_printf_i+0x1a8>
 8005f6e:	066d      	lsls	r5, r5, #25
 8005f70:	d5fb      	bpl.n	8005f6a <_printf_i+0x19e>
 8005f72:	8019      	strh	r1, [r3, #0]
 8005f74:	2300      	movs	r3, #0
 8005f76:	9e04      	ldr	r6, [sp, #16]
 8005f78:	6123      	str	r3, [r4, #16]
 8005f7a:	e7bb      	b.n	8005ef4 <_printf_i+0x128>
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	1d11      	adds	r1, r2, #4
 8005f80:	6019      	str	r1, [r3, #0]
 8005f82:	6816      	ldr	r6, [r2, #0]
 8005f84:	2100      	movs	r1, #0
 8005f86:	0030      	movs	r0, r6
 8005f88:	6862      	ldr	r2, [r4, #4]
 8005f8a:	f000 facf 	bl	800652c <memchr>
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	d001      	beq.n	8005f96 <_printf_i+0x1ca>
 8005f92:	1b80      	subs	r0, r0, r6
 8005f94:	6060      	str	r0, [r4, #4]
 8005f96:	6863      	ldr	r3, [r4, #4]
 8005f98:	6123      	str	r3, [r4, #16]
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	9a04      	ldr	r2, [sp, #16]
 8005f9e:	7013      	strb	r3, [r2, #0]
 8005fa0:	e7a8      	b.n	8005ef4 <_printf_i+0x128>
 8005fa2:	6923      	ldr	r3, [r4, #16]
 8005fa4:	0032      	movs	r2, r6
 8005fa6:	9906      	ldr	r1, [sp, #24]
 8005fa8:	9805      	ldr	r0, [sp, #20]
 8005faa:	9d07      	ldr	r5, [sp, #28]
 8005fac:	47a8      	blx	r5
 8005fae:	1c43      	adds	r3, r0, #1
 8005fb0:	d0aa      	beq.n	8005f08 <_printf_i+0x13c>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	079b      	lsls	r3, r3, #30
 8005fb6:	d415      	bmi.n	8005fe4 <_printf_i+0x218>
 8005fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fba:	68e0      	ldr	r0, [r4, #12]
 8005fbc:	4298      	cmp	r0, r3
 8005fbe:	daa5      	bge.n	8005f0c <_printf_i+0x140>
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	e7a3      	b.n	8005f0c <_printf_i+0x140>
 8005fc4:	0022      	movs	r2, r4
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	9906      	ldr	r1, [sp, #24]
 8005fca:	9805      	ldr	r0, [sp, #20]
 8005fcc:	9e07      	ldr	r6, [sp, #28]
 8005fce:	3219      	adds	r2, #25
 8005fd0:	47b0      	blx	r6
 8005fd2:	1c43      	adds	r3, r0, #1
 8005fd4:	d098      	beq.n	8005f08 <_printf_i+0x13c>
 8005fd6:	3501      	adds	r5, #1
 8005fd8:	68e3      	ldr	r3, [r4, #12]
 8005fda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fdc:	1a9b      	subs	r3, r3, r2
 8005fde:	42ab      	cmp	r3, r5
 8005fe0:	dcf0      	bgt.n	8005fc4 <_printf_i+0x1f8>
 8005fe2:	e7e9      	b.n	8005fb8 <_printf_i+0x1ec>
 8005fe4:	2500      	movs	r5, #0
 8005fe6:	e7f7      	b.n	8005fd8 <_printf_i+0x20c>
 8005fe8:	08006ab1 	.word	0x08006ab1
 8005fec:	08006ac2 	.word	0x08006ac2

08005ff0 <_sbrk_r>:
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	b570      	push	{r4, r5, r6, lr}
 8005ff4:	4d06      	ldr	r5, [pc, #24]	; (8006010 <_sbrk_r+0x20>)
 8005ff6:	0004      	movs	r4, r0
 8005ff8:	0008      	movs	r0, r1
 8005ffa:	602b      	str	r3, [r5, #0]
 8005ffc:	f7fb f98c 	bl	8001318 <_sbrk>
 8006000:	1c43      	adds	r3, r0, #1
 8006002:	d103      	bne.n	800600c <_sbrk_r+0x1c>
 8006004:	682b      	ldr	r3, [r5, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d000      	beq.n	800600c <_sbrk_r+0x1c>
 800600a:	6023      	str	r3, [r4, #0]
 800600c:	bd70      	pop	{r4, r5, r6, pc}
 800600e:	46c0      	nop			; (mov r8, r8)
 8006010:	20000200 	.word	0x20000200

08006014 <__sread>:
 8006014:	b570      	push	{r4, r5, r6, lr}
 8006016:	000c      	movs	r4, r1
 8006018:	250e      	movs	r5, #14
 800601a:	5f49      	ldrsh	r1, [r1, r5]
 800601c:	f000 faec 	bl	80065f8 <_read_r>
 8006020:	2800      	cmp	r0, #0
 8006022:	db03      	blt.n	800602c <__sread+0x18>
 8006024:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006026:	181b      	adds	r3, r3, r0
 8006028:	6563      	str	r3, [r4, #84]	; 0x54
 800602a:	bd70      	pop	{r4, r5, r6, pc}
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	4a02      	ldr	r2, [pc, #8]	; (8006038 <__sread+0x24>)
 8006030:	4013      	ands	r3, r2
 8006032:	81a3      	strh	r3, [r4, #12]
 8006034:	e7f9      	b.n	800602a <__sread+0x16>
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	ffffefff 	.word	0xffffefff

0800603c <__swrite>:
 800603c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603e:	001f      	movs	r7, r3
 8006040:	898b      	ldrh	r3, [r1, #12]
 8006042:	0005      	movs	r5, r0
 8006044:	000c      	movs	r4, r1
 8006046:	0016      	movs	r6, r2
 8006048:	05db      	lsls	r3, r3, #23
 800604a:	d505      	bpl.n	8006058 <__swrite+0x1c>
 800604c:	230e      	movs	r3, #14
 800604e:	5ec9      	ldrsh	r1, [r1, r3]
 8006050:	2200      	movs	r2, #0
 8006052:	2302      	movs	r3, #2
 8006054:	f000 f9ea 	bl	800642c <_lseek_r>
 8006058:	89a3      	ldrh	r3, [r4, #12]
 800605a:	4a05      	ldr	r2, [pc, #20]	; (8006070 <__swrite+0x34>)
 800605c:	0028      	movs	r0, r5
 800605e:	4013      	ands	r3, r2
 8006060:	81a3      	strh	r3, [r4, #12]
 8006062:	0032      	movs	r2, r6
 8006064:	230e      	movs	r3, #14
 8006066:	5ee1      	ldrsh	r1, [r4, r3]
 8006068:	003b      	movs	r3, r7
 800606a:	f000 f875 	bl	8006158 <_write_r>
 800606e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006070:	ffffefff 	.word	0xffffefff

08006074 <__sseek>:
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	000c      	movs	r4, r1
 8006078:	250e      	movs	r5, #14
 800607a:	5f49      	ldrsh	r1, [r1, r5]
 800607c:	f000 f9d6 	bl	800642c <_lseek_r>
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	1c42      	adds	r2, r0, #1
 8006084:	d103      	bne.n	800608e <__sseek+0x1a>
 8006086:	4a05      	ldr	r2, [pc, #20]	; (800609c <__sseek+0x28>)
 8006088:	4013      	ands	r3, r2
 800608a:	81a3      	strh	r3, [r4, #12]
 800608c:	bd70      	pop	{r4, r5, r6, pc}
 800608e:	2280      	movs	r2, #128	; 0x80
 8006090:	0152      	lsls	r2, r2, #5
 8006092:	4313      	orrs	r3, r2
 8006094:	81a3      	strh	r3, [r4, #12]
 8006096:	6560      	str	r0, [r4, #84]	; 0x54
 8006098:	e7f8      	b.n	800608c <__sseek+0x18>
 800609a:	46c0      	nop			; (mov r8, r8)
 800609c:	ffffefff 	.word	0xffffefff

080060a0 <__sclose>:
 80060a0:	b510      	push	{r4, lr}
 80060a2:	230e      	movs	r3, #14
 80060a4:	5ec9      	ldrsh	r1, [r1, r3]
 80060a6:	f000 f8e3 	bl	8006270 <_close_r>
 80060aa:	bd10      	pop	{r4, pc}

080060ac <__swbuf_r>:
 80060ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ae:	0005      	movs	r5, r0
 80060b0:	000e      	movs	r6, r1
 80060b2:	0014      	movs	r4, r2
 80060b4:	2800      	cmp	r0, #0
 80060b6:	d004      	beq.n	80060c2 <__swbuf_r+0x16>
 80060b8:	6983      	ldr	r3, [r0, #24]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <__swbuf_r+0x16>
 80060be:	f7ff fb77 	bl	80057b0 <__sinit>
 80060c2:	4b22      	ldr	r3, [pc, #136]	; (800614c <__swbuf_r+0xa0>)
 80060c4:	429c      	cmp	r4, r3
 80060c6:	d12e      	bne.n	8006126 <__swbuf_r+0x7a>
 80060c8:	686c      	ldr	r4, [r5, #4]
 80060ca:	69a3      	ldr	r3, [r4, #24]
 80060cc:	60a3      	str	r3, [r4, #8]
 80060ce:	89a3      	ldrh	r3, [r4, #12]
 80060d0:	071b      	lsls	r3, r3, #28
 80060d2:	d532      	bpl.n	800613a <__swbuf_r+0x8e>
 80060d4:	6923      	ldr	r3, [r4, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d02f      	beq.n	800613a <__swbuf_r+0x8e>
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	6922      	ldr	r2, [r4, #16]
 80060de:	b2f7      	uxtb	r7, r6
 80060e0:	1a98      	subs	r0, r3, r2
 80060e2:	6963      	ldr	r3, [r4, #20]
 80060e4:	b2f6      	uxtb	r6, r6
 80060e6:	4283      	cmp	r3, r0
 80060e8:	dc05      	bgt.n	80060f6 <__swbuf_r+0x4a>
 80060ea:	0021      	movs	r1, r4
 80060ec:	0028      	movs	r0, r5
 80060ee:	f000 f95d 	bl	80063ac <_fflush_r>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d127      	bne.n	8006146 <__swbuf_r+0x9a>
 80060f6:	68a3      	ldr	r3, [r4, #8]
 80060f8:	3001      	adds	r0, #1
 80060fa:	3b01      	subs	r3, #1
 80060fc:	60a3      	str	r3, [r4, #8]
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	6022      	str	r2, [r4, #0]
 8006104:	701f      	strb	r7, [r3, #0]
 8006106:	6963      	ldr	r3, [r4, #20]
 8006108:	4283      	cmp	r3, r0
 800610a:	d004      	beq.n	8006116 <__swbuf_r+0x6a>
 800610c:	89a3      	ldrh	r3, [r4, #12]
 800610e:	07db      	lsls	r3, r3, #31
 8006110:	d507      	bpl.n	8006122 <__swbuf_r+0x76>
 8006112:	2e0a      	cmp	r6, #10
 8006114:	d105      	bne.n	8006122 <__swbuf_r+0x76>
 8006116:	0021      	movs	r1, r4
 8006118:	0028      	movs	r0, r5
 800611a:	f000 f947 	bl	80063ac <_fflush_r>
 800611e:	2800      	cmp	r0, #0
 8006120:	d111      	bne.n	8006146 <__swbuf_r+0x9a>
 8006122:	0030      	movs	r0, r6
 8006124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006126:	4b0a      	ldr	r3, [pc, #40]	; (8006150 <__swbuf_r+0xa4>)
 8006128:	429c      	cmp	r4, r3
 800612a:	d101      	bne.n	8006130 <__swbuf_r+0x84>
 800612c:	68ac      	ldr	r4, [r5, #8]
 800612e:	e7cc      	b.n	80060ca <__swbuf_r+0x1e>
 8006130:	4b08      	ldr	r3, [pc, #32]	; (8006154 <__swbuf_r+0xa8>)
 8006132:	429c      	cmp	r4, r3
 8006134:	d1c9      	bne.n	80060ca <__swbuf_r+0x1e>
 8006136:	68ec      	ldr	r4, [r5, #12]
 8006138:	e7c7      	b.n	80060ca <__swbuf_r+0x1e>
 800613a:	0021      	movs	r1, r4
 800613c:	0028      	movs	r0, r5
 800613e:	f000 f81f 	bl	8006180 <__swsetup_r>
 8006142:	2800      	cmp	r0, #0
 8006144:	d0c9      	beq.n	80060da <__swbuf_r+0x2e>
 8006146:	2601      	movs	r6, #1
 8006148:	4276      	negs	r6, r6
 800614a:	e7ea      	b.n	8006122 <__swbuf_r+0x76>
 800614c:	08006a60 	.word	0x08006a60
 8006150:	08006a80 	.word	0x08006a80
 8006154:	08006a40 	.word	0x08006a40

08006158 <_write_r>:
 8006158:	b570      	push	{r4, r5, r6, lr}
 800615a:	0004      	movs	r4, r0
 800615c:	0008      	movs	r0, r1
 800615e:	0011      	movs	r1, r2
 8006160:	001a      	movs	r2, r3
 8006162:	2300      	movs	r3, #0
 8006164:	4d05      	ldr	r5, [pc, #20]	; (800617c <_write_r+0x24>)
 8006166:	602b      	str	r3, [r5, #0]
 8006168:	f7fb f88d 	bl	8001286 <_write>
 800616c:	1c43      	adds	r3, r0, #1
 800616e:	d103      	bne.n	8006178 <_write_r+0x20>
 8006170:	682b      	ldr	r3, [r5, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d000      	beq.n	8006178 <_write_r+0x20>
 8006176:	6023      	str	r3, [r4, #0]
 8006178:	bd70      	pop	{r4, r5, r6, pc}
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	20000200 	.word	0x20000200

08006180 <__swsetup_r>:
 8006180:	4b37      	ldr	r3, [pc, #220]	; (8006260 <__swsetup_r+0xe0>)
 8006182:	b570      	push	{r4, r5, r6, lr}
 8006184:	681d      	ldr	r5, [r3, #0]
 8006186:	0006      	movs	r6, r0
 8006188:	000c      	movs	r4, r1
 800618a:	2d00      	cmp	r5, #0
 800618c:	d005      	beq.n	800619a <__swsetup_r+0x1a>
 800618e:	69ab      	ldr	r3, [r5, #24]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d102      	bne.n	800619a <__swsetup_r+0x1a>
 8006194:	0028      	movs	r0, r5
 8006196:	f7ff fb0b 	bl	80057b0 <__sinit>
 800619a:	4b32      	ldr	r3, [pc, #200]	; (8006264 <__swsetup_r+0xe4>)
 800619c:	429c      	cmp	r4, r3
 800619e:	d10f      	bne.n	80061c0 <__swsetup_r+0x40>
 80061a0:	686c      	ldr	r4, [r5, #4]
 80061a2:	230c      	movs	r3, #12
 80061a4:	5ee2      	ldrsh	r2, [r4, r3]
 80061a6:	b293      	uxth	r3, r2
 80061a8:	0711      	lsls	r1, r2, #28
 80061aa:	d42d      	bmi.n	8006208 <__swsetup_r+0x88>
 80061ac:	06d9      	lsls	r1, r3, #27
 80061ae:	d411      	bmi.n	80061d4 <__swsetup_r+0x54>
 80061b0:	2309      	movs	r3, #9
 80061b2:	2001      	movs	r0, #1
 80061b4:	6033      	str	r3, [r6, #0]
 80061b6:	3337      	adds	r3, #55	; 0x37
 80061b8:	4313      	orrs	r3, r2
 80061ba:	81a3      	strh	r3, [r4, #12]
 80061bc:	4240      	negs	r0, r0
 80061be:	bd70      	pop	{r4, r5, r6, pc}
 80061c0:	4b29      	ldr	r3, [pc, #164]	; (8006268 <__swsetup_r+0xe8>)
 80061c2:	429c      	cmp	r4, r3
 80061c4:	d101      	bne.n	80061ca <__swsetup_r+0x4a>
 80061c6:	68ac      	ldr	r4, [r5, #8]
 80061c8:	e7eb      	b.n	80061a2 <__swsetup_r+0x22>
 80061ca:	4b28      	ldr	r3, [pc, #160]	; (800626c <__swsetup_r+0xec>)
 80061cc:	429c      	cmp	r4, r3
 80061ce:	d1e8      	bne.n	80061a2 <__swsetup_r+0x22>
 80061d0:	68ec      	ldr	r4, [r5, #12]
 80061d2:	e7e6      	b.n	80061a2 <__swsetup_r+0x22>
 80061d4:	075b      	lsls	r3, r3, #29
 80061d6:	d513      	bpl.n	8006200 <__swsetup_r+0x80>
 80061d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061da:	2900      	cmp	r1, #0
 80061dc:	d008      	beq.n	80061f0 <__swsetup_r+0x70>
 80061de:	0023      	movs	r3, r4
 80061e0:	3344      	adds	r3, #68	; 0x44
 80061e2:	4299      	cmp	r1, r3
 80061e4:	d002      	beq.n	80061ec <__swsetup_r+0x6c>
 80061e6:	0030      	movs	r0, r6
 80061e8:	f000 f9bc 	bl	8006564 <_free_r>
 80061ec:	2300      	movs	r3, #0
 80061ee:	6363      	str	r3, [r4, #52]	; 0x34
 80061f0:	2224      	movs	r2, #36	; 0x24
 80061f2:	89a3      	ldrh	r3, [r4, #12]
 80061f4:	4393      	bics	r3, r2
 80061f6:	81a3      	strh	r3, [r4, #12]
 80061f8:	2300      	movs	r3, #0
 80061fa:	6063      	str	r3, [r4, #4]
 80061fc:	6923      	ldr	r3, [r4, #16]
 80061fe:	6023      	str	r3, [r4, #0]
 8006200:	2308      	movs	r3, #8
 8006202:	89a2      	ldrh	r2, [r4, #12]
 8006204:	4313      	orrs	r3, r2
 8006206:	81a3      	strh	r3, [r4, #12]
 8006208:	6923      	ldr	r3, [r4, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10b      	bne.n	8006226 <__swsetup_r+0xa6>
 800620e:	21a0      	movs	r1, #160	; 0xa0
 8006210:	2280      	movs	r2, #128	; 0x80
 8006212:	89a3      	ldrh	r3, [r4, #12]
 8006214:	0089      	lsls	r1, r1, #2
 8006216:	0092      	lsls	r2, r2, #2
 8006218:	400b      	ands	r3, r1
 800621a:	4293      	cmp	r3, r2
 800621c:	d003      	beq.n	8006226 <__swsetup_r+0xa6>
 800621e:	0021      	movs	r1, r4
 8006220:	0030      	movs	r0, r6
 8006222:	f000 f93f 	bl	80064a4 <__smakebuf_r>
 8006226:	220c      	movs	r2, #12
 8006228:	5ea3      	ldrsh	r3, [r4, r2]
 800622a:	2001      	movs	r0, #1
 800622c:	001a      	movs	r2, r3
 800622e:	b299      	uxth	r1, r3
 8006230:	4002      	ands	r2, r0
 8006232:	4203      	tst	r3, r0
 8006234:	d00f      	beq.n	8006256 <__swsetup_r+0xd6>
 8006236:	2200      	movs	r2, #0
 8006238:	60a2      	str	r2, [r4, #8]
 800623a:	6962      	ldr	r2, [r4, #20]
 800623c:	4252      	negs	r2, r2
 800623e:	61a2      	str	r2, [r4, #24]
 8006240:	2000      	movs	r0, #0
 8006242:	6922      	ldr	r2, [r4, #16]
 8006244:	4282      	cmp	r2, r0
 8006246:	d1ba      	bne.n	80061be <__swsetup_r+0x3e>
 8006248:	060a      	lsls	r2, r1, #24
 800624a:	d5b8      	bpl.n	80061be <__swsetup_r+0x3e>
 800624c:	2240      	movs	r2, #64	; 0x40
 800624e:	4313      	orrs	r3, r2
 8006250:	81a3      	strh	r3, [r4, #12]
 8006252:	3801      	subs	r0, #1
 8006254:	e7b3      	b.n	80061be <__swsetup_r+0x3e>
 8006256:	0788      	lsls	r0, r1, #30
 8006258:	d400      	bmi.n	800625c <__swsetup_r+0xdc>
 800625a:	6962      	ldr	r2, [r4, #20]
 800625c:	60a2      	str	r2, [r4, #8]
 800625e:	e7ef      	b.n	8006240 <__swsetup_r+0xc0>
 8006260:	2000003c 	.word	0x2000003c
 8006264:	08006a60 	.word	0x08006a60
 8006268:	08006a80 	.word	0x08006a80
 800626c:	08006a40 	.word	0x08006a40

08006270 <_close_r>:
 8006270:	2300      	movs	r3, #0
 8006272:	b570      	push	{r4, r5, r6, lr}
 8006274:	4d06      	ldr	r5, [pc, #24]	; (8006290 <_close_r+0x20>)
 8006276:	0004      	movs	r4, r0
 8006278:	0008      	movs	r0, r1
 800627a:	602b      	str	r3, [r5, #0]
 800627c:	f7fb f81f 	bl	80012be <_close>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	d103      	bne.n	800628c <_close_r+0x1c>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d000      	beq.n	800628c <_close_r+0x1c>
 800628a:	6023      	str	r3, [r4, #0]
 800628c:	bd70      	pop	{r4, r5, r6, pc}
 800628e:	46c0      	nop			; (mov r8, r8)
 8006290:	20000200 	.word	0x20000200

08006294 <__sflush_r>:
 8006294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006296:	898b      	ldrh	r3, [r1, #12]
 8006298:	0005      	movs	r5, r0
 800629a:	000c      	movs	r4, r1
 800629c:	071a      	lsls	r2, r3, #28
 800629e:	d45f      	bmi.n	8006360 <__sflush_r+0xcc>
 80062a0:	684a      	ldr	r2, [r1, #4]
 80062a2:	2a00      	cmp	r2, #0
 80062a4:	dc04      	bgt.n	80062b0 <__sflush_r+0x1c>
 80062a6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80062a8:	2a00      	cmp	r2, #0
 80062aa:	dc01      	bgt.n	80062b0 <__sflush_r+0x1c>
 80062ac:	2000      	movs	r0, #0
 80062ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062b0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80062b2:	2f00      	cmp	r7, #0
 80062b4:	d0fa      	beq.n	80062ac <__sflush_r+0x18>
 80062b6:	2200      	movs	r2, #0
 80062b8:	2180      	movs	r1, #128	; 0x80
 80062ba:	682e      	ldr	r6, [r5, #0]
 80062bc:	602a      	str	r2, [r5, #0]
 80062be:	001a      	movs	r2, r3
 80062c0:	0149      	lsls	r1, r1, #5
 80062c2:	400a      	ands	r2, r1
 80062c4:	420b      	tst	r3, r1
 80062c6:	d034      	beq.n	8006332 <__sflush_r+0x9e>
 80062c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062ca:	89a3      	ldrh	r3, [r4, #12]
 80062cc:	075b      	lsls	r3, r3, #29
 80062ce:	d506      	bpl.n	80062de <__sflush_r+0x4a>
 80062d0:	6863      	ldr	r3, [r4, #4]
 80062d2:	1ac0      	subs	r0, r0, r3
 80062d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <__sflush_r+0x4a>
 80062da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062dc:	1ac0      	subs	r0, r0, r3
 80062de:	0002      	movs	r2, r0
 80062e0:	6a21      	ldr	r1, [r4, #32]
 80062e2:	2300      	movs	r3, #0
 80062e4:	0028      	movs	r0, r5
 80062e6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80062e8:	47b8      	blx	r7
 80062ea:	89a1      	ldrh	r1, [r4, #12]
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d106      	bne.n	80062fe <__sflush_r+0x6a>
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	2b1d      	cmp	r3, #29
 80062f4:	d831      	bhi.n	800635a <__sflush_r+0xc6>
 80062f6:	4a2c      	ldr	r2, [pc, #176]	; (80063a8 <__sflush_r+0x114>)
 80062f8:	40da      	lsrs	r2, r3
 80062fa:	07d3      	lsls	r3, r2, #31
 80062fc:	d52d      	bpl.n	800635a <__sflush_r+0xc6>
 80062fe:	2300      	movs	r3, #0
 8006300:	6063      	str	r3, [r4, #4]
 8006302:	6923      	ldr	r3, [r4, #16]
 8006304:	6023      	str	r3, [r4, #0]
 8006306:	04cb      	lsls	r3, r1, #19
 8006308:	d505      	bpl.n	8006316 <__sflush_r+0x82>
 800630a:	1c43      	adds	r3, r0, #1
 800630c:	d102      	bne.n	8006314 <__sflush_r+0x80>
 800630e:	682b      	ldr	r3, [r5, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d100      	bne.n	8006316 <__sflush_r+0x82>
 8006314:	6560      	str	r0, [r4, #84]	; 0x54
 8006316:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006318:	602e      	str	r6, [r5, #0]
 800631a:	2900      	cmp	r1, #0
 800631c:	d0c6      	beq.n	80062ac <__sflush_r+0x18>
 800631e:	0023      	movs	r3, r4
 8006320:	3344      	adds	r3, #68	; 0x44
 8006322:	4299      	cmp	r1, r3
 8006324:	d002      	beq.n	800632c <__sflush_r+0x98>
 8006326:	0028      	movs	r0, r5
 8006328:	f000 f91c 	bl	8006564 <_free_r>
 800632c:	2000      	movs	r0, #0
 800632e:	6360      	str	r0, [r4, #52]	; 0x34
 8006330:	e7bd      	b.n	80062ae <__sflush_r+0x1a>
 8006332:	2301      	movs	r3, #1
 8006334:	0028      	movs	r0, r5
 8006336:	6a21      	ldr	r1, [r4, #32]
 8006338:	47b8      	blx	r7
 800633a:	1c43      	adds	r3, r0, #1
 800633c:	d1c5      	bne.n	80062ca <__sflush_r+0x36>
 800633e:	682b      	ldr	r3, [r5, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d0c2      	beq.n	80062ca <__sflush_r+0x36>
 8006344:	2b1d      	cmp	r3, #29
 8006346:	d001      	beq.n	800634c <__sflush_r+0xb8>
 8006348:	2b16      	cmp	r3, #22
 800634a:	d101      	bne.n	8006350 <__sflush_r+0xbc>
 800634c:	602e      	str	r6, [r5, #0]
 800634e:	e7ad      	b.n	80062ac <__sflush_r+0x18>
 8006350:	2340      	movs	r3, #64	; 0x40
 8006352:	89a2      	ldrh	r2, [r4, #12]
 8006354:	4313      	orrs	r3, r2
 8006356:	81a3      	strh	r3, [r4, #12]
 8006358:	e7a9      	b.n	80062ae <__sflush_r+0x1a>
 800635a:	2340      	movs	r3, #64	; 0x40
 800635c:	430b      	orrs	r3, r1
 800635e:	e7fa      	b.n	8006356 <__sflush_r+0xc2>
 8006360:	690f      	ldr	r7, [r1, #16]
 8006362:	2f00      	cmp	r7, #0
 8006364:	d0a2      	beq.n	80062ac <__sflush_r+0x18>
 8006366:	680a      	ldr	r2, [r1, #0]
 8006368:	600f      	str	r7, [r1, #0]
 800636a:	1bd2      	subs	r2, r2, r7
 800636c:	9201      	str	r2, [sp, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	079b      	lsls	r3, r3, #30
 8006372:	d100      	bne.n	8006376 <__sflush_r+0xe2>
 8006374:	694a      	ldr	r2, [r1, #20]
 8006376:	60a2      	str	r2, [r4, #8]
 8006378:	9b01      	ldr	r3, [sp, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	dc00      	bgt.n	8006380 <__sflush_r+0xec>
 800637e:	e795      	b.n	80062ac <__sflush_r+0x18>
 8006380:	003a      	movs	r2, r7
 8006382:	0028      	movs	r0, r5
 8006384:	9b01      	ldr	r3, [sp, #4]
 8006386:	6a21      	ldr	r1, [r4, #32]
 8006388:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800638a:	47b0      	blx	r6
 800638c:	2800      	cmp	r0, #0
 800638e:	dc06      	bgt.n	800639e <__sflush_r+0x10a>
 8006390:	2340      	movs	r3, #64	; 0x40
 8006392:	2001      	movs	r0, #1
 8006394:	89a2      	ldrh	r2, [r4, #12]
 8006396:	4240      	negs	r0, r0
 8006398:	4313      	orrs	r3, r2
 800639a:	81a3      	strh	r3, [r4, #12]
 800639c:	e787      	b.n	80062ae <__sflush_r+0x1a>
 800639e:	9b01      	ldr	r3, [sp, #4]
 80063a0:	183f      	adds	r7, r7, r0
 80063a2:	1a1b      	subs	r3, r3, r0
 80063a4:	9301      	str	r3, [sp, #4]
 80063a6:	e7e7      	b.n	8006378 <__sflush_r+0xe4>
 80063a8:	20400001 	.word	0x20400001

080063ac <_fflush_r>:
 80063ac:	690b      	ldr	r3, [r1, #16]
 80063ae:	b570      	push	{r4, r5, r6, lr}
 80063b0:	0005      	movs	r5, r0
 80063b2:	000c      	movs	r4, r1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d102      	bne.n	80063be <_fflush_r+0x12>
 80063b8:	2500      	movs	r5, #0
 80063ba:	0028      	movs	r0, r5
 80063bc:	bd70      	pop	{r4, r5, r6, pc}
 80063be:	2800      	cmp	r0, #0
 80063c0:	d004      	beq.n	80063cc <_fflush_r+0x20>
 80063c2:	6983      	ldr	r3, [r0, #24]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <_fflush_r+0x20>
 80063c8:	f7ff f9f2 	bl	80057b0 <__sinit>
 80063cc:	4b14      	ldr	r3, [pc, #80]	; (8006420 <_fflush_r+0x74>)
 80063ce:	429c      	cmp	r4, r3
 80063d0:	d11b      	bne.n	800640a <_fflush_r+0x5e>
 80063d2:	686c      	ldr	r4, [r5, #4]
 80063d4:	220c      	movs	r2, #12
 80063d6:	5ea3      	ldrsh	r3, [r4, r2]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0ed      	beq.n	80063b8 <_fflush_r+0xc>
 80063dc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063de:	07d2      	lsls	r2, r2, #31
 80063e0:	d404      	bmi.n	80063ec <_fflush_r+0x40>
 80063e2:	059b      	lsls	r3, r3, #22
 80063e4:	d402      	bmi.n	80063ec <_fflush_r+0x40>
 80063e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063e8:	f7ff fa83 	bl	80058f2 <__retarget_lock_acquire_recursive>
 80063ec:	0028      	movs	r0, r5
 80063ee:	0021      	movs	r1, r4
 80063f0:	f7ff ff50 	bl	8006294 <__sflush_r>
 80063f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063f6:	0005      	movs	r5, r0
 80063f8:	07db      	lsls	r3, r3, #31
 80063fa:	d4de      	bmi.n	80063ba <_fflush_r+0xe>
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	059b      	lsls	r3, r3, #22
 8006400:	d4db      	bmi.n	80063ba <_fflush_r+0xe>
 8006402:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006404:	f7ff fa76 	bl	80058f4 <__retarget_lock_release_recursive>
 8006408:	e7d7      	b.n	80063ba <_fflush_r+0xe>
 800640a:	4b06      	ldr	r3, [pc, #24]	; (8006424 <_fflush_r+0x78>)
 800640c:	429c      	cmp	r4, r3
 800640e:	d101      	bne.n	8006414 <_fflush_r+0x68>
 8006410:	68ac      	ldr	r4, [r5, #8]
 8006412:	e7df      	b.n	80063d4 <_fflush_r+0x28>
 8006414:	4b04      	ldr	r3, [pc, #16]	; (8006428 <_fflush_r+0x7c>)
 8006416:	429c      	cmp	r4, r3
 8006418:	d1dc      	bne.n	80063d4 <_fflush_r+0x28>
 800641a:	68ec      	ldr	r4, [r5, #12]
 800641c:	e7da      	b.n	80063d4 <_fflush_r+0x28>
 800641e:	46c0      	nop			; (mov r8, r8)
 8006420:	08006a60 	.word	0x08006a60
 8006424:	08006a80 	.word	0x08006a80
 8006428:	08006a40 	.word	0x08006a40

0800642c <_lseek_r>:
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	0004      	movs	r4, r0
 8006430:	0008      	movs	r0, r1
 8006432:	0011      	movs	r1, r2
 8006434:	001a      	movs	r2, r3
 8006436:	2300      	movs	r3, #0
 8006438:	4d05      	ldr	r5, [pc, #20]	; (8006450 <_lseek_r+0x24>)
 800643a:	602b      	str	r3, [r5, #0]
 800643c:	f7fa ff60 	bl	8001300 <_lseek>
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	d103      	bne.n	800644c <_lseek_r+0x20>
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d000      	beq.n	800644c <_lseek_r+0x20>
 800644a:	6023      	str	r3, [r4, #0]
 800644c:	bd70      	pop	{r4, r5, r6, pc}
 800644e:	46c0      	nop			; (mov r8, r8)
 8006450:	20000200 	.word	0x20000200

08006454 <__swhatbuf_r>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	000e      	movs	r6, r1
 8006458:	001d      	movs	r5, r3
 800645a:	230e      	movs	r3, #14
 800645c:	5ec9      	ldrsh	r1, [r1, r3]
 800645e:	0014      	movs	r4, r2
 8006460:	b096      	sub	sp, #88	; 0x58
 8006462:	2900      	cmp	r1, #0
 8006464:	da08      	bge.n	8006478 <__swhatbuf_r+0x24>
 8006466:	220c      	movs	r2, #12
 8006468:	5eb3      	ldrsh	r3, [r6, r2]
 800646a:	2200      	movs	r2, #0
 800646c:	602a      	str	r2, [r5, #0]
 800646e:	061b      	lsls	r3, r3, #24
 8006470:	d411      	bmi.n	8006496 <__swhatbuf_r+0x42>
 8006472:	2380      	movs	r3, #128	; 0x80
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	e00f      	b.n	8006498 <__swhatbuf_r+0x44>
 8006478:	466a      	mov	r2, sp
 800647a:	f000 f8d1 	bl	8006620 <_fstat_r>
 800647e:	2800      	cmp	r0, #0
 8006480:	dbf1      	blt.n	8006466 <__swhatbuf_r+0x12>
 8006482:	23f0      	movs	r3, #240	; 0xf0
 8006484:	9901      	ldr	r1, [sp, #4]
 8006486:	021b      	lsls	r3, r3, #8
 8006488:	4019      	ands	r1, r3
 800648a:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <__swhatbuf_r+0x4c>)
 800648c:	18c9      	adds	r1, r1, r3
 800648e:	424b      	negs	r3, r1
 8006490:	4159      	adcs	r1, r3
 8006492:	6029      	str	r1, [r5, #0]
 8006494:	e7ed      	b.n	8006472 <__swhatbuf_r+0x1e>
 8006496:	2340      	movs	r3, #64	; 0x40
 8006498:	2000      	movs	r0, #0
 800649a:	6023      	str	r3, [r4, #0]
 800649c:	b016      	add	sp, #88	; 0x58
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	ffffe000 	.word	0xffffe000

080064a4 <__smakebuf_r>:
 80064a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064a6:	2602      	movs	r6, #2
 80064a8:	898b      	ldrh	r3, [r1, #12]
 80064aa:	0005      	movs	r5, r0
 80064ac:	000c      	movs	r4, r1
 80064ae:	4233      	tst	r3, r6
 80064b0:	d006      	beq.n	80064c0 <__smakebuf_r+0x1c>
 80064b2:	0023      	movs	r3, r4
 80064b4:	3347      	adds	r3, #71	; 0x47
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	6123      	str	r3, [r4, #16]
 80064ba:	2301      	movs	r3, #1
 80064bc:	6163      	str	r3, [r4, #20]
 80064be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80064c0:	466a      	mov	r2, sp
 80064c2:	ab01      	add	r3, sp, #4
 80064c4:	f7ff ffc6 	bl	8006454 <__swhatbuf_r>
 80064c8:	9900      	ldr	r1, [sp, #0]
 80064ca:	0007      	movs	r7, r0
 80064cc:	0028      	movs	r0, r5
 80064ce:	f7ff fa35 	bl	800593c <_malloc_r>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	d108      	bne.n	80064e8 <__smakebuf_r+0x44>
 80064d6:	220c      	movs	r2, #12
 80064d8:	5ea3      	ldrsh	r3, [r4, r2]
 80064da:	059a      	lsls	r2, r3, #22
 80064dc:	d4ef      	bmi.n	80064be <__smakebuf_r+0x1a>
 80064de:	2203      	movs	r2, #3
 80064e0:	4393      	bics	r3, r2
 80064e2:	431e      	orrs	r6, r3
 80064e4:	81a6      	strh	r6, [r4, #12]
 80064e6:	e7e4      	b.n	80064b2 <__smakebuf_r+0xe>
 80064e8:	4b0f      	ldr	r3, [pc, #60]	; (8006528 <__smakebuf_r+0x84>)
 80064ea:	62ab      	str	r3, [r5, #40]	; 0x28
 80064ec:	2380      	movs	r3, #128	; 0x80
 80064ee:	89a2      	ldrh	r2, [r4, #12]
 80064f0:	6020      	str	r0, [r4, #0]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	81a3      	strh	r3, [r4, #12]
 80064f6:	9b00      	ldr	r3, [sp, #0]
 80064f8:	6120      	str	r0, [r4, #16]
 80064fa:	6163      	str	r3, [r4, #20]
 80064fc:	9b01      	ldr	r3, [sp, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00d      	beq.n	800651e <__smakebuf_r+0x7a>
 8006502:	0028      	movs	r0, r5
 8006504:	230e      	movs	r3, #14
 8006506:	5ee1      	ldrsh	r1, [r4, r3]
 8006508:	f000 f89c 	bl	8006644 <_isatty_r>
 800650c:	2800      	cmp	r0, #0
 800650e:	d006      	beq.n	800651e <__smakebuf_r+0x7a>
 8006510:	2203      	movs	r2, #3
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	4393      	bics	r3, r2
 8006516:	001a      	movs	r2, r3
 8006518:	2301      	movs	r3, #1
 800651a:	4313      	orrs	r3, r2
 800651c:	81a3      	strh	r3, [r4, #12]
 800651e:	89a0      	ldrh	r0, [r4, #12]
 8006520:	4307      	orrs	r7, r0
 8006522:	81a7      	strh	r7, [r4, #12]
 8006524:	e7cb      	b.n	80064be <__smakebuf_r+0x1a>
 8006526:	46c0      	nop			; (mov r8, r8)
 8006528:	08005735 	.word	0x08005735

0800652c <memchr>:
 800652c:	b2c9      	uxtb	r1, r1
 800652e:	1882      	adds	r2, r0, r2
 8006530:	4290      	cmp	r0, r2
 8006532:	d101      	bne.n	8006538 <memchr+0xc>
 8006534:	2000      	movs	r0, #0
 8006536:	4770      	bx	lr
 8006538:	7803      	ldrb	r3, [r0, #0]
 800653a:	428b      	cmp	r3, r1
 800653c:	d0fb      	beq.n	8006536 <memchr+0xa>
 800653e:	3001      	adds	r0, #1
 8006540:	e7f6      	b.n	8006530 <memchr+0x4>
	...

08006544 <__malloc_lock>:
 8006544:	b510      	push	{r4, lr}
 8006546:	4802      	ldr	r0, [pc, #8]	; (8006550 <__malloc_lock+0xc>)
 8006548:	f7ff f9d3 	bl	80058f2 <__retarget_lock_acquire_recursive>
 800654c:	bd10      	pop	{r4, pc}
 800654e:	46c0      	nop			; (mov r8, r8)
 8006550:	200001f4 	.word	0x200001f4

08006554 <__malloc_unlock>:
 8006554:	b510      	push	{r4, lr}
 8006556:	4802      	ldr	r0, [pc, #8]	; (8006560 <__malloc_unlock+0xc>)
 8006558:	f7ff f9cc 	bl	80058f4 <__retarget_lock_release_recursive>
 800655c:	bd10      	pop	{r4, pc}
 800655e:	46c0      	nop			; (mov r8, r8)
 8006560:	200001f4 	.word	0x200001f4

08006564 <_free_r>:
 8006564:	b570      	push	{r4, r5, r6, lr}
 8006566:	0005      	movs	r5, r0
 8006568:	2900      	cmp	r1, #0
 800656a:	d010      	beq.n	800658e <_free_r+0x2a>
 800656c:	1f0c      	subs	r4, r1, #4
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	da00      	bge.n	8006576 <_free_r+0x12>
 8006574:	18e4      	adds	r4, r4, r3
 8006576:	0028      	movs	r0, r5
 8006578:	f7ff ffe4 	bl	8006544 <__malloc_lock>
 800657c:	4a1d      	ldr	r2, [pc, #116]	; (80065f4 <_free_r+0x90>)
 800657e:	6813      	ldr	r3, [r2, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d105      	bne.n	8006590 <_free_r+0x2c>
 8006584:	6063      	str	r3, [r4, #4]
 8006586:	6014      	str	r4, [r2, #0]
 8006588:	0028      	movs	r0, r5
 800658a:	f7ff ffe3 	bl	8006554 <__malloc_unlock>
 800658e:	bd70      	pop	{r4, r5, r6, pc}
 8006590:	42a3      	cmp	r3, r4
 8006592:	d908      	bls.n	80065a6 <_free_r+0x42>
 8006594:	6821      	ldr	r1, [r4, #0]
 8006596:	1860      	adds	r0, r4, r1
 8006598:	4283      	cmp	r3, r0
 800659a:	d1f3      	bne.n	8006584 <_free_r+0x20>
 800659c:	6818      	ldr	r0, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	1841      	adds	r1, r0, r1
 80065a2:	6021      	str	r1, [r4, #0]
 80065a4:	e7ee      	b.n	8006584 <_free_r+0x20>
 80065a6:	001a      	movs	r2, r3
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <_free_r+0x4e>
 80065ae:	42a3      	cmp	r3, r4
 80065b0:	d9f9      	bls.n	80065a6 <_free_r+0x42>
 80065b2:	6811      	ldr	r1, [r2, #0]
 80065b4:	1850      	adds	r0, r2, r1
 80065b6:	42a0      	cmp	r0, r4
 80065b8:	d10b      	bne.n	80065d2 <_free_r+0x6e>
 80065ba:	6820      	ldr	r0, [r4, #0]
 80065bc:	1809      	adds	r1, r1, r0
 80065be:	1850      	adds	r0, r2, r1
 80065c0:	6011      	str	r1, [r2, #0]
 80065c2:	4283      	cmp	r3, r0
 80065c4:	d1e0      	bne.n	8006588 <_free_r+0x24>
 80065c6:	6818      	ldr	r0, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	1841      	adds	r1, r0, r1
 80065cc:	6011      	str	r1, [r2, #0]
 80065ce:	6053      	str	r3, [r2, #4]
 80065d0:	e7da      	b.n	8006588 <_free_r+0x24>
 80065d2:	42a0      	cmp	r0, r4
 80065d4:	d902      	bls.n	80065dc <_free_r+0x78>
 80065d6:	230c      	movs	r3, #12
 80065d8:	602b      	str	r3, [r5, #0]
 80065da:	e7d5      	b.n	8006588 <_free_r+0x24>
 80065dc:	6821      	ldr	r1, [r4, #0]
 80065de:	1860      	adds	r0, r4, r1
 80065e0:	4283      	cmp	r3, r0
 80065e2:	d103      	bne.n	80065ec <_free_r+0x88>
 80065e4:	6818      	ldr	r0, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	1841      	adds	r1, r0, r1
 80065ea:	6021      	str	r1, [r4, #0]
 80065ec:	6063      	str	r3, [r4, #4]
 80065ee:	6054      	str	r4, [r2, #4]
 80065f0:	e7ca      	b.n	8006588 <_free_r+0x24>
 80065f2:	46c0      	nop			; (mov r8, r8)
 80065f4:	200001f8 	.word	0x200001f8

080065f8 <_read_r>:
 80065f8:	b570      	push	{r4, r5, r6, lr}
 80065fa:	0004      	movs	r4, r0
 80065fc:	0008      	movs	r0, r1
 80065fe:	0011      	movs	r1, r2
 8006600:	001a      	movs	r2, r3
 8006602:	2300      	movs	r3, #0
 8006604:	4d05      	ldr	r5, [pc, #20]	; (800661c <_read_r+0x24>)
 8006606:	602b      	str	r3, [r5, #0]
 8006608:	f7fa fe20 	bl	800124c <_read>
 800660c:	1c43      	adds	r3, r0, #1
 800660e:	d103      	bne.n	8006618 <_read_r+0x20>
 8006610:	682b      	ldr	r3, [r5, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d000      	beq.n	8006618 <_read_r+0x20>
 8006616:	6023      	str	r3, [r4, #0]
 8006618:	bd70      	pop	{r4, r5, r6, pc}
 800661a:	46c0      	nop			; (mov r8, r8)
 800661c:	20000200 	.word	0x20000200

08006620 <_fstat_r>:
 8006620:	2300      	movs	r3, #0
 8006622:	b570      	push	{r4, r5, r6, lr}
 8006624:	4d06      	ldr	r5, [pc, #24]	; (8006640 <_fstat_r+0x20>)
 8006626:	0004      	movs	r4, r0
 8006628:	0008      	movs	r0, r1
 800662a:	0011      	movs	r1, r2
 800662c:	602b      	str	r3, [r5, #0]
 800662e:	f7fa fe50 	bl	80012d2 <_fstat>
 8006632:	1c43      	adds	r3, r0, #1
 8006634:	d103      	bne.n	800663e <_fstat_r+0x1e>
 8006636:	682b      	ldr	r3, [r5, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d000      	beq.n	800663e <_fstat_r+0x1e>
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	bd70      	pop	{r4, r5, r6, pc}
 8006640:	20000200 	.word	0x20000200

08006644 <_isatty_r>:
 8006644:	2300      	movs	r3, #0
 8006646:	b570      	push	{r4, r5, r6, lr}
 8006648:	4d06      	ldr	r5, [pc, #24]	; (8006664 <_isatty_r+0x20>)
 800664a:	0004      	movs	r4, r0
 800664c:	0008      	movs	r0, r1
 800664e:	602b      	str	r3, [r5, #0]
 8006650:	f7fa fe4d 	bl	80012ee <_isatty>
 8006654:	1c43      	adds	r3, r0, #1
 8006656:	d103      	bne.n	8006660 <_isatty_r+0x1c>
 8006658:	682b      	ldr	r3, [r5, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d000      	beq.n	8006660 <_isatty_r+0x1c>
 800665e:	6023      	str	r3, [r4, #0]
 8006660:	bd70      	pop	{r4, r5, r6, pc}
 8006662:	46c0      	nop			; (mov r8, r8)
 8006664:	20000200 	.word	0x20000200

08006668 <_init>:
 8006668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666a:	46c0      	nop			; (mov r8, r8)
 800666c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666e:	bc08      	pop	{r3}
 8006670:	469e      	mov	lr, r3
 8006672:	4770      	bx	lr

08006674 <_fini>:
 8006674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006676:	46c0      	nop			; (mov r8, r8)
 8006678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667a:	bc08      	pop	{r3}
 800667c:	469e      	mov	lr, r3
 800667e:	4770      	bx	lr
